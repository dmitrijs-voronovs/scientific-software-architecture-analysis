id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:205341,Deployability,integrat,integration,205341,ns. In the orbital updates controls the RMS of the SCF error vector. Type: conv double; Default: 1e-10. R_CONVERGENCE (DETCI)¶DETCI — Convergence criterion for CI residual vector in the Davidson algorithm (RMS error). The default is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. R_CONVERGENCE (DFOCC)¶DFOCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (DLPNO)¶DLPNO — Residual convergence criteria for local MP2 iterations. Type: conv double; Default: 1e-6. R_CONVERGENCE (FNOCC)¶FNOCC — Convergence for the CC amplitudes. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-7. R_CONVERGENCE (OCC)¶OCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (PSIMRCC)¶PSIMRCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-9. R_POINTS (SCF)¶SCF — Number of radial grid points for spherical potential integration. Type: integer; Default: 100. RADIUS (SCF)¶SCF — Radius (bohr) of a hard-sphere external potential. Type: double; Default: 10.0. RANGED_BEND (OPTKING)¶OPTKING — Specify range for angles between atoms to be constrained to (eq. value specified) analogous to the previous FIXED_BEND. Type: string; Default: No Default. RANGED_DIHEDRAL (OPTKING)¶OPTKING — Specify range for the dihedral angles between atoms to be constrained to (eq. value specified) analogous to the previous FIXED_DIHEDRAL. Type: string; Default: No Default. RANGED_DISTANCE (OPTKING)¶OPTKING — Specify range for distances between atoms to be constrained to (eq. value specified) analogous to the previous FIXED_DISTANCE. Type: string; Default: No Default. RANGED_OOFP (OPTKING)¶OPTKING — Specify range for the out-of-plane angles between atoms to be constrained to (eq. value specified) analogous to the old FIXED_<COORD> keyword. Type: string; Default: No Default. RAS1 (GLOBALS)¶GLOBALS (E,MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:209259,Deployability,update,update,209259," TWOCON, MCSCF, GENERAL; Default: RHF. REFERENCE (SCF)¶SCF — Reference wavefunction type. Cfour Interface: Keyword translates into CFOUR_REFERENCE. Type: string; Possible Values: RHF, ROHF, UHF, CUHF, RKS, UKS; Default: RHF. REFERENCE_SYM (DETCI)¶DETCI (Expert) — Irrep for CI vectors; -1 = find automatically. This option allows the user to look for CI vectors of a different irrep than the reference. This probably only makes sense for Full CI, and it would probably not work with unit vector guesses. Numbering starts from zero for the totally-symmetric irrep. Type: integer; Default: -1. REG_PARAM (DFOCC)¶DFOCC — Regularization parameter. Type: double; Default: 0.4. REGULARIZATION (DFOCC)¶DFOCC — Do use regularized denominators?. Type: boolean; Default: false. RELATIVISTIC (GLOBALS)¶GLOBALS (Expert) — Relativistic Hamiltonian type. Type: string; Possible Values: NO, X2C; Default: NO. RELAX_GUESS_ORBITALS (DCT)¶DCT (Expert) — Controls whether to relax the guess orbitals by taking the guess density cumulant and performing orbital update on the first macroiteration (for ALOGRITHM = TWOSTEP only). Type: boolean; Default: false. RELAXED (OCC)¶OCC — Do consider orbital response contributions for PDMs and GFM?. Type: boolean; Default: true. REMP_A (DFOCC)¶DFOCC — mixing parameter for the REMP hybrid perturbation theory, A specifies the Moller-Plesset fraction. Type: double; Default: 0.15e0. REMP_A (OCC)¶OCC — mixing parameter for the REMP hybrid perturbation theory, A specifies the Moller-Plesset fraction. Type: double; Default: 0.15e0. REPL_OTF (DETCI)¶DETCI (Expert) — Do string replacements on the fly in DETCI? Can save a gigantic amount of memory (especially for truncated CI’s) but is somewhat flaky and hasn’t been tested for a while. It may work only works for certain classes of RAS calculations. The current code is very slow with this option turned on. Type: boolean; Default: false. RESPONSE_ALGORITHM (DCT)¶DCT — Algorithm to use for the solution of DC-06 response equati",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:210692,Deployability,update,updates,210692," Moller-Plesset fraction. Type: double; Default: 0.15e0. REPL_OTF (DETCI)¶DETCI (Expert) — Do string replacements on the fly in DETCI? Can save a gigantic amount of memory (especially for truncated CI’s) but is somewhat flaky and hasn’t been tested for a while. It may work only works for certain classes of RAS calculations. The current code is very slow with this option turned on. Type: boolean; Default: false. RESPONSE_ALGORITHM (DCT)¶DCT — Algorithm to use for the solution of DC-06 response equations in computation of analytic gradients and * properties. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: TWOSTEP. RESTART (CCENERGY)¶CCENERGY — Do restart the coupled-cluster iterations from old \(t_1\) and \(t_2\) amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. RESTART (CCLAMBDA)¶CCLAMBDA — Do restart the coupled-cluster iterations from old \(\lambda_1\) and \(\lambda_2\) amplitudes?. Type: boolean; Default: false. RESTART (CCRESPONSE)¶CCRESPONSE — Do restart from on-disk amplitudes?. Type: boolean; Default: true. RESTART (DETCI)¶DETCI — Do restart a DETCI iteration that terminated prematurely? It assumes that the CI and sigma vectors are on disk. Type: boolean; Default: false. RESTART_EOM_CC3 (CCEOM)¶CCEOM — Do restart from on-disk?. Type: boolean; Default: false. RESTRICTED_DOCC (GLOBALS)¶GLOBALS — An array giving the number of restricted doubly-occupied orbitals per irrep (not excited in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RESTRICTED_UOCC (GLOBALS)¶GLOBALS — An array giving the number of restricted unoccupied orbitals per irrep (not occupied in CI wavefunctions, but orbitals can ",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:215420,Deployability,install,installation,215420,"CF)¶MCSCF (Expert) — For orbital rotations after convergence, number of the second orbital (1-based) to rotate. Type: integer; Default: 2. ROTATIONAL_SYMMETRY_NUMBER (THERMO)¶THERMO — Rotational symmetry number for thermodynamic analysis. Default is set from the full point group (e.g., Td for methane) as opposed to the computational point group (e.g., C2v for methane). Default takes into account symmetry reduction through asymmetric isotopic substitution and is unaffected by user-set symmetry on molecule, so this option is the sole way to influence the symmetry-dependent aspects of the thermodynamic analysis. Note that this factor is handled differently among quantum chemistry software. Type: integer; Default: 1. RSRFO_ALPHA_MAX (OPTKING)¶OPTKING — Absolute maximum value of RS-RFO. Type: double; Default: 1e8. RUN_CCSD (FNOCC)¶FNOCC (Expert) — do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CCTRANSORT (CCTRANSORT)¶CCTRANSORT — Use cctransort module NOTE: Turning this option off requires separate installation of ccsort and transqt2 modules, see http://github.com/psi4/psi4pasture. Type: boolean; Default: true. RUN_CEPA (FNOCC)¶FNOCC (Expert) — Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. RUN_MP2 (FNOCC)¶FNOCC (Expert) — do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3 (FNOCC)¶FNOCC (Expert) — do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4 (FNOCC)¶FNOCC (Expert) — do only evaluate mp4 energy?. Type: boolean; Default: false. S (DETCI)¶DETCI — The value of the spin quantum number \(S\) is given by this option. The default is determined by the value of the multiplicity. This is used for two things: (1) determining the phase of the redundant half of the CI vector when the \(M_s = 0\) component is used (i.e., MS0 = TRUE), and (2) making sure the guess vector has the desired value of \(\langle S^2\ran",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:220872,Deployability,integrat,integration,220872,"exchange-dispersion for SAPT-DFT. Previous to Nov 2022, default was FIXED with Hesselmann value. NONE Use unscaled Exch-Disp2,u . FIXED Use a fixed factor SAPT_DFT_EXCH_DISP_FIXED_SCALE to scale Exch-Disp2,u . DISP Use the ratio of Disp2,r and Disp2,u to scale Exch-Disp2,u . Type: string; Possible Values: NONE, FIXED, DISP; Default: FIXED. SAPT_DFT_FUNCTIONAL (SAPT)¶SAPT (Expert) — Underlying funcitonal to use for SAPT(DFT). Type: string; Default: PBE0. SAPT_DFT_GRAC_DETERMINATION (SAPT)¶SAPT (Expert) — How is the GRAC correction determined?. Type: string; Possible Values: INPUT; Default: INPUT. SAPT_DFT_GRAC_SHIFT_A (SAPT)¶SAPT — Monomer A GRAC shift in Hartree. Type: double; Default: 0.0. SAPT_DFT_GRAC_SHIFT_B (SAPT)¶SAPT — Monomer B GRAC shift in Hartree. Type: double; Default: 0.0. SAPT_DFT_MP2_DISP_ALG (SAPT)¶SAPT (Expert) — Which MP2 Exch-Disp module to use?. Type: string; Possible Values: FISAPT, SAPT; Default: SAPT. SAPT_FDDS_DISP_LEG_LAMBDA (SAPT)¶SAPT (Expert) — Lambda shift in the space morphing for the FDDS Dispersion time integration. Type: double; Default: 0.3. SAPT_FDDS_DISP_NUM_POINTS (SAPT)¶SAPT (Expert) — Number of points in the Legendre FDDS Dispersion time integration. Type: integer; Default: 10. SAPT_FDDS_V2_RHO_CUTOFF (SAPT)¶SAPT (Expert) — Minimum rho cutoff for the in the LDA response for FDDS. Type: double; Default: 1.e-6. SAPT_LEVEL (SAPT)¶SAPT — The level of theory for SAPT. Type: string; Possible Values: SAPT0, SAPT2, SAPT2+, SAPT2+3; Default: SAPT0. SAPT_MEM_CHECK (SAPT)¶SAPT — Do force SAPT2 and higher to die if it thinks there isn’t enough memory? Turning this off is ill-advised. Type: boolean; Default: true. SAPT_MEM_FACTOR (SAPT)¶SAPT (Expert) — Proportion of memory available for the DF-MP2 three-index integral buffers used to evaluate dispersion. Type: double; Default: 0.9. SAPT_MEM_SAFETY (SAPT)¶SAPT — Memory safety. Type: double; Default: 0.9. SAPT_QUIET (SAPT)¶SAPT (Expert) — Interior option to clean up printing. Type: boolean; D",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:221016,Deployability,integrat,integration,221016,"actor SAPT_DFT_EXCH_DISP_FIXED_SCALE to scale Exch-Disp2,u . DISP Use the ratio of Disp2,r and Disp2,u to scale Exch-Disp2,u . Type: string; Possible Values: NONE, FIXED, DISP; Default: FIXED. SAPT_DFT_FUNCTIONAL (SAPT)¶SAPT (Expert) — Underlying funcitonal to use for SAPT(DFT). Type: string; Default: PBE0. SAPT_DFT_GRAC_DETERMINATION (SAPT)¶SAPT (Expert) — How is the GRAC correction determined?. Type: string; Possible Values: INPUT; Default: INPUT. SAPT_DFT_GRAC_SHIFT_A (SAPT)¶SAPT — Monomer A GRAC shift in Hartree. Type: double; Default: 0.0. SAPT_DFT_GRAC_SHIFT_B (SAPT)¶SAPT — Monomer B GRAC shift in Hartree. Type: double; Default: 0.0. SAPT_DFT_MP2_DISP_ALG (SAPT)¶SAPT (Expert) — Which MP2 Exch-Disp module to use?. Type: string; Possible Values: FISAPT, SAPT; Default: SAPT. SAPT_FDDS_DISP_LEG_LAMBDA (SAPT)¶SAPT (Expert) — Lambda shift in the space morphing for the FDDS Dispersion time integration. Type: double; Default: 0.3. SAPT_FDDS_DISP_NUM_POINTS (SAPT)¶SAPT (Expert) — Number of points in the Legendre FDDS Dispersion time integration. Type: integer; Default: 10. SAPT_FDDS_V2_RHO_CUTOFF (SAPT)¶SAPT (Expert) — Minimum rho cutoff for the in the LDA response for FDDS. Type: double; Default: 1.e-6. SAPT_LEVEL (SAPT)¶SAPT — The level of theory for SAPT. Type: string; Possible Values: SAPT0, SAPT2, SAPT2+, SAPT2+3; Default: SAPT0. SAPT_MEM_CHECK (SAPT)¶SAPT — Do force SAPT2 and higher to die if it thinks there isn’t enough memory? Turning this off is ill-advised. Type: boolean; Default: true. SAPT_MEM_FACTOR (SAPT)¶SAPT (Expert) — Proportion of memory available for the DF-MP2 three-index integral buffers used to evaluate dispersion. Type: double; Default: 0.9. SAPT_MEM_SAFETY (SAPT)¶SAPT — Memory safety. Type: double; Default: 0.9. SAPT_QUIET (SAPT)¶SAPT (Expert) — Interior option to clean up printing. Type: boolean; Default: false. SAVE_JK (SCF)¶SCF — Keep JK object for later use?. Type: boolean; Default: false. SAVE_OPTIMIZATION (OPTKING)¶OPTKING — Save OptKing’s",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:239225,Deployability,integrat,integration,239225,"ult: false. TDSCF_TDM_PRINT (SCF)¶SCF — Which transition dipole moments to print out: - E_TDM_LEN : electric transition dipole moments, length representation - E_TDM_VEL : electric transition dipole moments, velocity representation - M_TDM : magnetic transition dipole moments. Type: array; Default: No Default. TDSCF_TRIPLETS (SCF)¶SCF — Controls inclusion of triplet states, which is only valid for restricted references. Valid options: - none : No triplets computed (default) - also : lowest-energy triplets and singlets included, in 50-50 ratio. Note that singlets are privileged, i.e. if seeking to converge 5 states in total, 3 will be singlets and 2 will be triplets. - only : Only triplet states computed. Type: string; Possible Values: NONE, ALSO, ONLY; Default: NONE. TEST_B (OPTKING)¶OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING)¶OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. THETA_POINTS (SCF)¶SCF — Number of colatitude grid points for spherical potential integration. Type: integer; Default: 360. THICKNESS (SCF)¶SCF — Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. THREE_PARTICLE (DCT)¶DCT — Whether to compute three-particle energy correction or not. Type: string; Possible Values: NONE, PERTURBATIVE; Default: NONE. TIKHONOW_MAX (PSIMRCC)¶PSIMRCC — The cycle after which Tikhonow regularization is stopped. Set to zero to allow regularization in all iterations. Type: integer; Default: 5. TIKHONOW_OMEGA (DCT)¶DCT (Expert) — The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. TIKHONOW_OMEGA (PSIMRCC)¶PSIMRCC — The shift to apply to the denominators, {it c.f.} Taube and Bartlett, JCP, 130, 144112 (2009). Type: double; Default: 0.0. TIKHONOW_TRIPLES (PSIMRCC)¶PSIMRCC (Expert) — Do use Tikhonow regularization in (T) computations?. Type: boolean; Default: false. TILE_SZ (SCF)¶SCF (Expert) — The tile size for the distribut",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:239795,Deployability,update,update,239795,"ts are privileged, i.e. if seeking to converge 5 states in total, 3 will be singlets and 2 will be triplets. - only : Only triplet states computed. Type: string; Possible Values: NONE, ALSO, ONLY; Default: NONE. TEST_B (OPTKING)¶OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING)¶OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. THETA_POINTS (SCF)¶SCF — Number of colatitude grid points for spherical potential integration. Type: integer; Default: 360. THICKNESS (SCF)¶SCF — Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. THREE_PARTICLE (DCT)¶DCT — Whether to compute three-particle energy correction or not. Type: string; Possible Values: NONE, PERTURBATIVE; Default: NONE. TIKHONOW_MAX (PSIMRCC)¶PSIMRCC — The cycle after which Tikhonow regularization is stopped. Set to zero to allow regularization in all iterations. Type: integer; Default: 5. TIKHONOW_OMEGA (DCT)¶DCT (Expert) — The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. TIKHONOW_OMEGA (PSIMRCC)¶PSIMRCC — The shift to apply to the denominators, {it c.f.} Taube and Bartlett, JCP, 130, 144112 (2009). Type: double; Default: 0.0. TIKHONOW_TRIPLES (PSIMRCC)¶PSIMRCC (Expert) — Do use Tikhonow regularization in (T) computations?. Type: boolean; Default: false. TILE_SZ (SCF)¶SCF (Expert) — The tile size for the distributed matrices. Type: integer; Default: 512. TPDM (DETCI)¶DETCI (Expert) — Do compute two-particle density matrix if not otherwise required? Warning: This will hold 4 dense active TPDM’s in memory. Type: boolean; Default: false. TPDM_ABCD_TYPE (OCC)¶OCC — How to take care of the TPDM VVVV-block. The COMPUTE option means it will be computed via an IC/OOC algorithm. The DIRECT option (default) means it will not be computed and stored, instead its contribution will be directly added to Generalized-Fock Matrix. Type: string; Possible Values: DIRECT, COMPUTE; Default",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:242261,Deployability,update,update,242261,"xtrapolation to accelerate convergence for iterative triples excitations?. Type: boolean; Default: false. TRIPLES_IABC_TYPE (DFOCC)¶DFOCC — The algorithm to handle (ia|bc) type integrals that used for (T) correction. Type: string; Possible Values: INCORE, AUTO, DIRECT, DISK; Default: DISK. TRIPLES_LOW_MEMORY (FNOCC)¶FNOCC — Do use low memory option for triples contribution? Note that this option is enabled automatically if the memory requirements of the conventional algorithm would exceed the available resources. The low memory algorithm is faster in general and has been turned on by default starting September 2020. Type: boolean; Default: true. TURN_ON_ACTV (MCSCF)¶MCSCF —. Type: integer; Default: 0. UHF_NOONS (SCF)¶SCF — The number of NOONs to print in a UHF calc. Type: string; Default: 3. UNFREEZE_DIHEDRALS (OPTKING)¶OPTKING — Unfreeze a subset of dihedrals - meant for use with freeze_all_dihedrals. Type: string; Default: No Default. UPDATE (DETCI)¶DETCI — The update or correction vector formula, either DAVIDSON (default) or OLSEN. Type: string; Possible Values: DAVIDSON, OLSEN; Default: DAVIDSON. USE_DF_INTS (FNOCC)¶FNOCC (Expert) — Use 3-index integrals to generate 4-index ERI’s? This keyword is used for testing purposes only. Changing its value will have no effect on the computation. Type: boolean; Default: false. USE_SPIN_SYM (PSIMRCC)¶PSIMRCC — Do use symmetry to map equivalent determinants onto each other, for efficiency?. Type: boolean; Default: true. USE_SPIN_SYMMETRY (PSIMRCC)¶PSIMRCC (Expert) — Whether to use spin symmetry to map equivalent configurations onto each other, for efficiency. Type: boolean; Default: true. VAL_EX_LEVEL (DETCI)¶DETCI — In a RAS CI, this is the additional excitation level for allowing electrons out of RAS I into RAS II. The maximum number of holes in RAS I is therefore EX_LEVEL + VAL_EX_LEVEL. Type: integer; Default: 0. VECS_CC3 (CCEOM)¶CCEOM — Vectors stored in CC3 computations. Type: integer; Default: 10. VECS_PER_ROOT (CCEOM",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:242863,Deployability,configurat,configurations,242863," general and has been turned on by default starting September 2020. Type: boolean; Default: true. TURN_ON_ACTV (MCSCF)¶MCSCF —. Type: integer; Default: 0. UHF_NOONS (SCF)¶SCF — The number of NOONs to print in a UHF calc. Type: string; Default: 3. UNFREEZE_DIHEDRALS (OPTKING)¶OPTKING — Unfreeze a subset of dihedrals - meant for use with freeze_all_dihedrals. Type: string; Default: No Default. UPDATE (DETCI)¶DETCI — The update or correction vector formula, either DAVIDSON (default) or OLSEN. Type: string; Possible Values: DAVIDSON, OLSEN; Default: DAVIDSON. USE_DF_INTS (FNOCC)¶FNOCC (Expert) — Use 3-index integrals to generate 4-index ERI’s? This keyword is used for testing purposes only. Changing its value will have no effect on the computation. Type: boolean; Default: false. USE_SPIN_SYM (PSIMRCC)¶PSIMRCC — Do use symmetry to map equivalent determinants onto each other, for efficiency?. Type: boolean; Default: true. USE_SPIN_SYMMETRY (PSIMRCC)¶PSIMRCC (Expert) — Whether to use spin symmetry to map equivalent configurations onto each other, for efficiency. Type: boolean; Default: true. VAL_EX_LEVEL (DETCI)¶DETCI — In a RAS CI, this is the additional excitation level for allowing electrons out of RAS I into RAS II. The maximum number of holes in RAS I is therefore EX_LEVEL + VAL_EX_LEVEL. Type: integer; Default: 0. VECS_CC3 (CCEOM)¶CCEOM — Vectors stored in CC3 computations. Type: integer; Default: 10. VECS_PER_ROOT (CCEOM)¶CCEOM — Vectors stored per root. Type: integer; Default: 12. WABEI_LOWDISK (CCHBAR)¶CCHBAR — Do use the minimal-disk algorithm for Wabei? It’s VERY slow!. Type: boolean; Default: false. WCOMBINE (SCF)¶SCF — combine omega exchange and Hartree–Fock exchange into one matrix for efficiency? Disabled until fixed. Type: boolean; Default: false. WFN (CCDENSITY)¶CCDENSITY (Expert) — Wavefunction type. Type: string; Default: SCF. WFN (CCENERGY)¶CCENERGY (Expert) — Wavefunction type. Type: string; Default: NONE. WFN (CCEOM)¶CCEOM (Expert) — Wavefunction type",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:246624,Deployability,update,updated,246624,"CF; Default: SCF. WFN_SYM (MCSCF)¶MCSCF — The symmetry of the SCF wavefunction. Type: string; Default: 1. WFN_SYM (PSIMRCC)¶PSIMRCC — The symmetry of the target wavefunction, specified either by Schönflies symbol, or irrep number (in Cotton ordering). Type: string; Default: 1. WFN_TYPE (DFOCC)¶DFOCC — Type of the wavefunction. Type: string; Default: DF-OMP2. WFN_TYPE (OCC)¶OCC — Type of the wavefunction. Type: string; Possible Values: OMP2, OMP3, OCEPA, OMP2.5, REMP, OREMP; Default: OMP2. WRITE_NOS (CCDENSITY)¶CCDENSITY — Do write natural orbitals (molden). Type: boolean; Default: false. WRITE_OPT_HISTORY (OPTKING)¶OPTKING — Write the full history to disk. Produces a non validated OptimizationResult. Type: boolean; Default: false. WRITE_OPT_RESULT (OPTKING)¶OPTKING — Write the optimization history / state to disc. Type: boolean; Default: false. WRITE_TRAJECTORY (OPTKING)¶OPTKING — Write Optimization Trajectory. Type: boolean; Default: false. WRITER_FILE_LABEL (GLOBALS)¶GLOBALS — Base filename for text files written by PSI, such as the MOLDEN output file, the Hessian file, the internal coordinate file, etc. Use the add_str_i function to make this string case sensitive. Type: string; Default: No Default. XI (CCDENSITY)¶CCDENSITY — Do compute Xi?. Type: boolean; Default: false. XI_CONNECT (CCDENSITY)¶CCDENSITY (Expert) — Do require \(\bar{H}\) and \(R\) to be connected?. Type: boolean; Default: false. ZERO_INTERNAL_AMPS (PSIMRCC)¶PSIMRCC — Do zero the internal amplitudes, i.e., those that map reference determinants onto each other?. Type: boolean; Default: true. ZETA (CCDENSITY)¶CCDENSITY — Do use zeta?. Type: boolean; Default: false. ZETA (CCLAMBDA)¶CCLAMBDA — Do use zeta?. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Keywords by Alpha. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:1857,Energy Efficiency,energy,energy,1857,"ecify than using RAS keywords). Type: array; Default: No Default. ACTIVE_NAT_ORBS (FNOCC)¶FNOCC — An array containing the number of virtual natural orbitals per irrep (in Cotton order) so a user can specify the number of retained natural orbitals rather than determining them with OCC_TOLERANCE. This keyword overrides OCC_TOLERANCE and OCC_PERCENTAGE. Type: array; Default: No Default. ADD_AUXILIARY_BONDS (OPTKING)¶OPTKING — Do add bond coordinates at nearby atoms for non-bonded systems?. Type: boolean; Default: true. AIO_CPHF (SAPT)¶SAPT — Do use asynchronous disk I/O in the solution of the CPHF equations? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. AIO_DF_INTS (SAPT)¶SAPT — Do use asynchronous disk I/O in the formation of the DF integrals? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. ALGORITHM (DCT)¶DCT — Algorithm to use for the density cumulant and orbital updates in the DCT energy computation. Two-step algorithm is usually more efficient for small systems, but for large systems simultaneous algorithm (default) is recommended. If convergence problems are encountered (especially for highly symmetric systems) QC algorithm can be used. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS, QC; Default: SIMULTANEOUS. ANALYZE (CCENERGY)¶CCENERGY — Do analyze T2 amplitudes. Type: boolean; Default: false. ANALYZE (CCRESPONSE)¶CCRESPONSE — Do analyze X2 amplitudes. Type: boolean; Default: false. AO_BASIS (CCDENSITY)¶CCDENSITY — The algorithm to use for the \(\left\langle VV||VV\right \rangle\) terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCENERGY)¶CCENERGY (Expert) — The algorithm to use for the \(\left\langle VV||VV\right\rangle\) terms If AO_BASIS is NONE, the MO-basis integrals will be used; if AO_BASIS is DISK, the AO-basis integrals stored on disk will be used; if AO_BASIS is DIRECT, t",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:1912,Energy Efficiency,efficient,efficient,1912,"ber of virtual natural orbitals per irrep (in Cotton order) so a user can specify the number of retained natural orbitals rather than determining them with OCC_TOLERANCE. This keyword overrides OCC_TOLERANCE and OCC_PERCENTAGE. Type: array; Default: No Default. ADD_AUXILIARY_BONDS (OPTKING)¶OPTKING — Do add bond coordinates at nearby atoms for non-bonded systems?. Type: boolean; Default: true. AIO_CPHF (SAPT)¶SAPT — Do use asynchronous disk I/O in the solution of the CPHF equations? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. AIO_DF_INTS (SAPT)¶SAPT — Do use asynchronous disk I/O in the formation of the DF integrals? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. ALGORITHM (DCT)¶DCT — Algorithm to use for the density cumulant and orbital updates in the DCT energy computation. Two-step algorithm is usually more efficient for small systems, but for large systems simultaneous algorithm (default) is recommended. If convergence problems are encountered (especially for highly symmetric systems) QC algorithm can be used. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS, QC; Default: SIMULTANEOUS. ANALYZE (CCENERGY)¶CCENERGY — Do analyze T2 amplitudes. Type: boolean; Default: false. ANALYZE (CCRESPONSE)¶CCRESPONSE — Do analyze X2 amplitudes. Type: boolean; Default: false. AO_BASIS (CCDENSITY)¶CCDENSITY — The algorithm to use for the \(\left\langle VV||VV\right \rangle\) terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCENERGY)¶CCENERGY (Expert) — The algorithm to use for the \(\left\langle VV||VV\right\rangle\) terms If AO_BASIS is NONE, the MO-basis integrals will be used; if AO_BASIS is DISK, the AO-basis integrals stored on disk will be used; if AO_BASIS is DIRECT, the AO-basis integrals will be computed on the fly as necessary. NB: The DIRECT option is not fully implemented and should onl",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:3911,Energy Efficiency,reduce,reduces,3911,"ts. Default is NONE. Note: The developers recommend use of this keyword only as a last resort because it significantly slows the calculation. The current algorithms for handling the MO-basis four-virtual-index integrals have been significantly improved and are preferable to the AO-based approach. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCLAMBDA)¶CCLAMBDA — The algorithm to use for the \(\left\langle VV||VV \right\rangle\) terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCTRANSORT)¶CCTRANSORT — The algorithm to use for the \(\left\langle VV||VV \right\rangle\) terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (DCT)¶DCT — Controls whether to avoid the AO->MO transformation of the two-electron integrals for the four-virtual case (\(\langle VV|| VV \rangle\)) by computing the corresponding terms in the AO basis. AO_BASIS = DISK algorithm reduces the memory requirements and can significantly reduce the cost of the energy computation if SIMULTANEOUS algorithm is used. For the TWOSTEP algorithm, however, AO_BASIS = DISK option is not recommended due to extra I/O. Type: string; Possible Values: NONE, DISK; Default: DISK. AUXILIARY_BOND_FACTOR (OPTKING)¶OPTKING — This factor times standard covalent distance is used to add extra stretch coordinates. Type: double; Default: 2.5. AVG_STATES (DETCI)¶DETCI — Array giving the root numbers of the states to average in a state-averaged procedure such as SA-CASSCF. Root numbering starts from 0. Type: array; Default: No Default. AVG_WEIGHTS (DETCI)¶DETCI — Array giving the weights for each state in a state-averaged procedure. Type: array; Default: No Default. B_RAS3_MAX (DETCI)¶DETCI — maximum number of beta electrons in RAS III. Type: integer; Default: -1. BASIS (DFMP2)¶DFMP2 — Primary basis set. Type: string; Possible Values: basis string; Default: NONE. BASIS (MINTS)¶MINTS — Primary basis set. Available basis sets. Type: string; Poss",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:3965,Energy Efficiency,reduce,reduce,3965,"ts. Default is NONE. Note: The developers recommend use of this keyword only as a last resort because it significantly slows the calculation. The current algorithms for handling the MO-basis four-virtual-index integrals have been significantly improved and are preferable to the AO-based approach. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCLAMBDA)¶CCLAMBDA — The algorithm to use for the \(\left\langle VV||VV \right\rangle\) terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCTRANSORT)¶CCTRANSORT — The algorithm to use for the \(\left\langle VV||VV \right\rangle\) terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (DCT)¶DCT — Controls whether to avoid the AO->MO transformation of the two-electron integrals for the four-virtual case (\(\langle VV|| VV \rangle\)) by computing the corresponding terms in the AO basis. AO_BASIS = DISK algorithm reduces the memory requirements and can significantly reduce the cost of the energy computation if SIMULTANEOUS algorithm is used. For the TWOSTEP algorithm, however, AO_BASIS = DISK option is not recommended due to extra I/O. Type: string; Possible Values: NONE, DISK; Default: DISK. AUXILIARY_BOND_FACTOR (OPTKING)¶OPTKING — This factor times standard covalent distance is used to add extra stretch coordinates. Type: double; Default: 2.5. AVG_STATES (DETCI)¶DETCI — Array giving the root numbers of the states to average in a state-averaged procedure such as SA-CASSCF. Root numbering starts from 0. Type: array; Default: No Default. AVG_WEIGHTS (DETCI)¶DETCI — Array giving the weights for each state in a state-averaged procedure. Type: array; Default: No Default. B_RAS3_MAX (DETCI)¶DETCI — maximum number of beta electrons in RAS III. Type: integer; Default: -1. BASIS (DFMP2)¶DFMP2 — Primary basis set. Type: string; Possible Values: basis string; Default: NONE. BASIS (MINTS)¶MINTS — Primary basis set. Available basis sets. Type: string; Poss",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:3988,Energy Efficiency,energy,energy,3988,"ts. Default is NONE. Note: The developers recommend use of this keyword only as a last resort because it significantly slows the calculation. The current algorithms for handling the MO-basis four-virtual-index integrals have been significantly improved and are preferable to the AO-based approach. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCLAMBDA)¶CCLAMBDA — The algorithm to use for the \(\left\langle VV||VV \right\rangle\) terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCTRANSORT)¶CCTRANSORT — The algorithm to use for the \(\left\langle VV||VV \right\rangle\) terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (DCT)¶DCT — Controls whether to avoid the AO->MO transformation of the two-electron integrals for the four-virtual case (\(\langle VV|| VV \rangle\)) by computing the corresponding terms in the AO basis. AO_BASIS = DISK algorithm reduces the memory requirements and can significantly reduce the cost of the energy computation if SIMULTANEOUS algorithm is used. For the TWOSTEP algorithm, however, AO_BASIS = DISK option is not recommended due to extra I/O. Type: string; Possible Values: NONE, DISK; Default: DISK. AUXILIARY_BOND_FACTOR (OPTKING)¶OPTKING — This factor times standard covalent distance is used to add extra stretch coordinates. Type: double; Default: 2.5. AVG_STATES (DETCI)¶DETCI — Array giving the root numbers of the states to average in a state-averaged procedure such as SA-CASSCF. Root numbering starts from 0. Type: array; Default: No Default. AVG_WEIGHTS (DETCI)¶DETCI — Array giving the weights for each state in a state-averaged procedure. Type: array; Default: No Default. B_RAS3_MAX (DETCI)¶DETCI — maximum number of beta electrons in RAS III. Type: integer; Default: -1. BASIS (DFMP2)¶DFMP2 — Primary basis set. Type: string; Possible Values: basis string; Default: NONE. BASIS (MINTS)¶MINTS — Primary basis set. Available basis sets. Type: string; Poss",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:6704,Energy Efficiency,charge,charges,6704,"ult: No Default. BCCD_MAXITER (CCENERGY)¶CCENERGY — Maximum number of iterations for Brueckner CCD. Type: integer; Default: 50. BENCH (GLOBALS)¶GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI)¶DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BORDER (PE)¶PE — Activate border options for sites in proximity to the QM/MM border. Type: boolean; Default: false. BORDER_N_REDIST (PE)¶PE — number of neighbor sites to redistribute to. The default (-1) redistributes to all sites which are not in the border region. Type: integer; Default: -1. BORDER_REDIST_ORDER (PE)¶PE — order from which moments are removed, e.g., if set to 1 (default), only charges are redistributed and all higher order moments are removed. Type: integer; Default: 1. BORDER_REDIST_POL (PE)¶PE — redistribute polarizabilities? If false, polarizabilities are removed (default). Type: boolean; Default: false. BORDER_RMIN (PE)¶PE — minimum radius from QM atoms to MM sites to be taken into account for removal/redistribution. Type: double; Default: 2.2. BORDER_RMIN_UNIT (PE)¶PE — unit of BORDER_RMIN, default is atomic units (AU). Type: string; Possible Values: AU, AA; Default: AU. BORDER_TYPE (PE)¶PE — border type, either remove or redistribute moments/polarizabilities. Type: string; Possible Values: REMOVE, REDIST; Default: REMOVE. BRIANQC_ENABLE (GLOBALS)¶GLOBALS — Whether to enable using the BrianQC GPU module. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC)¶FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY)¶CCENERGY — Convergence criterion for Brueckner orbitals. The convergence ",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:16225,Energy Efficiency,energy,energy,16225," maximum number of electrons in RAS IV, for CC. Type: integer; Default: -1. CC_SCALE_OS (FNOCC)¶FNOCC — Oppposite-spin scaling factor for SCS-CCSD. Type: double; Default: 1.27. CC_SCALE_SS (FNOCC)¶FNOCC — Same-spin scaling factor for SCS-CCSD. Type: double; Default: 1.13. CC_SS_SCALE (CCENERGY)¶CCENERGY — Coupled-cluster same-spin scaling value. Type: double; Default: 1.13. CC_TIMINGS (FNOCC)¶FNOCC — Do time each cc diagram?. Type: boolean; Default: false. CC_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for CC or CEPA computation (e.g., CCD, CCSD(T), CEPA(3), ACPF, REMP). See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: CONV. CC_UPDATE_EPS (DETCI)¶DETCI (Expert) — Do update T amplitudes with orbital eigenvalues? (Usually would do this). Not doing this is experimental. Type: boolean; Default: true. CC_VAL_EX_LEVEL (DETCI)¶DETCI — The CC valence excitation level. Type: integer; Default: 0. CC_VARIATIONAL (DETCI)¶DETCI (Expert) — Do use variational energy expression in CC computation? Experimental. Type: boolean; Default: false. CC_VECS_READ (DETCI)¶DETCI — Do import a CC vector from disk?. Type: boolean; Default: false. CC_VECS_WRITE (DETCI)¶DETCI — Do export a CC vector to disk?. Type: boolean; Default: false. CCD_E_CONVERGENCE (SAPT)¶SAPT — E converge value for CCD. Type: conv double; Default: 1e-8. CCD_MAXITER (SAPT)¶SAPT — Max CCD iterations. Type: integer; Default: 50. CCD_T_CONVERGENCE (SAPT)¶SAPT — Convergence tolerance for CCD amplitudes. Type: conv double; Default: 1e-8. CCL_ENERGY (OCC)¶OCC — Do compute CC Lambda energy? In order to this option to be valid one should use “TPDM_ABCD_TYPE = COMPUTE” option. Type: boolean; Default: false. CEPA_LEVEL (FNOCC)¶FNOCC (Expert) — Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). CEPA_NO_SINGLES (FNOCC)¶FNOCC — Flag to exclude singly excited ",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:16812,Energy Efficiency,energy,energy,16812,"s. Type: string; Possible Values: DF, CONV, CD; Default: CONV. CC_UPDATE_EPS (DETCI)¶DETCI (Expert) — Do update T amplitudes with orbital eigenvalues? (Usually would do this). Not doing this is experimental. Type: boolean; Default: true. CC_VAL_EX_LEVEL (DETCI)¶DETCI — The CC valence excitation level. Type: integer; Default: 0. CC_VARIATIONAL (DETCI)¶DETCI (Expert) — Do use variational energy expression in CC computation? Experimental. Type: boolean; Default: false. CC_VECS_READ (DETCI)¶DETCI — Do import a CC vector from disk?. Type: boolean; Default: false. CC_VECS_WRITE (DETCI)¶DETCI — Do export a CC vector to disk?. Type: boolean; Default: false. CCD_E_CONVERGENCE (SAPT)¶SAPT — E converge value for CCD. Type: conv double; Default: 1e-8. CCD_MAXITER (SAPT)¶SAPT — Max CCD iterations. Type: integer; Default: 50. CCD_T_CONVERGENCE (SAPT)¶SAPT — Convergence tolerance for CCD amplitudes. Type: conv double; Default: 1e-8. CCL_ENERGY (OCC)¶OCC — Do compute CC Lambda energy? In order to this option to be valid one should use “TPDM_ABCD_TYPE = COMPUTE” option. Type: boolean; Default: false. CEPA_LEVEL (FNOCC)¶FNOCC (Expert) — Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). CEPA_NO_SINGLES (FNOCC)¶FNOCC — Flag to exclude singly excited configurations from a coupled-pair computation. Type: boolean; Default: false. CEPA_OS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.27. CEPA_SOS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.3. CEPA_SS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.13. CEPA_TYPE (OCC)¶OCC — CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0. Type: string; Possible Values: CEPA0; Default: CEPA0. CFOUR_ABCDTYPE (CFOUR)¶CFOUR — Specifies the way the \(\langle ab||cd \rangle\) molecular orbital ",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:18248,Energy Efficiency,reduce,reduces,18248,"lude singly excited configurations from a coupled-pair computation. Type: boolean; Default: false. CEPA_OS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.27. CEPA_SOS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.3. CEPA_SS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.13. CEPA_TYPE (OCC)¶OCC — CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0. Type: string; Possible Values: CEPA0; Default: CEPA0. CFOUR_ABCDTYPE (CFOUR)¶CFOUR — Specifies the way the \(\langle ab||cd \rangle\) molecular orbital integrals are handled in post-MP2 calculations. STANDARD (= 0) uses directly the corresponding MO integrals and thus results in an algorithm which in particular for large-scale calculations results in excessive use of disk space (storage of all \(\langle ab||cd\rangle\) integrals. AOBASIS (=2) uses an AO-based algorithm to evaluate all terms involving the \(\langle ab||cd\rangle\) integrals and significantly reduces the amount of disk storage. The use of ABCDTYPE=AOBASIS is strongly recommended for all CC calculations up to CCSD(T) and has been implemented for energy, gradient, second-derivative, and excitation energy calculations. Type: string; Possible Values: STANDARD, AOBASIS; Default: STANDARD. CFOUR_ACTIVE_ORBI (CFOUR)¶CFOUR — Specifies the active orbitals used in a TCSCF calculation and has to be used in combination with the keyword CFOUR_CORE_ORBITALS. The active orbitals are specified by either NIRREP or 2*NIRREP integers specifying the number of active orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION . Type: array; Default: No Default. CFOUR_ANH_ALGORITHM (CFOUR)¶CFOUR — Specifies which algorithm is used for CFOUR_ANHARMONIC ",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:18403,Energy Efficiency,energy,energy,18403,"le; Default: 1.27. CEPA_SOS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.3. CEPA_SS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.13. CEPA_TYPE (OCC)¶OCC — CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0. Type: string; Possible Values: CEPA0; Default: CEPA0. CFOUR_ABCDTYPE (CFOUR)¶CFOUR — Specifies the way the \(\langle ab||cd \rangle\) molecular orbital integrals are handled in post-MP2 calculations. STANDARD (= 0) uses directly the corresponding MO integrals and thus results in an algorithm which in particular for large-scale calculations results in excessive use of disk space (storage of all \(\langle ab||cd\rangle\) integrals. AOBASIS (=2) uses an AO-based algorithm to evaluate all terms involving the \(\langle ab||cd\rangle\) integrals and significantly reduces the amount of disk storage. The use of ABCDTYPE=AOBASIS is strongly recommended for all CC calculations up to CCSD(T) and has been implemented for energy, gradient, second-derivative, and excitation energy calculations. Type: string; Possible Values: STANDARD, AOBASIS; Default: STANDARD. CFOUR_ACTIVE_ORBI (CFOUR)¶CFOUR — Specifies the active orbitals used in a TCSCF calculation and has to be used in combination with the keyword CFOUR_CORE_ORBITALS. The active orbitals are specified by either NIRREP or 2*NIRREP integers specifying the number of active orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION . Type: array; Default: No Default. CFOUR_ANH_ALGORITHM (CFOUR)¶CFOUR — Specifies which algorithm is used for CFOUR_ANHARMONIC =VIBROT, VPT2, and FULLQUARTIC calculations. If STANDARD (=0) is chosen, then simply invoking xcfour will cause a complete job to be run with all second-derivative calculations be",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:18455,Energy Efficiency,energy,energy,18455,"le; Default: 1.27. CEPA_SOS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.3. CEPA_SS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.13. CEPA_TYPE (OCC)¶OCC — CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0. Type: string; Possible Values: CEPA0; Default: CEPA0. CFOUR_ABCDTYPE (CFOUR)¶CFOUR — Specifies the way the \(\langle ab||cd \rangle\) molecular orbital integrals are handled in post-MP2 calculations. STANDARD (= 0) uses directly the corresponding MO integrals and thus results in an algorithm which in particular for large-scale calculations results in excessive use of disk space (storage of all \(\langle ab||cd\rangle\) integrals. AOBASIS (=2) uses an AO-based algorithm to evaluate all terms involving the \(\langle ab||cd\rangle\) integrals and significantly reduces the amount of disk storage. The use of ABCDTYPE=AOBASIS is strongly recommended for all CC calculations up to CCSD(T) and has been implemented for energy, gradient, second-derivative, and excitation energy calculations. Type: string; Possible Values: STANDARD, AOBASIS; Default: STANDARD. CFOUR_ACTIVE_ORBI (CFOUR)¶CFOUR — Specifies the active orbitals used in a TCSCF calculation and has to be used in combination with the keyword CFOUR_CORE_ORBITALS. The active orbitals are specified by either NIRREP or 2*NIRREP integers specifying the number of active orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION . Type: array; Default: No Default. CFOUR_ANH_ALGORITHM (CFOUR)¶CFOUR — Specifies which algorithm is used for CFOUR_ANHARMONIC =VIBROT, VPT2, and FULLQUARTIC calculations. If STANDARD (=0) is chosen, then simply invoking xcfour will cause a complete job to be run with all second-derivative calculations be",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:20210,Energy Efficiency,reduce,reduced,20210,"LQUARTIC calculations. If STANDARD (=0) is chosen, then simply invoking xcfour will cause a complete job to be run with all second-derivative calculations being done in series. If PARALLEL (=1), then the job stops after the second-derivative calculation at the reference geometry and generates out all input geometries for the remaining calculation. These can be then processed in “parallel” (currently not recommended). Note that it is recommended to carry out all calculations with PARALLEL, even when the actual calculation is carried out in a sequential mode. Type: string; Possible Values: STANDARD, PARALLEL; Default: STANDARD. CFOUR_ANH_DERIVATIVES (CFOUR)¶CFOUR — Specifies whether the anharmonic force field is calculated using analytic gradients (=FIRST) or analytic Hessians (=SECOND). Type: string; Possible Values: FIRST, SECOND; Default: SECOND. CFOUR_ANH_STEPSIZE (CFOUR)¶CFOUR — Controls the stepsize used in anharmonic force field calculations. The value is specified in reduced normal coordinates, which are dimensionless. The actual stepsize used in the calculation is \(\times 10^6\) the integer value specified. Type: integer; Default: 50000. CFOUR_ANH_SYMMETRY (CFOUR)¶CFOUR — Specifies whether non-abelian symmetry is to be exploited in determining displacements for CFOUR_ANHARMONIC =VIBROT or VPT2 calculations. If set to NONABELIAN (=0), maximum advantage will be taken of symmetry and the full set of cubic force constants will be generated from a skeleton set by application of the totally symmetric projection operator. If set to ABELIAN (=1), only the operations of the abelian subgroup will be exploited. Note: It is important to point out that the symmetrization currently works only for cubic constants. Therefore, if you require quartic force constants (for frequency calculations), you must use the ABELIAN option. Moreover, the latter work for only asymmetric tops and linear molecules. Type: string; Possible Values: ABELIAN, NONABELIAN; Default: ABELIAN. CFOUR_AN",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:22140,Energy Efficiency,energy,energy,22140,"if you require quartic force constants (for frequency calculations), you must use the ABELIAN option. Moreover, the latter work for only asymmetric tops and linear molecules. Type: string; Possible Values: ABELIAN, NONABELIAN; Default: ABELIAN. CFOUR_ANHARMONIC (CFOUR)¶CFOUR — Specifies treatment of anharmonic effects by calculating cubic and/or quartic force fields. VIBROT (=3) requests calculation of only those cubic constants of the form \(\phi_{nij}\), where n is a totally symmetric coordinate. These are sufficient to determine the vibration-rotation interaction constants needed to calculate vibrational corrections to rotational constants, but are not sufficient to generate the corresponding cubic constants of isotopologs that have a lower point-group symmetry (i.e. HOD isotopolog of water). VPT2 (=1, note that the old value CUBIC can be still used and is equivalent to VPT2) generates all cubic constants and all quartic constants apart from those of the form \(\phi_{ijkl}\), which is enough for: 1) generation of cubic constants of isotopologs (see manual entries associated with anharmonic calculations for an example); 2) calculation of vibrational energy levels with VPT2. This keyword also directs the program to analyze resonances and calculate intensities of one- and two-quantum transitions. FULLQUARTIC (=2) (not part of the public release) is largely self-explanatory; it directs the program to calculate all quartic constants. This is sufficient (but this has not been implemented) to generate the full quartic force field of all isotopologs. Type: string; Possible Values: CUBIC, VPT2, FULLQUARTIC, VIBROT, OFF; Default: OFF. CFOUR_AO_LADDERS (CFOUR)¶CFOUR — Can be used to control the algorithm used by CFOUR when terms involving \(\langle ab||cd\rangle\) molecular orbital integrals are calculated in the atomic orbital basis (see CFOUR_ABCDTYPE). MULTIPASS (= 0) uses an approach where the AO integral file is read a number of times in order to ensure maximal vectori",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:23161,Energy Efficiency,reduce,reduced,23161,"s of isotopologs (see manual entries associated with anharmonic calculations for an example); 2) calculation of vibrational energy levels with VPT2. This keyword also directs the program to analyze resonances and calculate intensities of one- and two-quantum transitions. FULLQUARTIC (=2) (not part of the public release) is largely self-explanatory; it directs the program to calculate all quartic constants. This is sufficient (but this has not been implemented) to generate the full quartic force field of all isotopologs. Type: string; Possible Values: CUBIC, VPT2, FULLQUARTIC, VIBROT, OFF; Default: OFF. CFOUR_AO_LADDERS (CFOUR)¶CFOUR — Can be used to control the algorithm used by CFOUR when terms involving \(\langle ab||cd\rangle\) molecular orbital integrals are calculated in the atomic orbital basis (see CFOUR_ABCDTYPE). MULTIPASS (= 0) uses an approach where the AO integral file is read a number of times in order to ensure maximal vectorization and is usually the optimal strategy on supercomputers; SINGLEPASS (= 1) determines the contributions with only a single pass through the AO integrals, but at the cost of significantly reduced vectorization. In general, however, SINGLEPASS is definitely preferable on workstations with RISC architectures. (Default : MULTIPASS on all 64-bit machines (e.g., CRAY-YMP) ; SINGLEPASS on all 32-bit machines (e.g., IBM-RS6000, HP-735, SGI-Indigo, DEC alphastations)). SPARSE_AO (=2) uses a sparse matrix algorithm which first rearranges the integral matrix in order to get “well-occupied” and “very sparse” blocks. “Well-occupied” blocks will be multiplied by matrix multiplication while in “very sparse” blocks only the non-zero elements are considered. The computational time is further reduced using symmetrized and anti-symmetrized integral and amplitude matrices in the multiplication. Substantial saving is assumed if SPARSE_AO (=2) is used. Type: string; Possible Values: MULTIPASS, SINGLEPASS; Default: SINGLEPASS. CFOUR_AV_SCF (CFOUR)¶C",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:23760,Energy Efficiency,reduce,reduced,23760,"ulated in the atomic orbital basis (see CFOUR_ABCDTYPE). MULTIPASS (= 0) uses an approach where the AO integral file is read a number of times in order to ensure maximal vectorization and is usually the optimal strategy on supercomputers; SINGLEPASS (= 1) determines the contributions with only a single pass through the AO integrals, but at the cost of significantly reduced vectorization. In general, however, SINGLEPASS is definitely preferable on workstations with RISC architectures. (Default : MULTIPASS on all 64-bit machines (e.g., CRAY-YMP) ; SINGLEPASS on all 32-bit machines (e.g., IBM-RS6000, HP-735, SGI-Indigo, DEC alphastations)). SPARSE_AO (=2) uses a sparse matrix algorithm which first rearranges the integral matrix in order to get “well-occupied” and “very sparse” blocks. “Well-occupied” blocks will be multiplied by matrix multiplication while in “very sparse” blocks only the non-zero elements are considered. The computational time is further reduced using symmetrized and anti-symmetrized integral and amplitude matrices in the multiplication. Substantial saving is assumed if SPARSE_AO (=2) is used. Type: string; Possible Values: MULTIPASS, SINGLEPASS; Default: SINGLEPASS. CFOUR_AV_SCF (CFOUR)¶CFOUR — Experimental Use! ON (=1) requests and averaged SCF over two states. So far only implemented for degenerate doublet-Pi states and used in conjunction with SOPERT. Type: boolean; Default: false. CFOUR_BASIS (CFOUR)¶CFOUR — Specifies the AO basis used in the calculation. One can either specify a basis known to CFOUR or via BASIS=SPECIAL (=0) requests an arbitrary basis (see non-standard basis-set input). However, the latter must be available in the supplied GENBAS file. As standard basis sets, currently the following are available. Psi4 Interface: Recommended to use instead BASIS for larger basis set selection and greater flexibility. When BASIS used, CFOUR_SPHERICAL is set appropriately. Type: string; Default: SPECIAL. CFOUR_BRUCK_CONV (CFOUR)¶CFOUR — experimen",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:25416,Energy Efficiency,energy,energy,25416,"is (see non-standard basis-set input). However, the latter must be available in the supplied GENBAS file. As standard basis sets, currently the following are available. Psi4 Interface: Recommended to use instead BASIS for larger basis set selection and greater flexibility. When BASIS used, CFOUR_SPHERICAL is set appropriately. Type: string; Default: SPECIAL. CFOUR_BRUCK_CONV (CFOUR)¶CFOUR — experimental use. Type: integer; Default: 4. CFOUR_BRUECKNER (CFOUR)¶CFOUR — Specifies whether Brueckner orbitals are to be determined for the specified CC method. OFF(=0) Brueckner orbitals are not to be determined, ON (=1) they are to be determined. Type: boolean; Default: false. CFOUR_CACHE_RECS (CFOUR)¶CFOUR — The number of records held in the i/o cache used by the post-SCF programs. The maximum number of records which can be held is 100. Type: integer; Default: 10. CFOUR_CALC_LEVEL (CFOUR)¶CFOUR — Defines the level of calculation to be performed. Psi4 Interface: Keyword set from argument of computation command: CCSD if energy('c4-ccsd'), etc. See Energy (CFOUR) and Gradient (CFOUR). for all available. Type: string; Default: SCF. CFOUR_CC_CONV (CFOUR)¶CFOUR — Specifies the convergence criterion for the CC amplitude equations. The amplitudes are considered to be converged when the maximum of all (absolute) changes in the amplitudes is less than \(10^N\), where \(N\) is the value associated with the keyword. Type: integer; Default: 7. CFOUR_CC_EXPORDER (CFOUR)¶CFOUR — Specifies the maximum number of expansion vectors used in the iterative subspace to enhance convergence in the solution of the CC equations. Type: integer; Default: 5. CFOUR_CC_EXTRAPOLATION (CFOUR)¶CFOUR — Specifies the type of convergence acceleration used to solve the CC equations. RLE (=0) uses the RLE methods of Purvis and Bartlett, DIIS (=1) uses the DIIS approach by Pulay, NOJACOBI (=2) uses RLE with continuous extrapolation, OFF (=3) uses no convergence acceleration. In general, DIIS provides the best resu",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:27762,Energy Efficiency,energy,energy,27762,"ns are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL, reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, NCC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR)¶CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 0. CFOUR_CIS_CONV (CFOUR)¶CFOUR — Specifies the convergence threshold as \(10^{-N}\) for CIS calculations. Type: integer; Default: 5. CFOUR_CONTINUUM (CFOUR)¶CFOUR — Signifies that one or more “continuum” orbitals should be added to the calculation. VIRTUAL and DVIRTUAL specify one or two orbital which should be initially unoccupied (in the SCF calculation), while OCCUPIED and DOCCUPIED specify one or two orbitals which should be initially occupied. Type: string; Possible Values: NONE, VIRTUAL, DVIRTUAL, OCCUPIED, DOCCUPIED; Default: NONE. CFOUR_CONTRACTION (CFOUR)¶CFOUR — Specifies the contraction scheme used by the integral and integral derivative program. SEGMENTED (=0) uses a segmented contraction sche",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:27803,Energy Efficiency,energy,energy,27803,"ns are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL, reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, NCC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR)¶CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 0. CFOUR_CIS_CONV (CFOUR)¶CFOUR — Specifies the convergence threshold as \(10^{-N}\) for CIS calculations. Type: integer; Default: 5. CFOUR_CONTINUUM (CFOUR)¶CFOUR — Signifies that one or more “continuum” orbitals should be added to the calculation. VIRTUAL and DVIRTUAL specify one or two orbital which should be initially unoccupied (in the SCF calculation), while OCCUPIED and DOCCUPIED specify one or two orbitals which should be initially occupied. Type: string; Possible Values: NONE, VIRTUAL, DVIRTUAL, OCCUPIED, DOCCUPIED; Default: NONE. CFOUR_CONTRACTION (CFOUR)¶CFOUR — Specifies the contraction scheme used by the integral and integral derivative program. SEGMENTED (=0) uses a segmented contraction sche",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:27996,Energy Efficiency,charge,charge,27996,"T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL, reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, NCC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR)¶CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 0. CFOUR_CIS_CONV (CFOUR)¶CFOUR — Specifies the convergence threshold as \(10^{-N}\) for CIS calculations. Type: integer; Default: 5. CFOUR_CONTINUUM (CFOUR)¶CFOUR — Signifies that one or more “continuum” orbitals should be added to the calculation. VIRTUAL and DVIRTUAL specify one or two orbital which should be initially unoccupied (in the SCF calculation), while OCCUPIED and DOCCUPIED specify one or two orbitals which should be initially occupied. Type: string; Possible Values: NONE, VIRTUAL, DVIRTUAL, OCCUPIED, DOCCUPIED; Default: NONE. CFOUR_CONTRACTION (CFOUR)¶CFOUR — Specifies the contraction scheme used by the integral and integral derivative program. SEGMENTED (=0) uses a segmented contraction scheme; GENERAL (=1) uses a general contraction scheme, and UNCONTRACTED (=2) uses the corresponding uncontracted sets. Note that even for truly segmented basis sets, the integral prog",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:31488,Energy Efficiency,energy,energy,31488," array; Default: No Default. CFOUR_CPHF_CONVER (CFOUR)¶CFOUR — Specifies the convergence criterion for the iterative solution of the CPHF and Z-vector equations. The solutions are considered to be converged when the residual norm of the error vector falls below \(10^N\). Type: integer; Default: 12. CFOUR_CPHF_MAXCYC (CFOUR)¶CFOUR — Specifies the maximum number of cycles allowed for the solution of the CPHF- and/or Z-vector equations. Type: integer; Default: 64. CFOUR_CURVILINEAR (CFOUR)¶CFOUR — Specifies whether or not Hessian matrix is transformed (nonlinearly) to curvilinear internal coordinates. A value of 0 (or OFF) turns the transformation off if the analytic force constants are not available, while it is always performed if CURVILINEAR=1 (or ON). Values higher than 1 (or NO) unconditionally turn the transformation off.(Default: ON if analytic Hessian is available, OFF otherwise). Type: boolean; Default: true. CFOUR_DBOC (CFOUR)¶CFOUR — Specifies whether the diagonal Born-Oppenheimer correction (DBOC) to the energy is evaluated (ON =1) or not (OFF =0). DBOC calculations are currently only available for HF-SCF and CCSD using RHF or UHF reference functions. Type: boolean; Default: false. CFOUR_DCT (CFOUR)¶CFOUR — Specifies whether the Dipole Coupling Tensor (DCT) is calculated (ON =1) or not (OFF =0). Type: boolean; Default: false. CFOUR_DERIV_LEVEL (CFOUR)¶CFOUR — Specifies whether or not energy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually needs not be set in any calculation since it is automatically set if the appropriate other options in the CFOUR namelist are turned on. Psi4 Interface: Keyword set from type of computation command: ZERO if energy(), FIRST if gradient() or optimize(), etc. Type: string; Possible Values: ZERO, FIRST, SECOND; Default: ZE",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:31875,Energy Efficiency,energy,energy,31875,"s. Type: integer; Default: 64. CFOUR_CURVILINEAR (CFOUR)¶CFOUR — Specifies whether or not Hessian matrix is transformed (nonlinearly) to curvilinear internal coordinates. A value of 0 (or OFF) turns the transformation off if the analytic force constants are not available, while it is always performed if CURVILINEAR=1 (or ON). Values higher than 1 (or NO) unconditionally turn the transformation off.(Default: ON if analytic Hessian is available, OFF otherwise). Type: boolean; Default: true. CFOUR_DBOC (CFOUR)¶CFOUR — Specifies whether the diagonal Born-Oppenheimer correction (DBOC) to the energy is evaluated (ON =1) or not (OFF =0). DBOC calculations are currently only available for HF-SCF and CCSD using RHF or UHF reference functions. Type: boolean; Default: false. CFOUR_DCT (CFOUR)¶CFOUR — Specifies whether the Dipole Coupling Tensor (DCT) is calculated (ON =1) or not (OFF =0). Type: boolean; Default: false. CFOUR_DERIV_LEVEL (CFOUR)¶CFOUR — Specifies whether or not energy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually needs not be set in any calculation since it is automatically set if the appropriate other options in the CFOUR namelist are turned on. Psi4 Interface: Keyword set from type of computation command: ZERO if energy(), FIRST if gradient() or optimize(), etc. Type: string; Possible Values: ZERO, FIRST, SECOND; Default: ZERO. CFOUR_DIFF_TYPE (CFOUR)¶CFOUR — Specifies whether orbital-relaxed (RELAXED =0) or orbital-unrelaxed (UNRELAXED =1) derivatives are computed in the CC calculation. Type: string; Possible Values: RELAXED, UNRELAXED; Default: RELAXED. CFOUR_DROPMO (CFOUR)¶CFOUR — Specifies which molecular orbitals will be dropped from the post-SCF calculation. The orbitals are numbered in ascending order from the most stable (negative energy) to t",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:32347,Energy Efficiency,energy,energy,32347,"able, OFF otherwise). Type: boolean; Default: true. CFOUR_DBOC (CFOUR)¶CFOUR — Specifies whether the diagonal Born-Oppenheimer correction (DBOC) to the energy is evaluated (ON =1) or not (OFF =0). DBOC calculations are currently only available for HF-SCF and CCSD using RHF or UHF reference functions. Type: boolean; Default: false. CFOUR_DCT (CFOUR)¶CFOUR — Specifies whether the Dipole Coupling Tensor (DCT) is calculated (ON =1) or not (OFF =0). Type: boolean; Default: false. CFOUR_DERIV_LEVEL (CFOUR)¶CFOUR — Specifies whether or not energy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually needs not be set in any calculation since it is automatically set if the appropriate other options in the CFOUR namelist are turned on. Psi4 Interface: Keyword set from type of computation command: ZERO if energy(), FIRST if gradient() or optimize(), etc. Type: string; Possible Values: ZERO, FIRST, SECOND; Default: ZERO. CFOUR_DIFF_TYPE (CFOUR)¶CFOUR — Specifies whether orbital-relaxed (RELAXED =0) or orbital-unrelaxed (UNRELAXED =1) derivatives are computed in the CC calculation. Type: string; Possible Values: RELAXED, UNRELAXED; Default: RELAXED. CFOUR_DROPMO (CFOUR)¶CFOUR — Specifies which molecular orbitals will be dropped from the post-SCF calculation. The orbitals are numbered in ascending order from the most stable (negative energy) to the most unstable (largest positive energy). Individual orbitals must be separated with a dash, while x>y means orbitals x through y inclusive. For example, the string 1>10-55-58>64, would result in orbitals 1,2,3,4,5,6,7,8,9,10,55,58,59,60,61,62,63 and 64 being dropped. For UHF calculations, the appropriate orbitals are deleted for both spin cases. No dropped virtual MOs are currently allowed for gradient or property calculations. Psi4 I",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:32883,Energy Efficiency,energy,energy,32883,"ot energy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually needs not be set in any calculation since it is automatically set if the appropriate other options in the CFOUR namelist are turned on. Psi4 Interface: Keyword set from type of computation command: ZERO if energy(), FIRST if gradient() or optimize(), etc. Type: string; Possible Values: ZERO, FIRST, SECOND; Default: ZERO. CFOUR_DIFF_TYPE (CFOUR)¶CFOUR — Specifies whether orbital-relaxed (RELAXED =0) or orbital-unrelaxed (UNRELAXED =1) derivatives are computed in the CC calculation. Type: string; Possible Values: RELAXED, UNRELAXED; Default: RELAXED. CFOUR_DROPMO (CFOUR)¶CFOUR — Specifies which molecular orbitals will be dropped from the post-SCF calculation. The orbitals are numbered in ascending order from the most stable (negative energy) to the most unstable (largest positive energy). Individual orbitals must be separated with a dash, while x>y means orbitals x through y inclusive. For example, the string 1>10-55-58>64, would result in orbitals 1,2,3,4,5,6,7,8,9,10,55,58,59,60,61,62,63 and 64 being dropped. For UHF calculations, the appropriate orbitals are deleted for both spin cases. No dropped virtual MOs are currently allowed for gradient or property calculations. Psi4 Interface: The array above is specified in PSI as (white space tolerant) [1,2,3,4,5,6,7,8,9,10,55,58,59,60,61,62,63,64]. Type: array; Default: No Default. CFOUR_ECP (CFOUR)¶CFOUR — Specifies whether effective core potentials (pseudopotentials) are used (ON, =1) or not (OFF, =0). Type: boolean; Default: false. CFOUR_EIGENVECTOR (CFOUR)¶CFOUR — Specifies which eigenvector of the totally symmetric part of the block-factored Hessian is to be followed uphill in a transition state search. Eigenvectors are indexed by their eigenvalues – t",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:32930,Energy Efficiency,energy,energy,32930,"ot energy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually needs not be set in any calculation since it is automatically set if the appropriate other options in the CFOUR namelist are turned on. Psi4 Interface: Keyword set from type of computation command: ZERO if energy(), FIRST if gradient() or optimize(), etc. Type: string; Possible Values: ZERO, FIRST, SECOND; Default: ZERO. CFOUR_DIFF_TYPE (CFOUR)¶CFOUR — Specifies whether orbital-relaxed (RELAXED =0) or orbital-unrelaxed (UNRELAXED =1) derivatives are computed in the CC calculation. Type: string; Possible Values: RELAXED, UNRELAXED; Default: RELAXED. CFOUR_DROPMO (CFOUR)¶CFOUR — Specifies which molecular orbitals will be dropped from the post-SCF calculation. The orbitals are numbered in ascending order from the most stable (negative energy) to the most unstable (largest positive energy). Individual orbitals must be separated with a dash, while x>y means orbitals x through y inclusive. For example, the string 1>10-55-58>64, would result in orbitals 1,2,3,4,5,6,7,8,9,10,55,58,59,60,61,62,63 and 64 being dropped. For UHF calculations, the appropriate orbitals are deleted for both spin cases. No dropped virtual MOs are currently allowed for gradient or property calculations. Psi4 Interface: The array above is specified in PSI as (white space tolerant) [1,2,3,4,5,6,7,8,9,10,55,58,59,60,61,62,63,64]. Type: array; Default: No Default. CFOUR_ECP (CFOUR)¶CFOUR — Specifies whether effective core potentials (pseudopotentials) are used (ON, =1) or not (OFF, =0). Type: boolean; Default: false. CFOUR_EIGENVECTOR (CFOUR)¶CFOUR — Specifies which eigenvector of the totally symmetric part of the block-factored Hessian is to be followed uphill in a transition state search. Eigenvectors are indexed by their eigenvalues – t",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:36060,Energy Efficiency,energy,energy,36060,"UR — Specifies the threshold used in converging CC-LR/EOM-CC calculations. The iterative diagonalization is continued until the RMS residual falls below \(10^{-N}\) with \(N\) as the value specified with this keyword. Type: integer; Default: 5. CFOUR_ESTATE_MAXCYC (CFOUR)¶CFOUR — The maximum number of expansion vectors used in the solution of EOMCC equations (Default: 20, hard-coded to 4 in triples calculations). Type: integer; Default: 20. CFOUR_ESTATE_PROP (CFOUR)¶CFOUR — This keyword applies only to EOM-CC calculations and specifies whether any excited or ionized state one-electron properties are to be calculated. Proper use of this keyword requires a relatively advanced knowledge of quantum chemistry and the available options are discussed here. The options are: OFF (=0) [no properties or transition moments are calculated]; EXPECTATION (=1) [transition moments and dipole strengths are calculated along with selected one-electron properties which are evaluated as expectation values]; UNRELAXED (=2) [selected one-electron properties are calculated in an approximation that neglects relaxation of molecular orbitals]; RESPONSE (=3) [selected one-electron properties are calculated as analytic first derivatives of the energy]. Except for EOMCC calculations on two-electron systems (which are exact), properties obtained by the three approaches will not be equivalent. The default value for this keyword is slightly complicated. For TDA calculations, the default is EXPECTATION since the evaluation of transition moments involves only a negligible amount of additional computation relative to the evaluation of the excitation energies. For EOMCC, the default is OFF since evaluation of any transition moments or properties requires approximately twice the computational time. Transition moments and dipole strengths are evaluated by default for all values of ESTATE_PROP other than OFF. Type: string; Possible Values: OFF, EXPECTATION, UNRELAXED, RESPONSE; Default: No Default. CFOUR_ES",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:42513,Energy Efficiency,adapt,adapted,42513,"hes. For example, FD_IRREP=1/3/4 means compute the frequencies of modes transforming as the first, third, and fourth irreducible representations. If a symmetry is specified for which there are no vibrational modes, the program will terminate. The labels of the irreducible representations for this keyword are not usually the same as those used in the rest of the calculation. Moreover, for some point groups, for example, those of linear molecules, the two sets of labels refer to different subgroups. There is as yet no straightforward way to determine what they will be without starting a calculation. If one runs the xjoda and then the xsymcor executables, the relevant irreducible representations will be listed. If all vibrational frequencies are desired, this keyword need not be included. Default : compute vibrational frequencies for all irreducible representations. Type: array; Default: No Default. CFOUR_FD_PROJECT (CFOUR)¶CFOUR — Specifies whether or not rotational degrees of freedoms are projected out from the symmetry-adapted coordinates in a finite difference calculations. ON (=0) uses rotationally projected coordinates, while OFF (=1) retains the rotational degrees of freedom. At a stationary point on the potential energy surface, both options will give equivalent harmonic force fields, but OFF should be used at non-stationary points. Type: string; Possible Values: ON, OFF; Default: ON. CFOUR_FD_STEPSIZE (CFOUR)¶CFOUR — Specifies the step length in mass-weighted coordinates (in \(10^{-4} amu^{1/2} bohr\) ) used in generating the force constant matrix by finite difference of Cartesian gradients. Type: integer; Default: 5. CFOUR_FD_USEGROUP (CFOUR)¶CFOUR — In finite difference calculations using the FINDIF option, this keyword specifies the point group to be used in generating the symmetry-adapted vibrational coordinates. FULL (= 0) specifies the full molecular point group, COMP (= 1) specifies the Abelian subgroup used in the electronic structure calculation. Type",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:42716,Energy Efficiency,energy,energy,42716,"sentations for this keyword are not usually the same as those used in the rest of the calculation. Moreover, for some point groups, for example, those of linear molecules, the two sets of labels refer to different subgroups. There is as yet no straightforward way to determine what they will be without starting a calculation. If one runs the xjoda and then the xsymcor executables, the relevant irreducible representations will be listed. If all vibrational frequencies are desired, this keyword need not be included. Default : compute vibrational frequencies for all irreducible representations. Type: array; Default: No Default. CFOUR_FD_PROJECT (CFOUR)¶CFOUR — Specifies whether or not rotational degrees of freedoms are projected out from the symmetry-adapted coordinates in a finite difference calculations. ON (=0) uses rotationally projected coordinates, while OFF (=1) retains the rotational degrees of freedom. At a stationary point on the potential energy surface, both options will give equivalent harmonic force fields, but OFF should be used at non-stationary points. Type: string; Possible Values: ON, OFF; Default: ON. CFOUR_FD_STEPSIZE (CFOUR)¶CFOUR — Specifies the step length in mass-weighted coordinates (in \(10^{-4} amu^{1/2} bohr\) ) used in generating the force constant matrix by finite difference of Cartesian gradients. Type: integer; Default: 5. CFOUR_FD_USEGROUP (CFOUR)¶CFOUR — In finite difference calculations using the FINDIF option, this keyword specifies the point group to be used in generating the symmetry-adapted vibrational coordinates. FULL (= 0) specifies the full molecular point group, COMP (= 1) specifies the Abelian subgroup used in the electronic structure calculation. Type: string; Possible Values: FULL, COMP; Default: FULL. CFOUR_FILE_RECSIZ (CFOUR)¶CFOUR — This specifies the physical length (in integer words) of the records used in the word-addressable direct access files used by CFOUR. This value should always be chosen as a multiple of 512 by",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:43300,Energy Efficiency,adapt,adapted,43300," desired, this keyword need not be included. Default : compute vibrational frequencies for all irreducible representations. Type: array; Default: No Default. CFOUR_FD_PROJECT (CFOUR)¶CFOUR — Specifies whether or not rotational degrees of freedoms are projected out from the symmetry-adapted coordinates in a finite difference calculations. ON (=0) uses rotationally projected coordinates, while OFF (=1) retains the rotational degrees of freedom. At a stationary point on the potential energy surface, both options will give equivalent harmonic force fields, but OFF should be used at non-stationary points. Type: string; Possible Values: ON, OFF; Default: ON. CFOUR_FD_STEPSIZE (CFOUR)¶CFOUR — Specifies the step length in mass-weighted coordinates (in \(10^{-4} amu^{1/2} bohr\) ) used in generating the force constant matrix by finite difference of Cartesian gradients. Type: integer; Default: 5. CFOUR_FD_USEGROUP (CFOUR)¶CFOUR — In finite difference calculations using the FINDIF option, this keyword specifies the point group to be used in generating the symmetry-adapted vibrational coordinates. FULL (= 0) specifies the full molecular point group, COMP (= 1) specifies the Abelian subgroup used in the electronic structure calculation. Type: string; Possible Values: FULL, COMP; Default: FULL. CFOUR_FILE_RECSIZ (CFOUR)¶CFOUR — This specifies the physical length (in integer words) of the records used in the word-addressable direct access files used by CFOUR. This value should always be chosen as a multiple of 512 bytes, as your local system manager certainly understands. Type: integer; Default: 2048. CFOUR_FILE_STRIPE (CFOUR)¶CFOUR — This option allows the splitting of files. Input is required in the form N1/N2/N3/N4/N5, where N1, N2, N3, N4, and N5 specify the number of files in which MOINTS, GAMLAM, MOABCD, DERINT, and DERGAM are split, respectively. Type: string; Default: 0/0/0/0/0. CFOUR_FINITE_PERTURBATION (CFOUR)¶CFOUR — Specifies the field strength for a perturbation (defin",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:45639,Energy Efficiency,energy,energy,45639,"constructs the matrix directly from the basis function integrals. In general, PK is somewhat faster, but results in considerable use of disk space when out-of-core algorithms are required. (Default: FOCK). Type: string; Possible Values: PK, AO; Default: No Default. CFOUR_FREQ_ALGORITHM (CFOUR)¶CFOUR — FREQ_ALGORIT experimental use. Type: string; Possible Values: STANDARD, PARALLEL; Default: STANDARD. CFOUR_FROZEN_CORE (CFOUR)¶CFOUR — Specifies whether in the correlation treatment all electron (OFF =0) or only the valence electrons (ON =1) are considered. This keyword provides an alternative to the CFOUR_DROPMO keyword, as it allows frozen-core calculation without explicitly specifying the corresponding inner-shell orbitals. Type: boolean; Default: false. CFOUR_FROZEN_VIRT (CFOUR)¶CFOUR — Specifies whether in the correlation treatment all virtual orbitals (OFF =0) or only a subset of virtual orbitals (ON =1) are used. In the latter case, the threshold for deleting virtual orbitals based on the orbital energy needs to be specified in a %frozen_virt section. Type: boolean; Default: false. CFOUR_GAMMA_ABCD (CFOUR)¶CFOUR — Used to control the handling and storage of two-particle density matrix elements with four virtual indices \(\Gamma(abcd)\). DISK (=0) directs the program to calculate and store all elements of \(\Gamma(abcd)\), while DIRECT (=1) tells the program to use alternative algorithms in which \(\Gamma(abcd)\) is calculated and used “on the fly”. Note that this option might be not available for all type of calculations. Type: string; Possible Values: DISK, DIRECT; Default: DISK. CFOUR_GENBAS_1 (CFOUR)¶CFOUR — This keyword applies only to Hydrogen and Helium atoms and specifies the number of contracted Gaussian functions per shell. There is usually no need to use this keyword, but it can be useful for using a subset of the functions in a particular entry in the GENBAS file, particularly for generally contracted WMR basis sets. For example, if entry H:BASIS in th",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:49180,Energy Efficiency,efficient,efficient,49180,"mber of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR)¶CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR)¶CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized). Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY; Default: SINGLE_POINT. CFOUR_GIAO (CFOUR)¶CFOUR — Specifies whether gauge-including atomic orbitals are used (ON) or not (OFF). Default: ON for CFOUR_PROPS =NMR and =MAGNETIC, otherwise OFF. Type: string; Possible Values: ON, OFF; Default: No Default. CFOUR_GRID (CFOUR)¶CFOUR — Keyword used to control type of grid calculation (see later section in this manual). Options are OFF (=0), no grid calculation; CARTESIAN (=1), steps are in Cartesian ",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:49291,Energy Efficiency,energy,energy,49291,"mber of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR)¶CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR)¶CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized). Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY; Default: SINGLE_POINT. CFOUR_GIAO (CFOUR)¶CFOUR — Specifies whether gauge-including atomic orbitals are used (ON) or not (OFF). Default: ON for CFOUR_PROPS =NMR and =MAGNETIC, otherwise OFF. Type: string; Possible Values: ON, OFF; Default: No Default. CFOUR_GRID (CFOUR)¶CFOUR — Keyword used to control type of grid calculation (see later section in this manual). Options are OFF (=0), no grid calculation; CARTESIAN (=1), steps are in Cartesian ",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:49380,Energy Efficiency,energy,energy,49380,"y optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR)¶CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized). Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY; Default: SINGLE_POINT. CFOUR_GIAO (CFOUR)¶CFOUR — Specifies whether gauge-including atomic orbitals are used (ON) or not (OFF). Default: ON for CFOUR_PROPS =NMR and =MAGNETIC, otherwise OFF. Type: string; Possible Values: ON, OFF; Default: No Default. CFOUR_GRID (CFOUR)¶CFOUR — Keyword used to control type of grid calculation (see later section in this manual). Options are OFF (=0), no grid calculation; CARTESIAN (=1), steps are in Cartesian coordinates (which must be run with CFOUR_COORDINATES =CARTESIAN); INTERNAL (=2), steps are in Z-matrix internal coordinates; QUADRATURE (=3) steps are chosen for an integration based on Gauss-Hermite quadrature. (Default: OFF). Type: string; Possible Values: OFF, CARTESIAN, INTERNAL, QUADRATURE; Default: OFF. CFOUR_GUESS (CFOUR)¶CFOUR — Where the initial ",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:51685,Energy Efficiency,reduce,reduce,51685,"CFOUR — This keyword determines which action is taken by the linear response program. ON (=1) the full effective Hamiltonian is calculated and written to disk; OFF (=0) the “lambda” linear response equations are solved. Type: boolean; Default: false. CFOUR_HFSTABILITY (CFOUR)¶CFOUR — Control analysis of the stability of RHF, ROHF and UHF wavefunctions, as well as a possible search for a lower SCF solution. There are three possible options for this keyword. OFF (=0) does nothing, while ON (=1) performs a stability analysis and returns the number of negative eigenvalues in the orbital rotation Hessian. A third option, FOLLOW (=2) performs the stability analysis and then proceeds to rotate the SCF orbitals in the direction of a particular negative eigenvalue of the orbital rotation Hessian (see the explanation of keyword CFOUR_ROT_EVEC), after which the SCF is rerun. Type: string; Possible Values: OFF, ON, FOLLOW; Default: OFF. CFOUR_INCORE (CFOUR)¶CFOUR — This keyword can be used to significantly reduce disk i/o, and should be implemented very soon. The following options are available: OFF (= 0), no special algorithms are used (the default case); ALL (=1) all quantities except the \(\langle ab\vert\vert cd\rangle\) molecular integral lists are held in core; PARTIAL (= 2), the T2 and T1 vectors are held in core throughout the calculation; (=4) all quantities except the \(\langle ab\vert\vert cd\rangle\) and \(\langle ab\vert\vert ci\rangle\) integrals are held in core; (=5) \(\langle ij\vert\vert kl\rangle\) and \(\langle ij\vert\vert ka\rangle\) and two-index quantities are held in core; (=6) all direct access files (MOINTS, GAMLAM, etc.) are held in core. At present, these options have been implemented only in the energy code xvcc and the excitation energy code xvee. (Default: 0). Type: string; Possible Values: OFF, ALL, PARTIAL; Default: OFF. CFOUR_INPUT_MRCC (CFOUR)¶CFOUR — Specifies whether an input for mrcc is written (ON, =0) or not (OFF, =1) if CFOUR_CC_PROGRAM ",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:52418,Energy Efficiency,energy,energy,52418,"icular negative eigenvalue of the orbital rotation Hessian (see the explanation of keyword CFOUR_ROT_EVEC), after which the SCF is rerun. Type: string; Possible Values: OFF, ON, FOLLOW; Default: OFF. CFOUR_INCORE (CFOUR)¶CFOUR — This keyword can be used to significantly reduce disk i/o, and should be implemented very soon. The following options are available: OFF (= 0), no special algorithms are used (the default case); ALL (=1) all quantities except the \(\langle ab\vert\vert cd\rangle\) molecular integral lists are held in core; PARTIAL (= 2), the T2 and T1 vectors are held in core throughout the calculation; (=4) all quantities except the \(\langle ab\vert\vert cd\rangle\) and \(\langle ab\vert\vert ci\rangle\) integrals are held in core; (=5) \(\langle ij\vert\vert kl\rangle\) and \(\langle ij\vert\vert ka\rangle\) and two-index quantities are held in core; (=6) all direct access files (MOINTS, GAMLAM, etc.) are held in core. At present, these options have been implemented only in the energy code xvcc and the excitation energy code xvee. (Default: 0). Type: string; Possible Values: OFF, ALL, PARTIAL; Default: OFF. CFOUR_INPUT_MRCC (CFOUR)¶CFOUR — Specifies whether an input for mrcc is written (ON, =0) or not (OFF, =1) if CFOUR_CC_PROGRAM =EXTERNAL has been specified. Type: boolean; Default: true. CFOUR_INTEGRALS (CFOUR)¶CFOUR — This keyword defines what type of integral input will be written by xjoda. VMOL (=1) has to be used with the programs of CFOUR. Using ARGOS (=0), input for Pitzer’s ARGOS integral program will be written. (Default: VMOL). Type: string; Possible Values: VMOL, ARGOS; Default: VMOL. CFOUR_JODA_PRINT (CFOUR)¶CFOUR — Controls amount of debug printing performed by xjoda. The higher the number, the more information is printed. Values of 25 or higher generally do not produce anything of interest to the general user. Do not set JODA_PRINT to 999 as this will cause the core vector to be dumped to disk. Type: integer; Default: 0. CFOUR_LINEQ_CONV (C",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:52454,Energy Efficiency,energy,energy,52454,"icular negative eigenvalue of the orbital rotation Hessian (see the explanation of keyword CFOUR_ROT_EVEC), after which the SCF is rerun. Type: string; Possible Values: OFF, ON, FOLLOW; Default: OFF. CFOUR_INCORE (CFOUR)¶CFOUR — This keyword can be used to significantly reduce disk i/o, and should be implemented very soon. The following options are available: OFF (= 0), no special algorithms are used (the default case); ALL (=1) all quantities except the \(\langle ab\vert\vert cd\rangle\) molecular integral lists are held in core; PARTIAL (= 2), the T2 and T1 vectors are held in core throughout the calculation; (=4) all quantities except the \(\langle ab\vert\vert cd\rangle\) and \(\langle ab\vert\vert ci\rangle\) integrals are held in core; (=5) \(\langle ij\vert\vert kl\rangle\) and \(\langle ij\vert\vert ka\rangle\) and two-index quantities are held in core; (=6) all direct access files (MOINTS, GAMLAM, etc.) are held in core. At present, these options have been implemented only in the energy code xvcc and the excitation energy code xvee. (Default: 0). Type: string; Possible Values: OFF, ALL, PARTIAL; Default: OFF. CFOUR_INPUT_MRCC (CFOUR)¶CFOUR — Specifies whether an input for mrcc is written (ON, =0) or not (OFF, =1) if CFOUR_CC_PROGRAM =EXTERNAL has been specified. Type: boolean; Default: true. CFOUR_INTEGRALS (CFOUR)¶CFOUR — This keyword defines what type of integral input will be written by xjoda. VMOL (=1) has to be used with the programs of CFOUR. Using ARGOS (=0), input for Pitzer’s ARGOS integral program will be written. (Default: VMOL). Type: string; Possible Values: VMOL, ARGOS; Default: VMOL. CFOUR_JODA_PRINT (CFOUR)¶CFOUR — Controls amount of debug printing performed by xjoda. The higher the number, the more information is printed. Values of 25 or higher generally do not produce anything of interest to the general user. Do not set JODA_PRINT to 999 as this will cause the core vector to be dumped to disk. Type: integer; Default: 0. CFOUR_LINEQ_CONV (C",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:56178,Energy Efficiency,efficient,efficient,56178," core memory is given. Possible choices are INTEGERWORDS (default), kB, MB, GB, and TB. Psi4 Interface: Keyword set from memory input command when given, always MB. Type: string; Possible Values: INTEGERWORDS, KB, MB, GB, TB; Default: INTEGERWORDS. CFOUR_MEMORY_SIZE (CFOUR)¶CFOUR — Specifies the amount of core memory used in integer words (default) or in the units specified via the keyword CFOUR_MEM_UNIT. Default: 100 000 000 (approximately 381 or 762 MB for 32 or 64 bit machines, respectively). Psi4 Interface: Keyword set in MB from memory input command when given. Type: integer; Default: 100000000. CFOUR_METHOD (CFOUR)¶CFOUR — Specifies the geometry optimization strategy. Four values are permitted: NR (=0) – Straightforward Newton-Raphson search for minimum; RFA (=1) – Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) – Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point calculation. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly OPT_TYPE and STEP_TYPE. Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR)¶CFOUR — Specifies the type of MRCC calculation. MK performs a MR-CC calculation based on Mukherjee’s ansatz. Type: boolean; Default: false. CFOUR_MULTIPLICITY (CFOUR)¶CFOUR — Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR)¶CFOUR — Calculation of non-adiabatic coupling. In case of ON (",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:58431,Energy Efficiency,energy,energy,58431,"ATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR)¶CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead. Type: string; Possible Values: ABORT, SWITCH, RFA; Default: ABORT. CFOUR_NEWNORM (CFOUR)¶CFOUR — All components of spherical AO’s are normalized to 1. This feature can help with numerical convergence issues if AO integrals are involved. Currently only working for single-point energy calculations. Type: boolean; Default: false. CFOUR_NONHF (CFOUR)¶CFOUR — Specifies whether the reference function used in the correlation energy calculation satisfies the (spin-orbital) HF equations or not. Usually there is no need to set this parameter (OFF = 0 and ON =1), since standard non-HF reference functions (QRHF and ROHF) set this flag automatically. Type: boolean; Default: false. CFOUR_NTOP_TAMP (CFOUR)¶CFOUR — Specifies how many t amplitudes will be printed for each spin case and excitation level. For =N, The largest N amplitudes for each spin case and excitation level will be printed. Type: integer; Default: 15. CFOUR_OCCUPATION (CFOUR)¶CFOUR — Specifies the orbital occupancy of the reference function in terms of the occupation numbers of the orbitals and their irreducible representations. The occupancy is specified by either NIRREP or 2*NIRREP integers specifying the number of occupied orbitals of each symmetry type, where NIRREP is the number of irreducib",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:58576,Energy Efficiency,energy,energy,58576,"ive eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead. Type: string; Possible Values: ABORT, SWITCH, RFA; Default: ABORT. CFOUR_NEWNORM (CFOUR)¶CFOUR — All components of spherical AO’s are normalized to 1. This feature can help with numerical convergence issues if AO integrals are involved. Currently only working for single-point energy calculations. Type: boolean; Default: false. CFOUR_NONHF (CFOUR)¶CFOUR — Specifies whether the reference function used in the correlation energy calculation satisfies the (spin-orbital) HF equations or not. Usually there is no need to set this parameter (OFF = 0 and ON =1), since standard non-HF reference functions (QRHF and ROHF) set this flag automatically. Type: boolean; Default: false. CFOUR_NTOP_TAMP (CFOUR)¶CFOUR — Specifies how many t amplitudes will be printed for each spin case and excitation level. For =N, The largest N amplitudes for each spin case and excitation level will be printed. Type: integer; Default: 15. CFOUR_OCCUPATION (CFOUR)¶CFOUR — Specifies the orbital occupancy of the reference function in terms of the occupation numbers of the orbitals and their irreducible representations. The occupancy is specified by either NIRREP or 2*NIRREP integers specifying the number of occupied orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. If the ref",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:60540,Energy Efficiency,energy,energy,60540,"mmetry type a zero must be entered. If the reference function is for an open-shell system, two strings of NIRREP occupation numbers separated by a slash are input for the \(\alpha\) and \(\beta\) sets of orbitals. An example of the use of the OCCUPATION keyword for the water molecule would be OCCUPATION=3-1-1-0. For the \(^2A_1\) water cation, an open-shell system, the keyword would be specified by OCCUPATION=3-1-1-0/2-1-1-0. It should be noted that the xvmol integral program orders the irreducible representations in a strange way, which most users do not perceive to be a logical order. Hence, it is usually advisable initially to run just a single point integral and HF-SCF calculation in order to determine the number and ordering of the irreducible representations. The occupation keyword may be omitted, in which case an initial orbital occupancy is determined by diagonalization of the core Hamiltonian. In many cases, HF-SCF calculations run with the core Hamiltonian guess will usually converge to the lowest energy HF-SCF solution, but this should not be blindly assumed. (Default: The occupation is given by the core Hamiltonian initial guess). Psi4 Interface: The arrays above are specified in PSI as (white space tolerant) [3,1,1,0] and [[3,1,1,0],[3,0,1,0]]. Type: array; Default: No Default. CFOUR_OMP_NUM_THREADS (CFOUR)¶CFOUR (Expert) — Sets the OMP_NUM_THREADS environment variable before calling CFOUR. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect CFOUR. Type: integer; Default: 1. CFOUR_OPEN-SHELL (CFOUR)¶CFOUR — Specifies which kind of open-shell CC treatment is employed. The default is a spin-orbital CC treatment (SPIN-ORBITAL =1) which is the only possible choice for UHF-CC schemes anyways. For ROHF-CC treatments, the possible options are beside the standard spin-orbital scheme a spin-re",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:61664,Energy Efficiency,adapt,adapted,61664,"lution, but this should not be blindly assumed. (Default: The occupation is given by the core Hamiltonian initial guess). Psi4 Interface: The arrays above are specified in PSI as (white space tolerant) [3,1,1,0] and [[3,1,1,0],[3,0,1,0]]. Type: array; Default: No Default. CFOUR_OMP_NUM_THREADS (CFOUR)¶CFOUR (Expert) — Sets the OMP_NUM_THREADS environment variable before calling CFOUR. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect CFOUR. Type: integer; Default: 1. CFOUR_OPEN-SHELL (CFOUR)¶CFOUR — Specifies which kind of open-shell CC treatment is employed. The default is a spin-orbital CC treatment (SPIN-ORBITAL =1) which is the only possible choice for UHF-CC schemes anyways. For ROHF-CC treatments, the possible options are beside the standard spin-orbital scheme a spin-restricted CC approach (SR-CC=3), as well as a corresponding linear approximation (which in the literature usually is referred to as partially-spin-adapted CC scheme) (PSA-CC=1). SR-CC and PSA-CC are within the CCSD approximation restricted to excitations defined by the first-order interacting space arguments. With the keywords PSA-CC_FULL (=2) or SR-CC_FULL (=6) inclusion of the so called “pseudo-triples” beyond the first-order interacting space is also possible. The two-determinant CC method for open-shell singlet states can be activated by TD-CC (=8). Type: string; Possible Values: SPIN-ORBITAL, SR-CC, PSA-CC_FULL, SR-CC_FULL, TD-CC; Default: SPIN-ORBITAL. CFOUR_OPT_MAXCYC (CFOUR)¶CFOUR — Identical to CFOUR_GEO_MAXCYC. Type: integer; Default: 50. CFOUR_ORBITALS (CFOUR)¶CFOUR — Specifies the type of molecular orbitals used in post-HF calculations. STANDARD (=0) requests usage of the orbitals (from a corresponding HF-SCF calculation) without any modification. These are in the case of RHF/UHF the usual canonical HF orbitals a",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:63532,Energy Efficiency,energy,energy,63532," case of RHF/UHF the usual canonical HF orbitals and in the case of ROHF calculations the standard ROHF-orbitals with equal spatial parts for both the \(\alpha\) and the \(\beta\) spin orbitals. SEMICANONICAL (=1) forces in ROHF type calculations a transformation to so-called semicanonical orbitals which diagonalize the occupied-occupied and virtual-virtual blocks of the usual Fock-matrices. The use of semicanonical orbitals is, for example, required for ROHF-CCSD(T) calculations and for those calculations also automatically set. LOCAL requests a localization of the HF orbitals and this is currently done according to the Pipek-Mezey localization criterion. Note that it is strongly recommended not to use this keyword unless you know what are you doing. Default: STANDARD except for ROHF-CCSD(T) and ROHF-MP4 calculations for which SEMICANONICAL is the default. Type: string; Possible Values: STANDARD, SEMICANONICAL; Default: STANDARD. CFOUR_PERT_ORB (CFOUR)¶CFOUR — Specifies the type of perturbed orbitals used in energy derivative calculations. STANDARD means that the gradient formulation assumes that the perturbed orbitals are not those in which the (perturbed) Fock matrix is diagonal. CANONICAL means that the perturbed orbitals are assumed to be canonical. This keyword is set automatically to CANONICAL in derivative calculations with methods which include triple excitations (MBPT[4]/MP4, CCSD+T[CCSD], CCSD[T], QCISD[T] and all iterative schemes like CCSDT-n and CC3) apart from CCSDT. IJ_CANONICAL requests a canonical perturbed-orbital treatment only for the occupied-occupied block of the unperturbed density matrix in analytic derivative calculations. For testing purposes, it is possible to force the use standard perturbed orbitals even in case of iterative triple excitations via the option FORCE_STANDA (dne?). Note also that in case of unrelaxed derivatives standard orbitals must be used. Default : STANDARD for all methods without triples (except CCSDT), CANONICAL for",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:65112,Energy Efficiency,energy,energy,65112,"ied block of the unperturbed density matrix in analytic derivative calculations. For testing purposes, it is possible to force the use standard perturbed orbitals even in case of iterative triple excitations via the option FORCE_STANDA (dne?). Note also that in case of unrelaxed derivatives standard orbitals must be used. Default : STANDARD for all methods without triples (except CCSDT), CANONICAL for all methods with triples in case of relaxed derivatives. Type: string; Possible Values: STANDARD, CANONICAL, IJ_CANONICAL; Default: No Default. CFOUR_POINTS (CFOUR)¶CFOUR — Specifies either single (=1, or SINGLE) or double (=2, DOUBLE) sided numerical differentiation in the finite difference evaluation of the Hessian. Two-sided numerical differentiation is considerably more accurate than the single-sided method, and its use is strongly recommended for production work. Type: string; Possible Values: SINGLE, DOUBLE; Default: DOUBLE. CFOUR_PRINT (CFOUR)¶CFOUR — Controls the amount of printing in the energy and energy derivative calculation programs. Using a value of 1 will produce a modest amount of additional output over the default value of 0, which includes some useful information such as SCF eigenvectors, Fock matrix elements, etc. Type: integer; Default: 0. CFOUR_PROP_INTEGRAL (CFOUR)¶CFOUR — Allows storage of property integrals computed in xvdint on internal files (e.g., MOINTS and GAMLAM, default choice INTERNAL, =0) or on external files (EXTERNAL, =1). Type: string; Possible Values: INTERNAL, EXTERNAL; Default: INTERNAL. CFOUR_PROPS (CFOUR)¶CFOUR — Specifies whether and which molecular property is calculated. OFF (=0) means that no property is calculated, FIRST_ORDER (=1) requests computation of various one-electron first-order properties (e.g., dipole moment, quadrupole moment, electric field gradient, spin densities,etc.), SECOND_ORDER (=2, in the next release replaced by STAT_POL) computes static electric polarizabilities, DYNAMICAL (=7, in the next release rep",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:65123,Energy Efficiency,energy,energy,65123,"ied block of the unperturbed density matrix in analytic derivative calculations. For testing purposes, it is possible to force the use standard perturbed orbitals even in case of iterative triple excitations via the option FORCE_STANDA (dne?). Note also that in case of unrelaxed derivatives standard orbitals must be used. Default : STANDARD for all methods without triples (except CCSDT), CANONICAL for all methods with triples in case of relaxed derivatives. Type: string; Possible Values: STANDARD, CANONICAL, IJ_CANONICAL; Default: No Default. CFOUR_POINTS (CFOUR)¶CFOUR — Specifies either single (=1, or SINGLE) or double (=2, DOUBLE) sided numerical differentiation in the finite difference evaluation of the Hessian. Two-sided numerical differentiation is considerably more accurate than the single-sided method, and its use is strongly recommended for production work. Type: string; Possible Values: SINGLE, DOUBLE; Default: DOUBLE. CFOUR_PRINT (CFOUR)¶CFOUR — Controls the amount of printing in the energy and energy derivative calculation programs. Using a value of 1 will produce a modest amount of additional output over the default value of 0, which includes some useful information such as SCF eigenvectors, Fock matrix elements, etc. Type: integer; Default: 0. CFOUR_PROP_INTEGRAL (CFOUR)¶CFOUR — Allows storage of property integrals computed in xvdint on internal files (e.g., MOINTS and GAMLAM, default choice INTERNAL, =0) or on external files (EXTERNAL, =1). Type: string; Possible Values: INTERNAL, EXTERNAL; Default: INTERNAL. CFOUR_PROPS (CFOUR)¶CFOUR — Specifies whether and which molecular property is calculated. OFF (=0) means that no property is calculated, FIRST_ORDER (=1) requests computation of various one-electron first-order properties (e.g., dipole moment, quadrupole moment, electric field gradient, spin densities,etc.), SECOND_ORDER (=2, in the next release replaced by STAT_POL) computes static electric polarizabilities, DYNAMICAL (=7, in the next release rep",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:73338,Energy Efficiency,energy,energy,73338,"ant matrix FCMFINAL, which is written to disk during the course of both analytic and finite-difference vibrational frequency calculations. No such transformation is performed if OFF (=0); while ON (=1) directs the program to evaluate the gradient and transform it to the chosen set of normal coordinates. A warning message is printed if the force constant matrix is unavailable. Type: boolean; Default: false. CFOUR_RESTART_CC (CFOUR)¶CFOUR — Offers the possibility to restart a CC calculation which stopped for various reasons, e.g. time limit, in the correlation part. However, note that a restart which is specified by ON (= 1) needs the following files of the previous unfinished calculation: JOBARC, JAINDX, MOINTS, and MOABCD. Type: boolean; Default: false. CFOUR_ROT_EVEC (CFOUR)¶CFOUR — Specifies which eigenvector of the orbital rotation Hessian is to be used to rotate the original SCF orbitals. By default, it will use that associated with the lowest eigenvalue of the totally symmetric part of the block-factored Hessian, as this choice often leads to the lowest energy SCF solution. For RHF stability checks, only those instabilities which correspond to RHF solutions will be considered. It is important to understand that following non-symmetric eigenvectors lowers the symmetry of the wavefunction and that following RHF –> UHF stabilities leads to a UHF solution. To converge the SCF roots associated with such instabilities, one must run the calculation in reduced symmetry and as a closed-shell UHF case, respectively. Value n directs the program to follow the vector associated with the nth lowest eigenvalue having the proper symmetry (totally symmetric) and spin (RHF–>RHF or UHF–>UHF) properties. 0 means use the lowest eigenvalue. Type: integer; Default: 0. CFOUR_SAVE_INTS (CFOUR)¶CFOUR — Tells CFOUR whether to delete large files (AO integrals and MOINTS file for now) when they are no longer needed. OFF (=0) They will not be saved, ON (=1) they will be saved. Type: boolean",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:73737,Energy Efficiency,reduce,reduced,73737,"sibility to restart a CC calculation which stopped for various reasons, e.g. time limit, in the correlation part. However, note that a restart which is specified by ON (= 1) needs the following files of the previous unfinished calculation: JOBARC, JAINDX, MOINTS, and MOABCD. Type: boolean; Default: false. CFOUR_ROT_EVEC (CFOUR)¶CFOUR — Specifies which eigenvector of the orbital rotation Hessian is to be used to rotate the original SCF orbitals. By default, it will use that associated with the lowest eigenvalue of the totally symmetric part of the block-factored Hessian, as this choice often leads to the lowest energy SCF solution. For RHF stability checks, only those instabilities which correspond to RHF solutions will be considered. It is important to understand that following non-symmetric eigenvectors lowers the symmetry of the wavefunction and that following RHF –> UHF stabilities leads to a UHF solution. To converge the SCF roots associated with such instabilities, one must run the calculation in reduced symmetry and as a closed-shell UHF case, respectively. Value n directs the program to follow the vector associated with the nth lowest eigenvalue having the proper symmetry (totally symmetric) and spin (RHF–>RHF or UHF–>UHF) properties. 0 means use the lowest eigenvalue. Type: integer; Default: 0. CFOUR_SAVE_INTS (CFOUR)¶CFOUR — Tells CFOUR whether to delete large files (AO integrals and MOINTS file for now) when they are no longer needed. OFF (=0) They will not be saved, ON (=1) they will be saved. Type: boolean; Default: false. CFOUR_SCALE_ON (CFOUR)¶CFOUR — Controls whether step scaling is based on the absolute step length (1-norm) (=0 or MAG(S)) or the largest individual step in the internal coordinate space (=1 or MAX(S)). Type: string; Possible Values: MAG(S), MAX(S); Default: MAG(S). CFOUR_SCF_CONV (CFOUR)¶CFOUR — Specifies the convergence criterion for the HF-SCF equations. Equations are considered converged when the maximum change in density matrix elem",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:77032,Energy Efficiency,energy,energy,77032,"terface: Keyword subject to translation from value of MAXITER unless set explicitly. Type: integer; Default: 150. CFOUR_SD_FIELD (CFOUR)¶CFOUR — Specifies the strength of a spin-dipole perturbation as required for finite-field calculations of the SD contributions to indirect spin-spin coupling constants. The value must be specified as an integer and the SD strength used by the program will be the value of the keyword \(\times 10^{-6}\). (Default : 0, currently not implemented). Type: integer; Default: 0. CFOUR_SPHERICAL (CFOUR)¶CFOUR — Specifies whether spherical harmonic (5d, 7f, 9g, etc.) or Cartesian (6d, 10f, 15g, etc.) basis functions are to be used. ON (= 1) uses spherical harmonics, OFF (= 0) uses Cartesians. Psi4 Interface: Keyword set according to basis design when BASIS is used instead of CFOUR_BASIS. Keyword subject to translation from value of PUREAM unless set explicitly. Type: boolean; Default: true. CFOUR_SPIN_FLIP (CFOUR)¶CFOUR — Controls whether excitation energy calculations allow for a “spin flip” which changes the \(M_s\) quantum number. Such calculations have some advantages for biradicals and are currently implemented (together with gradients) for CIS and CIS(D) calculations. Options are OFF and ON. Type: boolean; Default: false. CFOUR_SPIN_ORBIT (CFOUR)¶CFOUR — Experimental Use! ON (=1) requests calculation of one-electron spin-orbit integrals. MEANSO additionally gives a mean-field treatment of the two-electron terms (spin-orbit mean field treatment as described Mol. Phys. 98, 1823-1833 (2000)). Type: string; Possible Values: ON, MEANSO, OFF; Default: OFF. CFOUR_SPIN_SCAL (CFOUR)¶CFOUR — ON (=1) requests the spin-component scaled variant of the MP2 approach. This keyword has only an effect when CFOUR_CALC_LEVEL =MP2 is specified and must be used together with CFOUR_REFERENCE =UHF. Type: boolean; Default: false. CFOUR_SPINROTATION (CFOUR)¶CFOUR — Specifies whether nuclear spin-rotation tensors are computed within a NMR chemical shift calculati",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:79529,Energy Efficiency,energy,energy,79529,"ing CFOUR_SYMMETRY =OFF in the input. The DEFAULT option (which is the default) uses the highest order Abelian subgroup. Type: string; Possible Values: DEFAULT, C1, C2, CS, CI, C2V, C2H, D2, D2H, OFF; Default: DEFAULT. CFOUR_SYM_CHECK (CFOUR)¶CFOUR — In principle can be used to force the SCF to converge a solution for which the density matrix transforms as the totally symmetric representation of the point group (i.e. no broken symmetry solutions). The code seems to work in most cases, but has currently been implemented for point groups with E type representation and not for those with triply-, quadruply- or pentuply-degenerate representations. Extending the code to those cases is probably straightforward, and the reader is encouraged to do so if (s)he is so inclined. SYM_CHECK=0 “forces” the high-symmetry solution. SYM_CHECK=OVERRIDE (=1) doesn’t. The latter is the default. Type: boolean; Default: true. CFOUR_SYMMETRY (CFOUR)¶CFOUR — Specifies what subgroup of the full point group is to be used in the energy and/or gradient calculation (the computational point group). OFF (=1) forces a no symmetry run (in \(C_1\) ) and ON (=0) runs the calculation in the largest self-adjoint subgroup ( \(D_{2h}\) and its subgroups). Type: boolean; Default: true. CFOUR_T3_EXTRAPOL (CFOUR)¶CFOUR — Specifies whether the T3 amplitudes are included ON (=1) or not included OFF (=0) in the DIIS convergence acceleration during CCSDT calculations. Inclusion of T3 speeds up convergence and allows tight convergence, but on the other hand it increases disk space requirements. Note that this keyword is only available with module xecc. Type: boolean; Default: false. CFOUR_TAMP_SUM (CFOUR)¶CFOUR — Specifies how often the largest \(t\) amplitudes are to be printed. For =0, amplitudes are printed at the beginning and end of the run. For =1, amplitudes are printed every iteration. For =2, amplitudes are printed every other iteration, etc. Type: integer; Default: 5. CFOUR_THERMOCHEMISTRY (CFOUR)¶CFOUR",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:83255,Energy Efficiency,adapt,adapted,83255,"eloper version). Type: integer; Default: 25. CFOUR_UNITS (CFOUR)¶CFOUR — Specifies the units used for molecular geometry input. ANGSTROM (= 0) uses Angstrom units, BOHR (= 1) specifies atomic units. Psi4 Interface: Keyword set from active molecule, always ANGSTROM. Type: string; Possible Values: ANGSTROM, BOHR; Default: ANGSTROM. CFOUR_UPDATE_HESSIAN (CFOUR)¶CFOUR — Specifies whether or not the Hessian update is carried out. OFF (= 0) uses the initial Hessian (however supplied, either the default guess or a FCMINT file), ON (= 1) updates it during subsequent optimization cycles. (not in current public version). Type: boolean; Default: true. CFOUR_VIBRATION (CFOUR)¶CFOUR — Specifies whether (harmonic) vibrational frequencies are calculated or not. If the default NO (=0) is specified then no frequencies are calculated. For ANALYTIC, vibrational frequencies are determined from analytically computed second derivatives, and for FINDIF (=2) vibrational frequencies are calculated from a force field obtained by numerical differentiation of analytically evaluated gradients (or even single-point energies) using symmetry-adapted mass-weighted Cartesian coordinates. If vibrational frequencies are calculated, a normal mode analysis using the computed force-constant matrix is performed, rotationally projected frequencies are computed, infrared intensities are determined, and zero-point energies (ZPE) are evaluated. Type: string; Possible Values: NO, ANALYTIC, FINDIF, EXACT; Default: NO. CFOUR_VTRAN (CFOUR)¶CFOUR — This keyword defines what type of integral transformation is to be performed in the program xvtran. FULL/PARTIAL (=0) allows the transformation program to choose the appropriate type of transformation, while FULL (=1) requires a full integral transformation and PARTIAL (=2) means a MBPT(2)-specific transformation where the \((ab \vert cd)\) integrals are not formed. Type: string; Possible Values: FULL/PARTIAL, FULL, PARTIAL; Default: FULL/PARTIAL. CFOUR_XFIELD (CFOUR)¶C",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:88230,Energy Efficiency,charge,charge,88230,"help efficiency, but hazardous when solving for higher roots. Type: boolean; Default: false. COMPLEX_TOLERANCE (CCEOM)¶CCEOM — Complex tolerance applied in CCEOM computations. Type: conv double; Default: 1e-12. COMPUT_S2 (DFOCC)¶DFOCC — Do compute \(\langle \hat{S}^2 \rangle\) for DF-OMP2/DF-MP2?. Type: boolean; Default: false. COMPUTE_MP4_TRIPLES (FNOCC)¶FNOCC (Expert) — Do compute MP4 triples contribution?. Type: boolean; Default: false. COMPUTE_TRIPLES (FNOCC)¶FNOCC (Expert) — Do compute triples contribution?. Type: boolean; Default: true. CONSECUTIVE_BACKSTEPS (OPTKING)¶OPTKING — Set number of consecutive backward steps allowed in optimization. Type: integer; Default: 0. CORR_ANSATZ (PSIMRCC)¶PSIMRCC — The ansatz to use for MRCC computations. Type: string; Possible Values: SR, MK, BW, APBW; Default: MK. CORR_CCSD_T (PSIMRCC)¶PSIMRCC — The type of CCSD(T) computation to perform. Type: string; Possible Values: STANDARD, PITTNER; Default: STANDARD. CORR_CHARGE (PSIMRCC)¶PSIMRCC — The molecular charge of the target state. Type: integer; Default: 0. CORR_MULTP (PSIMRCC)¶PSIMRCC — The multiplicity, \(M_S(M_S+1)\), of the target state. Must be specified if different from the reference \(M_s\). Type: integer; Default: 1. CORR_WFN (PSIMRCC)¶PSIMRCC — The type of correlated wavefunction. Type: string; Possible Values: PT2, CCSD, MP2-CCSD, CCSD_T; Default: CCSD. COSX_BASIS_TOLERANCE (SCF)¶SCF (Expert) — Screening criteria for basis function values on COSX grids. Type: conv double; Default: 1.0e-10. COSX_DENSITY_TOLERANCE (SCF)¶SCF (Expert) — Screening criteria for shell-pair densities in COSX. Type: conv double; Default: 1.0e-10. COSX_INTS_TOLERANCE (SCF)¶SCF — Screening criteria for integrals and intermediates in COSX. Type: conv double; Default: 1.0e-11. COSX_MAXITER_FINAL (SCF)¶SCF — Controls SCF iteration behavior for the larger (i.e., final) COSX grid. -1 fully converges the SCF on the final grid if possible, ending early if MAXITER total SCF iterations are reached (f",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:89503,Energy Efficiency,reduce,reduce,89503,"ted wavefunction. Type: string; Possible Values: PT2, CCSD, MP2-CCSD, CCSD_T; Default: CCSD. COSX_BASIS_TOLERANCE (SCF)¶SCF (Expert) — Screening criteria for basis function values on COSX grids. Type: conv double; Default: 1.0e-10. COSX_DENSITY_TOLERANCE (SCF)¶SCF (Expert) — Screening criteria for shell-pair densities in COSX. Type: conv double; Default: 1.0e-10. COSX_INTS_TOLERANCE (SCF)¶SCF — Screening criteria for integrals and intermediates in COSX. Type: conv double; Default: 1.0e-11. COSX_MAXITER_FINAL (SCF)¶SCF — Controls SCF iteration behavior for the larger (i.e., final) COSX grid. -1 fully converges the SCF on the final grid if possible, ending early if MAXITER total SCF iterations are reached (failure). 0 disables the final COSX grid entirely. n runs up to n iterations on the final COSX grid, ending early if SCF convergence is reached (success) or if MAXITER total SCF iterations are reached (failure). Type: integer; Default: 1. COSX_OVERLAP_FITTING (SCF)¶SCF (Expert) — Do reduce numerical COSX errors with overlap fitting?. Type: boolean; Default: true. COSX_PRUNING_SCHEME (SCF)¶SCF (Expert) — Pruning scheme for COSX grids. Type: string; Default: ROBUST. COSX_RADIAL_POINTS_FINAL (SCF)¶SCF — Number of radial points in final COSX grid. Type: integer; Default: 35. COSX_RADIAL_POINTS_INITIAL (SCF)¶SCF — Number of radial points in initial COSX grid. Type: integer; Default: 25. COSX_SPHERICAL_POINTS_FINAL (SCF)¶SCF — Number of spherical points in final COSX grid. Type: integer; Default: 110. COSX_SPHERICAL_POINTS_INITIAL (SCF)¶SCF — Number of spherical points in initial COSX grid. Type: integer; Default: 50. COUPLED_INDUCTION (SAPT)¶SAPT (Expert) — Solve the CPHF equations to compute coupled induction and exchange-induction. These are not available for ROHF, and the option is automatically false in this case. In all other cases, coupled induction is strongly recommended. Only turn it off if the induction energy is not going to be used. Type: boolean; Default: tru",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:90447,Energy Efficiency,energy,energy,90447," Default: 1. COSX_OVERLAP_FITTING (SCF)¶SCF (Expert) — Do reduce numerical COSX errors with overlap fitting?. Type: boolean; Default: true. COSX_PRUNING_SCHEME (SCF)¶SCF (Expert) — Pruning scheme for COSX grids. Type: string; Default: ROBUST. COSX_RADIAL_POINTS_FINAL (SCF)¶SCF — Number of radial points in final COSX grid. Type: integer; Default: 35. COSX_RADIAL_POINTS_INITIAL (SCF)¶SCF — Number of radial points in initial COSX grid. Type: integer; Default: 25. COSX_SPHERICAL_POINTS_FINAL (SCF)¶SCF — Number of spherical points in final COSX grid. Type: integer; Default: 110. COSX_SPHERICAL_POINTS_INITIAL (SCF)¶SCF — Number of spherical points in initial COSX grid. Type: integer; Default: 50. COUPLED_INDUCTION (SAPT)¶SAPT (Expert) — Solve the CPHF equations to compute coupled induction and exchange-induction. These are not available for ROHF, and the option is automatically false in this case. In all other cases, coupled induction is strongly recommended. Only turn it off if the induction energy is not going to be used. Type: boolean; Default: true. COUPLING (PSIMRCC)¶PSIMRCC — The order of coupling terms to include in MRCCSDT computations. Type: string; Possible Values: NONE, LINEAR, QUADRATIC, CUBIC; Default: CUBIC. COUPLING_TERMS (PSIMRCC)¶PSIMRCC — Do include the terms that couple the reference determinants?. Type: boolean; Default: true. COVALENT_CONNECT (OPTKING)¶OPTKING — When determining connectivity, a bond is assigned if interatomic distance is less than (this number) * sum of covalent radii. Type: double; Default: 1.3. CPHF_MEM_SAFETY_FACTOR (CPHF)¶CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. CPHF_R_CONVERGENCE (FISAPT)¶FISAPT — Convergence criterion for residual of the CPHF coefficients in the SAPT \(E_{ind,resp}^{(20)}\) term. Type: conv double; Default: 1e-8. CPHF_R_CONVERGENCE (SAPT)¶SAPT — Convergence criterion for residual of the CPHF/CPKS coefficients in the SAPT \(E_{ind,resp}^{(20)}\) term. This applies to wavefunctio",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:92130,Energy Efficiency,adapt,adaptive,92130,"5. CPHF_R_CONVERGENCE (FISAPT)¶FISAPT — Convergence criterion for residual of the CPHF coefficients in the SAPT \(E_{ind,resp}^{(20)}\) term. Type: conv double; Default: 1e-8. CPHF_R_CONVERGENCE (SAPT)¶SAPT — Convergence criterion for residual of the CPHF/CPKS coefficients in the SAPT \(E_{ind,resp}^{(20)}\) term. This applies to wavefunction-based SAPT or SAPT(DFT). See CPHF_R_CONVERGENCE for fragment-partitioned or intramolecular SAPT. Type: conv double; Default: 1e-8. CPHF_TASKS (CPHF)¶CPHF — Which tasks to run CPHF For * Valid choices: * -Polarizability *. Type: array; Default: No Default. CUBEPROP_BASIS_FUNCTIONS (GLOBALS)¶GLOBALS — List of basis function indices for which cube files are generated (1-based). All basis functions computed if empty. Type: array; Default: No Default. CUBEPROP_FILEPATH (GLOBALS)¶GLOBALS — Directory to which to write cube files. Default is the input file directory. Type: string; Default: No Default. CUBEPROP_ISOCONTOUR_THRESHOLD (GLOBALS)¶GLOBALS — Fraction of density captured by adaptive isocontour values. Type: double; Default: 0.85. CUBEPROP_ORBITALS (GLOBALS)¶GLOBALS — List of orbital indices for which cube files are generated (1-based, \(+\) for alpha, \(-\) for beta). All orbitals computed if empty. Type: array; Default: No Default. CUBEPROP_TASKS (GLOBALS)¶GLOBALS — Properties to compute. Valid tasks include: DENSITY - Da, Db, Dt, Ds; ESP - Dt, ESP; ORBITALS - Psi_a_N, Psi_b_N; BASIS_FUNCTIONS - Phi_N; LOL - LOLa, LOLb; ELF - ELFa, ELFb; FRONTIER_ORBITALS - Psi_a_N_HOMO + Psi_a_N_LUMO; DUAL_DESCRIPTOR - DUAL_N_HOMO-M_LUMO. Type: array; Default: No Default. CUBIC_BASIS_TOLERANCE (FISAPT)¶FISAPT (Expert) — CubicScalarGrid basis cutoff. Type: conv double; Default: 1.0e-12. CUBIC_BASIS_TOLERANCE (GLOBALS)¶GLOBALS (Expert) — CubicScalarGrid basis cutoff. Type: conv double; Default: 1.0e-12. CUBIC_BLOCK_MAX_POINTS (FISAPT)¶FISAPT (Expert) — CubicScalarGrid maximum number of grid points per evaluation block. Type: integer; Default: 1",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:101189,Energy Efficiency,efficient,efficient,101189," (DDX)¶DDX — Dielectric constant of the solvent to use. Type: double; Default: 0. DDX_SOLVENT_EPSILON_OPTICAL (DDX)¶DDX — Optical dielectric constant of the solvent to use for non-equilibrium solvation. Type: double; Default: 0. DDX_SOLVENT_KAPPA (DDX)¶DDX — Debye-Hückel parameter of the solvent to use. Ignored if DDX_MODEL is not LPB; mandatory for LPB. Uses the unit of the molecule (i.e. either ang^{-1} or bohr^{-1}). Type: double; Default: 0. DEBUG (CCDENSITY)¶CCDENSITY — Reproducing energies from densities ?. Type: integer; Default: 0. DEBUG (CPHF)¶CPHF — The amount of debug information printed to the output file. Type: integer; Default: 0. DEBUG (GLOBALS)¶GLOBALS (Expert) — The amount of information to print to the output file. Type: integer; Default: 0. DELETE_TEI (CCTRANSORT)¶CCTRANSORT — Delete the SO two-electron integrals after the transformation?. Type: boolean; Default: true. DENOMINATOR_ALGORITHM (SAPT)¶SAPT — Denominator algorithm for PT methods. Laplace transformations are slightly more efficient. Type: string; Possible Values: LAPLACE, CHOLESKY; Default: LAPLACE. DENOMINATOR_DELTA (SAPT)¶SAPT — Maximum error allowed (Max error norm in Delta tensor) in the approximate energy denominators employed for most of the \(E_{disp}^{(20)}\) and \(E_{exch-disp}^{(20)}\) evaluation. Type: double; Default: 1.0e-6. DERTYPE (EFP)¶EFP (Expert) — Do EFP gradient?. Type: string; Possible Values: NONE, FIRST; Default: NONE. DERTYPE (GLOBALS)¶GLOBALS (Expert) — Derivative level. Type: string; Possible Values: NONE, FIRST, SECOND, RESPONSE; Default: NONE. DETCI_FREEZE_CORE (DETCI)¶DETCI — Do freeze core orbitals?. Type: boolean; Default: true. DF_BASIS_CC (FNOCC)¶FNOCC — Auxilliary basis for df-ccsd(t). Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_CC (GLOBALS)¶GLOBALS — The density fitting basis to use in coupled cluster computations. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_DCT (DCT)¶DCT — Auxiliary basis se",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:101374,Energy Efficiency,energy,energy,101374,". Type: double; Default: 0. DDX_SOLVENT_KAPPA (DDX)¶DDX — Debye-Hückel parameter of the solvent to use. Ignored if DDX_MODEL is not LPB; mandatory for LPB. Uses the unit of the molecule (i.e. either ang^{-1} or bohr^{-1}). Type: double; Default: 0. DEBUG (CCDENSITY)¶CCDENSITY — Reproducing energies from densities ?. Type: integer; Default: 0. DEBUG (CPHF)¶CPHF — The amount of debug information printed to the output file. Type: integer; Default: 0. DEBUG (GLOBALS)¶GLOBALS (Expert) — The amount of information to print to the output file. Type: integer; Default: 0. DELETE_TEI (CCTRANSORT)¶CCTRANSORT — Delete the SO two-electron integrals after the transformation?. Type: boolean; Default: true. DENOMINATOR_ALGORITHM (SAPT)¶SAPT — Denominator algorithm for PT methods. Laplace transformations are slightly more efficient. Type: string; Possible Values: LAPLACE, CHOLESKY; Default: LAPLACE. DENOMINATOR_DELTA (SAPT)¶SAPT — Maximum error allowed (Max error norm in Delta tensor) in the approximate energy denominators employed for most of the \(E_{disp}^{(20)}\) and \(E_{exch-disp}^{(20)}\) evaluation. Type: double; Default: 1.0e-6. DERTYPE (EFP)¶EFP (Expert) — Do EFP gradient?. Type: string; Possible Values: NONE, FIRST; Default: NONE. DERTYPE (GLOBALS)¶GLOBALS (Expert) — Derivative level. Type: string; Possible Values: NONE, FIRST, SECOND, RESPONSE; Default: NONE. DETCI_FREEZE_CORE (DETCI)¶DETCI — Do freeze core orbitals?. Type: boolean; Default: true. DF_BASIS_CC (FNOCC)¶FNOCC — Auxilliary basis for df-ccsd(t). Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_CC (GLOBALS)¶GLOBALS — The density fitting basis to use in coupled cluster computations. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_DCT (DCT)¶DCT — Auxiliary basis set for DCT density fitting computations. Defaults to a RI basis. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_ELST (SAPT)¶SAPT — Auxiliary basis set for SAPT Elst10 and Ex",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:111878,Energy Efficiency,energy,energy,111878,"I)¶DETCI — This specifies which method is to be used in diagonalizing the Hamiltonian. The valid options are: RSP, to form the entire H matrix and diagonalize using libciomr to obtain all eigenvalues (n.b. requires HUGE memory); OLSEN, to use Olsen’s preconditioned inverse subspace method (1990); MITRUSHENKOV, to use a 2x2 Olsen/Davidson method; and DAVIDSON (or SEM) to use Liu’s Simultaneous Expansion Method, which is identical to the Davidson method if only one root is to be found. The SEM method is the most robust, but it also requires \(2NM+1\) CI vectors on disk, where \(N\) is the maximum number of iterations and \(M\) is the number of roots. Type: string; Possible Values: RSP, DAVIDSON, SEM; Default: SEM. DIAGONAL_CCSD_T (PSIMRCC)¶PSIMRCC — Do include the diagonal corrections in (T) computations?. Type: boolean; Default: true. DIAGONALIZE_HEFF (PSIMRCC)¶PSIMRCC — Do diagonalize the effective Hamiltonian?. Type: boolean; Default: false. DIE_IF_NOT_CONVERGED (GLOBALS)¶GLOBALS (Expert) — Psi4 dies if energy does not converge. Type: boolean; Default: true. DIIS (CCENERGY)¶CCENERGY — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (CCLAMBDA)¶CCLAMBDA — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (CCRESPONSE)¶CCRESPONSE — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (DETCI)¶DETCI — Do use DIIS extrapolation to accelerate CC convergence?. Type: boolean; Default: true. DIIS (MCSCF)¶MCSCF — Do use DIIS extrapolation to accelerate convergence of the SCF energy (MO coefficients only)?. Type: boolean; Default: true. DIIS (SCF)¶SCF — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS_FREQ (DETCI)¶DETCI — How often to do a DIIS extrapolation. 1 means do DIIS every iteration, 2 is every other iteration, etc. Type: integer; Default: 1. DIIS_MAX_VECS (DCT)¶DCT (Expert) — Maximum number of error vectors stored fo",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:112463,Energy Efficiency,energy,energy,112463,"re \(N\) is the maximum number of iterations and \(M\) is the number of roots. Type: string; Possible Values: RSP, DAVIDSON, SEM; Default: SEM. DIAGONAL_CCSD_T (PSIMRCC)¶PSIMRCC — Do include the diagonal corrections in (T) computations?. Type: boolean; Default: true. DIAGONALIZE_HEFF (PSIMRCC)¶PSIMRCC — Do diagonalize the effective Hamiltonian?. Type: boolean; Default: false. DIE_IF_NOT_CONVERGED (GLOBALS)¶GLOBALS (Expert) — Psi4 dies if energy does not converge. Type: boolean; Default: true. DIIS (CCENERGY)¶CCENERGY — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (CCLAMBDA)¶CCLAMBDA — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (CCRESPONSE)¶CCRESPONSE — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS (DETCI)¶DETCI — Do use DIIS extrapolation to accelerate CC convergence?. Type: boolean; Default: true. DIIS (MCSCF)¶MCSCF — Do use DIIS extrapolation to accelerate convergence of the SCF energy (MO coefficients only)?. Type: boolean; Default: true. DIIS (SCF)¶SCF — Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. DIIS_FREQ (DETCI)¶DETCI — How often to do a DIIS extrapolation. 1 means do DIIS every iteration, 2 is every other iteration, etc. Type: integer; Default: 1. DIIS_MAX_VECS (DCT)¶DCT (Expert) — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (DETCI)¶DETCI — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 5. DIIS_MAX_VECS (FNOCC)¶FNOCC — Desired number of DIIS vectors. Type: integer; Default: 8. DIIS_MAX_VECS (MCSCF)¶MCSCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (OCC)¶OCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (PSIMRCC)¶PSIMRCC — Maximum number of error vectors stored for DIIS e",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:115870,Energy Efficiency,energy,energy,115870,"e the dipole moment?. Type: boolean; Default: false. DIPMOM (FNOCC)¶FNOCC — Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ACPF, AQCC, CISD, and CEPA(0) methods. Type: boolean; Default: false. DISP_SIZE (FINDIF)¶FINDIF — Displacement size in au for finite-differences. Type: double; Default: 0.005. DISTRIBUTED_MATRIX (SCF)¶SCF (Expert) — The dimension sizes of the distributed matrix. Type: array; Default: No Default. DKH_ORDER (GLOBALS)¶GLOBALS (Expert) — Order of Douglas-Kroll-Hess. Type: integer; Default: 2. DLPNO_ALGORITHM (DLPNO)¶DLPNO (Expert) — Which DLPNO Algorithm to run (not set by user). Type: string; Possible Values: MP2; Default: MP2. DLPNO_LOCAL_ORBITALS (DLPNO)¶DLPNO — Orbital localizer. Type: string; Possible Values: BOYS, PIPEK_MEZEY; Default: BOYS. DLPNO_MAXITER (DLPNO)¶DLPNO — Maximum number of iterations to determine the MP2 amplitudes. Type: integer; Default: 50. DMRG_CASPT2_CALC (DMRG)¶DMRG — Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG (DMRG)¶DMRG — CASPT2 Imaginary shift. Type: double; Default: 0.0. DMRG_CASPT2_IPEA (DMRG)¶DMRG — CASPT2 IPEA shift. Type: double; Default: 0.0. DMRG_CASPT2_ORBS (DMRG)¶DMRG — Whether to calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done. Type: string; Possible Values: PSEUDOCANONICAL, ACTIVE; Default: PSEUDOCANONICAL. DMRG_DIIS (DMRG)¶DMRG — Whether or not to use DIIS for DMRG. Type: boolean; Default: false. DMRG_DIIS_WRITE (DMRG)¶DMRG — Whether or not to store the DIIS checkpoint on disk (convenient for restarting). Type: boolean; Default: true. DMRG_EXCITATION (DMRG)¶DMRG — Which root is targeted: 0 means ground state, 1 first excited state, etc. Type: integer; Default: 0. DMRG_IRREP (DMRG)¶DMRG — The DMRG wavefunction irrep uses the same conventions as PSI4. How convenient :-). Just to avoid confusion, it’s copied here. It can also be found on http://sebwouter",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:116179,Energy Efficiency,energy,energy,116179,"te-differences. Type: double; Default: 0.005. DISTRIBUTED_MATRIX (SCF)¶SCF (Expert) — The dimension sizes of the distributed matrix. Type: array; Default: No Default. DKH_ORDER (GLOBALS)¶GLOBALS (Expert) — Order of Douglas-Kroll-Hess. Type: integer; Default: 2. DLPNO_ALGORITHM (DLPNO)¶DLPNO (Expert) — Which DLPNO Algorithm to run (not set by user). Type: string; Possible Values: MP2; Default: MP2. DLPNO_LOCAL_ORBITALS (DLPNO)¶DLPNO — Orbital localizer. Type: string; Possible Values: BOYS, PIPEK_MEZEY; Default: BOYS. DLPNO_MAXITER (DLPNO)¶DLPNO — Maximum number of iterations to determine the MP2 amplitudes. Type: integer; Default: 50. DMRG_CASPT2_CALC (DMRG)¶DMRG — Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG (DMRG)¶DMRG — CASPT2 Imaginary shift. Type: double; Default: 0.0. DMRG_CASPT2_IPEA (DMRG)¶DMRG — CASPT2 IPEA shift. Type: double; Default: 0.0. DMRG_CASPT2_ORBS (DMRG)¶DMRG — Whether to calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done. Type: string; Possible Values: PSEUDOCANONICAL, ACTIVE; Default: PSEUDOCANONICAL. DMRG_DIIS (DMRG)¶DMRG — Whether or not to use DIIS for DMRG. Type: boolean; Default: false. DMRG_DIIS_WRITE (DMRG)¶DMRG — Whether or not to store the DIIS checkpoint on disk (convenient for restarting). Type: boolean; Default: true. DMRG_EXCITATION (DMRG)¶DMRG — Which root is targeted: 0 means ground state, 1 first excited state, etc. Type: integer; Default: 0. DMRG_IRREP (DMRG)¶DMRG — The DMRG wavefunction irrep uses the same conventions as PSI4. How convenient :-). Just to avoid confusion, it’s copied here. It can also be found on http://sebwouters.github.io/CheMPS2/doxygen/classCheMPS2_1_1Irreps.html . Symmetry Conventions Irrep Number & Name Group Number & Name 0 1 2 3 4 5 6 7 0: c1 A 1: ci Ag Au 2: c2 A B 3: cs A’ A’’ 4: d2 A B1 B2 B3 5: c2v A1 A2 B1 B2 6: c2h Ag Bg Au Bu 7: d2h Ag B1g B2g B3g Au B1u B2u B3u. Type: integer; Default: -1. DMRG_",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:118877,Energy Efficiency,energy,energy,118877,"tion. Type: boolean; Default: false. DMRG_SCF_ACTIVE_SPACE (DMRG)¶DMRG — Which active space to use for DMRG calculations: –> input with SCF rotations (INPUT); –> natural orbitals (NO); –> localized and ordered orbitals (LOC). Type: string; Possible Values: INPUT, NO, LOC; Default: INPUT. DMRG_SCF_DIIS_THR (DMRG)¶DMRG — When the update norm is smaller than this value DIIS starts. Type: double; Default: 1e-2. DMRG_SCF_GRAD_THR (DMRG)¶DMRG — The density RMS convergence to stop an instruction during successive DMRG instructions. Type: double; Default: 1.e-6. DMRG_SCF_MAX_ITER (DMRG)¶DMRG — Maximum number of DMRG iterations. Type: integer; Default: 100. DMRG_SCF_STATE_AVG (DMRG)¶DMRG — Whether or not to use state-averaging for roots >=2 with DMRG-SCF. Type: boolean; Default: true. DMRG_SWEEP_DVDSON_RTOL (DMRG)¶DMRG — The residual tolerances for the Davidson diagonalization during DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_ENERGY_CONV (DMRG)¶DMRG — The energy convergence to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_MAX_SWEEPS (DMRG)¶DMRG — The maximum number of sweeps to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_NOISE_PREFAC (DMRG)¶DMRG — The noise prefactors for successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_STATES (DMRG)¶DMRG — The number of reduced renormalized basis states to be retained during successive DMRG instructions. Type: array; Default: No Default. DMRG_UNITARY_WRITE (DMRG)¶DMRG — Whether or not to store the unitary on disk (convenient for restarting). Type: boolean; Default: true. DO_CCD_DISP (SAPT)¶SAPT (Expert) — Do CCD dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3?. Type: boolean; Default: false. DO_DIIS (DFOCC)¶DFOCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_DIIS (OCC)¶OCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_DISP_EXCH_SINF (SAPT)",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:119322,Energy Efficiency,reduce,reduced,119322," density RMS convergence to stop an instruction during successive DMRG instructions. Type: double; Default: 1.e-6. DMRG_SCF_MAX_ITER (DMRG)¶DMRG — Maximum number of DMRG iterations. Type: integer; Default: 100. DMRG_SCF_STATE_AVG (DMRG)¶DMRG — Whether or not to use state-averaging for roots >=2 with DMRG-SCF. Type: boolean; Default: true. DMRG_SWEEP_DVDSON_RTOL (DMRG)¶DMRG — The residual tolerances for the Davidson diagonalization during DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_ENERGY_CONV (DMRG)¶DMRG — The energy convergence to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_MAX_SWEEPS (DMRG)¶DMRG — The maximum number of sweeps to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_NOISE_PREFAC (DMRG)¶DMRG — The noise prefactors for successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_STATES (DMRG)¶DMRG — The number of reduced renormalized basis states to be retained during successive DMRG instructions. Type: array; Default: No Default. DMRG_UNITARY_WRITE (DMRG)¶DMRG — Whether or not to store the unitary on disk (convenient for restarting). Type: boolean; Default: true. DO_CCD_DISP (SAPT)¶SAPT (Expert) — Do CCD dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3?. Type: boolean; Default: false. DO_DIIS (DFOCC)¶DFOCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_DIIS (OCC)¶OCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_DISP_EXCH_SINF (SAPT)¶SAPT (Expert) — For SAPT0 or SAPT(DFT), compute the non-approximated second-order exchange-dispersion term. Type: boolean; Default: false. DO_IND30_EXCH_SINF (SAPT)¶SAPT (Expert) — For SAPT2+3, compute the non-approximated third-order exchange-induction term. Type: boolean; Default: false. DO_IND_EXCH_SINF (SAPT)¶SAPT (Expert) — For SAPT0 or SAPT(DFT), compute the non-approximated second-order exchange-induction term. Type: boolean; Default:",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:120788,Energy Efficiency,energy,energy,120788,"ation?. Type: boolean; Default: true. DO_DIIS (OCC)¶OCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_DISP_EXCH_SINF (SAPT)¶SAPT (Expert) — For SAPT0 or SAPT(DFT), compute the non-approximated second-order exchange-dispersion term. Type: boolean; Default: false. DO_IND30_EXCH_SINF (SAPT)¶SAPT (Expert) — For SAPT2+3, compute the non-approximated third-order exchange-induction term. Type: boolean; Default: false. DO_IND_EXCH_SINF (SAPT)¶SAPT (Expert) — For SAPT0 or SAPT(DFT), compute the non-approximated second-order exchange-induction term. Type: boolean; Default: false. DO_LEVEL_SHIFT (DFOCC)¶DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: boolean; Default: true. DO_MBPT_DISP (SAPT)¶SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_SCS (DFOCC)¶DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_SOS (DFOCC)¶DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT)¶SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DOCC (GLOBALS)¶GLOBALS — An array containing the number of doubly-occupi",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:121084,Energy Efficiency,energy,energy,121084,"rt) — For SAPT2+3, compute the non-approximated third-order exchange-induction term. Type: boolean; Default: false. DO_IND_EXCH_SINF (SAPT)¶SAPT (Expert) — For SAPT0 or SAPT(DFT), compute the non-approximated second-order exchange-induction term. Type: boolean; Default: false. DO_LEVEL_SHIFT (DFOCC)¶DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: boolean; Default: true. DO_MBPT_DISP (SAPT)¶SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_SCS (DFOCC)¶DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_SOS (DFOCC)¶DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT)¶SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DOCC (GLOBALS)¶GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF)¶MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DOI_BASIS_TOLERANCE (DLPNO)¶DLPNO (Expert) — Screening criteria for basis function values on DOI grids. Type: conv double; Default: 1.0e-1",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:121232,Energy Efficiency,energy,energy,121232,"H_SINF (SAPT)¶SAPT (Expert) — For SAPT0 or SAPT(DFT), compute the non-approximated second-order exchange-induction term. Type: boolean; Default: false. DO_LEVEL_SHIFT (DFOCC)¶DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: boolean; Default: true. DO_MBPT_DISP (SAPT)¶SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_SCS (DFOCC)¶DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_SOS (DFOCC)¶DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT)¶SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DOCC (GLOBALS)¶GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF)¶MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DOI_BASIS_TOLERANCE (DLPNO)¶DLPNO (Expert) — Screening criteria for basis function values on DOI grids. Type: conv double; Default: 1.0e-10. DOI_PRUNING_SCHEME (DLPNO)¶DLPNO (Expert) — Pruning scheme for DOI grids. Type: string; Possible Values: ROBUST, TREUTLER, ",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:121528,Energy Efficiency,energy,energy,121528,"olean; Default: true. DO_MBPT_DISP (SAPT)¶SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_SCS (DFOCC)¶DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_SOS (DFOCC)¶DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT)¶SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DOCC (GLOBALS)¶GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF)¶MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DOI_BASIS_TOLERANCE (DLPNO)¶DLPNO (Expert) — Screening criteria for basis function values on DOI grids. Type: conv double; Default: 1.0e-10. DOI_PRUNING_SCHEME (DLPNO)¶DLPNO (Expert) — Pruning scheme for DOI grids. Type: string; Possible Values: ROBUST, TREUTLER, NONE, FLAT, P_GAUSSIAN, D_GAUSSIAN, P_SLATER, D_SLATER, LOG_GAUSSIAN, LOG_SLATER, NONE; Default: ROBUST. DOI_RADIAL_POINTS (DLPNO)¶DLPNO (Expert) — Number of radial points in DOI grid. Type: integer; Default: 25. DOI_SPHERICAL_POINTS (DLPNO)¶DLPNO (Expert) — Number of spherical points in DOI grid. Type: integer; Defa",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:122820,Energy Efficiency,energy,energy,122820,"; Default: No Default. DOCC (MCSCF)¶MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DOI_BASIS_TOLERANCE (DLPNO)¶DLPNO (Expert) — Screening criteria for basis function values on DOI grids. Type: conv double; Default: 1.0e-10. DOI_PRUNING_SCHEME (DLPNO)¶DLPNO (Expert) — Pruning scheme for DOI grids. Type: string; Possible Values: ROBUST, TREUTLER, NONE, FLAT, P_GAUSSIAN, D_GAUSSIAN, P_SLATER, D_SLATER, LOG_GAUSSIAN, LOG_SLATER, NONE; Default: ROBUST. DOI_RADIAL_POINTS (DLPNO)¶DLPNO (Expert) — Number of radial points in DOI grid. Type: integer; Default: 25. DOI_SPHERICAL_POINTS (DLPNO)¶DLPNO (Expert) — Number of spherical points in DOI grid. Type: integer; Default: 50. DYNAMIC_LEVEL (OPTKING)¶OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC)¶DFOCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. E3_SCALE (OCC)¶OCC — Scaling value for 3rd order energy correction (S. Grimme, Vol. 24, pp. 1529, J. Comput. Chem.). Type: double; Default: 0.25. E_CONVERGENCE (CCENERGY)¶CCENERGY — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DCT)¶DCT — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. E_CONVERGENCE (DETCI)¶DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DFOCC)¶DFOCC — Convergence criteri",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:122979,Energy Efficiency,energy,energy,122979,"CE (DLPNO)¶DLPNO (Expert) — Screening criteria for basis function values on DOI grids. Type: conv double; Default: 1.0e-10. DOI_PRUNING_SCHEME (DLPNO)¶DLPNO (Expert) — Pruning scheme for DOI grids. Type: string; Possible Values: ROBUST, TREUTLER, NONE, FLAT, P_GAUSSIAN, D_GAUSSIAN, P_SLATER, D_SLATER, LOG_GAUSSIAN, LOG_SLATER, NONE; Default: ROBUST. DOI_RADIAL_POINTS (DLPNO)¶DLPNO (Expert) — Number of radial points in DOI grid. Type: integer; Default: 25. DOI_SPHERICAL_POINTS (DLPNO)¶DLPNO (Expert) — Number of spherical points in DOI grid. Type: integer; Default: 50. DYNAMIC_LEVEL (OPTKING)¶OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC)¶DFOCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. E3_SCALE (OCC)¶OCC — Scaling value for 3rd order energy correction (S. Grimme, Vol. 24, pp. 1529, J. Comput. Chem.). Type: double; Default: 0.25. E_CONVERGENCE (CCENERGY)¶CCENERGY — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DCT)¶DCT — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. E_CONVERGENCE (DETCI)¶DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DFOCC)¶DFOCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6.",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:123185,Energy Efficiency,energy,energy,123185,"s: ROBUST, TREUTLER, NONE, FLAT, P_GAUSSIAN, D_GAUSSIAN, P_SLATER, D_SLATER, LOG_GAUSSIAN, LOG_SLATER, NONE; Default: ROBUST. DOI_RADIAL_POINTS (DLPNO)¶DLPNO (Expert) — Number of radial points in DOI grid. Type: integer; Default: 25. DOI_SPHERICAL_POINTS (DLPNO)¶DLPNO (Expert) — Number of spherical points in DOI grid. Type: integer; Default: 50. DYNAMIC_LEVEL (OPTKING)¶OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC)¶DFOCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. E3_SCALE (OCC)¶OCC — Scaling value for 3rd order energy correction (S. Grimme, Vol. 24, pp. 1529, J. Comput. Chem.). Type: double; Default: 0.25. E_CONVERGENCE (CCENERGY)¶CCENERGY — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DCT)¶DCT — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. E_CONVERGENCE (DETCI)¶DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DFOCC)¶DFOCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DLPNO)¶DLPNO — Energy convergence criteria for local MP2 iterations. Type: conv double; Default: 1e-6. E_CONVERGENCE (FNOCC)¶FNOCC — Convergence criterion for CC energy. See Table Post-SCF Convergence for defaul",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:123422,Energy Efficiency,energy,energy,123422,"efault: 25. DOI_SPHERICAL_POINTS (DLPNO)¶DLPNO (Expert) — Number of spherical points in DOI grid. Type: integer; Default: 50. DYNAMIC_LEVEL (OPTKING)¶OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC)¶DFOCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. E3_SCALE (OCC)¶OCC — Scaling value for 3rd order energy correction (S. Grimme, Vol. 24, pp. 1529, J. Comput. Chem.). Type: double; Default: 0.25. E_CONVERGENCE (CCENERGY)¶CCENERGY — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DCT)¶DCT — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. E_CONVERGENCE (DETCI)¶DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DFOCC)¶DFOCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DLPNO)¶DLPNO — Energy convergence criteria for local MP2 iterations. Type: conv double; Default: 1e-6. E_CONVERGENCE (FNOCC)¶FNOCC — Convergence criterion for CC energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. E_CONVERGENCE (MCSCF)¶MCSCF — Convergence c",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:123618,Energy Efficiency,energy,energy,123618,"ation (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC)¶DFOCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. E3_SCALE (OCC)¶OCC — Scaling value for 3rd order energy correction (S. Grimme, Vol. 24, pp. 1529, J. Comput. Chem.). Type: double; Default: 0.25. E_CONVERGENCE (CCENERGY)¶CCENERGY — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DCT)¶DCT — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. E_CONVERGENCE (DETCI)¶DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DFOCC)¶DFOCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DLPNO)¶DLPNO — Energy convergence criteria for local MP2 iterations. Type: conv double; Default: 1e-6. E_CONVERGENCE (FNOCC)¶FNOCC — Convergence criterion for CC energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. E_CONVERGENCE (MCSCF)¶MCSCF — Convergence criterion for energy. Type: conv double; Default: 1e-6. E_CONVERGENCE (MRCC)¶MRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:123813,Energy Efficiency,energy,energy,123813,"C — Scaling value for 3rd order energy correction (S. Grimme, Vol. 24, pp. 1529, J. Comput. Chem.). Type: double; Default: 0.25. E_CONVERGENCE (CCENERGY)¶CCENERGY — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DCT)¶DCT — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. E_CONVERGENCE (DETCI)¶DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DFOCC)¶DFOCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DLPNO)¶DLPNO — Energy convergence criteria for local MP2 iterations. Type: conv double; Default: 1e-6. E_CONVERGENCE (FNOCC)¶FNOCC — Convergence criterion for CC energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. E_CONVERGENCE (MCSCF)¶MCSCF — Convergence criterion for energy. Type: conv double; Default: 1e-6. E_CONVERGENCE (MRCC)¶MRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. This becomes tol (option #16) in fort.56. Type: conv double; Default: 1e-6. E_CONVERGENCE (OCC)¶OCC — Convergence criterion for energy. See Table Post-SCF Convergence for defa",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:124129,Energy Efficiency,energy,energy,124129, Default: 1e-6. E_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DCT)¶DCT — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. E_CONVERGENCE (DETCI)¶DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DFOCC)¶DFOCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DLPNO)¶DLPNO — Energy convergence criteria for local MP2 iterations. Type: conv double; Default: 1e-6. E_CONVERGENCE (FNOCC)¶FNOCC — Convergence criterion for CC energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. E_CONVERGENCE (MCSCF)¶MCSCF — Convergence criterion for energy. Type: conv double; Default: 1e-6. E_CONVERGENCE (MRCC)¶MRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. This becomes tol (option #16) in fort.56. Type: conv double; Default: 1e-6. E_CONVERGENCE (OCC)¶OCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (PSIMRCC)¶PSIMRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (SCF)¶SCF ,MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:124412,Energy Efficiency,energy,energy,124412,T)¶DCT — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. E_CONVERGENCE (DETCI)¶DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DFOCC)¶DFOCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DLPNO)¶DLPNO — Energy convergence criteria for local MP2 iterations. Type: conv double; Default: 1e-6. E_CONVERGENCE (FNOCC)¶FNOCC — Convergence criterion for CC energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. E_CONVERGENCE (MCSCF)¶MCSCF — Convergence criterion for energy. Type: conv double; Default: 1e-6. E_CONVERGENCE (MRCC)¶MRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. This becomes tol (option #16) in fort.56. Type: conv double; Default: 1e-6. E_CONVERGENCE (OCC)¶OCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (PSIMRCC)¶PSIMRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (SCF)¶SCF — Convergence criterion for SCF energy. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. EA_POLES (OCC)¶OCC — Do compute OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Def,MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:124508,Energy Efficiency,energy,energy,124508, criteria for different calculation types. Type: conv double; Default: 1e-10. E_CONVERGENCE (DETCI)¶DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DFOCC)¶DFOCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DLPNO)¶DLPNO — Energy convergence criteria for local MP2 iterations. Type: conv double; Default: 1e-6. E_CONVERGENCE (FNOCC)¶FNOCC — Convergence criterion for CC energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. E_CONVERGENCE (MCSCF)¶MCSCF — Convergence criterion for energy. Type: conv double; Default: 1e-6. E_CONVERGENCE (MRCC)¶MRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. This becomes tol (option #16) in fort.56. Type: conv double; Default: 1e-6. E_CONVERGENCE (OCC)¶OCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (PSIMRCC)¶PSIMRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (SCF)¶SCF — Convergence criterion for SCF energy. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. EA_POLES (OCC)¶OCC — Do compute OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EFP_DISP (EFP)¶EFP — Do include dispersion energy term in EFP computation?. Type: bo,MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:124741,Energy Efficiency,energy,energy,124741,"pes. Type: conv double; Default: 1e-6. E_CONVERGENCE (DFOCC)¶DFOCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DLPNO)¶DLPNO — Energy convergence criteria for local MP2 iterations. Type: conv double; Default: 1e-6. E_CONVERGENCE (FNOCC)¶FNOCC — Convergence criterion for CC energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. E_CONVERGENCE (MCSCF)¶MCSCF — Convergence criterion for energy. Type: conv double; Default: 1e-6. E_CONVERGENCE (MRCC)¶MRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. This becomes tol (option #16) in fort.56. Type: conv double; Default: 1e-6. E_CONVERGENCE (OCC)¶OCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (PSIMRCC)¶PSIMRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (SCF)¶SCF — Convergence criterion for SCF energy. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. EA_POLES (OCC)¶OCC — Do compute OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EFP_DISP (EFP)¶EFP — Do include dispersion energy term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING (EFP)¶EFP — Fragment-fragment dispersion damping type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; ",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:124940,Energy Efficiency,energy,energy,124940,"pes. Type: conv double; Default: 1e-6. E_CONVERGENCE (DLPNO)¶DLPNO — Energy convergence criteria for local MP2 iterations. Type: conv double; Default: 1e-6. E_CONVERGENCE (FNOCC)¶FNOCC — Convergence criterion for CC energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. E_CONVERGENCE (MCSCF)¶MCSCF — Convergence criterion for energy. Type: conv double; Default: 1e-6. E_CONVERGENCE (MRCC)¶MRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. This becomes tol (option #16) in fort.56. Type: conv double; Default: 1e-6. E_CONVERGENCE (OCC)¶OCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (PSIMRCC)¶PSIMRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (SCF)¶SCF — Convergence criterion for SCF energy. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. EA_POLES (OCC)¶OCC — Do compute OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EFP_DISP (EFP)¶EFP — Do include dispersion energy term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING (EFP)¶EFP — Fragment-fragment dispersion damping type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST (EFP)¶EFP — Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING (EFP)¶EFP — Fragment-fragment electrostatic dampin",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:125135,Energy Efficiency,energy,energy,125135,"e criterion for CC energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-6. E_CONVERGENCE (MCSCF)¶MCSCF — Convergence criterion for energy. Type: conv double; Default: 1e-6. E_CONVERGENCE (MRCC)¶MRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. This becomes tol (option #16) in fort.56. Type: conv double; Default: 1e-6. E_CONVERGENCE (OCC)¶OCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (PSIMRCC)¶PSIMRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (SCF)¶SCF — Convergence criterion for SCF energy. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. EA_POLES (OCC)¶OCC — Do compute OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EFP_DISP (EFP)¶EFP — Do include dispersion energy term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING (EFP)¶EFP — Fragment-fragment dispersion damping type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST (EFP)¶EFP — Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING (EFP)¶EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Defa",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:125443,Energy Efficiency,energy,energy,125443,"; Default: 1e-6. E_CONVERGENCE (MRCC)¶MRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. This becomes tol (option #16) in fort.56. Type: conv double; Default: 1e-6. E_CONVERGENCE (OCC)¶OCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (PSIMRCC)¶PSIMRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (SCF)¶SCF — Convergence criterion for SCF energy. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. EA_POLES (OCC)¶OCC — Do compute OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EFP_DISP (EFP)¶EFP — Do include dispersion energy term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING (EFP)¶EFP — Fragment-fragment dispersion damping type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST (EFP)¶EFP — Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING (EFP)¶EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH (EFP)¶EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_IND (EFP)¶EFP — Do include polarization energy term in EFP computation? (EFP_POL c. v1.1). Type: boolean; Default: true. EFP_IND_DAMPING (EFP)¶EFP — Fragment-fragment polarization damping type. TT",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:125783,Energy Efficiency,energy,energy,125783,"ence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (PSIMRCC)¶PSIMRCC — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (SCF)¶SCF — Convergence criterion for SCF energy. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. EA_POLES (OCC)¶OCC — Do compute OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EFP_DISP (EFP)¶EFP — Do include dispersion energy term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING (EFP)¶EFP — Fragment-fragment dispersion damping type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST (EFP)¶EFP — Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING (EFP)¶EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH (EFP)¶EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_IND (EFP)¶EFP — Do include polarization energy term in EFP computation? (EFP_POL c. v1.1). Type: boolean; Default: true. EFP_IND_DAMPING (EFP)¶EFP — Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. (EFP_POL_DAMPING c. v1.1). Type: string; Possible Values: TT, OFF; Default: TT. EFP_QM_ELST (EFP)¶EFP — Do include electrostatics energy term in QM/EFP computation? (QMEFP_ELST c. v1.1). Type: boolean; Default: true. EFP_QM_IND (EFP)¶EFP — Do include polarization energy term in QM/EFP comput",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:126026,Energy Efficiency,charge,charge,126026,"ent calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (SCF)¶SCF — Convergence criterion for SCF energy. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. EA_POLES (OCC)¶OCC — Do compute OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EFP_DISP (EFP)¶EFP — Do include dispersion energy term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING (EFP)¶EFP — Fragment-fragment dispersion damping type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST (EFP)¶EFP — Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING (EFP)¶EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH (EFP)¶EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_IND (EFP)¶EFP — Do include polarization energy term in EFP computation? (EFP_POL c. v1.1). Type: boolean; Default: true. EFP_IND_DAMPING (EFP)¶EFP — Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. (EFP_POL_DAMPING c. v1.1). Type: string; Possible Values: TT, OFF; Default: TT. EFP_QM_ELST (EFP)¶EFP — Do include electrostatics energy term in QM/EFP computation? (QMEFP_ELST c. v1.1). Type: boolean; Default: true. EFP_QM_IND (EFP)¶EFP — Do include polarization energy term in QM/EFP computation? (QMEFP_POL c. v1.1). Type: boolean; Default: true. EKT_EA (OCC)¶OCC — Do compute virtual orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (DFOCC)¶DFOCC — Do compute ionization potentials based on ",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:126045,Energy Efficiency,energy,energy,126045,"ent calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (SCF)¶SCF — Convergence criterion for SCF energy. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. EA_POLES (OCC)¶OCC — Do compute OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EFP_DISP (EFP)¶EFP — Do include dispersion energy term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING (EFP)¶EFP — Fragment-fragment dispersion damping type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST (EFP)¶EFP — Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING (EFP)¶EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH (EFP)¶EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_IND (EFP)¶EFP — Do include polarization energy term in EFP computation? (EFP_POL c. v1.1). Type: boolean; Default: true. EFP_IND_DAMPING (EFP)¶EFP — Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. (EFP_POL_DAMPING c. v1.1). Type: string; Possible Values: TT, OFF; Default: TT. EFP_QM_ELST (EFP)¶EFP — Do include electrostatics energy term in QM/EFP computation? (QMEFP_ELST c. v1.1). Type: boolean; Default: true. EFP_QM_IND (EFP)¶EFP — Do include polarization energy term in QM/EFP computation? (QMEFP_POL c. v1.1). Type: boolean; Default: true. EKT_EA (OCC)¶OCC — Do compute virtual orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (DFOCC)¶DFOCC — Do compute ionization potentials based on ",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:126174,Energy Efficiency,energy,energy,126174,"ence & Algorithm for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. EA_POLES (OCC)¶OCC — Do compute OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EFP_DISP (EFP)¶EFP — Do include dispersion energy term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING (EFP)¶EFP — Fragment-fragment dispersion damping type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST (EFP)¶EFP — Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING (EFP)¶EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH (EFP)¶EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_IND (EFP)¶EFP — Do include polarization energy term in EFP computation? (EFP_POL c. v1.1). Type: boolean; Default: true. EFP_IND_DAMPING (EFP)¶EFP — Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. (EFP_POL_DAMPING c. v1.1). Type: string; Possible Values: TT, OFF; Default: TT. EFP_QM_ELST (EFP)¶EFP — Do include electrostatics energy term in QM/EFP computation? (QMEFP_ELST c. v1.1). Type: boolean; Default: true. EFP_QM_IND (EFP)¶EFP — Do include polarization energy term in QM/EFP computation? (QMEFP_POL c. v1.1). Type: boolean; Default: true. EKT_EA (OCC)¶OCC — Do compute virtual orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (DFOCC)¶DFOCC — Do compute ionization potentials based on the extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (OCC)¶OCC — Do compute occupied orbital energies based on extended Koop",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:126281,Energy Efficiency,energy,energy,126281," EA_POLES (OCC)¶OCC — Do compute OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EFP_DISP (EFP)¶EFP — Do include dispersion energy term in EFP computation?. Type: boolean; Default: true. EFP_DISP_DAMPING (EFP)¶EFP — Fragment-fragment dispersion damping type. TT is a damping formula by Tang and Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST (EFP)¶EFP — Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING (EFP)¶EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH (EFP)¶EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_IND (EFP)¶EFP — Do include polarization energy term in EFP computation? (EFP_POL c. v1.1). Type: boolean; Default: true. EFP_IND_DAMPING (EFP)¶EFP — Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. (EFP_POL_DAMPING c. v1.1). Type: string; Possible Values: TT, OFF; Default: TT. EFP_QM_ELST (EFP)¶EFP — Do include electrostatics energy term in QM/EFP computation? (QMEFP_ELST c. v1.1). Type: boolean; Default: true. EFP_QM_IND (EFP)¶EFP — Do include polarization energy term in QM/EFP computation? (QMEFP_POL c. v1.1). Type: boolean; Default: true. EKT_EA (OCC)¶OCC — Do compute virtual orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (DFOCC)¶DFOCC — Do compute ionization potentials based on the extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (OCC)¶OCC — Do compute occupied orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. ENERGY_LEVEL_SHIFT (DCT)¶DCT (Expert) — Level shift applied to the di",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:126613,Energy Efficiency,energy,energy,126613,"d Toennies. OVERLAP is overlap-based dispersion damping. Type: string; Possible Values: TT, OVERLAP, OFF; Default: OVERLAP. EFP_ELST (EFP)¶EFP — Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING (EFP)¶EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH (EFP)¶EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_IND (EFP)¶EFP — Do include polarization energy term in EFP computation? (EFP_POL c. v1.1). Type: boolean; Default: true. EFP_IND_DAMPING (EFP)¶EFP — Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. (EFP_POL_DAMPING c. v1.1). Type: string; Possible Values: TT, OFF; Default: TT. EFP_QM_ELST (EFP)¶EFP — Do include electrostatics energy term in QM/EFP computation? (QMEFP_ELST c. v1.1). Type: boolean; Default: true. EFP_QM_IND (EFP)¶EFP — Do include polarization energy term in QM/EFP computation? (QMEFP_POL c. v1.1). Type: boolean; Default: true. EKT_EA (OCC)¶OCC — Do compute virtual orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (DFOCC)¶DFOCC — Do compute ionization potentials based on the extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (OCC)¶OCC — Do compute occupied orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. ENERGY_LEVEL_SHIFT (DCT)¶DCT (Expert) — Level shift applied to the diagonal of the density-weighted Fock operator. While this shift can improve convergence, it does change the DCT energy. Type: double; Default: 0.0. ENSURE_BT_CONVERGENCE (OPTKING)¶OPTKING — Reduce step size as necessary to ensure back-transformation of internal coordinate step to cartesian coordinates. Type: boolean; Default: false",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:126747,Energy Efficiency,energy,energy,126747,"FP)¶EFP — Do include electrostatics energy term in EFP computation?. Type: boolean; Default: true. EFP_ELST_DAMPING (EFP)¶EFP — Fragment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH (EFP)¶EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_IND (EFP)¶EFP — Do include polarization energy term in EFP computation? (EFP_POL c. v1.1). Type: boolean; Default: true. EFP_IND_DAMPING (EFP)¶EFP — Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. (EFP_POL_DAMPING c. v1.1). Type: string; Possible Values: TT, OFF; Default: TT. EFP_QM_ELST (EFP)¶EFP — Do include electrostatics energy term in QM/EFP computation? (QMEFP_ELST c. v1.1). Type: boolean; Default: true. EFP_QM_IND (EFP)¶EFP — Do include polarization energy term in QM/EFP computation? (QMEFP_POL c. v1.1). Type: boolean; Default: true. EKT_EA (OCC)¶OCC — Do compute virtual orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (DFOCC)¶DFOCC — Do compute ionization potentials based on the extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (OCC)¶OCC — Do compute occupied orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. ENERGY_LEVEL_SHIFT (DCT)¶DCT (Expert) — Level shift applied to the diagonal of the density-weighted Fock operator. While this shift can improve convergence, it does change the DCT energy. Type: double; Default: 0.0. ENSURE_BT_CONVERGENCE (OPTKING)¶OPTKING — Reduce step size as necessary to ensure back-transformation of internal coordinate step to cartesian coordinates. Type: boolean; Default: false. EOM_GUESS (CCEOM)¶CCEOM — Specifies a set of single-excitation guess vectors for the EOM-CC procedure. If EOM_GUESS = SINGLES, the gu",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:127391,Energy Efficiency,energy,energy,127391," EFP_IND_DAMPING (EFP)¶EFP — Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. (EFP_POL_DAMPING c. v1.1). Type: string; Possible Values: TT, OFF; Default: TT. EFP_QM_ELST (EFP)¶EFP — Do include electrostatics energy term in QM/EFP computation? (QMEFP_ELST c. v1.1). Type: boolean; Default: true. EFP_QM_IND (EFP)¶EFP — Do include polarization energy term in QM/EFP computation? (QMEFP_POL c. v1.1). Type: boolean; Default: true. EKT_EA (OCC)¶OCC — Do compute virtual orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (DFOCC)¶DFOCC — Do compute ionization potentials based on the extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (OCC)¶OCC — Do compute occupied orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. ENERGY_LEVEL_SHIFT (DCT)¶DCT (Expert) — Level shift applied to the diagonal of the density-weighted Fock operator. While this shift can improve convergence, it does change the DCT energy. Type: double; Default: 0.0. ENSURE_BT_CONVERGENCE (OPTKING)¶OPTKING — Reduce step size as necessary to ensure back-transformation of internal coordinate step to cartesian coordinates. Type: boolean; Default: false. EOM_GUESS (CCEOM)¶CCEOM — Specifies a set of single-excitation guess vectors for the EOM-CC procedure. If EOM_GUESS = SINGLES, the guess will be taken from the singles-singles block of the similarity-transformed Hamiltonian, Hbar. If EOM_GUESS = DISK, guess vectors from a previous computation will be read from disk. If EOM_GUESS = INPUT, guess vectors will be specified in user input. The latter method is not currently available. Type: string; Possible Values: SINGLES, DISK, INPUT; Default: SINGLES. EOM_REFERENCE (CCEOM)¶CCEOM — Reference wavefunction type for EOM computations. Type: string; Possible Values: RHF, ROHF, UHF; Default: RHF. EOM_REFERENCE (CCHBAR)¶CCHBAR — Reference wavefunction type for EOM computations. Type: string; Default",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:134519,Energy Efficiency,charge,charge,134519,"procedure. (See FILTER_GUESS). Type: array; Default: No Default. FILTER_GUESS_DET2 (DETCI)¶DETCI (Expert) — Array specifying the absolute alpha string number and beta string number for the second determinant in the filter procedure. (See FILTER_GUESS). Type: array; Default: No Default. FILTER_GUESS_SIGN (DETCI)¶DETCI (Expert) — The required phase (1 or -1) between the two determinants specified by FILTER_GUESS_DET1 and FILTER_GUESS_DET2. Type: integer; Default: 1. FILTER_ZERO_DET (DETCI)¶DETCI (Expert) — If present, the code will try to filter out a particular determinant by setting its CI coefficient to zero. FILTER_ZERO_DET = [alphastr, betastr] specifies the absolute alpha and beta string numbers of the target determinant. This could be useful for trying to exclude states that have a nonzero CI coefficient for the given determinant. However, this option was experimental and may not be effective. Type: array; Default: No Default. FISAPT_CHARGE_COMPLETENESS (FISAPT)¶FISAPT — Amount of fragment charge completeness to distinguish link bonds. Type: double; Default: 0.8. FISAPT_CUBE_DENSMAT (FISAPT)¶FISAPT — Generate cube files for fragment density matrices?. Type: boolean; Default: false. FISAPT_CUBE_LINKIBOS (FISAPT)¶FISAPT — Generate cube files for unsplit link orbitals (IBOs)?. Type: boolean; Default: false. FISAPT_CUBE_LINKIHOS (FISAPT)¶FISAPT — Generate cube files for split link orbitals (IHOs)?. Type: boolean; Default: false. FISAPT_DO_FSAPT (FISAPT)¶FISAPT — Do an F-SAPT analysis?. Type: boolean; Default: true. FISAPT_DO_FSAPT_DISP (FISAPT)¶FISAPT — Do F-SAPT Dispersion?. Type: boolean; Default: true. FISAPT_DO_PLOT (FISAPT)¶FISAPT — Plot a scalar-field analysis. Type: boolean; Default: false. FISAPT_EXCH_PARPERP (FISAPT)¶FISAPT — Calculate separate exchange corrections for parallel and perpendicular spin coupling of link orbitals? When false, only the averaged out exchange corrections are computed. Type: boolean; Default: false. FISAPT_FSAPT_EXCH_SCALE (FISAPT)",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:140625,Energy Efficiency,charge,charges,140625,"ally occupying orbitals (or 0 for no fractional occupation). Type: integer; Default: 0. FRAC_VAL (SCF)¶SCF — The occupations of the orbital indices specified above (\(0.0\le {\rm occ} \le 1.0\)). Type: array; Default: No Default. FRAG_MODE (OPTKING)¶OPTKING — For multi-fragment molecules, treat as single bonded molecule or via interfragment coordinates. A primary difference is that in MULTI mode, the interfragment coordinates are not redundant. Type: string; Possible Values: SINGLE, MULTI; Default: SINGLE. FRAG_REF_ATOMS (OPTKING)¶OPTKING — Specify atoms to use for reference points in interfragment coordinates. Type: array; Default: No Default. FREEZE_ALL_DIHEDRALS (OPTKING)¶OPTKING — Freeze ALL dihedral angles. Type: boolean; Default: false. FREEZE_CORE (GLOBALS)¶GLOBALS — Specifies how many core orbitals to freeze in correlated computations. TRUE or 1 will default to freezing the previous noble gas shell on each atom. In case of positive charges on fragments, an additional shell may be unfrozen, to ensure there are valence electrons in each fragment. With FALSE or 0, no electrons are frozen (with the exception of electrons treated by an ECP). With -1, -2, and -3, the user might request strict freezing of the previous first/second/third noble gas shell on every atom. In this case, when there are no valence electrons, the code raises an exception. More precise control over the number of frozen orbitals can be attained by using the keywords NUM_FROZEN_DOCC (gives the total number of orbitals to freeze, program picks the lowest-energy orbitals) or FROZEN_DOCC (gives the number of orbitals to freeze per irreducible representation) or by the option POLICY in combination with appropriate inputs to FREEZE_CORE_POLICY. At present, POLICY is an experimental option and is subject to change. Type: string; Possible Values: FALSE, TRUE, 1, 0, -1, -2, -3, POLICY; Default: FALSE. FREEZE_CORE (SAPT)¶SAPT — The scope of core orbitals to freeze in evaluation of SAPT \(E_{disp}^{(20)}",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:141223,Energy Efficiency,energy,energy,141223,"atoms to use for reference points in interfragment coordinates. Type: array; Default: No Default. FREEZE_ALL_DIHEDRALS (OPTKING)¶OPTKING — Freeze ALL dihedral angles. Type: boolean; Default: false. FREEZE_CORE (GLOBALS)¶GLOBALS — Specifies how many core orbitals to freeze in correlated computations. TRUE or 1 will default to freezing the previous noble gas shell on each atom. In case of positive charges on fragments, an additional shell may be unfrozen, to ensure there are valence electrons in each fragment. With FALSE or 0, no electrons are frozen (with the exception of electrons treated by an ECP). With -1, -2, and -3, the user might request strict freezing of the previous first/second/third noble gas shell on every atom. In this case, when there are no valence electrons, the code raises an exception. More precise control over the number of frozen orbitals can be attained by using the keywords NUM_FROZEN_DOCC (gives the total number of orbitals to freeze, program picks the lowest-energy orbitals) or FROZEN_DOCC (gives the number of orbitals to freeze per irreducible representation) or by the option POLICY in combination with appropriate inputs to FREEZE_CORE_POLICY. At present, POLICY is an experimental option and is subject to change. Type: string; Possible Values: FALSE, TRUE, 1, 0, -1, -2, -3, POLICY; Default: FALSE. FREEZE_CORE (SAPT)¶SAPT — The scope of core orbitals to freeze in evaluation of SAPT \(E_{disp}^{(20)}\) and \(E_{exch-disp}^{(20)}\) terms. Recommended true for all SAPT computations. Type: string; Possible Values: FALSE, TRUE; Default: FALSE. FREEZE_CORE_POLICY (GLOBALS)¶GLOBALS — NOTE: This is an experimental feature and subject to change! Specifies a custom frozen-core policy on a per-element basis. Input should be a list of integers representing the number of orbitals to freeze for each atomic number MINUS one (so H is 0, He is 1, etc). For example, to specify that elements H-Be should have 0 frozen orbitals, B-Mg should have 1, and Al should ",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:149014,Energy Efficiency,energy,energy,149014,"ess for the variationally orbital-optimized DFT methods. Currently only available for ALGORITHM = SIMULTANEOUS. Type: conv double; Default: 1e-3. GUESS_VECTOR (DETCI)¶DETCI (Expert) — Guess vector type. Accepted values are UNIT for a unit vector guess (NUM_ROOTS and NUM_INIT_VECS must both be 1); H0_BLOCK to use eigenvectors from the H0 BLOCK submatrix (default); DFILE to use NUM_ROOTS previously converged vectors in the D file;. Type: string; Possible Values: UNIT, H0_BLOCK, DFILE; Default: H0_BLOCK. H0_BLOCK_COUPLING (DETCI)¶DETCI (Expert) — Do use coupling block in preconditioner?. Type: boolean; Default: false. H0_BLOCK_COUPLING_SIZE (DETCI)¶DETCI (Expert) — Parameters which specifies the size of the coupling block within the generalized davidson preconditioner. Type: integer; Default: 0. H0_BLOCKSIZE (DETCI)¶DETCI (Expert) — This parameter specifies the size of the H0 block of the Hamiltonian which is solved exactly. The n determinants with the lowest SCF energy are selected, and a submatrix of the Hamiltonian is formed using these determinants. This submatrix is used to accelerate convergence of the CI iterations in the OLSEN and MITRUSHENKOV iteration schemes, and also to find a good starting guess for the SEM method if GUESS_VECTOR is H0_BLOCK. Defaults to 1000. Note that the program may change the given size for Ms=0 cases (MS0 is TRUE) if it determines that the H0 block includes only one member of a pair of determinants related by time reversal symmetry. For very small block sizes, this could conceivably eliminate the entire H0 block; the program should print warnings if this occurs. Type: integer; Default: 1000. H0_GUESS_SIZE (DETCI)¶DETCI (Expert) — size of H0 block for initial guess. Type: integer; Default: 1000. H_BOND_CONNECT (OPTKING)¶OPTKING — For now, this is a general maximum distance for the definition of H-bonds. Type: double; Default: 4.3. H_GUESS_EVERY (OPTKING)¶OPTKING — Re-estimate the Hessian at every step, i.e., ignore the currently stored ",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:150519,Energy Efficiency,energy,energy,150519," this could conceivably eliminate the entire H0 block; the program should print warnings if this occurs. Type: integer; Default: 1000. H0_GUESS_SIZE (DETCI)¶DETCI (Expert) — size of H0 block for initial guess. Type: integer; Default: 1000. H_BOND_CONNECT (OPTKING)¶OPTKING — For now, this is a general maximum distance for the definition of H-bonds. Type: double; Default: 4.3. H_GUESS_EVERY (OPTKING)¶OPTKING — Re-estimate the Hessian at every step, i.e., ignore the currently stored Hessian. Type: boolean; Default: false. H_UPDATE_DEN_TOL (OPTKING)¶OPTKING — Denominator check for hessian update. Type: conv double; Default: 1e-7. HD_AVG (DETCI)¶DETCI (Expert) — How to average H diag energies over spin coupling sets. HD_EXACT uses the exact diagonal energies which results in expansion vectors which break spin symmetry. HD_KAVE averages the diagonal energies over a spin-coupling set yielding spin pure expansion vectors. ORB_ENER employs the sum of orbital energy approximation giving spin pure expansion vectors but usually doubles the number of Davidson iterations. EVANGELISTI uses the sums and differences of orbital energies with the SCF reference energy to produce spin pure expansion vectors. LEININGER approximation which subtracts the one-electron contribution from the orbital energies, multiplies by 0.5, and adds the one-electron contribution back in, producing spin pure expansion vectors and developed by Matt Leininger and works as well as EVANGELISTI. Type: string; Possible Values: EVANGELISTI, HD_EXACT, HD_KAVE, ORB_ENER, LEININGER, Z_KAVE; Default: EVANGELISTI. HD_OTF (DETCI)¶DETCI (Expert) — Do compute the diagonal elements of the Hamiltonian matrix on-the-fly? Otherwise, a diagonal element vector is written to a separate file on disk. Type: boolean; Default: true. HEFF4 (PSIMRCC)¶PSIMRCC — Do include the fourth-order contributions to the effective Hamiltonian?. Type: boolean; Default: true. HEFF_PRINT (PSIMRCC)¶PSIMRCC — Do print the effective Hamiltonian?. Type: ",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:150715,Energy Efficiency,energy,energy,150715,"ESS_SIZE (DETCI)¶DETCI (Expert) — size of H0 block for initial guess. Type: integer; Default: 1000. H_BOND_CONNECT (OPTKING)¶OPTKING — For now, this is a general maximum distance for the definition of H-bonds. Type: double; Default: 4.3. H_GUESS_EVERY (OPTKING)¶OPTKING — Re-estimate the Hessian at every step, i.e., ignore the currently stored Hessian. Type: boolean; Default: false. H_UPDATE_DEN_TOL (OPTKING)¶OPTKING — Denominator check for hessian update. Type: conv double; Default: 1e-7. HD_AVG (DETCI)¶DETCI (Expert) — How to average H diag energies over spin coupling sets. HD_EXACT uses the exact diagonal energies which results in expansion vectors which break spin symmetry. HD_KAVE averages the diagonal energies over a spin-coupling set yielding spin pure expansion vectors. ORB_ENER employs the sum of orbital energy approximation giving spin pure expansion vectors but usually doubles the number of Davidson iterations. EVANGELISTI uses the sums and differences of orbital energies with the SCF reference energy to produce spin pure expansion vectors. LEININGER approximation which subtracts the one-electron contribution from the orbital energies, multiplies by 0.5, and adds the one-electron contribution back in, producing spin pure expansion vectors and developed by Matt Leininger and works as well as EVANGELISTI. Type: string; Possible Values: EVANGELISTI, HD_EXACT, HD_KAVE, ORB_ENER, LEININGER, Z_KAVE; Default: EVANGELISTI. HD_OTF (DETCI)¶DETCI (Expert) — Do compute the diagonal elements of the Hamiltonian matrix on-the-fly? Otherwise, a diagonal element vector is written to a separate file on disk. Type: boolean; Default: true. HEFF4 (PSIMRCC)¶PSIMRCC — Do include the fourth-order contributions to the effective Hamiltonian?. Type: boolean; Default: true. HEFF_PRINT (PSIMRCC)¶PSIMRCC — Do print the effective Hamiltonian?. Type: boolean; Default: false. HESS_TYPE (DFOCC)¶DFOCC — Type of the MO Hessian matrix. Type: string; Possible Values: APPROX_DIAG, APPROX_DIAG_E",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:162815,Energy Efficiency,power,power,162815,"). Type: double; Default: 0.02. LOCAL_CUTOFF (CCRESPONSE)¶CCRESPONSE — Value (always between one and zero) for the Broughton-Pulay completeness check used to contruct orbital domains for local-CC calculations. See J. Broughton and P. Pulay, J. Comp. Chem. 14, 736-740 (1993) and C. Hampel and H.-J. Werner, J. Chem. Phys. 104, 6286-6297 (1996). Type: double; Default: 0.01. LOCAL_DO_SINGLES (CCEOM)¶CCEOM —. Type: boolean; Default: true. LOCAL_FILTER_SINGLES (CCEOM)¶CCEOM — Do apply local filtering to singles amplitudes?. Type: boolean; Default: true. LOCAL_FILTER_SINGLES (CCLAMBDA)¶CCLAMBDA — Do apply local filtering to single de-excitation (\(\lambda 1\) amplitudes?. Type: boolean; Default: true. LOCAL_FILTER_SINGLES (CCRESPONSE)¶CCRESPONSE — Do apply local filtering to single excitation amplitudes?. Type: boolean; Default: false. LOCAL_IBO_CONDITION (FISAPT)¶FISAPT (Expert) — Condition number to use in IBO metric inversions. Type: double; Default: 1.0e-7. LOCAL_IBO_POWER (FISAPT)¶FISAPT — IBO localization metric power. Type: integer; Default: 4. LOCAL_IBO_STARS (FISAPT)¶FISAPT — IBO Centers for Pi Degeneracy. Type: array; Default: No Default. LOCAL_IBO_STARS_COMPLETENESS (FISAPT)¶FISAPT — IBO Charge metric for classification as Pi. Type: double; Default: 0.90. LOCAL_IBO_USE_STARS (FISAPT)¶FISAPT — IBO Stars procedure. Type: boolean; Default: false. LOCAL_MAXITER (DLPNO)¶DLPNO — Maximum iterations in Foster-Boys localization. Type: integer; Default: 1000. LOCAL_MAXITER (FISAPT)¶FISAPT — Maximum iterations in localization. Type: integer; Default: 1000. LOCAL_MAXITER (SCF)¶SCF — The maxiter on the orbital localization procedure. Type: integer; Default: 200. LOCAL_METHOD (CCENERGY)¶CCENERGY — Type of local-CCSD scheme to be simulated. WERNER selects the method developed by H.-J. Werner and co-workers, and AOBASIS selects the method developed by G.E. Scuseria and co-workers (currently inoperative). Type: string; Possible Values: WERNER, AOBASIS; Default: WERNER. LOCAL_METH",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:165420,Energy Efficiency,energy,energy,165420,"selects the method developed by H.-J. Werner and co-workers. Type: string; Default: WERNER. LOCAL_PAIRDEF (CCENERGY)¶CCENERGY — Definition of local pair domains, default is BP, Boughton-Pulay. Type: string; Possible Values: BP, RESPONSE; Default: BP. LOCAL_PAIRDEF (CCLAMBDA)¶CCLAMBDA — Definition of local pair domains. Type: string; Default: No Default. LOCAL_PAIRDEF (CCRESPONSE)¶CCRESPONSE — Definition of local pair domains. Type: string; Default: NONE. LOCAL_PRECONDITIONER (CCEOM)¶CCEOM — Preconditioner will be used in local CC computations. Type: string; Possible Values: HBAR, FOCK; Default: HBAR. LOCAL_USE_GHOSTS (FISAPT)¶FISAPT (Expert) — Use ghost atoms in Pipek-Mezey or IBO metric. Type: boolean; Default: false. LOCAL_WEAKP (CCENERGY)¶CCENERGY — Desired treatment of “weak pairs” in the local-CCSD method. A value of NEGLECT ignores weak pairs entirely. A value of NONE treats weak pairs in the same manner as strong pairs. A value of MP2 uses second-order perturbation theory to correct the local-CCSD energy computed with weak pairs ignored. Type: string; Possible Values: NONE, NEGLECT, MP2; Default: NONE. LOCAL_WEAKP (CCEOM)¶CCEOM — Desired treatment of “weak pairs” in the local-CCSD method. A value of NEGLECT ignores weak pairs entirely. A value of NONE treats weak pairs in the same manner as strong pairs. A value of MP2 uses second-order perturbation theory to correct the local-CCSD energy computed with weak pairs ignored. Type: string; Possible Values: NONE, MP2, NEGLECT; Default: NONE. LOCAL_WEAKP (CCLAMBDA)¶CCLAMBDA — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique available option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCAL_WEAKP (CCRESPONSE)¶CCRESPONSE — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique available option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCK_SINGLET (PSIMRCC)¶PSIMRCC — Do",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:165812,Energy Efficiency,energy,energy,165812,"E — Definition of local pair domains. Type: string; Default: NONE. LOCAL_PRECONDITIONER (CCEOM)¶CCEOM — Preconditioner will be used in local CC computations. Type: string; Possible Values: HBAR, FOCK; Default: HBAR. LOCAL_USE_GHOSTS (FISAPT)¶FISAPT (Expert) — Use ghost atoms in Pipek-Mezey or IBO metric. Type: boolean; Default: false. LOCAL_WEAKP (CCENERGY)¶CCENERGY — Desired treatment of “weak pairs” in the local-CCSD method. A value of NEGLECT ignores weak pairs entirely. A value of NONE treats weak pairs in the same manner as strong pairs. A value of MP2 uses second-order perturbation theory to correct the local-CCSD energy computed with weak pairs ignored. Type: string; Possible Values: NONE, NEGLECT, MP2; Default: NONE. LOCAL_WEAKP (CCEOM)¶CCEOM — Desired treatment of “weak pairs” in the local-CCSD method. A value of NEGLECT ignores weak pairs entirely. A value of NONE treats weak pairs in the same manner as strong pairs. A value of MP2 uses second-order perturbation theory to correct the local-CCSD energy computed with weak pairs ignored. Type: string; Possible Values: NONE, MP2, NEGLECT; Default: NONE. LOCAL_WEAKP (CCLAMBDA)¶CCLAMBDA — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique available option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCAL_WEAKP (CCRESPONSE)¶CCRESPONSE — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique available option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCK_SINGLET (PSIMRCC)¶PSIMRCC — Do lock onto a singlet root?. Type: boolean; Default: false. LS_THC_BASIS_TOLERANCE (GLOBALS)¶GLOBALS (Expert) — Screening criteria for basis function values on LS-THC grids. Type: conv double; Default: 1.0e-10. LS_THC_DF (GLOBALS)¶GLOBALS — Use DF approximation when computing LS-THC factorization?. Type: boolean; Default: true. LS_THC_PRUNING_SCHEME (GLOBALS)¶GLOBALS (Expert) — Pruning sche",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:167643,Energy Efficiency,energy,energy,167643," approximation when computing LS-THC factorization?. Type: boolean; Default: true. LS_THC_PRUNING_SCHEME (GLOBALS)¶GLOBALS (Expert) — Pruning scheme for LS-THC grids. Type: string; Default: ROBUST. LS_THC_RADIAL_POINTS (GLOBALS)¶GLOBALS — Number of radial points in LS-THC grid. Type: integer; Default: 10. LS_THC_S_EPSILON (GLOBALS)¶GLOBALS (Expert) — Tolerance for pseudoinversion of grid point overlap matrix (Parrish 2012 eq. 30). Type: double; Default: 1.0e-10. LS_THC_SPHERICAL_POINTS (GLOBALS)¶GLOBALS — Number of spherical points in LS-THC grid. Type: integer; Default: 50. LS_THC_WEIGHTS_TOLERANCE (GLOBALS)¶GLOBALS (Expert) — Grid weights cutoff for LS-THC grids. Type: conv double; Default: 1.0e-12. LSE (DETCI)¶DETCI — Do use least-squares extrapolation in iterative solution of CI vector?. Type: boolean; Default: false. LSE_COLLAPSE (DETCI)¶DETCI — Number of iterations between least-squares extrapolations. Type: integer; Default: 3. LSE_TOLERANCE (DETCI)¶DETCI — Minimum converged energy for least-squares extrapolation to be performed. Type: conv double; Default: 3. MADMP2_SLEEP (DFMP2)¶DFMP2 (Expert) — A helpful option, used only in debugging the MADNESS version. Type: integer; Default: 0. MAT_NUM_COLUMN_PRINT (GLOBALS)¶GLOBALS (Expert) — Number of columns to print in calls to Matrix::print_mat. Type: integer; Default: 5. MAX_ATTEMPTS (SCF)¶SCF (Expert) — When using STABILITY_ANALYSIS FOLLOW, maximum number of orbital optimization attempts to make the wavefunction stable. Type: integer; Default: 1. MAX_CCD_DIISVECS (SAPT)¶SAPT — Maximum number of vectors used in CCD-DIIS. Type: integer; Default: 10. MAX_DISP_G_CONVERGENCE (OPTKING)¶OPTKING — Convergence criterion for geometry optmization: maximum displacement (internal coordinates, atomic units). Type: conv double; Default: 1.2e-3. MAX_ENERGY_G_CONVERGENCE (OPTKING)¶OPTKING — Convergence criterion for geometry optmization: maximum energy change. Type: conv double; Default: 1.0e-6. MAX_FORCE_G_CONVERGENCE (OPTKING)",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:168562,Energy Efficiency,energy,energy,168562," iterations between least-squares extrapolations. Type: integer; Default: 3. LSE_TOLERANCE (DETCI)¶DETCI — Minimum converged energy for least-squares extrapolation to be performed. Type: conv double; Default: 3. MADMP2_SLEEP (DFMP2)¶DFMP2 (Expert) — A helpful option, used only in debugging the MADNESS version. Type: integer; Default: 0. MAT_NUM_COLUMN_PRINT (GLOBALS)¶GLOBALS (Expert) — Number of columns to print in calls to Matrix::print_mat. Type: integer; Default: 5. MAX_ATTEMPTS (SCF)¶SCF (Expert) — When using STABILITY_ANALYSIS FOLLOW, maximum number of orbital optimization attempts to make the wavefunction stable. Type: integer; Default: 1. MAX_CCD_DIISVECS (SAPT)¶SAPT — Maximum number of vectors used in CCD-DIIS. Type: integer; Default: 10. MAX_DISP_G_CONVERGENCE (OPTKING)¶OPTKING — Convergence criterion for geometry optmization: maximum displacement (internal coordinates, atomic units). Type: conv double; Default: 1.2e-3. MAX_ENERGY_G_CONVERGENCE (OPTKING)¶OPTKING — Convergence criterion for geometry optmization: maximum energy change. Type: conv double; Default: 1.0e-6. MAX_FORCE_G_CONVERGENCE (OPTKING)¶OPTKING — Convergence criterion for geometry optmization: maximum force (internal coordinates, atomic units). Type: conv double; Default: 3.0e-4. MAX_MEM_BUF (SCF)¶SCF — Max memory per buf for PK algo REORDER, for debug and tuning. Type: integer; Default: 0. MAX_MOGRAD_CONVERGENCE (DFOCC)¶DFOCC — Convergence criterion for maximum orbital gradient. If this keyword is not set by the user, DFOCC will estimate and use a value required to achieve the desired E_CONVERGENCE. The listed default will be used for the default value of E_CONVERGENCE. Type: conv double; Default: 1e-4. MAX_MOGRAD_CONVERGENCE (OCC)¶OCC — Convergence criterion for maximum orbital gradient. If this keyword is not set by the user, OCC will estimate and use a value required to achieve the desired E_CONVERGENCE. The listed default will be used for the default value of E_CONVERGENCE. Type: conv d",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:170938,Energy Efficiency,energy,energy,170938,"e H(diag) vector and the number of D vectors is equal to the number of roots). When the number of vectors on disk reaches the value of MAX_NUM_VECS, the Davidson subspace will be collapsed to COLLAPSE_SIZE vectors for each root. This is very helpful for saving disk space. Defaults to CI_MAXITER * NUM_ROOTS + NUM_INIT_VECS. Type: integer; Default: 0. MAX_RADIAL_MOMENT (GLOBALS)¶GLOBALS — Maximum Radial Moment to Calculate. Type: integer; Default: 4. MAXITER (ADC)¶ADC — Maximum number of iterations. Type: integer; Default: 50. MAXITER (CCENERGY)¶CCENERGY — Maximum number of iterations to solve the CC equations. Type: integer; Default: 50. MAXITER (CCEOM)¶CCEOM — Maximum number of iterations. Type: integer; Default: 80. MAXITER (CCLAMBDA)¶CCLAMBDA — Maximum number of iterations. Type: integer; Default: 50. MAXITER (CCRESPONSE)¶CCRESPONSE — Maximum number of iterations to converge perturbed amplitude equations. Type: integer; Default: 50. MAXITER (DCT)¶DCT — Maximum number of macro- or micro-iterations for both energy and response equations. Type: integer; Default: 40. MAXITER (FISAPT)¶FISAPT — Maximum number of iterations for CPHF. Type: integer; Default: 50. MAXITER (FNOCC)¶FNOCC — Maximum number of CC iterations. Type: integer; Default: 100. MAXITER (MCSCF)¶MCSCF — Maximum number of iterations. Type: integer; Default: 100. MAXITER (PE)¶PE — Maximum number of iterations for induced moments. Type: integer; Default: 50. MAXITER (PSIMRCC)¶PSIMRCC — Maximum number of iterations to determine the amplitudes. Type: integer; Default: 100. MAXITER (SAPT)¶SAPT — Maximum number of CPHF iterations. Type: integer; Default: 50. MAXITER (SCF)¶SCF — Maximum number of iterations. Cfour Interface: Keyword translates into CFOUR_SCF_MAXCYC. Type: integer; Default: 100. MBIS_D_CONVERGENCE (GLOBALS)¶GLOBALS — MBIS Convergence Criteria. Type: conv double; Default: 1.0e-8. MBIS_MAXITER (GLOBALS)¶GLOBALS — Maximum Number of MBIS Iterations. Type: integer; Default: 500. MBIS_PRUNING_SCHEME (GLO",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:173178,Energy Efficiency,energy,energy,173178,"erical Points. Type: integer; Default: 302. MCSCF_ALGORITHM (DETCI)¶DETCI — Convergence algorithm to utilize. Two-Step, Augmented Hessian. Defaults to TS for RASSCF. Type: string; Possible Values: TS, AH; Default: TS. MCSCF_CI_CLEANUP (DETCI)¶DETCI — Cleanup the CI info at the end of a run?. Type: boolean; Default: true. MCSCF_DIIS_ERROR_TYPE (DETCI)¶DETCI — DIIS error vector type either, the AO orbital gradient or the orbital rotation update matrix. Type: string; Possible Values: GRAD, UPDATE; Default: GRAD. MCSCF_DIIS_FREQ (DETCI)¶DETCI — How often to do a DIIS extrapolation for TS convergence. Type: integer; Default: 1. MCSCF_DIIS_MAX_VECS (DETCI)¶DETCI — Maximum number of DIIS vectors for TS convergence. Type: integer; Default: 8. MCSCF_DIIS_START (DETCI)¶DETCI — Iteration to turn on DIIS for TS convergence. Type: integer; Default: 3. MCSCF_DPD_CLEANUP (DETCI)¶DETCI — Cleanup the DPD MCSCF object at the end of a run?. Type: boolean; Default: true. MCSCF_E_CONVERGENCE (DETCI)¶DETCI — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-7. MCSCF_GUESS (DETCI)¶DETCI — Initial MCSCF starting guess, MP2 natural orbitals only available for DF-RHF reference. Type: string; Possible Values: MP2, SCF; Default: SCF. MCSCF_MAX_ROT (DETCI)¶DETCI — Maximum value in the rotation matrix. If a value is greater than this number all values are scaled. Type: double; Default: 0.5. MCSCF_MAXITER (DETCI)¶DETCI — Maximum number MCSCF of iterations. Type: integer; Default: 30. MCSCF_R_CONVERGENCE (DETCI)¶DETCI — Convergence criterion for the RMS of the orbital gradient. Type: conv double; Default: 1e-5. MCSCF_ROTATE (DETCI)¶DETCI — Apply a list of 2x2 rotation matrices to the orbitals in the form of [irrep, orbital1, orbital2, theta] where an angle of 0 would do nothing and an angle of 90 would switch the two orbitals. Type: array; Default: No Default. MCSCF_SO_START_E (DETCI)¶DE",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:174217,Energy Efficiency,energy,energy,174217,"nergy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-7. MCSCF_GUESS (DETCI)¶DETCI — Initial MCSCF starting guess, MP2 natural orbitals only available for DF-RHF reference. Type: string; Possible Values: MP2, SCF; Default: SCF. MCSCF_MAX_ROT (DETCI)¶DETCI — Maximum value in the rotation matrix. If a value is greater than this number all values are scaled. Type: double; Default: 0.5. MCSCF_MAXITER (DETCI)¶DETCI — Maximum number MCSCF of iterations. Type: integer; Default: 30. MCSCF_R_CONVERGENCE (DETCI)¶DETCI — Convergence criterion for the RMS of the orbital gradient. Type: conv double; Default: 1e-5. MCSCF_ROTATE (DETCI)¶DETCI — Apply a list of 2x2 rotation matrices to the orbitals in the form of [irrep, orbital1, orbital2, theta] where an angle of 0 would do nothing and an angle of 90 would switch the two orbitals. Type: array; Default: No Default. MCSCF_SO_START_E (DETCI)¶DETCI — Start second-order (AH or OS) orbital-orbital MCSCF based on energy convergence. Type: double; Default: 1e-4. MCSCF_SO_START_GRAD (DETCI)¶DETCI — Start second-order (AH or OS) orbital-orbital MCSCF based on RMS of orbital gradient. Type: double; Default: 1e-4. MCSCF_TYPE (DETCI)¶DETCI — Method to handle the two-electron integrals. Type: string; Possible Values: DF, CONV, AO; Default: CONV. MIN_CCD_DIISVECS (SAPT)¶SAPT — Minimum number of vectors used in CCD-DIIS. Type: integer; Default: 4. MINAO_BASIS (FISAPT)¶FISAPT (Expert) — MinAO Basis for IBO. Type: string; Default: CC-PVTZ-MINAO. MIXED (DETCI)¶DETCI (Expert) — Do allow “mixed” RAS II/RAS III excitations into the CI space? If FALSE, then if there are any electrons in RAS III, then the number of holes in RAS I cannot exceed the given excitation level EX_LEVEL. Type: boolean; Default: true. MIXED4 (DETCI)¶DETCI (Expert) — Do allow “mixed” excitations involving RAS IV into the CI space. Useful to specify a split-virtual CISD[TQ] computation. If FALSE, then",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:180342,Energy Efficiency,energy,energy,180342," — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.0. MP2_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for MP2 computation. See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: DF. MP_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for MPn ( \(n>2\) ) computation (e.g., MP3 or MP2.5 or MP4(SDQ)). See Cross-module Redundancies for details. Since v1.4, default for non-orbital-optimized MP2.5 and MP3 is DF. Type: string; Possible Values: DF, CONV, CD; Default: CONV. MPN (DETCI)¶DETCI — Do compute the MPn series out to kth order where k is determined by MAX_NUM_VECS ? For open-shell systems (REFERENCE is ROHF, WFN is ZAPTN), DETCI will compute the ZAPTn series. GUESS_VECTOR must be set to UNIT, HD_OTF must be set to TRUE, and HD_AVG must be set to orb_ener; these should happen by default for MPN = TRUE. Type: boolean; Default: false. MPN_ORDER_SAVE (DETCI)¶DETCI (Expert) — If 0, save the MPn energy; if 1, save the MP(2n-1) energy (if available from MPN_WIGNER = true); if 2, save the MP(2n-2) energy (if available from MPN_WIGNER = true). Type: integer; Default: 0. MPN_SCHMIDT (DETCI)¶DETCI (Expert) — Do employ an orthonormal vector space rather than storing the kth order wavefunction?. Type: boolean; Default: false. MPN_WIGNER (DETCI)¶DETCI (Expert) — Do use Wigner formulas in the \(E_{text{mp}n}\) series?. Type: boolean; Default: true. MRCC_LEVEL (MRCC)¶MRCC — Maximum excitation level. This is used ONLY if it is explicitly set by the user. Single-reference case: all excitations up to this level are included, e.g., 2 for CCSD, 3 for CCSDT, 4 for CCSDTQ, etc. This becomes ex.lev (option #1) in fort.56. Type: integer; Default: 2. MRCC_METHOD (MRCC)¶MRCC (Expert) — If more than one root is requested and calc=1, LR-CC (EOM-CC) calculation is performed automatically for the excited states. This overrides all automatic determination of method and will only work with energy(). This becomes CC/CI (option #5) in fort.56. See ",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:180374,Energy Efficiency,energy,energy,180374," — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.0. MP2_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for MP2 computation. See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: DF. MP_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for MPn ( \(n>2\) ) computation (e.g., MP3 or MP2.5 or MP4(SDQ)). See Cross-module Redundancies for details. Since v1.4, default for non-orbital-optimized MP2.5 and MP3 is DF. Type: string; Possible Values: DF, CONV, CD; Default: CONV. MPN (DETCI)¶DETCI — Do compute the MPn series out to kth order where k is determined by MAX_NUM_VECS ? For open-shell systems (REFERENCE is ROHF, WFN is ZAPTN), DETCI will compute the ZAPTn series. GUESS_VECTOR must be set to UNIT, HD_OTF must be set to TRUE, and HD_AVG must be set to orb_ener; these should happen by default for MPN = TRUE. Type: boolean; Default: false. MPN_ORDER_SAVE (DETCI)¶DETCI (Expert) — If 0, save the MPn energy; if 1, save the MP(2n-1) energy (if available from MPN_WIGNER = true); if 2, save the MP(2n-2) energy (if available from MPN_WIGNER = true). Type: integer; Default: 0. MPN_SCHMIDT (DETCI)¶DETCI (Expert) — Do employ an orthonormal vector space rather than storing the kth order wavefunction?. Type: boolean; Default: false. MPN_WIGNER (DETCI)¶DETCI (Expert) — Do use Wigner formulas in the \(E_{text{mp}n}\) series?. Type: boolean; Default: true. MRCC_LEVEL (MRCC)¶MRCC — Maximum excitation level. This is used ONLY if it is explicitly set by the user. Single-reference case: all excitations up to this level are included, e.g., 2 for CCSD, 3 for CCSDT, 4 for CCSDTQ, etc. This becomes ex.lev (option #1) in fort.56. Type: integer; Default: 2. MRCC_METHOD (MRCC)¶MRCC (Expert) — If more than one root is requested and calc=1, LR-CC (EOM-CC) calculation is performed automatically for the excited states. This overrides all automatic determination of method and will only work with energy(). This becomes CC/CI (option #5) in fort.56. See ",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:180444,Energy Efficiency,energy,energy,180444," — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.0. MP2_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for MP2 computation. See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: DF. MP_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for MPn ( \(n>2\) ) computation (e.g., MP3 or MP2.5 or MP4(SDQ)). See Cross-module Redundancies for details. Since v1.4, default for non-orbital-optimized MP2.5 and MP3 is DF. Type: string; Possible Values: DF, CONV, CD; Default: CONV. MPN (DETCI)¶DETCI — Do compute the MPn series out to kth order where k is determined by MAX_NUM_VECS ? For open-shell systems (REFERENCE is ROHF, WFN is ZAPTN), DETCI will compute the ZAPTn series. GUESS_VECTOR must be set to UNIT, HD_OTF must be set to TRUE, and HD_AVG must be set to orb_ener; these should happen by default for MPN = TRUE. Type: boolean; Default: false. MPN_ORDER_SAVE (DETCI)¶DETCI (Expert) — If 0, save the MPn energy; if 1, save the MP(2n-1) energy (if available from MPN_WIGNER = true); if 2, save the MP(2n-2) energy (if available from MPN_WIGNER = true). Type: integer; Default: 0. MPN_SCHMIDT (DETCI)¶DETCI (Expert) — Do employ an orthonormal vector space rather than storing the kth order wavefunction?. Type: boolean; Default: false. MPN_WIGNER (DETCI)¶DETCI (Expert) — Do use Wigner formulas in the \(E_{text{mp}n}\) series?. Type: boolean; Default: true. MRCC_LEVEL (MRCC)¶MRCC — Maximum excitation level. This is used ONLY if it is explicitly set by the user. Single-reference case: all excitations up to this level are included, e.g., 2 for CCSD, 3 for CCSDT, 4 for CCSDTQ, etc. This becomes ex.lev (option #1) in fort.56. Type: integer; Default: 2. MRCC_METHOD (MRCC)¶MRCC (Expert) — If more than one root is requested and calc=1, LR-CC (EOM-CC) calculation is performed automatically for the excited states. This overrides all automatic determination of method and will only work with energy(). This becomes CC/CI (option #5) in fort.56. See ",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:181329,Energy Efficiency,energy,energy,181329,"AVE (DETCI)¶DETCI (Expert) — If 0, save the MPn energy; if 1, save the MP(2n-1) energy (if available from MPN_WIGNER = true); if 2, save the MP(2n-2) energy (if available from MPN_WIGNER = true). Type: integer; Default: 0. MPN_SCHMIDT (DETCI)¶DETCI (Expert) — Do employ an orthonormal vector space rather than storing the kth order wavefunction?. Type: boolean; Default: false. MPN_WIGNER (DETCI)¶DETCI (Expert) — Do use Wigner formulas in the \(E_{text{mp}n}\) series?. Type: boolean; Default: true. MRCC_LEVEL (MRCC)¶MRCC — Maximum excitation level. This is used ONLY if it is explicitly set by the user. Single-reference case: all excitations up to this level are included, e.g., 2 for CCSD, 3 for CCSDT, 4 for CCSDTQ, etc. This becomes ex.lev (option #1) in fort.56. Type: integer; Default: 2. MRCC_METHOD (MRCC)¶MRCC (Expert) — If more than one root is requested and calc=1, LR-CC (EOM-CC) calculation is performed automatically for the excited states. This overrides all automatic determination of method and will only work with energy(). This becomes CC/CI (option #5) in fort.56. See Table MRCC_METHOD for details. Type: integer; Default: 1. MRCC_NUM_DOUBLET_ROOTS (MRCC)¶MRCC — Number of root in case of open shell system. This becomes ndoub (option #13) int fort.56. Type: integer; Default: 0. MRCC_NUM_SINGLET_ROOTS (MRCC)¶MRCC — Number of singlet roots. (Strictly speaking number of of roots with M_s=0 and S is even.) Use this option only with closed shell reference determinant, it must be zero otherwise. This becomes nsing (option #2) in fort.56. Type: integer; Default: 1. MRCC_NUM_TRIPLET_ROOTS (MRCC)¶MRCC — Number of triplet roots. (Strictly speaking number of of roots with \(M_s=0\) and S is odd.) See notes at option MRCC_NUM_SINGLET_ROOTS. This becomes ntrip (option #3) in fort.56. Type: integer; Default: 0. MRCC_OMP_NUM_THREADS (MRCC)¶MRCC (Expert) — Sets the OMP_NUM_THREADS environment variable before calling MRCC. If the environment variable OMP_NUM_THREADS is set prior",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:182857,Energy Efficiency,energy,energy,182857,"o otherwise. This becomes nsing (option #2) in fort.56. Type: integer; Default: 1. MRCC_NUM_TRIPLET_ROOTS (MRCC)¶MRCC — Number of triplet roots. (Strictly speaking number of of roots with \(M_s=0\) and S is odd.) See notes at option MRCC_NUM_SINGLET_ROOTS. This becomes ntrip (option #3) in fort.56. Type: integer; Default: 0. MRCC_OMP_NUM_THREADS (MRCC)¶MRCC (Expert) — Sets the OMP_NUM_THREADS environment variable before calling MRCC. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect MRCC. Type: integer; Default: 1. MRCC_RESTART (MRCC)¶MRCC (Expert) — The program restarts from the previously calculated parameters if it is 1. In case it is 2, the program executes automatically the lower-level calculations of the same type consecutively (e.g., CCSD, CCSDT, and CCSDTQ if CCSDTQ is requested) and restarts each calculation from the previous one (rest=2 is available only for energy calculations). Currently, only a value of 0 and 2 are supported. This becomes rest (option #4) in fort.56. Type: integer; Default: 0. MS0 (DETCI)¶DETCI — Do use the \(M_s = 0\) component of the state? Defaults to TRUE if closed-shell and FALSE otherwise. Related to the S option. Type: boolean; Default: false. NAT_ORBS (DETCI)¶DETCI — Do compute natural orbitals?. Type: boolean; Default: false. NAT_ORBS (DFOCC)¶DFOCC — Do compute natural orbitals?. Type: boolean; Default: false. NAT_ORBS (FNOCC)¶FNOCC — Do use MP2 NOs to truncate virtual space for QCISD/CCSD and (T)?. Type: boolean; Default: false. NAT_ORBS (OCC)¶OCC — Do compute natural orbitals?. Type: boolean; Default: false. NAT_ORBS_T2 (SAPT)¶SAPT — Do use MP2 natural orbital approximations for the \(v^4\) block of two-electron integrals in the evaluation of second-order T2 amplitudes? Recommended true for all SAPT computations. Type: boolean; Default: true. NAT_ORBS_T3 ",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:195077,Energy Efficiency,charge,charges,195077,"lt: FLETCHER_REEVES. PCG_CONVERGENCE (DFOCC)¶DFOCC — Convergence criterion for residual vector of preconditioned conjugate gradient method. If this keyword is not set by the user, DFOCC will estimate and use a value required to achieve R_CONVERGENCE residual convergence. The listed default will be used for the default value of R_CONVERGENCE. Type: conv double; Default: 1e-7. PCG_CONVERGENCE (OCC)¶OCC — Convergence criterion for residual vector of preconditioned conjugate gradient method. Type: conv double; Default: 1e-6. PCG_MAXITER (DFOCC)¶DFOCC — Maximum number of preconditioned conjugate gradient iterations. Type: integer; Default: 50. PCG_MAXITER (OCC)¶OCC — Maximum number of preconditioned conjugate gradient iterations. Type: integer; Default: 30. PCM (GLOBALS)¶GLOBALS — PCM boolean for pcmsolver module. Type: boolean; Default: false. PCM_CC_TYPE (PCM)¶PCM — PCM-CCSD algorithm type. Type: string; Possible Values: PTE; Default: PTE. PCM_SCF_TYPE (PCM)¶PCM (Expert) — Use total or separate potentials and charges in the PCM-SCF step. Type: string; Possible Values: TOTAL, SEPARATE; Default: TOTAL. PCMSOLVER_PARSED_FNAME (PCM)¶PCM (Expert) — Name of the PCMSolver input file as parsed by pcmsolver.py. Type: string; Default: No Default. PE (GLOBALS)¶GLOBALS — PE boolean for polarizable embedding module. Type: boolean; Default: false. PE_ECP (PE)¶PE — use PE(ECP) repulsive potentials. Type: boolean; Default: false. PERTURB_CBS (PSIMRCC)¶PSIMRCC — Removed in 1.4. Will raise an error in 1.5. Type: boolean; Default: false. PERTURB_CBS_COUPLING (PSIMRCC)¶PSIMRCC — Removed in 1.4. Will raise an error in 1.5. Type: boolean; Default: true. PERTURB_DIPOLE (SCF)¶SCF — An array of length three describing the magnitude (atomic units) of the dipole field in the {x,y,z} directions. Type: array; Default: No Default. PERTURB_H (SCF)¶SCF — Do perturb the Hamiltonian?. Type: boolean; Default: false. PERTURB_MAGNITUDE (DETCI)¶DETCI (Expert) — The magnitude of perturbation \(z\) in \(H = ",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:203057,Energy Efficiency,reduce,reduce,203057,"s and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC, CCT3, BUILTIN, MRCC; Default: No Default. QC_TYPE (DCT)¶DCT — Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, the cumulant is updated using the standard Jacobi algorithm. If set to SIMULTANEOUS both cumulant and orbitals are updated in a single Newton-Raphson step. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: SIMULTANEOUS. QCHF (DFOCC)¶DFOCC — Do perform a QCHF computation?. Type: boolean; Default: false. QCHF (SCF)¶SCF — Do perform a QCHF computation?. Type: boolean; Default: false. QMEFP (EFP)¶EFP (Expert) — Do turn on QM/EFP terms?. Type: boolean; Default: false. R4S (DETCI)¶DETCI (Expert) — Do restrict strings with \(e-\) in RAS IV? Useful to reduce the number of strings required if MIXED4=true, as in a split-virutal CISD[TQ] computation. If more than one electron is in RAS IV, then the holes in RAS I cannot exceed the number of particles in RAS III + RAS IV (i.e., EX_LEVEL), or else the string is discarded. Type: boolean; Default: false. R_CONVERGENCE (ADC)¶ADC — Convergence threshold for ADC matrix diagonalisation. Negative values keep the * adcc default (1e-6). Type: conv double; Default: -1. R_CONVERGENCE (CCENERGY)¶CCENERGY — Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for CC-EOM. Type: conv double; Default: 1e-6. R_CONVERGENCE (CCLAMBDA)¶CCLAMBDA — Convergence criterion for wavefunction (change) in CC lambda-amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCRESPONSE)¶CCRESPONSE — Convergence criterion for wavefunction (change) in p",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:215790,Energy Efficiency,energy,energy,215790," Default takes into account symmetry reduction through asymmetric isotopic substitution and is unaffected by user-set symmetry on molecule, so this option is the sole way to influence the symmetry-dependent aspects of the thermodynamic analysis. Note that this factor is handled differently among quantum chemistry software. Type: integer; Default: 1. RSRFO_ALPHA_MAX (OPTKING)¶OPTKING — Absolute maximum value of RS-RFO. Type: double; Default: 1e8. RUN_CCSD (FNOCC)¶FNOCC (Expert) — do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CCTRANSORT (CCTRANSORT)¶CCTRANSORT — Use cctransort module NOTE: Turning this option off requires separate installation of ccsort and transqt2 modules, see http://github.com/psi4/psi4pasture. Type: boolean; Default: true. RUN_CEPA (FNOCC)¶FNOCC (Expert) — Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. RUN_MP2 (FNOCC)¶FNOCC (Expert) — do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3 (FNOCC)¶FNOCC (Expert) — do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4 (FNOCC)¶FNOCC (Expert) — do only evaluate mp4 energy?. Type: boolean; Default: false. S (DETCI)¶DETCI — The value of the spin quantum number \(S\) is given by this option. The default is determined by the value of the multiplicity. This is used for two things: (1) determining the phase of the redundant half of the CI vector when the \(M_s = 0\) component is used (i.e., MS0 = TRUE), and (2) making sure the guess vector has the desired value of \(\langle S^2\rangle\) (if CALC_S_SQUARED is TRUE and ICORE = 1). Type: double; Default: 0.0. S_CHOLESKY_TOLERANCE (SCF)¶SCF — Tolerance for partial Cholesky decomposition of overlap matrix. Type: conv double; Default: 1e-8. S_CUT (DLPNO)¶DLPNO (Expert) — Overlap matrix threshold for removing linear dependencies. Type: double; Default: 1e-8. S_ORTHOGONALIZATION (SCF)¶SCF — SO orthogona",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:215884,Energy Efficiency,energy,energy,215884," unaffected by user-set symmetry on molecule, so this option is the sole way to influence the symmetry-dependent aspects of the thermodynamic analysis. Note that this factor is handled differently among quantum chemistry software. Type: integer; Default: 1. RSRFO_ALPHA_MAX (OPTKING)¶OPTKING — Absolute maximum value of RS-RFO. Type: double; Default: 1e8. RUN_CCSD (FNOCC)¶FNOCC (Expert) — do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CCTRANSORT (CCTRANSORT)¶CCTRANSORT — Use cctransort module NOTE: Turning this option off requires separate installation of ccsort and transqt2 modules, see http://github.com/psi4/psi4pasture. Type: boolean; Default: true. RUN_CEPA (FNOCC)¶FNOCC (Expert) — Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. RUN_MP2 (FNOCC)¶FNOCC (Expert) — do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3 (FNOCC)¶FNOCC (Expert) — do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4 (FNOCC)¶FNOCC (Expert) — do only evaluate mp4 energy?. Type: boolean; Default: false. S (DETCI)¶DETCI — The value of the spin quantum number \(S\) is given by this option. The default is determined by the value of the multiplicity. This is used for two things: (1) determining the phase of the redundant half of the CI vector when the \(M_s = 0\) component is used (i.e., MS0 = TRUE), and (2) making sure the guess vector has the desired value of \(\langle S^2\rangle\) (if CALC_S_SQUARED is TRUE and ICORE = 1). Type: double; Default: 0.0. S_CHOLESKY_TOLERANCE (SCF)¶SCF — Tolerance for partial Cholesky decomposition of overlap matrix. Type: conv double; Default: 1e-8. S_CUT (DLPNO)¶DLPNO (Expert) — Overlap matrix threshold for removing linear dependencies. Type: double; Default: 1e-8. S_ORTHOGONALIZATION (SCF)¶SCF — SO orthogonalization: automatic, symmetric, or canonical?. Type: string; Possible Values: AUTO, SYMMETRIC,",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:215978,Energy Efficiency,energy,energy,215978,"symmetry-dependent aspects of the thermodynamic analysis. Note that this factor is handled differently among quantum chemistry software. Type: integer; Default: 1. RSRFO_ALPHA_MAX (OPTKING)¶OPTKING — Absolute maximum value of RS-RFO. Type: double; Default: 1e8. RUN_CCSD (FNOCC)¶FNOCC (Expert) — do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CCTRANSORT (CCTRANSORT)¶CCTRANSORT — Use cctransort module NOTE: Turning this option off requires separate installation of ccsort and transqt2 modules, see http://github.com/psi4/psi4pasture. Type: boolean; Default: true. RUN_CEPA (FNOCC)¶FNOCC (Expert) — Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. RUN_MP2 (FNOCC)¶FNOCC (Expert) — do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3 (FNOCC)¶FNOCC (Expert) — do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4 (FNOCC)¶FNOCC (Expert) — do only evaluate mp4 energy?. Type: boolean; Default: false. S (DETCI)¶DETCI — The value of the spin quantum number \(S\) is given by this option. The default is determined by the value of the multiplicity. This is used for two things: (1) determining the phase of the redundant half of the CI vector when the \(M_s = 0\) component is used (i.e., MS0 = TRUE), and (2) making sure the guess vector has the desired value of \(\langle S^2\rangle\) (if CALC_S_SQUARED is TRUE and ICORE = 1). Type: double; Default: 0.0. S_CHOLESKY_TOLERANCE (SCF)¶SCF — Tolerance for partial Cholesky decomposition of overlap matrix. Type: conv double; Default: 1e-8. S_CUT (DLPNO)¶DLPNO (Expert) — Overlap matrix threshold for removing linear dependencies. Type: double; Default: 1e-8. S_ORTHOGONALIZATION (SCF)¶SCF — SO orthogonalization: automatic, symmetric, or canonical?. Type: string; Possible Values: AUTO, SYMMETRIC, CANONICAL, PARTIALCHOLESKY; Default: AUTO. S_TOLERANCE (SCF)¶SCF — Minimum S matrix eigenvalu",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:217365,Energy Efficiency,energy,energy,217365,"e desired value of \(\langle S^2\rangle\) (if CALC_S_SQUARED is TRUE and ICORE = 1). Type: double; Default: 0.0. S_CHOLESKY_TOLERANCE (SCF)¶SCF — Tolerance for partial Cholesky decomposition of overlap matrix. Type: conv double; Default: 1e-8. S_CUT (DLPNO)¶DLPNO (Expert) — Overlap matrix threshold for removing linear dependencies. Type: double; Default: 1e-8. S_ORTHOGONALIZATION (SCF)¶SCF — SO orthogonalization: automatic, symmetric, or canonical?. Type: string; Possible Values: AUTO, SYMMETRIC, CANONICAL, PARTIALCHOLESKY; Default: AUTO. S_TOLERANCE (SCF)¶SCF — Minimum S matrix eigenvalue to allow before linear dependencies are removed. Type: conv double; Default: 1e-7. SAD_CHOL_TOLERANCE (SCF)¶SCF (Expert) — SAD guess density decomposition threshold. Type: conv double; Default: 1e-7. SAD_D_CONVERGENCE (SCF)¶SCF — Convergence criterion for SCF density in the SAD guess, analogous to D_CONVERGENCE. Type: conv double; Default: 1e-5. SAD_E_CONVERGENCE (SCF)¶SCF — Convergence criterion for SCF energy in the SAD guess, analogous to E_CONVERGENCE. Type: conv double; Default: 1e-5. SAD_FRAC_OCC (SCF)¶SCF (Expert) — Do force an even distribution of occupations across the last partially occupied orbital shell?. Type: boolean; Default: true. SAD_MAXITER (SCF)¶SCF (Expert) — Maximum number of atomic SCF iterations within SAD. Type: integer; Default: 50. SAD_PRINT (SCF)¶SCF (Expert) — The amount of SAD information to print to the output. Type: integer; Default: 0. SAD_SCF_TYPE (SCF)¶SCF (Expert) — SCF type used for atomic calculations in SAD guess. Type: string; Possible Values: DIRECT, DF, MEM_DF, DISK_DF, PK, OUT_OF_CORE, CD, GTFOCK; Default: DF. SAD_SPIN_AVERAGE (SCF)¶SCF (Expert) — Do use spin-averaged occupations instead of atomic ground spin state in fractional SAD?. Type: boolean; Default: true. SAPGAU_BASIS (SCF)¶SCF — The potential basis set used for the SAPGAU guess. Type: string; Default: sap_helfem_large. SAPT (SCF)¶SCF (Expert) — Are going to do SAPT? If so, what pa",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:223134,Energy Efficiency,energy,energy,223134,"Default: false. SCF_INITIAL_ACCELERATOR (SCF)¶SCF — Use a method to accelerate initial SCF convergence? Use NONE for DIIS alone (if enabled) and EDIIS or ADIIS to have both the chosen accelerator and DIIS (if enabled). For restricted-open references, EDIIS and ADIIS have no effect. Type: string; Possible Values: NONE, EDIIS, ADIIS; Default: ADIIS. SCF_INITIAL_FINISH_DIIS_TRANSITION (SCF)¶SCF — SCF error at which to complete the linear interpolation between DIIS steps and steps of the initial SCF accelerator Value taken from Garza and Scuseria, DOI: 10.1063/1.4740249. Type: double; Default: 1.0e-4. SCF_INITIAL_START_DIIS_TRANSITION (SCF)¶SCF — SCF error at which to start the linear interpolation between DIIS steps and steps of the initial SCF accelerator. Value taken from Garza and Scuseria, DOI: 10.1063/1.4740249. Type: double; Default: 1.0e-1. SCF_MEM_SAFETY_FACTOR (SCF)¶SCF — Memory safety factor for allocating JK. Type: double; Default: 0.75. SCF_PROPERTIES (SCF)¶SCF — SCF Properties to calculate after an energy evaluation. Note, this keyword is not used for property evaluations. Type: array; Default: No Default. SCF_SUBTYPE (SCF)¶SCF (Expert) — For certain SCF_TYPE algorithms that have internal sub-algorithms depending on available memory or other hardware constraints, allow the best sub-algorithm for the molecule and conditions (AUTO ; usual mode) or forcibly select a sub-algorithm (usually only for debugging or profiling). Presently, SCF_SUBTYPE=DF, SCF_SUBTYPE=MEM_DF, and SCF_SUBTYPE=DISK_DF can have INCORE and OUT_OF_CORE selected; and SCF_TYPE=PK can have INCORE, OUT_OF_CORE, YOSHIMINE_OUT_OF_CORE, and REORDER_OUT_OF_CORE selected. Type: string; Possible Values: AUTO, INCORE, OUT_OF_CORE, YOSHIMINE_OUT_OF_CORE, REORDER_OUT_OF_CORE; Default: AUTO. SCF_TYPE (CPHF)¶CPHF — SCF Type. Type: string; Possible Values: DIRECT, DF, PK, OUT_OF_CORE, PS, INDEPENDENT, GTFOCK, DFDIRJ+SNLINK, DFDIRJ+LINK, DFDIRJ+COSX; Default: DIRECT. SCF_TYPE (GLOBALS)¶GLOBALS — What algor",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:227328,Energy Efficiency,allocate,allocate,227328,")¶DETCI (Expert) — Do eliminate determinants not valid for spin-complete spin-flip CI’s? [see J. S. Sears et al, J. Chem. Phys. 118, 9084-9094 (2003)]. Type: boolean; Default: false. SIGMA_OVERLAP (DETCI)¶DETCI (Expert) — Do print the sigma overlap matrix? Not generally useful. Type: boolean; Default: false. SINGLES_PRINT (CCEOM)¶CCEOM — Do print information on the iterative solution to the single-excitation EOM-CC problem used as a guess to full EOM-CC?. Type: boolean; Default: false. SMALL_CUTOFF (PSIMRCC)¶PSIMRCC —. Type: integer; Default: 0. SNLINK_BASIS_TOLERANCE (SCF)¶SCF (Expert) — Screening criteria for basis function values on snLinK grids. Type: conv double; Default: 1.0e-10. SNLINK_DENSITY_TOLERANCE (SCF)¶SCF (Expert) — Screening criteria for shell-pair densities in snLinK. Type: conv double; Default: 1.0e-10. SNLINK_FORCE_CARTESIAN (SCF)¶SCF (Expert) — Force snLinK to use cartesian coordinates. Type: boolean; Default: false. SNLINK_GPU_MEM (SCF)¶SCF (Expert) — Proportion (in %) of available GPU memory to allocate to snLinK. Type: boolean; Default: 90. SNLINK_GRID_BATCH_SIZE (SCF)¶SCF (Expert) — Maximum number of grid points per grid block for GauXC. Type: integer; Default: 2048. SNLINK_INTEGRATOR_KERNEL (SCF)¶SCF (Expert) — Integrator execution kernel for snLinK GauXC also has SHELLBATCHED, but it is incompatible with Psi4 due to not being yet implemented with sn-LinK. Type: string; Possible Values: DEFAULT, INCORE; Default: DEFAULT. SNLINK_INTS_TOLERANCE (SCF)¶SCF — Screening criteria for integrals and intermediates in snLinK. Type: conv double; Default: 1.0e-11. SNLINK_LOAD_BALANCER_KERNEL (SCF)¶SCF (Expert) — Load Balancer kernel for snLinK. Type: string; Possible Values: DEFAULT, REPLICATED, REPLICATED-PETITE, REPLICATED-FILLIN; Default: DEFAULT. SNLINK_LWD_KERNEL (SCF)¶SCF (Expert) — Integrator local work driver kernel for snLinK GauXC also has SCHEME1-CUTLASS, but it is disabled in Psi4 for now due to compile-time issues and requiring very modern CU",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:231977,Energy Efficiency,energy,energy,231977,"is. (Overrides SOLVER_N_ROOT.). Type: array; Default: No Default. SOS_TYPE (DFOCC)¶DFOCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOS_TYPE (OCC)¶OCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOSCF (SCF)¶SCF — Do use second-order SCF convergence methods?. Type: boolean; Default: false. SOSCF_CONV (SCF)¶SCF — Second order convergence threshold. Cease microiterating at this value. Type: conv double; Default: 5.0e-3. SOSCF_MAX_ITER (SCF)¶SCF — Maximum number of second-order microiterations to perform. Type: integer; Default: 5. SOSCF_MIN_ITER (SCF)¶SCF — Minimum number of second-order microiterations to perform. Type: integer; Default: 1. SOSCF_PRINT (SCF)¶SCF — Do we print the SOSCF microiterations?. Type: boolean; Default: false. SOSCF_START_CONVERGENCE (SCF)¶SCF — When to start second-order SCF iterations based on gradient RMS. Type: conv double; Default: 1.0e-2. SPIN_SCALE_TYPE (OCC)¶OCC (Expert) — Controls the spin scaling set to current energy. This is set by Psi internally. Type: string; Possible Values: NONE, CUSTOM, SCS, SCSN, SCSVDW, SOS, SOSPI; Default: NONE. SS_E_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SCALE (OCC)¶OCC — A custom scaling parameter for same-spin terms in OCC. The result goes to a CUSTOM SCS variable, exact name method-dependent. Type: double; Default: 1. SS_SKIP_DIAG (CCEOM)¶CCEOM — Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT (CCEOM)¶CCEOM — SS vectors stored per root. Type: integer; Default: 5. SSAPT0_SCALE (FISAPT)¶FISAPT — Do sSAPT0 exchange-scaling with F-SAPT. Type: boolean; Default: false. STABILITY_ADD_VEC",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:232177,Energy Efficiency,energy,energy,232177,"ible Values: SOS, SOSPI; Default: SOS. SOSCF (SCF)¶SCF — Do use second-order SCF convergence methods?. Type: boolean; Default: false. SOSCF_CONV (SCF)¶SCF — Second order convergence threshold. Cease microiterating at this value. Type: conv double; Default: 5.0e-3. SOSCF_MAX_ITER (SCF)¶SCF — Maximum number of second-order microiterations to perform. Type: integer; Default: 5. SOSCF_MIN_ITER (SCF)¶SCF — Minimum number of second-order microiterations to perform. Type: integer; Default: 1. SOSCF_PRINT (SCF)¶SCF — Do we print the SOSCF microiterations?. Type: boolean; Default: false. SOSCF_START_CONVERGENCE (SCF)¶SCF — When to start second-order SCF iterations based on gradient RMS. Type: conv double; Default: 1.0e-2. SPIN_SCALE_TYPE (OCC)¶OCC (Expert) — Controls the spin scaling set to current energy. This is set by Psi internally. Type: string; Possible Values: NONE, CUSTOM, SCS, SCSN, SCSVDW, SOS, SOSPI; Default: NONE. SS_E_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SCALE (OCC)¶OCC — A custom scaling parameter for same-spin terms in OCC. The result goes to a CUSTOM SCS variable, exact name method-dependent. Type: double; Default: 1. SS_SKIP_DIAG (CCEOM)¶CCEOM — Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT (CCEOM)¶CCEOM — SS vectors stored per root. Type: integer; Default: 5. SSAPT0_SCALE (FISAPT)¶FISAPT — Do sSAPT0 exchange-scaling with F-SAPT. Type: boolean; Default: false. STABILITY_ADD_VECTORS (DCT)¶DCT (Expert) — The number of vectors that can be added simultaneously into the subspace for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STABILITY_ANALYSIS (SCF)¶SCF — Whether to perform stabilit",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:233894,Energy Efficiency,energy,energy,233894,"PT0 exchange-scaling with F-SAPT. Type: boolean; Default: false. STABILITY_ADD_VECTORS (DCT)¶DCT (Expert) — The number of vectors that can be added simultaneously into the subspace for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STABILITY_ANALYSIS (SCF)¶SCF — Whether to perform stability analysis after convergence. NONE prevents analysis being performed. CHECK will print out the analysis of the wavefunction stability at the end of the computation. FOLLOW will perform the analysis and, if a totally symmetric instability is found, will attempt to follow the eigenvector and re-run the computations to find a stable solution. Type: string; Possible Values: NONE, CHECK, FOLLOW; Default: NONE. STABILITY_AUGMENT_SPACE_TOL (DCT)¶DCT (Expert) — The value of the rms of the residual in Schmidt orthogonalization which is used as a threshold for augmenting the vector subspace in stability check. Type: conv double; Default: 0.1. STABILITY_CHECK (DCT)¶DCT (Expert) — Performs stability analysis of the DCT energy. Type: boolean; Default: false. STABILITY_CONVERGENCE (DCT)¶DCT (Expert) — Controls the convergence of the Davidson’s diagonalization in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE (DCT)¶DCT (Expert) — The maximum size of the subspace for the stability check. The program will terminate if this parameter is exceeded and the convergence (STABILITY_CONVERGENCE) is not satisfied. Type: integer; Default: 200. STABILITY_N_EIGENVALUES (DCT)¶DCT (Expert) — The number of Hessian eigenvalues computed during the stability check. Type: integer; Default: 3. STABILITY_N_GUESS_VECTORS (DCT)¶DCT (Expert) — The number of guess vectors used for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STEP_TYPE (OPTKING)¶OPTKING — Geometry optimization step type, either Newton-Raphson or Rational Function Optimization. Type: string; Possible Values: RFO, RS_I_RFO, P_RFO, NR, SD, LINESEARCH; Default: RFO. SUMMATION",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:236415,Energy Efficiency,charge,charge,236415,"n; Default: false. T3_WS_INCORE (CCEOM)¶CCEOM — Do build W intermediates required for eom_cc3 in core memory?. Type: boolean; Default: false. T_AMPS (CCHBAR)¶CCHBAR — Do compute the T amplitude equation matrix elements?. Type: boolean; Default: false. T_CUT_CLMO (DLPNO)¶DLPNO (Expert) — Basis set coefficient threshold for including basis function (m) in domain of LMO (i). Type: double; Default: 1e-2. T_CUT_CPAO (DLPNO)¶DLPNO (Expert) — Basis set coefficient threshold for including basis function (n) in domain of PAO (u). Type: double; Default: 1e-3. T_CUT_DO (DLPNO)¶DLPNO (Expert) — DOI threshold for including PAO (u) in domain of LMO (i). Type: double; Default: 1e-2. T_CUT_DO_IJ (DLPNO)¶DLPNO (Expert) — DOI threshold for treating LMOs (i,j) as interacting. Type: double; Default: 1e-5. T_CUT_DO_PRE (DLPNO)¶DLPNO (Expert) — DOI threshold for including PAO (u) in domain of LMO (i) during pre-screening. Type: double; Default: 3e-2. T_CUT_MKN (DLPNO)¶DLPNO (Expert) — Mulliken charge threshold for including aux BFs on atom (a) in domain of LMO (i). Type: double; Default: 1e-3. T_CUT_PNO (DLPNO)¶DLPNO (Expert) — Occupation number threshold for removing PNOs. Type: double; Default: 1e-8. T_CUT_PRE (DLPNO)¶DLPNO (Expert) — Pair energy threshold (dipole approximation) for treating LMOs (i, j) as interacting. Type: double; Default: 1e-6. TDM (DETCI)¶DETCI — Do compute the transition density? Note: only transition densities between roots of the same symmetry will be evaluated. DETCI does not compute states of different irreps within the same computation; to do this, lower the symmetry of the computation. Type: boolean; Default: false. TDSCF_COEFF_CUTOFF (SCF)¶SCF — Cutoff for printing excitations and de-excitations contributing to each excited state. Type: double; Default: 0.1. TDSCF_GUESS (SCF)¶SCF — Guess type, only ‘denominators’ currently supported. Type: string; Default: DENOMINATORS. TDSCF_MAXITER (SCF)¶SCF — Maximum number of TDSCF solver iterations. Type: integer; Defau",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:236668,Energy Efficiency,energy,energy,236668,"LMO (DLPNO)¶DLPNO (Expert) — Basis set coefficient threshold for including basis function (m) in domain of LMO (i). Type: double; Default: 1e-2. T_CUT_CPAO (DLPNO)¶DLPNO (Expert) — Basis set coefficient threshold for including basis function (n) in domain of PAO (u). Type: double; Default: 1e-3. T_CUT_DO (DLPNO)¶DLPNO (Expert) — DOI threshold for including PAO (u) in domain of LMO (i). Type: double; Default: 1e-2. T_CUT_DO_IJ (DLPNO)¶DLPNO (Expert) — DOI threshold for treating LMOs (i,j) as interacting. Type: double; Default: 1e-5. T_CUT_DO_PRE (DLPNO)¶DLPNO (Expert) — DOI threshold for including PAO (u) in domain of LMO (i) during pre-screening. Type: double; Default: 3e-2. T_CUT_MKN (DLPNO)¶DLPNO (Expert) — Mulliken charge threshold for including aux BFs on atom (a) in domain of LMO (i). Type: double; Default: 1e-3. T_CUT_PNO (DLPNO)¶DLPNO (Expert) — Occupation number threshold for removing PNOs. Type: double; Default: 1e-8. T_CUT_PRE (DLPNO)¶DLPNO (Expert) — Pair energy threshold (dipole approximation) for treating LMOs (i, j) as interacting. Type: double; Default: 1e-6. TDM (DETCI)¶DETCI — Do compute the transition density? Note: only transition densities between roots of the same symmetry will be evaluated. DETCI does not compute states of different irreps within the same computation; to do this, lower the symmetry of the computation. Type: boolean; Default: false. TDSCF_COEFF_CUTOFF (SCF)¶SCF — Cutoff for printing excitations and de-excitations contributing to each excited state. Type: double; Default: 0.1. TDSCF_GUESS (SCF)¶SCF — Guess type, only ‘denominators’ currently supported. Type: string; Default: DENOMINATORS. TDSCF_MAXITER (SCF)¶SCF — Maximum number of TDSCF solver iterations. Type: integer; Default: 60. TDSCF_PRINT (SCF)¶SCF — Verbosity level in TDSCF. Type: integer; Default: 1. TDSCF_R_CONVERGENCE (SCF)¶SCF — Convergence threshold for the norm of the residual vector. If unset, default based on D_CONVERGENCE. Type: conv double; Default: 1e-4. TDSCF_S",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:238684,Energy Efficiency,energy,energy,238684,"1e-4. TDSCF_STATES (SCF)¶SCF — Number of roots (excited states) we should seek to converge. This can be either an integer (total number of states to seek) or a list (number of states per irrep). The latter is only valid if the system has symmetry. Furthermore, the total number of states will be redistributed among irreps when symmetry is used. Type: array; Default: No Default. TDSCF_TDA (SCF)¶SCF — Run with Tamm-Dancoff approximation (TDA), uses random-phase approximation (RPA) when false. Type: boolean; Default: false. TDSCF_TDM_PRINT (SCF)¶SCF — Which transition dipole moments to print out: - E_TDM_LEN : electric transition dipole moments, length representation - E_TDM_VEL : electric transition dipole moments, velocity representation - M_TDM : magnetic transition dipole moments. Type: array; Default: No Default. TDSCF_TRIPLETS (SCF)¶SCF — Controls inclusion of triplet states, which is only valid for restricted references. Valid options: - none : No triplets computed (default) - also : lowest-energy triplets and singlets included, in 50-50 ratio. Note that singlets are privileged, i.e. if seeking to converge 5 states in total, 3 will be singlets and 2 will be triplets. - only : Only triplet states computed. Type: string; Possible Values: NONE, ALSO, ONLY; Default: NONE. TEST_B (OPTKING)¶OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING)¶OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. THETA_POINTS (SCF)¶SCF — Number of colatitude grid points for spherical potential integration. Type: integer; Default: 360. THICKNESS (SCF)¶SCF — Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. THREE_PARTICLE (DCT)¶DCT — Whether to compute three-particle energy correction or not. Type: string; Possible Values: NONE, PERTURBATIVE; Default: NONE. TIKHONOW_MAX (PSIMRCC)¶PSIMRCC — The cycle after which Tikhonow regularization is stopped. Set to zero to allow regularization in all iterations. Type",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:239433,Energy Efficiency,energy,energy,239433,"tation - M_TDM : magnetic transition dipole moments. Type: array; Default: No Default. TDSCF_TRIPLETS (SCF)¶SCF — Controls inclusion of triplet states, which is only valid for restricted references. Valid options: - none : No triplets computed (default) - also : lowest-energy triplets and singlets included, in 50-50 ratio. Note that singlets are privileged, i.e. if seeking to converge 5 states in total, 3 will be singlets and 2 will be triplets. - only : Only triplet states computed. Type: string; Possible Values: NONE, ALSO, ONLY; Default: NONE. TEST_B (OPTKING)¶OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING)¶OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. THETA_POINTS (SCF)¶SCF — Number of colatitude grid points for spherical potential integration. Type: integer; Default: 360. THICKNESS (SCF)¶SCF — Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. THREE_PARTICLE (DCT)¶DCT — Whether to compute three-particle energy correction or not. Type: string; Possible Values: NONE, PERTURBATIVE; Default: NONE. TIKHONOW_MAX (PSIMRCC)¶PSIMRCC — The cycle after which Tikhonow regularization is stopped. Set to zero to allow regularization in all iterations. Type: integer; Default: 5. TIKHONOW_OMEGA (DCT)¶DCT (Expert) — The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. TIKHONOW_OMEGA (PSIMRCC)¶PSIMRCC — The shift to apply to the denominators, {it c.f.} Taube and Bartlett, JCP, 130, 144112 (2009). Type: double; Default: 0.0. TIKHONOW_TRIPLES (PSIMRCC)¶PSIMRCC (Expert) — Do use Tikhonow regularization in (T) computations?. Type: boolean; Default: false. TILE_SZ (SCF)¶SCF (Expert) — The tile size for the distributed matrices. Type: integer; Default: 512. TPDM (DETCI)¶DETCI (Expert) — Do compute two-particle density matrix if not otherwise required? Warning: This will hold 4 dense active TPDM’s in memory. Type: boolean; Default: false.",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:6021,Integrability,rout,routines,6021,"T)¶SAPT — Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. BASIS (SCF)¶SCF — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS_GUESS (SCF)¶SCF — Accelerate convergence by performing a preliminary SCF with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the Defaults small basis set 3-21G, pcseg-0, or def2-SV(P). Type: string; Default: FALSE. BASIS_RELATIVISTIC (GLOBALS)¶GLOBALS — Auxiliary basis set for solving Dirac equation in X2C and DKH calculations. Defaults to decontracted orbital basis. Type: string; Default: No Default. BCCD_MAXITER (CCENERGY)¶CCENERGY — Maximum number of iterations for Brueckner CCD. Type: integer; Default: 50. BENCH (GLOBALS)¶GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI)¶DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BORDER (PE)¶PE — Activate border options for sites in proximity to the QM/MM border. Type: boolean; Default: false. BORDER_N_REDIST (PE)¶PE — number of neighbor sites to redistribute to. The default (-1) redistributes to all sites which are not in the border region. Type: integer; Default: -1. BORDER_REDIST_ORDER (PE)¶PE — order from which moments are removed, e.g., if set to 1 (default), only charges are redistributed and all higher order moments are removed. Type: integer; Default: 1. BORDER_REDIST_POL (PE)¶PE — redistribute polarizabilities? If false, polarizabilities are removed (default). Type: boolean; Default: false. BORDER_RMIN (PE)¶PE — minimum radius from QM atoms to MM sites to be taken into ac",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:7793,Integrability,depend,depending,7793," BORDER_REDIST_POL (PE)¶PE — redistribute polarizabilities? If false, polarizabilities are removed (default). Type: boolean; Default: false. BORDER_RMIN (PE)¶PE — minimum radius from QM atoms to MM sites to be taken into account for removal/redistribution. Type: double; Default: 2.2. BORDER_RMIN_UNIT (PE)¶PE — unit of BORDER_RMIN, default is atomic units (AU). Type: string; Possible Values: AU, AA; Default: AU. BORDER_TYPE (PE)¶PE — border type, either remove or redistribute moments/polarizabilities. Type: string; Possible Values: REMOVE, REDIST; Default: REMOVE. BRIANQC_ENABLE (GLOBALS)¶GLOBALS — Whether to enable using the BrianQC GPU module. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC)¶FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY)¶CCENERGY — Convergence criterion for Brueckner orbitals. The convergence is determined based on the largest \(T_1\) amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (CCDENSITY)¶CCDENSITY — The amount of caching of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY)¶CCENERGY — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM)¶CCEOM — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:28672,Integrability,contract,contraction,28672,"Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, NCC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR)¶CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 0. CFOUR_CIS_CONV (CFOUR)¶CFOUR — Specifies the convergence threshold as \(10^{-N}\) for CIS calculations. Type: integer; Default: 5. CFOUR_CONTINUUM (CFOUR)¶CFOUR — Signifies that one or more “continuum” orbitals should be added to the calculation. VIRTUAL and DVIRTUAL specify one or two orbital which should be initially unoccupied (in the SCF calculation), while OCCUPIED and DOCCUPIED specify one or two orbitals which should be initially occupied. Type: string; Possible Values: NONE, VIRTUAL, DVIRTUAL, OCCUPIED, DOCCUPIED; Default: NONE. CFOUR_CONTRACTION (CFOUR)¶CFOUR — Specifies the contraction scheme used by the integral and integral derivative program. SEGMENTED (=0) uses a segmented contraction scheme; GENERAL (=1) uses a general contraction scheme, and UNCONTRACTED (=2) uses the corresponding uncontracted sets. Note that even for truly segmented basis sets, the integral programs run significantly faster in the GENERAL mode. Type: string; Possible Values: SEGMENTED, GENERAL, UNCONTRACTED; Default: GENERAL. CFOUR_CONVERGENCE (CFOUR)¶CFOUR — Identical to CFOUR_GEO_CONV. Type: integer; Default: 4. CFOUR_COORDINATES (CFOUR)¶CFOUR — Specifies the type of coordinates used in the input file ZMAT. Value INTERNAL (=0) means that the geometry is supplied in the usual Z-matrix format, while CARTESIAN (=1) means that the geometry is given in Cartesian coordinates. A third option is XYZINT (=2) for which a Z-matrix connectivity is defined, but with values of the internal coordinates defined implicitly by supplying Cartesian coordinates. Note that geometry optimizations are currently on",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:28777,Integrability,contract,contraction,28777,"ed). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, NCC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR)¶CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 0. CFOUR_CIS_CONV (CFOUR)¶CFOUR — Specifies the convergence threshold as \(10^{-N}\) for CIS calculations. Type: integer; Default: 5. CFOUR_CONTINUUM (CFOUR)¶CFOUR — Signifies that one or more “continuum” orbitals should be added to the calculation. VIRTUAL and DVIRTUAL specify one or two orbital which should be initially unoccupied (in the SCF calculation), while OCCUPIED and DOCCUPIED specify one or two orbitals which should be initially occupied. Type: string; Possible Values: NONE, VIRTUAL, DVIRTUAL, OCCUPIED, DOCCUPIED; Default: NONE. CFOUR_CONTRACTION (CFOUR)¶CFOUR — Specifies the contraction scheme used by the integral and integral derivative program. SEGMENTED (=0) uses a segmented contraction scheme; GENERAL (=1) uses a general contraction scheme, and UNCONTRACTED (=2) uses the corresponding uncontracted sets. Note that even for truly segmented basis sets, the integral programs run significantly faster in the GENERAL mode. Type: string; Possible Values: SEGMENTED, GENERAL, UNCONTRACTED; Default: GENERAL. CFOUR_CONVERGENCE (CFOUR)¶CFOUR — Identical to CFOUR_GEO_CONV. Type: integer; Default: 4. CFOUR_COORDINATES (CFOUR)¶CFOUR — Specifies the type of coordinates used in the input file ZMAT. Value INTERNAL (=0) means that the geometry is supplied in the usual Z-matrix format, while CARTESIAN (=1) means that the geometry is given in Cartesian coordinates. A third option is XYZINT (=2) for which a Z-matrix connectivity is defined, but with values of the internal coordinates defined implicitly by supplying Cartesian coordinates. Note that geometry optimizations are currently only possible for INTERNAL and XYZ2INT. Psi4 Interface: Keyword set from active molecule, always CARTESIAN. Above restrictions on geometry optim",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:28825,Integrability,contract,contraction,28825,"ed). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, NCC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR)¶CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 0. CFOUR_CIS_CONV (CFOUR)¶CFOUR — Specifies the convergence threshold as \(10^{-N}\) for CIS calculations. Type: integer; Default: 5. CFOUR_CONTINUUM (CFOUR)¶CFOUR — Signifies that one or more “continuum” orbitals should be added to the calculation. VIRTUAL and DVIRTUAL specify one or two orbital which should be initially unoccupied (in the SCF calculation), while OCCUPIED and DOCCUPIED specify one or two orbitals which should be initially occupied. Type: string; Possible Values: NONE, VIRTUAL, DVIRTUAL, OCCUPIED, DOCCUPIED; Default: NONE. CFOUR_CONTRACTION (CFOUR)¶CFOUR — Specifies the contraction scheme used by the integral and integral derivative program. SEGMENTED (=0) uses a segmented contraction scheme; GENERAL (=1) uses a general contraction scheme, and UNCONTRACTED (=2) uses the corresponding uncontracted sets. Note that even for truly segmented basis sets, the integral programs run significantly faster in the GENERAL mode. Type: string; Possible Values: SEGMENTED, GENERAL, UNCONTRACTED; Default: GENERAL. CFOUR_CONVERGENCE (CFOUR)¶CFOUR — Identical to CFOUR_GEO_CONV. Type: integer; Default: 4. CFOUR_COORDINATES (CFOUR)¶CFOUR — Specifies the type of coordinates used in the input file ZMAT. Value INTERNAL (=0) means that the geometry is supplied in the usual Z-matrix format, while CARTESIAN (=1) means that the geometry is given in Cartesian coordinates. A third option is XYZINT (=2) for which a Z-matrix connectivity is defined, but with values of the internal coordinates defined implicitly by supplying Cartesian coordinates. Note that geometry optimizations are currently only possible for INTERNAL and XYZ2INT. Psi4 Interface: Keyword set from active molecule, always CARTESIAN. Above restrictions on geometry optim",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:46349,Integrability,contract,contracted,46349,"fying the corresponding inner-shell orbitals. Type: boolean; Default: false. CFOUR_FROZEN_VIRT (CFOUR)¶CFOUR — Specifies whether in the correlation treatment all virtual orbitals (OFF =0) or only a subset of virtual orbitals (ON =1) are used. In the latter case, the threshold for deleting virtual orbitals based on the orbital energy needs to be specified in a %frozen_virt section. Type: boolean; Default: false. CFOUR_GAMMA_ABCD (CFOUR)¶CFOUR — Used to control the handling and storage of two-particle density matrix elements with four virtual indices \(\Gamma(abcd)\). DISK (=0) directs the program to calculate and store all elements of \(\Gamma(abcd)\), while DIRECT (=1) tells the program to use alternative algorithms in which \(\Gamma(abcd)\) is calculated and used “on the fly”. Note that this option might be not available for all type of calculations. Type: string; Possible Values: DISK, DIRECT; Default: DISK. CFOUR_GENBAS_1 (CFOUR)¶CFOUR — This keyword applies only to Hydrogen and Helium atoms and specifies the number of contracted Gaussian functions per shell. There is usually no need to use this keyword, but it can be useful for using a subset of the functions in a particular entry in the GENBAS file, particularly for generally contracted WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENB",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:46562,Integrability,contract,contracted,46562,"s (OFF =0) or only a subset of virtual orbitals (ON =1) are used. In the latter case, the threshold for deleting virtual orbitals based on the orbital energy needs to be specified in a %frozen_virt section. Type: boolean; Default: false. CFOUR_GAMMA_ABCD (CFOUR)¶CFOUR — Used to control the handling and storage of two-particle density matrix elements with four virtual indices \(\Gamma(abcd)\). DISK (=0) directs the program to calculate and store all elements of \(\Gamma(abcd)\), while DIRECT (=1) tells the program to use alternative algorithms in which \(\Gamma(abcd)\) is calculated and used “on the fly”. Note that this option might be not available for all type of calculations. Type: string; Possible Values: DISK, DIRECT; Default: DISK. CFOUR_GENBAS_1 (CFOUR)¶CFOUR — This keyword applies only to Hydrogen and Helium atoms and specifies the number of contracted Gaussian functions per shell. There is usually no need to use this keyword, but it can be useful for using a subset of the functions in a particular entry in the GENBAS file, particularly for generally contracted WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR)¶CFOUR — Specifies the convergence criterion for geometry o",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:46649,Integrability,contract,contracted,46649,"ion. Type: boolean; Default: false. CFOUR_GAMMA_ABCD (CFOUR)¶CFOUR — Used to control the handling and storage of two-particle density matrix elements with four virtual indices \(\Gamma(abcd)\). DISK (=0) directs the program to calculate and store all elements of \(\Gamma(abcd)\), while DIRECT (=1) tells the program to use alternative algorithms in which \(\Gamma(abcd)\) is calculated and used “on the fly”. Note that this option might be not available for all type of calculations. Type: string; Possible Values: DISK, DIRECT; Default: DISK. CFOUR_GENBAS_1 (CFOUR)¶CFOUR — This keyword applies only to Hydrogen and Helium atoms and specifies the number of contracted Gaussian functions per shell. There is usually no need to use this keyword, but it can be useful for using a subset of the functions in a particular entry in the GENBAS file, particularly for generally contracted WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR)¶CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sa",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:50163,Integrability,integrat,integration,50163,"ion where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized). Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY; Default: SINGLE_POINT. CFOUR_GIAO (CFOUR)¶CFOUR — Specifies whether gauge-including atomic orbitals are used (ON) or not (OFF). Default: ON for CFOUR_PROPS =NMR and =MAGNETIC, otherwise OFF. Type: string; Possible Values: ON, OFF; Default: No Default. CFOUR_GRID (CFOUR)¶CFOUR — Keyword used to control type of grid calculation (see later section in this manual). Options are OFF (=0), no grid calculation; CARTESIAN (=1), steps are in Cartesian coordinates (which must be run with CFOUR_COORDINATES =CARTESIAN); INTERNAL (=2), steps are in Z-matrix internal coordinates; QUADRATURE (=3) steps are chosen for an integration based on Gauss-Hermite quadrature. (Default: OFF). Type: string; Possible Values: OFF, CARTESIAN, INTERNAL, QUADRATURE; Default: OFF. CFOUR_GUESS (CFOUR)¶CFOUR — Where the initial SCF eigenvectors are read from. MOREAD means to read from the disk (the JOBARC file) and CORE means to use a core Hamiltonian initial guess. If MOREAD is chosen but no disk file is present, the core Hamiltonian is used. (Default: MOREAD). Type: string; Possible Values: MOREAD, CORE; Default: MOREAD. CFOUR_HBAR (CFOUR)¶CFOUR — This keyword determines which action is taken by the linear response program. ON (=1) the full effective Hamiltonian is calculated and written to disk; OFF (=0) the “lambda” linear response equations are solved. Type: boolean; Default: false. CFOUR_HFSTABILITY (CFOUR)¶CFOUR — Control analysis of the stability of RHF, ROHF and UHF wavefunctions, as well as a possible search for",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:57731,Integrability,message,message,57731,"multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR)¶CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR)¶CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead. Type: string; Possible Values: ABORT, SWITCH, RFA; Default: ABORT. CFOUR_NEWNORM (CFOUR)¶CFOUR — All components of spherical AO’s are normalized to 1. This feature can help with numerical convergence issues if AO integrals are involved. Currently only working for single-point energy calculations. Type: boolean; Default: false. CFOUR_NONHF (CFOUR)¶CFOUR — Specifies whether the reference function used in the correlation energy calculation satisfies the (spin-orbital) HF equations or not. Usually there is no need to set this parameter (OFF = 0 and ON =1), since standard non-HF reference functions (QRHF and ROHF) set this flag automatically. Type: boolean; Default: false. CF",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:66159,Integrability,depend,dependent,66159,"rnal files (e.g., MOINTS and GAMLAM, default choice INTERNAL, =0) or on external files (EXTERNAL, =1). Type: string; Possible Values: INTERNAL, EXTERNAL; Default: INTERNAL. CFOUR_PROPS (CFOUR)¶CFOUR — Specifies whether and which molecular property is calculated. OFF (=0) means that no property is calculated, FIRST_ORDER (=1) requests computation of various one-electron first-order properties (e.g., dipole moment, quadrupole moment, electric field gradient, spin densities,etc.), SECOND_ORDER (=2, in the next release replaced by STAT_POL) computes static electric polarizabilities, DYNAMICAL (=7, in the next release replaced by DYN_POL) requests the calculation of frequency-dependent polarizabilities (note that here an additional input of the frequency is required), NMR (=5) requests the calculation of NMR chemical shifts/chemical shielding tensors (by default using GIAOs), J_FC requests the calculation of the Fermi-Contact contribution to indirect spin-spin coupling constants, J_SD the calculation of the corresponding spin-dipole contribution, and J_SO the calculation of the corresponding spin-orbit contribution to J; HYPERPOL (=22) invokes a calculation of static hyperpolarizabilities, DYN_HYP (=23) requests the calculation of frequency-dependent hyperpolarizabilities, SHG (=24) the calculation of hyperpolarizabilities related to the second-harmonic generation, OPT_REC (=25) the computation of hyperpolarizabilities related to optical rectification, VERDET (=26) the calculation of Verdet constants. Type: string; Possible Values: OFF, FIRST_ORDER, SECOND_ORDER, NMR, HYPERPOL, DYN_HYP, SHG, OPT_REC, VERDET; Default: OFF. CFOUR_QRHF_GENERAL (CFOUR)¶CFOUR — The presence of this keyword specifies that a QRHF based CC calculation, or alternatively, an SCF calculation that uses the CFOUR_QRHFGUES option, is to be performed. Type: array; Default: No Default. CFOUR_QRHF_ORBITAL (CFOUR)¶CFOUR — By default, in QRHF calculations, electrons are removed from the highest occupied orb",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:66735,Integrability,depend,dependent,66735,"rnal files (e.g., MOINTS and GAMLAM, default choice INTERNAL, =0) or on external files (EXTERNAL, =1). Type: string; Possible Values: INTERNAL, EXTERNAL; Default: INTERNAL. CFOUR_PROPS (CFOUR)¶CFOUR — Specifies whether and which molecular property is calculated. OFF (=0) means that no property is calculated, FIRST_ORDER (=1) requests computation of various one-electron first-order properties (e.g., dipole moment, quadrupole moment, electric field gradient, spin densities,etc.), SECOND_ORDER (=2, in the next release replaced by STAT_POL) computes static electric polarizabilities, DYNAMICAL (=7, in the next release replaced by DYN_POL) requests the calculation of frequency-dependent polarizabilities (note that here an additional input of the frequency is required), NMR (=5) requests the calculation of NMR chemical shifts/chemical shielding tensors (by default using GIAOs), J_FC requests the calculation of the Fermi-Contact contribution to indirect spin-spin coupling constants, J_SD the calculation of the corresponding spin-dipole contribution, and J_SO the calculation of the corresponding spin-orbit contribution to J; HYPERPOL (=22) invokes a calculation of static hyperpolarizabilities, DYN_HYP (=23) requests the calculation of frequency-dependent hyperpolarizabilities, SHG (=24) the calculation of hyperpolarizabilities related to the second-harmonic generation, OPT_REC (=25) the computation of hyperpolarizabilities related to optical rectification, VERDET (=26) the calculation of Verdet constants. Type: string; Possible Values: OFF, FIRST_ORDER, SECOND_ORDER, NMR, HYPERPOL, DYN_HYP, SHG, OPT_REC, VERDET; Default: OFF. CFOUR_QRHF_GENERAL (CFOUR)¶CFOUR — The presence of this keyword specifies that a QRHF based CC calculation, or alternatively, an SCF calculation that uses the CFOUR_QRHFGUES option, is to be performed. Type: array; Default: No Default. CFOUR_QRHF_ORBITAL (CFOUR)¶CFOUR — By default, in QRHF calculations, electrons are removed from the highest occupied orb",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:69120,Integrability,depend,depending,69120,"ERAL input on a one-to-one basis. For example, specifying CFOUR_QRHF_GENERAL =2/-4, QRHF_ORBITAL=3/2 means that an electron will be added to the third lowest virtual in symmetry block 2 and another will be removed from the second highest occupied orbital in symmetry block 4. Examples given later in this manual further illustrate the QRHF input options and may help to clarify any confusion resulting from this documentation. (Default : 1). Type: array; Default: No Default. CFOUR_QRHFGUES (CFOUR)¶CFOUR — If this keyword is set to ON (=1), then the QRHF orbitals specified by the CFOUR_QRHF_GENERAL, CFOUR_QRHF_ORBITAL and CFOUR_QRHF_SPIN (nyi?) keywords are used as a starting guess for a restarted SCF procedure. This can be an extremely useful way to converge “difficult” SCF solutions, such as those that correspond to states that are not the lowest states of a given symmetry. Note that when this option is used, the calculation that is performed is not a QRHF-CC calculation; it is instead a UHF-based or ROHF-based calculation, depending on what type of reference is specified by the CFOUR_REFERENCE keyword. The QRHF aspect of the calculation is used simply as a device to converge the orbitals. Type: boolean; Default: false. CFOUR_RAMAN_INT (CFOUR)¶CFOUR — ON (=1) requests a calculation of Raman intensities based on the geometrical derivatives of the static polarizability tensor, while DYN (=2) requests a calculation of Raman intensities based on the derivatives of the dynamical polarizability tensor. Type: string; Possible Values: ON, DYN, OFF; Default: OFF. CFOUR_RAMAN_ORB (CFOUR)¶CFOUR — Specifies whether Raman intensities are calculated with orbital relaxation with respect to the electric field perturbation (RELAXED, = 1) or without orbital relaxation (UNRELAXED, = 0). Type: string; Possible Values: RELAXED, UNRELAXED; Default: UNRELAXED. CFOUR_RDO (CFOUR)¶CFOUR — Specifies whether or not relaxed density natural orbitals are to be computed. This option only has meaning ",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:72578,Integrability,message,message,72578,"x is computed for correlated wave functions. OFF (= 0) The relaxed density will not be computed, ON (= 1) it will be computed. Type: boolean; Default: false. CFOUR_RES_RAMAN (CFOUR)¶CFOUR — This option can be used to convert an analytically calculated gradient vector to a particular normal coordinate representation. A useful application is to calculate the gradient of an electronically excited state in the normal coordinate representation of the ground electronic state, as this provides a first approximation to resonance Raman intensities (hence the name of the keyword). Calculations that use the this option require the externally supplied force constant matrix FCMFINAL, which is written to disk during the course of both analytic and finite-difference vibrational frequency calculations. No such transformation is performed if OFF (=0); while ON (=1) directs the program to evaluate the gradient and transform it to the chosen set of normal coordinates. A warning message is printed if the force constant matrix is unavailable. Type: boolean; Default: false. CFOUR_RESTART_CC (CFOUR)¶CFOUR — Offers the possibility to restart a CC calculation which stopped for various reasons, e.g. time limit, in the correlation part. However, note that a restart which is specified by ON (= 1) needs the following files of the previous unfinished calculation: JOBARC, JAINDX, MOINTS, and MOABCD. Type: boolean; Default: false. CFOUR_ROT_EVEC (CFOUR)¶CFOUR — Specifies which eigenvector of the orbital rotation Hessian is to be used to rotate the original SCF orbitals. By default, it will use that associated with the lowest eigenvalue of the totally symmetric part of the block-factored Hessian, as this choice often leads to the lowest energy SCF solution. For RHF stability checks, only those instabilities which correspond to RHF solutions will be considered. It is important to understand that following non-symmetric eigenvectors lowers the symmetry of the wavefunction and that following RHF –> UH",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:99072,Integrability,depend,depends,99072,"MAX is recommended and done by default. Type: integer; Default: 9. DDX_INCORE (DDX)¶DDX — Use an in-core version, which uses more memory, but is generally faster. Type: boolean; Default: false. DDX_LMAX (DDX)¶DDX — Maximal degree of modelling spherical harmonics. Type: integer; Default: 9. DDX_LOGFILE (DDX)¶DDX (Expert) — Logfile to dump a full trace of the DDX solver history for debugging. Type: string; Default: No Default. DDX_MAXITER (DDX)¶DDX — Maximal number of iterations used inside DDX. Type: integer; Default: 100. DDX_MODEL (DDX)¶DDX — Switch available solvation models. Type: string; Possible Values: PCM, COSMO, LPB; Default: PCM. DDX_N_LEBEDEV (DDX)¶DDX — Number of Lebedev grid points to use. (A Lebedev Points number). Type: integer; Default: 302. DDX_RADII (DDX)¶DDX — Custom cavity radii. One per atom, uses the unit of the molecule. Type: array; Default: No Default. DDX_RADII_SCALING (DDX)¶DDX — Scaling factor for cavity spheres. Ignored if RADII is set. The default depends on the radii set chosen. Type: double; Default: 1.1. DDX_RADII_SET (DDX)¶DDX — Radius set for cavity spheres. Ignored if RADII is set. Type: string; Possible Values: UFF, BONDI; Default: UFF. DDX_SHIFT (DDX)¶DDX (Expert) — Shift for characteristic function of sphere overlap. Advanced parameter, which usually does not need to be modified. Valid values are within the range [-1, 1] with -100 denoting an automatic selection of the best shift. Type: double; Default: -100.0. DDX_SOLUTE_RADIAL_POINTS (DDX)¶DDX — Number of radial points used to compute the integrals for DDX calculations. Type: integer; Default: 35. DDX_SOLUTE_SPHERICAL_POINTS (DDX)¶DDX — Number of spherical points used to compute the solute electric potential/field integrals for DDX calculations (A Lebedev Points number). Type: integer; Default: 110. DDX_SOLVATION_CONVERGENCE (DDX)¶DDX — Tolerance to which DDX linear systems are solved. Type: conv double; Default: 1e-8. DDX_SOLVENT (DDX)¶DDX — Solvent to use. Not case sensitive.",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:110429,Integrability,integrat,integration,110429,"l points. Type: integer; Default: 75. DFT_RADIAL_SCHEME (SCF)¶SCF — Radial Scheme. Type: string; Possible Values: TREUTLER, BECKE, MULTIEXP, EM, MURA; Default: TREUTLER. DFT_REMOVE_DISTANT_POINTS (SCF)¶SCF (Expert) — Remove points from the quadrature grid that exceed the spatial extend of the basis functions. Type: boolean; Default: true. DFT_SPHERICAL_POINTS (SCF)¶SCF — Number of spherical points (A Lebedev Points number). Type: integer; Default: 302. DFT_SPHERICAL_SCHEME (SCF)¶SCF — Spherical Scheme. Type: string; Possible Values: LEBEDEV; Default: LEBEDEV. DFT_V2_RHO_CUTOFF (SCF)¶SCF — Minima spin-summed density cutoff for the second derivative. Defaults to the density tolerance. Type: double; Default: -1.0. DFT_VV10_B (SCF)¶SCF — Define VV10 parameter b. Type: double; Default: 0.0. DFT_VV10_C (SCF)¶SCF — Define VV10 parameter C. Type: double; Default: 0.0. DFT_VV10_POSTSCF (SCF)¶SCF — post-scf VV10 correction. Type: boolean; Default: false. DFT_VV10_RADIAL_POINTS (SCF)¶SCF — Number of radial points for VV10 NL integration. Type: integer; Default: 50. DFT_VV10_RHO_CUTOFF (SCF)¶SCF (Expert) — Rho cutoff for VV10 NL integration. Type: double; Default: 1.e-8. DFT_VV10_SPHERICAL_POINTS (SCF)¶SCF — Number of spherical points (A Lebedev Points number) for VV10 NL integration. Type: integer; Default: 146. DFT_WEIGHTS_TOLERANCE (SCF)¶SCF (Expert) — grid weight cutoff. Disable with -1.0. Type: conv double; Default: 1.0e-15. DIAG_METHOD (DETCI)¶DETCI — This specifies which method is to be used in diagonalizing the Hamiltonian. The valid options are: RSP, to form the entire H matrix and diagonalize using libciomr to obtain all eigenvalues (n.b. requires HUGE memory); OLSEN, to use Olsen’s preconditioned inverse subspace method (1990); MITRUSHENKOV, to use a 2x2 Olsen/Davidson method; and DAVIDSON (or SEM) to use Liu’s Simultaneous Expansion Method, which is identical to the Davidson method if only one root is to be found. The SEM method is the most robust, but it also requi",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:110534,Integrability,integrat,integration,110534,"lues: TREUTLER, BECKE, MULTIEXP, EM, MURA; Default: TREUTLER. DFT_REMOVE_DISTANT_POINTS (SCF)¶SCF (Expert) — Remove points from the quadrature grid that exceed the spatial extend of the basis functions. Type: boolean; Default: true. DFT_SPHERICAL_POINTS (SCF)¶SCF — Number of spherical points (A Lebedev Points number). Type: integer; Default: 302. DFT_SPHERICAL_SCHEME (SCF)¶SCF — Spherical Scheme. Type: string; Possible Values: LEBEDEV; Default: LEBEDEV. DFT_V2_RHO_CUTOFF (SCF)¶SCF — Minima spin-summed density cutoff for the second derivative. Defaults to the density tolerance. Type: double; Default: -1.0. DFT_VV10_B (SCF)¶SCF — Define VV10 parameter b. Type: double; Default: 0.0. DFT_VV10_C (SCF)¶SCF — Define VV10 parameter C. Type: double; Default: 0.0. DFT_VV10_POSTSCF (SCF)¶SCF — post-scf VV10 correction. Type: boolean; Default: false. DFT_VV10_RADIAL_POINTS (SCF)¶SCF — Number of radial points for VV10 NL integration. Type: integer; Default: 50. DFT_VV10_RHO_CUTOFF (SCF)¶SCF (Expert) — Rho cutoff for VV10 NL integration. Type: double; Default: 1.e-8. DFT_VV10_SPHERICAL_POINTS (SCF)¶SCF — Number of spherical points (A Lebedev Points number) for VV10 NL integration. Type: integer; Default: 146. DFT_WEIGHTS_TOLERANCE (SCF)¶SCF (Expert) — grid weight cutoff. Disable with -1.0. Type: conv double; Default: 1.0e-15. DIAG_METHOD (DETCI)¶DETCI — This specifies which method is to be used in diagonalizing the Hamiltonian. The valid options are: RSP, to form the entire H matrix and diagonalize using libciomr to obtain all eigenvalues (n.b. requires HUGE memory); OLSEN, to use Olsen’s preconditioned inverse subspace method (1990); MITRUSHENKOV, to use a 2x2 Olsen/Davidson method; and DAVIDSON (or SEM) to use Liu’s Simultaneous Expansion Method, which is identical to the Davidson method if only one root is to be found. The SEM method is the most robust, but it also requires \(2NM+1\) CI vectors on disk, where \(N\) is the maximum number of iterations and \(M\) is the number of ",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:110680,Integrability,integrat,integration,110680," the quadrature grid that exceed the spatial extend of the basis functions. Type: boolean; Default: true. DFT_SPHERICAL_POINTS (SCF)¶SCF — Number of spherical points (A Lebedev Points number). Type: integer; Default: 302. DFT_SPHERICAL_SCHEME (SCF)¶SCF — Spherical Scheme. Type: string; Possible Values: LEBEDEV; Default: LEBEDEV. DFT_V2_RHO_CUTOFF (SCF)¶SCF — Minima spin-summed density cutoff for the second derivative. Defaults to the density tolerance. Type: double; Default: -1.0. DFT_VV10_B (SCF)¶SCF — Define VV10 parameter b. Type: double; Default: 0.0. DFT_VV10_C (SCF)¶SCF — Define VV10 parameter C. Type: double; Default: 0.0. DFT_VV10_POSTSCF (SCF)¶SCF — post-scf VV10 correction. Type: boolean; Default: false. DFT_VV10_RADIAL_POINTS (SCF)¶SCF — Number of radial points for VV10 NL integration. Type: integer; Default: 50. DFT_VV10_RHO_CUTOFF (SCF)¶SCF (Expert) — Rho cutoff for VV10 NL integration. Type: double; Default: 1.e-8. DFT_VV10_SPHERICAL_POINTS (SCF)¶SCF — Number of spherical points (A Lebedev Points number) for VV10 NL integration. Type: integer; Default: 146. DFT_WEIGHTS_TOLERANCE (SCF)¶SCF (Expert) — grid weight cutoff. Disable with -1.0. Type: conv double; Default: 1.0e-15. DIAG_METHOD (DETCI)¶DETCI — This specifies which method is to be used in diagonalizing the Hamiltonian. The valid options are: RSP, to form the entire H matrix and diagonalize using libciomr to obtain all eigenvalues (n.b. requires HUGE memory); OLSEN, to use Olsen’s preconditioned inverse subspace method (1990); MITRUSHENKOV, to use a 2x2 Olsen/Davidson method; and DAVIDSON (or SEM) to use Liu’s Simultaneous Expansion Method, which is identical to the Davidson method if only one root is to be found. The SEM method is the most robust, but it also requires \(2NM+1\) CI vectors on disk, where \(N\) is the maximum number of iterations and \(M\) is the number of roots. Type: string; Possible Values: RSP, DAVIDSON, SEM; Default: SEM. DIAGONAL_CCSD_T (PSIMRCC)¶PSIMRCC — Do include the dia",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:133223,Integrability,rout,routine,133223,"r; Default: 5. FCI (DETCI)¶DETCI — Do a full CI (FCI)? If TRUE, overrides the value of EX_LEVEL. Type: boolean; Default: false. FCI_STRINGS (DETCI)¶DETCI (Expert) — Do store strings specifically for FCI? (Defaults to TRUE for FCI.). Type: boolean; Default: false. FD_PROJECT (FINDIF)¶FINDIF — Do discount rotational degrees of freedom in a finite difference frequency calculation. Turned off at non-stationary geometries and in the presence of external perturbations. Type: boolean; Default: true. FILTER_GUESS (DETCI)¶DETCI (Expert) — Do invoke the FILTER_GUESS options that are used to filter out some trial vectors which may not have the appropriate phase convention between two determinants? This is useful to remove, e.g., delta states when a sigma state is desired. The user inputs two determinants (by giving the absolute alpha string number and beta string number for each), and also the desired phase between these two determinants for guesses which are to be kept. FILTER_GUESS = TRUE turns on the filtering routine. Requires additional keywords FILTER_GUESS_DET1, FILTER_GUESS_DET2, and FILTER_GUESS_SIGN. Type: boolean; Default: false. FILTER_GUESS_DET1 (DETCI)¶DETCI (Expert) — Array specifying the absolute alpha string number and beta string number for the first determinant in the filter procedure. (See FILTER_GUESS). Type: array; Default: No Default. FILTER_GUESS_DET2 (DETCI)¶DETCI (Expert) — Array specifying the absolute alpha string number and beta string number for the second determinant in the filter procedure. (See FILTER_GUESS). Type: array; Default: No Default. FILTER_GUESS_SIGN (DETCI)¶DETCI (Expert) — The required phase (1 or -1) between the two determinants specified by FILTER_GUESS_DET1 and FILTER_GUESS_DET2. Type: integer; Default: 1. FILTER_ZERO_DET (DETCI)¶DETCI (Expert) — If present, the code will try to filter out a particular determinant by setting its CI coefficient to zero. FILTER_ZERO_DET = [alphastr, betastr] specifies the absolute alpha and beta st",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:145518,Integrability,depend,dependent,145518,"n of any MAX_*_G_CONVERGENCE or RMS_*_G_CONVERGENCE options will append to overwrite the criteria set here unless FLEXIBLE_G_CONVERGENCE is also on. See Table Geometry Convergence for details. Type: string; Possible Values: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, INTERFRAG_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: QCHEM. GAUGE (ADC)¶ADC — Specifies the choice of representation of the electric dipole operator. * Acceptable values are LENGTH (default) and VELOCITY. Type: string; Possible Values: LENGTH, VELOCITY; Default: LENGTH. GAUGE (CCDENSITY)¶CCDENSITY — The type of gauge to use for properties. Type: string; Default: LENGTH. GAUGE (CCRESPONSE)¶CCRESPONSE — Specifies the choice of representation of the electric dipole operator. For polarizability, this keyword is ignored and LENGTH gauge is computed. For optical rotation and raman optical activity, this keyword is active, and acceptable values are LENGTH for the usual length-gauge representation, VELOCITY``(default) for the modified velocity-gauge representation in which the static-limit optical rotation tensor is subtracted from the frequency- dependent tensor, or ``BOTH. Note that, for optical rotation and raman optical activity calculations, only the choices of VELOCITY or BOTH will yield origin-independent results. Type: string; Possible Values: LENGTH, VELOCITY, BOTH; Default: VELOCITY. GDMA_LIMIT (GDMA)¶GDMA — The order of multipole expansion on each site. Currently limited to the same order for all sites; for more advanced usage a user-provided GDMA data file should be provided. Type: integer; Default: 2. GDMA_MULTIPOLE_UNITS (GDMA)¶GDMA — Whether to print DMA results in atomic units or SI. Type: string; Possible Values: AU; Default: AU SI. GDMA_ORIGIN (GDMA)¶GDMA — The origin (in Angstrom, expressed as an [x, y, z] array) about which the total multipoles will be computed during DMA. Useful for determining single site expansions at an arbitrary point. Type: array; Default: No Default. ",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:192926,Integrability,depend,dependent,192926,"quations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORBITAL_LEVEL_SHIFT (DCT)¶DCT (Expert) — The shift applied to the denominator in the orbital update iterations. Type: double; Default: 0.0. ORBITALS_WRITE (SCF)¶SCF — File name (case sensitive) to which to serialize Wavefunction orbital data. Type: string; Default: No Default. ORTH_TYPE (DFOCC)¶DFOCC — The algorithm for orthogonalization of MOs. Type: string; Possible Values: GS, MGS; Default: MGS. ORTH_TYPE (OCC)¶OCC — The algorithm for orthogonalization of MOs. Type: string; Possible Values: GS, MGS; Default: MGS. OS_SCALE (OCC)¶OCC — A custom scaling parameter for opposite-spin terms in OCC. The result goes to a CUSTOM SCS variable, exact name method-dependent. Type: double; Default: 1. OVERLAP_CHECK (CCEOM)¶CCEOM — Report overlaps with old excited-state wave functions, if available, and store current wave functions for later use. Type: boolean; Default: false. P (THERMO)¶THERMO — Pressure in Pascal for thermodynamic analysis. Note that 100000. is the value for IUPAC STP. Type: double; Default: 101325. PAIR_ENERGIES_PRINT (CCENERGY)¶CCENERGY — Do print MP2 and CCSD pair energies for RHF references?. Type: boolean; Default: false. PARALLEL (SCF)¶SCF (Expert) — Do run in parallel?. Type: boolean; Default: false. PARENT_SYMMETRY (GLOBALS)¶GLOBALS (Expert) — For displacements, symmetry (Schoenflies symbol) of ‘parent’ (undisplaced) reference molecule. Internal use only for finite difference. Type: string; Default: No Default. PCG_BETA_TYPE (DFOCC)¶DFOCC — CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0. Type: string; Possible Values: FLETCHER_REEVES, POLAK_RIBIERE; Default: FLETCHER_REEVES. PCG",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:196625,Integrability,integrat,integration,196625,"alse. PERTURB_CBS_COUPLING (PSIMRCC)¶PSIMRCC — Removed in 1.4. Will raise an error in 1.5. Type: boolean; Default: true. PERTURB_DIPOLE (SCF)¶SCF — An array of length three describing the magnitude (atomic units) of the dipole field in the {x,y,z} directions. Type: array; Default: No Default. PERTURB_H (SCF)¶SCF — Do perturb the Hamiltonian?. Type: boolean; Default: false. PERTURB_MAGNITUDE (DETCI)¶DETCI (Expert) — The magnitude of perturbation \(z\) in \(H = H_0 + z H_1\). Type: double; Default: 1.0. PERTURB_MAGNITUDE (SCF)¶SCF — Size of the perturbation (applies only to dipole perturbations). Deprecated - use PERTURB_DIPOLE instead. Type: double; Default: 0.0. PERTURB_WITH (SCF)¶SCF — The operator used to perturb the Hamiltonian, if requested. DIPOLE_X, DIPOLE_Y and DIPOLE_Z will be removed in favor of the DIPOLE option in the future. Type: string; Possible Values: DIPOLE, DIPOLE_X, DIPOLE_Y, DIPOLE_Z, EMBPOT, SPHERE, DX; Default: DIPOLE. PHI_POINTS (SCF)¶SCF — Number of azimuthal grid points for spherical potential integration. Type: integer; Default: 360. PK_ALL_NONSYM (SCF)¶SCF (Expert) — All densities are considered non symmetric, debug only. Type: boolean; Default: false. PK_MAX_BUCKETS (SCF)¶SCF (Expert) — Maximum numbers of batches to read PK supermatrix. Type: integer; Default: 500. PNO_CONVERGENCE (DLPNO)¶DLPNO — General convergence criteria for DLPNO methods. Type: string; Possible Values: LOOSE, NORMAL, TIGHT; Default: NORMAL. POINTS (FINDIF)¶FINDIF — Number of points for finite-differences (3 or 5). Type: integer; Default: 3. POTFILE (PE)¶PE — Name of the potential file OR contents of potential file to be written anonymously on-the-fly. Type: string; Default: potfile.pot. PPL_TYPE (DFOCC)¶DFOCC — Type of the CCSD PPL term. Type: string; Possible Values: LOW_MEM, HIGH_MEM, CD, AUTO; Default: AUTO. PRECONDITIONER (DETCI)¶DETCI — This specifies the type of preconditioner to use in the selected diagonalization method. The valid options are: DAVIDSON which ",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:202082,Integrability,rout,routing,202082,"ult: POLARIZABILITY. PROPERTY (CCRESPONSE)¶CCRESPONSE — The response property desired. Acceptable values are POLARIZABILITY (default) for dipole polarizabilities, ROTATION for specific rotations, ROA for Raman Optical Activity (ROA_TENSOR for each displacement), and ALL for all of the above. Type: string; Possible Values: POLARIZABILITY, ROTATION, ROA, ROA_TENSOR, ALL; Default: POLARIZABILITY. PT_ENERGY (PSIMRCC)¶PSIMRCC — The type of perturbation theory computation to perform. Type: string; Default: SECOND_ORDER. PUREAM (GLOBALS)¶GLOBALS — Do use pure angular momentum basis functions? If not explicitly set, the default comes from the basis set. Cfour Interface: Keyword translates into CFOUR_SPHERICAL. Type: boolean; Default: true. QC_COUPLING (DCT)¶DCT — Controls whether to include the coupling terms in the DCT electronic Hessian (for ALOGRITHM = QC with QC_TYPE = SIMULTANEOUS only). Type: boolean; Default: false. QC_MODULE (GLOBALS)¶GLOBALS — When several modules can compute the same methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC, CCT3, BUILTIN, MRCC; Default: No Default. QC_TYPE (DCT)¶DCT — Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, the cumulant is updated using the standard Jacobi algorithm. If set to SIMULTANEOUS both cumulant and orbitals are updated in a single Newton-Raphson step. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: SIMULTANEOUS. QCHF (DFOCC)¶DFOCC — Do perform a QCHF computation?. Type: boolean; Default: false. QCHF (SCF)¶SCF — Do perform a QCHF computation?. Type: boolean; Default: false. QMEFP (EFP)¶EFP (Expert) — Do turn on QM/EFP terms?. Type: boolean; Default: false. R4S (DETCI)¶DETCI (Expert) — Do restrict strings with \(e-\) in RAS IV? Useful to ",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:205341,Integrability,integrat,integration,205341,ns. In the orbital updates controls the RMS of the SCF error vector. Type: conv double; Default: 1e-10. R_CONVERGENCE (DETCI)¶DETCI — Convergence criterion for CI residual vector in the Davidson algorithm (RMS error). The default is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. R_CONVERGENCE (DFOCC)¶DFOCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (DLPNO)¶DLPNO — Residual convergence criteria for local MP2 iterations. Type: conv double; Default: 1e-6. R_CONVERGENCE (FNOCC)¶FNOCC — Convergence for the CC amplitudes. Note that convergence is met only when E_CONVERGENCE and R_CONVERGENCE are satisfied. Type: conv double; Default: 1.0e-7. R_CONVERGENCE (OCC)¶OCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-5. R_CONVERGENCE (PSIMRCC)¶PSIMRCC — Convergence criterion for amplitudes (residuals). Type: conv double; Default: 1e-9. R_POINTS (SCF)¶SCF — Number of radial grid points for spherical potential integration. Type: integer; Default: 100. RADIUS (SCF)¶SCF — Radius (bohr) of a hard-sphere external potential. Type: double; Default: 10.0. RANGED_BEND (OPTKING)¶OPTKING — Specify range for angles between atoms to be constrained to (eq. value specified) analogous to the previous FIXED_BEND. Type: string; Default: No Default. RANGED_DIHEDRAL (OPTKING)¶OPTKING — Specify range for the dihedral angles between atoms to be constrained to (eq. value specified) analogous to the previous FIXED_DIHEDRAL. Type: string; Default: No Default. RANGED_DISTANCE (OPTKING)¶OPTKING — Specify range for distances between atoms to be constrained to (eq. value specified) analogous to the previous FIXED_DISTANCE. Type: string; Default: No Default. RANGED_OOFP (OPTKING)¶OPTKING — Specify range for the out-of-plane angles between atoms to be constrained to (eq. value specified) analogous to the old FIXED_<COORD> keyword. Type: string; Default: No Default. RAS1 (GLOBALS)¶GLOBALS (E,MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:214963,Integrability,depend,dependent,214963,"ault: No Default. ROTATE_MO_ANGLE (MCSCF)¶MCSCF (Expert) — For orbital rotations after convergence, the angle (in degrees) by which to rotate. Type: double; Default: 0.0. ROTATE_MO_IRREP (MCSCF)¶MCSCF (Expert) — For orbital rotations after convergence, irrep (1-based, Cotton order) of the orbitals to rotate. Type: integer; Default: 1. ROTATE_MO_P (MCSCF)¶MCSCF (Expert) — For orbital rotations after convergence, number of the first orbital (1-based) to rotate. Type: integer; Default: 1. ROTATE_MO_Q (MCSCF)¶MCSCF (Expert) — For orbital rotations after convergence, number of the second orbital (1-based) to rotate. Type: integer; Default: 2. ROTATIONAL_SYMMETRY_NUMBER (THERMO)¶THERMO — Rotational symmetry number for thermodynamic analysis. Default is set from the full point group (e.g., Td for methane) as opposed to the computational point group (e.g., C2v for methane). Default takes into account symmetry reduction through asymmetric isotopic substitution and is unaffected by user-set symmetry on molecule, so this option is the sole way to influence the symmetry-dependent aspects of the thermodynamic analysis. Note that this factor is handled differently among quantum chemistry software. Type: integer; Default: 1. RSRFO_ALPHA_MAX (OPTKING)¶OPTKING — Absolute maximum value of RS-RFO. Type: double; Default: 1e8. RUN_CCSD (FNOCC)¶FNOCC (Expert) — do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CCTRANSORT (CCTRANSORT)¶CCTRANSORT — Use cctransort module NOTE: Turning this option off requires separate installation of ccsort and transqt2 modules, see http://github.com/psi4/psi4pasture. Type: boolean; Default: true. RUN_CEPA (FNOCC)¶FNOCC (Expert) — Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. RUN_MP2 (FNOCC)¶FNOCC (Expert) — do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3 (FNOCC)¶FNOCC (Expert) — do only evaluate mp3 energ",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:216680,Integrability,depend,dependencies,216680,"anging its value won’t have any effect on the procedure. Type: boolean; Default: false. RUN_MP2 (FNOCC)¶FNOCC (Expert) — do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3 (FNOCC)¶FNOCC (Expert) — do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4 (FNOCC)¶FNOCC (Expert) — do only evaluate mp4 energy?. Type: boolean; Default: false. S (DETCI)¶DETCI — The value of the spin quantum number \(S\) is given by this option. The default is determined by the value of the multiplicity. This is used for two things: (1) determining the phase of the redundant half of the CI vector when the \(M_s = 0\) component is used (i.e., MS0 = TRUE), and (2) making sure the guess vector has the desired value of \(\langle S^2\rangle\) (if CALC_S_SQUARED is TRUE and ICORE = 1). Type: double; Default: 0.0. S_CHOLESKY_TOLERANCE (SCF)¶SCF — Tolerance for partial Cholesky decomposition of overlap matrix. Type: conv double; Default: 1e-8. S_CUT (DLPNO)¶DLPNO (Expert) — Overlap matrix threshold for removing linear dependencies. Type: double; Default: 1e-8. S_ORTHOGONALIZATION (SCF)¶SCF — SO orthogonalization: automatic, symmetric, or canonical?. Type: string; Possible Values: AUTO, SYMMETRIC, CANONICAL, PARTIALCHOLESKY; Default: AUTO. S_TOLERANCE (SCF)¶SCF — Minimum S matrix eigenvalue to allow before linear dependencies are removed. Type: conv double; Default: 1e-7. SAD_CHOL_TOLERANCE (SCF)¶SCF (Expert) — SAD guess density decomposition threshold. Type: conv double; Default: 1e-7. SAD_D_CONVERGENCE (SCF)¶SCF — Convergence criterion for SCF density in the SAD guess, analogous to D_CONVERGENCE. Type: conv double; Default: 1e-5. SAD_E_CONVERGENCE (SCF)¶SCF — Convergence criterion for SCF energy in the SAD guess, analogous to E_CONVERGENCE. Type: conv double; Default: 1e-5. SAD_FRAC_OCC (SCF)¶SCF (Expert) — Do force an even distribution of occupations across the last partially occupied orbital shell?. Type: boolean; Default: true. SAD_MAXITER (SCF)¶SCF (Expert) — Max",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:216980,Integrability,depend,dependencies,216980," — do only evaluate mp4 energy?. Type: boolean; Default: false. S (DETCI)¶DETCI — The value of the spin quantum number \(S\) is given by this option. The default is determined by the value of the multiplicity. This is used for two things: (1) determining the phase of the redundant half of the CI vector when the \(M_s = 0\) component is used (i.e., MS0 = TRUE), and (2) making sure the guess vector has the desired value of \(\langle S^2\rangle\) (if CALC_S_SQUARED is TRUE and ICORE = 1). Type: double; Default: 0.0. S_CHOLESKY_TOLERANCE (SCF)¶SCF — Tolerance for partial Cholesky decomposition of overlap matrix. Type: conv double; Default: 1e-8. S_CUT (DLPNO)¶DLPNO (Expert) — Overlap matrix threshold for removing linear dependencies. Type: double; Default: 1e-8. S_ORTHOGONALIZATION (SCF)¶SCF — SO orthogonalization: automatic, symmetric, or canonical?. Type: string; Possible Values: AUTO, SYMMETRIC, CANONICAL, PARTIALCHOLESKY; Default: AUTO. S_TOLERANCE (SCF)¶SCF — Minimum S matrix eigenvalue to allow before linear dependencies are removed. Type: conv double; Default: 1e-7. SAD_CHOL_TOLERANCE (SCF)¶SCF (Expert) — SAD guess density decomposition threshold. Type: conv double; Default: 1e-7. SAD_D_CONVERGENCE (SCF)¶SCF — Convergence criterion for SCF density in the SAD guess, analogous to D_CONVERGENCE. Type: conv double; Default: 1e-5. SAD_E_CONVERGENCE (SCF)¶SCF — Convergence criterion for SCF energy in the SAD guess, analogous to E_CONVERGENCE. Type: conv double; Default: 1e-5. SAD_FRAC_OCC (SCF)¶SCF (Expert) — Do force an even distribution of occupations across the last partially occupied orbital shell?. Type: boolean; Default: true. SAD_MAXITER (SCF)¶SCF (Expert) — Maximum number of atomic SCF iterations within SAD. Type: integer; Default: 50. SAD_PRINT (SCF)¶SCF (Expert) — The amount of SAD information to print to the output. Type: integer; Default: 0. SAD_SCF_TYPE (SCF)¶SCF (Expert) — SCF type used for atomic calculations in SAD guess. Type: string; Possible Values: D",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:220872,Integrability,integrat,integration,220872,"exchange-dispersion for SAPT-DFT. Previous to Nov 2022, default was FIXED with Hesselmann value. NONE Use unscaled Exch-Disp2,u . FIXED Use a fixed factor SAPT_DFT_EXCH_DISP_FIXED_SCALE to scale Exch-Disp2,u . DISP Use the ratio of Disp2,r and Disp2,u to scale Exch-Disp2,u . Type: string; Possible Values: NONE, FIXED, DISP; Default: FIXED. SAPT_DFT_FUNCTIONAL (SAPT)¶SAPT (Expert) — Underlying funcitonal to use for SAPT(DFT). Type: string; Default: PBE0. SAPT_DFT_GRAC_DETERMINATION (SAPT)¶SAPT (Expert) — How is the GRAC correction determined?. Type: string; Possible Values: INPUT; Default: INPUT. SAPT_DFT_GRAC_SHIFT_A (SAPT)¶SAPT — Monomer A GRAC shift in Hartree. Type: double; Default: 0.0. SAPT_DFT_GRAC_SHIFT_B (SAPT)¶SAPT — Monomer B GRAC shift in Hartree. Type: double; Default: 0.0. SAPT_DFT_MP2_DISP_ALG (SAPT)¶SAPT (Expert) — Which MP2 Exch-Disp module to use?. Type: string; Possible Values: FISAPT, SAPT; Default: SAPT. SAPT_FDDS_DISP_LEG_LAMBDA (SAPT)¶SAPT (Expert) — Lambda shift in the space morphing for the FDDS Dispersion time integration. Type: double; Default: 0.3. SAPT_FDDS_DISP_NUM_POINTS (SAPT)¶SAPT (Expert) — Number of points in the Legendre FDDS Dispersion time integration. Type: integer; Default: 10. SAPT_FDDS_V2_RHO_CUTOFF (SAPT)¶SAPT (Expert) — Minimum rho cutoff for the in the LDA response for FDDS. Type: double; Default: 1.e-6. SAPT_LEVEL (SAPT)¶SAPT — The level of theory for SAPT. Type: string; Possible Values: SAPT0, SAPT2, SAPT2+, SAPT2+3; Default: SAPT0. SAPT_MEM_CHECK (SAPT)¶SAPT — Do force SAPT2 and higher to die if it thinks there isn’t enough memory? Turning this off is ill-advised. Type: boolean; Default: true. SAPT_MEM_FACTOR (SAPT)¶SAPT (Expert) — Proportion of memory available for the DF-MP2 three-index integral buffers used to evaluate dispersion. Type: double; Default: 0.9. SAPT_MEM_SAFETY (SAPT)¶SAPT — Memory safety. Type: double; Default: 0.9. SAPT_QUIET (SAPT)¶SAPT (Expert) — Interior option to clean up printing. Type: boolean; D",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:221016,Integrability,integrat,integration,221016,"actor SAPT_DFT_EXCH_DISP_FIXED_SCALE to scale Exch-Disp2,u . DISP Use the ratio of Disp2,r and Disp2,u to scale Exch-Disp2,u . Type: string; Possible Values: NONE, FIXED, DISP; Default: FIXED. SAPT_DFT_FUNCTIONAL (SAPT)¶SAPT (Expert) — Underlying funcitonal to use for SAPT(DFT). Type: string; Default: PBE0. SAPT_DFT_GRAC_DETERMINATION (SAPT)¶SAPT (Expert) — How is the GRAC correction determined?. Type: string; Possible Values: INPUT; Default: INPUT. SAPT_DFT_GRAC_SHIFT_A (SAPT)¶SAPT — Monomer A GRAC shift in Hartree. Type: double; Default: 0.0. SAPT_DFT_GRAC_SHIFT_B (SAPT)¶SAPT — Monomer B GRAC shift in Hartree. Type: double; Default: 0.0. SAPT_DFT_MP2_DISP_ALG (SAPT)¶SAPT (Expert) — Which MP2 Exch-Disp module to use?. Type: string; Possible Values: FISAPT, SAPT; Default: SAPT. SAPT_FDDS_DISP_LEG_LAMBDA (SAPT)¶SAPT (Expert) — Lambda shift in the space morphing for the FDDS Dispersion time integration. Type: double; Default: 0.3. SAPT_FDDS_DISP_NUM_POINTS (SAPT)¶SAPT (Expert) — Number of points in the Legendre FDDS Dispersion time integration. Type: integer; Default: 10. SAPT_FDDS_V2_RHO_CUTOFF (SAPT)¶SAPT (Expert) — Minimum rho cutoff for the in the LDA response for FDDS. Type: double; Default: 1.e-6. SAPT_LEVEL (SAPT)¶SAPT — The level of theory for SAPT. Type: string; Possible Values: SAPT0, SAPT2, SAPT2+, SAPT2+3; Default: SAPT0. SAPT_MEM_CHECK (SAPT)¶SAPT — Do force SAPT2 and higher to die if it thinks there isn’t enough memory? Turning this off is ill-advised. Type: boolean; Default: true. SAPT_MEM_FACTOR (SAPT)¶SAPT (Expert) — Proportion of memory available for the DF-MP2 three-index integral buffers used to evaluate dispersion. Type: double; Default: 0.9. SAPT_MEM_SAFETY (SAPT)¶SAPT — Memory safety. Type: double; Default: 0.9. SAPT_QUIET (SAPT)¶SAPT (Expert) — Interior option to clean up printing. Type: boolean; Default: false. SAVE_JK (SCF)¶SCF — Keep JK object for later use?. Type: boolean; Default: false. SAVE_OPTIMIZATION (OPTKING)¶OPTKING — Save OptKing’s",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:223343,Integrability,depend,depending,223343,"ing; Possible Values: NONE, EDIIS, ADIIS; Default: ADIIS. SCF_INITIAL_FINISH_DIIS_TRANSITION (SCF)¶SCF — SCF error at which to complete the linear interpolation between DIIS steps and steps of the initial SCF accelerator Value taken from Garza and Scuseria, DOI: 10.1063/1.4740249. Type: double; Default: 1.0e-4. SCF_INITIAL_START_DIIS_TRANSITION (SCF)¶SCF — SCF error at which to start the linear interpolation between DIIS steps and steps of the initial SCF accelerator. Value taken from Garza and Scuseria, DOI: 10.1063/1.4740249. Type: double; Default: 1.0e-1. SCF_MEM_SAFETY_FACTOR (SCF)¶SCF — Memory safety factor for allocating JK. Type: double; Default: 0.75. SCF_PROPERTIES (SCF)¶SCF — SCF Properties to calculate after an energy evaluation. Note, this keyword is not used for property evaluations. Type: array; Default: No Default. SCF_SUBTYPE (SCF)¶SCF (Expert) — For certain SCF_TYPE algorithms that have internal sub-algorithms depending on available memory or other hardware constraints, allow the best sub-algorithm for the molecule and conditions (AUTO ; usual mode) or forcibly select a sub-algorithm (usually only for debugging or profiling). Presently, SCF_SUBTYPE=DF, SCF_SUBTYPE=MEM_DF, and SCF_SUBTYPE=DISK_DF can have INCORE and OUT_OF_CORE selected; and SCF_TYPE=PK can have INCORE, OUT_OF_CORE, YOSHIMINE_OUT_OF_CORE, and REORDER_OUT_OF_CORE selected. Type: string; Possible Values: AUTO, INCORE, OUT_OF_CORE, YOSHIMINE_OUT_OF_CORE, REORDER_OUT_OF_CORE; Default: AUTO. SCF_TYPE (CPHF)¶CPHF — SCF Type. Type: string; Possible Values: DIRECT, DF, PK, OUT_OF_CORE, PS, INDEPENDENT, GTFOCK, DFDIRJ+SNLINK, DFDIRJ+LINK, DFDIRJ+COSX; Default: DIRECT. SCF_TYPE (GLOBALS)¶GLOBALS — What algorithm to use for the SCF computation. See Table SCF Convergence & Algorithm for default algorithm for different calculation types. Type: string; Possible Values: DIRECT, DF, MEM_DF, DISK_DF, PK, OUT_OF_CORE, CD, GTFOCK, DFDIRJ, DFDIRJ+COSX, DFDIRJ+LINK, DFDIRJ+SNLINK; Default: PK. SCHMIDT_ADD",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:232594,Integrability,depend,dependent,232594," (SCF)¶SCF — Minimum number of second-order microiterations to perform. Type: integer; Default: 1. SOSCF_PRINT (SCF)¶SCF — Do we print the SOSCF microiterations?. Type: boolean; Default: false. SOSCF_START_CONVERGENCE (SCF)¶SCF — When to start second-order SCF iterations based on gradient RMS. Type: conv double; Default: 1.0e-2. SPIN_SCALE_TYPE (OCC)¶OCC (Expert) — Controls the spin scaling set to current energy. This is set by Psi internally. Type: string; Possible Values: NONE, CUSTOM, SCS, SCSN, SCSVDW, SOS, SOSPI; Default: NONE. SS_E_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SCALE (OCC)¶OCC — A custom scaling parameter for same-spin terms in OCC. The result goes to a CUSTOM SCS variable, exact name method-dependent. Type: double; Default: 1. SS_SKIP_DIAG (CCEOM)¶CCEOM — Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT (CCEOM)¶CCEOM — SS vectors stored per root. Type: integer; Default: 5. SSAPT0_SCALE (FISAPT)¶FISAPT — Do sSAPT0 exchange-scaling with F-SAPT. Type: boolean; Default: false. STABILITY_ADD_VECTORS (DCT)¶DCT (Expert) — The number of vectors that can be added simultaneously into the subspace for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STABILITY_ANALYSIS (SCF)¶SCF — Whether to perform stability analysis after convergence. NONE prevents analysis being performed. CHECK will print out the analysis of the wavefunction stability at the end of the computation. FOLLOW will perform the analysis and, if a totally symmetric instability is found, will attempt to follow the eigenvector and re-run the computations to find a stable solution. Type: string; Possible Values: NONE, CHECK, FOLLOW",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:239225,Integrability,integrat,integration,239225,"ult: false. TDSCF_TDM_PRINT (SCF)¶SCF — Which transition dipole moments to print out: - E_TDM_LEN : electric transition dipole moments, length representation - E_TDM_VEL : electric transition dipole moments, velocity representation - M_TDM : magnetic transition dipole moments. Type: array; Default: No Default. TDSCF_TRIPLETS (SCF)¶SCF — Controls inclusion of triplet states, which is only valid for restricted references. Valid options: - none : No triplets computed (default) - also : lowest-energy triplets and singlets included, in 50-50 ratio. Note that singlets are privileged, i.e. if seeking to converge 5 states in total, 3 will be singlets and 2 will be triplets. - only : Only triplet states computed. Type: string; Possible Values: NONE, ALSO, ONLY; Default: NONE. TEST_B (OPTKING)¶OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING)¶OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. THETA_POINTS (SCF)¶SCF — Number of colatitude grid points for spherical potential integration. Type: integer; Default: 360. THICKNESS (SCF)¶SCF — Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. THREE_PARTICLE (DCT)¶DCT — Whether to compute three-particle energy correction or not. Type: string; Possible Values: NONE, PERTURBATIVE; Default: NONE. TIKHONOW_MAX (PSIMRCC)¶PSIMRCC — The cycle after which Tikhonow regularization is stopped. Set to zero to allow regularization in all iterations. Type: integer; Default: 5. TIKHONOW_OMEGA (DCT)¶DCT (Expert) — The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. TIKHONOW_OMEGA (PSIMRCC)¶PSIMRCC — The shift to apply to the denominators, {it c.f.} Taube and Bartlett, JCP, 130, 144112 (2009). Type: double; Default: 0.0. TIKHONOW_TRIPLES (PSIMRCC)¶PSIMRCC (Expert) — Do use Tikhonow regularization in (T) computations?. Type: boolean; Default: false. TILE_SZ (SCF)¶SCF (Expert) — The tile size for the distribut",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:6248,Modifiability,extend,extended,6248,"le Values: basis string; Default: No Default. BASIS_GUESS (SCF)¶SCF — Accelerate convergence by performing a preliminary SCF with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the Defaults small basis set 3-21G, pcseg-0, or def2-SV(P). Type: string; Default: FALSE. BASIS_RELATIVISTIC (GLOBALS)¶GLOBALS — Auxiliary basis set for solving Dirac equation in X2C and DKH calculations. Defaults to decontracted orbital basis. Type: string; Default: No Default. BCCD_MAXITER (CCENERGY)¶CCENERGY — Maximum number of iterations for Brueckner CCD. Type: integer; Default: 50. BENCH (GLOBALS)¶GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI)¶DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BORDER (PE)¶PE — Activate border options for sites in proximity to the QM/MM border. Type: boolean; Default: false. BORDER_N_REDIST (PE)¶PE — number of neighbor sites to redistribute to. The default (-1) redistributes to all sites which are not in the border region. Type: integer; Default: -1. BORDER_REDIST_ORDER (PE)¶PE — order from which moments are removed, e.g., if set to 1 (default), only charges are redistributed and all higher order moments are removed. Type: integer; Default: 1. BORDER_REDIST_POL (PE)¶PE — redistribute polarizabilities? If false, polarizabilities are removed (default). Type: boolean; Default: false. BORDER_RMIN (PE)¶PE — minimum radius from QM atoms to MM sites to be taken into account for removal/redistribution. Type: double; Default: 2.2. BORDER_RMIN_UNIT (PE)¶PE — unit of BORDER_RMIN, default is atomic units (AU). Type: string; Possible Values: AU, AA; Default: AU. BO",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:17220,Modifiability,config,configurations,17220,"e variational energy expression in CC computation? Experimental. Type: boolean; Default: false. CC_VECS_READ (DETCI)¶DETCI — Do import a CC vector from disk?. Type: boolean; Default: false. CC_VECS_WRITE (DETCI)¶DETCI — Do export a CC vector to disk?. Type: boolean; Default: false. CCD_E_CONVERGENCE (SAPT)¶SAPT — E converge value for CCD. Type: conv double; Default: 1e-8. CCD_MAXITER (SAPT)¶SAPT — Max CCD iterations. Type: integer; Default: 50. CCD_T_CONVERGENCE (SAPT)¶SAPT — Convergence tolerance for CCD amplitudes. Type: conv double; Default: 1e-8. CCL_ENERGY (OCC)¶OCC — Do compute CC Lambda energy? In order to this option to be valid one should use “TPDM_ABCD_TYPE = COMPUTE” option. Type: boolean; Default: false. CEPA_LEVEL (FNOCC)¶FNOCC (Expert) — Which coupled-pair method is called? This parameter is used internally by the python driver. Changing its value won’t have any effect on the procedure. Type: string; Default: CEPA(0). CEPA_NO_SINGLES (FNOCC)¶FNOCC — Flag to exclude singly excited configurations from a coupled-pair computation. Type: boolean; Default: false. CEPA_OS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.27. CEPA_SOS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.3. CEPA_SS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.13. CEPA_TYPE (OCC)¶OCC — CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0. Type: string; Possible Values: CEPA0; Default: CEPA0. CFOUR_ABCDTYPE (CFOUR)¶CFOUR — Specifies the way the \(\langle ab||cd \rangle\) molecular orbital integrals are handled in post-MP2 calculations. STANDARD (= 0) uses directly the corresponding MO integrals and thus results in an algorithm which in particular for large-scale calculations results in excessive use of disk space (storage of all \(\langle ab||cd\rangle\) integrals. AOBASIS (=2) uses an AO-based algorithm to evaluate all terms involving the \(\langle ab||cd\r",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:25955,Modifiability,enhance,enhance,25955,"the specified CC method. OFF(=0) Brueckner orbitals are not to be determined, ON (=1) they are to be determined. Type: boolean; Default: false. CFOUR_CACHE_RECS (CFOUR)¶CFOUR — The number of records held in the i/o cache used by the post-SCF programs. The maximum number of records which can be held is 100. Type: integer; Default: 10. CFOUR_CALC_LEVEL (CFOUR)¶CFOUR — Defines the level of calculation to be performed. Psi4 Interface: Keyword set from argument of computation command: CCSD if energy('c4-ccsd'), etc. See Energy (CFOUR) and Gradient (CFOUR). for all available. Type: string; Default: SCF. CFOUR_CC_CONV (CFOUR)¶CFOUR — Specifies the convergence criterion for the CC amplitude equations. The amplitudes are considered to be converged when the maximum of all (absolute) changes in the amplitudes is less than \(10^N\), where \(N\) is the value associated with the keyword. Type: integer; Default: 7. CFOUR_CC_EXPORDER (CFOUR)¶CFOUR — Specifies the maximum number of expansion vectors used in the iterative subspace to enhance convergence in the solution of the CC equations. Type: integer; Default: 5. CFOUR_CC_EXTRAPOLATION (CFOUR)¶CFOUR — Specifies the type of convergence acceleration used to solve the CC equations. RLE (=0) uses the RLE methods of Purvis and Bartlett, DIIS (=1) uses the DIIS approach by Pulay, NOJACOBI (=2) uses RLE with continuous extrapolation, OFF (=3) uses no convergence acceleration. In general, DIIS provides the best results and is recommended, while OFF often results in poor convergence and thus cannot be recommended. Type: string; Possible Values: RLE, DIIS, NOJACOBI, OFF; Default: DIIS. CFOUR_CC_MAXCYC (CFOUR)¶CFOUR — Specifies the maximum number of iterations in solving the CC amplitude equations. Type: integer; Default: 50. CFOUR_CC_PROGRAM (CFOUR)¶CFOUR — Specifies which CC program is used. The available options are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of x",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:39863,Modifiability,coupling,coupling,39863,"ry N cycles. 0 means never calculated explicitly. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly FULL_HESS_EVERY. Type: integer; Default: 0. CFOUR_EXCITATION (CFOUR)¶CFOUR — Specifies in CC calculations using mrcc the excitation level if the calculation level has been chosen as CC(n), CI(n), or CCn(n). Type: integer; Default: 0. CFOUR_EXCITE (CFOUR)¶CFOUR — Specifies the type of EOM-CC/LR-CC treatment to be performed. Available options are NONE (=0), EOMEE (=3, the EOM-CC/CC-LR approach for the treatment of excited states), EOMIP (=4, the EOM-CC/CC-LR approach for the treatment of ionized states), EOMEA (=7, the EOM-CC/CC-LR approach for the treatment of electron-attached states). Type: string; Possible Values: NONE, EOMEE, EOMIP, EOMEA; Default: NONE. CFOUR_FC_FIELD (CFOUR)¶CFOUR — Specifies the strength of a Fermi-Contact perturbation as required for finite-field calculations of spin densities and the FC contributions to indirect spin-spin coupling constants. The value must be specified as an integer and the FC strength used by the program will be the value of the keyword \(\times 10^{-6}\). The atom for which the FC perturbation is switched on is specified in the ZMAT file after the CFOUR command line and potential basis set input, as follows %spin density N with N as the number of atom (in (X5,I3) format) in the order they are written by JODA to the MOL file. Be aware that for some atoms, the calculation has to be run in lower symmetry or even without symmetry. (Default : 0). Type: integer; Default: 0. CFOUR_FD_CALCTYPE (CFOUR)¶CFOUR — Specifies the algorithm used to compute the harmonic force constants in finite-difference calculations.GRADONLY (=0) evaluates the force constants and dipole moment derivatives by numerical differentiation of analytic gradients; ENERONLY (=1) evaluates the force constants by second differences of energ",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:42513,Modifiability,adapt,adapted,42513,"hes. For example, FD_IRREP=1/3/4 means compute the frequencies of modes transforming as the first, third, and fourth irreducible representations. If a symmetry is specified for which there are no vibrational modes, the program will terminate. The labels of the irreducible representations for this keyword are not usually the same as those used in the rest of the calculation. Moreover, for some point groups, for example, those of linear molecules, the two sets of labels refer to different subgroups. There is as yet no straightforward way to determine what they will be without starting a calculation. If one runs the xjoda and then the xsymcor executables, the relevant irreducible representations will be listed. If all vibrational frequencies are desired, this keyword need not be included. Default : compute vibrational frequencies for all irreducible representations. Type: array; Default: No Default. CFOUR_FD_PROJECT (CFOUR)¶CFOUR — Specifies whether or not rotational degrees of freedoms are projected out from the symmetry-adapted coordinates in a finite difference calculations. ON (=0) uses rotationally projected coordinates, while OFF (=1) retains the rotational degrees of freedom. At a stationary point on the potential energy surface, both options will give equivalent harmonic force fields, but OFF should be used at non-stationary points. Type: string; Possible Values: ON, OFF; Default: ON. CFOUR_FD_STEPSIZE (CFOUR)¶CFOUR — Specifies the step length in mass-weighted coordinates (in \(10^{-4} amu^{1/2} bohr\) ) used in generating the force constant matrix by finite difference of Cartesian gradients. Type: integer; Default: 5. CFOUR_FD_USEGROUP (CFOUR)¶CFOUR — In finite difference calculations using the FINDIF option, this keyword specifies the point group to be used in generating the symmetry-adapted vibrational coordinates. FULL (= 0) specifies the full molecular point group, COMP (= 1) specifies the Abelian subgroup used in the electronic structure calculation. Type",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:43300,Modifiability,adapt,adapted,43300," desired, this keyword need not be included. Default : compute vibrational frequencies for all irreducible representations. Type: array; Default: No Default. CFOUR_FD_PROJECT (CFOUR)¶CFOUR — Specifies whether or not rotational degrees of freedoms are projected out from the symmetry-adapted coordinates in a finite difference calculations. ON (=0) uses rotationally projected coordinates, while OFF (=1) retains the rotational degrees of freedom. At a stationary point on the potential energy surface, both options will give equivalent harmonic force fields, but OFF should be used at non-stationary points. Type: string; Possible Values: ON, OFF; Default: ON. CFOUR_FD_STEPSIZE (CFOUR)¶CFOUR — Specifies the step length in mass-weighted coordinates (in \(10^{-4} amu^{1/2} bohr\) ) used in generating the force constant matrix by finite difference of Cartesian gradients. Type: integer; Default: 5. CFOUR_FD_USEGROUP (CFOUR)¶CFOUR — In finite difference calculations using the FINDIF option, this keyword specifies the point group to be used in generating the symmetry-adapted vibrational coordinates. FULL (= 0) specifies the full molecular point group, COMP (= 1) specifies the Abelian subgroup used in the electronic structure calculation. Type: string; Possible Values: FULL, COMP; Default: FULL. CFOUR_FILE_RECSIZ (CFOUR)¶CFOUR — This specifies the physical length (in integer words) of the records used in the word-addressable direct access files used by CFOUR. This value should always be chosen as a multiple of 512 bytes, as your local system manager certainly understands. Type: integer; Default: 2048. CFOUR_FILE_STRIPE (CFOUR)¶CFOUR — This option allows the splitting of files. Input is required in the form N1/N2/N3/N4/N5, where N1, N2, N3, N4, and N5 specify the number of files in which MOINTS, GAMLAM, MOABCD, DERINT, and DERGAM are split, respectively. Type: string; Default: 0/0/0/0/0. CFOUR_FINITE_PERTURBATION (CFOUR)¶CFOUR — Specifies the field strength for a perturbation (defin",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:49438,Modifiability,variab,variables,49438,"sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR)¶CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized). Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY; Default: SINGLE_POINT. CFOUR_GIAO (CFOUR)¶CFOUR — Specifies whether gauge-including atomic orbitals are used (ON) or not (OFF). Default: ON for CFOUR_PROPS =NMR and =MAGNETIC, otherwise OFF. Type: string; Possible Values: ON, OFF; Default: No Default. CFOUR_GRID (CFOUR)¶CFOUR — Keyword used to control type of grid calculation (see later section in this manual). Options are OFF (=0), no grid calculation; CARTESIAN (=1), steps are in Cartesian coordinates (which must be run with CFOUR_COORDINATES =CARTESIAN); INTERNAL (=2), steps are in Z-matrix internal coordinates; QUADRATURE (=3) steps are chosen for an integration based on Gauss-Hermite quadrature. (Default: OFF). Type: string; Possible Values: OFF, CARTESIAN, INTERNAL, QUADRATURE; Default: OFF. CFOUR_GUESS (CFOUR)¶CFOUR — Where the initial SCF eigenvectors are read from. MOREAD means to read from the disk (the JOBARC file",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:56985,Modifiability,coupling,coupling,56985,"); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) – Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point calculation. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly OPT_TYPE and STEP_TYPE. Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR)¶CFOUR — Specifies the type of MRCC calculation. MK performs a MR-CC calculation based on Mukherjee’s ansatz. Type: boolean; Default: false. CFOUR_MULTIPLICITY (CFOUR)¶CFOUR — Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR)¶CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR)¶CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and t",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:57080,Modifiability,coupling,coupling,57080,"equal to unity); MANR (=3) – Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point calculation. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly OPT_TYPE and STEP_TYPE. Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR)¶CFOUR — Specifies the type of MRCC calculation. MK performs a MR-CC calculation based on Mukherjee’s ansatz. Type: boolean; Default: false. CFOUR_MULTIPLICITY (CFOUR)¶CFOUR — Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR)¶CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR)¶CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and s",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:57127,Modifiability,coupling,coupling,57127,"equal to unity); MANR (=3) – Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point calculation. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly OPT_TYPE and STEP_TYPE. Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR)¶CFOUR — Specifies the type of MRCC calculation. MK performs a MR-CC calculation based on Mukherjee’s ansatz. Type: boolean; Default: false. CFOUR_MULTIPLICITY (CFOUR)¶CFOUR — Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR)¶CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR)¶CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and s",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:57269,Modifiability,coupling,coupling,57269," is available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point calculation. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly OPT_TYPE and STEP_TYPE. Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR)¶CFOUR — Specifies the type of MRCC calculation. MK performs a MR-CC calculation based on Mukherjee’s ansatz. Type: boolean; Default: false. CFOUR_MULTIPLICITY (CFOUR)¶CFOUR — Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR)¶CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR)¶CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead. Type: string; Possible Values: ABORT, SWITCH, RFA; Default: ABORT. CFOUR_NEWNORM (",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:60913,Modifiability,variab,variable,60913,"the keyword would be specified by OCCUPATION=3-1-1-0/2-1-1-0. It should be noted that the xvmol integral program orders the irreducible representations in a strange way, which most users do not perceive to be a logical order. Hence, it is usually advisable initially to run just a single point integral and HF-SCF calculation in order to determine the number and ordering of the irreducible representations. The occupation keyword may be omitted, in which case an initial orbital occupancy is determined by diagonalization of the core Hamiltonian. In many cases, HF-SCF calculations run with the core Hamiltonian guess will usually converge to the lowest energy HF-SCF solution, but this should not be blindly assumed. (Default: The occupation is given by the core Hamiltonian initial guess). Psi4 Interface: The arrays above are specified in PSI as (white space tolerant) [3,1,1,0] and [[3,1,1,0],[3,0,1,0]]. Type: array; Default: No Default. CFOUR_OMP_NUM_THREADS (CFOUR)¶CFOUR (Expert) — Sets the OMP_NUM_THREADS environment variable before calling CFOUR. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect CFOUR. Type: integer; Default: 1. CFOUR_OPEN-SHELL (CFOUR)¶CFOUR — Specifies which kind of open-shell CC treatment is employed. The default is a spin-orbital CC treatment (SPIN-ORBITAL =1) which is the only possible choice for UHF-CC schemes anyways. For ROHF-CC treatments, the possible options are beside the standard spin-orbital scheme a spin-restricted CC approach (SR-CC=3), as well as a corresponding linear approximation (which in the literature usually is referred to as partially-spin-adapted CC scheme) (PSA-CC=1). SR-CC and PSA-CC are within the CCSD approximation restricted to excitations defined by the first-order interacting space arguments. With the keywords PSA-CC_FULL (=2) or SR-CC_FULL (=6) incl",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:60963,Modifiability,variab,variable,60963,"ogram orders the irreducible representations in a strange way, which most users do not perceive to be a logical order. Hence, it is usually advisable initially to run just a single point integral and HF-SCF calculation in order to determine the number and ordering of the irreducible representations. The occupation keyword may be omitted, in which case an initial orbital occupancy is determined by diagonalization of the core Hamiltonian. In many cases, HF-SCF calculations run with the core Hamiltonian guess will usually converge to the lowest energy HF-SCF solution, but this should not be blindly assumed. (Default: The occupation is given by the core Hamiltonian initial guess). Psi4 Interface: The arrays above are specified in PSI as (white space tolerant) [3,1,1,0] and [[3,1,1,0],[3,0,1,0]]. Type: array; Default: No Default. CFOUR_OMP_NUM_THREADS (CFOUR)¶CFOUR (Expert) — Sets the OMP_NUM_THREADS environment variable before calling CFOUR. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect CFOUR. Type: integer; Default: 1. CFOUR_OPEN-SHELL (CFOUR)¶CFOUR — Specifies which kind of open-shell CC treatment is employed. The default is a spin-orbital CC treatment (SPIN-ORBITAL =1) which is the only possible choice for UHF-CC schemes anyways. For ROHF-CC treatments, the possible options are beside the standard spin-orbital scheme a spin-restricted CC approach (SR-CC=3), as well as a corresponding linear approximation (which in the literature usually is referred to as partially-spin-adapted CC scheme) (PSA-CC=1). SR-CC and PSA-CC are within the CCSD approximation restricted to excitations defined by the first-order interacting space arguments. With the keywords PSA-CC_FULL (=2) or SR-CC_FULL (=6) inclusion of the so called “pseudo-triples” beyond the first-order interacting space is also possible. The two",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:61664,Modifiability,adapt,adapted,61664,"lution, but this should not be blindly assumed. (Default: The occupation is given by the core Hamiltonian initial guess). Psi4 Interface: The arrays above are specified in PSI as (white space tolerant) [3,1,1,0] and [[3,1,1,0],[3,0,1,0]]. Type: array; Default: No Default. CFOUR_OMP_NUM_THREADS (CFOUR)¶CFOUR (Expert) — Sets the OMP_NUM_THREADS environment variable before calling CFOUR. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect CFOUR. Type: integer; Default: 1. CFOUR_OPEN-SHELL (CFOUR)¶CFOUR — Specifies which kind of open-shell CC treatment is employed. The default is a spin-orbital CC treatment (SPIN-ORBITAL =1) which is the only possible choice for UHF-CC schemes anyways. For ROHF-CC treatments, the possible options are beside the standard spin-orbital scheme a spin-restricted CC approach (SR-CC=3), as well as a corresponding linear approximation (which in the literature usually is referred to as partially-spin-adapted CC scheme) (PSA-CC=1). SR-CC and PSA-CC are within the CCSD approximation restricted to excitations defined by the first-order interacting space arguments. With the keywords PSA-CC_FULL (=2) or SR-CC_FULL (=6) inclusion of the so called “pseudo-triples” beyond the first-order interacting space is also possible. The two-determinant CC method for open-shell singlet states can be activated by TD-CC (=8). Type: string; Possible Values: SPIN-ORBITAL, SR-CC, PSA-CC_FULL, SR-CC_FULL, TD-CC; Default: SPIN-ORBITAL. CFOUR_OPT_MAXCYC (CFOUR)¶CFOUR — Identical to CFOUR_GEO_MAXCYC. Type: integer; Default: 50. CFOUR_ORBITALS (CFOUR)¶CFOUR — Specifies the type of molecular orbitals used in post-HF calculations. STANDARD (=0) requests usage of the orbitals (from a corresponding HF-SCF calculation) without any modification. These are in the case of RHF/UHF the usual canonical HF orbitals a",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:66449,Modifiability,coupling,coupling,66449,"rnal files (e.g., MOINTS and GAMLAM, default choice INTERNAL, =0) or on external files (EXTERNAL, =1). Type: string; Possible Values: INTERNAL, EXTERNAL; Default: INTERNAL. CFOUR_PROPS (CFOUR)¶CFOUR — Specifies whether and which molecular property is calculated. OFF (=0) means that no property is calculated, FIRST_ORDER (=1) requests computation of various one-electron first-order properties (e.g., dipole moment, quadrupole moment, electric field gradient, spin densities,etc.), SECOND_ORDER (=2, in the next release replaced by STAT_POL) computes static electric polarizabilities, DYNAMICAL (=7, in the next release replaced by DYN_POL) requests the calculation of frequency-dependent polarizabilities (note that here an additional input of the frequency is required), NMR (=5) requests the calculation of NMR chemical shifts/chemical shielding tensors (by default using GIAOs), J_FC requests the calculation of the Fermi-Contact contribution to indirect spin-spin coupling constants, J_SD the calculation of the corresponding spin-dipole contribution, and J_SO the calculation of the corresponding spin-orbit contribution to J; HYPERPOL (=22) invokes a calculation of static hyperpolarizabilities, DYN_HYP (=23) requests the calculation of frequency-dependent hyperpolarizabilities, SHG (=24) the calculation of hyperpolarizabilities related to the second-harmonic generation, OPT_REC (=25) the computation of hyperpolarizabilities related to optical rectification, VERDET (=26) the calculation of Verdet constants. Type: string; Possible Values: OFF, FIRST_ORDER, SECOND_ORDER, NMR, HYPERPOL, DYN_HYP, SHG, OPT_REC, VERDET; Default: OFF. CFOUR_QRHF_GENERAL (CFOUR)¶CFOUR — The presence of this keyword specifies that a QRHF based CC calculation, or alternatively, an SCF calculation that uses the CFOUR_QRHFGUES option, is to be performed. Type: array; Default: No Default. CFOUR_QRHF_ORBITAL (CFOUR)¶CFOUR — By default, in QRHF calculations, electrons are removed from the highest occupied orb",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:70455,Modifiability,config,configurational,70455,"etrical derivatives of the static polarizability tensor, while DYN (=2) requests a calculation of Raman intensities based on the derivatives of the dynamical polarizability tensor. Type: string; Possible Values: ON, DYN, OFF; Default: OFF. CFOUR_RAMAN_ORB (CFOUR)¶CFOUR — Specifies whether Raman intensities are calculated with orbital relaxation with respect to the electric field perturbation (RELAXED, = 1) or without orbital relaxation (UNRELAXED, = 0). Type: string; Possible Values: RELAXED, UNRELAXED; Default: UNRELAXED. CFOUR_RDO (CFOUR)¶CFOUR — Specifies whether or not relaxed density natural orbitals are to be computed. This option only has meaning for a correlated calculation. For =0, Do not compute. For =1, compute. Type: boolean; Default: true. CFOUR_REFERENCE (CFOUR)¶CFOUR — Specifies the type of SCF calculation to be performed. RHF (= 0) requests a restricted Hartree-Fock reference; UHF (= 1) an unrestricted Hartree-Fock reference; ROHF (= 2) a restricted open-shell Hartree-Fock calculation; TCSCF (=3) a two-configurational SCF calculation, and CASSCF (=4) a complete-active space SCF calculations (currently not implemented). Psi4 Interface: Keyword subject to translation from value of REFERENCE unless set explicitly. Type: string; Possible Values: RHF, UHF, ROHF, TCSCF, CASSCF; Default: RHF. CFOUR_RELATIVISTIC (CFOUR)¶CFOUR — Specifies the treatment of relativistic effects. The default is a non-relativistic treatment (OFF), while perturbational treatments are invoked via MVD1 (mass-velocity and 1-electron Darwin contribution), MVD2 (mass-velocity and 1- and 2-electron Darwin contribution), DPT2 (second-order direct perturbation theory approach), SF-DPT4 (scalar-relativistic part of fourth-order direct perturbation theory, DPT4 (full fourth-order DPT including spin-orbit corrections), SF-DPT6 (scalar-relativistic part of sixth-order direct perturbation theory), SFREE (spin-free treatment), X2C1E (spin-free X2C-1e treatment), or DPT (synonym with DPT2). Type:",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:76330,Modifiability,coupling,coupling,76330,"s often troublesome. Psi4 Interface: Keyword subject to translation from value of DAMPING_PERCENTAGE unless set explicitly. Type: integer; Default: 1000. CFOUR_SCF_EXPORDER (CFOUR)¶CFOUR — Specifies the number of density matrices to be used in the DIIS convergence acceleration procedure. Type: integer; Default: 6. CFOUR_SCF_EXPSTART (CFOUR)¶CFOUR — Specifies the first iteration in which the DIIS convergence acceleration procedure is applied. Type: integer; Default: 8. CFOUR_SCF_EXTRAPOLATION (CFOUR)¶CFOUR — Specifies whether or not the DIIS extrapolation is used to accelerate convergence of the SCF procedure. OFF (=0) means do not use DIIS, ON (=1) means use DIIS. Type: boolean; Default: true. CFOUR_SCF_MAXCYC (CFOUR)¶CFOUR — Specifies the maximum number of SCF iterations. Psi4 Interface: Keyword subject to translation from value of MAXITER unless set explicitly. Type: integer; Default: 150. CFOUR_SD_FIELD (CFOUR)¶CFOUR — Specifies the strength of a spin-dipole perturbation as required for finite-field calculations of the SD contributions to indirect spin-spin coupling constants. The value must be specified as an integer and the SD strength used by the program will be the value of the keyword \(\times 10^{-6}\). (Default : 0, currently not implemented). Type: integer; Default: 0. CFOUR_SPHERICAL (CFOUR)¶CFOUR — Specifies whether spherical harmonic (5d, 7f, 9g, etc.) or Cartesian (6d, 10f, 15g, etc.) basis functions are to be used. ON (= 1) uses spherical harmonics, OFF (= 0) uses Cartesians. Psi4 Interface: Keyword set according to basis design when BASIS is used instead of CFOUR_BASIS. Keyword subject to translation from value of PUREAM unless set explicitly. Type: boolean; Default: true. CFOUR_SPIN_FLIP (CFOUR)¶CFOUR — Controls whether excitation energy calculations allow for a “spin flip” which changes the \(M_s\) quantum number. Such calculations have some advantages for biradicals and are currently implemented (together with gradients) for CIS and CIS(D) calcul",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:83255,Modifiability,adapt,adapted,83255,"eloper version). Type: integer; Default: 25. CFOUR_UNITS (CFOUR)¶CFOUR — Specifies the units used for molecular geometry input. ANGSTROM (= 0) uses Angstrom units, BOHR (= 1) specifies atomic units. Psi4 Interface: Keyword set from active molecule, always ANGSTROM. Type: string; Possible Values: ANGSTROM, BOHR; Default: ANGSTROM. CFOUR_UPDATE_HESSIAN (CFOUR)¶CFOUR — Specifies whether or not the Hessian update is carried out. OFF (= 0) uses the initial Hessian (however supplied, either the default guess or a FCMINT file), ON (= 1) updates it during subsequent optimization cycles. (not in current public version). Type: boolean; Default: true. CFOUR_VIBRATION (CFOUR)¶CFOUR — Specifies whether (harmonic) vibrational frequencies are calculated or not. If the default NO (=0) is specified then no frequencies are calculated. For ANALYTIC, vibrational frequencies are determined from analytically computed second derivatives, and for FINDIF (=2) vibrational frequencies are calculated from a force field obtained by numerical differentiation of analytically evaluated gradients (or even single-point energies) using symmetry-adapted mass-weighted Cartesian coordinates. If vibrational frequencies are calculated, a normal mode analysis using the computed force-constant matrix is performed, rotationally projected frequencies are computed, infrared intensities are determined, and zero-point energies (ZPE) are evaluated. Type: string; Possible Values: NO, ANALYTIC, FINDIF, EXACT; Default: NO. CFOUR_VTRAN (CFOUR)¶CFOUR — This keyword defines what type of integral transformation is to be performed in the program xvtran. FULL/PARTIAL (=0) allows the transformation program to choose the appropriate type of transformation, while FULL (=1) requires a full integral transformation and PARTIAL (=2) means a MBPT(2)-specific transformation where the \((ab \vert cd)\) integrals are not formed. Type: string; Possible Values: FULL/PARTIAL, FULL, PARTIAL; Default: FULL/PARTIAL. CFOUR_XFIELD (CFOUR)¶C",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:90551,Modifiability,coupling,coupling,90551," Type: boolean; Default: true. COSX_PRUNING_SCHEME (SCF)¶SCF (Expert) — Pruning scheme for COSX grids. Type: string; Default: ROBUST. COSX_RADIAL_POINTS_FINAL (SCF)¶SCF — Number of radial points in final COSX grid. Type: integer; Default: 35. COSX_RADIAL_POINTS_INITIAL (SCF)¶SCF — Number of radial points in initial COSX grid. Type: integer; Default: 25. COSX_SPHERICAL_POINTS_FINAL (SCF)¶SCF — Number of spherical points in final COSX grid. Type: integer; Default: 110. COSX_SPHERICAL_POINTS_INITIAL (SCF)¶SCF — Number of spherical points in initial COSX grid. Type: integer; Default: 50. COUPLED_INDUCTION (SAPT)¶SAPT (Expert) — Solve the CPHF equations to compute coupled induction and exchange-induction. These are not available for ROHF, and the option is automatically false in this case. In all other cases, coupled induction is strongly recommended. Only turn it off if the induction energy is not going to be used. Type: boolean; Default: true. COUPLING (PSIMRCC)¶PSIMRCC — The order of coupling terms to include in MRCCSDT computations. Type: string; Possible Values: NONE, LINEAR, QUADRATIC, CUBIC; Default: CUBIC. COUPLING_TERMS (PSIMRCC)¶PSIMRCC — Do include the terms that couple the reference determinants?. Type: boolean; Default: true. COVALENT_CONNECT (OPTKING)¶OPTKING — When determining connectivity, a bond is assigned if interatomic distance is less than (this number) * sum of covalent radii. Type: double; Default: 1.3. CPHF_MEM_SAFETY_FACTOR (CPHF)¶CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. CPHF_R_CONVERGENCE (FISAPT)¶FISAPT — Convergence criterion for residual of the CPHF coefficients in the SAPT \(E_{ind,resp}^{(20)}\) term. Type: conv double; Default: 1e-8. CPHF_R_CONVERGENCE (SAPT)¶SAPT — Convergence criterion for residual of the CPHF/CPKS coefficients in the SAPT \(E_{ind,resp}^{(20)}\) term. This applies to wavefunction-based SAPT or SAPT(DFT). See CPHF_R_CONVERGENCE for fragment-partitioned or intramolecular SAPT. Type: conv ",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:92130,Modifiability,adapt,adaptive,92130,"5. CPHF_R_CONVERGENCE (FISAPT)¶FISAPT — Convergence criterion for residual of the CPHF coefficients in the SAPT \(E_{ind,resp}^{(20)}\) term. Type: conv double; Default: 1e-8. CPHF_R_CONVERGENCE (SAPT)¶SAPT — Convergence criterion for residual of the CPHF/CPKS coefficients in the SAPT \(E_{ind,resp}^{(20)}\) term. This applies to wavefunction-based SAPT or SAPT(DFT). See CPHF_R_CONVERGENCE for fragment-partitioned or intramolecular SAPT. Type: conv double; Default: 1e-8. CPHF_TASKS (CPHF)¶CPHF — Which tasks to run CPHF For * Valid choices: * -Polarizability *. Type: array; Default: No Default. CUBEPROP_BASIS_FUNCTIONS (GLOBALS)¶GLOBALS — List of basis function indices for which cube files are generated (1-based). All basis functions computed if empty. Type: array; Default: No Default. CUBEPROP_FILEPATH (GLOBALS)¶GLOBALS — Directory to which to write cube files. Default is the input file directory. Type: string; Default: No Default. CUBEPROP_ISOCONTOUR_THRESHOLD (GLOBALS)¶GLOBALS — Fraction of density captured by adaptive isocontour values. Type: double; Default: 0.85. CUBEPROP_ORBITALS (GLOBALS)¶GLOBALS — List of orbital indices for which cube files are generated (1-based, \(+\) for alpha, \(-\) for beta). All orbitals computed if empty. Type: array; Default: No Default. CUBEPROP_TASKS (GLOBALS)¶GLOBALS — Properties to compute. Valid tasks include: DENSITY - Da, Db, Dt, Ds; ESP - Dt, ESP; ORBITALS - Psi_a_N, Psi_b_N; BASIS_FUNCTIONS - Phi_N; LOL - LOLa, LOLb; ELF - ELFa, ELFb; FRONTIER_ORBITALS - Psi_a_N_HOMO + Psi_a_N_LUMO; DUAL_DESCRIPTOR - DUAL_N_HOMO-M_LUMO. Type: array; Default: No Default. CUBIC_BASIS_TOLERANCE (FISAPT)¶FISAPT (Expert) — CubicScalarGrid basis cutoff. Type: conv double; Default: 1.0e-12. CUBIC_BASIS_TOLERANCE (GLOBALS)¶GLOBALS (Expert) — CubicScalarGrid basis cutoff. Type: conv double; Default: 1.0e-12. CUBIC_BLOCK_MAX_POINTS (FISAPT)¶FISAPT (Expert) — CubicScalarGrid maximum number of grid points per evaluation block. Type: integer; Default: 1",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:109679,Modifiability,extend,extend,109679," Scheme. Type: string; Possible Values: TREUTLER, BECKE, NAIVE, STRATMANN, SBECKE; Default: TREUTLER. DFT_OMEGA (SCF)¶SCF — The DFT Range-separation parameter. Type: double; Default: 0.0. DFT_OMEGA_C (SCF)¶SCF — The DFT Correlation Range-separation parameter. Type: double; Default: 0.0. DFT_PRUNING_ALPHA (SCF)¶SCF (Expert) — Spread alpha for logarithmic pruning. Type: double; Default: 1.0. DFT_PRUNING_SCHEME (SCF)¶SCF — Select approach for pruning. Options ROBUST and TREUTLER prune based on regions (proximity to nucleus) while FLAT P_GAUSSIAN D_GAUSSIAN P_SLATER D_SLATER LOG_GAUSSIAN LOG_SLATER prune based on decaying functions (experts only!). The recommended scheme is ROBUST. Type: string; Default: NONE. DFT_RADIAL_POINTS (SCF)¶SCF — Number of radial points. Type: integer; Default: 75. DFT_RADIAL_SCHEME (SCF)¶SCF — Radial Scheme. Type: string; Possible Values: TREUTLER, BECKE, MULTIEXP, EM, MURA; Default: TREUTLER. DFT_REMOVE_DISTANT_POINTS (SCF)¶SCF (Expert) — Remove points from the quadrature grid that exceed the spatial extend of the basis functions. Type: boolean; Default: true. DFT_SPHERICAL_POINTS (SCF)¶SCF — Number of spherical points (A Lebedev Points number). Type: integer; Default: 302. DFT_SPHERICAL_SCHEME (SCF)¶SCF — Spherical Scheme. Type: string; Possible Values: LEBEDEV; Default: LEBEDEV. DFT_V2_RHO_CUTOFF (SCF)¶SCF — Minima spin-summed density cutoff for the second derivative. Defaults to the density tolerance. Type: double; Default: -1.0. DFT_VV10_B (SCF)¶SCF — Define VV10 parameter b. Type: double; Default: 0.0. DFT_VV10_C (SCF)¶SCF — Define VV10 parameter C. Type: double; Default: 0.0. DFT_VV10_POSTSCF (SCF)¶SCF — post-scf VV10 correction. Type: boolean; Default: false. DFT_VV10_RADIAL_POINTS (SCF)¶SCF — Number of radial points for VV10 NL integration. Type: integer; Default: 50. DFT_VV10_RHO_CUTOFF (SCF)¶SCF (Expert) — Rho cutoff for VV10 NL integration. Type: double; Default: 1.e-8. DFT_VV10_SPHERICAL_POINTS (SCF)¶SCF — Number of spherical poin",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:126897,Modifiability,extend,extended,126897,"gment-fragment electrostatic damping type. SCREEN is a damping formula based on screen group in the EFP potential. OVERLAP is damping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH (EFP)¶EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_IND (EFP)¶EFP — Do include polarization energy term in EFP computation? (EFP_POL c. v1.1). Type: boolean; Default: true. EFP_IND_DAMPING (EFP)¶EFP — Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. (EFP_POL_DAMPING c. v1.1). Type: string; Possible Values: TT, OFF; Default: TT. EFP_QM_ELST (EFP)¶EFP — Do include electrostatics energy term in QM/EFP computation? (QMEFP_ELST c. v1.1). Type: boolean; Default: true. EFP_QM_IND (EFP)¶EFP — Do include polarization energy term in QM/EFP computation? (QMEFP_POL c. v1.1). Type: boolean; Default: true. EKT_EA (OCC)¶OCC — Do compute virtual orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (DFOCC)¶DFOCC — Do compute ionization potentials based on the extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (OCC)¶OCC — Do compute occupied orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. ENERGY_LEVEL_SHIFT (DCT)¶DCT (Expert) — Level shift applied to the diagonal of the density-weighted Fock operator. While this shift can improve convergence, it does change the DCT energy. Type: double; Default: 0.0. ENSURE_BT_CONVERGENCE (OPTKING)¶OPTKING — Reduce step size as necessary to ensure back-transformation of internal coordinate step to cartesian coordinates. Type: boolean; Default: false. EOM_GUESS (CCEOM)¶CCEOM — Specifies a set of single-excitation guess vectors for the EOM-CC procedure. If EOM_GUESS = SINGLES, the guess will be taken from the singles-singles block of the similarity-transformed Hamiltonian, Hbar. If EOM_GUESS = DISK, guess vectors",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:127026,Modifiability,extend,extended,127026,"amping that computes charge penetration energy. Type: string; Possible Values: SCREEN, OVERLAP, OFF; Default: SCREEN. EFP_EXCH (EFP)¶EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_IND (EFP)¶EFP — Do include polarization energy term in EFP computation? (EFP_POL c. v1.1). Type: boolean; Default: true. EFP_IND_DAMPING (EFP)¶EFP — Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. (EFP_POL_DAMPING c. v1.1). Type: string; Possible Values: TT, OFF; Default: TT. EFP_QM_ELST (EFP)¶EFP — Do include electrostatics energy term in QM/EFP computation? (QMEFP_ELST c. v1.1). Type: boolean; Default: true. EFP_QM_IND (EFP)¶EFP — Do include polarization energy term in QM/EFP computation? (QMEFP_POL c. v1.1). Type: boolean; Default: true. EKT_EA (OCC)¶OCC — Do compute virtual orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (DFOCC)¶DFOCC — Do compute ionization potentials based on the extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (OCC)¶OCC — Do compute occupied orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. ENERGY_LEVEL_SHIFT (DCT)¶DCT (Expert) — Level shift applied to the diagonal of the density-weighted Fock operator. While this shift can improve convergence, it does change the DCT energy. Type: double; Default: 0.0. ENSURE_BT_CONVERGENCE (OPTKING)¶OPTKING — Reduce step size as necessary to ensure back-transformation of internal coordinate step to cartesian coordinates. Type: boolean; Default: false. EOM_GUESS (CCEOM)¶CCEOM — Specifies a set of single-excitation guess vectors for the EOM-CC procedure. If EOM_GUESS = SINGLES, the guess will be taken from the singles-singles block of the similarity-transformed Hamiltonian, Hbar. If EOM_GUESS = DISK, guess vectors from a previous computation will be read from disk. If EOM_GUESS = INPUT, guess vectors will be specified in user input. The ",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:127151,Modifiability,extend,extended,127151,"(EFP)¶EFP — Do include exchange repulsion energy term in EFP computation?. Type: boolean; Default: true. EFP_IND (EFP)¶EFP — Do include polarization energy term in EFP computation? (EFP_POL c. v1.1). Type: boolean; Default: true. EFP_IND_DAMPING (EFP)¶EFP — Fragment-fragment polarization damping type. TT is a damping formula like Tang and Toennies. (EFP_POL_DAMPING c. v1.1). Type: string; Possible Values: TT, OFF; Default: TT. EFP_QM_ELST (EFP)¶EFP — Do include electrostatics energy term in QM/EFP computation? (QMEFP_ELST c. v1.1). Type: boolean; Default: true. EFP_QM_IND (EFP)¶EFP — Do include polarization energy term in QM/EFP computation? (QMEFP_POL c. v1.1). Type: boolean; Default: true. EKT_EA (OCC)¶OCC — Do compute virtual orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (DFOCC)¶DFOCC — Do compute ionization potentials based on the extended Koopmans’ theorem?. Type: boolean; Default: false. EKT_IP (OCC)¶OCC — Do compute occupied orbital energies based on extended Koopmans’ theorem?. Type: boolean; Default: false. ENERGY_LEVEL_SHIFT (DCT)¶DCT (Expert) — Level shift applied to the diagonal of the density-weighted Fock operator. While this shift can improve convergence, it does change the DCT energy. Type: double; Default: 0.0. ENSURE_BT_CONVERGENCE (OPTKING)¶OPTKING — Reduce step size as necessary to ensure back-transformation of internal coordinate step to cartesian coordinates. Type: boolean; Default: false. EOM_GUESS (CCEOM)¶CCEOM — Specifies a set of single-excitation guess vectors for the EOM-CC procedure. If EOM_GUESS = SINGLES, the guess will be taken from the singles-singles block of the similarity-transformed Hamiltonian, Hbar. If EOM_GUESS = DISK, guess vectors from a previous computation will be read from disk. If EOM_GUESS = INPUT, guess vectors will be specified in user input. The latter method is not currently available. Type: string; Possible Values: SINGLES, DISK, INPUT; Default: SINGLES. EOM_REFERENCE ",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:135351,Modifiability,coupling,coupling,135351,"en determinant. However, this option was experimental and may not be effective. Type: array; Default: No Default. FISAPT_CHARGE_COMPLETENESS (FISAPT)¶FISAPT — Amount of fragment charge completeness to distinguish link bonds. Type: double; Default: 0.8. FISAPT_CUBE_DENSMAT (FISAPT)¶FISAPT — Generate cube files for fragment density matrices?. Type: boolean; Default: false. FISAPT_CUBE_LINKIBOS (FISAPT)¶FISAPT — Generate cube files for unsplit link orbitals (IBOs)?. Type: boolean; Default: false. FISAPT_CUBE_LINKIHOS (FISAPT)¶FISAPT — Generate cube files for split link orbitals (IHOs)?. Type: boolean; Default: false. FISAPT_DO_FSAPT (FISAPT)¶FISAPT — Do an F-SAPT analysis?. Type: boolean; Default: true. FISAPT_DO_FSAPT_DISP (FISAPT)¶FISAPT — Do F-SAPT Dispersion?. Type: boolean; Default: true. FISAPT_DO_PLOT (FISAPT)¶FISAPT — Plot a scalar-field analysis. Type: boolean; Default: false. FISAPT_EXCH_PARPERP (FISAPT)¶FISAPT — Calculate separate exchange corrections for parallel and perpendicular spin coupling of link orbitals? When false, only the averaged out exchange corrections are computed. Type: boolean; Default: false. FISAPT_FSAPT_EXCH_SCALE (FISAPT)¶FISAPT — Do F-SAPT exchange scaling? (ratio of S^infty to S^2). Type: boolean; Default: true. FISAPT_FSAPT_FILEPATH (FISAPT)¶FISAPT — Filepath to drop F-SAPT data within input file directory. Type: string; Default: fsapt/. FISAPT_FSAPT_IND_RESPONSE (FISAPT)¶FISAPT — Do F-SAPT coupled response? (not recommended). Type: boolean; Default: false. FISAPT_FSAPT_IND_SCALE (FISAPT)¶FISAPT — Do F-SAPT induction scaling? (ratio of HF induction to F-SAPT induction). Type: boolean; Default: true. FISAPT_FSSAPT_FILEPATH (FISAPT)¶FISAPT — Filepath to drop sSAPT0 exchange-scaling F-SAPT data within input file directory. Type: string; Default: s-fsapt/. FISAPT_LINK_ASSIGNMENT (FISAPT)¶FISAPT — Where do sigma links go (to C, AB, or split into IHOs)?. Type: string; Possible Values: C, AB, SAO0, SAO1, SAO2, SIAO0, SIAO1, SIAO2; Default: ",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:137265,Modifiability,flexible,flexible,137265," AB, or split into IHOs)?. Type: string; Possible Values: C, AB, SAO0, SAO1, SAO2, SIAO0, SIAO1, SIAO2; Default: C. FISAPT_LINK_ORTHO (FISAPT)¶FISAPT — Orthogonalization of link orbitals for FISAPT_LINK_ASSIGNMENT=SAOx/SIAOx Link A orthogonalized to A in whole (interacting) molecule or in the (noninteracting) fragment?. Type: string; Possible Values: FRAGMENT, WHOLE, NONE; Default: FRAGMENT. FISAPT_LINK_SELECTION (FISAPT)¶FISAPT — Specification algorithm for link bonds in ISAPT. Type: string; Possible Values: AUTOMATIC, MANUAL; Default: AUTOMATIC. FISAPT_MANUAL_LINKS (FISAPT)¶FISAPT — Manual link bond specification [[Atom1, Atom2], …]. Type: array; Default: No Default. FISAPT_MEM_SAFETY_FACTOR (FISAPT)¶FISAPT (Expert) — Memory safety factor for heavy FISAPT operations. Type: double; Default: 0.9. FISAPT_PLOT_FILEPATH (FISAPT)¶FISAPT — Filepath to drop scalar data within input file directory. Type: string; Default: plot/. FLEXIBLE_G_CONVERGENCE (OPTKING)¶OPTKING — Even if a user-defined threshold is set, allow for normal, flexible convergence criteria. Type: boolean; Default: false. FOLLOW_ROOT (DETCI)¶DETCI — The root to write out the two-particle density matrix for (the one-particle density matrices are written for all roots). Useful for a state-specific CASSCF or CI optimization on an excited state. Type: integer; Default: 0. FOLLOW_ROOT (MCSCF)¶MCSCF — Which solution of the SCF equations to find, where 1 is the SCF ground state. Type: integer; Default: 1. FOLLOW_ROOT (PSIMRCC)¶PSIMRCC — Which root of the effective hamiltonian is the target state?. Type: integer; Default: 1. FOLLOW_STEP_INCREMENT (SCF)¶SCF (Expert) — When using STABILITY_ANALYSIS = FOLLOW, the increment to modify FOLLOW_STEP_SCALE value if we end up in the same SCF solution. Type: double; Default: 0.2. FOLLOW_STEP_SCALE (SCF)¶SCF (Expert) — When using STABILITY_ANALYSIS FOLLOW, how much to scale the step along the eigenvector by. A full step of \(pi/2\) corresponds to a value of 1.0. Type: double; ",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:139029,Modifiability,config,configuration,139029,"ALE (SCF)¶SCF (Expert) — When using STABILITY_ANALYSIS FOLLOW, how much to scale the step along the eigenvector by. A full step of \(pi/2\) corresponds to a value of 1.0. Type: double; Default: 0.5. FOLLOW_VECTOR (DETCI)¶DETCI (Expert) — In following a particular root (see FOLLOW_ROOT), sometimes the root number changes. To follow a root of a particular character, one can specify a list of determinants and their coefficients, and the code will follow the root with the closest overlap. The user specifies arrays containing the absolute alpha string indices (A_i below), absolute beta indices (B_i below), and CI coefficients (C_i below) to form the desired vector. The format is FOLLOW_VECTOR = [ [[A_1, B_1], C_1], [[A_2, B_2], C_2], …]. Type: array; Default: No Default. FORCE_RESTART (CCENERGY)¶CCENERGY (Expert) — Do restart the coupled-cluster iterations even if MO phases are screwed up?. Type: boolean; Default: false. FORCE_TWOCON (MCSCF)¶MCSCF — Do attempt to force a two configuration solution by starting with CI coefficents of \(\pm \sqrt{\frac{1}{2}}\) ?. Type: boolean; Default: false. FRAC_DIIS (SCF)¶SCF — Do use DIIS extrapolation to accelerate convergence in frac?. Type: boolean; Default: true. FRAC_LOAD (SCF)¶SCF — Do recompute guess from stored orbitals?. Type: boolean; Default: false. FRAC_OCC (SCF)¶SCF — The absolute indices of occupied orbitals to fractionally occupy (+/- for alpha/beta). Type: array; Default: No Default. FRAC_RENORMALIZE (SCF)¶SCF — Do renormalize C matrices prior to writing to checkpoint?. Type: boolean; Default: true. FRAC_START (SCF)¶SCF — The iteration to start fractionally occupying orbitals (or 0 for no fractional occupation). Type: integer; Default: 0. FRAC_VAL (SCF)¶SCF — The occupations of the orbital indices specified above (\(0.0\le {\rm occ} \le 1.0\)). Type: array; Default: No Default. FRAG_MODE (OPTKING)¶OPTKING — For multi-fragment molecules, treat as single bonded molecule or via interfragment coordinates. A primary differen",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:148596,Modifiability,coupling,coupling,148596," spatial symmetry. Useful to produce broken-symmetry unrestricted solutions. Notice that this procedure is defined only for calculations in C1 symmetry. Type: boolean; Default: false. GUESS_PERSIST (SCF)¶SCF — If true, then repeat the specified guess procedure for the orbitals every time - even during a geometry optimization. Type: boolean; Default: false. GUESS_R_CONVERGENCE (DCT)¶DCT — Convergence criterion for the density cumulant and orbital guess for the variationally orbital-optimized DFT methods. Currently only available for ALGORITHM = SIMULTANEOUS. Type: conv double; Default: 1e-3. GUESS_VECTOR (DETCI)¶DETCI (Expert) — Guess vector type. Accepted values are UNIT for a unit vector guess (NUM_ROOTS and NUM_INIT_VECS must both be 1); H0_BLOCK to use eigenvectors from the H0 BLOCK submatrix (default); DFILE to use NUM_ROOTS previously converged vectors in the D file;. Type: string; Possible Values: UNIT, H0_BLOCK, DFILE; Default: H0_BLOCK. H0_BLOCK_COUPLING (DETCI)¶DETCI (Expert) — Do use coupling block in preconditioner?. Type: boolean; Default: false. H0_BLOCK_COUPLING_SIZE (DETCI)¶DETCI (Expert) — Parameters which specifies the size of the coupling block within the generalized davidson preconditioner. Type: integer; Default: 0. H0_BLOCKSIZE (DETCI)¶DETCI (Expert) — This parameter specifies the size of the H0 block of the Hamiltonian which is solved exactly. The n determinants with the lowest SCF energy are selected, and a submatrix of the Hamiltonian is formed using these determinants. This submatrix is used to accelerate convergence of the CI iterations in the OLSEN and MITRUSHENKOV iteration schemes, and also to find a good starting guess for the SEM method if GUESS_VECTOR is H0_BLOCK. Defaults to 1000. Note that the program may change the given size for Ms=0 cases (MS0 is TRUE) if it determines that the H0 block includes only one member of a pair of determinants related by time reversal symmetry. For very small block sizes, this could conceivably eliminate",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:148753,Modifiability,coupling,coupling,148753,". Type: boolean; Default: false. GUESS_PERSIST (SCF)¶SCF — If true, then repeat the specified guess procedure for the orbitals every time - even during a geometry optimization. Type: boolean; Default: false. GUESS_R_CONVERGENCE (DCT)¶DCT — Convergence criterion for the density cumulant and orbital guess for the variationally orbital-optimized DFT methods. Currently only available for ALGORITHM = SIMULTANEOUS. Type: conv double; Default: 1e-3. GUESS_VECTOR (DETCI)¶DETCI (Expert) — Guess vector type. Accepted values are UNIT for a unit vector guess (NUM_ROOTS and NUM_INIT_VECS must both be 1); H0_BLOCK to use eigenvectors from the H0 BLOCK submatrix (default); DFILE to use NUM_ROOTS previously converged vectors in the D file;. Type: string; Possible Values: UNIT, H0_BLOCK, DFILE; Default: H0_BLOCK. H0_BLOCK_COUPLING (DETCI)¶DETCI (Expert) — Do use coupling block in preconditioner?. Type: boolean; Default: false. H0_BLOCK_COUPLING_SIZE (DETCI)¶DETCI (Expert) — Parameters which specifies the size of the coupling block within the generalized davidson preconditioner. Type: integer; Default: 0. H0_BLOCKSIZE (DETCI)¶DETCI (Expert) — This parameter specifies the size of the H0 block of the Hamiltonian which is solved exactly. The n determinants with the lowest SCF energy are selected, and a submatrix of the Hamiltonian is formed using these determinants. This submatrix is used to accelerate convergence of the CI iterations in the OLSEN and MITRUSHENKOV iteration schemes, and also to find a good starting guess for the SEM method if GUESS_VECTOR is H0_BLOCK. Defaults to 1000. Note that the program may change the given size for Ms=0 cases (MS0 is TRUE) if it determines that the H0 block includes only one member of a pair of determinants related by time reversal symmetry. For very small block sizes, this could conceivably eliminate the entire H0 block; the program should print warnings if this occurs. Type: integer; Default: 1000. H0_GUESS_SIZE (DETCI)¶DETCI (Expert) — size of H",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:150262,Modifiability,coupling,coupling,150262,"o to find a good starting guess for the SEM method if GUESS_VECTOR is H0_BLOCK. Defaults to 1000. Note that the program may change the given size for Ms=0 cases (MS0 is TRUE) if it determines that the H0 block includes only one member of a pair of determinants related by time reversal symmetry. For very small block sizes, this could conceivably eliminate the entire H0 block; the program should print warnings if this occurs. Type: integer; Default: 1000. H0_GUESS_SIZE (DETCI)¶DETCI (Expert) — size of H0 block for initial guess. Type: integer; Default: 1000. H_BOND_CONNECT (OPTKING)¶OPTKING — For now, this is a general maximum distance for the definition of H-bonds. Type: double; Default: 4.3. H_GUESS_EVERY (OPTKING)¶OPTKING — Re-estimate the Hessian at every step, i.e., ignore the currently stored Hessian. Type: boolean; Default: false. H_UPDATE_DEN_TOL (OPTKING)¶OPTKING — Denominator check for hessian update. Type: conv double; Default: 1e-7. HD_AVG (DETCI)¶DETCI (Expert) — How to average H diag energies over spin coupling sets. HD_EXACT uses the exact diagonal energies which results in expansion vectors which break spin symmetry. HD_KAVE averages the diagonal energies over a spin-coupling set yielding spin pure expansion vectors. ORB_ENER employs the sum of orbital energy approximation giving spin pure expansion vectors but usually doubles the number of Davidson iterations. EVANGELISTI uses the sums and differences of orbital energies with the SCF reference energy to produce spin pure expansion vectors. LEININGER approximation which subtracts the one-electron contribution from the orbital energies, multiplies by 0.5, and adds the one-electron contribution back in, producing spin pure expansion vectors and developed by Matt Leininger and works as well as EVANGELISTI. Type: string; Possible Values: EVANGELISTI, HD_EXACT, HD_KAVE, ORB_ENER, LEININGER, Z_KAVE; Default: EVANGELISTI. HD_OTF (DETCI)¶DETCI (Expert) — Do compute the diagonal elements of the Hamiltonian matr",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:150432,Modifiability,coupling,coupling,150432,"e H0 block includes only one member of a pair of determinants related by time reversal symmetry. For very small block sizes, this could conceivably eliminate the entire H0 block; the program should print warnings if this occurs. Type: integer; Default: 1000. H0_GUESS_SIZE (DETCI)¶DETCI (Expert) — size of H0 block for initial guess. Type: integer; Default: 1000. H_BOND_CONNECT (OPTKING)¶OPTKING — For now, this is a general maximum distance for the definition of H-bonds. Type: double; Default: 4.3. H_GUESS_EVERY (OPTKING)¶OPTKING — Re-estimate the Hessian at every step, i.e., ignore the currently stored Hessian. Type: boolean; Default: false. H_UPDATE_DEN_TOL (OPTKING)¶OPTKING — Denominator check for hessian update. Type: conv double; Default: 1e-7. HD_AVG (DETCI)¶DETCI (Expert) — How to average H diag energies over spin coupling sets. HD_EXACT uses the exact diagonal energies which results in expansion vectors which break spin symmetry. HD_KAVE averages the diagonal energies over a spin-coupling set yielding spin pure expansion vectors. ORB_ENER employs the sum of orbital energy approximation giving spin pure expansion vectors but usually doubles the number of Davidson iterations. EVANGELISTI uses the sums and differences of orbital energies with the SCF reference energy to produce spin pure expansion vectors. LEININGER approximation which subtracts the one-electron contribution from the orbital energies, multiplies by 0.5, and adds the one-electron contribution back in, producing spin pure expansion vectors and developed by Matt Leininger and works as well as EVANGELISTI. Type: string; Possible Values: EVANGELISTI, HD_EXACT, HD_KAVE, ORB_ENER, LEININGER, Z_KAVE; Default: EVANGELISTI. HD_OTF (DETCI)¶DETCI (Expert) — Do compute the diagonal elements of the Hamiltonian matrix on-the-fly? Otherwise, a diagonal element vector is written to a separate file on disk. Type: boolean; Default: true. HEFF4 (PSIMRCC)¶PSIMRCC — Do include the fourth-order contributions to the eff",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:182209,Modifiability,variab,variable,182209,"OM-CC) calculation is performed automatically for the excited states. This overrides all automatic determination of method and will only work with energy(). This becomes CC/CI (option #5) in fort.56. See Table MRCC_METHOD for details. Type: integer; Default: 1. MRCC_NUM_DOUBLET_ROOTS (MRCC)¶MRCC — Number of root in case of open shell system. This becomes ndoub (option #13) int fort.56. Type: integer; Default: 0. MRCC_NUM_SINGLET_ROOTS (MRCC)¶MRCC — Number of singlet roots. (Strictly speaking number of of roots with M_s=0 and S is even.) Use this option only with closed shell reference determinant, it must be zero otherwise. This becomes nsing (option #2) in fort.56. Type: integer; Default: 1. MRCC_NUM_TRIPLET_ROOTS (MRCC)¶MRCC — Number of triplet roots. (Strictly speaking number of of roots with \(M_s=0\) and S is odd.) See notes at option MRCC_NUM_SINGLET_ROOTS. This becomes ntrip (option #3) in fort.56. Type: integer; Default: 0. MRCC_OMP_NUM_THREADS (MRCC)¶MRCC (Expert) — Sets the OMP_NUM_THREADS environment variable before calling MRCC. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect MRCC. Type: integer; Default: 1. MRCC_RESTART (MRCC)¶MRCC (Expert) — The program restarts from the previously calculated parameters if it is 1. In case it is 2, the program executes automatically the lower-level calculations of the same type consecutively (e.g., CCSD, CCSDT, and CCSDTQ if CCSDTQ is requested) and restarts each calculation from the previous one (rest=2 is available only for energy calculations). Currently, only a value of 0 and 2 are supported. This becomes rest (option #4) in fort.56. Type: integer; Default: 0. MS0 (DETCI)¶DETCI — Do use the \(M_s = 0\) component of the state? Defaults to TRUE if closed-shell and FALSE otherwise. Related to the S option. Type: boolean; Default: false. NAT_ORBS",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:182258,Modifiability,variab,variable,182258,"ination of method and will only work with energy(). This becomes CC/CI (option #5) in fort.56. See Table MRCC_METHOD for details. Type: integer; Default: 1. MRCC_NUM_DOUBLET_ROOTS (MRCC)¶MRCC — Number of root in case of open shell system. This becomes ndoub (option #13) int fort.56. Type: integer; Default: 0. MRCC_NUM_SINGLET_ROOTS (MRCC)¶MRCC — Number of singlet roots. (Strictly speaking number of of roots with M_s=0 and S is even.) Use this option only with closed shell reference determinant, it must be zero otherwise. This becomes nsing (option #2) in fort.56. Type: integer; Default: 1. MRCC_NUM_TRIPLET_ROOTS (MRCC)¶MRCC — Number of triplet roots. (Strictly speaking number of of roots with \(M_s=0\) and S is odd.) See notes at option MRCC_NUM_SINGLET_ROOTS. This becomes ntrip (option #3) in fort.56. Type: integer; Default: 0. MRCC_OMP_NUM_THREADS (MRCC)¶MRCC (Expert) — Sets the OMP_NUM_THREADS environment variable before calling MRCC. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that value is used. When set, this option overrides everything. Be aware the -n command-line option described in section Threading does not affect MRCC. Type: integer; Default: 1. MRCC_RESTART (MRCC)¶MRCC (Expert) — The program restarts from the previously calculated parameters if it is 1. In case it is 2, the program executes automatically the lower-level calculations of the same type consecutively (e.g., CCSD, CCSDT, and CCSDTQ if CCSDTQ is requested) and restarts each calculation from the previous one (rest=2 is available only for energy calculations). Currently, only a value of 0 and 2 are supported. This becomes rest (option #4) in fort.56. Type: integer; Default: 0. MS0 (DETCI)¶DETCI — Do use the \(M_s = 0\) component of the state? Defaults to TRUE if closed-shell and FALSE otherwise. Related to the S option. Type: boolean; Default: false. NAT_ORBS (DETCI)¶DETCI — Do compute natural orbitals?. Type: boolean; Default: false. NAT_ORBS (DFOCC)¶DFOCC — D",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:192898,Modifiability,variab,variable,192898,"quations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORBITAL_LEVEL_SHIFT (DCT)¶DCT (Expert) — The shift applied to the denominator in the orbital update iterations. Type: double; Default: 0.0. ORBITALS_WRITE (SCF)¶SCF — File name (case sensitive) to which to serialize Wavefunction orbital data. Type: string; Default: No Default. ORTH_TYPE (DFOCC)¶DFOCC — The algorithm for orthogonalization of MOs. Type: string; Possible Values: GS, MGS; Default: MGS. ORTH_TYPE (OCC)¶OCC — The algorithm for orthogonalization of MOs. Type: string; Possible Values: GS, MGS; Default: MGS. OS_SCALE (OCC)¶OCC — A custom scaling parameter for opposite-spin terms in OCC. The result goes to a CUSTOM SCS variable, exact name method-dependent. Type: double; Default: 1. OVERLAP_CHECK (CCEOM)¶CCEOM — Report overlaps with old excited-state wave functions, if available, and store current wave functions for later use. Type: boolean; Default: false. P (THERMO)¶THERMO — Pressure in Pascal for thermodynamic analysis. Note that 100000. is the value for IUPAC STP. Type: double; Default: 101325. PAIR_ENERGIES_PRINT (CCENERGY)¶CCENERGY — Do print MP2 and CCSD pair energies for RHF references?. Type: boolean; Default: false. PARALLEL (SCF)¶SCF (Expert) — Do run in parallel?. Type: boolean; Default: false. PARENT_SYMMETRY (GLOBALS)¶GLOBALS (Expert) — For displacements, symmetry (Schoenflies symbol) of ‘parent’ (undisplaced) reference molecule. Internal use only for finite difference. Type: string; Default: No Default. PCG_BETA_TYPE (DFOCC)¶DFOCC — CEPA type such as CEPA0, CEPA1 etc. currently we have only CEPA0. Type: string; Possible Values: FLETCHER_REEVES, POLAK_RIBIERE; Default: FLETCHER_REEVES. PCG",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:201855,Modifiability,coupling,coupling,201855,"TATION for specific rotations, ROA for Raman Optical Activity, and ALL for all of the above. Type: string; Possible Values: POLARIZABILITY, ROTATION, MAGNETIZABILITY, ROA, ALL; Default: POLARIZABILITY. PROPERTY (CCRESPONSE)¶CCRESPONSE — The response property desired. Acceptable values are POLARIZABILITY (default) for dipole polarizabilities, ROTATION for specific rotations, ROA for Raman Optical Activity (ROA_TENSOR for each displacement), and ALL for all of the above. Type: string; Possible Values: POLARIZABILITY, ROTATION, ROA, ROA_TENSOR, ALL; Default: POLARIZABILITY. PT_ENERGY (PSIMRCC)¶PSIMRCC — The type of perturbation theory computation to perform. Type: string; Default: SECOND_ORDER. PUREAM (GLOBALS)¶GLOBALS — Do use pure angular momentum basis functions? If not explicitly set, the default comes from the basis set. Cfour Interface: Keyword translates into CFOUR_SPHERICAL. Type: boolean; Default: true. QC_COUPLING (DCT)¶DCT — Controls whether to include the coupling terms in the DCT electronic Hessian (for ALOGRITHM = QC with QC_TYPE = SIMULTANEOUS only). Type: boolean; Default: false. QC_MODULE (GLOBALS)¶GLOBALS — When several modules can compute the same methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC, CCT3, BUILTIN, MRCC; Default: No Default. QC_TYPE (DCT)¶DCT — Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, the cumulant is updated using the standard Jacobi algorithm. If set to SIMULTANEOUS both cumulant and orbitals are updated in a single Newton-Raphson step. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: SIMULTANEOUS. QCHF (DFOCC)¶DFOCC — Do perform a QCHF computation?. Type: boolean; Default: false. QCHF (SCF)¶SCF — Do perform a QCHF computation?. Type: boolean; D",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:232566,Modifiability,variab,variable,232566," (SCF)¶SCF — Minimum number of second-order microiterations to perform. Type: integer; Default: 1. SOSCF_PRINT (SCF)¶SCF — Do we print the SOSCF microiterations?. Type: boolean; Default: false. SOSCF_START_CONVERGENCE (SCF)¶SCF — When to start second-order SCF iterations based on gradient RMS. Type: conv double; Default: 1.0e-2. SPIN_SCALE_TYPE (OCC)¶OCC (Expert) — Controls the spin scaling set to current energy. This is set by Psi internally. Type: string; Possible Values: NONE, CUSTOM, SCS, SCSN, SCSVDW, SOS, SOSPI; Default: NONE. SS_E_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SCALE (OCC)¶OCC — A custom scaling parameter for same-spin terms in OCC. The result goes to a CUSTOM SCS variable, exact name method-dependent. Type: double; Default: 1. SS_SKIP_DIAG (CCEOM)¶CCEOM — Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT (CCEOM)¶CCEOM — SS vectors stored per root. Type: integer; Default: 5. SSAPT0_SCALE (FISAPT)¶FISAPT — Do sSAPT0 exchange-scaling with F-SAPT. Type: boolean; Default: false. STABILITY_ADD_VECTORS (DCT)¶DCT (Expert) — The number of vectors that can be added simultaneously into the subspace for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STABILITY_ANALYSIS (SCF)¶SCF — Whether to perform stability analysis after convergence. NONE prevents analysis being performed. CHECK will print out the analysis of the wavefunction stability at the end of the computation. FOLLOW will perform the analysis and, if a totally symmetric instability is found, will attempt to follow the eigenvector and re-run the computations to find a stable solution. Type: string; Possible Values: NONE, CHECK, FOLLOW",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:242863,Modifiability,config,configurations,242863," general and has been turned on by default starting September 2020. Type: boolean; Default: true. TURN_ON_ACTV (MCSCF)¶MCSCF —. Type: integer; Default: 0. UHF_NOONS (SCF)¶SCF — The number of NOONs to print in a UHF calc. Type: string; Default: 3. UNFREEZE_DIHEDRALS (OPTKING)¶OPTKING — Unfreeze a subset of dihedrals - meant for use with freeze_all_dihedrals. Type: string; Default: No Default. UPDATE (DETCI)¶DETCI — The update or correction vector formula, either DAVIDSON (default) or OLSEN. Type: string; Possible Values: DAVIDSON, OLSEN; Default: DAVIDSON. USE_DF_INTS (FNOCC)¶FNOCC (Expert) — Use 3-index integrals to generate 4-index ERI’s? This keyword is used for testing purposes only. Changing its value will have no effect on the computation. Type: boolean; Default: false. USE_SPIN_SYM (PSIMRCC)¶PSIMRCC — Do use symmetry to map equivalent determinants onto each other, for efficiency?. Type: boolean; Default: true. USE_SPIN_SYMMETRY (PSIMRCC)¶PSIMRCC (Expert) — Whether to use spin symmetry to map equivalent configurations onto each other, for efficiency. Type: boolean; Default: true. VAL_EX_LEVEL (DETCI)¶DETCI — In a RAS CI, this is the additional excitation level for allowing electrons out of RAS I into RAS II. The maximum number of holes in RAS I is therefore EX_LEVEL + VAL_EX_LEVEL. Type: integer; Default: 0. VECS_CC3 (CCEOM)¶CCEOM — Vectors stored in CC3 computations. Type: integer; Default: 10. VECS_PER_ROOT (CCEOM)¶CCEOM — Vectors stored per root. Type: integer; Default: 12. WABEI_LOWDISK (CCHBAR)¶CCHBAR — Do use the minimal-disk algorithm for Wabei? It’s VERY slow!. Type: boolean; Default: false. WCOMBINE (SCF)¶SCF — combine omega exchange and Hartree–Fock exchange into one matrix for efficiency? Disabled until fixed. Type: boolean; Default: false. WFN (CCDENSITY)¶CCDENSITY (Expert) — Wavefunction type. Type: string; Default: SCF. WFN (CCENERGY)¶CCENERGY (Expert) — Wavefunction type. Type: string; Default: NONE. WFN (CCEOM)¶CCEOM (Expert) — Wavefunction type",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:5311,Performance,perform,performing,5311," Default: 2.5. AVG_STATES (DETCI)¶DETCI — Array giving the root numbers of the states to average in a state-averaged procedure such as SA-CASSCF. Root numbering starts from 0. Type: array; Default: No Default. AVG_WEIGHTS (DETCI)¶DETCI — Array giving the weights for each state in a state-averaged procedure. Type: array; Default: No Default. B_RAS3_MAX (DETCI)¶DETCI — maximum number of beta electrons in RAS III. Type: integer; Default: -1. BASIS (DFMP2)¶DFMP2 — Primary basis set. Type: string; Possible Values: basis string; Default: NONE. BASIS (MINTS)¶MINTS — Primary basis set. Available basis sets. Type: string; Possible Values: basis string; Default: No Default. BASIS (SAPT)¶SAPT — Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. BASIS (SCF)¶SCF — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS_GUESS (SCF)¶SCF — Accelerate convergence by performing a preliminary SCF with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the Defaults small basis set 3-21G, pcseg-0, or def2-SV(P). Type: string; Default: FALSE. BASIS_RELATIVISTIC (GLOBALS)¶GLOBALS — Auxiliary basis set for solving Dirac equation in X2C and DKH calculations. Defaults to decontracted orbital basis. Type: string; Default: No Default. BCCD_MAXITER (CCENERGY)¶CCENERGY — Maximum number of iterations for Brueckner CCD. Type: integer; Default: 50. BENCH (GLOBALS)¶GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI)¶DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BORDER (PE)¶PE — Activate borde",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:7568,Performance,optimiz,optimization,7568," sites which are not in the border region. Type: integer; Default: -1. BORDER_REDIST_ORDER (PE)¶PE — order from which moments are removed, e.g., if set to 1 (default), only charges are redistributed and all higher order moments are removed. Type: integer; Default: 1. BORDER_REDIST_POL (PE)¶PE — redistribute polarizabilities? If false, polarizabilities are removed (default). Type: boolean; Default: false. BORDER_RMIN (PE)¶PE — minimum radius from QM atoms to MM sites to be taken into account for removal/redistribution. Type: double; Default: 2.2. BORDER_RMIN_UNIT (PE)¶PE — unit of BORDER_RMIN, default is atomic units (AU). Type: string; Possible Values: AU, AA; Default: AU. BORDER_TYPE (PE)¶PE — border type, either remove or redistribute moments/polarizabilities. Type: string; Possible Values: REMOVE, REDIST; Default: REMOVE. BRIANQC_ENABLE (GLOBALS)¶GLOBALS — Whether to enable using the BrianQC GPU module. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC)¶FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY)¶CCENERGY — Convergence criterion for Brueckner orbitals. The convergence is determined based on the largest \(T_1\) amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (CCDENSITY)¶CCDENSITY — The amount of caching of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY)¶CCENERGY — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM)¶CCEO",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:7923,Performance,perform,perform,7923,"oved (default). Type: boolean; Default: false. BORDER_RMIN (PE)¶PE — minimum radius from QM atoms to MM sites to be taken into account for removal/redistribution. Type: double; Default: 2.2. BORDER_RMIN_UNIT (PE)¶PE — unit of BORDER_RMIN, default is atomic units (AU). Type: string; Possible Values: AU, AA; Default: AU. BORDER_TYPE (PE)¶PE — border type, either remove or redistribute moments/polarizabilities. Type: string; Possible Values: REMOVE, REDIST; Default: REMOVE. BRIANQC_ENABLE (GLOBALS)¶GLOBALS — Whether to enable using the BrianQC GPU module. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC)¶FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY)¶CCENERGY — Convergence criterion for Brueckner orbitals. The convergence is determined based on the largest \(T_1\) amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (CCDENSITY)¶CCDENSITY — The amount of caching of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY)¶CCENERGY — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM)¶CCEOM — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all fo",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:8142,Performance,cache,cache,8142,"AU). Type: string; Possible Values: AU, AA; Default: AU. BORDER_TYPE (PE)¶PE — border type, either remove or redistribute moments/polarizabilities. Type: string; Possible Values: REMOVE, REDIST; Default: REMOVE. BRIANQC_ENABLE (GLOBALS)¶GLOBALS — Whether to enable using the BrianQC GPU module. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC)¶FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY)¶CCENERGY — Convergence criterion for Brueckner orbitals. The convergence is determined based on the largest \(T_1\) amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (CCDENSITY)¶CCDENSITY — The amount of caching of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY)¶CCENERGY — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM)¶CCEOM — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR)¶CCHBAR — Caching level for libdpd governing the storage of amplitudes, inte",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:8204,Performance,cache,cache,8204,"AU). Type: string; Possible Values: AU, AA; Default: AU. BORDER_TYPE (PE)¶PE — border type, either remove or redistribute moments/polarizabilities. Type: string; Possible Values: REMOVE, REDIST; Default: REMOVE. BRIANQC_ENABLE (GLOBALS)¶GLOBALS — Whether to enable using the BrianQC GPU module. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC)¶FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY)¶CCENERGY — Convergence criterion for Brueckner orbitals. The convergence is determined based on the largest \(T_1\) amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (CCDENSITY)¶CCDENSITY — The amount of caching of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY)¶CCENERGY — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM)¶CCEOM — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR)¶CCHBAR — Caching level for libdpd governing the storage of amplitudes, inte",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:8474,Performance,cache,cache,8474,"le. Type: boolean; Default: false. BRUECKNER_MAXITER (FNOCC)¶FNOCC — Maximum number of iterations for Brueckner orbitals optimization. Type: integer; Default: 20. BRUECKNER_ORBS_R_CONVERGENCE (CCENERGY)¶CCENERGY — Convergence criterion for Brueckner orbitals. The convergence is determined based on the largest \(T_1\) amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (CCDENSITY)¶CCDENSITY — The amount of caching of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY)¶CCENERGY — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM)¶CCEOM — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR)¶CCHBAR — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all ",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:8685,Performance,cache,cache,8685,"bitals. The convergence is determined based on the largest \(T_1\) amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (CCDENSITY)¶CCDENSITY — The amount of caching of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY)¶CCENERGY — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM)¶CCEOM — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR)¶CCHBAR — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA)¶CCLAMBDA — Caching level for libdpd governing the storage of amplitudes",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:8747,Performance,cache,cache,8747,"bitals. The convergence is determined based on the largest \(T_1\) amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. CACHELEVEL (CCDENSITY)¶CCDENSITY — The amount of caching of data to perform. Type: integer; Default: 2. CACHELEVEL (CCENERGY)¶CCENERGY — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM)¶CCEOM — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR)¶CCHBAR — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA)¶CCLAMBDA — Caching level for libdpd governing the storage of amplitudes",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:9028,Performance,cache,cache,9028,"hing level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM)¶CCEOM — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR)¶CCHBAR — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA)¶CCLAMBDA — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all ",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:9241,Performance,cache,cache,9241," of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM)¶CCEOM — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR)¶CCHBAR — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA)¶CCLAMBDA — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE)¶CCRESPONSE — Caching level for libdpd. Type: integer; Default: 2.",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:9303,Performance,cache,cache,9303," of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCEOM)¶CCEOM — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR)¶CCHBAR — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA)¶CCLAMBDA — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE)¶CCRESPONSE — Caching level for libdpd. Type: integer; Default: 2.",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:9573,Performance,cache,cache,9573,"el for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR)¶CCHBAR — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA)¶CCLAMBDA — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE)¶CCRESPONSE — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT)¶CCTRANSORT — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCT)¶DCT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC)¶OCC — Caching level for libdpd governing the storage of amplitudes",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:9790,Performance,cache,cache,9790,"may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR)¶CCHBAR — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA)¶CCLAMBDA — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE)¶CCRESPONSE — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT)¶CCTRANSORT — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCT)¶DCT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC)¶OCC — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. Th",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:9852,Performance,cache,cache,9852,"may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCHBAR)¶CCHBAR — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA)¶CCLAMBDA — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE)¶CCRESPONSE — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT)¶CCTRANSORT — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCT)¶DCT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC)¶OCC — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. Th",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:10133,Performance,cache,cache,10133,"evel for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA)¶CCLAMBDA — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE)¶CCRESPONSE — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT)¶CCTRANSORT — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCT)¶DCT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC)¶OCC — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE (CCENERGY)¶CCENERGY — Selects the priority type for maintaining the automatic memory cach",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:10395,Performance,cache,cache,10395," memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCLAMBDA)¶CCLAMBDA — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE)¶CCRESPONSE — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT)¶CCTRANSORT — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCT)¶DCT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC)¶OCC — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE (CCENERGY)¶CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: s",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:10636,Performance,cache,cache,10636,"vel for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE)¶CCRESPONSE — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT)¶CCTRANSORT — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCT)¶DCT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC)¶OCC — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE (CCENERGY)¶CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM)¶CCEOM — The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. CALC_S_SQUARED (DETCI)¶DETCI — Do calculate the value of \(\langle S^2\rangle\) f",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:10698,Performance,cache,cache,10698,"vel for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE)¶CCRESPONSE — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT)¶CCTRANSORT — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCT)¶DCT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC)¶OCC — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE (CCENERGY)¶CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM)¶CCEOM — The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. CALC_S_SQUARED (DETCI)¶DETCI — Do calculate the value of \(\langle S^2\rangle\) f",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:10968,Performance,cache,cache,10968,"emory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE)¶CCRESPONSE — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT)¶CCTRANSORT — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCT)¶DCT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC)¶OCC — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE (CCENERGY)¶CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM)¶CCEOM — The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. CALC_S_SQUARED (DETCI)¶DETCI — Do calculate the value of \(\langle S^2\rangle\) for each root? Only supported for ICORE = 1. Type: boolean; Default: false. CANONICALIZE_ACTIVE_FAVG (MCSCF)¶MCSCF — Do canonicalize the active orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CANONICALIZE_INACTIVE_FAVG (MCSCF)¶MCSCF — Do canonicalize ",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:11097,Performance,cache,cache,11097,"\(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHELEVEL (CCRESPONSE)¶CCRESPONSE — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT)¶CCTRANSORT — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCT)¶DCT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC)¶OCC — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE (CCENERGY)¶CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM)¶CCEOM — The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. CALC_S_SQUARED (DETCI)¶DETCI — Do calculate the value of \(\langle S^2\rangle\) for each root? Only supported for ICORE = 1. Type: boolean; Default: false. CANONICALIZE_ACTIVE_FAVG (MCSCF)¶MCSCF — Do canonicalize the active orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CANONICALIZE_INACTIVE_FAVG (MCSCF)¶MCSCF — Do canonicalize the inactive (DOCC and Virtual) orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CART",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:11216,Performance,cache,cache,11216,"ESPONSE — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (CCTRANSORT)¶CCTRANSORT — Caching level for libdpd. Type: integer; Default: 2. CACHELEVEL (DCT)¶DCT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC)¶OCC — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE (CCENERGY)¶CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM)¶CCEOM — The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. CALC_S_SQUARED (DETCI)¶DETCI — Do calculate the value of \(\langle S^2\rangle\) for each root? Only supported for ICORE = 1. Type: boolean; Default: false. CANONICALIZE_ACTIVE_FAVG (MCSCF)¶MCSCF — Do canonicalize the active orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CANONICALIZE_INACTIVE_FAVG (MCSCF)¶MCSCF — Do canonicalize the inactive (DOCC and Virtual) orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CART_HESS_READ (OPTKING)¶OPTKING — Do read Cartesian Hessian? Only for experts - use FULL_HESS_EVERY instead. Type: boolean; Default:",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:11347,Performance,cache,cache,11347,"ype: integer; Default: 2. CACHELEVEL (DCT)¶DCT (Expert) — Controls how to cache quantities within the DPD library. Type: integer; Default: 2. CACHELEVEL (OCC)¶OCC — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE (CCENERGY)¶CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM)¶CCEOM — The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. CALC_S_SQUARED (DETCI)¶DETCI — Do calculate the value of \(\langle S^2\rangle\) for each root? Only supported for ICORE = 1. Type: boolean; Default: false. CANONICALIZE_ACTIVE_FAVG (MCSCF)¶MCSCF — Do canonicalize the active orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CANONICALIZE_INACTIVE_FAVG (MCSCF)¶MCSCF — Do canonicalize the inactive (DOCC and Virtual) orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CART_HESS_READ (OPTKING)¶OPTKING — Do read Cartesian Hessian? Only for experts - use FULL_HESS_EVERY instead. Type: boolean; Default: false. CARTESIAN_SYM_TOLERANCE (OPTKING)¶OPTKING — Tolerance for symmetrizing cartesian geometry between steps. Type: conv doub",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:11502,Performance,cache,cached,11502,"CC)¶OCC — Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. CACHETYPE (CCENERGY)¶CCENERGY — Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. CACHETYPE (CCEOM)¶CCEOM — The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. CALC_S_SQUARED (DETCI)¶DETCI — Do calculate the value of \(\langle S^2\rangle\) for each root? Only supported for ICORE = 1. Type: boolean; Default: false. CANONICALIZE_ACTIVE_FAVG (MCSCF)¶MCSCF — Do canonicalize the active orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CANONICALIZE_INACTIVE_FAVG (MCSCF)¶MCSCF — Do canonicalize the inactive (DOCC and Virtual) orbitals such that the average Fock matrix is diagonal?. Type: boolean; Default: false. CART_HESS_READ (OPTKING)¶OPTKING — Do read Cartesian Hessian? Only for experts - use FULL_HESS_EVERY instead. Type: boolean; Default: false. CARTESIAN_SYM_TOLERANCE (OPTKING)¶OPTKING — Tolerance for symmetrizing cartesian geometry between steps. Type: conv double; Default: 1e-7. CC (DETCI)¶DETCI — Do coupled-cluster computation?. Type: boolean; Default: false. CC3_FOLLOW_ROOT (CCEOM)¶CCEOM — Do turn on root foll",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:25138,Performance,cache,cache,25138,"degenerate doublet-Pi states and used in conjunction with SOPERT. Type: boolean; Default: false. CFOUR_BASIS (CFOUR)¶CFOUR — Specifies the AO basis used in the calculation. One can either specify a basis known to CFOUR or via BASIS=SPECIAL (=0) requests an arbitrary basis (see non-standard basis-set input). However, the latter must be available in the supplied GENBAS file. As standard basis sets, currently the following are available. Psi4 Interface: Recommended to use instead BASIS for larger basis set selection and greater flexibility. When BASIS used, CFOUR_SPHERICAL is set appropriately. Type: string; Default: SPECIAL. CFOUR_BRUCK_CONV (CFOUR)¶CFOUR — experimental use. Type: integer; Default: 4. CFOUR_BRUECKNER (CFOUR)¶CFOUR — Specifies whether Brueckner orbitals are to be determined for the specified CC method. OFF(=0) Brueckner orbitals are not to be determined, ON (=1) they are to be determined. Type: boolean; Default: false. CFOUR_CACHE_RECS (CFOUR)¶CFOUR — The number of records held in the i/o cache used by the post-SCF programs. The maximum number of records which can be held is 100. Type: integer; Default: 10. CFOUR_CALC_LEVEL (CFOUR)¶CFOUR — Defines the level of calculation to be performed. Psi4 Interface: Keyword set from argument of computation command: CCSD if energy('c4-ccsd'), etc. See Energy (CFOUR) and Gradient (CFOUR). for all available. Type: string; Default: SCF. CFOUR_CC_CONV (CFOUR)¶CFOUR — Specifies the convergence criterion for the CC amplitude equations. The amplitudes are considered to be converged when the maximum of all (absolute) changes in the amplitudes is less than \(10^N\), where \(N\) is the value associated with the keyword. Type: integer; Default: 7. CFOUR_CC_EXPORDER (CFOUR)¶CFOUR — Specifies the maximum number of expansion vectors used in the iterative subspace to enhance convergence in the solution of the CC equations. Type: integer; Default: 5. CFOUR_CC_EXTRAPOLATION (CFOUR)¶CFOUR — Specifies the type of convergence accelera",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:25331,Performance,perform,performed,25331,"n either specify a basis known to CFOUR or via BASIS=SPECIAL (=0) requests an arbitrary basis (see non-standard basis-set input). However, the latter must be available in the supplied GENBAS file. As standard basis sets, currently the following are available. Psi4 Interface: Recommended to use instead BASIS for larger basis set selection and greater flexibility. When BASIS used, CFOUR_SPHERICAL is set appropriately. Type: string; Default: SPECIAL. CFOUR_BRUCK_CONV (CFOUR)¶CFOUR — experimental use. Type: integer; Default: 4. CFOUR_BRUECKNER (CFOUR)¶CFOUR — Specifies whether Brueckner orbitals are to be determined for the specified CC method. OFF(=0) Brueckner orbitals are not to be determined, ON (=1) they are to be determined. Type: boolean; Default: false. CFOUR_CACHE_RECS (CFOUR)¶CFOUR — The number of records held in the i/o cache used by the post-SCF programs. The maximum number of records which can be held is 100. Type: integer; Default: 10. CFOUR_CALC_LEVEL (CFOUR)¶CFOUR — Defines the level of calculation to be performed. Psi4 Interface: Keyword set from argument of computation command: CCSD if energy('c4-ccsd'), etc. See Energy (CFOUR) and Gradient (CFOUR). for all available. Type: string; Default: SCF. CFOUR_CC_CONV (CFOUR)¶CFOUR — Specifies the convergence criterion for the CC amplitude equations. The amplitudes are considered to be converged when the maximum of all (absolute) changes in the amplitudes is less than \(10^N\), where \(N\) is the value associated with the keyword. Type: integer; Default: 7. CFOUR_CC_EXPORDER (CFOUR)¶CFOUR — Specifies the maximum number of expansion vectors used in the iterative subspace to enhance convergence in the solution of the CC equations. Type: integer; Default: 5. CFOUR_CC_EXTRAPOLATION (CFOUR)¶CFOUR — Specifies the type of convergence acceleration used to solve the CC equations. RLE (=0) uses the RLE methods of Purvis and Bartlett, DIIS (=1) uses the DIIS approach by Pulay, NOJACOBI (=2) uses RLE with continuous extrapo",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:27018,Performance,perform,performance,27018,"FOUR_CC_EXTRAPOLATION (CFOUR)¶CFOUR — Specifies the type of convergence acceleration used to solve the CC equations. RLE (=0) uses the RLE methods of Purvis and Bartlett, DIIS (=1) uses the DIIS approach by Pulay, NOJACOBI (=2) uses RLE with continuous extrapolation, OFF (=3) uses no convergence acceleration. In general, DIIS provides the best results and is recommended, while OFF often results in poor convergence and thus cannot be recommended. Type: string; Possible Values: RLE, DIIS, NOJACOBI, OFF; Default: DIIS. CFOUR_CC_MAXCYC (CFOUR)¶CFOUR — Specifies the maximum number of iterations in solving the CC amplitude equations. Type: integer; Default: 50. CFOUR_CC_PROGRAM (CFOUR)¶CFOUR — Specifies which CC program is used. The available options are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL, reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, NCC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR)¶CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from act",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:27392,Performance,optimiz,optimization,27392," OFF often results in poor convergence and thus cannot be recommended. Type: string; Possible Values: RLE, DIIS, NOJACOBI, OFF; Default: DIIS. CFOUR_CC_MAXCYC (CFOUR)¶CFOUR — Specifies the maximum number of iterations in solving the CC amplitude equations. Type: integer; Default: 50. CFOUR_CC_PROGRAM (CFOUR)¶CFOUR — Specifies which CC program is used. The available options are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL, reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, NCC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR)¶CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 0. CFOUR_CIS_CONV (CFOUR)¶CFOUR — Specifies the convergence threshold as \(10^{-N}\) for CIS calculations. Type: integer; Default: 5. CFOUR_CONTINUUM (CFOUR)¶CFOUR — Signifies that one or more “continuum” orbitals should be added to the calculation. VIRTUAL and DVIRTUAL specify one or two orbital which should be initially unoccupied (in the",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:29654,Performance,optimiz,optimizations,29654,"action scheme used by the integral and integral derivative program. SEGMENTED (=0) uses a segmented contraction scheme; GENERAL (=1) uses a general contraction scheme, and UNCONTRACTED (=2) uses the corresponding uncontracted sets. Note that even for truly segmented basis sets, the integral programs run significantly faster in the GENERAL mode. Type: string; Possible Values: SEGMENTED, GENERAL, UNCONTRACTED; Default: GENERAL. CFOUR_CONVERGENCE (CFOUR)¶CFOUR — Identical to CFOUR_GEO_CONV. Type: integer; Default: 4. CFOUR_COORDINATES (CFOUR)¶CFOUR — Specifies the type of coordinates used in the input file ZMAT. Value INTERNAL (=0) means that the geometry is supplied in the usual Z-matrix format, while CARTESIAN (=1) means that the geometry is given in Cartesian coordinates. A third option is XYZINT (=2) for which a Z-matrix connectivity is defined, but with values of the internal coordinates defined implicitly by supplying Cartesian coordinates. Note that geometry optimizations are currently only possible for INTERNAL and XYZ2INT. Psi4 Interface: Keyword set from active molecule, always CARTESIAN. Above restrictions on geometry optimizations no longer apply. Type: string; Possible Values: INTERNAL, CARTESIAN, XYZINT; Default: INTERNAL. CFOUR_CORE_ORBITALS (CFOUR)¶CFOUR — Specifies the core orbitals used in a TCSCF calculation and has to be used in combination with the keyword CFOUR_ACTIVE_ORBI. The core orbitals are specified by either NIRREP or 2*NIRREP integers specifying the number of core orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION. Type: array; Default: No Default. CFOUR_CPHF_CONVER (CFOUR)¶CFOUR — Specifies the convergence criterion for the iterative solution of the CPHF and Z-vector equations. The solutions are considered to be converged when the res",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:29821,Performance,optimiz,optimizations,29821,"eral contraction scheme, and UNCONTRACTED (=2) uses the corresponding uncontracted sets. Note that even for truly segmented basis sets, the integral programs run significantly faster in the GENERAL mode. Type: string; Possible Values: SEGMENTED, GENERAL, UNCONTRACTED; Default: GENERAL. CFOUR_CONVERGENCE (CFOUR)¶CFOUR — Identical to CFOUR_GEO_CONV. Type: integer; Default: 4. CFOUR_COORDINATES (CFOUR)¶CFOUR — Specifies the type of coordinates used in the input file ZMAT. Value INTERNAL (=0) means that the geometry is supplied in the usual Z-matrix format, while CARTESIAN (=1) means that the geometry is given in Cartesian coordinates. A third option is XYZINT (=2) for which a Z-matrix connectivity is defined, but with values of the internal coordinates defined implicitly by supplying Cartesian coordinates. Note that geometry optimizations are currently only possible for INTERNAL and XYZ2INT. Psi4 Interface: Keyword set from active molecule, always CARTESIAN. Above restrictions on geometry optimizations no longer apply. Type: string; Possible Values: INTERNAL, CARTESIAN, XYZINT; Default: INTERNAL. CFOUR_CORE_ORBITALS (CFOUR)¶CFOUR — Specifies the core orbitals used in a TCSCF calculation and has to be used in combination with the keyword CFOUR_ACTIVE_ORBI. The core orbitals are specified by either NIRREP or 2*NIRREP integers specifying the number of core orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION. Type: array; Default: No Default. CFOUR_CPHF_CONVER (CFOUR)¶CFOUR — Specifies the convergence criterion for the iterative solution of the CPHF and Z-vector equations. The solutions are considered to be converged when the residual norm of the error vector falls below \(10^N\). Type: integer; Default: 12. CFOUR_CPHF_MAXCYC (CFOUR)¶CFOUR — Specifies the maximum numbe",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:31186,Performance,perform,performed,31186,"or 2*NIRREP integers specifying the number of core orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION. Type: array; Default: No Default. CFOUR_CPHF_CONVER (CFOUR)¶CFOUR — Specifies the convergence criterion for the iterative solution of the CPHF and Z-vector equations. The solutions are considered to be converged when the residual norm of the error vector falls below \(10^N\). Type: integer; Default: 12. CFOUR_CPHF_MAXCYC (CFOUR)¶CFOUR — Specifies the maximum number of cycles allowed for the solution of the CPHF- and/or Z-vector equations. Type: integer; Default: 64. CFOUR_CURVILINEAR (CFOUR)¶CFOUR — Specifies whether or not Hessian matrix is transformed (nonlinearly) to curvilinear internal coordinates. A value of 0 (or OFF) turns the transformation off if the analytic force constants are not available, while it is always performed if CURVILINEAR=1 (or ON). Values higher than 1 (or NO) unconditionally turn the transformation off.(Default: ON if analytic Hessian is available, OFF otherwise). Type: boolean; Default: true. CFOUR_DBOC (CFOUR)¶CFOUR — Specifies whether the diagonal Born-Oppenheimer correction (DBOC) to the energy is evaluated (ON =1) or not (OFF =0). DBOC calculations are currently only available for HF-SCF and CCSD using RHF or UHF reference functions. Type: boolean; Default: false. CFOUR_DCT (CFOUR)¶CFOUR — Specifies whether the Dipole Coupling Tensor (DCT) is calculated (ON =1) or not (OFF =0). Type: boolean; Default: false. CFOUR_DERIV_LEVEL (CFOUR)¶CFOUR — Specifies whether or not energy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually ne",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:32380,Performance,optimiz,optimize,32380,"able, OFF otherwise). Type: boolean; Default: true. CFOUR_DBOC (CFOUR)¶CFOUR — Specifies whether the diagonal Born-Oppenheimer correction (DBOC) to the energy is evaluated (ON =1) or not (OFF =0). DBOC calculations are currently only available for HF-SCF and CCSD using RHF or UHF reference functions. Type: boolean; Default: false. CFOUR_DCT (CFOUR)¶CFOUR — Specifies whether the Dipole Coupling Tensor (DCT) is calculated (ON =1) or not (OFF =0). Type: boolean; Default: false. CFOUR_DERIV_LEVEL (CFOUR)¶CFOUR — Specifies whether or not energy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually needs not be set in any calculation since it is automatically set if the appropriate other options in the CFOUR namelist are turned on. Psi4 Interface: Keyword set from type of computation command: ZERO if energy(), FIRST if gradient() or optimize(), etc. Type: string; Possible Values: ZERO, FIRST, SECOND; Default: ZERO. CFOUR_DIFF_TYPE (CFOUR)¶CFOUR — Specifies whether orbital-relaxed (RELAXED =0) or orbital-unrelaxed (UNRELAXED =1) derivatives are computed in the CC calculation. Type: string; Possible Values: RELAXED, UNRELAXED; Default: RELAXED. CFOUR_DROPMO (CFOUR)¶CFOUR — Specifies which molecular orbitals will be dropped from the post-SCF calculation. The orbitals are numbered in ascending order from the most stable (negative energy) to the most unstable (largest positive energy). Individual orbitals must be separated with a dash, while x>y means orbitals x through y inclusive. For example, the string 1>10-55-58>64, would result in orbitals 1,2,3,4,5,6,7,8,9,10,55,58,59,60,61,62,63 and 64 being dropped. For UHF calculations, the appropriate orbitals are deleted for both spin cases. No dropped virtual MOs are currently allowed for gradient or property calculations. Psi4 I",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:38722,Performance,optimiz,optimization,38722,"keyword is identical to that used in CFOUR_OCCUPATION. For example, for a computational subgroup having four symmetry species, the string 3/1/0/2 specifies that 6 total roots should be searched for, three in the first block, one in the second block, and two in the fourth block. It is also important to note that the %excite* input, if present, takes precedence over this keyword. Default: All zeros. Psi4 Interface: The array above is specified in PSI as (white space tolerant) [3,1,0,2]. Type: array; Default: No Default. CFOUR_ESTATE_TRANS (CFOUR)¶CFOUR — Specifies whether just the excitation energies (OFF, =0) or in addition transition moments (EXPECTATION, =1) are calculated. Note that this keyword should not be used in excited-state calculations involving analytic gradients and that transition moments are essentially only available for EOM-CCSD/CCSD-LR. Type: string; Possible Values: OFF, EXPECTATION; Default: OFF. CFOUR_EVAL_HESS (CFOUR)¶CFOUR — Tells the program, in the course of a geometry optimization, to calculate the Hessian explicitly every N cycles. 0 means never calculated explicitly. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly FULL_HESS_EVERY. Type: integer; Default: 0. CFOUR_EXCITATION (CFOUR)¶CFOUR — Specifies in CC calculations using mrcc the excitation level if the calculation level has been chosen as CC(n), CI(n), or CCn(n). Type: integer; Default: 0. CFOUR_EXCITE (CFOUR)¶CFOUR — Specifies the type of EOM-CC/LR-CC treatment to be performed. Available options are NONE (=0), EOMEE (=3, the EOM-CC/CC-LR approach for the treatment of excited states), EOMIP (=4, the EOM-CC/CC-LR approach for the treatment of ionized states), EOMEA (=7, the EOM-CC/CC-LR approach for the treatment of electron-attached states). Type: string; Possible Values: NONE, EOMEE, EOMIP, EOMEA; Default: NONE. CFOUR_FC_FIELD (CFOUR)¶CFOUR — Specifies the ",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:38850,Performance,optimiz,optimizations,38850,"uld be searched for, three in the first block, one in the second block, and two in the fourth block. It is also important to note that the %excite* input, if present, takes precedence over this keyword. Default: All zeros. Psi4 Interface: The array above is specified in PSI as (white space tolerant) [3,1,0,2]. Type: array; Default: No Default. CFOUR_ESTATE_TRANS (CFOUR)¶CFOUR — Specifies whether just the excitation energies (OFF, =0) or in addition transition moments (EXPECTATION, =1) are calculated. Note that this keyword should not be used in excited-state calculations involving analytic gradients and that transition moments are essentially only available for EOM-CCSD/CCSD-LR. Type: string; Possible Values: OFF, EXPECTATION; Default: OFF. CFOUR_EVAL_HESS (CFOUR)¶CFOUR — Tells the program, in the course of a geometry optimization, to calculate the Hessian explicitly every N cycles. 0 means never calculated explicitly. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly FULL_HESS_EVERY. Type: integer; Default: 0. CFOUR_EXCITATION (CFOUR)¶CFOUR — Specifies in CC calculations using mrcc the excitation level if the calculation level has been chosen as CC(n), CI(n), or CCn(n). Type: integer; Default: 0. CFOUR_EXCITE (CFOUR)¶CFOUR — Specifies the type of EOM-CC/LR-CC treatment to be performed. Available options are NONE (=0), EOMEE (=3, the EOM-CC/CC-LR approach for the treatment of excited states), EOMIP (=4, the EOM-CC/CC-LR approach for the treatment of ionized states), EOMEA (=7, the EOM-CC/CC-LR approach for the treatment of electron-attached states). Type: string; Possible Values: NONE, EOMEE, EOMIP, EOMEA; Default: NONE. CFOUR_FC_FIELD (CFOUR)¶CFOUR — Specifies the strength of a Fermi-Contact perturbation as required for finite-field calculations of spin densities and the FC contributions to indirect spin-spin coupling constants. The value",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:38916,Performance,optimiz,optimizer,38916,"uld be searched for, three in the first block, one in the second block, and two in the fourth block. It is also important to note that the %excite* input, if present, takes precedence over this keyword. Default: All zeros. Psi4 Interface: The array above is specified in PSI as (white space tolerant) [3,1,0,2]. Type: array; Default: No Default. CFOUR_ESTATE_TRANS (CFOUR)¶CFOUR — Specifies whether just the excitation energies (OFF, =0) or in addition transition moments (EXPECTATION, =1) are calculated. Note that this keyword should not be used in excited-state calculations involving analytic gradients and that transition moments are essentially only available for EOM-CCSD/CCSD-LR. Type: string; Possible Values: OFF, EXPECTATION; Default: OFF. CFOUR_EVAL_HESS (CFOUR)¶CFOUR — Tells the program, in the course of a geometry optimization, to calculate the Hessian explicitly every N cycles. 0 means never calculated explicitly. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly FULL_HESS_EVERY. Type: integer; Default: 0. CFOUR_EXCITATION (CFOUR)¶CFOUR — Specifies in CC calculations using mrcc the excitation level if the calculation level has been chosen as CC(n), CI(n), or CCn(n). Type: integer; Default: 0. CFOUR_EXCITE (CFOUR)¶CFOUR — Specifies the type of EOM-CC/LR-CC treatment to be performed. Available options are NONE (=0), EOMEE (=3, the EOM-CC/CC-LR approach for the treatment of excited states), EOMIP (=4, the EOM-CC/CC-LR approach for the treatment of ionized states), EOMEA (=7, the EOM-CC/CC-LR approach for the treatment of electron-attached states). Type: string; Possible Values: NONE, EOMEE, EOMIP, EOMEA; Default: NONE. CFOUR_FC_FIELD (CFOUR)¶CFOUR — Specifies the strength of a Fermi-Contact perturbation as required for finite-field calculations of spin densities and the FC contributions to indirect spin-spin coupling constants. The value",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:39318,Performance,perform,performed,39318," whether just the excitation energies (OFF, =0) or in addition transition moments (EXPECTATION, =1) are calculated. Note that this keyword should not be used in excited-state calculations involving analytic gradients and that transition moments are essentially only available for EOM-CCSD/CCSD-LR. Type: string; Possible Values: OFF, EXPECTATION; Default: OFF. CFOUR_EVAL_HESS (CFOUR)¶CFOUR — Tells the program, in the course of a geometry optimization, to calculate the Hessian explicitly every N cycles. 0 means never calculated explicitly. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly FULL_HESS_EVERY. Type: integer; Default: 0. CFOUR_EXCITATION (CFOUR)¶CFOUR — Specifies in CC calculations using mrcc the excitation level if the calculation level has been chosen as CC(n), CI(n), or CCn(n). Type: integer; Default: 0. CFOUR_EXCITE (CFOUR)¶CFOUR — Specifies the type of EOM-CC/LR-CC treatment to be performed. Available options are NONE (=0), EOMEE (=3, the EOM-CC/CC-LR approach for the treatment of excited states), EOMIP (=4, the EOM-CC/CC-LR approach for the treatment of ionized states), EOMEA (=7, the EOM-CC/CC-LR approach for the treatment of electron-attached states). Type: string; Possible Values: NONE, EOMEE, EOMIP, EOMEA; Default: NONE. CFOUR_FC_FIELD (CFOUR)¶CFOUR — Specifies the strength of a Fermi-Contact perturbation as required for finite-field calculations of spin densities and the FC contributions to indirect spin-spin coupling constants. The value must be specified as an integer and the FC strength used by the program will be the value of the keyword \(\times 10^{-6}\). The atom for which the FC perturbation is switched on is specified in the ZMAT file after the CFOUR command line and potential basis set input, as follows %spin density N with N as the number of atom (in (X5,I3) format) in the order they are written by JODA to the ",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:41447,Performance,perform,performed,41447,"teger; Default: 0. CFOUR_FD_CALCTYPE (CFOUR)¶CFOUR — Specifies the algorithm used to compute the harmonic force constants in finite-difference calculations.GRADONLY (=0) evaluates the force constants and dipole moment derivatives by numerical differentiation of analytic gradients; ENERONLY (=1) evaluates the force constants by second differences of energies (dipole moment derivatives are not evaluated); while MIXED (=2) evaluates 1x1 blocks of symmetry-blocked force constants by second differences pf energies and all other elements by first differences of gradients. the GRADONLY and MIXED approaches may, of course, only be used hwen using computational methods for which analytic gradients are available. Type: string; Possible Values: GRADONLY, ENERONLY, MIXED; Default: GRADONLY. CFOUR_FD_IRREPS (CFOUR)¶CFOUR — Requests that only vibrational frequencies of certain symmetry types are evaluated in a VIBRATION=FINDIF calculation. The numbers of the irreducible representations for which vibrational analysis is to be performed are separated by slashes. For example, FD_IRREP=1/3/4 means compute the frequencies of modes transforming as the first, third, and fourth irreducible representations. If a symmetry is specified for which there are no vibrational modes, the program will terminate. The labels of the irreducible representations for this keyword are not usually the same as those used in the rest of the calculation. Moreover, for some point groups, for example, those of linear molecules, the two sets of labels refer to different subgroups. There is as yet no straightforward way to determine what they will be without starting a calculation. If one runs the xjoda and then the xsymcor executables, the relevant irreducible representations will be listed. If all vibrational frequencies are desired, this keyword need not be included. Default : compute vibrational frequencies for all irreducible representations. Type: array; Default: No Default. CFOUR_FD_PROJECT (CFOUR)¶CFOUR — ",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:46914,Performance,perform,performs,46914,"ore all elements of \(\Gamma(abcd)\), while DIRECT (=1) tells the program to use alternative algorithms in which \(\Gamma(abcd)\) is calculated and used “on the fly”. Note that this option might be not available for all type of calculations. Type: string; Possible Values: DISK, DIRECT; Default: DISK. CFOUR_GENBAS_1 (CFOUR)¶CFOUR — This keyword applies only to Hydrogen and Helium atoms and specifies the number of contracted Gaussian functions per shell. There is usually no need to use this keyword, but it can be useful for using a subset of the functions in a particular entry in the GENBAS file, particularly for generally contracted WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR)¶CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CF",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:47078,Performance,perform,performs,47078," that this option might be not available for all type of calculations. Type: string; Possible Values: DISK, DIRECT; Default: DISK. CFOUR_GENBAS_1 (CFOUR)¶CFOUR — This keyword applies only to Hydrogen and Helium atoms and specifies the number of contracted Gaussian functions per shell. There is usually no need to use this keyword, but it can be useful for using a subset of the functions in a particular entry in the GENBAS file, particularly for generally contracted WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR)¶CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR)¶CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in san",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:47255,Performance,perform,performs,47255," to Hydrogen and Helium atoms and specifies the number of contracted Gaussian functions per shell. There is usually no need to use this keyword, but it can be useful for using a subset of the functions in a particular entry in the GENBAS file, particularly for generally contracted WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR)¶CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR)¶CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR)¶CFOUR — S",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:47488,Performance,optimiz,optimization,47488,"ul for using a subset of the functions in a particular entry in the GENBAS file, particularly for generally contracted WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR)¶CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR)¶CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR)¶CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) u",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:47506,Performance,optimiz,optimization,47506," contracted WMR basis sets. For example, if entry H:BASIS in the GENBAS file contains 7 contracted s functions, 4 p functions and a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR)¶CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR)¶CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR)¶CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_S",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:47648,Performance,optimiz,optimizations,47648," a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR)¶CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR)¶CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR)¶CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR)¶CFOUR — Specifies the used geometry optimization methods. The f",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:47714,Performance,optimiz,optimizer,47714," a single d function, then setting GENBAS_1=730 would eliminate the last p function and the d function. Default: use the unaltered GENBAS entry. Type: string; Default: No Default. CFOUR_GENBAS_2 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 above, but applies to second-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR)¶CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR)¶CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR)¶CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR)¶CFOUR — Specifies the used geometry optimization methods. The f",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:48014,Performance,optimiz,optimization,48014,"econd-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_3 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR)¶CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR)¶CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR)¶CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR)¶CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Mille",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:48060,Performance,optimiz,optimizations,48060,"on as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR)¶CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR)¶CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR)¶CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR)¶CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal ",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:48126,Performance,optimiz,optimizer,48126,"on as CFOUR_GENBAS_1 and CFOUR_GENBAS_2 , but applies to third-row atoms. Type: string; Default: No Default. CFOUR_GENBAS_4 (CFOUR)¶CFOUR — This keyword performs the same function as CFOUR_GENBAS_1 , CFOUR_GENBAS_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR)¶CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR)¶CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR)¶CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR)¶CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal ",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:48357,Performance,optimiz,optimizations,48357,"S_2 , and CFOUR_GENBAS_3 , but applies to fourth-row atoms. Type: string; Default: No Default. CFOUR_GEO_CONV (CFOUR)¶CFOUR — Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR)¶CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR)¶CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR)¶CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. EN",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:48397,Performance,optimiz,optimizations,48397,"Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR)¶CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR)¶CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR)¶CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as v",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:48463,Performance,optimiz,optimizer,48463,"Specifies the convergence criterion for geometry optimization. The optimization terminates when the RMS gradient is below \(10^{-N}\) Hartree/bohr, where \(N\) is the specified value. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR)¶CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR)¶CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR)¶CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as v",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:48663,Performance,optimiz,optimization,48663,"metry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly G_CONVERGENCE =CFOUR, which should be equivalent except for different internal coordinate definitions. Type: integer; Default: 5. CFOUR_GEO_MAXCYC (CFOUR)¶CFOUR — Specifies the maximum allowed number of geometry optimization cycles. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly GEOM_MAXITER. Type: integer; Default: 50. CFOUR_GEO_MAXSTEP (CFOUR)¶CFOUR — Specifies largest step (in millibohr) which is allowed in geometry optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR)¶CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized). Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY; Default: SINGLE_POINT. CFOUR_GIAO (CFOUR)¶CFOUR — Specifies whether gauge-including atomic o",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:49345,Performance,optimiz,optimization,49345,"y optimizations. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR)¶CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized). Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY; Default: SINGLE_POINT. CFOUR_GIAO (CFOUR)¶CFOUR — Specifies whether gauge-including atomic orbitals are used (ON) or not (OFF). Default: ON for CFOUR_PROPS =NMR and =MAGNETIC, otherwise OFF. Type: string; Possible Values: ON, OFF; Default: No Default. CFOUR_GRID (CFOUR)¶CFOUR — Keyword used to control type of grid calculation (see later section in this manual). Options are OFF (=0), no grid calculation; CARTESIAN (=1), steps are in Cartesian coordinates (which must be run with CFOUR_COORDINATES =CARTESIAN); INTERNAL (=2), steps are in Z-matrix internal coordinates; QUADRATURE (=3) steps are chosen for an integration based on Gauss-Hermite quadrature. (Default: OFF). Type: string; Possible Values: OFF, CARTESIAN, INTERNAL, QUADRATURE; Default: OFF. CFOUR_GUESS (CFOUR)¶CFOUR — Where the initial ",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:49465,Performance,optimiz,optimized,49465,"sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly INTRAFRAG_STEP_LIMIT. Type: integer; Default: 300. CFOUR_GEO_METHOD (CFOUR)¶CFOUR — Specifies the used geometry optimization methods. The following values are permitted: NR (=0) — straightforward Newton-Raphson search for minimum; RFA (=1) — Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) — Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); SINGLE_POINT (=5) for a single-point energy calculation. ENERONLY (=6) requests a geometry optimization based on single-point energy calculations. Default: SINGLE-POINT (NR as soon as variables are marked to be optimized). Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT, ENERONLY; Default: SINGLE_POINT. CFOUR_GIAO (CFOUR)¶CFOUR — Specifies whether gauge-including atomic orbitals are used (ON) or not (OFF). Default: ON for CFOUR_PROPS =NMR and =MAGNETIC, otherwise OFF. Type: string; Possible Values: ON, OFF; Default: No Default. CFOUR_GRID (CFOUR)¶CFOUR — Keyword used to control type of grid calculation (see later section in this manual). Options are OFF (=0), no grid calculation; CARTESIAN (=1), steps are in Cartesian coordinates (which must be run with CFOUR_COORDINATES =CARTESIAN); INTERNAL (=2), steps are in Z-matrix internal coordinates; QUADRATURE (=3) steps are chosen for an integration based on Gauss-Hermite quadrature. (Default: OFF). Type: string; Possible Values: OFF, CARTESIAN, INTERNAL, QUADRATURE; Default: OFF. CFOUR_GUESS (CFOUR)¶CFOUR — Where the initial SCF eigenvectors are read from. MOREAD means to read from the disk (the JOBARC file",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:51173,Performance,perform,performs,51173,". (Default: OFF). Type: string; Possible Values: OFF, CARTESIAN, INTERNAL, QUADRATURE; Default: OFF. CFOUR_GUESS (CFOUR)¶CFOUR — Where the initial SCF eigenvectors are read from. MOREAD means to read from the disk (the JOBARC file) and CORE means to use a core Hamiltonian initial guess. If MOREAD is chosen but no disk file is present, the core Hamiltonian is used. (Default: MOREAD). Type: string; Possible Values: MOREAD, CORE; Default: MOREAD. CFOUR_HBAR (CFOUR)¶CFOUR — This keyword determines which action is taken by the linear response program. ON (=1) the full effective Hamiltonian is calculated and written to disk; OFF (=0) the “lambda” linear response equations are solved. Type: boolean; Default: false. CFOUR_HFSTABILITY (CFOUR)¶CFOUR — Control analysis of the stability of RHF, ROHF and UHF wavefunctions, as well as a possible search for a lower SCF solution. There are three possible options for this keyword. OFF (=0) does nothing, while ON (=1) performs a stability analysis and returns the number of negative eigenvalues in the orbital rotation Hessian. A third option, FOLLOW (=2) performs the stability analysis and then proceeds to rotate the SCF orbitals in the direction of a particular negative eigenvalue of the orbital rotation Hessian (see the explanation of keyword CFOUR_ROT_EVEC), after which the SCF is rerun. Type: string; Possible Values: OFF, ON, FOLLOW; Default: OFF. CFOUR_INCORE (CFOUR)¶CFOUR — This keyword can be used to significantly reduce disk i/o, and should be implemented very soon. The following options are available: OFF (= 0), no special algorithms are used (the default case); ALL (=1) all quantities except the \(\langle ab\vert\vert cd\rangle\) molecular integral lists are held in core; PARTIAL (= 2), the T2 and T1 vectors are held in core throughout the calculation; (=4) all quantities except the \(\langle ab\vert\vert cd\rangle\) and \(\langle ab\vert\vert ci\rangle\) integrals are held in core; (=5) \(\langle ij\vert\vert kl\rangle\) and",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:51311,Performance,perform,performs,51311," disk (the JOBARC file) and CORE means to use a core Hamiltonian initial guess. If MOREAD is chosen but no disk file is present, the core Hamiltonian is used. (Default: MOREAD). Type: string; Possible Values: MOREAD, CORE; Default: MOREAD. CFOUR_HBAR (CFOUR)¶CFOUR — This keyword determines which action is taken by the linear response program. ON (=1) the full effective Hamiltonian is calculated and written to disk; OFF (=0) the “lambda” linear response equations are solved. Type: boolean; Default: false. CFOUR_HFSTABILITY (CFOUR)¶CFOUR — Control analysis of the stability of RHF, ROHF and UHF wavefunctions, as well as a possible search for a lower SCF solution. There are three possible options for this keyword. OFF (=0) does nothing, while ON (=1) performs a stability analysis and returns the number of negative eigenvalues in the orbital rotation Hessian. A third option, FOLLOW (=2) performs the stability analysis and then proceeds to rotate the SCF orbitals in the direction of a particular negative eigenvalue of the orbital rotation Hessian (see the explanation of keyword CFOUR_ROT_EVEC), after which the SCF is rerun. Type: string; Possible Values: OFF, ON, FOLLOW; Default: OFF. CFOUR_INCORE (CFOUR)¶CFOUR — This keyword can be used to significantly reduce disk i/o, and should be implemented very soon. The following options are available: OFF (= 0), no special algorithms are used (the default case); ALL (=1) all quantities except the \(\langle ab\vert\vert cd\rangle\) molecular integral lists are held in core; PARTIAL (= 2), the T2 and T1 vectors are held in core throughout the calculation; (=4) all quantities except the \(\langle ab\vert\vert cd\rangle\) and \(\langle ab\vert\vert ci\rangle\) integrals are held in core; (=5) \(\langle ij\vert\vert kl\rangle\) and \(\langle ij\vert\vert ka\rangle\) and two-index quantities are held in core; (=6) all direct access files (MOINTS, GAMLAM, etc.) are held in core. At present, these options have been implemented only in the",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:53116,Performance,perform,performed,53116,"angle\) and \(\langle ab\vert\vert ci\rangle\) integrals are held in core; (=5) \(\langle ij\vert\vert kl\rangle\) and \(\langle ij\vert\vert ka\rangle\) and two-index quantities are held in core; (=6) all direct access files (MOINTS, GAMLAM, etc.) are held in core. At present, these options have been implemented only in the energy code xvcc and the excitation energy code xvee. (Default: 0). Type: string; Possible Values: OFF, ALL, PARTIAL; Default: OFF. CFOUR_INPUT_MRCC (CFOUR)¶CFOUR — Specifies whether an input for mrcc is written (ON, =0) or not (OFF, =1) if CFOUR_CC_PROGRAM =EXTERNAL has been specified. Type: boolean; Default: true. CFOUR_INTEGRALS (CFOUR)¶CFOUR — This keyword defines what type of integral input will be written by xjoda. VMOL (=1) has to be used with the programs of CFOUR. Using ARGOS (=0), input for Pitzer’s ARGOS integral program will be written. (Default: VMOL). Type: string; Possible Values: VMOL, ARGOS; Default: VMOL. CFOUR_JODA_PRINT (CFOUR)¶CFOUR — Controls amount of debug printing performed by xjoda. The higher the number, the more information is printed. Values of 25 or higher generally do not produce anything of interest to the general user. Do not set JODA_PRINT to 999 as this will cause the core vector to be dumped to disk. Type: integer; Default: 0. CFOUR_LINEQ_CONV (CFOUR)¶CFOUR — Convergence threshold for linear equations controlled by LINEQ_TYPE. Equations are iterated until smallest residual falls below \(10^{-N}\), where \(N\) is the value associated with this keyword. Type: integer; Default: 7. CFOUR_LINEQ_MAXCY (CFOUR)¶CFOUR — The maximum number of iterations in all linear CC equations. Type: integer; Default: 50. CFOUR_LINEQ_TYPE (CFOUR)¶CFOUR — Determines the algorithm used to solve linear equations ( \(\Lambda\) and derivative \(T\) and \(\Lambda\) ). POPLE (=0) uses Pople’s method of successively orthogonalized basis vectors, while DIIS (=1) uses Pulay’s DIIS method. The latter offers the practical advantage of requiring m",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:54756,Performance,optimiz,optimizations,54756,"ear CC equations. Type: integer; Default: 50. CFOUR_LINEQ_TYPE (CFOUR)¶CFOUR — Determines the algorithm used to solve linear equations ( \(\Lambda\) and derivative \(T\) and \(\Lambda\) ). POPLE (=0) uses Pople’s method of successively orthogonalized basis vectors, while DIIS (=1) uses Pulay’s DIIS method. The latter offers the practical advantage of requiring much less disk space, although it is not guaranteed to converge. Moreover, POPLE has not been tested for some time and should definitely be checked! (Default : DIIS). Type: string; Possible Values: POPLE, DIIS; Default: DIIS. CFOUR_LOCK_ORBOCC (CFOUR)¶CFOUR — This keyword is used by the SCF program to determine if the orbital occupancy (by symmetry block) is allowed to change in the course of the calculation. ON (=1) locks the occupation to that set by the keyword CFOUR_OCCUPATION (or the initial guess if omitted); OFF (= 0) permits the occupation to change. (Default : 1 if the occupation is specified with CFOUR_OCCUPATION and for second and later steps of optimizations; 0 if CFOUR_OCCUPATION omitted.). Type: boolean; Default: false. CFOUR_MAXSTEP (CFOUR)¶CFOUR — Identical to CFOUR_GEO_MAXSTEP. Type: integer; Default: 300. CFOUR_MEM_UNIT (CFOUR)¶CFOUR — Specifies the units in which the amount of requested core memory is given. Possible choices are INTEGERWORDS (default), kB, MB, GB, and TB. Psi4 Interface: Keyword set from memory input command when given, always MB. Type: string; Possible Values: INTEGERWORDS, KB, MB, GB, TB; Default: INTEGERWORDS. CFOUR_MEMORY_SIZE (CFOUR)¶CFOUR — Specifies the amount of core memory used in integer words (default) or in the units specified via the keyword CFOUR_MEM_UNIT. Default: 100 000 000 (approximately 381 or 762 MB for 32 or 64 bit machines, respectively). Psi4 Interface: Keyword set in MB from memory input command when given. Type: integer; Default: 100000000. CFOUR_METHOD (CFOUR)¶CFOUR — Specifies the geometry optimization strategy. Four values are permitted: NR (=0) –",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:55669,Performance,optimiz,optimization,55669,"e. (Default : 1 if the occupation is specified with CFOUR_OCCUPATION and for second and later steps of optimizations; 0 if CFOUR_OCCUPATION omitted.). Type: boolean; Default: false. CFOUR_MAXSTEP (CFOUR)¶CFOUR — Identical to CFOUR_GEO_MAXSTEP. Type: integer; Default: 300. CFOUR_MEM_UNIT (CFOUR)¶CFOUR — Specifies the units in which the amount of requested core memory is given. Possible choices are INTEGERWORDS (default), kB, MB, GB, and TB. Psi4 Interface: Keyword set from memory input command when given, always MB. Type: string; Possible Values: INTEGERWORDS, KB, MB, GB, TB; Default: INTEGERWORDS. CFOUR_MEMORY_SIZE (CFOUR)¶CFOUR — Specifies the amount of core memory used in integer words (default) or in the units specified via the keyword CFOUR_MEM_UNIT. Default: 100 000 000 (approximately 381 or 762 MB for 32 or 64 bit machines, respectively). Psi4 Interface: Keyword set in MB from memory input command when given. Type: integer; Default: 100000000. CFOUR_METHOD (CFOUR)¶CFOUR — Specifies the geometry optimization strategy. Four values are permitted: NR (=0) – Straightforward Newton-Raphson search for minimum; RFA (=1) – Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) – Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point calculation. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly OPT_TYPE and STEP_TYPE. Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR)¶CFOUR — Specifie",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:56354,Performance,optimiz,optimizations,56354,"yword CFOUR_MEM_UNIT. Default: 100 000 000 (approximately 381 or 762 MB for 32 or 64 bit machines, respectively). Psi4 Interface: Keyword set in MB from memory input command when given. Type: integer; Default: 100000000. CFOUR_METHOD (CFOUR)¶CFOUR — Specifies the geometry optimization strategy. Four values are permitted: NR (=0) – Straightforward Newton-Raphson search for minimum; RFA (=1) – Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) – Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point calculation. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly OPT_TYPE and STEP_TYPE. Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR)¶CFOUR — Specifies the type of MRCC calculation. MK performs a MR-CC calculation based on Mukherjee’s ansatz. Type: boolean; Default: false. CFOUR_MULTIPLICITY (CFOUR)¶CFOUR — Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR)¶CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via t",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:56420,Performance,optimiz,optimizer,56420,"yword CFOUR_MEM_UNIT. Default: 100 000 000 (approximately 381 or 762 MB for 32 or 64 bit machines, respectively). Psi4 Interface: Keyword set in MB from memory input command when given. Type: integer; Default: 100000000. CFOUR_METHOD (CFOUR)¶CFOUR — Specifies the geometry optimization strategy. Four values are permitted: NR (=0) – Straightforward Newton-Raphson search for minimum; RFA (=1) – Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) – Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point calculation. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly OPT_TYPE and STEP_TYPE. Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR)¶CFOUR — Specifies the type of MRCC calculation. MK performs a MR-CC calculation based on Mukherjee’s ansatz. Type: boolean; Default: false. CFOUR_MULTIPLICITY (CFOUR)¶CFOUR — Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR)¶CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via t",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:56689,Performance,perform,performs,56689,"ed: NR (=0) – Straightforward Newton-Raphson search for minimum; RFA (=1) – Rational Function Approximation search for minimum (this method can be used to find minima when the initial structure is in a region where the Hessian index is nonzero); TS (=2) Cerjan-Miller eigenvector following search for a transition state (can be started in a region where the Hessian index is not equal to unity); MANR (=3) – Morse-adjusted Newton-Raphson search for minimum (very efficient minimization scheme, particularly if the Hessian is available); 4 is currently unavailable; SINGLE_POINT (=5) is a single point calculation. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly OPT_TYPE and STEP_TYPE. Type: string; Possible Values: NR, RFA, TS, MANR, SINGLE_POINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR)¶CFOUR — Specifies the type of MRCC calculation. MK performs a MR-CC calculation based on Mukherjee’s ansatz. Type: boolean; Default: false. CFOUR_MULTIPLICITY (CFOUR)¶CFOUR — Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR)¶CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR)¶CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:57658,Performance,optimiz,optimization,57658,"OINT; Default: SINGLE_POINT. CFOUR_MRCC (CFOUR)¶CFOUR — Specifies the type of MRCC calculation. MK performs a MR-CC calculation based on Mukherjee’s ansatz. Type: boolean; Default: false. CFOUR_MULTIPLICITY (CFOUR)¶CFOUR — Specifies the spin multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR)¶CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR)¶CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead. Type: string; Possible Values: ABORT, SWITCH, RFA; Default: ABORT. CFOUR_NEWNORM (CFOUR)¶CFOUR — All components of spherical AO’s are normalized to 1. This feature can help with numerical convergence issues if AO integrals are involved. Currently only working for single-point energy calculations. Type: boolean; Default: false. CFOUR_NONHF (CFOUR)¶CFOUR — Specifies whether the reference function used in the correlation energy calculat",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:57961,Performance,optimiz,optimization,57961,"multiplicity. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 1. CFOUR_NACOUPLING (CFOUR)¶CFOUR — Calculation of non-adiabatic coupling. In case of ON (=1) the method by Ichino, Gauss, Stanton is used to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR)¶CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead. Type: string; Possible Values: ABORT, SWITCH, RFA; Default: ABORT. CFOUR_NEWNORM (CFOUR)¶CFOUR — All components of spherical AO’s are normalized to 1. This feature can help with numerical convergence issues if AO integrals are involved. Currently only working for single-point energy calculations. Type: boolean; Default: false. CFOUR_NONHF (CFOUR)¶CFOUR — Specifies whether the reference function used in the correlation energy calculation satisfies the (spin-orbital) HF equations or not. Usually there is no need to set this parameter (OFF = 0 and ON =1), since standard non-HF reference functions (QRHF and ROHF) set this flag automatically. Type: boolean; Default: false. CF",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:58013,Performance,optimiz,optimizations,58013,"sed to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR)¶CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead. Type: string; Possible Values: ABORT, SWITCH, RFA; Default: ABORT. CFOUR_NEWNORM (CFOUR)¶CFOUR — All components of spherical AO’s are normalized to 1. This feature can help with numerical convergence issues if AO integrals are involved. Currently only working for single-point energy calculations. Type: boolean; Default: false. CFOUR_NONHF (CFOUR)¶CFOUR — Specifies whether the reference function used in the correlation energy calculation satisfies the (spin-orbital) HF equations or not. Usually there is no need to set this parameter (OFF = 0 and ON =1), since standard non-HF reference functions (QRHF and ROHF) set this flag automatically. Type: boolean; Default: false. CFOUR_NTOP_TAMP (CFOUR)¶CFOUR — Specifies how many t amplitudes will be printed for each spin case and excitation level. For =N, The largest N amplitudes for each spin case and excitation level will be printed. Type: integer",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:58079,Performance,optimiz,optimizer,58079,"sed to obtain the lambda coupling, while in case of LVC (=3) the lambda coupling is computed by means of the algorithm by Tajti and Szalay. Furthermore, NACV (=2) requests the computation of the full non-adiabatic coupling. Note that for calculations using LVC or NACV options the multiroot diagonalization has to be used, as requested via the keyword CFOUR_EOM_NSTATES (dne?) =MULTIROOT. Type: string; Possible Values: ON, NACV, LVC; Default: OFF. CFOUR_NEGEVAL (CFOUR)¶CFOUR — Specifies what to do if negative eigenvalues are encountered in the totally symmetric Hessian during an NR or MANR geometry-optimization search. If ABORT (=0), the job will terminate with an error message; if SWITCH (=1) the program will just switch the eigenvalue to its absolute value and keep plugging away (this is strongly discouraged!); and if RFA (=2), the keyword CFOUR_GEO_METHOD is switched to RFA internally and the optimization is continued. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead. Type: string; Possible Values: ABORT, SWITCH, RFA; Default: ABORT. CFOUR_NEWNORM (CFOUR)¶CFOUR — All components of spherical AO’s are normalized to 1. This feature can help with numerical convergence issues if AO integrals are involved. Currently only working for single-point energy calculations. Type: boolean; Default: false. CFOUR_NONHF (CFOUR)¶CFOUR — Specifies whether the reference function used in the correlation energy calculation satisfies the (spin-orbital) HF equations or not. Usually there is no need to set this parameter (OFF = 0 and ON =1), since standard non-HF reference functions (QRHF and ROHF) set this flag automatically. Type: boolean; Default: false. CFOUR_NTOP_TAMP (CFOUR)¶CFOUR — Specifies how many t amplitudes will be printed for each spin case and excitation level. For =N, The largest N amplitudes for each spin case and excitation level will be printed. Type: integer",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:67315,Performance,perform,performed,67315," the frequency is required), NMR (=5) requests the calculation of NMR chemical shifts/chemical shielding tensors (by default using GIAOs), J_FC requests the calculation of the Fermi-Contact contribution to indirect spin-spin coupling constants, J_SD the calculation of the corresponding spin-dipole contribution, and J_SO the calculation of the corresponding spin-orbit contribution to J; HYPERPOL (=22) invokes a calculation of static hyperpolarizabilities, DYN_HYP (=23) requests the calculation of frequency-dependent hyperpolarizabilities, SHG (=24) the calculation of hyperpolarizabilities related to the second-harmonic generation, OPT_REC (=25) the computation of hyperpolarizabilities related to optical rectification, VERDET (=26) the calculation of Verdet constants. Type: string; Possible Values: OFF, FIRST_ORDER, SECOND_ORDER, NMR, HYPERPOL, DYN_HYP, SHG, OPT_REC, VERDET; Default: OFF. CFOUR_QRHF_GENERAL (CFOUR)¶CFOUR — The presence of this keyword specifies that a QRHF based CC calculation, or alternatively, an SCF calculation that uses the CFOUR_QRHFGUES option, is to be performed. Type: array; Default: No Default. CFOUR_QRHF_ORBITAL (CFOUR)¶CFOUR — By default, in QRHF calculations, electrons are removed from the highest occupied orbital in a symmetry block (symmetry block HOMO), while electrons are added to the lowest unoccupied orbital within a symmetry block (symmetry block LUMO). The purpose of the QRHF_ORBITAL keyword is to allow additional flexibility in choosing which orbitals will have their occupation numbers altered. The value of this keyword gives the offset with respect to the default orbital for the orbital which will be depopulated (or populated) in QRHF-CC calculations. For calculations involving more than one removal or addition of electrons, values are separated by commas and correspond to the CFOUR_QRHF_GENERAL input on a one-to-one basis. For example, specifying CFOUR_QRHF_GENERAL =2/-4, QRHF_ORBITAL=3/2 means that an electron will be added to ",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:69027,Performance,perform,performed,69027,"ERAL input on a one-to-one basis. For example, specifying CFOUR_QRHF_GENERAL =2/-4, QRHF_ORBITAL=3/2 means that an electron will be added to the third lowest virtual in symmetry block 2 and another will be removed from the second highest occupied orbital in symmetry block 4. Examples given later in this manual further illustrate the QRHF input options and may help to clarify any confusion resulting from this documentation. (Default : 1). Type: array; Default: No Default. CFOUR_QRHFGUES (CFOUR)¶CFOUR — If this keyword is set to ON (=1), then the QRHF orbitals specified by the CFOUR_QRHF_GENERAL, CFOUR_QRHF_ORBITAL and CFOUR_QRHF_SPIN (nyi?) keywords are used as a starting guess for a restarted SCF procedure. This can be an extremely useful way to converge “difficult” SCF solutions, such as those that correspond to states that are not the lowest states of a given symmetry. Note that when this option is used, the calculation that is performed is not a QRHF-CC calculation; it is instead a UHF-based or ROHF-based calculation, depending on what type of reference is specified by the CFOUR_REFERENCE keyword. The QRHF aspect of the calculation is used simply as a device to converge the orbitals. Type: boolean; Default: false. CFOUR_RAMAN_INT (CFOUR)¶CFOUR — ON (=1) requests a calculation of Raman intensities based on the geometrical derivatives of the static polarizability tensor, while DYN (=2) requests a calculation of Raman intensities based on the derivatives of the dynamical polarizability tensor. Type: string; Possible Values: ON, DYN, OFF; Default: OFF. CFOUR_RAMAN_ORB (CFOUR)¶CFOUR — Specifies whether Raman intensities are calculated with orbital relaxation with respect to the electric field perturbation (RELAXED, = 1) or without orbital relaxation (UNRELAXED, = 0). Type: string; Possible Values: RELAXED, UNRELAXED; Default: UNRELAXED. CFOUR_RDO (CFOUR)¶CFOUR — Specifies whether or not relaxed density natural orbitals are to be computed. This option only has meaning ",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:70260,Performance,perform,performed,70260,"lculation is used simply as a device to converge the orbitals. Type: boolean; Default: false. CFOUR_RAMAN_INT (CFOUR)¶CFOUR — ON (=1) requests a calculation of Raman intensities based on the geometrical derivatives of the static polarizability tensor, while DYN (=2) requests a calculation of Raman intensities based on the derivatives of the dynamical polarizability tensor. Type: string; Possible Values: ON, DYN, OFF; Default: OFF. CFOUR_RAMAN_ORB (CFOUR)¶CFOUR — Specifies whether Raman intensities are calculated with orbital relaxation with respect to the electric field perturbation (RELAXED, = 1) or without orbital relaxation (UNRELAXED, = 0). Type: string; Possible Values: RELAXED, UNRELAXED; Default: UNRELAXED. CFOUR_RDO (CFOUR)¶CFOUR — Specifies whether or not relaxed density natural orbitals are to be computed. This option only has meaning for a correlated calculation. For =0, Do not compute. For =1, compute. Type: boolean; Default: true. CFOUR_REFERENCE (CFOUR)¶CFOUR — Specifies the type of SCF calculation to be performed. RHF (= 0) requests a restricted Hartree-Fock reference; UHF (= 1) an unrestricted Hartree-Fock reference; ROHF (= 2) a restricted open-shell Hartree-Fock calculation; TCSCF (=3) a two-configurational SCF calculation, and CASSCF (=4) a complete-active space SCF calculations (currently not implemented). Psi4 Interface: Keyword subject to translation from value of REFERENCE unless set explicitly. Type: string; Possible Values: RHF, UHF, ROHF, TCSCF, CASSCF; Default: RHF. CFOUR_RELATIVISTIC (CFOUR)¶CFOUR — Specifies the treatment of relativistic effects. The default is a non-relativistic treatment (OFF), while perturbational treatments are invoked via MVD1 (mass-velocity and 1-electron Darwin contribution), MVD2 (mass-velocity and 1- and 2-electron Darwin contribution), DPT2 (second-order direct perturbation theory approach), SF-DPT4 (scalar-relativistic part of fourth-order direct perturbation theory, DPT4 (full fourth-order DPT including spin-o",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:72428,Performance,perform,performed,72428,", SF-DPT6, SFREE, X2C1E, DPT; Default: OFF. CFOUR_RELAX_DENS (CFOUR)¶CFOUR — Specifies whether the relaxed density matrix is computed for correlated wave functions. OFF (= 0) The relaxed density will not be computed, ON (= 1) it will be computed. Type: boolean; Default: false. CFOUR_RES_RAMAN (CFOUR)¶CFOUR — This option can be used to convert an analytically calculated gradient vector to a particular normal coordinate representation. A useful application is to calculate the gradient of an electronically excited state in the normal coordinate representation of the ground electronic state, as this provides a first approximation to resonance Raman intensities (hence the name of the keyword). Calculations that use the this option require the externally supplied force constant matrix FCMFINAL, which is written to disk during the course of both analytic and finite-difference vibrational frequency calculations. No such transformation is performed if OFF (=0); while ON (=1) directs the program to evaluate the gradient and transform it to the chosen set of normal coordinates. A warning message is printed if the force constant matrix is unavailable. Type: boolean; Default: false. CFOUR_RESTART_CC (CFOUR)¶CFOUR — Offers the possibility to restart a CC calculation which stopped for various reasons, e.g. time limit, in the correlation part. However, note that a restart which is specified by ON (= 1) needs the following files of the previous unfinished calculation: JOBARC, JAINDX, MOINTS, and MOABCD. Type: boolean; Default: false. CFOUR_ROT_EVEC (CFOUR)¶CFOUR — Specifies which eigenvector of the orbital rotation Hessian is to be used to rotate the original SCF orbitals. By default, it will use that associated with the lowest eigenvalue of the totally symmetric part of the block-factored Hessian, as this choice often leads to the lowest energy SCF solution. For RHF stability checks, only those instabilities which correspond to RHF solutions will be considered. It is important to u",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:82692,Performance,optimiz,optimization,82692,"es the threshold value (given as an integer) for the treatment of CPHF coefficients in second derivative calculations using perturbed canonical orbitals. If a CPHF coefficient is above the threshold, the corresponding orbital rotation is treated (at the expense of additional CPU cost) using the standard non-canonical procedures, while orbital pairs corresponding to CPHF coefficients below the threshold are treated using perturbed canonical representation. Default: 25 (Default: 1 in the developer version). Type: integer; Default: 25. CFOUR_UNITS (CFOUR)¶CFOUR — Specifies the units used for molecular geometry input. ANGSTROM (= 0) uses Angstrom units, BOHR (= 1) specifies atomic units. Psi4 Interface: Keyword set from active molecule, always ANGSTROM. Type: string; Possible Values: ANGSTROM, BOHR; Default: ANGSTROM. CFOUR_UPDATE_HESSIAN (CFOUR)¶CFOUR — Specifies whether or not the Hessian update is carried out. OFF (= 0) uses the initial Hessian (however supplied, either the default guess or a FCMINT file), ON (= 1) updates it during subsequent optimization cycles. (not in current public version). Type: boolean; Default: true. CFOUR_VIBRATION (CFOUR)¶CFOUR — Specifies whether (harmonic) vibrational frequencies are calculated or not. If the default NO (=0) is specified then no frequencies are calculated. For ANALYTIC, vibrational frequencies are determined from analytically computed second derivatives, and for FINDIF (=2) vibrational frequencies are calculated from a force field obtained by numerical differentiation of analytically evaluated gradients (or even single-point energies) using symmetry-adapted mass-weighted Cartesian coordinates. If vibrational frequencies are calculated, a normal mode analysis using the computed force-constant matrix is performed, rotationally projected frequencies are computed, infrared intensities are determined, and zero-point energies (ZPE) are evaluated. Type: string; Possible Values: NO, ANALYTIC, FINDIF, EXACT; Default: NO. CFOUR_VTR",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:83410,Performance,perform,performed,83410,"NGSTROM, BOHR; Default: ANGSTROM. CFOUR_UPDATE_HESSIAN (CFOUR)¶CFOUR — Specifies whether or not the Hessian update is carried out. OFF (= 0) uses the initial Hessian (however supplied, either the default guess or a FCMINT file), ON (= 1) updates it during subsequent optimization cycles. (not in current public version). Type: boolean; Default: true. CFOUR_VIBRATION (CFOUR)¶CFOUR — Specifies whether (harmonic) vibrational frequencies are calculated or not. If the default NO (=0) is specified then no frequencies are calculated. For ANALYTIC, vibrational frequencies are determined from analytically computed second derivatives, and for FINDIF (=2) vibrational frequencies are calculated from a force field obtained by numerical differentiation of analytically evaluated gradients (or even single-point energies) using symmetry-adapted mass-weighted Cartesian coordinates. If vibrational frequencies are calculated, a normal mode analysis using the computed force-constant matrix is performed, rotationally projected frequencies are computed, infrared intensities are determined, and zero-point energies (ZPE) are evaluated. Type: string; Possible Values: NO, ANALYTIC, FINDIF, EXACT; Default: NO. CFOUR_VTRAN (CFOUR)¶CFOUR — This keyword defines what type of integral transformation is to be performed in the program xvtran. FULL/PARTIAL (=0) allows the transformation program to choose the appropriate type of transformation, while FULL (=1) requires a full integral transformation and PARTIAL (=2) means a MBPT(2)-specific transformation where the \((ab \vert cd)\) integrals are not formed. Type: string; Possible Values: FULL/PARTIAL, FULL, PARTIAL; Default: FULL/PARTIAL. CFOUR_XFIELD (CFOUR)¶CFOUR — Specifies the X-component of an external electric field. The value must be specified as an integer and the field used by the program will be the value of the keyword \(\times 10^{-6}\). This allows field strengths \(|\varepsilon| > 10^{-6}\) to be used. Type: integer; Default: 0. CFOUR_XFOR",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:83720,Performance,perform,performed,83720,"ent optimization cycles. (not in current public version). Type: boolean; Default: true. CFOUR_VIBRATION (CFOUR)¶CFOUR — Specifies whether (harmonic) vibrational frequencies are calculated or not. If the default NO (=0) is specified then no frequencies are calculated. For ANALYTIC, vibrational frequencies are determined from analytically computed second derivatives, and for FINDIF (=2) vibrational frequencies are calculated from a force field obtained by numerical differentiation of analytically evaluated gradients (or even single-point energies) using symmetry-adapted mass-weighted Cartesian coordinates. If vibrational frequencies are calculated, a normal mode analysis using the computed force-constant matrix is performed, rotationally projected frequencies are computed, infrared intensities are determined, and zero-point energies (ZPE) are evaluated. Type: string; Possible Values: NO, ANALYTIC, FINDIF, EXACT; Default: NO. CFOUR_VTRAN (CFOUR)¶CFOUR — This keyword defines what type of integral transformation is to be performed in the program xvtran. FULL/PARTIAL (=0) allows the transformation program to choose the appropriate type of transformation, while FULL (=1) requires a full integral transformation and PARTIAL (=2) means a MBPT(2)-specific transformation where the \((ab \vert cd)\) integrals are not formed. Type: string; Possible Values: FULL/PARTIAL, FULL, PARTIAL; Default: FULL/PARTIAL. CFOUR_XFIELD (CFOUR)¶CFOUR — Specifies the X-component of an external electric field. The value must be specified as an integer and the field used by the program will be the value of the keyword \(\times 10^{-6}\). This allows field strengths \(|\varepsilon| > 10^{-6}\) to be used. Type: integer; Default: 0. CFOUR_XFORM_TOL (CFOUR)¶CFOUR — The tolerance for storing transformed integrals. Integrals less than \(10^{-N}\) are neglected and not stored on disk. Type: integer; Default: 11. CFOUR_YFIELD (CFOUR)¶CFOUR — Specifies the Y-component of an external electric field. The valu",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:87863,Performance,optimiz,optimization,87863," (CCEOM)¶CCEOM — When collapsing Davidson subspace, whether to also include the previous approximate solution (for each root)? This doubles the number of resulting vectors but generally improves convergence. Type: boolean; Default: true. COLLAPSE_WITH_LAST_CC3 (CCEOM)¶CCEOM — Has the same effect as “COLLAPSE_WITH_LAST” but only in CC3 computations and after the initial solution of EOM CCSD. May help efficiency, but hazardous when solving for higher roots. Type: boolean; Default: false. COMPLEX_TOLERANCE (CCEOM)¶CCEOM — Complex tolerance applied in CCEOM computations. Type: conv double; Default: 1e-12. COMPUT_S2 (DFOCC)¶DFOCC — Do compute \(\langle \hat{S}^2 \rangle\) for DF-OMP2/DF-MP2?. Type: boolean; Default: false. COMPUTE_MP4_TRIPLES (FNOCC)¶FNOCC (Expert) — Do compute MP4 triples contribution?. Type: boolean; Default: false. COMPUTE_TRIPLES (FNOCC)¶FNOCC (Expert) — Do compute triples contribution?. Type: boolean; Default: true. CONSECUTIVE_BACKSTEPS (OPTKING)¶OPTKING — Set number of consecutive backward steps allowed in optimization. Type: integer; Default: 0. CORR_ANSATZ (PSIMRCC)¶PSIMRCC — The ansatz to use for MRCC computations. Type: string; Possible Values: SR, MK, BW, APBW; Default: MK. CORR_CCSD_T (PSIMRCC)¶PSIMRCC — The type of CCSD(T) computation to perform. Type: string; Possible Values: STANDARD, PITTNER; Default: STANDARD. CORR_CHARGE (PSIMRCC)¶PSIMRCC — The molecular charge of the target state. Type: integer; Default: 0. CORR_MULTP (PSIMRCC)¶PSIMRCC — The multiplicity, \(M_S(M_S+1)\), of the target state. Must be specified if different from the reference \(M_s\). Type: integer; Default: 1. CORR_WFN (PSIMRCC)¶PSIMRCC — The type of correlated wavefunction. Type: string; Possible Values: PT2, CCSD, MP2-CCSD, CCSD_T; Default: CCSD. COSX_BASIS_TOLERANCE (SCF)¶SCF (Expert) — Screening criteria for basis function values on COSX grids. Type: conv double; Default: 1.0e-10. COSX_DENSITY_TOLERANCE (SCF)¶SCF (Expert) — Screening criteria for shell-pair densiti",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:88106,Performance,perform,perform,88106,"ST_CC3 (CCEOM)¶CCEOM — Has the same effect as “COLLAPSE_WITH_LAST” but only in CC3 computations and after the initial solution of EOM CCSD. May help efficiency, but hazardous when solving for higher roots. Type: boolean; Default: false. COMPLEX_TOLERANCE (CCEOM)¶CCEOM — Complex tolerance applied in CCEOM computations. Type: conv double; Default: 1e-12. COMPUT_S2 (DFOCC)¶DFOCC — Do compute \(\langle \hat{S}^2 \rangle\) for DF-OMP2/DF-MP2?. Type: boolean; Default: false. COMPUTE_MP4_TRIPLES (FNOCC)¶FNOCC (Expert) — Do compute MP4 triples contribution?. Type: boolean; Default: false. COMPUTE_TRIPLES (FNOCC)¶FNOCC (Expert) — Do compute triples contribution?. Type: boolean; Default: true. CONSECUTIVE_BACKSTEPS (OPTKING)¶OPTKING — Set number of consecutive backward steps allowed in optimization. Type: integer; Default: 0. CORR_ANSATZ (PSIMRCC)¶PSIMRCC — The ansatz to use for MRCC computations. Type: string; Possible Values: SR, MK, BW, APBW; Default: MK. CORR_CCSD_T (PSIMRCC)¶PSIMRCC — The type of CCSD(T) computation to perform. Type: string; Possible Values: STANDARD, PITTNER; Default: STANDARD. CORR_CHARGE (PSIMRCC)¶PSIMRCC — The molecular charge of the target state. Type: integer; Default: 0. CORR_MULTP (PSIMRCC)¶PSIMRCC — The multiplicity, \(M_S(M_S+1)\), of the target state. Must be specified if different from the reference \(M_s\). Type: integer; Default: 1. CORR_WFN (PSIMRCC)¶PSIMRCC — The type of correlated wavefunction. Type: string; Possible Values: PT2, CCSD, MP2-CCSD, CCSD_T; Default: CCSD. COSX_BASIS_TOLERANCE (SCF)¶SCF (Expert) — Screening criteria for basis function values on COSX grids. Type: conv double; Default: 1.0e-10. COSX_DENSITY_TOLERANCE (SCF)¶SCF (Expert) — Screening criteria for shell-pair densities in COSX. Type: conv double; Default: 1.0e-10. COSX_INTS_TOLERANCE (SCF)¶SCF — Screening criteria for integrals and intermediates in COSX. Type: conv double; Default: 1.0e-11. COSX_MAXITER_FINAL (SCF)¶SCF — Controls SCF iteration behavior for the large",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:95206,Performance,perform,performed,95206,"res. Type: integer; Default: 8. CUTOFF (OCC)¶OCC — Cutoff value for numerical procedures. Type: integer; Default: 14. CUTOFF_AMPS_PRINT (ADC)¶ADC — Tolerance for extracted or printed amplitudes. This option is only available for the adcc backend. Type: double; Default: 0.01. D_CONVERGENCE (MCSCF)¶MCSCF — Convergence criterion for density, as measured by the orbital gradient. Type: conv double; Default: 1e-6. D_CONVERGENCE (SCF)¶SCF — Convergence criterion for SCF density, defined as the RMS or maximum absolute value of the orbital gradient. See Table SCF Convergence & Algorithm for default convergence criteria for different calculation types. Cfour Interface: Keyword translates into CFOUR_SCF_CONV. Type: conv double; Default: 1e-6. DAMP_INDUCED (PE)¶PE — Enable Thole damping for induced moments. Type: boolean; Default: false. DAMP_MULTIPOLE (PE)¶PE — Enable Thole damping for multipole fields. Type: boolean; Default: false. DAMPING_CONVERGENCE (SCF)¶SCF — The density convergence threshold after which damping is no longer performed, if it is enabled. It is recommended to leave damping on until convergence, which is the default. Cfour Interface: Keyword translates into CFOUR_SCF_DAMPING. Type: conv double; Default: 1.0e-18. DAMPING_FACTOR_INDUCED (PE)¶PE — Thole damping factor for induced moments. Type: double; Default: 2.1304. DAMPING_FACTOR_MULTIPOLE (PE)¶PE — Thole damping factor for multipole fields. Type: double; Default: 2.1304. DAMPING_PERCENTAGE (DCT)¶DCT (Expert) — The amount (percentage) of damping to apply to the orbital update procedure: 0 will result in a full update, 100 will completely stall the update. A value around 20 (which corresponds to 20% of the previous iteration’s density being mixed into the current iteration) can help in cases where oscillatory convergence is observed. Type: double; Default: 0.0. DAMPING_PERCENTAGE (PSIMRCC)¶PSIMRCC — The amount (percentage) of damping to apply to the amplitude updates. 0 will result in a full update, 100 wil",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:114300,Performance,perform,performed,114300," — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 6. DIIS_MAX_VECS (PSIMRCC)¶PSIMRCC — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF)¶SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCT)¶DCT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI)¶DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (OCC)¶OCC — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF)¶SCF — Minimum number of error vectors stored for DIIS extrapolation. Will be removed in v1.7. Type: integer; Default: 2. DIIS_RMS_ERROR (SCF)¶SCF — Use RMS error instead of the more robust absolute error?. Type: boolean; Default: true. DIIS_START (PSIMRCC)¶PSIMRCC — The number of DIIS vectors needed before extrapolation is performed. Type: integer; Default: 2. DIIS_START (SCF)¶SCF — The minimum iteration to start storing DIIS vectors and performing ADIIS/EDIIS. Type: integer; Default: 1. DIIS_START_CONVERGENCE (DCT)¶DCT — Value of RMS of the density cumulant residual and SCF error vector below which DIIS extrapolation starts. Same keyword controls the DIIS extrapolation for the solution of the response equations. Type: conv double; Default: 1e-3. DIIS_START_ITER (DETCI)¶DETCI — Iteration at which to start using DIIS. Type: integer; Default: 1. DIPMOM (DETCI)¶DETCI — Do compute the dipole moment?. Type: boolean; Default: false. DIPMOM (FNOCC)¶FNOCC — Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ACPF, AQCC, CISD, and CEPA(0) methods. Type: boolean; Default: false. DISP_SIZE (FINDIF)¶FINDIF — Displacement size in au for finite-differences. Type: double; Default: 0.005. DISTRIBUTED_MATRIX (SCF)¶SCF (Expert) — The di",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:114417,Performance,perform,performing,114417,"aximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 7. DIIS_MAX_VECS (SCF)¶SCF — Maximum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 10. DIIS_MIN_VECS (DCT)¶DCT (Expert) — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 3. DIIS_MIN_VECS (DETCI)¶DETCI — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (OCC)¶OCC — Minimum number of error vectors stored for DIIS extrapolation. Type: integer; Default: 2. DIIS_MIN_VECS (SCF)¶SCF — Minimum number of error vectors stored for DIIS extrapolation. Will be removed in v1.7. Type: integer; Default: 2. DIIS_RMS_ERROR (SCF)¶SCF — Use RMS error instead of the more robust absolute error?. Type: boolean; Default: true. DIIS_START (PSIMRCC)¶PSIMRCC — The number of DIIS vectors needed before extrapolation is performed. Type: integer; Default: 2. DIIS_START (SCF)¶SCF — The minimum iteration to start storing DIIS vectors and performing ADIIS/EDIIS. Type: integer; Default: 1. DIIS_START_CONVERGENCE (DCT)¶DCT — Value of RMS of the density cumulant residual and SCF error vector below which DIIS extrapolation starts. Same keyword controls the DIIS extrapolation for the solution of the response equations. Type: conv double; Default: 1e-3. DIIS_START_ITER (DETCI)¶DETCI — Iteration at which to start using DIIS. Type: integer; Default: 1. DIPMOM (DETCI)¶DETCI — Do compute the dipole moment?. Type: boolean; Default: false. DIPMOM (FNOCC)¶FNOCC — Compute the dipole moment? Note that dipole moments are only available in the FNOCC module for the ACPF, AQCC, CISD, and CEPA(0) methods. Type: boolean; Default: false. DISP_SIZE (FINDIF)¶FINDIF — Displacement size in au for finite-differences. Type: double; Default: 0.005. DISTRIBUTED_MATRIX (SCF)¶SCF (Expert) — The dimension sizes of the distributed matrix. Type: array; Default: No Default. DKH_ORDER (GLOBALS)¶GLOBALS (Expert) — Order of Dougla",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:120712,Performance,perform,perform,120712,"ation?. Type: boolean; Default: true. DO_DIIS (OCC)¶OCC — Do apply DIIS extrapolation?. Type: boolean; Default: true. DO_DISP_EXCH_SINF (SAPT)¶SAPT (Expert) — For SAPT0 or SAPT(DFT), compute the non-approximated second-order exchange-dispersion term. Type: boolean; Default: false. DO_IND30_EXCH_SINF (SAPT)¶SAPT (Expert) — For SAPT2+3, compute the non-approximated third-order exchange-induction term. Type: boolean; Default: false. DO_IND_EXCH_SINF (SAPT)¶SAPT (Expert) — For SAPT0 or SAPT(DFT), compute the non-approximated second-order exchange-induction term. Type: boolean; Default: false. DO_LEVEL_SHIFT (DFOCC)¶DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: boolean; Default: true. DO_MBPT_DISP (SAPT)¶SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_SCS (DFOCC)¶DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_SOS (DFOCC)¶DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT)¶SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DOCC (GLOBALS)¶GLOBALS — An array containing the number of doubly-occupi",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:120843,Performance,perform,perform,120843,"INF (SAPT)¶SAPT (Expert) — For SAPT0 or SAPT(DFT), compute the non-approximated second-order exchange-dispersion term. Type: boolean; Default: false. DO_IND30_EXCH_SINF (SAPT)¶SAPT (Expert) — For SAPT2+3, compute the non-approximated third-order exchange-induction term. Type: boolean; Default: false. DO_IND_EXCH_SINF (SAPT)¶SAPT (Expert) — For SAPT0 or SAPT(DFT), compute the non-approximated second-order exchange-induction term. Type: boolean; Default: false. DO_LEVEL_SHIFT (DFOCC)¶DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: boolean; Default: true. DO_MBPT_DISP (SAPT)¶SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_SCS (DFOCC)¶DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_SOS (DFOCC)¶DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT)¶SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DOCC (GLOBALS)¶GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF)¶MCSCF — The number of doubly occupied orbital",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:120860,Performance,optimiz,optimizations,120860,"INF (SAPT)¶SAPT (Expert) — For SAPT0 or SAPT(DFT), compute the non-approximated second-order exchange-dispersion term. Type: boolean; Default: false. DO_IND30_EXCH_SINF (SAPT)¶SAPT (Expert) — For SAPT2+3, compute the non-approximated third-order exchange-induction term. Type: boolean; Default: false. DO_IND_EXCH_SINF (SAPT)¶SAPT (Expert) — For SAPT0 or SAPT(DFT), compute the non-approximated second-order exchange-induction term. Type: boolean; Default: false. DO_LEVEL_SHIFT (DFOCC)¶DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: boolean; Default: true. DO_MBPT_DISP (SAPT)¶SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_SCS (DFOCC)¶DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_SOS (DFOCC)¶DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT)¶SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DOCC (GLOBALS)¶GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF)¶MCSCF — The number of doubly occupied orbital",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:121157,Performance,perform,perform,121157,"H_SINF (SAPT)¶SAPT (Expert) — For SAPT0 or SAPT(DFT), compute the non-approximated second-order exchange-induction term. Type: boolean; Default: false. DO_LEVEL_SHIFT (DFOCC)¶DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: boolean; Default: true. DO_MBPT_DISP (SAPT)¶SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_SCS (DFOCC)¶DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_SOS (DFOCC)¶DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT)¶SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DOCC (GLOBALS)¶GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF)¶MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DOI_BASIS_TOLERANCE (DLPNO)¶DLPNO (Expert) — Screening criteria for basis function values on DOI grids. Type: conv double; Default: 1.0e-10. DOI_PRUNING_SCHEME (DLPNO)¶DLPNO (Expert) — Pruning scheme for DOI grids. Type: string; Possible Values: ROBUST, TREUTLER, ",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:121287,Performance,perform,perform,121287,"an; Default: false. DO_LEVEL_SHIFT (DFOCC)¶DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: boolean; Default: true. DO_MBPT_DISP (SAPT)¶SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_SCS (DFOCC)¶DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_SOS (DFOCC)¶DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT)¶SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DOCC (GLOBALS)¶GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF)¶MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DOI_BASIS_TOLERANCE (DLPNO)¶DLPNO (Expert) — Screening criteria for basis function values on DOI grids. Type: conv double; Default: 1.0e-10. DOI_PRUNING_SCHEME (DLPNO)¶DLPNO (Expert) — Pruning scheme for DOI grids. Type: string; Possible Values: ROBUST, TREUTLER, NONE, FLAT, P_GAUSSIAN, D_GAUSSIAN, P_SLATER, D_SLATER, LOG_GAUSSIAN, LOG_SLATER, NONE; Default: ROBUST. DOI_RADIAL_POINTS (DLPNO)¶D",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:121304,Performance,optimiz,optimizations,121304,"an; Default: false. DO_LEVEL_SHIFT (DFOCC)¶DFOCC — Do apply level shifting?. Type: boolean; Default: true. DO_LEVEL_SHIFT (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: boolean; Default: true. DO_MBPT_DISP (SAPT)¶SAPT (Expert) — Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_SCS (DFOCC)¶DFOCC — Do perform spin-component-scaled OMP2 (SCS-OMP2)? In all computation, SCS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SCS-OMP2, one needs to set ‘DO_SCS’ to true. Type: boolean; Default: false. DO_SCS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_SOS (DFOCC)¶DFOCC — Do perform spin-opposite-scaled OMP2 (SOS-OMP2)? In all computation, SOS-OMP2 energy is computed automatically. However, in order to perform geometry optimizations and frequency computations with SOS-OMP2, one needs to set ‘DO_SOS’ to true. Type: boolean; Default: false. DO_SOS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Pass the method name, like scs-mp2, to energy instead. Type: boolean; Default: false. DO_THIRD_ORDER (SAPT)¶SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DOCC (GLOBALS)¶GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF)¶MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DOI_BASIS_TOLERANCE (DLPNO)¶DLPNO (Expert) — Screening criteria for basis function values on DOI grids. Type: conv double; Default: 1.0e-10. DOI_PRUNING_SCHEME (DLPNO)¶DLPNO (Expert) — Pruning scheme for DOI grids. Type: string; Possible Values: ROBUST, TREUTLER, NONE, FLAT, P_GAUSSIAN, D_GAUSSIAN, P_SLATER, D_SLATER, LOG_GAUSSIAN, LOG_SLATER, NONE; Default: ROBUST. DOI_RADIAL_POINTS (DLPNO)¶D",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:122586,Performance,optimiz,optimization,122586,"D_ORDER (SAPT)¶SAPT (Expert) — Do compute third-order corrections?. Type: boolean; Default: false. DOCC (GLOBALS)¶GLOBALS — An array containing the number of doubly-occupied orbitals per irrep (in Cotton order). Type: array; Default: No Default. DOCC (MCSCF)¶MCSCF — The number of doubly occupied orbitals, per irrep. Type: array; Default: No Default. DOI_BASIS_TOLERANCE (DLPNO)¶DLPNO (Expert) — Screening criteria for basis function values on DOI grids. Type: conv double; Default: 1.0e-10. DOI_PRUNING_SCHEME (DLPNO)¶DLPNO (Expert) — Pruning scheme for DOI grids. Type: string; Possible Values: ROBUST, TREUTLER, NONE, FLAT, P_GAUSSIAN, D_GAUSSIAN, P_SLATER, D_SLATER, LOG_GAUSSIAN, LOG_SLATER, NONE; Default: ROBUST. DOI_RADIAL_POINTS (DLPNO)¶DLPNO (Expert) — Number of radial points in DOI grid. Type: integer; Default: 25. DOI_SPHERICAL_POINTS (DLPNO)¶DLPNO (Expert) — Number of spherical points in DOI grid. Type: integer; Default: 50. DYNAMIC_LEVEL (OPTKING)¶OPTKING — Starting level for dynamic optimization (0=nondynamic, higher=>more conservative). Type: integer; Default: 0. E3_SCALE (DFOCC)¶DFOCC — CEPA opposite-spin scaling value from SCS-CCSD. Type: double; Default: 0.25. E3_SCALE (OCC)¶OCC — Scaling value for 3rd order energy correction (S. Grimme, Vol. 24, pp. 1529, J. Comput. Chem.). Type: double; Default: 0.25. E_CONVERGENCE (CCENERGY)¶CCENERGY — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. E_CONVERGENCE (DCT)¶DCT — Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-10. E_CONVERGENCE (DETCI)",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:129761,Performance,perform,perform,129761,"pute, starting with the HOMO. Type: integer; Default: 3. EP2_ORBITALS (DFEP2)¶DFEP2 — Explicitly pick orbitals to use in the EP2 method, overrides EP2_NUM_IP and EP2_NUM_EA options. Input array should be [[orb1, orb2], [], …] for each irrep. Type: array; Default: No Default. EP_EA_POLES (OCC)¶OCC — Do compute EP-OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EP_IP_POLES (OCC)¶OCC — Do compute EP-OCC poles for ionization potentials? Only valid OMP2. Type: boolean; Default: false. EP_MAXITER (OCC)¶OCC — Maximum number of electron propagator iterations. Type: integer; Default: 30. EX_ALLOW (DETCI)¶DETCI (Expert) — An array of length EX_LEVEL specifying whether each excitation type (S,D,T, etc.) is allowed (1 is allowed, 0 is disallowed). Used to specify non-standard CI spaces such as CIST. Type: array; Default: No Default. EX_LEVEL (DETCI)¶DETCI — The CI excitation level. Type: integer; Default: 2. EXCH_SCALE_ALPHA (SAPT)¶SAPT — Whether or not to perform exchange scaling for SAPT exchange components. Default is false, i.e. no scaling. If set to true, performs scaling with \(Exch10 / Exch10(S^2)\). If set to a value \(\alpha\), performs scaling with \((Exch10 / Exch10(S^2))^{\alpha}\). Type: string; Default: FALSE. EXCITATION_RANGE (CCEOM)¶CCEOM (Expert) — The depth into the occupied and valence spaces from which one-electron excitations are seeded into the Davidson guess to the CIS (the default of 2 includes all single excitations between HOMO-1, HOMO, LUMO, and LUMO+1). This CIS is in turn the Davidson guess to the EOM-CC. Expand to capture more exotic excited states in the EOM-CC calculation. Type: integer; Default: 2. EXPLICIT_HAMILTONIAN (CPHF)¶CPHF — Do explicit hamiltonian only?. Type: boolean; Default: false. EXT_FORCE_BEND (OPTKING)¶OPTKING — Specify formula for external forces for angles between atoms. Type: string; Default: No Default. EXT_FORCE_CARTESIAN (OPTKING)¶OPTKING — Symmetry formula for external forces for cart",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:129867,Performance,perform,performs,129867,"n the EP2 method, overrides EP2_NUM_IP and EP2_NUM_EA options. Input array should be [[orb1, orb2], [], …] for each irrep. Type: array; Default: No Default. EP_EA_POLES (OCC)¶OCC — Do compute EP-OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EP_IP_POLES (OCC)¶OCC — Do compute EP-OCC poles for ionization potentials? Only valid OMP2. Type: boolean; Default: false. EP_MAXITER (OCC)¶OCC — Maximum number of electron propagator iterations. Type: integer; Default: 30. EX_ALLOW (DETCI)¶DETCI (Expert) — An array of length EX_LEVEL specifying whether each excitation type (S,D,T, etc.) is allowed (1 is allowed, 0 is disallowed). Used to specify non-standard CI spaces such as CIST. Type: array; Default: No Default. EX_LEVEL (DETCI)¶DETCI — The CI excitation level. Type: integer; Default: 2. EXCH_SCALE_ALPHA (SAPT)¶SAPT — Whether or not to perform exchange scaling for SAPT exchange components. Default is false, i.e. no scaling. If set to true, performs scaling with \(Exch10 / Exch10(S^2)\). If set to a value \(\alpha\), performs scaling with \((Exch10 / Exch10(S^2))^{\alpha}\). Type: string; Default: FALSE. EXCITATION_RANGE (CCEOM)¶CCEOM (Expert) — The depth into the occupied and valence spaces from which one-electron excitations are seeded into the Davidson guess to the CIS (the default of 2 includes all single excitations between HOMO-1, HOMO, LUMO, and LUMO+1). This CIS is in turn the Davidson guess to the EOM-CC. Expand to capture more exotic excited states in the EOM-CC calculation. Type: integer; Default: 2. EXPLICIT_HAMILTONIAN (CPHF)¶CPHF — Do explicit hamiltonian only?. Type: boolean; Default: false. EXT_FORCE_BEND (OPTKING)¶OPTKING — Specify formula for external forces for angles between atoms. Type: string; Default: No Default. EXT_FORCE_CARTESIAN (OPTKING)¶OPTKING — Symmetry formula for external forces for cartesian coordinates on atoms . Type: string; Default: No Default. EXT_FORCE_DIHEDRAL (OPTKING)¶OPTKING — Specify formula ",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:129945,Performance,perform,performs,129945,"hould be [[orb1, orb2], [], …] for each irrep. Type: array; Default: No Default. EP_EA_POLES (OCC)¶OCC — Do compute EP-OCC poles for electron affinities? Only valid for OMP2. Type: boolean; Default: false. EP_IP_POLES (OCC)¶OCC — Do compute EP-OCC poles for ionization potentials? Only valid OMP2. Type: boolean; Default: false. EP_MAXITER (OCC)¶OCC — Maximum number of electron propagator iterations. Type: integer; Default: 30. EX_ALLOW (DETCI)¶DETCI (Expert) — An array of length EX_LEVEL specifying whether each excitation type (S,D,T, etc.) is allowed (1 is allowed, 0 is disallowed). Used to specify non-standard CI spaces such as CIST. Type: array; Default: No Default. EX_LEVEL (DETCI)¶DETCI — The CI excitation level. Type: integer; Default: 2. EXCH_SCALE_ALPHA (SAPT)¶SAPT — Whether or not to perform exchange scaling for SAPT exchange components. Default is false, i.e. no scaling. If set to true, performs scaling with \(Exch10 / Exch10(S^2)\). If set to a value \(\alpha\), performs scaling with \((Exch10 / Exch10(S^2))^{\alpha}\). Type: string; Default: FALSE. EXCITATION_RANGE (CCEOM)¶CCEOM (Expert) — The depth into the occupied and valence spaces from which one-electron excitations are seeded into the Davidson guess to the CIS (the default of 2 includes all single excitations between HOMO-1, HOMO, LUMO, and LUMO+1). This CIS is in turn the Davidson guess to the EOM-CC. Expand to capture more exotic excited states in the EOM-CC calculation. Type: integer; Default: 2. EXPLICIT_HAMILTONIAN (CPHF)¶CPHF — Do explicit hamiltonian only?. Type: boolean; Default: false. EXT_FORCE_BEND (OPTKING)¶OPTKING — Specify formula for external forces for angles between atoms. Type: string; Default: No Default. EXT_FORCE_CARTESIAN (OPTKING)¶OPTKING — Symmetry formula for external forces for cartesian coordinates on atoms . Type: string; Default: No Default. EXT_FORCE_DIHEDRAL (OPTKING)¶OPTKING — Specify formula for external forces for dihedral angles between atoms. Type: string; Default:",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:131923,Performance,optimiz,optimization,131923,"orces for dihedral angles between atoms. Type: string; Default: No Default. EXT_FORCE_DISTANCE (OPTKING)¶OPTKING — Specify formula for external forces for the distance between atoms. Type: string; Default: No Default. EXT_FORCE_OOFP (OPTKING)¶OPTKING — Specify formula for external forces for out-of-plane angles between atoms. Type: string; Default: No Default. EXTERN (SCF)¶SCF — An ExternalPotential (built by Python or nullptr/None). Type: boolean; Default: false. EXTERNAL_POTENTIAL_SYMMETRY (GLOBALS)¶GLOBALS (Expert) — Assume external fields are arranged so that they have symmetry. It is up to the user to know what to do here. The code does NOT help you out in any way!. Type: boolean; Default: false. F_CUT (DLPNO)¶DLPNO (Expert) — Fock matrix threshold for treating ampltudes as coupled during local MP2 iterations. Type: double; Default: 1e-5. FAIL_ON_MAXITER (SCF)¶SCF — Fail if we reach maxiter without converging?. Type: boolean; Default: true. FAVG (MCSCF)¶MCSCF — Do use the average Fock matrix during the SCF optimization?. Type: boolean; Default: false. FAVG_CCSD_T (PSIMRCC)¶PSIMRCC — Do use the averaged Fock matrix over all references in (T) computations?. Type: boolean; Default: false. FAVG_START (MCSCF)¶MCSCF — Iteration at which to begin using the averaged Fock matrix. Type: integer; Default: 5. FCI (DETCI)¶DETCI — Do a full CI (FCI)? If TRUE, overrides the value of EX_LEVEL. Type: boolean; Default: false. FCI_STRINGS (DETCI)¶DETCI (Expert) — Do store strings specifically for FCI? (Defaults to TRUE for FCI.). Type: boolean; Default: false. FD_PROJECT (FINDIF)¶FINDIF — Do discount rotational degrees of freedom in a finite difference frequency calculation. Turned off at non-stationary geometries and in the presence of external perturbations. Type: boolean; Default: true. FILTER_GUESS (DETCI)¶DETCI (Expert) — Do invoke the FILTER_GUESS options that are used to filter out some trial vectors which may not have the appropriate phase convention between two determina",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:137517,Performance,optimiz,optimization,137517,"or in the (noninteracting) fragment?. Type: string; Possible Values: FRAGMENT, WHOLE, NONE; Default: FRAGMENT. FISAPT_LINK_SELECTION (FISAPT)¶FISAPT — Specification algorithm for link bonds in ISAPT. Type: string; Possible Values: AUTOMATIC, MANUAL; Default: AUTOMATIC. FISAPT_MANUAL_LINKS (FISAPT)¶FISAPT — Manual link bond specification [[Atom1, Atom2], …]. Type: array; Default: No Default. FISAPT_MEM_SAFETY_FACTOR (FISAPT)¶FISAPT (Expert) — Memory safety factor for heavy FISAPT operations. Type: double; Default: 0.9. FISAPT_PLOT_FILEPATH (FISAPT)¶FISAPT — Filepath to drop scalar data within input file directory. Type: string; Default: plot/. FLEXIBLE_G_CONVERGENCE (OPTKING)¶OPTKING — Even if a user-defined threshold is set, allow for normal, flexible convergence criteria. Type: boolean; Default: false. FOLLOW_ROOT (DETCI)¶DETCI — The root to write out the two-particle density matrix for (the one-particle density matrices are written for all roots). Useful for a state-specific CASSCF or CI optimization on an excited state. Type: integer; Default: 0. FOLLOW_ROOT (MCSCF)¶MCSCF — Which solution of the SCF equations to find, where 1 is the SCF ground state. Type: integer; Default: 1. FOLLOW_ROOT (PSIMRCC)¶PSIMRCC — Which root of the effective hamiltonian is the target state?. Type: integer; Default: 1. FOLLOW_STEP_INCREMENT (SCF)¶SCF (Expert) — When using STABILITY_ANALYSIS = FOLLOW, the increment to modify FOLLOW_STEP_SCALE value if we end up in the same SCF solution. Type: double; Default: 0.2. FOLLOW_STEP_SCALE (SCF)¶SCF (Expert) — When using STABILITY_ANALYSIS FOLLOW, how much to scale the step along the eigenvector by. A full step of \(pi/2\) corresponds to a value of 1.0. Type: double; Default: 0.5. FOLLOW_VECTOR (DETCI)¶DETCI (Expert) — In following a particular root (see FOLLOW_ROOT), sometimes the root number changes. To follow a root of a particular character, one can specify a list of determinants and their coefficients, and the code will follow the root with ",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:143390,Performance,optimiz,optimized,143390,"make sure to fill in the list up to the highest atomic number included in any calculations. This option is only used if FREEZE_CORE is set to POLICY. Type: array; Default: No Default. FREEZE_INTERFRAG (OPTKING)¶OPTKING — Do freeze all interfragment modes?. Type: boolean; Default: false. FREEZE_INTRAFRAG (OPTKING)¶OPTKING — Do freeze all fragments rigid?. Type: boolean; Default: false. FROZEN_BEND (OPTKING)¶OPTKING — Specify angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_CARTESIAN (OPTKING)¶OPTKING — Specify atom and X, XY, XYZ, … to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DIHEDRAL (OPTKING)¶OPTKING — Specify dihedral angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DISTANCE (OPTKING)¶OPTKING — Specify distances between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DOCC (GLOBALS)¶GLOBALS — An array containing the number of frozen doubly-occupied orbitals per irrep (these are not excited in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_DOCC and FREEZE_CORE. Type: array; Default: No Default. FROZEN_OOFP (OPTKING)¶OPTKING — Specify out-of-plane angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_UOCC (GLOBALS)¶GLOBALS — An array containing the number of frozen unoccupied orbitals per irrep (these are not populated in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_UOCC. Type: array; Default: No Default. FULL_HESS_EVERY (OPTKING)¶OPTKING — Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. FULL_MATRIX (CCEOM)¶CCEOM — Do use full effective Hamiltonian matrix?. Type: boolean; Default: false. G_CONV",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:143798,Performance,optimiz,optimized,143798,"OPTKING — Specify angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_CARTESIAN (OPTKING)¶OPTKING — Specify atom and X, XY, XYZ, … to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DIHEDRAL (OPTKING)¶OPTKING — Specify dihedral angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DISTANCE (OPTKING)¶OPTKING — Specify distances between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DOCC (GLOBALS)¶GLOBALS — An array containing the number of frozen doubly-occupied orbitals per irrep (these are not excited in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_DOCC and FREEZE_CORE. Type: array; Default: No Default. FROZEN_OOFP (OPTKING)¶OPTKING — Specify out-of-plane angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_UOCC (GLOBALS)¶GLOBALS — An array containing the number of frozen unoccupied orbitals per irrep (these are not populated in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_UOCC. Type: array; Default: No Default. FULL_HESS_EVERY (OPTKING)¶OPTKING — Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. FULL_MATRIX (CCEOM)¶CCEOM — Do use full effective Hamiltonian matrix?. Type: boolean; Default: false. G_CONVERGENCE (OPTKING)¶OPTKING — Set of optimization criteria. Specification of any MAX_*_G_CONVERGENCE or RMS_*_G_CONVERGENCE options will append to overwrite the criteria set here unless FLEXIBLE_G_CONVERGENCE is also on. See Table Geometry Convergence for details. Type: string; Possible Values: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, INTERFRAG_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: ",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:143994,Performance,optimiz,optimization,143994,"ault. FROZEN_DIHEDRAL (OPTKING)¶OPTKING — Specify dihedral angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DISTANCE (OPTKING)¶OPTKING — Specify distances between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DOCC (GLOBALS)¶GLOBALS — An array containing the number of frozen doubly-occupied orbitals per irrep (these are not excited in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_DOCC and FREEZE_CORE. Type: array; Default: No Default. FROZEN_OOFP (OPTKING)¶OPTKING — Specify out-of-plane angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_UOCC (GLOBALS)¶GLOBALS — An array containing the number of frozen unoccupied orbitals per irrep (these are not populated in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_UOCC. Type: array; Default: No Default. FULL_HESS_EVERY (OPTKING)¶OPTKING — Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. FULL_MATRIX (CCEOM)¶CCEOM — Do use full effective Hamiltonian matrix?. Type: boolean; Default: false. G_CONVERGENCE (OPTKING)¶OPTKING — Set of optimization criteria. Specification of any MAX_*_G_CONVERGENCE or RMS_*_G_CONVERGENCE options will append to overwrite the criteria set here unless FLEXIBLE_G_CONVERGENCE is also on. See Table Geometry Convergence for details. Type: string; Possible Values: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, INTERFRAG_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: QCHEM. GAUGE (ADC)¶ADC — Specifies the choice of representation of the electric dipole operator. * Acceptable values are LENGTH (default) and VELOCITY. Type: string; Possible Values: LENGTH, VELOCITY; Default: LENGTH. GAUGE ",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:144346,Performance,optimiz,optimization,144346,"excited in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_DOCC and FREEZE_CORE. Type: array; Default: No Default. FROZEN_OOFP (OPTKING)¶OPTKING — Specify out-of-plane angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_UOCC (GLOBALS)¶GLOBALS — An array containing the number of frozen unoccupied orbitals per irrep (these are not populated in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_UOCC. Type: array; Default: No Default. FULL_HESS_EVERY (OPTKING)¶OPTKING — Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. FULL_MATRIX (CCEOM)¶CCEOM — Do use full effective Hamiltonian matrix?. Type: boolean; Default: false. G_CONVERGENCE (OPTKING)¶OPTKING — Set of optimization criteria. Specification of any MAX_*_G_CONVERGENCE or RMS_*_G_CONVERGENCE options will append to overwrite the criteria set here unless FLEXIBLE_G_CONVERGENCE is also on. See Table Geometry Convergence for details. Type: string; Possible Values: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, INTERFRAG_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: QCHEM. GAUGE (ADC)¶ADC — Specifies the choice of representation of the electric dipole operator. * Acceptable values are LENGTH (default) and VELOCITY. Type: string; Possible Values: LENGTH, VELOCITY; Default: LENGTH. GAUGE (CCDENSITY)¶CCDENSITY — The type of gauge to use for properties. Type: string; Default: LENGTH. GAUGE (CCRESPONSE)¶CCRESPONSE — Specifies the choice of representation of the electric dipole operator. For polarizability, this keyword is ignored and LENGTH gauge is computed. For optical rotation and raman optical activity, this keyword is active, and acceptable values are LENGTH for the usua",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:146962,Performance,optimiz,optimization,146962,"a file should be provided. Type: integer; Default: 2. GDMA_MULTIPOLE_UNITS (GDMA)¶GDMA — Whether to print DMA results in atomic units or SI. Type: string; Possible Values: AU; Default: AU SI. GDMA_ORIGIN (GDMA)¶GDMA — The origin (in Angstrom, expressed as an [x, y, z] array) about which the total multipoles will be computed during DMA. Useful for determining single site expansions at an arbitrary point. Type: array; Default: No Default. GDMA_RADIUS (GDMA)¶GDMA — The radii to be used, overriding the defaults. Specified as an array [ n1, r1, n2, r2, … ] where n1,n2,n3… are atom type strings and r1,r2,r3 are radii in Angstrom. Type: array; Default: No Default. GDMA_SWITCH (GDMA)¶GDMA — The value to switch between the older standard DMA and the new grid-based approach. Pairs of primitives whose exponents sum is above this value will be treated using standard DMA. Set to 0 to force all pairs to be treated with standard DMA. Type: double; Default: 4.0. GEOM_MAXITER (OPTKING)¶OPTKING — Maximum number of geometry optimization steps. Type: integer; Default: 50. GRADIENT_WRITE (FINDIF)¶FINDIF — Do write a gradient output file? If so, the filename will end in .grad, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. GUESS (SCF)¶SCF — The type of guess orbitals. See Initial Guess for what the options mean and what the defaults are. Type: string; Possible Values: AUTO, CORE, GWH, SAD, SADNO, SAP, SAPGAU, HUCKEL, MODHUCKEL, READ; Default: AUTO. GUESS_MIX (SCF)¶SCF — Mix the HOMO/LUMO in UHF or UKS to break alpha/beta spatial symmetry. Useful to produce broken-symmetry unrestricted solutions. Notice that this procedure is defined only for calculations in C1 symmetry. Type: boolean; Default: false. GUESS_PERSIST (SCF)¶SCF — If true, then repeat the specified guess procedure for the orbitals every time - even during a geometry optimization. Type: boolean; Default: fa",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:147901,Performance,optimiz,optimization,147901,"o be treated with standard DMA. Type: double; Default: 4.0. GEOM_MAXITER (OPTKING)¶OPTKING — Maximum number of geometry optimization steps. Type: integer; Default: 50. GRADIENT_WRITE (FINDIF)¶FINDIF — Do write a gradient output file? If so, the filename will end in .grad, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. GUESS (SCF)¶SCF — The type of guess orbitals. See Initial Guess for what the options mean and what the defaults are. Type: string; Possible Values: AUTO, CORE, GWH, SAD, SADNO, SAP, SAPGAU, HUCKEL, MODHUCKEL, READ; Default: AUTO. GUESS_MIX (SCF)¶SCF — Mix the HOMO/LUMO in UHF or UKS to break alpha/beta spatial symmetry. Useful to produce broken-symmetry unrestricted solutions. Notice that this procedure is defined only for calculations in C1 symmetry. Type: boolean; Default: false. GUESS_PERSIST (SCF)¶SCF — If true, then repeat the specified guess procedure for the orbitals every time - even during a geometry optimization. Type: boolean; Default: false. GUESS_R_CONVERGENCE (DCT)¶DCT — Convergence criterion for the density cumulant and orbital guess for the variationally orbital-optimized DFT methods. Currently only available for ALGORITHM = SIMULTANEOUS. Type: conv double; Default: 1e-3. GUESS_VECTOR (DETCI)¶DETCI (Expert) — Guess vector type. Accepted values are UNIT for a unit vector guess (NUM_ROOTS and NUM_INIT_VECS must both be 1); H0_BLOCK to use eigenvectors from the H0 BLOCK submatrix (default); DFILE to use NUM_ROOTS previously converged vectors in the D file;. Type: string; Possible Values: UNIT, H0_BLOCK, DFILE; Default: H0_BLOCK. H0_BLOCK_COUPLING (DETCI)¶DETCI (Expert) — Do use coupling block in preconditioner?. Type: boolean; Default: false. H0_BLOCK_COUPLING_SIZE (DETCI)¶DETCI (Expert) — Parameters which specifies the size of the coupling block within the generalized davidson preconditioner. Type: integer; Default: 0.",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:148073,Performance,optimiz,optimized,148073,"RITE (FINDIF)¶FINDIF — Do write a gradient output file? If so, the filename will end in .grad, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. GUESS (SCF)¶SCF — The type of guess orbitals. See Initial Guess for what the options mean and what the defaults are. Type: string; Possible Values: AUTO, CORE, GWH, SAD, SADNO, SAP, SAPGAU, HUCKEL, MODHUCKEL, READ; Default: AUTO. GUESS_MIX (SCF)¶SCF — Mix the HOMO/LUMO in UHF or UKS to break alpha/beta spatial symmetry. Useful to produce broken-symmetry unrestricted solutions. Notice that this procedure is defined only for calculations in C1 symmetry. Type: boolean; Default: false. GUESS_PERSIST (SCF)¶SCF — If true, then repeat the specified guess procedure for the orbitals every time - even during a geometry optimization. Type: boolean; Default: false. GUESS_R_CONVERGENCE (DCT)¶DCT — Convergence criterion for the density cumulant and orbital guess for the variationally orbital-optimized DFT methods. Currently only available for ALGORITHM = SIMULTANEOUS. Type: conv double; Default: 1e-3. GUESS_VECTOR (DETCI)¶DETCI (Expert) — Guess vector type. Accepted values are UNIT for a unit vector guess (NUM_ROOTS and NUM_INIT_VECS must both be 1); H0_BLOCK to use eigenvectors from the H0 BLOCK submatrix (default); DFILE to use NUM_ROOTS previously converged vectors in the D file;. Type: string; Possible Values: UNIT, H0_BLOCK, DFILE; Default: H0_BLOCK. H0_BLOCK_COUPLING (DETCI)¶DETCI (Expert) — Do use coupling block in preconditioner?. Type: boolean; Default: false. H0_BLOCK_COUPLING_SIZE (DETCI)¶DETCI (Expert) — Parameters which specifies the size of the coupling block within the generalized davidson preconditioner. Type: integer; Default: 0. H0_BLOCKSIZE (DETCI)¶DETCI (Expert) — This parameter specifies the size of the H0 block of the Hamiltonian which is solved exactly. The n determinants with the lowest SCF energy",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:153001,Performance,perform,perform,153001,"f HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 1.00. HESS_UPDATE_LIMIT_SCALE (OPTKING)¶OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 0.50. HESS_UPDATE_USE_LAST (OPTKING)¶OPTKING — Number of previous steps to use in Hessian update, 0 uses all. Type: integer; Default: 4. HESSIAN_WRITE (FINDIF)¶FINDIF — Do write a hessian output file? If so, the filename will end in .hess, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. ICORE (DETCI)¶DETCI — Specifies how to handle buffering of CI vectors. A value of 0 makes the program perform I/O one RAS subblock at a time; 1 uses entire CI vectors at a time; and 2 uses one irrep block at a time. Values of 0 or 2 cause some inefficiency in the I/O (requiring multiple reads of the C vector when constructing H in the iterative subspace if DIAG_METHOD = SEM), but require less core memory. Type: integer; Default: 1. INCFOCK (SCF)¶SCF — Do perform incremental Fock build?. Type: boolean; Default: false. INCFOCK_CONVERGENCE (SCF)¶SCF — The density threshold at which to stop building the Fock matrix incrementally. Type: conv double; Default: 1.0e-5. INCFOCK_FULL_FOCK_EVERY (SCF)¶SCF — Frequency with which to compute the full Fock matrix if using INCFOCK . N means rebuild every N SCF iterations to avoid accumulating error from the incremental procedure. Type: integer; Default: 5. INDUCED_CONVERGENCE (PE)¶PE — Threshold for induced moments convergence. Type: conv double; Default: 1e-8. INTCOS_GENERATE_EXIT (OPTKING)¶OPTKING — Do only generate the internal coordinates and then stop?. Type: boolean; Default: false. IN",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:153358,Performance,perform,perform,153358," limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 0.50. HESS_UPDATE_USE_LAST (OPTKING)¶OPTKING — Number of previous steps to use in Hessian update, 0 uses all. Type: integer; Default: 4. HESSIAN_WRITE (FINDIF)¶FINDIF — Do write a hessian output file? If so, the filename will end in .hess, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. ICORE (DETCI)¶DETCI — Specifies how to handle buffering of CI vectors. A value of 0 makes the program perform I/O one RAS subblock at a time; 1 uses entire CI vectors at a time; and 2 uses one irrep block at a time. Values of 0 or 2 cause some inefficiency in the I/O (requiring multiple reads of the C vector when constructing H in the iterative subspace if DIAG_METHOD = SEM), but require less core memory. Type: integer; Default: 1. INCFOCK (SCF)¶SCF — Do perform incremental Fock build?. Type: boolean; Default: false. INCFOCK_CONVERGENCE (SCF)¶SCF — The density threshold at which to stop building the Fock matrix incrementally. Type: conv double; Default: 1.0e-5. INCFOCK_FULL_FOCK_EVERY (SCF)¶SCF — Frequency with which to compute the full Fock matrix if using INCFOCK . N means rebuild every N SCF iterations to avoid accumulating error from the incremental procedure. Type: integer; Default: 5. INDUCED_CONVERGENCE (PE)¶PE — Threshold for induced moments convergence. Type: conv double; Default: 1e-8. INTCOS_GENERATE_EXIT (OPTKING)¶OPTKING — Do only generate the internal coordinates and then stop?. Type: boolean; Default: false. INTEGRAL_CUTOFF (DFOCC)¶DFOCC — Cutoff value for DF integrals. Type: integer; Default: 9. INTEGRAL_PACKAGE (GLOBALS)¶GLOBALS — Integral package to use. If compiled with Simint support, change this option to use them; LibInt2 is used otherwise. Type: string; Possible Values: LIBINT2, SIMINT; Default: LIBINT2. INTERFRAG_CO",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:158368,Performance,perform,performed,158368,"o be gained from loosening it, especially for higher-order SAPT. Type: conv double; Default: 1.0e-12. INTS_TOLERANCE (SCF)¶SCF — Screening threshold for the chosen screening method (SCHWARZ, CSAM, DENSITY) Absolute value below which TEI are neglected. Type: conv double; Default: 1e-12. IP_POLES (OCC)¶OCC — Do compute OCC poles for ionization potentials? Only valid OMP2. Type: boolean; Default: false. IRC_DIRECTION (OPTKING)¶OPTKING — IRC mapping direction. Type: string; Possible Values: FORWARD, BACKWARD; Default: FORWARD. IRC_POINTS (OPTKING)¶OPTKING — Maximum number of IRC points to collect before stopping. Type: integer; Default: 20. IRC_STEP_SIZE (OPTKING)¶OPTKING — IRC step size in bohr(amu)\(^{1/2}\). Type: double; Default: 0.2. ISOTROPIC_POL (PE)¶PE — Make polarizabilities isotropic. Type: boolean; Default: false. ISTOP (DETCI)¶DETCI — Do stop DETCI after string information is formed and before integrals are read?. Type: boolean; Default: false. JOBTYPE (CCLAMBDA)¶CCLAMBDA (Expert) — Type of job being performed. Type: string; Default: No Default. KIND (ADC)¶ADC — The kind of states to compute. Type: string; Possible Values: SINGLET, TRIPLET, SPIN_FLIP, ANY; Default: SINGLET. LEVEL_SHIFT (DFOCC)¶DFOCC — Level shift to aid convergence. Type: double; Default: 0.02. LEVEL_SHIFT (MCSCF)¶MCSCF — Level shift to aid convergence. Type: double; Default: 0.0. LEVEL_SHIFT (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 0.02. LEVEL_SHIFT (SCF)¶SCF — Do use a level shift?. Type: double; Default: 0.0. LEVEL_SHIFT_CUTOFF (SCF)¶SCF — DIIS error at which to stop applying the level shift. Type: double; Default: 1e-2. LINEAR (CCRESPONSE)¶CCRESPONSE — Do Bartlett size-extensive linear model?. Type: boolean; Default: false. LINEQ_SOLVER (DFOCC)¶DFOCC — The solver will be used for simultaneous linear equations. Type: string; Possible Values: CDGESV, FLIN, POPLE; Default: CDGESV. LINK_INTS_TOLERANCE (SCF)¶SCF — The screening tolerance used for ERI/Dens",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:167688,Performance,perform,performed,167688," approximation when computing LS-THC factorization?. Type: boolean; Default: true. LS_THC_PRUNING_SCHEME (GLOBALS)¶GLOBALS (Expert) — Pruning scheme for LS-THC grids. Type: string; Default: ROBUST. LS_THC_RADIAL_POINTS (GLOBALS)¶GLOBALS — Number of radial points in LS-THC grid. Type: integer; Default: 10. LS_THC_S_EPSILON (GLOBALS)¶GLOBALS (Expert) — Tolerance for pseudoinversion of grid point overlap matrix (Parrish 2012 eq. 30). Type: double; Default: 1.0e-10. LS_THC_SPHERICAL_POINTS (GLOBALS)¶GLOBALS — Number of spherical points in LS-THC grid. Type: integer; Default: 50. LS_THC_WEIGHTS_TOLERANCE (GLOBALS)¶GLOBALS (Expert) — Grid weights cutoff for LS-THC grids. Type: conv double; Default: 1.0e-12. LSE (DETCI)¶DETCI — Do use least-squares extrapolation in iterative solution of CI vector?. Type: boolean; Default: false. LSE_COLLAPSE (DETCI)¶DETCI — Number of iterations between least-squares extrapolations. Type: integer; Default: 3. LSE_TOLERANCE (DETCI)¶DETCI — Minimum converged energy for least-squares extrapolation to be performed. Type: conv double; Default: 3. MADMP2_SLEEP (DFMP2)¶DFMP2 (Expert) — A helpful option, used only in debugging the MADNESS version. Type: integer; Default: 0. MAT_NUM_COLUMN_PRINT (GLOBALS)¶GLOBALS (Expert) — Number of columns to print in calls to Matrix::print_mat. Type: integer; Default: 5. MAX_ATTEMPTS (SCF)¶SCF (Expert) — When using STABILITY_ANALYSIS FOLLOW, maximum number of orbital optimization attempts to make the wavefunction stable. Type: integer; Default: 1. MAX_CCD_DIISVECS (SAPT)¶SAPT — Maximum number of vectors used in CCD-DIIS. Type: integer; Default: 10. MAX_DISP_G_CONVERGENCE (OPTKING)¶OPTKING — Convergence criterion for geometry optmization: maximum displacement (internal coordinates, atomic units). Type: conv double; Default: 1.2e-3. MAX_ENERGY_G_CONVERGENCE (OPTKING)¶OPTKING — Convergence criterion for geometry optmization: maximum energy change. Type: conv double; Default: 1.0e-6. MAX_FORCE_G_CONVERGENCE (OPTKING)",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:168090,Performance,optimiz,optimization,168090,"2012 eq. 30). Type: double; Default: 1.0e-10. LS_THC_SPHERICAL_POINTS (GLOBALS)¶GLOBALS — Number of spherical points in LS-THC grid. Type: integer; Default: 50. LS_THC_WEIGHTS_TOLERANCE (GLOBALS)¶GLOBALS (Expert) — Grid weights cutoff for LS-THC grids. Type: conv double; Default: 1.0e-12. LSE (DETCI)¶DETCI — Do use least-squares extrapolation in iterative solution of CI vector?. Type: boolean; Default: false. LSE_COLLAPSE (DETCI)¶DETCI — Number of iterations between least-squares extrapolations. Type: integer; Default: 3. LSE_TOLERANCE (DETCI)¶DETCI — Minimum converged energy for least-squares extrapolation to be performed. Type: conv double; Default: 3. MADMP2_SLEEP (DFMP2)¶DFMP2 (Expert) — A helpful option, used only in debugging the MADNESS version. Type: integer; Default: 0. MAT_NUM_COLUMN_PRINT (GLOBALS)¶GLOBALS (Expert) — Number of columns to print in calls to Matrix::print_mat. Type: integer; Default: 5. MAX_ATTEMPTS (SCF)¶SCF (Expert) — When using STABILITY_ANALYSIS FOLLOW, maximum number of orbital optimization attempts to make the wavefunction stable. Type: integer; Default: 1. MAX_CCD_DIISVECS (SAPT)¶SAPT — Maximum number of vectors used in CCD-DIIS. Type: integer; Default: 10. MAX_DISP_G_CONVERGENCE (OPTKING)¶OPTKING — Convergence criterion for geometry optmization: maximum displacement (internal coordinates, atomic units). Type: conv double; Default: 1.2e-3. MAX_ENERGY_G_CONVERGENCE (OPTKING)¶OPTKING — Convergence criterion for geometry optmization: maximum energy change. Type: conv double; Default: 1.0e-6. MAX_FORCE_G_CONVERGENCE (OPTKING)¶OPTKING — Convergence criterion for geometry optmization: maximum force (internal coordinates, atomic units). Type: conv double; Default: 3.0e-4. MAX_MEM_BUF (SCF)¶SCF — Max memory per buf for PK algo REORDER, for debug and tuning. Type: integer; Default: 0. MAX_MOGRAD_CONVERGENCE (DFOCC)¶DFOCC — Convergence criterion for maximum orbital gradient. If this keyword is not set by the user, DFOCC will estimate and use a v",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:175963,Performance,optimiz,optimization,175963,"the given excitation level EX_LEVEL. Type: boolean; Default: true. MIXED4 (DETCI)¶DETCI (Expert) — Do allow “mixed” excitations involving RAS IV into the CI space. Useful to specify a split-virtual CISD[TQ] computation. If FALSE, then if there are any electrons in RAS IV, then the number of holes in RAS I cannot exceed the given excitation level EX_LEVEL. Type: boolean; Default: true. MO_DIIS_NUM_VECS (DFOCC)¶DFOCC — Number of vectors used in orbital DIIS. Type: integer; Default: 6. MO_MAXITER (DFOCC)¶DFOCC — Maximum number of iterations to determine the orbitals. Type: integer; Default: 100. MO_MAXITER (OCC)¶OCC — Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. MO_READ (MCSCF)¶MCSCF — Do read in from file the MOs from a previous computation?. Type: boolean; Default: true. MO_READ (OCC)¶OCC — Do read coefficient matrices from external files of a previous OMP2 or OMP3 computation?. Type: boolean; Default: false. MO_STEP_MAX (DFOCC)¶DFOCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_STEP_MAX (OCC)¶OCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_WRITE (OCC)¶OCC — Do write coefficient matrices to external files for direct reading MOs in a subsequent job?. Type: boolean; Default: false. MODULE (CPHF)¶CPHF — What app to test?. Type: string; Possible Values: RCPHF; Default: RCPHF. MOGRAD_DAMPING (OCC)¶OCC — Damping factor for the orbital gradient (Rendell et al., JCP, vol. 87, pp. 5976, 1987). Type: double; Default: 1.0. MOLDEN_WITH_VIRTUAL (GLOBALS)¶GLOBALS — Write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs (false). Type: boolean; Default: true. MOLDEN_WRITE (DFOCC)¶DFOCC — Do write a MOLDEN output file? If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. MOLDEN_WRITE (SCF)¶SC",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:176068,Performance,optimiz,optimization,176068," “mixed” excitations involving RAS IV into the CI space. Useful to specify a split-virtual CISD[TQ] computation. If FALSE, then if there are any electrons in RAS IV, then the number of holes in RAS I cannot exceed the given excitation level EX_LEVEL. Type: boolean; Default: true. MO_DIIS_NUM_VECS (DFOCC)¶DFOCC — Number of vectors used in orbital DIIS. Type: integer; Default: 6. MO_MAXITER (DFOCC)¶DFOCC — Maximum number of iterations to determine the orbitals. Type: integer; Default: 100. MO_MAXITER (OCC)¶OCC — Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. MO_READ (MCSCF)¶MCSCF — Do read in from file the MOs from a previous computation?. Type: boolean; Default: true. MO_READ (OCC)¶OCC — Do read coefficient matrices from external files of a previous OMP2 or OMP3 computation?. Type: boolean; Default: false. MO_STEP_MAX (DFOCC)¶DFOCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_STEP_MAX (OCC)¶OCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_WRITE (OCC)¶OCC — Do write coefficient matrices to external files for direct reading MOs in a subsequent job?. Type: boolean; Default: false. MODULE (CPHF)¶CPHF — What app to test?. Type: string; Possible Values: RCPHF; Default: RCPHF. MOGRAD_DAMPING (OCC)¶OCC — Damping factor for the orbital gradient (Rendell et al., JCP, vol. 87, pp. 5976, 1987). Type: double; Default: 1.0. MOLDEN_WITH_VIRTUAL (GLOBALS)¶GLOBALS — Write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs (false). Type: boolean; Default: true. MOLDEN_WRITE (DFOCC)¶DFOCC — Do write a MOLDEN output file? If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. MOLDEN_WRITE (SCF)¶SCF — Do write a MOLDEN output file? If so, the filename will end in .molden, and the prefix is determined by",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:177983,Performance,perform,perform,177983,"ile? If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. MOM_OCC (SCF)¶SCF — The absolute indices of orbitals to excite from in MOM (+/- for alpha/beta). Type: array; Default: No Default. MOM_START (SCF)¶SCF — The iteration to start MOM on (or 0 for no MOM). Type: integer; Default: 0. MOM_VIR (SCF)¶SCF — The absolute indices of orbitals to excite to in MOM (+/- for alpha/beta). Type: array; Default: No Default. MP2_AMP_TYPE (DFOCC)¶DFOCC — The algorithm that used to handle mp2 amplitudes. The DIRECT option means compute amplitudes on the fly * whenever they are necessary. Type: string; Possible Values: DIRECT, CONV; Default: DIRECT. MP2_AMPS_PRINT (CCENERGY)¶CCENERGY — Do print the MP2 amplitudes which are the starting guesses for RHF and UHF reference functions?. Type: boolean; Default: false. MP2_CCSD_METHOD (PSIMRCC)¶PSIMRCC — How to perform MP2_CCSD computations. Type: string; Possible Values: I, IA, II; Default: II. MP2_GUESS (PSIMRCC)¶PSIMRCC — Do start from a MP2 guess?. Type: boolean; Default: true. MP2_OS_SCALE (CCENERGY)¶CCENERGY — MP2 opposite-spin scaling value. Type: double; Default: 1.20. MP2_OS_SCALE (DFMP2)¶DFMP2 — OS Scale. Type: double; Default: 6.0. MP2_OS_SCALE (DFOCC)¶DFOCC — MP2 opposite-spin scaling value. Type: double; Default: 6.0. MP2_OS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 6.0. MP2_SCALE_OS (FNOCC)¶FNOCC — Opposite-spin scaling factor for SCS-MP2. Type: double; Default: 1.20. MP2_SCALE_SS (FNOCC)¶FNOCC — Same-spin scaling factor for SCS-MP2. Type: double; Default: 1.0. MP2_SOS_SCALE (DFOCC)¶DFOCC — MP2 Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. MP2_SOS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.3. MP2_SOS_SCALE2 (DFOCC)¶DFOCC — Spin-opposite scaling (SOS) value for optimized",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:178967,Performance,optimiz,optimized-,178967,"_CCSD_METHOD (PSIMRCC)¶PSIMRCC — How to perform MP2_CCSD computations. Type: string; Possible Values: I, IA, II; Default: II. MP2_GUESS (PSIMRCC)¶PSIMRCC — Do start from a MP2 guess?. Type: boolean; Default: true. MP2_OS_SCALE (CCENERGY)¶CCENERGY — MP2 opposite-spin scaling value. Type: double; Default: 1.20. MP2_OS_SCALE (DFMP2)¶DFMP2 — OS Scale. Type: double; Default: 6.0. MP2_OS_SCALE (DFOCC)¶DFOCC — MP2 opposite-spin scaling value. Type: double; Default: 6.0. MP2_OS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 6.0. MP2_SCALE_OS (FNOCC)¶FNOCC — Opposite-spin scaling factor for SCS-MP2. Type: double; Default: 1.20. MP2_SCALE_SS (FNOCC)¶FNOCC — Same-spin scaling factor for SCS-MP2. Type: double; Default: 1.0. MP2_SOS_SCALE (DFOCC)¶DFOCC — MP2 Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. MP2_SOS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.3. MP2_SOS_SCALE2 (DFOCC)¶DFOCC — Spin-opposite scaling (SOS) value for optimized-MP2 orbitals. Type: double; Default: 1.2. MP2_SOS_SCALE2 (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.2. MP2_SS_SCALE (CCENERGY)¶CCENERGY — MP2 same-spin scaling value. Type: double; Default: 1.0. MP2_SS_SCALE (DFMP2)¶DFMP2 — SS Scale. Type: double; Default: 1.0. MP2_SS_SCALE (DFOCC)¶DFOCC — MP2 same-spin scaling value. Type: double; Default: 1.0. MP2_SS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.0. MP2_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for MP2 computation. See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: DF. MP_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for MPn ( \(n>2\) ) computation (e.g., MP3 or MP2.5 or MP4(SDQ)). See Cross-module Redundancies for details. Since v1.4, default for non-orbital-optimized MP2.5 and MP3 is DF. Type: string; Possible Values: DF, CONV, CD; Default: CONV. MPN (DETCI)¶DETCI — Do compute the ",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:179818,Performance,optimiz,optimized,179818,"LE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.3. MP2_SOS_SCALE2 (DFOCC)¶DFOCC — Spin-opposite scaling (SOS) value for optimized-MP2 orbitals. Type: double; Default: 1.2. MP2_SOS_SCALE2 (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.2. MP2_SS_SCALE (CCENERGY)¶CCENERGY — MP2 same-spin scaling value. Type: double; Default: 1.0. MP2_SS_SCALE (DFMP2)¶DFMP2 — SS Scale. Type: double; Default: 1.0. MP2_SS_SCALE (DFOCC)¶DFOCC — MP2 same-spin scaling value. Type: double; Default: 1.0. MP2_SS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.0. MP2_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for MP2 computation. See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: DF. MP_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for MPn ( \(n>2\) ) computation (e.g., MP3 or MP2.5 or MP4(SDQ)). See Cross-module Redundancies for details. Since v1.4, default for non-orbital-optimized MP2.5 and MP3 is DF. Type: string; Possible Values: DF, CONV, CD; Default: CONV. MPN (DETCI)¶DETCI — Do compute the MPn series out to kth order where k is determined by MAX_NUM_VECS ? For open-shell systems (REFERENCE is ROHF, WFN is ZAPTN), DETCI will compute the ZAPTn series. GUESS_VECTOR must be set to UNIT, HD_OTF must be set to TRUE, and HD_AVG must be set to orb_ener; these should happen by default for MPN = TRUE. Type: boolean; Default: false. MPN_ORDER_SAVE (DETCI)¶DETCI (Expert) — If 0, save the MPn energy; if 1, save the MP(2n-1) energy (if available from MPN_WIGNER = true); if 2, save the MP(2n-2) energy (if available from MPN_WIGNER = true). Type: integer; Default: 0. MPN_SCHMIDT (DETCI)¶DETCI (Expert) — Do employ an orthonormal vector space rather than storing the kth order wavefunction?. Type: boolean; Default: false. MPN_WIGNER (DETCI)¶DETCI (Expert) — Do use Wigner formulas in the \(E_{text{mp}n}\) series?. Type: boolean; Default: true. MRCC_LEVEL (MRCC)",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:181204,Performance,perform,performed,181204,"d HD_AVG must be set to orb_ener; these should happen by default for MPN = TRUE. Type: boolean; Default: false. MPN_ORDER_SAVE (DETCI)¶DETCI (Expert) — If 0, save the MPn energy; if 1, save the MP(2n-1) energy (if available from MPN_WIGNER = true); if 2, save the MP(2n-2) energy (if available from MPN_WIGNER = true). Type: integer; Default: 0. MPN_SCHMIDT (DETCI)¶DETCI (Expert) — Do employ an orthonormal vector space rather than storing the kth order wavefunction?. Type: boolean; Default: false. MPN_WIGNER (DETCI)¶DETCI (Expert) — Do use Wigner formulas in the \(E_{text{mp}n}\) series?. Type: boolean; Default: true. MRCC_LEVEL (MRCC)¶MRCC — Maximum excitation level. This is used ONLY if it is explicitly set by the user. Single-reference case: all excitations up to this level are included, e.g., 2 for CCSD, 3 for CCSDT, 4 for CCSDTQ, etc. This becomes ex.lev (option #1) in fort.56. Type: integer; Default: 2. MRCC_METHOD (MRCC)¶MRCC (Expert) — If more than one root is requested and calc=1, LR-CC (EOM-CC) calculation is performed automatically for the excited states. This overrides all automatic determination of method and will only work with energy(). This becomes CC/CI (option #5) in fort.56. See Table MRCC_METHOD for details. Type: integer; Default: 1. MRCC_NUM_DOUBLET_ROOTS (MRCC)¶MRCC — Number of root in case of open shell system. This becomes ndoub (option #13) int fort.56. Type: integer; Default: 0. MRCC_NUM_SINGLET_ROOTS (MRCC)¶MRCC — Number of singlet roots. (Strictly speaking number of of roots with M_s=0 and S is even.) Use this option only with closed shell reference determinant, it must be zero otherwise. This becomes nsing (option #2) in fort.56. Type: integer; Default: 1. MRCC_NUM_TRIPLET_ROOTS (MRCC)¶MRCC — Number of triplet roots. (Strictly speaking number of of roots with \(M_s=0\) and S is odd.) See notes at option MRCC_NUM_SINGLET_ROOTS. This becomes ntrip (option #3) in fort.56. Type: integer; Default: 0. MRCC_OMP_NUM_THREADS (MRCC)¶MRCC (Expert) —",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:187956,Performance,perform,perform,187956,"Type: boolean; Default: false. OCC_ORBS_PRINT (OCC)¶OCC — Do print OCC orbital energies?. Type: boolean; Default: false. OCC_PERCENTAGE (FNOCC)¶FNOCC — Cutoff for occupation of MP2 virtual NOs in FNO-QCISD/CCSD(T). The number of virtual NOs is chosen so the occupation of the truncated virtual space is OCC_PERCENTAGE percent of occupation of the original MP2 virtual space. This option is only used if NAT_ORBS = true. This keyword overrides OCC_TOLERANCE. Type: double; Default: 99.0. OCC_TOLERANCE (FNOCC)¶FNOCC — Cutoff for occupation of MP2 virtual NOs in FNO-QCISD/CCSD(T). Virtual NOs with occupations less than OCC_TOLERANCE will be discarded. This option is only used if NAT_ORBS = true. Type: conv double; Default: 1.0e-6. OCC_TOLERANCE (SAPT)¶SAPT — Minimum occupation (eigenvalues of the MP2 OPDM) below which virtual natural orbitals are discarded for in each of the above three truncations. Type: conv double; Default: 1.0e-6. ODC_GUESS (DCT)¶DCT — Whether to perform a guess DC-06 or DC-12 computation for ODC-06 or ODC-12 methods, respectively. Currently only available for ALGORITHM = SIMULTANEOUS. Type: boolean; Default: false. OEPROP (DFOCC)¶DFOCC — Do compute one electron properties?. Type: boolean; Default: false. OEPROP (OCC)¶OCC — Do compute one electron properties?. Type: boolean; Default: false. OFFDIAGONAL_CCSD_T (PSIMRCC)¶PSIMRCC — Do include the off-diagonal corrections in (T) computations?. Type: boolean; Default: true. OMEGA (CCRESPONSE)¶CCRESPONSE — Array that specifies the desired frequencies of the incident radiation field in CCLR calculations. If only one element is given, the units will be assumed to be atomic units. If more than one element is given, then the units must be specified as the final element of the array. Acceptable units are HZ, NM, EV, and AU. Type: array; Default: No Default. OMEGA_ERF (MINTS)¶MINTS — Omega scaling for Erf and Erfc. Type: double; Default: 0.20. ONEPDM (DFMP2)¶DFMP2 — Do compute one-particle density matrix?. Type: bo",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:189922,Performance,optimiz,optimization,189922,"M (DFMP2)¶DFMP2 — Do compute one-particle density matrix?. Type: boolean; Default: false. ONEPOT_GRID_READ (SCF)¶SCF — Read an external potential from the .dx file?. Type: boolean; Default: false. OO_SCALE (DFOCC)¶DFOCC — OO scaling factor used in MSD. Type: double; Default: 0.01. OPDM (DCT)¶DCT — Compute a (relaxed) one-particle density matrix? Can be set manually. Set internally for property and gradient computations. Type: boolean; Default: false. OPDM (DETCI)¶DETCI — Do compute one-particle density matrix if not otherwise required?. Type: boolean; Default: false. OPDM_ONLY (CCDENSITY)¶CCDENSITY (Expert) — For internal use only! Compute the one-particle density matrix, but not the two-particle density matrix. Type: boolean; Default: false. OPDM_RELAX (CCDENSITY)¶CCDENSITY — Do relax the one-particle density matrix?. Type: boolean; Default: false. OPDM_RELAX (DFMP2)¶DFMP2 — Do relax the one-particle density matrix?. Type: boolean; Default: true. OPT_COORDINATES (OPTKING)¶OPTKING — Geometry optimization coordinates to use. REDUNDANT and INTERNAL are synonyms and the default. CARTESIAN uses only cartesian coordinates. BOTH uses both redundant and cartesian coordinates. CUSTOM is not fully implemented yet - expected optking 0.3.1. Type: string; Possible Values: REDUNDANT, INTERNAL, CARTESIAN, BOTH, CUSTOM; Default: INTERNAL. OPT_METHOD (DFOCC)¶DFOCC — The orbital optimization algorithm. Presently quasi-Newton-Raphson algorithm available with several Hessian * options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC)¶OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters with a crude approximation to all elements of the MO Hessian. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Defau",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:190300,Performance,optimiz,optimization,190300,"ernally for property and gradient computations. Type: boolean; Default: false. OPDM (DETCI)¶DETCI — Do compute one-particle density matrix if not otherwise required?. Type: boolean; Default: false. OPDM_ONLY (CCDENSITY)¶CCDENSITY (Expert) — For internal use only! Compute the one-particle density matrix, but not the two-particle density matrix. Type: boolean; Default: false. OPDM_RELAX (CCDENSITY)¶CCDENSITY — Do relax the one-particle density matrix?. Type: boolean; Default: false. OPDM_RELAX (DFMP2)¶DFMP2 — Do relax the one-particle density matrix?. Type: boolean; Default: true. OPT_COORDINATES (OPTKING)¶OPTKING — Geometry optimization coordinates to use. REDUNDANT and INTERNAL are synonyms and the default. CARTESIAN uses only cartesian coordinates. BOTH uses both redundant and cartesian coordinates. CUSTOM is not fully implemented yet - expected optking 0.3.1. Type: string; Possible Values: REDUNDANT, INTERNAL, CARTESIAN, BOTH, CUSTOM; Default: INTERNAL. OPT_METHOD (DFOCC)¶DFOCC — The orbital optimization algorithm. Presently quasi-Newton-Raphson algorithm available with several Hessian * options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC)¶OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters with a crude approximation to all elements of the MO Hessian. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: MSD. OPT_RESTART (OPTKING)¶OPTKING — Restart the optimization from optking’s written history. Type: double; Default: 0. OPT_TYPE (OPTKING)¶OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC)¶DFOCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_OPT (OCC)¶O",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:190484,Performance,optimiz,optimization,190484," false. OPDM_ONLY (CCDENSITY)¶CCDENSITY (Expert) — For internal use only! Compute the one-particle density matrix, but not the two-particle density matrix. Type: boolean; Default: false. OPDM_RELAX (CCDENSITY)¶CCDENSITY — Do relax the one-particle density matrix?. Type: boolean; Default: false. OPDM_RELAX (DFMP2)¶DFMP2 — Do relax the one-particle density matrix?. Type: boolean; Default: true. OPT_COORDINATES (OPTKING)¶OPTKING — Geometry optimization coordinates to use. REDUNDANT and INTERNAL are synonyms and the default. CARTESIAN uses only cartesian coordinates. BOTH uses both redundant and cartesian coordinates. CUSTOM is not fully implemented yet - expected optking 0.3.1. Type: string; Possible Values: REDUNDANT, INTERNAL, CARTESIAN, BOTH, CUSTOM; Default: INTERNAL. OPT_METHOD (DFOCC)¶DFOCC — The orbital optimization algorithm. Presently quasi-Newton-Raphson algorithm available with several Hessian * options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC)¶OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters with a crude approximation to all elements of the MO Hessian. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: MSD. OPT_RESTART (OPTKING)¶OPTKING — Restart the optimization from optking’s written history. Type: double; Default: 0. OPT_TYPE (OPTKING)¶OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC)¶DFOCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_OPT (OCC)¶OCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_RESP_SOLVER (DFOCC)¶DFOCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create t",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:190822,Performance,perform,performed,190822," the one-particle density matrix?. Type: boolean; Default: true. OPT_COORDINATES (OPTKING)¶OPTKING — Geometry optimization coordinates to use. REDUNDANT and INTERNAL are synonyms and the default. CARTESIAN uses only cartesian coordinates. BOTH uses both redundant and cartesian coordinates. CUSTOM is not fully implemented yet - expected optking 0.3.1. Type: string; Possible Values: REDUNDANT, INTERNAL, CARTESIAN, BOTH, CUSTOM; Default: INTERNAL. OPT_METHOD (DFOCC)¶DFOCC — The orbital optimization algorithm. Presently quasi-Newton-Raphson algorithm available with several Hessian * options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC)¶OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters with a crude approximation to all elements of the MO Hessian. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: MSD. OPT_RESTART (OPTKING)¶OPTKING — Restart the optimization from optking’s written history. Type: double; Default: 0. OPT_TYPE (OPTKING)¶OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC)¶DFOCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_OPT (OCC)¶OCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_RESP_SOLVER (DFOCC)¶DFOCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. O",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:190968,Performance,optimiz,optimization,190968,"d INTERNAL are synonyms and the default. CARTESIAN uses only cartesian coordinates. BOTH uses both redundant and cartesian coordinates. CUSTOM is not fully implemented yet - expected optking 0.3.1. Type: string; Possible Values: REDUNDANT, INTERNAL, CARTESIAN, BOTH, CUSTOM; Default: INTERNAL. OPT_METHOD (DFOCC)¶DFOCC — The orbital optimization algorithm. Presently quasi-Newton-Raphson algorithm available with several Hessian * options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC)¶OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters with a crude approximation to all elements of the MO Hessian. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: MSD. OPT_RESTART (OPTKING)¶OPTKING — Restart the optimization from optking’s written history. Type: double; Default: 0. OPT_TYPE (OPTKING)¶OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC)¶DFOCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_OPT (OCC)¶OCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_RESP_SOLVER (DFOCC)¶DFOCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORB_RESP_SOLVER (OCC)¶OCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simul",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:191223,Performance,optimiz,optimize,191223,"TESIAN, BOTH, CUSTOM; Default: INTERNAL. OPT_METHOD (DFOCC)¶DFOCC — The orbital optimization algorithm. Presently quasi-Newton-Raphson algorithm available with several Hessian * options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC)¶OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters with a crude approximation to all elements of the MO Hessian. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: MSD. OPT_RESTART (OPTKING)¶OPTKING — Restart the optimization from optking’s written history. Type: double; Default: 0. OPT_TYPE (OPTKING)¶OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC)¶DFOCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_OPT (OCC)¶OCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_RESP_SOLVER (DFOCC)¶DFOCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORB_RESP_SOLVER (OCC)¶OCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; ",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:191300,Performance,optimiz,optimize,191300," optimization algorithm. Presently quasi-Newton-Raphson algorithm available with several Hessian * options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC)¶OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters with a crude approximation to all elements of the MO Hessian. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: MSD. OPT_RESTART (OPTKING)¶OPTKING — Restart the optimization from optking’s written history. Type: double; Default: 0. OPT_TYPE (OPTKING)¶OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC)¶DFOCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_OPT (OCC)¶OCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_RESP_SOLVER (DFOCC)¶DFOCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORB_RESP_SOLVER (OCC)¶OCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORBITAL_LEVEL_SHIFT (DCT)¶DCT (Exper",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:201531,Performance,perform,perform,201531,"perties to compute. Type: array; Default: No Default. PROPERTIES_ORIGIN (GLOBALS)¶GLOBALS — Either a set of 3 coordinates or a string describing the origin about which one-electron properties are computed. Type: array; Default: No Default. PROPERTY (CCENERGY)¶CCENERGY — The response property desired. Acceptable values are POLARIZABILITY (default) for dipole-polarizabilities, ROTATION for specific rotations, ROA for Raman Optical Activity, and ALL for all of the above. Type: string; Possible Values: POLARIZABILITY, ROTATION, MAGNETIZABILITY, ROA, ALL; Default: POLARIZABILITY. PROPERTY (CCRESPONSE)¶CCRESPONSE — The response property desired. Acceptable values are POLARIZABILITY (default) for dipole polarizabilities, ROTATION for specific rotations, ROA for Raman Optical Activity (ROA_TENSOR for each displacement), and ALL for all of the above. Type: string; Possible Values: POLARIZABILITY, ROTATION, ROA, ROA_TENSOR, ALL; Default: POLARIZABILITY. PT_ENERGY (PSIMRCC)¶PSIMRCC — The type of perturbation theory computation to perform. Type: string; Default: SECOND_ORDER. PUREAM (GLOBALS)¶GLOBALS — Do use pure angular momentum basis functions? If not explicitly set, the default comes from the basis set. Cfour Interface: Keyword translates into CFOUR_SPHERICAL. Type: boolean; Default: true. QC_COUPLING (DCT)¶DCT — Controls whether to include the coupling terms in the DCT electronic Hessian (for ALOGRITHM = QC with QC_TYPE = SIMULTANEOUS only). Type: boolean; Default: false. QC_MODULE (GLOBALS)¶GLOBALS — When several modules can compute the same methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC, CCT3, BUILTIN, MRCC; Default: No Default. QC_TYPE (DCT)¶DCT — Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, th",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:202751,Performance,perform,perform,202751,"CFOUR_SPHERICAL. Type: boolean; Default: true. QC_COUPLING (DCT)¶DCT — Controls whether to include the coupling terms in the DCT electronic Hessian (for ALOGRITHM = QC with QC_TYPE = SIMULTANEOUS only). Type: boolean; Default: false. QC_MODULE (GLOBALS)¶GLOBALS — When several modules can compute the same methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC, CCT3, BUILTIN, MRCC; Default: No Default. QC_TYPE (DCT)¶DCT — Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, the cumulant is updated using the standard Jacobi algorithm. If set to SIMULTANEOUS both cumulant and orbitals are updated in a single Newton-Raphson step. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: SIMULTANEOUS. QCHF (DFOCC)¶DFOCC — Do perform a QCHF computation?. Type: boolean; Default: false. QCHF (SCF)¶SCF — Do perform a QCHF computation?. Type: boolean; Default: false. QMEFP (EFP)¶EFP (Expert) — Do turn on QM/EFP terms?. Type: boolean; Default: false. R4S (DETCI)¶DETCI (Expert) — Do restrict strings with \(e-\) in RAS IV? Useful to reduce the number of strings required if MIXED4=true, as in a split-virutal CISD[TQ] computation. If more than one electron is in RAS IV, then the holes in RAS I cannot exceed the number of particles in RAS III + RAS IV (i.e., EX_LEVEL), or else the string is discarded. Type: boolean; Default: false. R_CONVERGENCE (ADC)¶ADC — Convergence threshold for ADC matrix diagonalisation. Negative values keep the * adcc default (1e-6). Type: conv double; Default: -1. R_CONVERGENCE (CCENERGY)¶CCENERGY — Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for norm of the residual vector in th",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:202831,Performance,perform,perform,202831,"ether to include the coupling terms in the DCT electronic Hessian (for ALOGRITHM = QC with QC_TYPE = SIMULTANEOUS only). Type: boolean; Default: false. QC_MODULE (GLOBALS)¶GLOBALS — When several modules can compute the same methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC, CCT3, BUILTIN, MRCC; Default: No Default. QC_TYPE (DCT)¶DCT — Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, the cumulant is updated using the standard Jacobi algorithm. If set to SIMULTANEOUS both cumulant and orbitals are updated in a single Newton-Raphson step. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: SIMULTANEOUS. QCHF (DFOCC)¶DFOCC — Do perform a QCHF computation?. Type: boolean; Default: false. QCHF (SCF)¶SCF — Do perform a QCHF computation?. Type: boolean; Default: false. QMEFP (EFP)¶EFP (Expert) — Do turn on QM/EFP terms?. Type: boolean; Default: false. R4S (DETCI)¶DETCI (Expert) — Do restrict strings with \(e-\) in RAS IV? Useful to reduce the number of strings required if MIXED4=true, as in a split-virutal CISD[TQ] computation. If more than one electron is in RAS IV, then the holes in RAS I cannot exceed the number of particles in RAS III + RAS IV (i.e., EX_LEVEL), or else the string is discarded. Type: boolean; Default: false. R_CONVERGENCE (ADC)¶ADC — Convergence threshold for ADC matrix diagonalisation. Negative values keep the * adcc default (1e-6). Type: conv double; Default: -1. R_CONVERGENCE (CCENERGY)¶CCENERGY — Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for CC-EOM. Type: conv double; Default: 1e-6. R_CONVERGENCE (",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:209240,Performance,perform,performing,209240," TWOCON, MCSCF, GENERAL; Default: RHF. REFERENCE (SCF)¶SCF — Reference wavefunction type. Cfour Interface: Keyword translates into CFOUR_REFERENCE. Type: string; Possible Values: RHF, ROHF, UHF, CUHF, RKS, UKS; Default: RHF. REFERENCE_SYM (DETCI)¶DETCI (Expert) — Irrep for CI vectors; -1 = find automatically. This option allows the user to look for CI vectors of a different irrep than the reference. This probably only makes sense for Full CI, and it would probably not work with unit vector guesses. Numbering starts from zero for the totally-symmetric irrep. Type: integer; Default: -1. REG_PARAM (DFOCC)¶DFOCC — Regularization parameter. Type: double; Default: 0.4. REGULARIZATION (DFOCC)¶DFOCC — Do use regularized denominators?. Type: boolean; Default: false. RELATIVISTIC (GLOBALS)¶GLOBALS (Expert) — Relativistic Hamiltonian type. Type: string; Possible Values: NO, X2C; Default: NO. RELAX_GUESS_ORBITALS (DCT)¶DCT (Expert) — Controls whether to relax the guess orbitals by taking the guess density cumulant and performing orbital update on the first macroiteration (for ALOGRITHM = TWOSTEP only). Type: boolean; Default: false. RELAXED (OCC)¶OCC — Do consider orbital response contributions for PDMs and GFM?. Type: boolean; Default: true. REMP_A (DFOCC)¶DFOCC — mixing parameter for the REMP hybrid perturbation theory, A specifies the Moller-Plesset fraction. Type: double; Default: 0.15e0. REMP_A (OCC)¶OCC — mixing parameter for the REMP hybrid perturbation theory, A specifies the Moller-Plesset fraction. Type: double; Default: 0.15e0. REPL_OTF (DETCI)¶DETCI (Expert) — Do string replacements on the fly in DETCI? Can save a gigantic amount of memory (especially for truncated CI’s) but is somewhat flaky and hasn’t been tested for a while. It may work only works for certain classes of RAS calculations. The current code is very slow with this option turned on. Type: boolean; Default: false. RESPONSE_ALGORITHM (DCT)¶DCT — Algorithm to use for the solution of DC-06 response equati",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:210475,Performance,optimiz,optimizations,210475,"GFM?. Type: boolean; Default: true. REMP_A (DFOCC)¶DFOCC — mixing parameter for the REMP hybrid perturbation theory, A specifies the Moller-Plesset fraction. Type: double; Default: 0.15e0. REMP_A (OCC)¶OCC — mixing parameter for the REMP hybrid perturbation theory, A specifies the Moller-Plesset fraction. Type: double; Default: 0.15e0. REPL_OTF (DETCI)¶DETCI (Expert) — Do string replacements on the fly in DETCI? Can save a gigantic amount of memory (especially for truncated CI’s) but is somewhat flaky and hasn’t been tested for a while. It may work only works for certain classes of RAS calculations. The current code is very slow with this option turned on. Type: boolean; Default: false. RESPONSE_ALGORITHM (DCT)¶DCT — Algorithm to use for the solution of DC-06 response equations in computation of analytic gradients and * properties. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: TWOSTEP. RESTART (CCENERGY)¶CCENERGY — Do restart the coupled-cluster iterations from old \(t_1\) and \(t_2\) amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. RESTART (CCLAMBDA)¶CCLAMBDA — Do restart the coupled-cluster iterations from old \(\lambda_1\) and \(\lambda_2\) amplitudes?. Type: boolean; Default: false. RESTART (CCRESPONSE)¶CCRESPONSE — Do restart from on-disk amplitudes?. Type: boolean; Default: true. RESTART (DETCI)¶DETCI — Do restart a DETCI iteration that terminated prematurely? It assumes that the CI and sigma vectors are on disk. Type: boolean; Default: false. RESTART_EOM_CC3 (CCEOM)¶CCEOM — Do restart from on-disk?. Type: boolean; Default: false. RESTRICTED_DOCC (GLOBALS)¶GLOBALS — An array giving the number of restricted doubly-occupied orbita",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:211500,Performance,optimiz,optimized,211500,"old \(t_1\) and \(t_2\) amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. RESTART (CCLAMBDA)¶CCLAMBDA — Do restart the coupled-cluster iterations from old \(\lambda_1\) and \(\lambda_2\) amplitudes?. Type: boolean; Default: false. RESTART (CCRESPONSE)¶CCRESPONSE — Do restart from on-disk amplitudes?. Type: boolean; Default: true. RESTART (DETCI)¶DETCI — Do restart a DETCI iteration that terminated prematurely? It assumes that the CI and sigma vectors are on disk. Type: boolean; Default: false. RESTART_EOM_CC3 (CCEOM)¶CCEOM — Do restart from on-disk?. Type: boolean; Default: false. RESTRICTED_DOCC (GLOBALS)¶GLOBALS — An array giving the number of restricted doubly-occupied orbitals per irrep (not excited in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RESTRICTED_UOCC (GLOBALS)¶GLOBALS — An array giving the number of restricted unoccupied orbitals per irrep (not occupied in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RFO_FOLLOW_ROOT (OPTKING)¶OPTKING — Do follow the initial RFO vector after the first step?. Type: boolean; Default: false. RFO_NORMALIZATION_MAX (OPTKING)¶OPTKING — Eigenvectors of RFO matrix whose final column is smaller than this are ignored. Type: double; Default: 100. RFO_ROOT (OPTKING)¶OPTKING — Root for RFO to follow, 0 being lowest (for a minimum). Type: integer; Default: 0. RHF_TRIPLETS (CCEOM)¶CCEOM — Do form a triplet state from RHF reference?. Type: boolean; Default: false. RMS_DISP_G_CONVERGENCE (OPTKING)¶OPTKING — Convergence criterion for geometry optmization: rms displacement (internal coordinates, atomic units). Type: conv double; ",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:211717,Performance,optimiz,optimized,211717,"ing that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. RESTART (CCLAMBDA)¶CCLAMBDA — Do restart the coupled-cluster iterations from old \(\lambda_1\) and \(\lambda_2\) amplitudes?. Type: boolean; Default: false. RESTART (CCRESPONSE)¶CCRESPONSE — Do restart from on-disk amplitudes?. Type: boolean; Default: true. RESTART (DETCI)¶DETCI — Do restart a DETCI iteration that terminated prematurely? It assumes that the CI and sigma vectors are on disk. Type: boolean; Default: false. RESTART_EOM_CC3 (CCEOM)¶CCEOM — Do restart from on-disk?. Type: boolean; Default: false. RESTRICTED_DOCC (GLOBALS)¶GLOBALS — An array giving the number of restricted doubly-occupied orbitals per irrep (not excited in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RESTRICTED_UOCC (GLOBALS)¶GLOBALS — An array giving the number of restricted unoccupied orbitals per irrep (not occupied in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RFO_FOLLOW_ROOT (OPTKING)¶OPTKING — Do follow the initial RFO vector after the first step?. Type: boolean; Default: false. RFO_NORMALIZATION_MAX (OPTKING)¶OPTKING — Eigenvectors of RFO matrix whose final column is smaller than this are ignored. Type: double; Default: 100. RFO_ROOT (OPTKING)¶OPTKING — Root for RFO to follow, 0 being lowest (for a minimum). Type: integer; Default: 0. RHF_TRIPLETS (CCEOM)¶CCEOM — Do form a triplet state from RHF reference?. Type: boolean; Default: false. RMS_DISP_G_CONVERGENCE (OPTKING)¶OPTKING — Convergence criterion for geometry optmization: rms displacement (internal coordinates, atomic units). Type: conv double; Default: 1.2e-3. RMS_FORCE_G_CONVERGENCE (OPTKING)¶OPTKING — Convergence criterion for geometry optmization: rms force (internal coordinates, atomic units). Type: conv double; Default: 3.0e-4. RMS_MOGRAD_CONVERGENCE (DF",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:225542,Performance,optimiz,optimized,225542,"orithm in the EOM-CC iterative procedure. Type: conv double; Default: 1e-3. SCREENING (GLOBALS)¶GLOBALS — The type of screening used when computing two-electron integrals. Type: string; Possible Values: SCHWARZ, CSAM, DENSITY, NONE; Default: CSAM. SCS_CCSD (CCENERGY)¶CCENERGY — Do spin-component-scaled CCSD. Type: boolean; Default: false. SCS_CCSD (FNOCC)¶FNOCC — Do SCS-CCSD?. Type: boolean; Default: false. SCS_CEPA (FNOCC)¶FNOCC — Do SCS-CEPA? Note that the scaling factors will be identical to those for SCS-CCSD. Type: boolean; Default: false. SCS_MP2 (CCENERGY)¶CCENERGY — Do spin-component-scaled MP2 (SCS-MP2)?. Type: boolean; Default: false. SCS_MP2 (FNOCC)¶FNOCC — Do SCS-MP2?. Type: boolean; Default: false. SCS_TYPE (DFOCC)¶DFOCC — Type of the SCS method. Type: string; Possible Values: SCS, SCSN, SCSVDW, SCSMI; Default: SCS. SCS_TYPE (OCC)¶OCC — Type of the SCS method. Type: string; Possible Values: SCS, SCSN, SCSVDW, SCSMI; Default: SCS. SCSN_MP2 (CCENERGY)¶CCENERGY — Do SCS-MP2 with parameters optimized for nucleic acids?. Type: boolean; Default: false. SEKINO (CCLAMBDA)¶CCLAMBDA — Do Sekino-Bartlett size-extensive model-III?. Type: boolean; Default: false. SEKINO (CCRESPONSE)¶CCRESPONSE — Do Sekino-Bartlett size-extensive model-III?. Type: boolean; Default: false. SEMICANONICAL (CCENERGY)¶CCENERGY — Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. SEMICANONICAL (CCEOM)¶CCEOM — Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. SEMICANONICAL (CCTRANSORT)¶CCTRANSORT — Force conversion of ROHF MOs to semicanonical MOs to run UHF-based energies. Type: boolean; Default: false. SEMICANONICAL (CCTRIPLES)¶CCTRIPLES — Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. SF_RESTRICT (DETCI)¶DETCI (Expert) — Do eliminate determinants not valid for spin-complete spin-flip CI’s? [see J. S. Sears et al, J. Chem. Phys. 118, 9084-9094 (2003)]. Type: boolean; Default: false. SIGMA_OVERLAP (DETCI)¶DETCI (Expert) — Do print ",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:231518,Performance,perform,perform,231518,"r root for instability analysis. Type: integer; Default: 1. SOLVER_N_ROOT (SCF)¶SCF — Number of roots to converge for all irreps during instability analysis. (Overridden by SOLVER_ROOTS_PER_IRREP.). Type: integer; Default: 1. SOLVER_PRECONDITION (CPHF)¶CPHF — Solver precondition type. Type: string; Possible Values: SUBSPACE, JACOBI, NONE; Default: JACOBI. SOLVER_ROOTS_PER_IRREP (SCF)¶SCF — Number of roots to converge, per irrep, during instability analysis. (Overrides SOLVER_N_ROOT.). Type: array; Default: No Default. SOS_TYPE (DFOCC)¶DFOCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOS_TYPE (OCC)¶OCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOSCF (SCF)¶SCF — Do use second-order SCF convergence methods?. Type: boolean; Default: false. SOSCF_CONV (SCF)¶SCF — Second order convergence threshold. Cease microiterating at this value. Type: conv double; Default: 5.0e-3. SOSCF_MAX_ITER (SCF)¶SCF — Maximum number of second-order microiterations to perform. Type: integer; Default: 5. SOSCF_MIN_ITER (SCF)¶SCF — Minimum number of second-order microiterations to perform. Type: integer; Default: 1. SOSCF_PRINT (SCF)¶SCF — Do we print the SOSCF microiterations?. Type: boolean; Default: false. SOSCF_START_CONVERGENCE (SCF)¶SCF — When to start second-order SCF iterations based on gradient RMS. Type: conv double; Default: 1.0e-2. SPIN_SCALE_TYPE (OCC)¶OCC (Expert) — Controls the spin scaling set to current energy. This is set by Psi internally. Type: string; Possible Values: NONE, CUSTOM, SCS, SCSN, SCSVDW, SOS, SOSPI; Default: NONE. SS_E_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SCALE (OCC)¶OCC — A cu",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:231631,Performance,perform,perform,231631," for all irreps during instability analysis. (Overridden by SOLVER_ROOTS_PER_IRREP.). Type: integer; Default: 1. SOLVER_PRECONDITION (CPHF)¶CPHF — Solver precondition type. Type: string; Possible Values: SUBSPACE, JACOBI, NONE; Default: JACOBI. SOLVER_ROOTS_PER_IRREP (SCF)¶SCF — Number of roots to converge, per irrep, during instability analysis. (Overrides SOLVER_N_ROOT.). Type: array; Default: No Default. SOS_TYPE (DFOCC)¶DFOCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOS_TYPE (OCC)¶OCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOSCF (SCF)¶SCF — Do use second-order SCF convergence methods?. Type: boolean; Default: false. SOSCF_CONV (SCF)¶SCF — Second order convergence threshold. Cease microiterating at this value. Type: conv double; Default: 5.0e-3. SOSCF_MAX_ITER (SCF)¶SCF — Maximum number of second-order microiterations to perform. Type: integer; Default: 5. SOSCF_MIN_ITER (SCF)¶SCF — Minimum number of second-order microiterations to perform. Type: integer; Default: 1. SOSCF_PRINT (SCF)¶SCF — Do we print the SOSCF microiterations?. Type: boolean; Default: false. SOSCF_START_CONVERGENCE (SCF)¶SCF — When to start second-order SCF iterations based on gradient RMS. Type: conv double; Default: 1.0e-2. SPIN_SCALE_TYPE (OCC)¶OCC (Expert) — Controls the spin scaling set to current energy. This is set by Psi internally. Type: string; Possible Values: NONE, CUSTOM, SCS, SCSN, SCSVDW, SOS, SOSPI; Default: NONE. SS_E_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SCALE (OCC)¶OCC — A custom scaling parameter for same-spin terms in OCC. The result goes to a CUSTOM SCS variable, exact name method-de",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:233161,Performance,perform,perform,233161,"for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SCALE (OCC)¶OCC — A custom scaling parameter for same-spin terms in OCC. The result goes to a CUSTOM SCS variable, exact name method-dependent. Type: double; Default: 1. SS_SKIP_DIAG (CCEOM)¶CCEOM — Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT (CCEOM)¶CCEOM — SS vectors stored per root. Type: integer; Default: 5. SSAPT0_SCALE (FISAPT)¶FISAPT — Do sSAPT0 exchange-scaling with F-SAPT. Type: boolean; Default: false. STABILITY_ADD_VECTORS (DCT)¶DCT (Expert) — The number of vectors that can be added simultaneously into the subspace for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STABILITY_ANALYSIS (SCF)¶SCF — Whether to perform stability analysis after convergence. NONE prevents analysis being performed. CHECK will print out the analysis of the wavefunction stability at the end of the computation. FOLLOW will perform the analysis and, if a totally symmetric instability is found, will attempt to follow the eigenvector and re-run the computations to find a stable solution. Type: string; Possible Values: NONE, CHECK, FOLLOW; Default: NONE. STABILITY_AUGMENT_SPACE_TOL (DCT)¶DCT (Expert) — The value of the rms of the residual in Schmidt orthogonalization which is used as a threshold for augmenting the vector subspace in stability check. Type: conv double; Default: 0.1. STABILITY_CHECK (DCT)¶DCT (Expert) — Performs stability analysis of the DCT energy. Type: boolean; Default: false. STABILITY_CONVERGENCE (DCT)¶DCT (Expert) — Controls the convergence of the Davidson’s diagonalization in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE (DCT)¶DCT (Expert) — The maximum size of the sub",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:233236,Performance,perform,performed,233236," CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SCALE (OCC)¶OCC — A custom scaling parameter for same-spin terms in OCC. The result goes to a CUSTOM SCS variable, exact name method-dependent. Type: double; Default: 1. SS_SKIP_DIAG (CCEOM)¶CCEOM — Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT (CCEOM)¶CCEOM — SS vectors stored per root. Type: integer; Default: 5. SSAPT0_SCALE (FISAPT)¶FISAPT — Do sSAPT0 exchange-scaling with F-SAPT. Type: boolean; Default: false. STABILITY_ADD_VECTORS (DCT)¶DCT (Expert) — The number of vectors that can be added simultaneously into the subspace for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STABILITY_ANALYSIS (SCF)¶SCF — Whether to perform stability analysis after convergence. NONE prevents analysis being performed. CHECK will print out the analysis of the wavefunction stability at the end of the computation. FOLLOW will perform the analysis and, if a totally symmetric instability is found, will attempt to follow the eigenvector and re-run the computations to find a stable solution. Type: string; Possible Values: NONE, CHECK, FOLLOW; Default: NONE. STABILITY_AUGMENT_SPACE_TOL (DCT)¶DCT (Expert) — The value of the rms of the residual in Schmidt orthogonalization which is used as a threshold for augmenting the vector subspace in stability check. Type: conv double; Default: 0.1. STABILITY_CHECK (DCT)¶DCT (Expert) — Performs stability analysis of the DCT energy. Type: boolean; Default: false. STABILITY_CONVERGENCE (DCT)¶DCT (Expert) — Controls the convergence of the Davidson’s diagonalization in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE (DCT)¶DCT (Expert) — The maximum size of the subspace for the stability check. The program will terminate if thi",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:233354,Performance,perform,perform,233354," conv double; Default: 1e-6. SS_SCALE (OCC)¶OCC — A custom scaling parameter for same-spin terms in OCC. The result goes to a CUSTOM SCS variable, exact name method-dependent. Type: double; Default: 1. SS_SKIP_DIAG (CCEOM)¶CCEOM — Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT (CCEOM)¶CCEOM — SS vectors stored per root. Type: integer; Default: 5. SSAPT0_SCALE (FISAPT)¶FISAPT — Do sSAPT0 exchange-scaling with F-SAPT. Type: boolean; Default: false. STABILITY_ADD_VECTORS (DCT)¶DCT (Expert) — The number of vectors that can be added simultaneously into the subspace for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STABILITY_ANALYSIS (SCF)¶SCF — Whether to perform stability analysis after convergence. NONE prevents analysis being performed. CHECK will print out the analysis of the wavefunction stability at the end of the computation. FOLLOW will perform the analysis and, if a totally symmetric instability is found, will attempt to follow the eigenvector and re-run the computations to find a stable solution. Type: string; Possible Values: NONE, CHECK, FOLLOW; Default: NONE. STABILITY_AUGMENT_SPACE_TOL (DCT)¶DCT (Expert) — The value of the rms of the residual in Schmidt orthogonalization which is used as a threshold for augmenting the vector subspace in stability check. Type: conv double; Default: 0.1. STABILITY_CHECK (DCT)¶DCT (Expert) — Performs stability analysis of the DCT energy. Type: boolean; Default: false. STABILITY_CONVERGENCE (DCT)¶DCT (Expert) — Controls the convergence of the Davidson’s diagonalization in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE (DCT)¶DCT (Expert) — The maximum size of the subspace for the stability check. The program will terminate if this parameter is exceeded and the convergence (STABILITY_CONVERGENCE) is not satisfied. Type: integer; Default: 200. STABILITY_N_EIGENVALUES (DCT)¶DCT (Expert) — The number of Hessian eigenvalues computed d",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:234682,Performance,optimiz,optimization,234682,"hich is used as a threshold for augmenting the vector subspace in stability check. Type: conv double; Default: 0.1. STABILITY_CHECK (DCT)¶DCT (Expert) — Performs stability analysis of the DCT energy. Type: boolean; Default: false. STABILITY_CONVERGENCE (DCT)¶DCT (Expert) — Controls the convergence of the Davidson’s diagonalization in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE (DCT)¶DCT (Expert) — The maximum size of the subspace for the stability check. The program will terminate if this parameter is exceeded and the convergence (STABILITY_CONVERGENCE) is not satisfied. Type: integer; Default: 200. STABILITY_N_EIGENVALUES (DCT)¶DCT (Expert) — The number of Hessian eigenvalues computed during the stability check. Type: integer; Default: 3. STABILITY_N_GUESS_VECTORS (DCT)¶DCT (Expert) — The number of guess vectors used for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STEP_TYPE (OPTKING)¶OPTKING — Geometry optimization step type, either Newton-Raphson or Rational Function Optimization. Type: string; Possible Values: RFO, RS_I_RFO, P_RFO, NR, SD, LINESEARCH; Default: RFO. SUMMATION_FIELDS (PE)¶PE — Summation scheme for field computations, can be direct or fmm. Type: string; Possible Values: DIRECT, FMM; Default: DIRECT. SYMMETRIZE (OCC)¶OCC — Do symmetrize the GFM and OPDM in the EKT computations?. Type: boolean; Default: true. T (THERMO)¶THERMO — Temperature in Kelvin for thermodynamic analysis. Note that 273.15 is the value for IUPAC STP. Type: double; Default: 298.15. T2_COUPLED (CCENERGY)¶CCENERGY —. Type: boolean; Default: false. T3_WS_INCORE (CCENERGY)¶CCENERGY — Do build W intermediates required for cc3 in core memory?. Type: boolean; Default: false. T3_WS_INCORE (CCEOM)¶CCEOM — Do build W intermediates required for eom_cc3 in core memory?. Type: boolean; Default: false. T_AMPS (CCHBAR)¶CCHBAR — Do compute the T amplitude equation matrix elements?. Type: boolean; Default: false. T_CUT_CLMO (DLPNO)¶DLP",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:245491,Performance,optimiz,optimization,245491,"es: DETCI, CI, ZAPTN, DETCAS, CASSCF, RASSCF; Default: DETCI. WFN (GLOBALS)¶GLOBALS (Expert) — Wavefunction type. Type: string; Default: SCF. WFN (SCF)¶SCF (Expert) — Wavefunction type. Type: string; Possible Values: SCF; Default: SCF. WFN_SYM (MCSCF)¶MCSCF — The symmetry of the SCF wavefunction. Type: string; Default: 1. WFN_SYM (PSIMRCC)¶PSIMRCC — The symmetry of the target wavefunction, specified either by Schönflies symbol, or irrep number (in Cotton ordering). Type: string; Default: 1. WFN_TYPE (DFOCC)¶DFOCC — Type of the wavefunction. Type: string; Default: DF-OMP2. WFN_TYPE (OCC)¶OCC — Type of the wavefunction. Type: string; Possible Values: OMP2, OMP3, OCEPA, OMP2.5, REMP, OREMP; Default: OMP2. WRITE_NOS (CCDENSITY)¶CCDENSITY — Do write natural orbitals (molden). Type: boolean; Default: false. WRITE_OPT_HISTORY (OPTKING)¶OPTKING — Write the full history to disk. Produces a non validated OptimizationResult. Type: boolean; Default: false. WRITE_OPT_RESULT (OPTKING)¶OPTKING — Write the optimization history / state to disc. Type: boolean; Default: false. WRITE_TRAJECTORY (OPTKING)¶OPTKING — Write Optimization Trajectory. Type: boolean; Default: false. WRITER_FILE_LABEL (GLOBALS)¶GLOBALS — Base filename for text files written by PSI, such as the MOLDEN output file, the Hessian file, the internal coordinate file, etc. Use the add_str_i function to make this string case sensitive. Type: string; Default: No Default. XI (CCDENSITY)¶CCDENSITY — Do compute Xi?. Type: boolean; Default: false. XI_CONNECT (CCDENSITY)¶CCDENSITY (Expert) — Do require \(\bar{H}\) and \(R\) to be connected?. Type: boolean; Default: false. ZERO_INTERNAL_AMPS (PSIMRCC)¶PSIMRCC — Do zero the internal amplitudes, i.e., those that map reference determinants onto each other?. Type: boolean; Default: true. ZETA (CCDENSITY)¶CCDENSITY — Do use zeta?. Type: boolean; Default: false. ZETA (CCLAMBDA)¶CCLAMBDA — Do use zeta?. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:3713,Safety,avoid,avoid,3713,"isk will be used; if AO_BASIS is DIRECT, the AO-basis integrals will be computed on the fly as necessary. NB: The DIRECT option is not fully implemented and should only be used by experts. Default is NONE. Note: The developers recommend use of this keyword only as a last resort because it significantly slows the calculation. The current algorithms for handling the MO-basis four-virtual-index integrals have been significantly improved and are preferable to the AO-based approach. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCLAMBDA)¶CCLAMBDA — The algorithm to use for the \(\left\langle VV||VV \right\rangle\) terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCTRANSORT)¶CCTRANSORT — The algorithm to use for the \(\left\langle VV||VV \right\rangle\) terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (DCT)¶DCT — Controls whether to avoid the AO->MO transformation of the two-electron integrals for the four-virtual case (\(\langle VV|| VV \rangle\)) by computing the corresponding terms in the AO basis. AO_BASIS = DISK algorithm reduces the memory requirements and can significantly reduce the cost of the energy computation if SIMULTANEOUS algorithm is used. For the TWOSTEP algorithm, however, AO_BASIS = DISK option is not recommended due to extra I/O. Type: string; Possible Values: NONE, DISK; Default: DISK. AUXILIARY_BOND_FACTOR (OPTKING)¶OPTKING — This factor times standard covalent distance is used to add extra stretch coordinates. Type: double; Default: 2.5. AVG_STATES (DETCI)¶DETCI — Array giving the root numbers of the states to average in a state-averaged procedure such as SA-CASSCF. Root numbering starts from 0. Type: array; Default: No Default. AVG_WEIGHTS (DETCI)¶DETCI — Array giving the weights for each state in a state-averaged procedure. Type: array; Default: No Default. B_RAS3_MAX (DETCI)¶DETCI — maximum number of beta electrons in RAS III. Type: integer; Default: -",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:27458,Safety,safe,safe,27458," OFF often results in poor convergence and thus cannot be recommended. Type: string; Possible Values: RLE, DIIS, NOJACOBI, OFF; Default: DIIS. CFOUR_CC_MAXCYC (CFOUR)¶CFOUR — Specifies the maximum number of iterations in solving the CC amplitude equations. Type: integer; Default: 50. CFOUR_CC_PROGRAM (CFOUR)¶CFOUR — Specifies which CC program is used. The available options are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL, reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, NCC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR)¶CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 0. CFOUR_CIS_CONV (CFOUR)¶CFOUR — Specifies the convergence threshold as \(10^{-N}\) for CIS calculations. Type: integer; Default: 5. CFOUR_CONTINUUM (CFOUR)¶CFOUR — Signifies that one or more “continuum” orbitals should be added to the calculation. VIRTUAL and DVIRTUAL specify one or two orbital which should be initially unoccupied (in the",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:87241,Safety,hazard,hazardous,87241,"LOBALS)¶GLOBALS — Algorithm to use for CI computation (e.g., CID or CISD). See Cross-module Redundancies for details. Type: string; Possible Values: CONV; Default: CONV. CIBLKS_PRINT (DETCI)¶DETCI — Do print a summary of the CI blocks?. Type: boolean; Default: false. COLLAPSE_SIZE (DETCI)¶DETCI — Gives the number of vectors to retain when the Davidson subspace is collapsed (see MAX_NUM_VECS). If greater than one, the collapsed subspace retains the best estimate of the CI vector for the previous n iterations. Defaults to 1. Type: integer; Default: 1. COLLAPSE_WITH_LAST (CCEOM)¶CCEOM — When collapsing Davidson subspace, whether to also include the previous approximate solution (for each root)? This doubles the number of resulting vectors but generally improves convergence. Type: boolean; Default: true. COLLAPSE_WITH_LAST_CC3 (CCEOM)¶CCEOM — Has the same effect as “COLLAPSE_WITH_LAST” but only in CC3 computations and after the initial solution of EOM CCSD. May help efficiency, but hazardous when solving for higher roots. Type: boolean; Default: false. COMPLEX_TOLERANCE (CCEOM)¶CCEOM — Complex tolerance applied in CCEOM computations. Type: conv double; Default: 1e-12. COMPUT_S2 (DFOCC)¶DFOCC — Do compute \(\langle \hat{S}^2 \rangle\) for DF-OMP2/DF-MP2?. Type: boolean; Default: false. COMPUTE_MP4_TRIPLES (FNOCC)¶FNOCC (Expert) — Do compute MP4 triples contribution?. Type: boolean; Default: false. COMPUTE_TRIPLES (FNOCC)¶FNOCC (Expert) — Do compute triples contribution?. Type: boolean; Default: true. CONSECUTIVE_BACKSTEPS (OPTKING)¶OPTKING — Set number of consecutive backward steps allowed in optimization. Type: integer; Default: 0. CORR_ANSATZ (PSIMRCC)¶PSIMRCC — The ansatz to use for MRCC computations. Type: string; Possible Values: SR, MK, BW, APBW; Default: MK. CORR_CCSD_T (PSIMRCC)¶PSIMRCC — The type of CCSD(T) computation to perform. Type: string; Possible Values: STANDARD, PITTNER; Default: STANDARD. CORR_CHARGE (PSIMRCC)¶PSIMRCC — The molecular charge of the targ",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:91043,Safety,safe,safety,91043,"ICAL_POINTS_INITIAL (SCF)¶SCF — Number of spherical points in initial COSX grid. Type: integer; Default: 50. COUPLED_INDUCTION (SAPT)¶SAPT (Expert) — Solve the CPHF equations to compute coupled induction and exchange-induction. These are not available for ROHF, and the option is automatically false in this case. In all other cases, coupled induction is strongly recommended. Only turn it off if the induction energy is not going to be used. Type: boolean; Default: true. COUPLING (PSIMRCC)¶PSIMRCC — The order of coupling terms to include in MRCCSDT computations. Type: string; Possible Values: NONE, LINEAR, QUADRATIC, CUBIC; Default: CUBIC. COUPLING_TERMS (PSIMRCC)¶PSIMRCC — Do include the terms that couple the reference determinants?. Type: boolean; Default: true. COVALENT_CONNECT (OPTKING)¶OPTKING — When determining connectivity, a bond is assigned if interatomic distance is less than (this number) * sum of covalent radii. Type: double; Default: 1.3. CPHF_MEM_SAFETY_FACTOR (CPHF)¶CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. CPHF_R_CONVERGENCE (FISAPT)¶FISAPT — Convergence criterion for residual of the CPHF coefficients in the SAPT \(E_{ind,resp}^{(20)}\) term. Type: conv double; Default: 1e-8. CPHF_R_CONVERGENCE (SAPT)¶SAPT — Convergence criterion for residual of the CPHF/CPKS coefficients in the SAPT \(E_{ind,resp}^{(20)}\) term. This applies to wavefunction-based SAPT or SAPT(DFT). See CPHF_R_CONVERGENCE for fragment-partitioned or intramolecular SAPT. Type: conv double; Default: 1e-8. CPHF_TASKS (CPHF)¶CPHF — Which tasks to run CPHF For * Valid choices: * -Polarizability *. Type: array; Default: No Default. CUBEPROP_BASIS_FUNCTIONS (GLOBALS)¶GLOBALS — List of basis function indices for which cube files are generated (1-based). All basis functions computed if empty. Type: array; Default: No Default. CUBEPROP_FILEPATH (GLOBALS)¶GLOBALS — Directory to which to write cube files. Default is the input file directory. Type: string; Default: N",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:116789,Safety,avoid,avoid,116789,"ult: 50. DMRG_CASPT2_CALC (DMRG)¶DMRG — Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG (DMRG)¶DMRG — CASPT2 Imaginary shift. Type: double; Default: 0.0. DMRG_CASPT2_IPEA (DMRG)¶DMRG — CASPT2 IPEA shift. Type: double; Default: 0.0. DMRG_CASPT2_ORBS (DMRG)¶DMRG — Whether to calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done. Type: string; Possible Values: PSEUDOCANONICAL, ACTIVE; Default: PSEUDOCANONICAL. DMRG_DIIS (DMRG)¶DMRG — Whether or not to use DIIS for DMRG. Type: boolean; Default: false. DMRG_DIIS_WRITE (DMRG)¶DMRG — Whether or not to store the DIIS checkpoint on disk (convenient for restarting). Type: boolean; Default: true. DMRG_EXCITATION (DMRG)¶DMRG — Which root is targeted: 0 means ground state, 1 first excited state, etc. Type: integer; Default: 0. DMRG_IRREP (DMRG)¶DMRG — The DMRG wavefunction irrep uses the same conventions as PSI4. How convenient :-). Just to avoid confusion, it’s copied here. It can also be found on http://sebwouters.github.io/CheMPS2/doxygen/classCheMPS2_1_1Irreps.html . Symmetry Conventions Irrep Number & Name Group Number & Name 0 1 2 3 4 5 6 7 0: c1 A 1: ci Ag Au 2: c2 A B 3: cs A’ A’’ 4: d2 A B1 B2 B3 5: c2v A1 A2 B1 B2 6: c2h Ag Bg Au Bu 7: d2h Ag B1g B2g B3g Au B1u B2u B3u. Type: integer; Default: -1. DMRG_LOCAL_INIT (DMRG)¶DMRG — Whether to start the active space localization process from a random unitary matrix instead of a unit matrix. Type: boolean; Default: true. DMRG_MOLDEN_WRITE (DMRG)¶DMRG — DMRG-CI or converged DMRG-SCF orbitals in molden format. Type: boolean; Default: false. DMRG_MPS_WRITE (DMRG)¶DMRG — Whether or not to create intermediary MPS checkpoints. Type: boolean; Default: false. DMRG_MULTIPLICITY (DMRG)¶DMRG — The DMRG wavefunction multiplicity in the form (2S+1). Type: integer; Default: -1. DMRG_OPDM_AO_PRINT (DMRG)¶DMRG — Print out the density matrix in the AO basis. Type: boolean; Default: false. DMRG_PRIN",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:136965,Safety,safe,safety,136965,"PT induction). Type: boolean; Default: true. FISAPT_FSSAPT_FILEPATH (FISAPT)¶FISAPT — Filepath to drop sSAPT0 exchange-scaling F-SAPT data within input file directory. Type: string; Default: s-fsapt/. FISAPT_LINK_ASSIGNMENT (FISAPT)¶FISAPT — Where do sigma links go (to C, AB, or split into IHOs)?. Type: string; Possible Values: C, AB, SAO0, SAO1, SAO2, SIAO0, SIAO1, SIAO2; Default: C. FISAPT_LINK_ORTHO (FISAPT)¶FISAPT — Orthogonalization of link orbitals for FISAPT_LINK_ASSIGNMENT=SAOx/SIAOx Link A orthogonalized to A in whole (interacting) molecule or in the (noninteracting) fragment?. Type: string; Possible Values: FRAGMENT, WHOLE, NONE; Default: FRAGMENT. FISAPT_LINK_SELECTION (FISAPT)¶FISAPT — Specification algorithm for link bonds in ISAPT. Type: string; Possible Values: AUTOMATIC, MANUAL; Default: AUTOMATIC. FISAPT_MANUAL_LINKS (FISAPT)¶FISAPT — Manual link bond specification [[Atom1, Atom2], …]. Type: array; Default: No Default. FISAPT_MEM_SAFETY_FACTOR (FISAPT)¶FISAPT (Expert) — Memory safety factor for heavy FISAPT operations. Type: double; Default: 0.9. FISAPT_PLOT_FILEPATH (FISAPT)¶FISAPT — Filepath to drop scalar data within input file directory. Type: string; Default: plot/. FLEXIBLE_G_CONVERGENCE (OPTKING)¶OPTKING — Even if a user-defined threshold is set, allow for normal, flexible convergence criteria. Type: boolean; Default: false. FOLLOW_ROOT (DETCI)¶DETCI — The root to write out the two-particle density matrix for (the one-particle density matrices are written for all roots). Useful for a state-specific CASSCF or CI optimization on an excited state. Type: integer; Default: 0. FOLLOW_ROOT (MCSCF)¶MCSCF — Which solution of the SCF equations to find, where 1 is the SCF ground state. Type: integer; Default: 1. FOLLOW_ROOT (PSIMRCC)¶PSIMRCC — Which root of the effective hamiltonian is the target state?. Type: integer; Default: 1. FOLLOW_STEP_INCREMENT (SCF)¶SCF (Expert) — When using STABILITY_ANALYSIS = FOLLOW, the increment to modify FOLLOW_STEP_SCALE",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:140109,Safety,redund,redundant,140109,"coefficents of \(\pm \sqrt{\frac{1}{2}}\) ?. Type: boolean; Default: false. FRAC_DIIS (SCF)¶SCF — Do use DIIS extrapolation to accelerate convergence in frac?. Type: boolean; Default: true. FRAC_LOAD (SCF)¶SCF — Do recompute guess from stored orbitals?. Type: boolean; Default: false. FRAC_OCC (SCF)¶SCF — The absolute indices of occupied orbitals to fractionally occupy (+/- for alpha/beta). Type: array; Default: No Default. FRAC_RENORMALIZE (SCF)¶SCF — Do renormalize C matrices prior to writing to checkpoint?. Type: boolean; Default: true. FRAC_START (SCF)¶SCF — The iteration to start fractionally occupying orbitals (or 0 for no fractional occupation). Type: integer; Default: 0. FRAC_VAL (SCF)¶SCF — The occupations of the orbital indices specified above (\(0.0\le {\rm occ} \le 1.0\)). Type: array; Default: No Default. FRAG_MODE (OPTKING)¶OPTKING — For multi-fragment molecules, treat as single bonded molecule or via interfragment coordinates. A primary difference is that in MULTI mode, the interfragment coordinates are not redundant. Type: string; Possible Values: SINGLE, MULTI; Default: SINGLE. FRAG_REF_ATOMS (OPTKING)¶OPTKING — Specify atoms to use for reference points in interfragment coordinates. Type: array; Default: No Default. FREEZE_ALL_DIHEDRALS (OPTKING)¶OPTKING — Freeze ALL dihedral angles. Type: boolean; Default: false. FREEZE_CORE (GLOBALS)¶GLOBALS — Specifies how many core orbitals to freeze in correlated computations. TRUE or 1 will default to freezing the previous noble gas shell on each atom. In case of positive charges on fragments, an additional shell may be unfrozen, to ensure there are valence electrons in each fragment. With FALSE or 0, no electrons are frozen (with the exception of electrons treated by an ECP). With -1, -2, and -3, the user might request strict freezing of the previous first/second/third noble gas shell on every atom. In this case, when there are no valence electrons, the code raises an exception. More precise control over the nu",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:153719,Safety,avoid,avoid,153719,"ess, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. ICORE (DETCI)¶DETCI — Specifies how to handle buffering of CI vectors. A value of 0 makes the program perform I/O one RAS subblock at a time; 1 uses entire CI vectors at a time; and 2 uses one irrep block at a time. Values of 0 or 2 cause some inefficiency in the I/O (requiring multiple reads of the C vector when constructing H in the iterative subspace if DIAG_METHOD = SEM), but require less core memory. Type: integer; Default: 1. INCFOCK (SCF)¶SCF — Do perform incremental Fock build?. Type: boolean; Default: false. INCFOCK_CONVERGENCE (SCF)¶SCF — The density threshold at which to stop building the Fock matrix incrementally. Type: conv double; Default: 1.0e-5. INCFOCK_FULL_FOCK_EVERY (SCF)¶SCF — Frequency with which to compute the full Fock matrix if using INCFOCK . N means rebuild every N SCF iterations to avoid accumulating error from the incremental procedure. Type: integer; Default: 5. INDUCED_CONVERGENCE (PE)¶PE — Threshold for induced moments convergence. Type: conv double; Default: 1e-8. INTCOS_GENERATE_EXIT (OPTKING)¶OPTKING — Do only generate the internal coordinates and then stop?. Type: boolean; Default: false. INTEGRAL_CUTOFF (DFOCC)¶DFOCC — Cutoff value for DF integrals. Type: integer; Default: 9. INTEGRAL_PACKAGE (GLOBALS)¶GLOBALS — Integral package to use. If compiled with Simint support, change this option to use them; LibInt2 is used otherwise. Type: string; Possible Values: LIBINT2, SIMINT; Default: LIBINT2. INTERFRAG_COLLINEAR_TOL (OPTKING)¶OPTKING — Tolerance for whether to reject a set of generated reference atoms due to collinearity. Type: conv double; Default: 0.01. INTERFRAG_COORDS (OPTKING)¶OPTKING — Dictionary to define a dimer. Contains “Natoms per frag”, “A Frag”, “A Ref Atoms”, “B Frag”, and “B Ref Atoms”. Type: string; Default: No Default. INTERFRAG_DIST_INV (OPTKIN",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:190066,Safety,redund,redundant,190066,"le?. Type: boolean; Default: false. OO_SCALE (DFOCC)¶DFOCC — OO scaling factor used in MSD. Type: double; Default: 0.01. OPDM (DCT)¶DCT — Compute a (relaxed) one-particle density matrix? Can be set manually. Set internally for property and gradient computations. Type: boolean; Default: false. OPDM (DETCI)¶DETCI — Do compute one-particle density matrix if not otherwise required?. Type: boolean; Default: false. OPDM_ONLY (CCDENSITY)¶CCDENSITY (Expert) — For internal use only! Compute the one-particle density matrix, but not the two-particle density matrix. Type: boolean; Default: false. OPDM_RELAX (CCDENSITY)¶CCDENSITY — Do relax the one-particle density matrix?. Type: boolean; Default: false. OPDM_RELAX (DFMP2)¶DFMP2 — Do relax the one-particle density matrix?. Type: boolean; Default: true. OPT_COORDINATES (OPTKING)¶OPTKING — Geometry optimization coordinates to use. REDUNDANT and INTERNAL are synonyms and the default. CARTESIAN uses only cartesian coordinates. BOTH uses both redundant and cartesian coordinates. CUSTOM is not fully implemented yet - expected optking 0.3.1. Type: string; Possible Values: REDUNDANT, INTERNAL, CARTESIAN, BOTH, CUSTOM; Default: INTERNAL. OPT_METHOD (DFOCC)¶DFOCC — The orbital optimization algorithm. Presently quasi-Newton-Raphson algorithm available with several Hessian * options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC)¶OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters with a crude approximation to all elements of the MO Hessian. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: MSD. OPT_RESTART (OPTKING)¶OPTKING — Restart the optimization from optking’s written history. Type: double; Default: 0. OPT_TYPE (OPTKING)¶OPTKING — Specifie",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:216226,Safety,redund,redundant,216226,")¶FNOCC (Expert) — do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CCTRANSORT (CCTRANSORT)¶CCTRANSORT — Use cctransort module NOTE: Turning this option off requires separate installation of ccsort and transqt2 modules, see http://github.com/psi4/psi4pasture. Type: boolean; Default: true. RUN_CEPA (FNOCC)¶FNOCC (Expert) — Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. RUN_MP2 (FNOCC)¶FNOCC (Expert) — do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3 (FNOCC)¶FNOCC (Expert) — do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4 (FNOCC)¶FNOCC (Expert) — do only evaluate mp4 energy?. Type: boolean; Default: false. S (DETCI)¶DETCI — The value of the spin quantum number \(S\) is given by this option. The default is determined by the value of the multiplicity. This is used for two things: (1) determining the phase of the redundant half of the CI vector when the \(M_s = 0\) component is used (i.e., MS0 = TRUE), and (2) making sure the guess vector has the desired value of \(\langle S^2\rangle\) (if CALC_S_SQUARED is TRUE and ICORE = 1). Type: double; Default: 0.0. S_CHOLESKY_TOLERANCE (SCF)¶SCF — Tolerance for partial Cholesky decomposition of overlap matrix. Type: conv double; Default: 1e-8. S_CUT (DLPNO)¶DLPNO (Expert) — Overlap matrix threshold for removing linear dependencies. Type: double; Default: 1e-8. S_ORTHOGONALIZATION (SCF)¶SCF — SO orthogonalization: automatic, symmetric, or canonical?. Type: string; Possible Values: AUTO, SYMMETRIC, CANONICAL, PARTIALCHOLESKY; Default: AUTO. S_TOLERANCE (SCF)¶SCF — Minimum S matrix eigenvalue to allow before linear dependencies are removed. Type: conv double; Default: 1e-7. SAD_CHOL_TOLERANCE (SCF)¶SCF (Expert) — SAD guess density decomposition threshold. Type: conv double; Default: 1e-7. SAD_D_CONVERGENCE (SCF)¶SCF — Convergence criterion for SCF density in the ",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:221697,Safety,safe,safety,221697,"p module to use?. Type: string; Possible Values: FISAPT, SAPT; Default: SAPT. SAPT_FDDS_DISP_LEG_LAMBDA (SAPT)¶SAPT (Expert) — Lambda shift in the space morphing for the FDDS Dispersion time integration. Type: double; Default: 0.3. SAPT_FDDS_DISP_NUM_POINTS (SAPT)¶SAPT (Expert) — Number of points in the Legendre FDDS Dispersion time integration. Type: integer; Default: 10. SAPT_FDDS_V2_RHO_CUTOFF (SAPT)¶SAPT (Expert) — Minimum rho cutoff for the in the LDA response for FDDS. Type: double; Default: 1.e-6. SAPT_LEVEL (SAPT)¶SAPT — The level of theory for SAPT. Type: string; Possible Values: SAPT0, SAPT2, SAPT2+, SAPT2+3; Default: SAPT0. SAPT_MEM_CHECK (SAPT)¶SAPT — Do force SAPT2 and higher to die if it thinks there isn’t enough memory? Turning this off is ill-advised. Type: boolean; Default: true. SAPT_MEM_FACTOR (SAPT)¶SAPT (Expert) — Proportion of memory available for the DF-MP2 three-index integral buffers used to evaluate dispersion. Type: double; Default: 0.9. SAPT_MEM_SAFETY (SAPT)¶SAPT — Memory safety. Type: double; Default: 0.9. SAPT_QUIET (SAPT)¶SAPT (Expert) — Interior option to clean up printing. Type: boolean; Default: false. SAVE_JK (SCF)¶SCF — Keep JK object for later use?. Type: boolean; Default: false. SAVE_OPTIMIZATION (OPTKING)¶OPTKING — Save OptKing’s internal classes for possible restart upon error. Type: boolean; Default: false. SAVE_UHF_NOS (SCF)¶SCF — Save the UHF NOs. Type: boolean; Default: false. SCF_INITIAL_ACCELERATOR (SCF)¶SCF — Use a method to accelerate initial SCF convergence? Use NONE for DIIS alone (if enabled) and EDIIS or ADIIS to have both the chosen accelerator and DIIS (if enabled). For restricted-open references, EDIIS and ADIIS have no effect. Type: string; Possible Values: NONE, EDIIS, ADIIS; Default: ADIIS. SCF_INITIAL_FINISH_DIIS_TRANSITION (SCF)¶SCF — SCF error at which to complete the linear interpolation between DIIS steps and steps of the initial SCF accelerator Value taken from Garza and Scuseria, DOI: 10.1063/1.4740249",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:223008,Safety,safe,safety,223008,"start upon error. Type: boolean; Default: false. SAVE_UHF_NOS (SCF)¶SCF — Save the UHF NOs. Type: boolean; Default: false. SCF_INITIAL_ACCELERATOR (SCF)¶SCF — Use a method to accelerate initial SCF convergence? Use NONE for DIIS alone (if enabled) and EDIIS or ADIIS to have both the chosen accelerator and DIIS (if enabled). For restricted-open references, EDIIS and ADIIS have no effect. Type: string; Possible Values: NONE, EDIIS, ADIIS; Default: ADIIS. SCF_INITIAL_FINISH_DIIS_TRANSITION (SCF)¶SCF — SCF error at which to complete the linear interpolation between DIIS steps and steps of the initial SCF accelerator Value taken from Garza and Scuseria, DOI: 10.1063/1.4740249. Type: double; Default: 1.0e-4. SCF_INITIAL_START_DIIS_TRANSITION (SCF)¶SCF — SCF error at which to start the linear interpolation between DIIS steps and steps of the initial SCF accelerator. Value taken from Garza and Scuseria, DOI: 10.1063/1.4740249. Type: double; Default: 1.0e-1. SCF_MEM_SAFETY_FACTOR (SCF)¶SCF — Memory safety factor for allocating JK. Type: double; Default: 0.75. SCF_PROPERTIES (SCF)¶SCF — SCF Properties to calculate after an energy evaluation. Note, this keyword is not used for property evaluations. Type: array; Default: No Default. SCF_SUBTYPE (SCF)¶SCF (Expert) — For certain SCF_TYPE algorithms that have internal sub-algorithms depending on available memory or other hardware constraints, allow the best sub-algorithm for the molecule and conditions (AUTO ; usual mode) or forcibly select a sub-algorithm (usually only for debugging or profiling). Presently, SCF_SUBTYPE=DF, SCF_SUBTYPE=MEM_DF, and SCF_SUBTYPE=DISK_DF can have INCORE and OUT_OF_CORE selected; and SCF_TYPE=PK can have INCORE, OUT_OF_CORE, YOSHIMINE_OUT_OF_CORE, and REORDER_OUT_OF_CORE selected. Type: string; Possible Values: AUTO, INCORE, OUT_OF_CORE, YOSHIMINE_OUT_OF_CORE, REORDER_OUT_OF_CORE; Default: AUTO. SCF_TYPE (CPHF)¶CPHF — SCF Type. Type: string; Possible Values: DIRECT, DF, PK, OUT_OF_CORE, PS, INDEPENDEN",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:43671,Security,access,access,43671,"tes, while OFF (=1) retains the rotational degrees of freedom. At a stationary point on the potential energy surface, both options will give equivalent harmonic force fields, but OFF should be used at non-stationary points. Type: string; Possible Values: ON, OFF; Default: ON. CFOUR_FD_STEPSIZE (CFOUR)¶CFOUR — Specifies the step length in mass-weighted coordinates (in \(10^{-4} amu^{1/2} bohr\) ) used in generating the force constant matrix by finite difference of Cartesian gradients. Type: integer; Default: 5. CFOUR_FD_USEGROUP (CFOUR)¶CFOUR — In finite difference calculations using the FINDIF option, this keyword specifies the point group to be used in generating the symmetry-adapted vibrational coordinates. FULL (= 0) specifies the full molecular point group, COMP (= 1) specifies the Abelian subgroup used in the electronic structure calculation. Type: string; Possible Values: FULL, COMP; Default: FULL. CFOUR_FILE_RECSIZ (CFOUR)¶CFOUR — This specifies the physical length (in integer words) of the records used in the word-addressable direct access files used by CFOUR. This value should always be chosen as a multiple of 512 bytes, as your local system manager certainly understands. Type: integer; Default: 2048. CFOUR_FILE_STRIPE (CFOUR)¶CFOUR — This option allows the splitting of files. Input is required in the form N1/N2/N3/N4/N5, where N1, N2, N3, N4, and N5 specify the number of files in which MOINTS, GAMLAM, MOABCD, DERINT, and DERGAM are split, respectively. Type: string; Default: 0/0/0/0/0. CFOUR_FINITE_PERTURBATION (CFOUR)¶CFOUR — Specifies the field strength for a perturbation (defined within a %perturbation section). The value must be given as an integer, and the field strength used by the program will be then the value of the keyword \(\times 10^{-6}\). Type: integer; Default: 0. CFOUR_FOCK (CFOUR)¶CFOUR — This option is used to control the algorithm used for construction of the Fock matrix in SCF calculations. PK (=0) uses the PK-supermatrix approach while ",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:52304,Security,access,access,52304,"as a possible search for a lower SCF solution. There are three possible options for this keyword. OFF (=0) does nothing, while ON (=1) performs a stability analysis and returns the number of negative eigenvalues in the orbital rotation Hessian. A third option, FOLLOW (=2) performs the stability analysis and then proceeds to rotate the SCF orbitals in the direction of a particular negative eigenvalue of the orbital rotation Hessian (see the explanation of keyword CFOUR_ROT_EVEC), after which the SCF is rerun. Type: string; Possible Values: OFF, ON, FOLLOW; Default: OFF. CFOUR_INCORE (CFOUR)¶CFOUR — This keyword can be used to significantly reduce disk i/o, and should be implemented very soon. The following options are available: OFF (= 0), no special algorithms are used (the default case); ALL (=1) all quantities except the \(\langle ab\vert\vert cd\rangle\) molecular integral lists are held in core; PARTIAL (= 2), the T2 and T1 vectors are held in core throughout the calculation; (=4) all quantities except the \(\langle ab\vert\vert cd\rangle\) and \(\langle ab\vert\vert ci\rangle\) integrals are held in core; (=5) \(\langle ij\vert\vert kl\rangle\) and \(\langle ij\vert\vert ka\rangle\) and two-index quantities are held in core; (=6) all direct access files (MOINTS, GAMLAM, etc.) are held in core. At present, these options have been implemented only in the energy code xvcc and the excitation energy code xvee. (Default: 0). Type: string; Possible Values: OFF, ALL, PARTIAL; Default: OFF. CFOUR_INPUT_MRCC (CFOUR)¶CFOUR — Specifies whether an input for mrcc is written (ON, =0) or not (OFF, =1) if CFOUR_CC_PROGRAM =EXTERNAL has been specified. Type: boolean; Default: true. CFOUR_INTEGRALS (CFOUR)¶CFOUR — This keyword defines what type of integral input will be written by xjoda. VMOL (=1) has to be used with the programs of CFOUR. Using ARGOS (=0), input for Pitzer’s ARGOS integral program will be written. (Default: VMOL). Type: string; Possible Values: VMOL, ARGOS; Defa",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:245383,Security,validat,validated,245383," This should be set automatically from the calling Psithon function. Type: string; Possible Values: DETCI, CI, ZAPTN, DETCAS, CASSCF, RASSCF; Default: DETCI. WFN (GLOBALS)¶GLOBALS (Expert) — Wavefunction type. Type: string; Default: SCF. WFN (SCF)¶SCF (Expert) — Wavefunction type. Type: string; Possible Values: SCF; Default: SCF. WFN_SYM (MCSCF)¶MCSCF — The symmetry of the SCF wavefunction. Type: string; Default: 1. WFN_SYM (PSIMRCC)¶PSIMRCC — The symmetry of the target wavefunction, specified either by Schönflies symbol, or irrep number (in Cotton ordering). Type: string; Default: 1. WFN_TYPE (DFOCC)¶DFOCC — Type of the wavefunction. Type: string; Default: DF-OMP2. WFN_TYPE (OCC)¶OCC — Type of the wavefunction. Type: string; Possible Values: OMP2, OMP3, OCEPA, OMP2.5, REMP, OREMP; Default: OMP2. WRITE_NOS (CCDENSITY)¶CCDENSITY — Do write natural orbitals (molden). Type: boolean; Default: false. WRITE_OPT_HISTORY (OPTKING)¶OPTKING — Write the full history to disk. Produces a non validated OptimizationResult. Type: boolean; Default: false. WRITE_OPT_RESULT (OPTKING)¶OPTKING — Write the optimization history / state to disc. Type: boolean; Default: false. WRITE_TRAJECTORY (OPTKING)¶OPTKING — Write Optimization Trajectory. Type: boolean; Default: false. WRITER_FILE_LABEL (GLOBALS)¶GLOBALS — Base filename for text files written by PSI, such as the MOLDEN output file, the Hessian file, the internal coordinate file, etc. Use the add_str_i function to make this string case sensitive. Type: string; Default: No Default. XI (CCDENSITY)¶CCDENSITY — Do compute Xi?. Type: boolean; Default: false. XI_CONNECT (CCDENSITY)¶CCDENSITY (Expert) — Do require \(\bar{H}\) and \(R\) to be connected?. Type: boolean; Default: false. ZERO_INTERNAL_AMPS (PSIMRCC)¶PSIMRCC — Do zero the internal amplitudes, i.e., those that map reference determinants onto each other?. Type: boolean; Default: true. ZETA (CCDENSITY)¶CCDENSITY — Do use zeta?. Type: boolean; Default: false. ZETA (CCLAMBDA)¶CCLAMBDA — ",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:5902,Testability,benchmark,benchmarking,5902,"INTS — Primary basis set. Available basis sets. Type: string; Possible Values: basis string; Default: No Default. BASIS (SAPT)¶SAPT — Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. BASIS (SCF)¶SCF — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS_GUESS (SCF)¶SCF — Accelerate convergence by performing a preliminary SCF with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the Defaults small basis set 3-21G, pcseg-0, or def2-SV(P). Type: string; Default: FALSE. BASIS_RELATIVISTIC (GLOBALS)¶GLOBALS — Auxiliary basis set for solving Dirac equation in X2C and DKH calculations. Defaults to decontracted orbital basis. Type: string; Default: No Default. BCCD_MAXITER (CCENERGY)¶CCENERGY — Maximum number of iterations for Brueckner CCD. Type: integer; Default: 50. BENCH (GLOBALS)¶GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI)¶DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BORDER (PE)¶PE — Activate border options for sites in proximity to the QM/MM border. Type: boolean; Default: false. BORDER_N_REDIST (PE)¶PE — number of neighbor sites to redistribute to. The default (-1) redistributes to all sites which are not in the border region. Type: integer; Default: -1. BORDER_REDIST_ORDER (PE)¶PE — order from which moments are removed, e.g., if set to 1 (default), only charges are redistributed and all higher order moments are removed. Type: integer; Default: 1. BORDER_REDIST_POL (PE)¶PE — redistribute polarizabilities? If false, polarizabilities are removed ",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:54185,Testability,test,tested,54185,"r higher generally do not produce anything of interest to the general user. Do not set JODA_PRINT to 999 as this will cause the core vector to be dumped to disk. Type: integer; Default: 0. CFOUR_LINEQ_CONV (CFOUR)¶CFOUR — Convergence threshold for linear equations controlled by LINEQ_TYPE. Equations are iterated until smallest residual falls below \(10^{-N}\), where \(N\) is the value associated with this keyword. Type: integer; Default: 7. CFOUR_LINEQ_MAXCY (CFOUR)¶CFOUR — The maximum number of iterations in all linear CC equations. Type: integer; Default: 50. CFOUR_LINEQ_TYPE (CFOUR)¶CFOUR — Determines the algorithm used to solve linear equations ( \(\Lambda\) and derivative \(T\) and \(\Lambda\) ). POPLE (=0) uses Pople’s method of successively orthogonalized basis vectors, while DIIS (=1) uses Pulay’s DIIS method. The latter offers the practical advantage of requiring much less disk space, although it is not guaranteed to converge. Moreover, POPLE has not been tested for some time and should definitely be checked! (Default : DIIS). Type: string; Possible Values: POPLE, DIIS; Default: DIIS. CFOUR_LOCK_ORBOCC (CFOUR)¶CFOUR — This keyword is used by the SCF program to determine if the orbital occupancy (by symmetry block) is allowed to change in the course of the calculation. ON (=1) locks the occupation to that set by the keyword CFOUR_OCCUPATION (or the initial guess if omitted); OFF (= 0) permits the occupation to change. (Default : 1 if the occupation is specified with CFOUR_OCCUPATION and for second and later steps of optimizations; 0 if CFOUR_OCCUPATION omitted.). Type: boolean; Default: false. CFOUR_MAXSTEP (CFOUR)¶CFOUR — Identical to CFOUR_GEO_MAXSTEP. Type: integer; Default: 300. CFOUR_MEM_UNIT (CFOUR)¶CFOUR — Specifies the units in which the amount of requested core memory is given. Possible choices are INTEGERWORDS (default), kB, MB, GB, and TB. Psi4 Interface: Keyword set from memory input command when given, always MB. Type: string; Possible Values: I",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:60096,Testability,log,logical,60096,"l be printed. Type: integer; Default: 15. CFOUR_OCCUPATION (CFOUR)¶CFOUR — Specifies the orbital occupancy of the reference function in terms of the occupation numbers of the orbitals and their irreducible representations. The occupancy is specified by either NIRREP or 2*NIRREP integers specifying the number of occupied orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. If the reference function is for an open-shell system, two strings of NIRREP occupation numbers separated by a slash are input for the \(\alpha\) and \(\beta\) sets of orbitals. An example of the use of the OCCUPATION keyword for the water molecule would be OCCUPATION=3-1-1-0. For the \(^2A_1\) water cation, an open-shell system, the keyword would be specified by OCCUPATION=3-1-1-0/2-1-1-0. It should be noted that the xvmol integral program orders the irreducible representations in a strange way, which most users do not perceive to be a logical order. Hence, it is usually advisable initially to run just a single point integral and HF-SCF calculation in order to determine the number and ordering of the irreducible representations. The occupation keyword may be omitted, in which case an initial orbital occupancy is determined by diagonalization of the core Hamiltonian. In many cases, HF-SCF calculations run with the core Hamiltonian guess will usually converge to the lowest energy HF-SCF solution, but this should not be blindly assumed. (Default: The occupation is given by the core Hamiltonian initial guess). Psi4 Interface: The arrays above are specified in PSI as (white space tolerant) [3,1,1,0] and [[3,1,1,0],[3,0,1,0]]. Type: array; Default: No Default. CFOUR_OMP_NUM_THREADS (CFOUR)¶CFOUR (Expert) — Sets the OMP_NUM_THREADS environment variable before calling CFOUR. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that v",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:64188,Testability,test,testing,64188,"ing. Default: STANDARD except for ROHF-CCSD(T) and ROHF-MP4 calculations for which SEMICANONICAL is the default. Type: string; Possible Values: STANDARD, SEMICANONICAL; Default: STANDARD. CFOUR_PERT_ORB (CFOUR)¶CFOUR — Specifies the type of perturbed orbitals used in energy derivative calculations. STANDARD means that the gradient formulation assumes that the perturbed orbitals are not those in which the (perturbed) Fock matrix is diagonal. CANONICAL means that the perturbed orbitals are assumed to be canonical. This keyword is set automatically to CANONICAL in derivative calculations with methods which include triple excitations (MBPT[4]/MP4, CCSD+T[CCSD], CCSD[T], QCISD[T] and all iterative schemes like CCSDT-n and CC3) apart from CCSDT. IJ_CANONICAL requests a canonical perturbed-orbital treatment only for the occupied-occupied block of the unperturbed density matrix in analytic derivative calculations. For testing purposes, it is possible to force the use standard perturbed orbitals even in case of iterative triple excitations via the option FORCE_STANDA (dne?). Note also that in case of unrelaxed derivatives standard orbitals must be used. Default : STANDARD for all methods without triples (except CCSDT), CANONICAL for all methods with triples in case of relaxed derivatives. Type: string; Possible Values: STANDARD, CANONICAL, IJ_CANONICAL; Default: No Default. CFOUR_POINTS (CFOUR)¶CFOUR — Specifies either single (=1, or SINGLE) or double (=2, DOUBLE) sided numerical differentiation in the finite difference evaluation of the Hessian. Two-sided numerical differentiation is considerably more accurate than the single-sided method, and its use is strongly recommended for production work. Type: string; Possible Values: SINGLE, DOUBLE; Default: DOUBLE. CFOUR_PRINT (CFOUR)¶CFOUR — Controls the amount of printing in the energy and energy derivative calculation programs. Using a value of 1 will produce a modest amount of additional output over the default value of 0, whic",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:108982,Testability,log,logarithmic,108982,"SCF)¶SCF — The gradient regularized asymptotic correction beta value. Type: double; Default: 40.0. DFT_GRAC_C_FUNC (SCF)¶SCF (Expert) — The gradient regularized asymptotic correction functional corr form. Type: string; Default: XC_LDA_C_VWN. DFT_GRAC_SHIFT (SCF)¶SCF — The gradient regularized asymptotic correction shift value. Type: double; Default: 0.0. DFT_GRAC_X_FUNC (SCF)¶SCF (Expert) — The gradient regularized asymptotic correction functional exch form. Type: string; Default: XC_GGA_X_LB. DFT_GRID_NAME (SCF)¶SCF (Expert) — The DFT grid specification, such as SG1. Type: string; Possible Values: SG0, SG1; Default: No Default. DFT_NUCLEAR_SCHEME (SCF)¶SCF — Nuclear Scheme. Type: string; Possible Values: TREUTLER, BECKE, NAIVE, STRATMANN, SBECKE; Default: TREUTLER. DFT_OMEGA (SCF)¶SCF — The DFT Range-separation parameter. Type: double; Default: 0.0. DFT_OMEGA_C (SCF)¶SCF — The DFT Correlation Range-separation parameter. Type: double; Default: 0.0. DFT_PRUNING_ALPHA (SCF)¶SCF (Expert) — Spread alpha for logarithmic pruning. Type: double; Default: 1.0. DFT_PRUNING_SCHEME (SCF)¶SCF — Select approach for pruning. Options ROBUST and TREUTLER prune based on regions (proximity to nucleus) while FLAT P_GAUSSIAN D_GAUSSIAN P_SLATER D_SLATER LOG_GAUSSIAN LOG_SLATER prune based on decaying functions (experts only!). The recommended scheme is ROBUST. Type: string; Default: NONE. DFT_RADIAL_POINTS (SCF)¶SCF — Number of radial points. Type: integer; Default: 75. DFT_RADIAL_SCHEME (SCF)¶SCF — Radial Scheme. Type: string; Possible Values: TREUTLER, BECKE, MULTIEXP, EM, MURA; Default: TREUTLER. DFT_REMOVE_DISTANT_POINTS (SCF)¶SCF (Expert) — Remove points from the quadrature grid that exceed the spatial extend of the basis functions. Type: boolean; Default: true. DFT_SPHERICAL_POINTS (SCF)¶SCF — Number of spherical points (A Lebedev Points number). Type: integer; Default: 302. DFT_SPHERICAL_SCHEME (SCF)¶SCF — Spherical Scheme. Type: string; Possible Values: LEBEDEV; Default: LEBEDEV.",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:176298,Testability,test,test,176298,"on level EX_LEVEL. Type: boolean; Default: true. MO_DIIS_NUM_VECS (DFOCC)¶DFOCC — Number of vectors used in orbital DIIS. Type: integer; Default: 6. MO_MAXITER (DFOCC)¶DFOCC — Maximum number of iterations to determine the orbitals. Type: integer; Default: 100. MO_MAXITER (OCC)¶OCC — Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. MO_READ (MCSCF)¶MCSCF — Do read in from file the MOs from a previous computation?. Type: boolean; Default: true. MO_READ (OCC)¶OCC — Do read coefficient matrices from external files of a previous OMP2 or OMP3 computation?. Type: boolean; Default: false. MO_STEP_MAX (DFOCC)¶DFOCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_STEP_MAX (OCC)¶OCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_WRITE (OCC)¶OCC — Do write coefficient matrices to external files for direct reading MOs in a subsequent job?. Type: boolean; Default: false. MODULE (CPHF)¶CPHF — What app to test?. Type: string; Possible Values: RCPHF; Default: RCPHF. MOGRAD_DAMPING (OCC)¶OCC — Damping factor for the orbital gradient (Rendell et al., JCP, vol. 87, pp. 5976, 1987). Type: double; Default: 1.0. MOLDEN_WITH_VIRTUAL (GLOBALS)¶GLOBALS — Write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs (false). Type: boolean; Default: true. MOLDEN_WRITE (DFOCC)¶DFOCC — Do write a MOLDEN output file? If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. MOLDEN_WRITE (SCF)¶SCF — Do write a MOLDEN output file? If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. MOM_OCC (SCF)¶SCF — The absolute indices of orbitals to excite from in MOM (+/- for alpha/bet",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:209956,Testability,test,tested,209956,"le; Default: 0.4. REGULARIZATION (DFOCC)¶DFOCC — Do use regularized denominators?. Type: boolean; Default: false. RELATIVISTIC (GLOBALS)¶GLOBALS (Expert) — Relativistic Hamiltonian type. Type: string; Possible Values: NO, X2C; Default: NO. RELAX_GUESS_ORBITALS (DCT)¶DCT (Expert) — Controls whether to relax the guess orbitals by taking the guess density cumulant and performing orbital update on the first macroiteration (for ALOGRITHM = TWOSTEP only). Type: boolean; Default: false. RELAXED (OCC)¶OCC — Do consider orbital response contributions for PDMs and GFM?. Type: boolean; Default: true. REMP_A (DFOCC)¶DFOCC — mixing parameter for the REMP hybrid perturbation theory, A specifies the Moller-Plesset fraction. Type: double; Default: 0.15e0. REMP_A (OCC)¶OCC — mixing parameter for the REMP hybrid perturbation theory, A specifies the Moller-Plesset fraction. Type: double; Default: 0.15e0. REPL_OTF (DETCI)¶DETCI (Expert) — Do string replacements on the fly in DETCI? Can save a gigantic amount of memory (especially for truncated CI’s) but is somewhat flaky and hasn’t been tested for a while. It may work only works for certain classes of RAS calculations. The current code is very slow with this option turned on. Type: boolean; Default: false. RESPONSE_ALGORITHM (DCT)¶DCT — Algorithm to use for the solution of DC-06 response equations in computation of analytic gradients and * properties. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: TWOSTEP. RESTART (CCENERGY)¶CCENERGY — Do restart the coupled-cluster iterations from old \(t_1\) and \(t_2\) amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. RESTART (CCLAMBDA)¶CCLAMBDA — Do restart the coupled-",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:238997,Testability,test,test,238997,"g irreps when symmetry is used. Type: array; Default: No Default. TDSCF_TDA (SCF)¶SCF — Run with Tamm-Dancoff approximation (TDA), uses random-phase approximation (RPA) when false. Type: boolean; Default: false. TDSCF_TDM_PRINT (SCF)¶SCF — Which transition dipole moments to print out: - E_TDM_LEN : electric transition dipole moments, length representation - E_TDM_VEL : electric transition dipole moments, velocity representation - M_TDM : magnetic transition dipole moments. Type: array; Default: No Default. TDSCF_TRIPLETS (SCF)¶SCF — Controls inclusion of triplet states, which is only valid for restricted references. Valid options: - none : No triplets computed (default) - also : lowest-energy triplets and singlets included, in 50-50 ratio. Note that singlets are privileged, i.e. if seeking to converge 5 states in total, 3 will be singlets and 2 will be triplets. - only : Only triplet states computed. Type: string; Possible Values: NONE, ALSO, ONLY; Default: NONE. TEST_B (OPTKING)¶OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING)¶OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. THETA_POINTS (SCF)¶SCF — Number of colatitude grid points for spherical potential integration. Type: integer; Default: 360. THICKNESS (SCF)¶SCF — Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. THREE_PARTICLE (DCT)¶DCT — Whether to compute three-particle energy correction or not. Type: string; Possible Values: NONE, PERTURBATIVE; Default: NONE. TIKHONOW_MAX (PSIMRCC)¶PSIMRCC — The cycle after which Tikhonow regularization is stopped. Set to zero to allow regularization in all iterations. Type: integer; Default: 5. TIKHONOW_OMEGA (DCT)¶DCT (Expert) — The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. TIKHONOW_OMEGA (PSIMRCC)¶PSIMRCC — The shift to apply to the denominators, {it c.f.} Taube and Bartlett, JCP, 130, 144112 (2009). Type: double; Def",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:239085,Testability,test,test,239085,"Run with Tamm-Dancoff approximation (TDA), uses random-phase approximation (RPA) when false. Type: boolean; Default: false. TDSCF_TDM_PRINT (SCF)¶SCF — Which transition dipole moments to print out: - E_TDM_LEN : electric transition dipole moments, length representation - E_TDM_VEL : electric transition dipole moments, velocity representation - M_TDM : magnetic transition dipole moments. Type: array; Default: No Default. TDSCF_TRIPLETS (SCF)¶SCF — Controls inclusion of triplet states, which is only valid for restricted references. Valid options: - none : No triplets computed (default) - also : lowest-energy triplets and singlets included, in 50-50 ratio. Note that singlets are privileged, i.e. if seeking to converge 5 states in total, 3 will be singlets and 2 will be triplets. - only : Only triplet states computed. Type: string; Possible Values: NONE, ALSO, ONLY; Default: NONE. TEST_B (OPTKING)¶OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING)¶OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. THETA_POINTS (SCF)¶SCF — Number of colatitude grid points for spherical potential integration. Type: integer; Default: 360. THICKNESS (SCF)¶SCF — Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. THREE_PARTICLE (DCT)¶DCT — Whether to compute three-particle energy correction or not. Type: string; Possible Values: NONE, PERTURBATIVE; Default: NONE. TIKHONOW_MAX (PSIMRCC)¶PSIMRCC — The cycle after which Tikhonow regularization is stopped. Set to zero to allow regularization in all iterations. Type: integer; Default: 5. TIKHONOW_OMEGA (DCT)¶DCT (Expert) — The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. TIKHONOW_OMEGA (PSIMRCC)¶PSIMRCC — The shift to apply to the denominators, {it c.f.} Taube and Bartlett, JCP, 130, 144112 (2009). Type: double; Default: 0.0. TIKHONOW_TRIPLES (PSIMRCC)¶PSIMRCC (Expert) — Do use Tikhonow regularization ",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:242512,Testability,test,testing,242512,"ls that used for (T) correction. Type: string; Possible Values: INCORE, AUTO, DIRECT, DISK; Default: DISK. TRIPLES_LOW_MEMORY (FNOCC)¶FNOCC — Do use low memory option for triples contribution? Note that this option is enabled automatically if the memory requirements of the conventional algorithm would exceed the available resources. The low memory algorithm is faster in general and has been turned on by default starting September 2020. Type: boolean; Default: true. TURN_ON_ACTV (MCSCF)¶MCSCF —. Type: integer; Default: 0. UHF_NOONS (SCF)¶SCF — The number of NOONs to print in a UHF calc. Type: string; Default: 3. UNFREEZE_DIHEDRALS (OPTKING)¶OPTKING — Unfreeze a subset of dihedrals - meant for use with freeze_all_dihedrals. Type: string; Default: No Default. UPDATE (DETCI)¶DETCI — The update or correction vector formula, either DAVIDSON (default) or OLSEN. Type: string; Possible Values: DAVIDSON, OLSEN; Default: DAVIDSON. USE_DF_INTS (FNOCC)¶FNOCC (Expert) — Use 3-index integrals to generate 4-index ERI’s? This keyword is used for testing purposes only. Changing its value will have no effect on the computation. Type: boolean; Default: false. USE_SPIN_SYM (PSIMRCC)¶PSIMRCC — Do use symmetry to map equivalent determinants onto each other, for efficiency?. Type: boolean; Default: true. USE_SPIN_SYMMETRY (PSIMRCC)¶PSIMRCC (Expert) — Whether to use spin symmetry to map equivalent configurations onto each other, for efficiency. Type: boolean; Default: true. VAL_EX_LEVEL (DETCI)¶DETCI — In a RAS CI, this is the additional excitation level for allowing electrons out of RAS I into RAS II. The maximum number of holes in RAS I is therefore EX_LEVEL + VAL_EX_LEVEL. Type: integer; Default: 0. VECS_CC3 (CCEOM)¶CCEOM — Vectors stored in CC3 computations. Type: integer; Default: 10. VECS_PER_ROOT (CCEOM)¶CCEOM — Vectors stored per root. Type: integer; Default: 12. WABEI_LOWDISK (CCHBAR)¶CCHBAR — Do use the minimal-disk algorithm for Wabei? It’s VERY slow!. Type: boolean; Default: fal",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:19278,Usability,simpl,simply,19278,"ly recommended for all CC calculations up to CCSD(T) and has been implemented for energy, gradient, second-derivative, and excitation energy calculations. Type: string; Possible Values: STANDARD, AOBASIS; Default: STANDARD. CFOUR_ACTIVE_ORBI (CFOUR)¶CFOUR — Specifies the active orbitals used in a TCSCF calculation and has to be used in combination with the keyword CFOUR_CORE_ORBITALS. The active orbitals are specified by either NIRREP or 2*NIRREP integers specifying the number of active orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION . Type: array; Default: No Default. CFOUR_ANH_ALGORITHM (CFOUR)¶CFOUR — Specifies which algorithm is used for CFOUR_ANHARMONIC =VIBROT, VPT2, and FULLQUARTIC calculations. If STANDARD (=0) is chosen, then simply invoking xcfour will cause a complete job to be run with all second-derivative calculations being done in series. If PARALLEL (=1), then the job stops after the second-derivative calculation at the reference geometry and generates out all input geometries for the remaining calculation. These can be then processed in “parallel” (currently not recommended). Note that it is recommended to carry out all calculations with PARALLEL, even when the actual calculation is carried out in a sequential mode. Type: string; Possible Values: STANDARD, PARALLEL; Default: STANDARD. CFOUR_ANH_DERIVATIVES (CFOUR)¶CFOUR — Specifies whether the anharmonic force field is calculated using analytic gradients (=FIRST) or analytic Hessians (=SECOND). Type: string; Possible Values: FIRST, SECOND; Default: SECOND. CFOUR_ANH_STEPSIZE (CFOUR)¶CFOUR — Controls the stepsize used in anharmonic force field calculations. The value is specified in reduced normal coordinates, which are dimensionless. The actual stepsize used in the calculation is \(\times 10",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:37258,Usability,clear,clearly,37258,"eyword is slightly complicated. For TDA calculations, the default is EXPECTATION since the evaluation of transition moments involves only a negligible amount of additional computation relative to the evaluation of the excitation energies. For EOMCC, the default is OFF since evaluation of any transition moments or properties requires approximately twice the computational time. Transition moments and dipole strengths are evaluated by default for all values of ESTATE_PROP other than OFF. Type: string; Possible Values: OFF, EXPECTATION, UNRELAXED, RESPONSE; Default: No Default. CFOUR_ESTATE_SYM (CFOUR)¶CFOUR — Specifies the number of excited states which are to be determined in each irreducible representation of the computational subgroup. The program attempts to find all of the lowest roots, but this is not guaranteed because the eigenvalue problem is not solved by direct matrix diagonalization, but rather by an iterative (modified Davidson) algorithm. For excited state gradient calculations, only one root (clearly) is used. In such a case, one and only one non-zero entry in the string can be used, and this value is usually set to one (i.e. 0/1/0/0). (However sometimes one wants to calculate the gradient for, say, the second root of a given symmetry, and in such a case, one could use 0/2/0/0. What happens is that both roots are calculated, but only the second one is used in the subsequent density matrix and gradient calculation.) The format used for this keyword is identical to that used in CFOUR_OCCUPATION. For example, for a computational subgroup having four symmetry species, the string 3/1/0/2 specifies that 6 total roots should be searched for, three in the first block, one in the second block, and two in the fourth block. It is also important to note that the %excite* input, if present, takes precedence over this keyword. Default: All zeros. Psi4 Interface: The array above is specified in PSI as (white space tolerant) [3,1,0,2]. Type: array; Default: No Default. ",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html:69244,Usability,simpl,simply,69244,"tual in symmetry block 2 and another will be removed from the second highest occupied orbital in symmetry block 4. Examples given later in this manual further illustrate the QRHF input options and may help to clarify any confusion resulting from this documentation. (Default : 1). Type: array; Default: No Default. CFOUR_QRHFGUES (CFOUR)¶CFOUR — If this keyword is set to ON (=1), then the QRHF orbitals specified by the CFOUR_QRHF_GENERAL, CFOUR_QRHF_ORBITAL and CFOUR_QRHF_SPIN (nyi?) keywords are used as a starting guess for a restarted SCF procedure. This can be an extremely useful way to converge “difficult” SCF solutions, such as those that correspond to states that are not the lowest states of a given symmetry. Note that when this option is used, the calculation that is performed is not a QRHF-CC calculation; it is instead a UHF-based or ROHF-based calculation, depending on what type of reference is specified by the CFOUR_REFERENCE keyword. The QRHF aspect of the calculation is used simply as a device to converge the orbitals. Type: boolean; Default: false. CFOUR_RAMAN_INT (CFOUR)¶CFOUR — ON (=1) requests a calculation of Raman intensities based on the geometrical derivatives of the static polarizability tensor, while DYN (=2) requests a calculation of Raman intensities based on the derivatives of the dynamical polarizability tensor. Type: string; Possible Values: ON, DYN, OFF; Default: OFF. CFOUR_RAMAN_ORB (CFOUR)¶CFOUR — Specifies whether Raman intensities are calculated with orbital relaxation with respect to the electric field perturbation (RELAXED, = 1) or without orbital relaxation (UNRELAXED, = 0). Type: string; Possible Values: RELAXED, UNRELAXED; Default: UNRELAXED. CFOUR_RDO (CFOUR)¶CFOUR — Specifies whether or not relaxed density natural orbitals are to be computed. This option only has meaning for a correlated calculation. For =0, Do not compute. For =1, compute. Type: boolean; Default: true. CFOUR_REFERENCE (CFOUR)¶CFOUR — Specifies the type of SCF ca",MatchSource.WIKI,psi4manual/master/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/master/autodoc_options_c_bymodule.html:607,Deployability,update,updated,607,"﻿. Keywords by Module. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Keywords by Module. Keywords by Module¶. GLOBALS; ADC; CCDENSITY; CCENERGY; CCEOM; CCHBAR; CCLAMBDA; CCRESPONSE; CCTRANSORT; CCTRIPLES; CFOUR; CPHF; DCT; DDX; DETCI; DFEP2; DFMP2; DFOCC; DLPNO; DMRG; EFP; FINDIF; FISAPT; FNOCC; GDMA; MCSCF; MINTS; MRCC; OCC; OPTKING; PCM; PE; PSIMRCC; SAPT; SCF; THERMO. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Keywords by Module. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_options_c_bymodule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_options_c_bymodule.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:39347,Deployability,update,updated,39347," conversion factor. amu2g; 1.660539040000E-24; amu2g [g] Atomic mass units to grams conversion factor. amu2kg; 1.660539040E-27; amu2kg [kg] Atomic mass units to kg conversion factor. au2amu; 0.000548579909070; au2amu [u] Atomic units (m$@@e$) to atomic mass units conversion factor. hartree2J; 4.359744650E-18; hartree2J [J] Hartree to joule conversion factor. hartree2aJ; 4.359744650; hartree2aJ [aJ] Hartree to attojoule (10$^{-18}$J) conversion factor. cal2J; 4.184; cal2J [J] Calorie to joule conversion factor. dipmom_au2si; 8.478353552E-30; dipmom_au2si [C m] Atomic units to SI units (Cm) conversion factor for dipoles. dipmom_au2debye; 2.541746451895025916414946904; dipmom_au2debye [???] Atomic units to Debye conversion factor for dipoles. dipmom_debye2si; 3.335640951E-30; dipmom_debye2si [???] Debye to SI units (Cm) conversion factor for dipoles. c_au; 137.035999139; c_au [] Speed of light in atomic units. hartree2ev; 27.21138602; hartree2ev [eV] Hartree to eV conversion factor. hartree2wavenumbers; 219474.6313702; hartree2wavenumbers [cm^-1] Hartree to cm$^{-1}$ conversion factor. hartree2kcalmol; 627.5094737775374055927342256; hartree2kcalmol [kcal mol^-1] Hartree to kcal mol$^{-1}$ conversion factor. hartree2kJmol; 2625.4996382852165050; hartree2kJmol [kJ mol^-1] Hartree to kilojoule mol$^{-1}$ conversion factor. hartree2MHz; 6579683920.711; hartree2MHz [MHz] Hartree to MHz conversion factor. kcalmol2wavenumbers; 349.7550882318031839256652313; kcalmol2wavenumbers [kcal cm mol^-1] kcal mol$^{-1}$ to cm$^{-1}$ conversion factor. e0; 8.854187817E-12; e0 [F m^-1] Vacuum permittivity (Fm$^{-1}$). na; 6.022140857E+23; na [mol^-1] Avogadro’s number. me; 9.10938356E-31; me [kg] Electron rest mass (in kg). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Physical Constants. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:611,Energy Efficiency,energy,energy,611,﻿. Physical Constants. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Physical Constants. Physical Constants¶. Physical constants in PSI4¶. Label; Value; Description. _220_lattice_spacing_of_silicon; 1.920155714E-10; {220} lattice spacing of silicon [m] uncertainty=0.000 0032 e-12. alpha_particle_electron_mass_ratio; 7294.29954136; alpha particle-electron mass ratio [] uncertainty=0.000 000 24. alpha_particle_mass; 6.644657230E-27; alpha particle mass [kg] uncertainty=0.000 000 082 e-27. alpha_particle_mass_energy_equivalent; 5.971920097E-10; alpha particle mass energy equivalent [J] uncertainty=0.000 000 073 e-10. alpha_particle_mass_energy_equivalent_in_MeV; 3727.379378; alpha particle mass energy equivalent in MeV [MeV] uncertainty=0.000 023. alpha_particle_mass_in_u; 4.001506179127; alpha particle mass in u [u] uncertainty=0.000 000 000 063. alpha_particle_molar_mass; 0.004001506179127; alpha particle molar mass [kg mol^{-1}] uncertainty=0.000 000 000 063 e-3. alpha_particle_proton_mass_ratio; 3.97259968907; alpha particle-proton mass ratio [] uncertainty=0.000 000 000 36. Angstrom_star; 1.00001495E-10; Angstrom star [m] uncertainty=0.000 000 90 e-10. atomic_mass_constant; 1.660539040E-27; atomic mass constant [kg] uncertainty=0.000 000 020 e-27. atomic_mass_constant_energy_equivalent; 1.492418062E-10; atomic mass constant energy equivalent [J] uncertainty=0.000 000 018 e-10. atomic_mass_constant_energy_equivalent_in_MeV; 931.4940954; atomic mass constant energy equivalent in MeV [MeV] uncertainty=0.000 0057. atomic_mass_unit_electron_volt_relationship; 931494095.4; atomic mass unit-electron volt relationship [eV] uncertainty=0.000 0057 e6. atomic_mass_unit_hartree_relationship; 34231776.902; atomic mass unit-hartree relationship [E_h] uncertainty=0.000 000 0016 e7. atomic_mass_unit_hertz_relationship; 2.2523427206E+23; atomic mass unit-hertz relationship [Hz] uncertainty=0.000 000 0010 e23. atomic_mass_unit_inverse_meter,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:744,Energy Efficiency,energy,energy,744,﻿. Physical Constants. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Physical Constants. Physical Constants¶. Physical constants in PSI4¶. Label; Value; Description. _220_lattice_spacing_of_silicon; 1.920155714E-10; {220} lattice spacing of silicon [m] uncertainty=0.000 0032 e-12. alpha_particle_electron_mass_ratio; 7294.29954136; alpha particle-electron mass ratio [] uncertainty=0.000 000 24. alpha_particle_mass; 6.644657230E-27; alpha particle mass [kg] uncertainty=0.000 000 082 e-27. alpha_particle_mass_energy_equivalent; 5.971920097E-10; alpha particle mass energy equivalent [J] uncertainty=0.000 000 073 e-10. alpha_particle_mass_energy_equivalent_in_MeV; 3727.379378; alpha particle mass energy equivalent in MeV [MeV] uncertainty=0.000 023. alpha_particle_mass_in_u; 4.001506179127; alpha particle mass in u [u] uncertainty=0.000 000 000 063. alpha_particle_molar_mass; 0.004001506179127; alpha particle molar mass [kg mol^{-1}] uncertainty=0.000 000 000 063 e-3. alpha_particle_proton_mass_ratio; 3.97259968907; alpha particle-proton mass ratio [] uncertainty=0.000 000 000 36. Angstrom_star; 1.00001495E-10; Angstrom star [m] uncertainty=0.000 000 90 e-10. atomic_mass_constant; 1.660539040E-27; atomic mass constant [kg] uncertainty=0.000 000 020 e-27. atomic_mass_constant_energy_equivalent; 1.492418062E-10; atomic mass constant energy equivalent [J] uncertainty=0.000 000 018 e-10. atomic_mass_constant_energy_equivalent_in_MeV; 931.4940954; atomic mass constant energy equivalent in MeV [MeV] uncertainty=0.000 0057. atomic_mass_unit_electron_volt_relationship; 931494095.4; atomic mass unit-electron volt relationship [eV] uncertainty=0.000 0057 e6. atomic_mass_unit_hartree_relationship; 34231776.902; atomic mass unit-hartree relationship [E_h] uncertainty=0.000 000 0016 e7. atomic_mass_unit_hertz_relationship; 2.2523427206E+23; atomic mass unit-hertz relationship [Hz] uncertainty=0.000 000 0010 e23. atomic_mass_unit_inverse_meter,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:1391,Energy Efficiency,energy,energy,1391,electron mass ratio [] uncertainty=0.000 000 24. alpha_particle_mass; 6.644657230E-27; alpha particle mass [kg] uncertainty=0.000 000 082 e-27. alpha_particle_mass_energy_equivalent; 5.971920097E-10; alpha particle mass energy equivalent [J] uncertainty=0.000 000 073 e-10. alpha_particle_mass_energy_equivalent_in_MeV; 3727.379378; alpha particle mass energy equivalent in MeV [MeV] uncertainty=0.000 023. alpha_particle_mass_in_u; 4.001506179127; alpha particle mass in u [u] uncertainty=0.000 000 000 063. alpha_particle_molar_mass; 0.004001506179127; alpha particle molar mass [kg mol^{-1}] uncertainty=0.000 000 000 063 e-3. alpha_particle_proton_mass_ratio; 3.97259968907; alpha particle-proton mass ratio [] uncertainty=0.000 000 000 36. Angstrom_star; 1.00001495E-10; Angstrom star [m] uncertainty=0.000 000 90 e-10. atomic_mass_constant; 1.660539040E-27; atomic mass constant [kg] uncertainty=0.000 000 020 e-27. atomic_mass_constant_energy_equivalent; 1.492418062E-10; atomic mass constant energy equivalent [J] uncertainty=0.000 000 018 e-10. atomic_mass_constant_energy_equivalent_in_MeV; 931.4940954; atomic mass constant energy equivalent in MeV [MeV] uncertainty=0.000 0057. atomic_mass_unit_electron_volt_relationship; 931494095.4; atomic mass unit-electron volt relationship [eV] uncertainty=0.000 0057 e6. atomic_mass_unit_hartree_relationship; 34231776.902; atomic mass unit-hartree relationship [E_h] uncertainty=0.000 000 0016 e7. atomic_mass_unit_hertz_relationship; 2.2523427206E+23; atomic mass unit-hertz relationship [Hz] uncertainty=0.000 000 0010 e23. atomic_mass_unit_inverse_meter_relationship; 7.5130066166E+14; atomic mass unit-inverse meter relationship [m^{-1}] uncertainty=0.000 000 0034 e14. atomic_mass_unit_joule_relationship; 1.492418062E-10; atomic mass unit-joule relationship [J] uncertainty=0.000 000 018 e-10. atomic_mass_unit_kelvin_relationship; 1.08095438E+13; atomic mass unit-kelvin relationship [K] uncertainty=0.000 000 62 e13. atomic_mass_unit_kilo,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:1526,Energy Efficiency,energy,energy,1526,. alpha_particle_mass_energy_equivalent; 5.971920097E-10; alpha particle mass energy equivalent [J] uncertainty=0.000 000 073 e-10. alpha_particle_mass_energy_equivalent_in_MeV; 3727.379378; alpha particle mass energy equivalent in MeV [MeV] uncertainty=0.000 023. alpha_particle_mass_in_u; 4.001506179127; alpha particle mass in u [u] uncertainty=0.000 000 000 063. alpha_particle_molar_mass; 0.004001506179127; alpha particle molar mass [kg mol^{-1}] uncertainty=0.000 000 000 063 e-3. alpha_particle_proton_mass_ratio; 3.97259968907; alpha particle-proton mass ratio [] uncertainty=0.000 000 000 36. Angstrom_star; 1.00001495E-10; Angstrom star [m] uncertainty=0.000 000 90 e-10. atomic_mass_constant; 1.660539040E-27; atomic mass constant [kg] uncertainty=0.000 000 020 e-27. atomic_mass_constant_energy_equivalent; 1.492418062E-10; atomic mass constant energy equivalent [J] uncertainty=0.000 000 018 e-10. atomic_mass_constant_energy_equivalent_in_MeV; 931.4940954; atomic mass constant energy equivalent in MeV [MeV] uncertainty=0.000 0057. atomic_mass_unit_electron_volt_relationship; 931494095.4; atomic mass unit-electron volt relationship [eV] uncertainty=0.000 0057 e6. atomic_mass_unit_hartree_relationship; 34231776.902; atomic mass unit-hartree relationship [E_h] uncertainty=0.000 000 0016 e7. atomic_mass_unit_hertz_relationship; 2.2523427206E+23; atomic mass unit-hertz relationship [Hz] uncertainty=0.000 000 0010 e23. atomic_mass_unit_inverse_meter_relationship; 7.5130066166E+14; atomic mass unit-inverse meter relationship [m^{-1}] uncertainty=0.000 000 0034 e14. atomic_mass_unit_joule_relationship; 1.492418062E-10; atomic mass unit-joule relationship [J] uncertainty=0.000 000 018 e-10. atomic_mass_unit_kelvin_relationship; 1.08095438E+13; atomic mass unit-kelvin relationship [K] uncertainty=0.000 000 62 e13. atomic_mass_unit_kilogram_relationship; 1.660539040E-27; atomic mass unit-kilogram relationship [kg] uncertainty=0.000 000 020 e-27. atomic_unit_of_1st_hyperpolariz,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:2059,Energy Efficiency,meter,meter,2059,259968907; alpha particle-proton mass ratio [] uncertainty=0.000 000 000 36. Angstrom_star; 1.00001495E-10; Angstrom star [m] uncertainty=0.000 000 90 e-10. atomic_mass_constant; 1.660539040E-27; atomic mass constant [kg] uncertainty=0.000 000 020 e-27. atomic_mass_constant_energy_equivalent; 1.492418062E-10; atomic mass constant energy equivalent [J] uncertainty=0.000 000 018 e-10. atomic_mass_constant_energy_equivalent_in_MeV; 931.4940954; atomic mass constant energy equivalent in MeV [MeV] uncertainty=0.000 0057. atomic_mass_unit_electron_volt_relationship; 931494095.4; atomic mass unit-electron volt relationship [eV] uncertainty=0.000 0057 e6. atomic_mass_unit_hartree_relationship; 34231776.902; atomic mass unit-hartree relationship [E_h] uncertainty=0.000 000 0016 e7. atomic_mass_unit_hertz_relationship; 2.2523427206E+23; atomic mass unit-hertz relationship [Hz] uncertainty=0.000 000 0010 e23. atomic_mass_unit_inverse_meter_relationship; 7.5130066166E+14; atomic mass unit-inverse meter relationship [m^{-1}] uncertainty=0.000 000 0034 e14. atomic_mass_unit_joule_relationship; 1.492418062E-10; atomic mass unit-joule relationship [J] uncertainty=0.000 000 018 e-10. atomic_mass_unit_kelvin_relationship; 1.08095438E+13; atomic mass unit-kelvin relationship [K] uncertainty=0.000 000 62 e13. atomic_mass_unit_kilogram_relationship; 1.660539040E-27; atomic mass unit-kilogram relationship [kg] uncertainty=0.000 000 020 e-27. atomic_unit_of_1st_hyperpolarizability; 3.206361329E-53; atomic unit of 1st hyperpolarizability [C^3 m^3 J^{-2}] uncertainty=0.000 000 020 e-53. atomic_unit_of_2nd_hyperpolarizability; 6.235380085E-65; atomic unit of 2nd hyperpolarizability [C^4 m^4 J^{-3}] uncertainty=0.000 000 077 e-65. atomic_unit_of_action; 1.054571800E-34; atomic unit of action [J s] uncertainty=0.000 000 013 e-34. atomic_unit_of_charge; 1.6021766208E-19; atomic unit of charge [C] uncertainty=0.000 000 0098 e-19. atomic_unit_of_charge_density; 1.0812023770E+12; atomic unit of cha,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:2190,Energy Efficiency,joule,joule,2190,inty=0.000 000 90 e-10. atomic_mass_constant; 1.660539040E-27; atomic mass constant [kg] uncertainty=0.000 000 020 e-27. atomic_mass_constant_energy_equivalent; 1.492418062E-10; atomic mass constant energy equivalent [J] uncertainty=0.000 000 018 e-10. atomic_mass_constant_energy_equivalent_in_MeV; 931.4940954; atomic mass constant energy equivalent in MeV [MeV] uncertainty=0.000 0057. atomic_mass_unit_electron_volt_relationship; 931494095.4; atomic mass unit-electron volt relationship [eV] uncertainty=0.000 0057 e6. atomic_mass_unit_hartree_relationship; 34231776.902; atomic mass unit-hartree relationship [E_h] uncertainty=0.000 000 0016 e7. atomic_mass_unit_hertz_relationship; 2.2523427206E+23; atomic mass unit-hertz relationship [Hz] uncertainty=0.000 000 0010 e23. atomic_mass_unit_inverse_meter_relationship; 7.5130066166E+14; atomic mass unit-inverse meter relationship [m^{-1}] uncertainty=0.000 000 0034 e14. atomic_mass_unit_joule_relationship; 1.492418062E-10; atomic mass unit-joule relationship [J] uncertainty=0.000 000 018 e-10. atomic_mass_unit_kelvin_relationship; 1.08095438E+13; atomic mass unit-kelvin relationship [K] uncertainty=0.000 000 62 e13. atomic_mass_unit_kilogram_relationship; 1.660539040E-27; atomic mass unit-kilogram relationship [kg] uncertainty=0.000 000 020 e-27. atomic_unit_of_1st_hyperpolarizability; 3.206361329E-53; atomic unit of 1st hyperpolarizability [C^3 m^3 J^{-2}] uncertainty=0.000 000 020 e-53. atomic_unit_of_2nd_hyperpolarizability; 6.235380085E-65; atomic unit of 2nd hyperpolarizability [C^4 m^4 J^{-3}] uncertainty=0.000 000 077 e-65. atomic_unit_of_action; 1.054571800E-34; atomic unit of action [J s] uncertainty=0.000 000 013 e-34. atomic_unit_of_charge; 1.6021766208E-19; atomic unit of charge [C] uncertainty=0.000 000 0098 e-19. atomic_unit_of_charge_density; 1.0812023770E+12; atomic unit of charge density [C m^{-3}] uncertainty=0.000 000 0067 e12. atomic_unit_of_current; 0.006623618183; atomic unit of current [A] uncertainty,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:2949,Energy Efficiency,charge,charge,2949,inty=0.000 000 0010 e23. atomic_mass_unit_inverse_meter_relationship; 7.5130066166E+14; atomic mass unit-inverse meter relationship [m^{-1}] uncertainty=0.000 000 0034 e14. atomic_mass_unit_joule_relationship; 1.492418062E-10; atomic mass unit-joule relationship [J] uncertainty=0.000 000 018 e-10. atomic_mass_unit_kelvin_relationship; 1.08095438E+13; atomic mass unit-kelvin relationship [K] uncertainty=0.000 000 62 e13. atomic_mass_unit_kilogram_relationship; 1.660539040E-27; atomic mass unit-kilogram relationship [kg] uncertainty=0.000 000 020 e-27. atomic_unit_of_1st_hyperpolarizability; 3.206361329E-53; atomic unit of 1st hyperpolarizability [C^3 m^3 J^{-2}] uncertainty=0.000 000 020 e-53. atomic_unit_of_2nd_hyperpolarizability; 6.235380085E-65; atomic unit of 2nd hyperpolarizability [C^4 m^4 J^{-3}] uncertainty=0.000 000 077 e-65. atomic_unit_of_action; 1.054571800E-34; atomic unit of action [J s] uncertainty=0.000 000 013 e-34. atomic_unit_of_charge; 1.6021766208E-19; atomic unit of charge [C] uncertainty=0.000 000 0098 e-19. atomic_unit_of_charge_density; 1.0812023770E+12; atomic unit of charge density [C m^{-3}] uncertainty=0.000 000 0067 e12. atomic_unit_of_current; 0.006623618183; atomic unit of current [A] uncertainty=0.000 000 041 e-3. atomic_unit_of_electric_dipole_mom; 8.478353552E-30; atomic unit of electric dipole mom. [C m] uncertainty=0.000 000 052 e-30. atomic_unit_of_electric_field; 5.142206707E+11; atomic unit of electric field [V m^{-1}] uncertainty=0.000 000 032 e11. atomic_unit_of_electric_field_gradient; 9.717362356E+21; atomic unit of electric field gradient [V m^{-2}] uncertainty=0.000 000 060 e21. atomic_unit_of_electric_polarizability; 1.6487772731E-41; atomic unit of electric polarizability [C^2 m^2 J^{-1}] uncertainty=0.000 000 0011 e-41. atomic_unit_of_electric_potential; 27.21138602; atomic unit of electric potential [V] uncertainty=0.000 000 17. atomic_unit_of_electric_quadrupole_mom; 4.486551484E-40; atomic unit of electric quadrupo,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:3057,Energy Efficiency,charge,charge,3057,ter relationship [m^{-1}] uncertainty=0.000 000 0034 e14. atomic_mass_unit_joule_relationship; 1.492418062E-10; atomic mass unit-joule relationship [J] uncertainty=0.000 000 018 e-10. atomic_mass_unit_kelvin_relationship; 1.08095438E+13; atomic mass unit-kelvin relationship [K] uncertainty=0.000 000 62 e13. atomic_mass_unit_kilogram_relationship; 1.660539040E-27; atomic mass unit-kilogram relationship [kg] uncertainty=0.000 000 020 e-27. atomic_unit_of_1st_hyperpolarizability; 3.206361329E-53; atomic unit of 1st hyperpolarizability [C^3 m^3 J^{-2}] uncertainty=0.000 000 020 e-53. atomic_unit_of_2nd_hyperpolarizability; 6.235380085E-65; atomic unit of 2nd hyperpolarizability [C^4 m^4 J^{-3}] uncertainty=0.000 000 077 e-65. atomic_unit_of_action; 1.054571800E-34; atomic unit of action [J s] uncertainty=0.000 000 013 e-34. atomic_unit_of_charge; 1.6021766208E-19; atomic unit of charge [C] uncertainty=0.000 000 0098 e-19. atomic_unit_of_charge_density; 1.0812023770E+12; atomic unit of charge density [C m^{-3}] uncertainty=0.000 000 0067 e12. atomic_unit_of_current; 0.006623618183; atomic unit of current [A] uncertainty=0.000 000 041 e-3. atomic_unit_of_electric_dipole_mom; 8.478353552E-30; atomic unit of electric dipole mom. [C m] uncertainty=0.000 000 052 e-30. atomic_unit_of_electric_field; 5.142206707E+11; atomic unit of electric field [V m^{-1}] uncertainty=0.000 000 032 e11. atomic_unit_of_electric_field_gradient; 9.717362356E+21; atomic unit of electric field gradient [V m^{-2}] uncertainty=0.000 000 060 e21. atomic_unit_of_electric_polarizability; 1.6487772731E-41; atomic unit of electric polarizability [C^2 m^2 J^{-1}] uncertainty=0.000 000 0011 e-41. atomic_unit_of_electric_potential; 27.21138602; atomic unit of electric potential [V] uncertainty=0.000 000 17. atomic_unit_of_electric_quadrupole_mom; 4.486551484E-40; atomic unit of electric quadrupole mom. [C m^2] uncertainty=0.000 000 028 e-40. atomic_unit_of_energy; 4.359744650E-18; atomic unit of energy [J] un,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:4049,Energy Efficiency,energy,energy,4049,ic unit of charge density [C m^{-3}] uncertainty=0.000 000 0067 e12. atomic_unit_of_current; 0.006623618183; atomic unit of current [A] uncertainty=0.000 000 041 e-3. atomic_unit_of_electric_dipole_mom; 8.478353552E-30; atomic unit of electric dipole mom. [C m] uncertainty=0.000 000 052 e-30. atomic_unit_of_electric_field; 5.142206707E+11; atomic unit of electric field [V m^{-1}] uncertainty=0.000 000 032 e11. atomic_unit_of_electric_field_gradient; 9.717362356E+21; atomic unit of electric field gradient [V m^{-2}] uncertainty=0.000 000 060 e21. atomic_unit_of_electric_polarizability; 1.6487772731E-41; atomic unit of electric polarizability [C^2 m^2 J^{-1}] uncertainty=0.000 000 0011 e-41. atomic_unit_of_electric_potential; 27.21138602; atomic unit of electric potential [V] uncertainty=0.000 000 17. atomic_unit_of_electric_quadrupole_mom; 4.486551484E-40; atomic unit of electric quadrupole mom. [C m^2] uncertainty=0.000 000 028 e-40. atomic_unit_of_energy; 4.359744650E-18; atomic unit of energy [J] uncertainty=0.000 000 054 e-18. atomic_unit_of_force; 8.23872336E-8; atomic unit of force [N] uncertainty=0.000 000 10 e-8. atomic_unit_of_length; 5.2917721067E-11; atomic unit of length [m] uncertainty=0.000 000 000 12 e-10. atomic_unit_of_mag_dipole_mom; 1.854801999E-23; atomic unit of mag. dipole mom. [J T^{-1}] uncertainty=0.000 000 011 e-23. atomic_unit_of_mag_flux_density; 235051.7550; atomic unit of mag. flux density [T] uncertainty=0.000 000 014 e5. atomic_unit_of_magnetizability; 7.8910365886E-29; atomic unit of magnetizability [J T^{-2}] uncertainty=0.000 000 0090 e-29. atomic_unit_of_mass; 9.10938356E-31; atomic unit of mass [kg] uncertainty=0.000 000 11 e-31. atomic_unit_of_momum; 1.992851882E-24; atomic unit of mom.um [kg m s^{-1}] uncertainty=0.000 000 024 e-24. atomic_unit_of_permittivity; 1.112650056E-10; atomic unit of permittivity [F m^{-1}] uncertainty=(exact). atomic_unit_of_time; 2.418884326509E-17; atomic unit of time [s] uncertainty=0.000 000 000 014,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:5633,Energy Efficiency,meter,meters,5633,0 e-29. atomic_unit_of_mass; 9.10938356E-31; atomic unit of mass [kg] uncertainty=0.000 000 11 e-31. atomic_unit_of_momum; 1.992851882E-24; atomic unit of mom.um [kg m s^{-1}] uncertainty=0.000 000 024 e-24. atomic_unit_of_permittivity; 1.112650056E-10; atomic unit of permittivity [F m^{-1}] uncertainty=(exact). atomic_unit_of_time; 2.418884326509E-17; atomic unit of time [s] uncertainty=0.000 000 000 014 e-17. atomic_unit_of_velocity; 2187691.26277; atomic unit of velocity [m s^{-1}] uncertainty=0.000 000 000 50 e6. Avogadro_constant; 6.022140857E+23; Avogadro constant [mol^{-1}] uncertainty=0.000 000 074 e23. Bohr_magneton; 9.274009994E-24; Bohr magneton [J T^{-1}] uncertainty=0.000 0057 e-26. Bohr_magneton_in_eVpT; 0.000057883818012; Bohr magneton in eV/T [eV T^{-1}] uncertainty=0.000 000 0026 e-5. Bohr_magneton_in_HzpT; 13996245042; Bohr magneton in Hz/T [Hz T^{-1}] uncertainty=0.000 000 086 e9. Bohr_magneton_in_inverse_meters_per_tesla; 46.68644814; Bohr magneton in inverse meters per tesla [m^{-1} T^{-1}] uncertainty=0.000 000 29. Bohr_magneton_in_KpT; 0.67171405; Bohr magneton in K/T [K T^{-1}] uncertainty=0.000 000 39. Bohr_radius; 5.2917721067E-11; Bohr radius [m] uncertainty=0.000 000 000 12 e-10. Boltzmann_constant; 1.38064852E-23; Boltzmann constant [J K^{-1}] uncertainty=0.000 000 79 e-23. Boltzmann_constant_in_eVpK; 0.000086173303; Boltzmann constant in eV/K [eV K^{-1}] uncertainty=0.000 0050 e-5. Boltzmann_constant_in_HzpK; 2.0836612E+10; Boltzmann constant in Hz/K [Hz K^{-1}] uncertainty=0.000 0012 e10. Boltzmann_constant_in_inverse_meters_per_kelvin; 69.503457; Boltzmann constant in inverse meters per kelvin [m^{-1} K^{-1}] uncertainty=0.000 040. characteristic_impedance_of_vacuum; 376.730313461; characteristic impedance of vacuum [ohm] uncertainty=(exact). classical_electron_radius; 2.8179403227E-15; classical electron radius [m] uncertainty=0.000 000 0019 e-15. Compton_wavelength; 2.4263102367E-12; Compton wavelength [m] uncertainty=0.000 000 0011,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:6274,Energy Efficiency,meter,meters,6274,09994E-24; Bohr magneton [J T^{-1}] uncertainty=0.000 0057 e-26. Bohr_magneton_in_eVpT; 0.000057883818012; Bohr magneton in eV/T [eV T^{-1}] uncertainty=0.000 000 0026 e-5. Bohr_magneton_in_HzpT; 13996245042; Bohr magneton in Hz/T [Hz T^{-1}] uncertainty=0.000 000 086 e9. Bohr_magneton_in_inverse_meters_per_tesla; 46.68644814; Bohr magneton in inverse meters per tesla [m^{-1} T^{-1}] uncertainty=0.000 000 29. Bohr_magneton_in_KpT; 0.67171405; Bohr magneton in K/T [K T^{-1}] uncertainty=0.000 000 39. Bohr_radius; 5.2917721067E-11; Bohr radius [m] uncertainty=0.000 000 000 12 e-10. Boltzmann_constant; 1.38064852E-23; Boltzmann constant [J K^{-1}] uncertainty=0.000 000 79 e-23. Boltzmann_constant_in_eVpK; 0.000086173303; Boltzmann constant in eV/K [eV K^{-1}] uncertainty=0.000 0050 e-5. Boltzmann_constant_in_HzpK; 2.0836612E+10; Boltzmann constant in Hz/K [Hz K^{-1}] uncertainty=0.000 0012 e10. Boltzmann_constant_in_inverse_meters_per_kelvin; 69.503457; Boltzmann constant in inverse meters per kelvin [m^{-1} K^{-1}] uncertainty=0.000 040. characteristic_impedance_of_vacuum; 376.730313461; characteristic impedance of vacuum [ohm] uncertainty=(exact). classical_electron_radius; 2.8179403227E-15; classical electron radius [m] uncertainty=0.000 000 0019 e-15. Compton_wavelength; 2.4263102367E-12; Compton wavelength [m] uncertainty=0.000 000 0011 e-12. Compton_wavelength_over_2_pi; 3.8615926764E-13; Compton wavelength over 2 pi [m] uncertainty=0.000 000 18 e-15. conductance_quantum; 0.000077480917310; conductance quantum [S] uncertainty=0.000 000 0018 e-5. conventional_value_of_Josephson_constant; 4.835979E+14; conventional value of Josephson constant [Hz V^{-1}] uncertainty=(exact). conventional_value_of_von_Klitzing_constant; 25812.807; conventional value of von Klitzing constant [ohm] uncertainty=(exact). Cu_x_unit; 1.00207697E-13; Cu x unit [m] uncertainty=0.000 000 28 e-13. deuteron_electron_mag_mom_ratio; -0.0004664345535; deuteron-electron mag. mom. ratio [] uncertai,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:8001,Energy Efficiency,energy,energy,8001,f_von_Klitzing_constant; 25812.807; conventional value of von Klitzing constant [ohm] uncertainty=(exact). Cu_x_unit; 1.00207697E-13; Cu x unit [m] uncertainty=0.000 000 28 e-13. deuteron_electron_mag_mom_ratio; -0.0004664345535; deuteron-electron mag. mom. ratio [] uncertainty=0.000 000 026 e-4. deuteron_electron_mass_ratio; 3670.48296785; deuteron-electron mass ratio [] uncertainty=0.000 000 13. deuteron_g_factor; 0.8574382311; deuteron g factor [] uncertainty=0.000 000 0048. deuteron_mag_mom; 4.330735040E-27; deuteron mag. mom. [J T^{-1}] uncertainty=0.000 000 0036 e-26. deuteron_mag_mom_to_Bohr_magneton_ratio; 0.0004669754554; deuteron mag. mom. to Bohr magneton ratio [] uncertainty=0.000 000 0026 e-3. deuteron_mag_mom_to_nuclear_magneton_ratio; 0.8574382311; deuteron mag. mom. to nuclear magneton ratio [] uncertainty=0.000 000 0048. deuteron_mass; 3.343583719E-27; deuteron mass [kg] uncertainty=0.000 000 041 e-27. deuteron_mass_energy_equivalent; 3.005063183E-10; deuteron mass energy equivalent [J] uncertainty=0.000 000 037 e-10. deuteron_mass_energy_equivalent_in_MeV; 1875.612928; deuteron mass energy equivalent in MeV [MeV] uncertainty=0.000 012. deuteron_mass_in_u; 2.013553212745; deuteron mass in u [u] uncertainty=0.000 000 000 040. deuteron_molar_mass; 0.002013553212745; deuteron molar mass [kg mol^{-1}] uncertainty=0.000 000 000 040 e-3. deuteron_neutron_mag_mom_ratio; -0.44820652; deuteron-neutron mag. mom. ratio [] uncertainty=0.000 000 11. deuteron_proton_mag_mom_ratio; 0.3070122077; deuteron-proton mag. mom. ratio [] uncertainty=0.000 000 0015. deuteron_proton_mass_ratio; 1.99900750087; deuteron-proton mass ratio [] uncertainty=0.000 000 000 19. deuteron_rms_charge_radius; 2.1413E-15; deuteron rms charge radius [m] uncertainty=0.0025 e-15. electric_constant; 8.854187817E-12; electric constant [F m^{-1}] uncertainty=(exact). electron_charge_to_mass_quotient; -1.758820024E+11; electron charge to mass quotient [C kg^{-1}] uncertainty=0.000 000 011 e11. el,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:8122,Energy Efficiency,energy,energy,8122,-13; Cu x unit [m] uncertainty=0.000 000 28 e-13. deuteron_electron_mag_mom_ratio; -0.0004664345535; deuteron-electron mag. mom. ratio [] uncertainty=0.000 000 026 e-4. deuteron_electron_mass_ratio; 3670.48296785; deuteron-electron mass ratio [] uncertainty=0.000 000 13. deuteron_g_factor; 0.8574382311; deuteron g factor [] uncertainty=0.000 000 0048. deuteron_mag_mom; 4.330735040E-27; deuteron mag. mom. [J T^{-1}] uncertainty=0.000 000 0036 e-26. deuteron_mag_mom_to_Bohr_magneton_ratio; 0.0004669754554; deuteron mag. mom. to Bohr magneton ratio [] uncertainty=0.000 000 0026 e-3. deuteron_mag_mom_to_nuclear_magneton_ratio; 0.8574382311; deuteron mag. mom. to nuclear magneton ratio [] uncertainty=0.000 000 0048. deuteron_mass; 3.343583719E-27; deuteron mass [kg] uncertainty=0.000 000 041 e-27. deuteron_mass_energy_equivalent; 3.005063183E-10; deuteron mass energy equivalent [J] uncertainty=0.000 000 037 e-10. deuteron_mass_energy_equivalent_in_MeV; 1875.612928; deuteron mass energy equivalent in MeV [MeV] uncertainty=0.000 012. deuteron_mass_in_u; 2.013553212745; deuteron mass in u [u] uncertainty=0.000 000 000 040. deuteron_molar_mass; 0.002013553212745; deuteron molar mass [kg mol^{-1}] uncertainty=0.000 000 000 040 e-3. deuteron_neutron_mag_mom_ratio; -0.44820652; deuteron-neutron mag. mom. ratio [] uncertainty=0.000 000 11. deuteron_proton_mag_mom_ratio; 0.3070122077; deuteron-proton mag. mom. ratio [] uncertainty=0.000 000 0015. deuteron_proton_mass_ratio; 1.99900750087; deuteron-proton mass ratio [] uncertainty=0.000 000 000 19. deuteron_rms_charge_radius; 2.1413E-15; deuteron rms charge radius [m] uncertainty=0.0025 e-15. electric_constant; 8.854187817E-12; electric constant [F m^{-1}] uncertainty=(exact). electron_charge_to_mass_quotient; -1.758820024E+11; electron charge to mass quotient [C kg^{-1}] uncertainty=0.000 000 011 e11. electron_deuteron_mag_mom_ratio; -2143.923499; electron-deuteron mag. mom. ratio [] uncertainty=0.000 012. electron_deuteron_mass_r,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:8746,Energy Efficiency,charge,charge,8746,gneton_ratio; 0.8574382311; deuteron mag. mom. to nuclear magneton ratio [] uncertainty=0.000 000 0048. deuteron_mass; 3.343583719E-27; deuteron mass [kg] uncertainty=0.000 000 041 e-27. deuteron_mass_energy_equivalent; 3.005063183E-10; deuteron mass energy equivalent [J] uncertainty=0.000 000 037 e-10. deuteron_mass_energy_equivalent_in_MeV; 1875.612928; deuteron mass energy equivalent in MeV [MeV] uncertainty=0.000 012. deuteron_mass_in_u; 2.013553212745; deuteron mass in u [u] uncertainty=0.000 000 000 040. deuteron_molar_mass; 0.002013553212745; deuteron molar mass [kg mol^{-1}] uncertainty=0.000 000 000 040 e-3. deuteron_neutron_mag_mom_ratio; -0.44820652; deuteron-neutron mag. mom. ratio [] uncertainty=0.000 000 11. deuteron_proton_mag_mom_ratio; 0.3070122077; deuteron-proton mag. mom. ratio [] uncertainty=0.000 000 0015. deuteron_proton_mass_ratio; 1.99900750087; deuteron-proton mass ratio [] uncertainty=0.000 000 000 19. deuteron_rms_charge_radius; 2.1413E-15; deuteron rms charge radius [m] uncertainty=0.0025 e-15. electric_constant; 8.854187817E-12; electric constant [F m^{-1}] uncertainty=(exact). electron_charge_to_mass_quotient; -1.758820024E+11; electron charge to mass quotient [C kg^{-1}] uncertainty=0.000 000 011 e11. electron_deuteron_mag_mom_ratio; -2143.923499; electron-deuteron mag. mom. ratio [] uncertainty=0.000 012. electron_deuteron_mass_ratio; 0.0002724437107484; electron-deuteron mass ratio [] uncertainty=0.000 000 000 096 e-4. electron_g_factor; -2.00231930436182; electron g factor [] uncertainty=0.000 000 000 000 52. electron_gyromag_ratio; 1.760859644E+11; electron gyromag. ratio [s^{-1} T^{-1}] uncertainty=0.000 000 011 e11. electron_gyromag_ratio_over_2_pi; 28024.95164; electron gyromag. ratio over 2 pi [MHz T^{-1}] uncertainty=0.000 17. electron_helion_mass_ratio; 0.0001819543074854; electron-helion mass ratio [] uncertainty=0.000 000 000 088 e-4. electron_mag_mom; -9.284764620E-24; electron mag. mom. [J T^{-1}] uncertainty=0.000 0057 e,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:8936,Energy Efficiency,charge,charge,8936,s_energy_equivalent; 3.005063183E-10; deuteron mass energy equivalent [J] uncertainty=0.000 000 037 e-10. deuteron_mass_energy_equivalent_in_MeV; 1875.612928; deuteron mass energy equivalent in MeV [MeV] uncertainty=0.000 012. deuteron_mass_in_u; 2.013553212745; deuteron mass in u [u] uncertainty=0.000 000 000 040. deuteron_molar_mass; 0.002013553212745; deuteron molar mass [kg mol^{-1}] uncertainty=0.000 000 000 040 e-3. deuteron_neutron_mag_mom_ratio; -0.44820652; deuteron-neutron mag. mom. ratio [] uncertainty=0.000 000 11. deuteron_proton_mag_mom_ratio; 0.3070122077; deuteron-proton mag. mom. ratio [] uncertainty=0.000 000 0015. deuteron_proton_mass_ratio; 1.99900750087; deuteron-proton mass ratio [] uncertainty=0.000 000 000 19. deuteron_rms_charge_radius; 2.1413E-15; deuteron rms charge radius [m] uncertainty=0.0025 e-15. electric_constant; 8.854187817E-12; electric constant [F m^{-1}] uncertainty=(exact). electron_charge_to_mass_quotient; -1.758820024E+11; electron charge to mass quotient [C kg^{-1}] uncertainty=0.000 000 011 e11. electron_deuteron_mag_mom_ratio; -2143.923499; electron-deuteron mag. mom. ratio [] uncertainty=0.000 012. electron_deuteron_mass_ratio; 0.0002724437107484; electron-deuteron mass ratio [] uncertainty=0.000 000 000 096 e-4. electron_g_factor; -2.00231930436182; electron g factor [] uncertainty=0.000 000 000 000 52. electron_gyromag_ratio; 1.760859644E+11; electron gyromag. ratio [s^{-1} T^{-1}] uncertainty=0.000 000 011 e11. electron_gyromag_ratio_over_2_pi; 28024.95164; electron gyromag. ratio over 2 pi [MHz T^{-1}] uncertainty=0.000 17. electron_helion_mass_ratio; 0.0001819543074854; electron-helion mass ratio [] uncertainty=0.000 000 000 088 e-4. electron_mag_mom; -9.284764620E-24; electron mag. mom. [J T^{-1}] uncertainty=0.000 0057 e-26. electron_mag_mom_anomaly; 0.00115965218091; electron mag. mom. anomaly [] uncertainty=0.000 000 000 26 e-3. electron_mag_mom_to_Bohr_magneton_ratio; -1.00115965218091; electron mag. mom. to Boh,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:10281,Energy Efficiency,energy,energy,10281, uncertainty=0.000 000 000 000 52. electron_gyromag_ratio; 1.760859644E+11; electron gyromag. ratio [s^{-1} T^{-1}] uncertainty=0.000 000 011 e11. electron_gyromag_ratio_over_2_pi; 28024.95164; electron gyromag. ratio over 2 pi [MHz T^{-1}] uncertainty=0.000 17. electron_helion_mass_ratio; 0.0001819543074854; electron-helion mass ratio [] uncertainty=0.000 000 000 088 e-4. electron_mag_mom; -9.284764620E-24; electron mag. mom. [J T^{-1}] uncertainty=0.000 0057 e-26. electron_mag_mom_anomaly; 0.00115965218091; electron mag. mom. anomaly [] uncertainty=0.000 000 000 26 e-3. electron_mag_mom_to_Bohr_magneton_ratio; -1.00115965218091; electron mag. mom. to Bohr magneton ratio [] uncertainty=0.000 000 000 000 26. electron_mag_mom_to_nuclear_magneton_ratio; -1838.28197234; electron mag. mom. to nuclear magneton ratio [] uncertainty=0.000 000 17. electron_mass; 9.10938356E-31; electron mass [kg] uncertainty=0.000 000 11 e-31. electron_mass_energy_equivalent; 8.18710565E-14; electron mass energy equivalent [J] uncertainty=0.000 000 10 e-14. electron_mass_energy_equivalent_in_MeV; 0.5109989461; electron mass energy equivalent in MeV [MeV] uncertainty=0.000 000 0031. electron_mass_in_u; 0.000548579909070; electron mass in u [u] uncertainty=0.000 000 000 16 e-4. electron_molar_mass; 5.48579909070E-7; electron molar mass [kg mol^{-1}] uncertainty=0.000 000 000 16 e-7. electron_muon_mag_mom_ratio; 206.7669880; electron-muon mag. mom. ratio [] uncertainty=0.000 0046. electron_muon_mass_ratio; 0.00483633170; electron-muon mass ratio [] uncertainty=0.000 000 11 e-3. electron_neutron_mag_mom_ratio; 960.92050; electron-neutron mag. mom. ratio [] uncertainty=0.000 23. electron_neutron_mass_ratio; 0.00054386734428; electron-neutron mass ratio [] uncertainty=0.000 000 0027 e-4. electron_proton_mag_mom_ratio; -658.2106866; electron-proton mag. mom. ratio [] uncertainty=0.000 0020. electron_proton_mass_ratio; 0.000544617021352; electron-proton mass ratio [] uncertainty=0.000 000 000 52 e-,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:10402,Energy Efficiency,energy,energy,10402,y=0.000 000 011 e11. electron_gyromag_ratio_over_2_pi; 28024.95164; electron gyromag. ratio over 2 pi [MHz T^{-1}] uncertainty=0.000 17. electron_helion_mass_ratio; 0.0001819543074854; electron-helion mass ratio [] uncertainty=0.000 000 000 088 e-4. electron_mag_mom; -9.284764620E-24; electron mag. mom. [J T^{-1}] uncertainty=0.000 0057 e-26. electron_mag_mom_anomaly; 0.00115965218091; electron mag. mom. anomaly [] uncertainty=0.000 000 000 26 e-3. electron_mag_mom_to_Bohr_magneton_ratio; -1.00115965218091; electron mag. mom. to Bohr magneton ratio [] uncertainty=0.000 000 000 000 26. electron_mag_mom_to_nuclear_magneton_ratio; -1838.28197234; electron mag. mom. to nuclear magneton ratio [] uncertainty=0.000 000 17. electron_mass; 9.10938356E-31; electron mass [kg] uncertainty=0.000 000 11 e-31. electron_mass_energy_equivalent; 8.18710565E-14; electron mass energy equivalent [J] uncertainty=0.000 000 10 e-14. electron_mass_energy_equivalent_in_MeV; 0.5109989461; electron mass energy equivalent in MeV [MeV] uncertainty=0.000 000 0031. electron_mass_in_u; 0.000548579909070; electron mass in u [u] uncertainty=0.000 000 000 16 e-4. electron_molar_mass; 5.48579909070E-7; electron molar mass [kg mol^{-1}] uncertainty=0.000 000 000 16 e-7. electron_muon_mag_mom_ratio; 206.7669880; electron-muon mag. mom. ratio [] uncertainty=0.000 0046. electron_muon_mass_ratio; 0.00483633170; electron-muon mass ratio [] uncertainty=0.000 000 11 e-3. electron_neutron_mag_mom_ratio; 960.92050; electron-neutron mag. mom. ratio [] uncertainty=0.000 23. electron_neutron_mass_ratio; 0.00054386734428; electron-neutron mass ratio [] uncertainty=0.000 000 0027 e-4. electron_proton_mag_mom_ratio; -658.2106866; electron-proton mag. mom. ratio [] uncertainty=0.000 0020. electron_proton_mass_ratio; 0.000544617021352; electron-proton mass ratio [] uncertainty=0.000 000 000 52 e-4. electron_tau_mass_ratio; 0.000287592; electron-tau mass ratio [] uncertainty=0.000 26 e-4. electron_to_alpha_particle_mass_r,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:12426,Energy Efficiency,meter,meter,12426,798; electron to alpha particle mass ratio [] uncertainty=0.000 000 000 045 e-4. electron_to_shielded_helion_mag_mom_ratio; 864.058257; electron to shielded helion mag. mom. ratio [] uncertainty=0.000 010. electron_to_shielded_proton_mag_mom_ratio; -658.2275971; electron to shielded proton mag. mom. ratio [] uncertainty=0.000 0072. electron_triton_mass_ratio; 0.0001819200062203; electron-triton mass ratio [] uncertainty=0.000 000 000 084 e-4. electron_volt; 1.6021766208E-19; electron volt [J] uncertainty=0.000 000 0098 e-19. electron_volt_atomic_mass_unit_relationship; 1.0735441105E-9; electron volt-atomic mass unit relationship [u] uncertainty=0.000 000 0066 e-9. electron_volt_hartree_relationship; 0.03674932248; electron volt-hartree relationship [E_h] uncertainty=0.000 000 023 e-2. electron_volt_hertz_relationship; 2.417989262E+14; electron volt-hertz relationship [Hz] uncertainty=0.000 000 015 e14. electron_volt_inverse_meter_relationship; 806554.4005; electron volt-inverse meter relationship [m^{-1}] uncertainty=0.000 000 050 e5. electron_volt_joule_relationship; 1.6021766208E-19; electron volt-joule relationship [J] uncertainty=0.000 000 0098 e-19. electron_volt_kelvin_relationship; 11604.5221; electron volt-kelvin relationship [K] uncertainty=0.000 000 67 e4. electron_volt_kilogram_relationship; 1.782661907E-36; electron volt-kilogram relationship [kg] uncertainty=0.000 000 011 e-36. elementary_charge; 1.6021766208E-19; elementary charge [C] uncertainty=0.000 000 0098 e-19. elementary_charge_over_h; 2.417989262E+14; elementary charge over h [A J^{-1}] uncertainty=0.000 000 015 e14. Faraday_constant; 96485.33289; Faraday constant [C mol^{-1}] uncertainty=0.000 59. Faraday_constant_for_conventional_electric_current; 96485.3251; Faraday constant for conventional electric current [C_{90} mol^{-1}] uncertainty=0.0012. Fermi_coupling_constant; 0.000011663787; Fermi coupling constant [GeV^{-2}] uncertainty=0.000 0006 e-5. fine_structure_constant; 0.0072973525664; fi,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:12550,Energy Efficiency,joule,joule,12550,io; 864.058257; electron to shielded helion mag. mom. ratio [] uncertainty=0.000 010. electron_to_shielded_proton_mag_mom_ratio; -658.2275971; electron to shielded proton mag. mom. ratio [] uncertainty=0.000 0072. electron_triton_mass_ratio; 0.0001819200062203; electron-triton mass ratio [] uncertainty=0.000 000 000 084 e-4. electron_volt; 1.6021766208E-19; electron volt [J] uncertainty=0.000 000 0098 e-19. electron_volt_atomic_mass_unit_relationship; 1.0735441105E-9; electron volt-atomic mass unit relationship [u] uncertainty=0.000 000 0066 e-9. electron_volt_hartree_relationship; 0.03674932248; electron volt-hartree relationship [E_h] uncertainty=0.000 000 023 e-2. electron_volt_hertz_relationship; 2.417989262E+14; electron volt-hertz relationship [Hz] uncertainty=0.000 000 015 e14. electron_volt_inverse_meter_relationship; 806554.4005; electron volt-inverse meter relationship [m^{-1}] uncertainty=0.000 000 050 e5. electron_volt_joule_relationship; 1.6021766208E-19; electron volt-joule relationship [J] uncertainty=0.000 000 0098 e-19. electron_volt_kelvin_relationship; 11604.5221; electron volt-kelvin relationship [K] uncertainty=0.000 000 67 e4. electron_volt_kilogram_relationship; 1.782661907E-36; electron volt-kilogram relationship [kg] uncertainty=0.000 000 011 e-36. elementary_charge; 1.6021766208E-19; elementary charge [C] uncertainty=0.000 000 0098 e-19. elementary_charge_over_h; 2.417989262E+14; elementary charge over h [A J^{-1}] uncertainty=0.000 000 015 e14. Faraday_constant; 96485.33289; Faraday constant [C mol^{-1}] uncertainty=0.000 59. Faraday_constant_for_conventional_electric_current; 96485.3251; Faraday constant for conventional electric current [C_{90} mol^{-1}] uncertainty=0.0012. Fermi_coupling_constant; 0.000011663787; Fermi coupling constant [GeV^{-2}] uncertainty=0.000 0006 e-5. fine_structure_constant; 0.0072973525664; fine-structure constant [] uncertainty=0.000 000 0017 e-3. first_radiation_constant; 3.741771790E-16; first radiation const,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:12895,Energy Efficiency,charge,charge,12895, 1.6021766208E-19; electron volt [J] uncertainty=0.000 000 0098 e-19. electron_volt_atomic_mass_unit_relationship; 1.0735441105E-9; electron volt-atomic mass unit relationship [u] uncertainty=0.000 000 0066 e-9. electron_volt_hartree_relationship; 0.03674932248; electron volt-hartree relationship [E_h] uncertainty=0.000 000 023 e-2. electron_volt_hertz_relationship; 2.417989262E+14; electron volt-hertz relationship [Hz] uncertainty=0.000 000 015 e14. electron_volt_inverse_meter_relationship; 806554.4005; electron volt-inverse meter relationship [m^{-1}] uncertainty=0.000 000 050 e5. electron_volt_joule_relationship; 1.6021766208E-19; electron volt-joule relationship [J] uncertainty=0.000 000 0098 e-19. electron_volt_kelvin_relationship; 11604.5221; electron volt-kelvin relationship [K] uncertainty=0.000 000 67 e4. electron_volt_kilogram_relationship; 1.782661907E-36; electron volt-kilogram relationship [kg] uncertainty=0.000 000 011 e-36. elementary_charge; 1.6021766208E-19; elementary charge [C] uncertainty=0.000 000 0098 e-19. elementary_charge_over_h; 2.417989262E+14; elementary charge over h [A J^{-1}] uncertainty=0.000 000 015 e14. Faraday_constant; 96485.33289; Faraday constant [C mol^{-1}] uncertainty=0.000 59. Faraday_constant_for_conventional_electric_current; 96485.3251; Faraday constant for conventional electric current [C_{90} mol^{-1}] uncertainty=0.0012. Fermi_coupling_constant; 0.000011663787; Fermi coupling constant [GeV^{-2}] uncertainty=0.000 0006 e-5. fine_structure_constant; 0.0072973525664; fine-structure constant [] uncertainty=0.000 000 0017 e-3. first_radiation_constant; 3.741771790E-16; first radiation constant [W m^2] uncertainty=0.000 000 046 e-16. first_radiation_constant_for_spectral_radiance; 1.191042953E-16; first radiation constant for spectral radiance [W m^2 sr^{-1}] uncertainty=0.000 000 015 e-16. hartree_atomic_mass_unit_relationship; 2.9212623197E-8; hartree-atomic mass unit relationship [u] uncertainty=0.000 000 0013 e-8. hartre,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:12993,Energy Efficiency,charge,charge,12993,tionship; 1.0735441105E-9; electron volt-atomic mass unit relationship [u] uncertainty=0.000 000 0066 e-9. electron_volt_hartree_relationship; 0.03674932248; electron volt-hartree relationship [E_h] uncertainty=0.000 000 023 e-2. electron_volt_hertz_relationship; 2.417989262E+14; electron volt-hertz relationship [Hz] uncertainty=0.000 000 015 e14. electron_volt_inverse_meter_relationship; 806554.4005; electron volt-inverse meter relationship [m^{-1}] uncertainty=0.000 000 050 e5. electron_volt_joule_relationship; 1.6021766208E-19; electron volt-joule relationship [J] uncertainty=0.000 000 0098 e-19. electron_volt_kelvin_relationship; 11604.5221; electron volt-kelvin relationship [K] uncertainty=0.000 000 67 e4. electron_volt_kilogram_relationship; 1.782661907E-36; electron volt-kilogram relationship [kg] uncertainty=0.000 000 011 e-36. elementary_charge; 1.6021766208E-19; elementary charge [C] uncertainty=0.000 000 0098 e-19. elementary_charge_over_h; 2.417989262E+14; elementary charge over h [A J^{-1}] uncertainty=0.000 000 015 e14. Faraday_constant; 96485.33289; Faraday constant [C mol^{-1}] uncertainty=0.000 59. Faraday_constant_for_conventional_electric_current; 96485.3251; Faraday constant for conventional electric current [C_{90} mol^{-1}] uncertainty=0.0012. Fermi_coupling_constant; 0.000011663787; Fermi coupling constant [GeV^{-2}] uncertainty=0.000 0006 e-5. fine_structure_constant; 0.0072973525664; fine-structure constant [] uncertainty=0.000 000 0017 e-3. first_radiation_constant; 3.741771790E-16; first radiation constant [W m^2] uncertainty=0.000 000 046 e-16. first_radiation_constant_for_spectral_radiance; 1.191042953E-16; first radiation constant for spectral radiance [W m^2 sr^{-1}] uncertainty=0.000 000 015 e-16. hartree_atomic_mass_unit_relationship; 2.9212623197E-8; hartree-atomic mass unit relationship [u] uncertainty=0.000 000 0013 e-8. hartree_electron_volt_relationship; 27.21138602; hartree-electron volt relationship [eV] uncertainty=0.000 000 1,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:14044,Energy Efficiency,energy,energy,14044,14. Faraday_constant; 96485.33289; Faraday constant [C mol^{-1}] uncertainty=0.000 59. Faraday_constant_for_conventional_electric_current; 96485.3251; Faraday constant for conventional electric current [C_{90} mol^{-1}] uncertainty=0.0012. Fermi_coupling_constant; 0.000011663787; Fermi coupling constant [GeV^{-2}] uncertainty=0.000 0006 e-5. fine_structure_constant; 0.0072973525664; fine-structure constant [] uncertainty=0.000 000 0017 e-3. first_radiation_constant; 3.741771790E-16; first radiation constant [W m^2] uncertainty=0.000 000 046 e-16. first_radiation_constant_for_spectral_radiance; 1.191042953E-16; first radiation constant for spectral radiance [W m^2 sr^{-1}] uncertainty=0.000 000 015 e-16. hartree_atomic_mass_unit_relationship; 2.9212623197E-8; hartree-atomic mass unit relationship [u] uncertainty=0.000 000 0013 e-8. hartree_electron_volt_relationship; 27.21138602; hartree-electron volt relationship [eV] uncertainty=0.000 000 17. Hartree_energy; 4.359744650E-18; Hartree energy [J] uncertainty=0.000 000 054 e-18. Hartree_energy_in_eV; 27.21138602; Hartree energy in eV [eV] uncertainty=0.000 000 17. hartree_hertz_relationship; 6.579683920711E+15; hartree-hertz relationship [Hz] uncertainty=0.000 000 000 039 e15. hartree_inverse_meter_relationship; 21947463.13702; hartree-inverse meter relationship [m^{-1}] uncertainty=0.000 000 000 013 e7. hartree_joule_relationship; 4.359744650E-18; hartree-joule relationship [J] uncertainty=0.000 000 054 e-18. hartree_kelvin_relationship; 315775.13; hartree-kelvin relationship [K] uncertainty=0.000 0018 e5. hartree_kilogram_relationship; 4.850870129E-35; hartree-kilogram relationship [kg] uncertainty=0.000 000 060 e-35. helion_electron_mass_ratio; 5495.88527922; helion-electron mass ratio [] uncertainty=0.000 000 27. helion_g_factor; -4.255250616; helion g factor [] uncertainty=0.000 000 050. helion_mag_mom; -1.074617522E-26; helion mag. mom. [J T^{-1}] uncertainty=0.000 000 014 e-26. helion_mag_mom_to_Bohr_magneton_ra,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:14130,Energy Efficiency,energy,energy,14130,ay_constant_for_conventional_electric_current; 96485.3251; Faraday constant for conventional electric current [C_{90} mol^{-1}] uncertainty=0.0012. Fermi_coupling_constant; 0.000011663787; Fermi coupling constant [GeV^{-2}] uncertainty=0.000 0006 e-5. fine_structure_constant; 0.0072973525664; fine-structure constant [] uncertainty=0.000 000 0017 e-3. first_radiation_constant; 3.741771790E-16; first radiation constant [W m^2] uncertainty=0.000 000 046 e-16. first_radiation_constant_for_spectral_radiance; 1.191042953E-16; first radiation constant for spectral radiance [W m^2 sr^{-1}] uncertainty=0.000 000 015 e-16. hartree_atomic_mass_unit_relationship; 2.9212623197E-8; hartree-atomic mass unit relationship [u] uncertainty=0.000 000 0013 e-8. hartree_electron_volt_relationship; 27.21138602; hartree-electron volt relationship [eV] uncertainty=0.000 000 17. Hartree_energy; 4.359744650E-18; Hartree energy [J] uncertainty=0.000 000 054 e-18. Hartree_energy_in_eV; 27.21138602; Hartree energy in eV [eV] uncertainty=0.000 000 17. hartree_hertz_relationship; 6.579683920711E+15; hartree-hertz relationship [Hz] uncertainty=0.000 000 000 039 e15. hartree_inverse_meter_relationship; 21947463.13702; hartree-inverse meter relationship [m^{-1}] uncertainty=0.000 000 000 013 e7. hartree_joule_relationship; 4.359744650E-18; hartree-joule relationship [J] uncertainty=0.000 000 054 e-18. hartree_kelvin_relationship; 315775.13; hartree-kelvin relationship [K] uncertainty=0.000 0018 e5. hartree_kilogram_relationship; 4.850870129E-35; hartree-kilogram relationship [kg] uncertainty=0.000 000 060 e-35. helion_electron_mass_ratio; 5495.88527922; helion-electron mass ratio [] uncertainty=0.000 000 27. helion_g_factor; -4.255250616; helion g factor [] uncertainty=0.000 000 050. helion_mag_mom; -1.074617522E-26; helion mag. mom. [J T^{-1}] uncertainty=0.000 000 014 e-26. helion_mag_mom_to_Bohr_magneton_ratio; -0.001158740958; helion mag. mom. to Bohr magneton ratio [] uncertainty=0.000 000 014 e,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:14357,Energy Efficiency,meter,meter,14357,tainty=0.000 0006 e-5. fine_structure_constant; 0.0072973525664; fine-structure constant [] uncertainty=0.000 000 0017 e-3. first_radiation_constant; 3.741771790E-16; first radiation constant [W m^2] uncertainty=0.000 000 046 e-16. first_radiation_constant_for_spectral_radiance; 1.191042953E-16; first radiation constant for spectral radiance [W m^2 sr^{-1}] uncertainty=0.000 000 015 e-16. hartree_atomic_mass_unit_relationship; 2.9212623197E-8; hartree-atomic mass unit relationship [u] uncertainty=0.000 000 0013 e-8. hartree_electron_volt_relationship; 27.21138602; hartree-electron volt relationship [eV] uncertainty=0.000 000 17. Hartree_energy; 4.359744650E-18; Hartree energy [J] uncertainty=0.000 000 054 e-18. Hartree_energy_in_eV; 27.21138602; Hartree energy in eV [eV] uncertainty=0.000 000 17. hartree_hertz_relationship; 6.579683920711E+15; hartree-hertz relationship [Hz] uncertainty=0.000 000 000 039 e15. hartree_inverse_meter_relationship; 21947463.13702; hartree-inverse meter relationship [m^{-1}] uncertainty=0.000 000 000 013 e7. hartree_joule_relationship; 4.359744650E-18; hartree-joule relationship [J] uncertainty=0.000 000 054 e-18. hartree_kelvin_relationship; 315775.13; hartree-kelvin relationship [K] uncertainty=0.000 0018 e5. hartree_kilogram_relationship; 4.850870129E-35; hartree-kilogram relationship [kg] uncertainty=0.000 000 060 e-35. helion_electron_mass_ratio; 5495.88527922; helion-electron mass ratio [] uncertainty=0.000 000 27. helion_g_factor; -4.255250616; helion g factor [] uncertainty=0.000 000 050. helion_mag_mom; -1.074617522E-26; helion mag. mom. [J T^{-1}] uncertainty=0.000 000 014 e-26. helion_mag_mom_to_Bohr_magneton_ratio; -0.001158740958; helion mag. mom. to Bohr magneton ratio [] uncertainty=0.000 000 014 e-3. helion_mag_mom_to_nuclear_magneton_ratio; -2.127625308; helion mag. mom. to nuclear magneton ratio [] uncertainty=0.000 000 025. helion_mass; 5.006412700E-27; helion mass [kg] uncertainty=0.000 000 062 e-27. helion_mass_energy,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:14472,Energy Efficiency,joule,joule,14472, 0017 e-3. first_radiation_constant; 3.741771790E-16; first radiation constant [W m^2] uncertainty=0.000 000 046 e-16. first_radiation_constant_for_spectral_radiance; 1.191042953E-16; first radiation constant for spectral radiance [W m^2 sr^{-1}] uncertainty=0.000 000 015 e-16. hartree_atomic_mass_unit_relationship; 2.9212623197E-8; hartree-atomic mass unit relationship [u] uncertainty=0.000 000 0013 e-8. hartree_electron_volt_relationship; 27.21138602; hartree-electron volt relationship [eV] uncertainty=0.000 000 17. Hartree_energy; 4.359744650E-18; Hartree energy [J] uncertainty=0.000 000 054 e-18. Hartree_energy_in_eV; 27.21138602; Hartree energy in eV [eV] uncertainty=0.000 000 17. hartree_hertz_relationship; 6.579683920711E+15; hartree-hertz relationship [Hz] uncertainty=0.000 000 000 039 e15. hartree_inverse_meter_relationship; 21947463.13702; hartree-inverse meter relationship [m^{-1}] uncertainty=0.000 000 000 013 e7. hartree_joule_relationship; 4.359744650E-18; hartree-joule relationship [J] uncertainty=0.000 000 054 e-18. hartree_kelvin_relationship; 315775.13; hartree-kelvin relationship [K] uncertainty=0.000 0018 e5. hartree_kilogram_relationship; 4.850870129E-35; hartree-kilogram relationship [kg] uncertainty=0.000 000 060 e-35. helion_electron_mass_ratio; 5495.88527922; helion-electron mass ratio [] uncertainty=0.000 000 27. helion_g_factor; -4.255250616; helion g factor [] uncertainty=0.000 000 050. helion_mag_mom; -1.074617522E-26; helion mag. mom. [J T^{-1}] uncertainty=0.000 000 014 e-26. helion_mag_mom_to_Bohr_magneton_ratio; -0.001158740958; helion mag. mom. to Bohr magneton ratio [] uncertainty=0.000 000 014 e-3. helion_mag_mom_to_nuclear_magneton_ratio; -2.127625308; helion mag. mom. to nuclear magneton ratio [] uncertainty=0.000 000 025. helion_mass; 5.006412700E-27; helion mass [kg] uncertainty=0.000 000 062 e-27. helion_mass_energy_equivalent; 4.499539341E-10; helion mass energy equivalent [J] uncertainty=0.000 000 055 e-10. helion_mass_ener,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:15409,Energy Efficiency,energy,energy,15409,3 e7. hartree_joule_relationship; 4.359744650E-18; hartree-joule relationship [J] uncertainty=0.000 000 054 e-18. hartree_kelvin_relationship; 315775.13; hartree-kelvin relationship [K] uncertainty=0.000 0018 e5. hartree_kilogram_relationship; 4.850870129E-35; hartree-kilogram relationship [kg] uncertainty=0.000 000 060 e-35. helion_electron_mass_ratio; 5495.88527922; helion-electron mass ratio [] uncertainty=0.000 000 27. helion_g_factor; -4.255250616; helion g factor [] uncertainty=0.000 000 050. helion_mag_mom; -1.074617522E-26; helion mag. mom. [J T^{-1}] uncertainty=0.000 000 014 e-26. helion_mag_mom_to_Bohr_magneton_ratio; -0.001158740958; helion mag. mom. to Bohr magneton ratio [] uncertainty=0.000 000 014 e-3. helion_mag_mom_to_nuclear_magneton_ratio; -2.127625308; helion mag. mom. to nuclear magneton ratio [] uncertainty=0.000 000 025. helion_mass; 5.006412700E-27; helion mass [kg] uncertainty=0.000 000 062 e-27. helion_mass_energy_equivalent; 4.499539341E-10; helion mass energy equivalent [J] uncertainty=0.000 000 055 e-10. helion_mass_energy_equivalent_in_MeV; 2808.391586; helion mass energy equivalent in MeV [MeV] uncertainty=0.000 017. helion_mass_in_u; 3.01493224673; helion mass in u [u] uncertainty=0.000 000 000 12. helion_molar_mass; 0.00301493224673; helion molar mass [kg mol^{-1}] uncertainty=0.000 000 000 12 e-3. helion_proton_mass_ratio; 2.99315267046; helion-proton mass ratio [] uncertainty=0.000 000 000 29. hertz_atomic_mass_unit_relationship; 4.4398216616E-24; hertz-atomic mass unit relationship [u] uncertainty=0.000 000 0020 e-24. hertz_electron_volt_relationship; 4.135667662E-15; hertz-electron volt relationship [eV] uncertainty=0.000 000 025 e-15. hertz_hartree_relationship; 1.5198298460088E-16; hertz-hartree relationship [E_h] uncertainty=0.000 000 000 0090 e-16. hertz_inverse_meter_relationship; 3.335640951E-9; hertz-inverse meter relationship [m^{-1}] uncertainty=(exact). hertz_joule_relationship; 6.626070040E-34; hertz-joule relationship,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:15526,Energy Efficiency,energy,energy,15526,vin_relationship; 315775.13; hartree-kelvin relationship [K] uncertainty=0.000 0018 e5. hartree_kilogram_relationship; 4.850870129E-35; hartree-kilogram relationship [kg] uncertainty=0.000 000 060 e-35. helion_electron_mass_ratio; 5495.88527922; helion-electron mass ratio [] uncertainty=0.000 000 27. helion_g_factor; -4.255250616; helion g factor [] uncertainty=0.000 000 050. helion_mag_mom; -1.074617522E-26; helion mag. mom. [J T^{-1}] uncertainty=0.000 000 014 e-26. helion_mag_mom_to_Bohr_magneton_ratio; -0.001158740958; helion mag. mom. to Bohr magneton ratio [] uncertainty=0.000 000 014 e-3. helion_mag_mom_to_nuclear_magneton_ratio; -2.127625308; helion mag. mom. to nuclear magneton ratio [] uncertainty=0.000 000 025. helion_mass; 5.006412700E-27; helion mass [kg] uncertainty=0.000 000 062 e-27. helion_mass_energy_equivalent; 4.499539341E-10; helion mass energy equivalent [J] uncertainty=0.000 000 055 e-10. helion_mass_energy_equivalent_in_MeV; 2808.391586; helion mass energy equivalent in MeV [MeV] uncertainty=0.000 017. helion_mass_in_u; 3.01493224673; helion mass in u [u] uncertainty=0.000 000 000 12. helion_molar_mass; 0.00301493224673; helion molar mass [kg mol^{-1}] uncertainty=0.000 000 000 12 e-3. helion_proton_mass_ratio; 2.99315267046; helion-proton mass ratio [] uncertainty=0.000 000 000 29. hertz_atomic_mass_unit_relationship; 4.4398216616E-24; hertz-atomic mass unit relationship [u] uncertainty=0.000 000 0020 e-24. hertz_electron_volt_relationship; 4.135667662E-15; hertz-electron volt relationship [eV] uncertainty=0.000 000 025 e-15. hertz_hartree_relationship; 1.5198298460088E-16; hertz-hartree relationship [E_h] uncertainty=0.000 000 000 0090 e-16. hertz_inverse_meter_relationship; 3.335640951E-9; hertz-inverse meter relationship [m^{-1}] uncertainty=(exact). hertz_joule_relationship; 6.626070040E-34; hertz-joule relationship [J] uncertainty=0.000 000 081 e-34. hertz_kelvin_relationship; 4.7992447E-11; hertz-kelvin relationship [K] uncertainty=0.00,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:16298,Energy Efficiency,meter,meter,16298,ass [kg] uncertainty=0.000 000 062 e-27. helion_mass_energy_equivalent; 4.499539341E-10; helion mass energy equivalent [J] uncertainty=0.000 000 055 e-10. helion_mass_energy_equivalent_in_MeV; 2808.391586; helion mass energy equivalent in MeV [MeV] uncertainty=0.000 017. helion_mass_in_u; 3.01493224673; helion mass in u [u] uncertainty=0.000 000 000 12. helion_molar_mass; 0.00301493224673; helion molar mass [kg mol^{-1}] uncertainty=0.000 000 000 12 e-3. helion_proton_mass_ratio; 2.99315267046; helion-proton mass ratio [] uncertainty=0.000 000 000 29. hertz_atomic_mass_unit_relationship; 4.4398216616E-24; hertz-atomic mass unit relationship [u] uncertainty=0.000 000 0020 e-24. hertz_electron_volt_relationship; 4.135667662E-15; hertz-electron volt relationship [eV] uncertainty=0.000 000 025 e-15. hertz_hartree_relationship; 1.5198298460088E-16; hertz-hartree relationship [E_h] uncertainty=0.000 000 000 0090 e-16. hertz_inverse_meter_relationship; 3.335640951E-9; hertz-inverse meter relationship [m^{-1}] uncertainty=(exact). hertz_joule_relationship; 6.626070040E-34; hertz-joule relationship [J] uncertainty=0.000 000 081 e-34. hertz_kelvin_relationship; 4.7992447E-11; hertz-kelvin relationship [K] uncertainty=0.000 0028 e-11. hertz_kilogram_relationship; 7.372497201E-51; hertz-kilogram relationship [kg] uncertainty=0.000 000 091 e-51. inverse_fine_structure_constant; 137.035999139; inverse fine-structure constant [] uncertainty=0.000 000 031. inverse_meter_atomic_mass_unit_relationship; 1.33102504900E-15; inverse meter-atomic mass unit relationship [u] uncertainty=0.000 000 000 61 e-15. inverse_meter_electron_volt_relationship; 0.0000012398419739; inverse meter-electron volt relationship [eV] uncertainty=0.000 000 0076 e-6. inverse_meter_hartree_relationship; 4.556335252767E-8; inverse meter-hartree relationship [E_h] uncertainty=0.000 000 000 027 e-8. inverse_meter_hertz_relationship; 299792458; inverse meter-hertz relationship [Hz] uncertainty=(exact). inverse_meter,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:16396,Energy Efficiency,joule,joule,16396,mass energy equivalent [J] uncertainty=0.000 000 055 e-10. helion_mass_energy_equivalent_in_MeV; 2808.391586; helion mass energy equivalent in MeV [MeV] uncertainty=0.000 017. helion_mass_in_u; 3.01493224673; helion mass in u [u] uncertainty=0.000 000 000 12. helion_molar_mass; 0.00301493224673; helion molar mass [kg mol^{-1}] uncertainty=0.000 000 000 12 e-3. helion_proton_mass_ratio; 2.99315267046; helion-proton mass ratio [] uncertainty=0.000 000 000 29. hertz_atomic_mass_unit_relationship; 4.4398216616E-24; hertz-atomic mass unit relationship [u] uncertainty=0.000 000 0020 e-24. hertz_electron_volt_relationship; 4.135667662E-15; hertz-electron volt relationship [eV] uncertainty=0.000 000 025 e-15. hertz_hartree_relationship; 1.5198298460088E-16; hertz-hartree relationship [E_h] uncertainty=0.000 000 000 0090 e-16. hertz_inverse_meter_relationship; 3.335640951E-9; hertz-inverse meter relationship [m^{-1}] uncertainty=(exact). hertz_joule_relationship; 6.626070040E-34; hertz-joule relationship [J] uncertainty=0.000 000 081 e-34. hertz_kelvin_relationship; 4.7992447E-11; hertz-kelvin relationship [K] uncertainty=0.000 0028 e-11. hertz_kilogram_relationship; 7.372497201E-51; hertz-kilogram relationship [kg] uncertainty=0.000 000 091 e-51. inverse_fine_structure_constant; 137.035999139; inverse fine-structure constant [] uncertainty=0.000 000 031. inverse_meter_atomic_mass_unit_relationship; 1.33102504900E-15; inverse meter-atomic mass unit relationship [u] uncertainty=0.000 000 000 61 e-15. inverse_meter_electron_volt_relationship; 0.0000012398419739; inverse meter-electron volt relationship [eV] uncertainty=0.000 000 0076 e-6. inverse_meter_hartree_relationship; 4.556335252767E-8; inverse meter-hartree relationship [E_h] uncertainty=0.000 000 000 027 e-8. inverse_meter_hertz_relationship; 299792458; inverse meter-hertz relationship [Hz] uncertainty=(exact). inverse_meter_joule_relationship; 1.986445824E-25; inverse meter-joule relationship [J] uncertainty=0.000 000,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:16845,Energy Efficiency,meter,meter-atomic,16845,00 29. hertz_atomic_mass_unit_relationship; 4.4398216616E-24; hertz-atomic mass unit relationship [u] uncertainty=0.000 000 0020 e-24. hertz_electron_volt_relationship; 4.135667662E-15; hertz-electron volt relationship [eV] uncertainty=0.000 000 025 e-15. hertz_hartree_relationship; 1.5198298460088E-16; hertz-hartree relationship [E_h] uncertainty=0.000 000 000 0090 e-16. hertz_inverse_meter_relationship; 3.335640951E-9; hertz-inverse meter relationship [m^{-1}] uncertainty=(exact). hertz_joule_relationship; 6.626070040E-34; hertz-joule relationship [J] uncertainty=0.000 000 081 e-34. hertz_kelvin_relationship; 4.7992447E-11; hertz-kelvin relationship [K] uncertainty=0.000 0028 e-11. hertz_kilogram_relationship; 7.372497201E-51; hertz-kilogram relationship [kg] uncertainty=0.000 000 091 e-51. inverse_fine_structure_constant; 137.035999139; inverse fine-structure constant [] uncertainty=0.000 000 031. inverse_meter_atomic_mass_unit_relationship; 1.33102504900E-15; inverse meter-atomic mass unit relationship [u] uncertainty=0.000 000 000 61 e-15. inverse_meter_electron_volt_relationship; 0.0000012398419739; inverse meter-electron volt relationship [eV] uncertainty=0.000 000 0076 e-6. inverse_meter_hartree_relationship; 4.556335252767E-8; inverse meter-hartree relationship [E_h] uncertainty=0.000 000 000 027 e-8. inverse_meter_hertz_relationship; 299792458; inverse meter-hertz relationship [Hz] uncertainty=(exact). inverse_meter_joule_relationship; 1.986445824E-25; inverse meter-joule relationship [J] uncertainty=0.000 000 024 e-25. inverse_meter_kelvin_relationship; 0.0143877736; inverse meter-kelvin relationship [K] uncertainty=0.000 000 83 e-2. inverse_meter_kilogram_relationship; 2.210219057E-42; inverse meter-kilogram relationship [kg] uncertainty=0.000 000 027 e-42. inverse_of_conductance_quantum; 12906.4037278; inverse of conductance quantum [ohm] uncertainty=0.000 0029. Josephson_constant; 4.835978525E+14; Josephson constant [Hz V^{-1}] uncertainty=0.0030 e9. jo,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:16990,Energy Efficiency,meter,meter-electron,16990,ctron_volt_relationship; 4.135667662E-15; hertz-electron volt relationship [eV] uncertainty=0.000 000 025 e-15. hertz_hartree_relationship; 1.5198298460088E-16; hertz-hartree relationship [E_h] uncertainty=0.000 000 000 0090 e-16. hertz_inverse_meter_relationship; 3.335640951E-9; hertz-inverse meter relationship [m^{-1}] uncertainty=(exact). hertz_joule_relationship; 6.626070040E-34; hertz-joule relationship [J] uncertainty=0.000 000 081 e-34. hertz_kelvin_relationship; 4.7992447E-11; hertz-kelvin relationship [K] uncertainty=0.000 0028 e-11. hertz_kilogram_relationship; 7.372497201E-51; hertz-kilogram relationship [kg] uncertainty=0.000 000 091 e-51. inverse_fine_structure_constant; 137.035999139; inverse fine-structure constant [] uncertainty=0.000 000 031. inverse_meter_atomic_mass_unit_relationship; 1.33102504900E-15; inverse meter-atomic mass unit relationship [u] uncertainty=0.000 000 000 61 e-15. inverse_meter_electron_volt_relationship; 0.0000012398419739; inverse meter-electron volt relationship [eV] uncertainty=0.000 000 0076 e-6. inverse_meter_hartree_relationship; 4.556335252767E-8; inverse meter-hartree relationship [E_h] uncertainty=0.000 000 000 027 e-8. inverse_meter_hertz_relationship; 299792458; inverse meter-hertz relationship [Hz] uncertainty=(exact). inverse_meter_joule_relationship; 1.986445824E-25; inverse meter-joule relationship [J] uncertainty=0.000 000 024 e-25. inverse_meter_kelvin_relationship; 0.0143877736; inverse meter-kelvin relationship [K] uncertainty=0.000 000 83 e-2. inverse_meter_kilogram_relationship; 2.210219057E-42; inverse meter-kilogram relationship [kg] uncertainty=0.000 000 027 e-42. inverse_of_conductance_quantum; 12906.4037278; inverse of conductance quantum [ohm] uncertainty=0.000 0029. Josephson_constant; 4.835978525E+14; Josephson constant [Hz V^{-1}] uncertainty=0.0030 e9. joule_atomic_mass_unit_relationship; 6700535363; joule-atomic mass unit relationship [u] uncertainty=0.000 000 082 e9. joule_electron_volt_relati,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:17123,Energy Efficiency,meter,meter-hartree,17123,ionship; 1.5198298460088E-16; hertz-hartree relationship [E_h] uncertainty=0.000 000 000 0090 e-16. hertz_inverse_meter_relationship; 3.335640951E-9; hertz-inverse meter relationship [m^{-1}] uncertainty=(exact). hertz_joule_relationship; 6.626070040E-34; hertz-joule relationship [J] uncertainty=0.000 000 081 e-34. hertz_kelvin_relationship; 4.7992447E-11; hertz-kelvin relationship [K] uncertainty=0.000 0028 e-11. hertz_kilogram_relationship; 7.372497201E-51; hertz-kilogram relationship [kg] uncertainty=0.000 000 091 e-51. inverse_fine_structure_constant; 137.035999139; inverse fine-structure constant [] uncertainty=0.000 000 031. inverse_meter_atomic_mass_unit_relationship; 1.33102504900E-15; inverse meter-atomic mass unit relationship [u] uncertainty=0.000 000 000 61 e-15. inverse_meter_electron_volt_relationship; 0.0000012398419739; inverse meter-electron volt relationship [eV] uncertainty=0.000 000 0076 e-6. inverse_meter_hartree_relationship; 4.556335252767E-8; inverse meter-hartree relationship [E_h] uncertainty=0.000 000 000 027 e-8. inverse_meter_hertz_relationship; 299792458; inverse meter-hertz relationship [Hz] uncertainty=(exact). inverse_meter_joule_relationship; 1.986445824E-25; inverse meter-joule relationship [J] uncertainty=0.000 000 024 e-25. inverse_meter_kelvin_relationship; 0.0143877736; inverse meter-kelvin relationship [K] uncertainty=0.000 000 83 e-2. inverse_meter_kilogram_relationship; 2.210219057E-42; inverse meter-kilogram relationship [kg] uncertainty=0.000 000 027 e-42. inverse_of_conductance_quantum; 12906.4037278; inverse of conductance quantum [ohm] uncertainty=0.000 0029. Josephson_constant; 4.835978525E+14; Josephson constant [Hz V^{-1}] uncertainty=0.0030 e9. joule_atomic_mass_unit_relationship; 6700535363; joule-atomic mass unit relationship [u] uncertainty=0.000 000 082 e9. joule_electron_volt_relationship; 6.241509126E+18; joule-electron volt relationship [eV] uncertainty=0.000 000 038 e18. joule_hartree_relationship; 2.2937123,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:17244,Energy Efficiency,meter,meter-hertz,17244,verse_meter_relationship; 3.335640951E-9; hertz-inverse meter relationship [m^{-1}] uncertainty=(exact). hertz_joule_relationship; 6.626070040E-34; hertz-joule relationship [J] uncertainty=0.000 000 081 e-34. hertz_kelvin_relationship; 4.7992447E-11; hertz-kelvin relationship [K] uncertainty=0.000 0028 e-11. hertz_kilogram_relationship; 7.372497201E-51; hertz-kilogram relationship [kg] uncertainty=0.000 000 091 e-51. inverse_fine_structure_constant; 137.035999139; inverse fine-structure constant [] uncertainty=0.000 000 031. inverse_meter_atomic_mass_unit_relationship; 1.33102504900E-15; inverse meter-atomic mass unit relationship [u] uncertainty=0.000 000 000 61 e-15. inverse_meter_electron_volt_relationship; 0.0000012398419739; inverse meter-electron volt relationship [eV] uncertainty=0.000 000 0076 e-6. inverse_meter_hartree_relationship; 4.556335252767E-8; inverse meter-hartree relationship [E_h] uncertainty=0.000 000 000 027 e-8. inverse_meter_hertz_relationship; 299792458; inverse meter-hertz relationship [Hz] uncertainty=(exact). inverse_meter_joule_relationship; 1.986445824E-25; inverse meter-joule relationship [J] uncertainty=0.000 000 024 e-25. inverse_meter_kelvin_relationship; 0.0143877736; inverse meter-kelvin relationship [K] uncertainty=0.000 000 83 e-2. inverse_meter_kilogram_relationship; 2.210219057E-42; inverse meter-kilogram relationship [kg] uncertainty=0.000 000 027 e-42. inverse_of_conductance_quantum; 12906.4037278; inverse of conductance quantum [ohm] uncertainty=0.000 0029. Josephson_constant; 4.835978525E+14; Josephson constant [Hz V^{-1}] uncertainty=0.0030 e9. joule_atomic_mass_unit_relationship; 6700535363; joule-atomic mass unit relationship [u] uncertainty=0.000 000 082 e9. joule_electron_volt_relationship; 6.241509126E+18; joule-electron volt relationship [eV] uncertainty=0.000 000 038 e18. joule_hartree_relationship; 2.293712317E+17; joule-hartree relationship [E_h] uncertainty=0.000 000 028 e17. joule_hertz_relationship; 1.50919020,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:17354,Energy Efficiency,meter,meter-joule,17354,ionship; 6.626070040E-34; hertz-joule relationship [J] uncertainty=0.000 000 081 e-34. hertz_kelvin_relationship; 4.7992447E-11; hertz-kelvin relationship [K] uncertainty=0.000 0028 e-11. hertz_kilogram_relationship; 7.372497201E-51; hertz-kilogram relationship [kg] uncertainty=0.000 000 091 e-51. inverse_fine_structure_constant; 137.035999139; inverse fine-structure constant [] uncertainty=0.000 000 031. inverse_meter_atomic_mass_unit_relationship; 1.33102504900E-15; inverse meter-atomic mass unit relationship [u] uncertainty=0.000 000 000 61 e-15. inverse_meter_electron_volt_relationship; 0.0000012398419739; inverse meter-electron volt relationship [eV] uncertainty=0.000 000 0076 e-6. inverse_meter_hartree_relationship; 4.556335252767E-8; inverse meter-hartree relationship [E_h] uncertainty=0.000 000 000 027 e-8. inverse_meter_hertz_relationship; 299792458; inverse meter-hertz relationship [Hz] uncertainty=(exact). inverse_meter_joule_relationship; 1.986445824E-25; inverse meter-joule relationship [J] uncertainty=0.000 000 024 e-25. inverse_meter_kelvin_relationship; 0.0143877736; inverse meter-kelvin relationship [K] uncertainty=0.000 000 83 e-2. inverse_meter_kilogram_relationship; 2.210219057E-42; inverse meter-kilogram relationship [kg] uncertainty=0.000 000 027 e-42. inverse_of_conductance_quantum; 12906.4037278; inverse of conductance quantum [ohm] uncertainty=0.000 0029. Josephson_constant; 4.835978525E+14; Josephson constant [Hz V^{-1}] uncertainty=0.0030 e9. joule_atomic_mass_unit_relationship; 6700535363; joule-atomic mass unit relationship [u] uncertainty=0.000 000 082 e9. joule_electron_volt_relationship; 6.241509126E+18; joule-electron volt relationship [eV] uncertainty=0.000 000 038 e18. joule_hartree_relationship; 2.293712317E+17; joule-hartree relationship [E_h] uncertainty=0.000 000 028 e17. joule_hertz_relationship; 1.509190205E+33; joule-hertz relationship [Hz] uncertainty=0.000 000 019 e33. joule_inverse_meter_relationship; 5.034116651E+24; jou,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:17472,Energy Efficiency,meter,meter-kelvin,17472,447E-11; hertz-kelvin relationship [K] uncertainty=0.000 0028 e-11. hertz_kilogram_relationship; 7.372497201E-51; hertz-kilogram relationship [kg] uncertainty=0.000 000 091 e-51. inverse_fine_structure_constant; 137.035999139; inverse fine-structure constant [] uncertainty=0.000 000 031. inverse_meter_atomic_mass_unit_relationship; 1.33102504900E-15; inverse meter-atomic mass unit relationship [u] uncertainty=0.000 000 000 61 e-15. inverse_meter_electron_volt_relationship; 0.0000012398419739; inverse meter-electron volt relationship [eV] uncertainty=0.000 000 0076 e-6. inverse_meter_hartree_relationship; 4.556335252767E-8; inverse meter-hartree relationship [E_h] uncertainty=0.000 000 000 027 e-8. inverse_meter_hertz_relationship; 299792458; inverse meter-hertz relationship [Hz] uncertainty=(exact). inverse_meter_joule_relationship; 1.986445824E-25; inverse meter-joule relationship [J] uncertainty=0.000 000 024 e-25. inverse_meter_kelvin_relationship; 0.0143877736; inverse meter-kelvin relationship [K] uncertainty=0.000 000 83 e-2. inverse_meter_kilogram_relationship; 2.210219057E-42; inverse meter-kilogram relationship [kg] uncertainty=0.000 000 027 e-42. inverse_of_conductance_quantum; 12906.4037278; inverse of conductance quantum [ohm] uncertainty=0.000 0029. Josephson_constant; 4.835978525E+14; Josephson constant [Hz V^{-1}] uncertainty=0.0030 e9. joule_atomic_mass_unit_relationship; 6700535363; joule-atomic mass unit relationship [u] uncertainty=0.000 000 082 e9. joule_electron_volt_relationship; 6.241509126E+18; joule-electron volt relationship [eV] uncertainty=0.000 000 038 e18. joule_hartree_relationship; 2.293712317E+17; joule-hartree relationship [E_h] uncertainty=0.000 000 028 e17. joule_hertz_relationship; 1.509190205E+33; joule-hertz relationship [Hz] uncertainty=0.000 000 019 e33. joule_inverse_meter_relationship; 5.034116651E+24; joule-inverse meter relationship [m^{-1}] uncertainty=0.000 000 062 e24. joule_kelvin_relationship; 7.2429731E+22; joule-ke,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:17594,Energy Efficiency,meter,meter-kilogram,17594,logram relationship [kg] uncertainty=0.000 000 091 e-51. inverse_fine_structure_constant; 137.035999139; inverse fine-structure constant [] uncertainty=0.000 000 031. inverse_meter_atomic_mass_unit_relationship; 1.33102504900E-15; inverse meter-atomic mass unit relationship [u] uncertainty=0.000 000 000 61 e-15. inverse_meter_electron_volt_relationship; 0.0000012398419739; inverse meter-electron volt relationship [eV] uncertainty=0.000 000 0076 e-6. inverse_meter_hartree_relationship; 4.556335252767E-8; inverse meter-hartree relationship [E_h] uncertainty=0.000 000 000 027 e-8. inverse_meter_hertz_relationship; 299792458; inverse meter-hertz relationship [Hz] uncertainty=(exact). inverse_meter_joule_relationship; 1.986445824E-25; inverse meter-joule relationship [J] uncertainty=0.000 000 024 e-25. inverse_meter_kelvin_relationship; 0.0143877736; inverse meter-kelvin relationship [K] uncertainty=0.000 000 83 e-2. inverse_meter_kilogram_relationship; 2.210219057E-42; inverse meter-kilogram relationship [kg] uncertainty=0.000 000 027 e-42. inverse_of_conductance_quantum; 12906.4037278; inverse of conductance quantum [ohm] uncertainty=0.000 0029. Josephson_constant; 4.835978525E+14; Josephson constant [Hz V^{-1}] uncertainty=0.0030 e9. joule_atomic_mass_unit_relationship; 6700535363; joule-atomic mass unit relationship [u] uncertainty=0.000 000 082 e9. joule_electron_volt_relationship; 6.241509126E+18; joule-electron volt relationship [eV] uncertainty=0.000 000 038 e18. joule_hartree_relationship; 2.293712317E+17; joule-hartree relationship [E_h] uncertainty=0.000 000 028 e17. joule_hertz_relationship; 1.509190205E+33; joule-hertz relationship [Hz] uncertainty=0.000 000 019 e33. joule_inverse_meter_relationship; 5.034116651E+24; joule-inverse meter relationship [m^{-1}] uncertainty=0.000 000 062 e24. joule_kelvin_relationship; 7.2429731E+22; joule-kelvin relationship [K] uncertainty=0.000 0042 e22. joule_kilogram_relationship; 1.112650056E-17; joule-kilogram relationshi,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:17907,Energy Efficiency,joule,joule-atomic,17907,0 61 e-15. inverse_meter_electron_volt_relationship; 0.0000012398419739; inverse meter-electron volt relationship [eV] uncertainty=0.000 000 0076 e-6. inverse_meter_hartree_relationship; 4.556335252767E-8; inverse meter-hartree relationship [E_h] uncertainty=0.000 000 000 027 e-8. inverse_meter_hertz_relationship; 299792458; inverse meter-hertz relationship [Hz] uncertainty=(exact). inverse_meter_joule_relationship; 1.986445824E-25; inverse meter-joule relationship [J] uncertainty=0.000 000 024 e-25. inverse_meter_kelvin_relationship; 0.0143877736; inverse meter-kelvin relationship [K] uncertainty=0.000 000 83 e-2. inverse_meter_kilogram_relationship; 2.210219057E-42; inverse meter-kilogram relationship [kg] uncertainty=0.000 000 027 e-42. inverse_of_conductance_quantum; 12906.4037278; inverse of conductance quantum [ohm] uncertainty=0.000 0029. Josephson_constant; 4.835978525E+14; Josephson constant [Hz V^{-1}] uncertainty=0.0030 e9. joule_atomic_mass_unit_relationship; 6700535363; joule-atomic mass unit relationship [u] uncertainty=0.000 000 082 e9. joule_electron_volt_relationship; 6.241509126E+18; joule-electron volt relationship [eV] uncertainty=0.000 000 038 e18. joule_hartree_relationship; 2.293712317E+17; joule-hartree relationship [E_h] uncertainty=0.000 000 028 e17. joule_hertz_relationship; 1.509190205E+33; joule-hertz relationship [Hz] uncertainty=0.000 000 019 e33. joule_inverse_meter_relationship; 5.034116651E+24; joule-inverse meter relationship [m^{-1}] uncertainty=0.000 000 062 e24. joule_kelvin_relationship; 7.2429731E+22; joule-kelvin relationship [K] uncertainty=0.000 0042 e22. joule_kilogram_relationship; 1.112650056E-17; joule-kilogram relationship [kg] uncertainty=(exact). kelvin_atomic_mass_unit_relationship; 9.2510842E-14; kelvin-atomic mass unit relationship [u] uncertainty=0.000 0053 e-14. kelvin_electron_volt_relationship; 0.000086173303; kelvin-electron volt relationship [eV] uncertainty=0.000 0050 e-5. kelvin_hartree_relationship; 0.000,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:18028,Energy Efficiency,joule,joule-electron,18028,000 0076 e-6. inverse_meter_hartree_relationship; 4.556335252767E-8; inverse meter-hartree relationship [E_h] uncertainty=0.000 000 000 027 e-8. inverse_meter_hertz_relationship; 299792458; inverse meter-hertz relationship [Hz] uncertainty=(exact). inverse_meter_joule_relationship; 1.986445824E-25; inverse meter-joule relationship [J] uncertainty=0.000 000 024 e-25. inverse_meter_kelvin_relationship; 0.0143877736; inverse meter-kelvin relationship [K] uncertainty=0.000 000 83 e-2. inverse_meter_kilogram_relationship; 2.210219057E-42; inverse meter-kilogram relationship [kg] uncertainty=0.000 000 027 e-42. inverse_of_conductance_quantum; 12906.4037278; inverse of conductance quantum [ohm] uncertainty=0.000 0029. Josephson_constant; 4.835978525E+14; Josephson constant [Hz V^{-1}] uncertainty=0.0030 e9. joule_atomic_mass_unit_relationship; 6700535363; joule-atomic mass unit relationship [u] uncertainty=0.000 000 082 e9. joule_electron_volt_relationship; 6.241509126E+18; joule-electron volt relationship [eV] uncertainty=0.000 000 038 e18. joule_hartree_relationship; 2.293712317E+17; joule-hartree relationship [E_h] uncertainty=0.000 000 028 e17. joule_hertz_relationship; 1.509190205E+33; joule-hertz relationship [Hz] uncertainty=0.000 000 019 e33. joule_inverse_meter_relationship; 5.034116651E+24; joule-inverse meter relationship [m^{-1}] uncertainty=0.000 000 062 e24. joule_kelvin_relationship; 7.2429731E+22; joule-kelvin relationship [K] uncertainty=0.000 0042 e22. joule_kilogram_relationship; 1.112650056E-17; joule-kilogram relationship [kg] uncertainty=(exact). kelvin_atomic_mass_unit_relationship; 9.2510842E-14; kelvin-atomic mass unit relationship [u] uncertainty=0.000 0053 e-14. kelvin_electron_volt_relationship; 0.000086173303; kelvin-electron volt relationship [eV] uncertainty=0.000 0050 e-5. kelvin_hartree_relationship; 0.0000031668105; kelvin-hartree relationship [E_h] uncertainty=0.000 0018 e-6. kelvin_hertz_relationship; 2.0836612E+10; kelvin-hertz relations,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:18142,Energy Efficiency,joule,joule-hartree,18142,certainty=0.000 000 000 027 e-8. inverse_meter_hertz_relationship; 299792458; inverse meter-hertz relationship [Hz] uncertainty=(exact). inverse_meter_joule_relationship; 1.986445824E-25; inverse meter-joule relationship [J] uncertainty=0.000 000 024 e-25. inverse_meter_kelvin_relationship; 0.0143877736; inverse meter-kelvin relationship [K] uncertainty=0.000 000 83 e-2. inverse_meter_kilogram_relationship; 2.210219057E-42; inverse meter-kilogram relationship [kg] uncertainty=0.000 000 027 e-42. inverse_of_conductance_quantum; 12906.4037278; inverse of conductance quantum [ohm] uncertainty=0.000 0029. Josephson_constant; 4.835978525E+14; Josephson constant [Hz V^{-1}] uncertainty=0.0030 e9. joule_atomic_mass_unit_relationship; 6700535363; joule-atomic mass unit relationship [u] uncertainty=0.000 000 082 e9. joule_electron_volt_relationship; 6.241509126E+18; joule-electron volt relationship [eV] uncertainty=0.000 000 038 e18. joule_hartree_relationship; 2.293712317E+17; joule-hartree relationship [E_h] uncertainty=0.000 000 028 e17. joule_hertz_relationship; 1.509190205E+33; joule-hertz relationship [Hz] uncertainty=0.000 000 019 e33. joule_inverse_meter_relationship; 5.034116651E+24; joule-inverse meter relationship [m^{-1}] uncertainty=0.000 000 062 e24. joule_kelvin_relationship; 7.2429731E+22; joule-kelvin relationship [K] uncertainty=0.000 0042 e22. joule_kilogram_relationship; 1.112650056E-17; joule-kilogram relationship [kg] uncertainty=(exact). kelvin_atomic_mass_unit_relationship; 9.2510842E-14; kelvin-atomic mass unit relationship [u] uncertainty=0.000 0053 e-14. kelvin_electron_volt_relationship; 0.000086173303; kelvin-electron volt relationship [eV] uncertainty=0.000 0050 e-5. kelvin_hartree_relationship; 0.0000031668105; kelvin-hartree relationship [E_h] uncertainty=0.000 0018 e-6. kelvin_hertz_relationship; 2.0836612E+10; kelvin-hertz relationship [Hz] uncertainty=0.000 0012 e10. kelvin_inverse_meter_relationship; 69.503457; kelvin-inverse meter relatio,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:18249,Energy Efficiency,joule,joule-hertz,18249,nship [Hz] uncertainty=(exact). inverse_meter_joule_relationship; 1.986445824E-25; inverse meter-joule relationship [J] uncertainty=0.000 000 024 e-25. inverse_meter_kelvin_relationship; 0.0143877736; inverse meter-kelvin relationship [K] uncertainty=0.000 000 83 e-2. inverse_meter_kilogram_relationship; 2.210219057E-42; inverse meter-kilogram relationship [kg] uncertainty=0.000 000 027 e-42. inverse_of_conductance_quantum; 12906.4037278; inverse of conductance quantum [ohm] uncertainty=0.000 0029. Josephson_constant; 4.835978525E+14; Josephson constant [Hz V^{-1}] uncertainty=0.0030 e9. joule_atomic_mass_unit_relationship; 6700535363; joule-atomic mass unit relationship [u] uncertainty=0.000 000 082 e9. joule_electron_volt_relationship; 6.241509126E+18; joule-electron volt relationship [eV] uncertainty=0.000 000 038 e18. joule_hartree_relationship; 2.293712317E+17; joule-hartree relationship [E_h] uncertainty=0.000 000 028 e17. joule_hertz_relationship; 1.509190205E+33; joule-hertz relationship [Hz] uncertainty=0.000 000 019 e33. joule_inverse_meter_relationship; 5.034116651E+24; joule-inverse meter relationship [m^{-1}] uncertainty=0.000 000 062 e24. joule_kelvin_relationship; 7.2429731E+22; joule-kelvin relationship [K] uncertainty=0.000 0042 e22. joule_kilogram_relationship; 1.112650056E-17; joule-kilogram relationship [kg] uncertainty=(exact). kelvin_atomic_mass_unit_relationship; 9.2510842E-14; kelvin-atomic mass unit relationship [u] uncertainty=0.000 0053 e-14. kelvin_electron_volt_relationship; 0.000086173303; kelvin-electron volt relationship [eV] uncertainty=0.000 0050 e-5. kelvin_hartree_relationship; 0.0000031668105; kelvin-hartree relationship [E_h] uncertainty=0.000 0018 e-6. kelvin_hertz_relationship; 2.0836612E+10; kelvin-hertz relationship [Hz] uncertainty=0.000 0012 e10. kelvin_inverse_meter_relationship; 69.503457; kelvin-inverse meter relationship [m^{-1}] uncertainty=0.000 040. kelvin_joule_relationship; 1.38064852E-23; kelvin-joule relationship,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:18361,Energy Efficiency,joule,joule-inverse,18361,] uncertainty=0.000 000 024 e-25. inverse_meter_kelvin_relationship; 0.0143877736; inverse meter-kelvin relationship [K] uncertainty=0.000 000 83 e-2. inverse_meter_kilogram_relationship; 2.210219057E-42; inverse meter-kilogram relationship [kg] uncertainty=0.000 000 027 e-42. inverse_of_conductance_quantum; 12906.4037278; inverse of conductance quantum [ohm] uncertainty=0.000 0029. Josephson_constant; 4.835978525E+14; Josephson constant [Hz V^{-1}] uncertainty=0.0030 e9. joule_atomic_mass_unit_relationship; 6700535363; joule-atomic mass unit relationship [u] uncertainty=0.000 000 082 e9. joule_electron_volt_relationship; 6.241509126E+18; joule-electron volt relationship [eV] uncertainty=0.000 000 038 e18. joule_hartree_relationship; 2.293712317E+17; joule-hartree relationship [E_h] uncertainty=0.000 000 028 e17. joule_hertz_relationship; 1.509190205E+33; joule-hertz relationship [Hz] uncertainty=0.000 000 019 e33. joule_inverse_meter_relationship; 5.034116651E+24; joule-inverse meter relationship [m^{-1}] uncertainty=0.000 000 062 e24. joule_kelvin_relationship; 7.2429731E+22; joule-kelvin relationship [K] uncertainty=0.000 0042 e22. joule_kilogram_relationship; 1.112650056E-17; joule-kilogram relationship [kg] uncertainty=(exact). kelvin_atomic_mass_unit_relationship; 9.2510842E-14; kelvin-atomic mass unit relationship [u] uncertainty=0.000 0053 e-14. kelvin_electron_volt_relationship; 0.000086173303; kelvin-electron volt relationship [eV] uncertainty=0.000 0050 e-5. kelvin_hartree_relationship; 0.0000031668105; kelvin-hartree relationship [E_h] uncertainty=0.000 0018 e-6. kelvin_hertz_relationship; 2.0836612E+10; kelvin-hertz relationship [Hz] uncertainty=0.000 0012 e10. kelvin_inverse_meter_relationship; 69.503457; kelvin-inverse meter relationship [m^{-1}] uncertainty=0.000 040. kelvin_joule_relationship; 1.38064852E-23; kelvin-joule relationship [J] uncertainty=0.000 000 79 e-23. kelvin_kilogram_relationship; 1.53617865E-40; kelvin-kilogram relationship [kg] un,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:18375,Energy Efficiency,meter,meter,18375,] uncertainty=0.000 000 024 e-25. inverse_meter_kelvin_relationship; 0.0143877736; inverse meter-kelvin relationship [K] uncertainty=0.000 000 83 e-2. inverse_meter_kilogram_relationship; 2.210219057E-42; inverse meter-kilogram relationship [kg] uncertainty=0.000 000 027 e-42. inverse_of_conductance_quantum; 12906.4037278; inverse of conductance quantum [ohm] uncertainty=0.000 0029. Josephson_constant; 4.835978525E+14; Josephson constant [Hz V^{-1}] uncertainty=0.0030 e9. joule_atomic_mass_unit_relationship; 6700535363; joule-atomic mass unit relationship [u] uncertainty=0.000 000 082 e9. joule_electron_volt_relationship; 6.241509126E+18; joule-electron volt relationship [eV] uncertainty=0.000 000 038 e18. joule_hartree_relationship; 2.293712317E+17; joule-hartree relationship [E_h] uncertainty=0.000 000 028 e17. joule_hertz_relationship; 1.509190205E+33; joule-hertz relationship [Hz] uncertainty=0.000 000 019 e33. joule_inverse_meter_relationship; 5.034116651E+24; joule-inverse meter relationship [m^{-1}] uncertainty=0.000 000 062 e24. joule_kelvin_relationship; 7.2429731E+22; joule-kelvin relationship [K] uncertainty=0.000 0042 e22. joule_kilogram_relationship; 1.112650056E-17; joule-kilogram relationship [kg] uncertainty=(exact). kelvin_atomic_mass_unit_relationship; 9.2510842E-14; kelvin-atomic mass unit relationship [u] uncertainty=0.000 0053 e-14. kelvin_electron_volt_relationship; 0.000086173303; kelvin-electron volt relationship [eV] uncertainty=0.000 0050 e-5. kelvin_hartree_relationship; 0.0000031668105; kelvin-hartree relationship [E_h] uncertainty=0.000 0018 e-6. kelvin_hertz_relationship; 2.0836612E+10; kelvin-hertz relationship [Hz] uncertainty=0.000 0012 e10. kelvin_inverse_meter_relationship; 69.503457; kelvin-inverse meter relationship [m^{-1}] uncertainty=0.000 040. kelvin_joule_relationship; 1.38064852E-23; kelvin-joule relationship [J] uncertainty=0.000 000 79 e-23. kelvin_kilogram_relationship; 1.53617865E-40; kelvin-kilogram relationship [kg] un,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:18476,Energy Efficiency,joule,joule-kelvin,18476,onship [K] uncertainty=0.000 000 83 e-2. inverse_meter_kilogram_relationship; 2.210219057E-42; inverse meter-kilogram relationship [kg] uncertainty=0.000 000 027 e-42. inverse_of_conductance_quantum; 12906.4037278; inverse of conductance quantum [ohm] uncertainty=0.000 0029. Josephson_constant; 4.835978525E+14; Josephson constant [Hz V^{-1}] uncertainty=0.0030 e9. joule_atomic_mass_unit_relationship; 6700535363; joule-atomic mass unit relationship [u] uncertainty=0.000 000 082 e9. joule_electron_volt_relationship; 6.241509126E+18; joule-electron volt relationship [eV] uncertainty=0.000 000 038 e18. joule_hartree_relationship; 2.293712317E+17; joule-hartree relationship [E_h] uncertainty=0.000 000 028 e17. joule_hertz_relationship; 1.509190205E+33; joule-hertz relationship [Hz] uncertainty=0.000 000 019 e33. joule_inverse_meter_relationship; 5.034116651E+24; joule-inverse meter relationship [m^{-1}] uncertainty=0.000 000 062 e24. joule_kelvin_relationship; 7.2429731E+22; joule-kelvin relationship [K] uncertainty=0.000 0042 e22. joule_kilogram_relationship; 1.112650056E-17; joule-kilogram relationship [kg] uncertainty=(exact). kelvin_atomic_mass_unit_relationship; 9.2510842E-14; kelvin-atomic mass unit relationship [u] uncertainty=0.000 0053 e-14. kelvin_electron_volt_relationship; 0.000086173303; kelvin-electron volt relationship [eV] uncertainty=0.000 0050 e-5. kelvin_hartree_relationship; 0.0000031668105; kelvin-hartree relationship [E_h] uncertainty=0.000 0018 e-6. kelvin_hertz_relationship; 2.0836612E+10; kelvin-hertz relationship [Hz] uncertainty=0.000 0012 e10. kelvin_inverse_meter_relationship; 69.503457; kelvin-inverse meter relationship [m^{-1}] uncertainty=0.000 040. kelvin_joule_relationship; 1.38064852E-23; kelvin-joule relationship [J] uncertainty=0.000 000 79 e-23. kelvin_kilogram_relationship; 1.53617865E-40; kelvin-kilogram relationship [kg] uncertainty=0.000 000 88 e-40. kilogram_atomic_mass_unit_relationship; 6.022140857E+26; kilogram-atomic mass uni,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:18580,Energy Efficiency,joule,joule-kilogram,18580,-kilogram relationship [kg] uncertainty=0.000 000 027 e-42. inverse_of_conductance_quantum; 12906.4037278; inverse of conductance quantum [ohm] uncertainty=0.000 0029. Josephson_constant; 4.835978525E+14; Josephson constant [Hz V^{-1}] uncertainty=0.0030 e9. joule_atomic_mass_unit_relationship; 6700535363; joule-atomic mass unit relationship [u] uncertainty=0.000 000 082 e9. joule_electron_volt_relationship; 6.241509126E+18; joule-electron volt relationship [eV] uncertainty=0.000 000 038 e18. joule_hartree_relationship; 2.293712317E+17; joule-hartree relationship [E_h] uncertainty=0.000 000 028 e17. joule_hertz_relationship; 1.509190205E+33; joule-hertz relationship [Hz] uncertainty=0.000 000 019 e33. joule_inverse_meter_relationship; 5.034116651E+24; joule-inverse meter relationship [m^{-1}] uncertainty=0.000 000 062 e24. joule_kelvin_relationship; 7.2429731E+22; joule-kelvin relationship [K] uncertainty=0.000 0042 e22. joule_kilogram_relationship; 1.112650056E-17; joule-kilogram relationship [kg] uncertainty=(exact). kelvin_atomic_mass_unit_relationship; 9.2510842E-14; kelvin-atomic mass unit relationship [u] uncertainty=0.000 0053 e-14. kelvin_electron_volt_relationship; 0.000086173303; kelvin-electron volt relationship [eV] uncertainty=0.000 0050 e-5. kelvin_hartree_relationship; 0.0000031668105; kelvin-hartree relationship [E_h] uncertainty=0.000 0018 e-6. kelvin_hertz_relationship; 2.0836612E+10; kelvin-hertz relationship [Hz] uncertainty=0.000 0012 e10. kelvin_inverse_meter_relationship; 69.503457; kelvin-inverse meter relationship [m^{-1}] uncertainty=0.000 040. kelvin_joule_relationship; 1.38064852E-23; kelvin-joule relationship [J] uncertainty=0.000 000 79 e-23. kelvin_kilogram_relationship; 1.53617865E-40; kelvin-kilogram relationship [kg] uncertainty=0.000 000 88 e-40. kilogram_atomic_mass_unit_relationship; 6.022140857E+26; kilogram-atomic mass unit relationship [u] uncertainty=0.000 000 074 e26. kilogram_electron_volt_relationship; 5.609588650E+35; kil,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:19145,Energy Efficiency,meter,meter,19145,e relationship [E_h] uncertainty=0.000 000 028 e17. joule_hertz_relationship; 1.509190205E+33; joule-hertz relationship [Hz] uncertainty=0.000 000 019 e33. joule_inverse_meter_relationship; 5.034116651E+24; joule-inverse meter relationship [m^{-1}] uncertainty=0.000 000 062 e24. joule_kelvin_relationship; 7.2429731E+22; joule-kelvin relationship [K] uncertainty=0.000 0042 e22. joule_kilogram_relationship; 1.112650056E-17; joule-kilogram relationship [kg] uncertainty=(exact). kelvin_atomic_mass_unit_relationship; 9.2510842E-14; kelvin-atomic mass unit relationship [u] uncertainty=0.000 0053 e-14. kelvin_electron_volt_relationship; 0.000086173303; kelvin-electron volt relationship [eV] uncertainty=0.000 0050 e-5. kelvin_hartree_relationship; 0.0000031668105; kelvin-hartree relationship [E_h] uncertainty=0.000 0018 e-6. kelvin_hertz_relationship; 2.0836612E+10; kelvin-hertz relationship [Hz] uncertainty=0.000 0012 e10. kelvin_inverse_meter_relationship; 69.503457; kelvin-inverse meter relationship [m^{-1}] uncertainty=0.000 040. kelvin_joule_relationship; 1.38064852E-23; kelvin-joule relationship [J] uncertainty=0.000 000 79 e-23. kelvin_kilogram_relationship; 1.53617865E-40; kelvin-kilogram relationship [kg] uncertainty=0.000 000 88 e-40. kilogram_atomic_mass_unit_relationship; 6.022140857E+26; kilogram-atomic mass unit relationship [u] uncertainty=0.000 000 074 e26. kilogram_electron_volt_relationship; 5.609588650E+35; kilogram-electron volt relationship [eV] uncertainty=0.000 000 034 e35. kilogram_hartree_relationship; 2.061485823E+34; kilogram-hartree relationship [E_h] uncertainty=0.000 000 025 e34. kilogram_hertz_relationship; 1.356392512E+50; kilogram-hertz relationship [Hz] uncertainty=0.000 000 017 e50. kilogram_inverse_meter_relationship; 4.524438411E+41; kilogram-inverse meter relationship [m^{-1}] uncertainty=0.000 000 056 e41. kilogram_joule_relationship; 8.987551787E+16; kilogram-joule relationship [J] uncertainty=(exact). kilogram_kelvin_relationship; 6.5,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:19246,Energy Efficiency,joule,joule,19246,-hertz relationship [Hz] uncertainty=0.000 000 019 e33. joule_inverse_meter_relationship; 5.034116651E+24; joule-inverse meter relationship [m^{-1}] uncertainty=0.000 000 062 e24. joule_kelvin_relationship; 7.2429731E+22; joule-kelvin relationship [K] uncertainty=0.000 0042 e22. joule_kilogram_relationship; 1.112650056E-17; joule-kilogram relationship [kg] uncertainty=(exact). kelvin_atomic_mass_unit_relationship; 9.2510842E-14; kelvin-atomic mass unit relationship [u] uncertainty=0.000 0053 e-14. kelvin_electron_volt_relationship; 0.000086173303; kelvin-electron volt relationship [eV] uncertainty=0.000 0050 e-5. kelvin_hartree_relationship; 0.0000031668105; kelvin-hartree relationship [E_h] uncertainty=0.000 0018 e-6. kelvin_hertz_relationship; 2.0836612E+10; kelvin-hertz relationship [Hz] uncertainty=0.000 0012 e10. kelvin_inverse_meter_relationship; 69.503457; kelvin-inverse meter relationship [m^{-1}] uncertainty=0.000 040. kelvin_joule_relationship; 1.38064852E-23; kelvin-joule relationship [J] uncertainty=0.000 000 79 e-23. kelvin_kilogram_relationship; 1.53617865E-40; kelvin-kilogram relationship [kg] uncertainty=0.000 000 88 e-40. kilogram_atomic_mass_unit_relationship; 6.022140857E+26; kilogram-atomic mass unit relationship [u] uncertainty=0.000 000 074 e26. kilogram_electron_volt_relationship; 5.609588650E+35; kilogram-electron volt relationship [eV] uncertainty=0.000 000 034 e35. kilogram_hartree_relationship; 2.061485823E+34; kilogram-hartree relationship [E_h] uncertainty=0.000 000 025 e34. kilogram_hertz_relationship; 1.356392512E+50; kilogram-hertz relationship [Hz] uncertainty=0.000 000 017 e50. kilogram_inverse_meter_relationship; 4.524438411E+41; kilogram-inverse meter relationship [m^{-1}] uncertainty=0.000 000 056 e41. kilogram_joule_relationship; 8.987551787E+16; kilogram-joule relationship [J] uncertainty=(exact). kilogram_kelvin_relationship; 6.5096595E+39; kilogram-kelvin relationship [K] uncertainty=0.000 0037 e39. lattice_parameter_of_silic,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:19964,Energy Efficiency,meter,meter,19964,"000 0018 e-6. kelvin_hertz_relationship; 2.0836612E+10; kelvin-hertz relationship [Hz] uncertainty=0.000 0012 e10. kelvin_inverse_meter_relationship; 69.503457; kelvin-inverse meter relationship [m^{-1}] uncertainty=0.000 040. kelvin_joule_relationship; 1.38064852E-23; kelvin-joule relationship [J] uncertainty=0.000 000 79 e-23. kelvin_kilogram_relationship; 1.53617865E-40; kelvin-kilogram relationship [kg] uncertainty=0.000 000 88 e-40. kilogram_atomic_mass_unit_relationship; 6.022140857E+26; kilogram-atomic mass unit relationship [u] uncertainty=0.000 000 074 e26. kilogram_electron_volt_relationship; 5.609588650E+35; kilogram-electron volt relationship [eV] uncertainty=0.000 000 034 e35. kilogram_hartree_relationship; 2.061485823E+34; kilogram-hartree relationship [E_h] uncertainty=0.000 000 025 e34. kilogram_hertz_relationship; 1.356392512E+50; kilogram-hertz relationship [Hz] uncertainty=0.000 000 017 e50. kilogram_inverse_meter_relationship; 4.524438411E+41; kilogram-inverse meter relationship [m^{-1}] uncertainty=0.000 000 056 e41. kilogram_joule_relationship; 8.987551787E+16; kilogram-joule relationship [J] uncertainty=(exact). kilogram_kelvin_relationship; 6.5096595E+39; kilogram-kelvin relationship [K] uncertainty=0.000 0037 e39. lattice_parameter_of_silicon; 5.431020504E-10; lattice parameter of silicon [m] uncertainty=0.000 0089 e-12. Loschmidt_constant_27315_K_100_kPa; 2.6516467E+25; Loschmidt constant (273.15 K, 100 kPa) [m^{-3}] uncertainty=0.000 0015 e25. Loschmidt_constant_27315_K_101325_kPa; 2.6867811E+25; Loschmidt constant (273.15 K, 101.325 kPa) [m^{-3}] uncertainty=0.000 0015 e25. mag_constant; 0.0000012566370614; mag. constant [N A^{-2}] uncertainty=(exact). mag_flux_quantum; 2.067833831E-15; mag. flux quantum [Wb] uncertainty=0.000 000 013 e-15. molar_gas_constant; 8.3144598; molar gas constant [J mol^{-1} K^{-1}] uncertainty=0.000 0048. molar_mass_constant; 0.001; molar mass constant [kg mol^{-1}] uncertainty=(exact). molar_mass_of_carbon_12;",MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:20078,Energy Efficiency,joule,joule,20078,"vin_inverse_meter_relationship; 69.503457; kelvin-inverse meter relationship [m^{-1}] uncertainty=0.000 040. kelvin_joule_relationship; 1.38064852E-23; kelvin-joule relationship [J] uncertainty=0.000 000 79 e-23. kelvin_kilogram_relationship; 1.53617865E-40; kelvin-kilogram relationship [kg] uncertainty=0.000 000 88 e-40. kilogram_atomic_mass_unit_relationship; 6.022140857E+26; kilogram-atomic mass unit relationship [u] uncertainty=0.000 000 074 e26. kilogram_electron_volt_relationship; 5.609588650E+35; kilogram-electron volt relationship [eV] uncertainty=0.000 000 034 e35. kilogram_hartree_relationship; 2.061485823E+34; kilogram-hartree relationship [E_h] uncertainty=0.000 000 025 e34. kilogram_hertz_relationship; 1.356392512E+50; kilogram-hertz relationship [Hz] uncertainty=0.000 000 017 e50. kilogram_inverse_meter_relationship; 4.524438411E+41; kilogram-inverse meter relationship [m^{-1}] uncertainty=0.000 000 056 e41. kilogram_joule_relationship; 8.987551787E+16; kilogram-joule relationship [J] uncertainty=(exact). kilogram_kelvin_relationship; 6.5096595E+39; kilogram-kelvin relationship [K] uncertainty=0.000 0037 e39. lattice_parameter_of_silicon; 5.431020504E-10; lattice parameter of silicon [m] uncertainty=0.000 0089 e-12. Loschmidt_constant_27315_K_100_kPa; 2.6516467E+25; Loschmidt constant (273.15 K, 100 kPa) [m^{-3}] uncertainty=0.000 0015 e25. Loschmidt_constant_27315_K_101325_kPa; 2.6867811E+25; Loschmidt constant (273.15 K, 101.325 kPa) [m^{-3}] uncertainty=0.000 0015 e25. mag_constant; 0.0000012566370614; mag. constant [N A^{-2}] uncertainty=(exact). mag_flux_quantum; 2.067833831E-15; mag. flux quantum [Wb] uncertainty=0.000 000 013 e-15. molar_gas_constant; 8.3144598; molar gas constant [J mol^{-1} K^{-1}] uncertainty=0.000 0048. molar_mass_constant; 0.001; molar mass constant [kg mol^{-1}] uncertainty=(exact). molar_mass_of_carbon_12; 0.012; molar mass of carbon-12 [kg mol^{-1}] uncertainty=(exact). molar_Planck_constant; 3.9903127110E-10; molar Planc",MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:22697,Energy Efficiency,energy,energy,22697,; Mo x unit [m] uncertainty=0.000 000 53 e-13. muon_Compton_wavelength; 1.173444111E-14; muon Compton wavelength [m] uncertainty=0.000 000 26 e-15. muon_Compton_wavelength_over_2_pi; 1.867594308E-15; muon Compton wavelength over 2 pi [m] uncertainty=0.000 000 042 e-15. muon_electron_mass_ratio; 206.7682826; muon-electron mass ratio [] uncertainty=0.000 0046. muon_g_factor; -2.0023318418; muon g factor [] uncertainty=0.000 000 0013. muon_mag_mom; -4.49044826E-26; muon mag. mom. [J T^{-1}] uncertainty=0.000 000 10 e-26. muon_mag_mom_anomaly; 0.00116592089; muon mag. mom. anomaly [] uncertainty=0.000 000 63 e-3. muon_mag_mom_to_Bohr_magneton_ratio; -0.00484197048; muon mag. mom. to Bohr magneton ratio [] uncertainty=0.000 000 11 e-3. muon_mag_mom_to_nuclear_magneton_ratio; -8.89059705; muon mag. mom. to nuclear magneton ratio [] uncertainty=0.000 000 20. muon_mass; 1.883531594E-28; muon mass [kg] uncertainty=0.000 000 048 e-28. muon_mass_energy_equivalent; 1.692833774E-11; muon mass energy equivalent [J] uncertainty=0.000 000 043 e-11. muon_mass_energy_equivalent_in_MeV; 105.6583745; muon mass energy equivalent in MeV [MeV] uncertainty=0.000 0024. muon_mass_in_u; 0.1134289257; muon mass in u [u] uncertainty=0.000 000 0025. muon_molar_mass; 0.0001134289257; muon molar mass [kg mol^{-1}] uncertainty=0.000 000 0025 e-3. muon_neutron_mass_ratio; 0.1124545167; muon-neutron mass ratio [] uncertainty=0.000 000 0025. muon_proton_mag_mom_ratio; -3.183345142; muon-proton mag. mom. ratio [] uncertainty=0.000 000 071. muon_proton_mass_ratio; 0.1126095262; muon-proton mass ratio [] uncertainty=0.000 000 0025. muon_tau_mass_ratio; 0.0594649; muon-tau mass ratio [] uncertainty=0.000 54 e-2. natural_unit_of_action; 1.054571800E-34; natural unit of action [J s] uncertainty=0.000 000 013 e-34. natural_unit_of_action_in_eV_s; 6.582119514E-16; natural unit of action in eV s [eV s] uncertainty=0.000 000 040 e-16. natural_unit_of_energy; 8.18710565E-14; natural unit of energy [J] uncertainty,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:22810,Energy Efficiency,energy,energy,22810,rtainty=0.000 000 26 e-15. muon_Compton_wavelength_over_2_pi; 1.867594308E-15; muon Compton wavelength over 2 pi [m] uncertainty=0.000 000 042 e-15. muon_electron_mass_ratio; 206.7682826; muon-electron mass ratio [] uncertainty=0.000 0046. muon_g_factor; -2.0023318418; muon g factor [] uncertainty=0.000 000 0013. muon_mag_mom; -4.49044826E-26; muon mag. mom. [J T^{-1}] uncertainty=0.000 000 10 e-26. muon_mag_mom_anomaly; 0.00116592089; muon mag. mom. anomaly [] uncertainty=0.000 000 63 e-3. muon_mag_mom_to_Bohr_magneton_ratio; -0.00484197048; muon mag. mom. to Bohr magneton ratio [] uncertainty=0.000 000 11 e-3. muon_mag_mom_to_nuclear_magneton_ratio; -8.89059705; muon mag. mom. to nuclear magneton ratio [] uncertainty=0.000 000 20. muon_mass; 1.883531594E-28; muon mass [kg] uncertainty=0.000 000 048 e-28. muon_mass_energy_equivalent; 1.692833774E-11; muon mass energy equivalent [J] uncertainty=0.000 000 043 e-11. muon_mass_energy_equivalent_in_MeV; 105.6583745; muon mass energy equivalent in MeV [MeV] uncertainty=0.000 0024. muon_mass_in_u; 0.1134289257; muon mass in u [u] uncertainty=0.000 000 0025. muon_molar_mass; 0.0001134289257; muon molar mass [kg mol^{-1}] uncertainty=0.000 000 0025 e-3. muon_neutron_mass_ratio; 0.1124545167; muon-neutron mass ratio [] uncertainty=0.000 000 0025. muon_proton_mag_mom_ratio; -3.183345142; muon-proton mag. mom. ratio [] uncertainty=0.000 000 071. muon_proton_mass_ratio; 0.1126095262; muon-proton mass ratio [] uncertainty=0.000 000 0025. muon_tau_mass_ratio; 0.0594649; muon-tau mass ratio [] uncertainty=0.000 54 e-2. natural_unit_of_action; 1.054571800E-34; natural unit of action [J s] uncertainty=0.000 000 013 e-34. natural_unit_of_action_in_eV_s; 6.582119514E-16; natural unit of action in eV s [eV s] uncertainty=0.000 000 040 e-16. natural_unit_of_energy; 8.18710565E-14; natural unit of energy [J] uncertainty=0.000 000 10 e-14. natural_unit_of_energy_in_MeV; 0.5109989461; natural unit of energy in MeV [MeV] uncertainty=0.000 0,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:23681,Energy Efficiency,energy,energy,23681,774E-11; muon mass energy equivalent [J] uncertainty=0.000 000 043 e-11. muon_mass_energy_equivalent_in_MeV; 105.6583745; muon mass energy equivalent in MeV [MeV] uncertainty=0.000 0024. muon_mass_in_u; 0.1134289257; muon mass in u [u] uncertainty=0.000 000 0025. muon_molar_mass; 0.0001134289257; muon molar mass [kg mol^{-1}] uncertainty=0.000 000 0025 e-3. muon_neutron_mass_ratio; 0.1124545167; muon-neutron mass ratio [] uncertainty=0.000 000 0025. muon_proton_mag_mom_ratio; -3.183345142; muon-proton mag. mom. ratio [] uncertainty=0.000 000 071. muon_proton_mass_ratio; 0.1126095262; muon-proton mass ratio [] uncertainty=0.000 000 0025. muon_tau_mass_ratio; 0.0594649; muon-tau mass ratio [] uncertainty=0.000 54 e-2. natural_unit_of_action; 1.054571800E-34; natural unit of action [J s] uncertainty=0.000 000 013 e-34. natural_unit_of_action_in_eV_s; 6.582119514E-16; natural unit of action in eV s [eV s] uncertainty=0.000 000 040 e-16. natural_unit_of_energy; 8.18710565E-14; natural unit of energy [J] uncertainty=0.000 000 10 e-14. natural_unit_of_energy_in_MeV; 0.5109989461; natural unit of energy in MeV [MeV] uncertainty=0.000 000 0031. natural_unit_of_length; 3.8615926764E-13; natural unit of length [m] uncertainty=0.000 000 18 e-15. natural_unit_of_mass; 9.10938356E-31; natural unit of mass [kg] uncertainty=0.000 000 11 e-31. natural_unit_of_momum; 2.730924488E-22; natural unit of mom.um [kg m s^{-1}] uncertainty=0.000 000 034 e-22. natural_unit_of_momum_in_MeVpc; 0.5109989461; natural unit of mom.um in MeV/c [MeV/c] uncertainty=0.000 000 0031. natural_unit_of_time; 1.28808866712E-21; natural unit of time [s] uncertainty=0.000 000 000 58 e-21. natural_unit_of_velocity; 299792458; natural unit of velocity [m s^{-1}] uncertainty=(exact). neutron_Compton_wavelength; 1.31959090481E-15; neutron Compton wavelength [m] uncertainty=0.000 000 000 88 e-15. neutron_Compton_wavelength_over_2_pi; 2.1001941536E-16; neutron Compton wavelength over 2 pi [m] uncertainty=0.000 000 00,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:23784,Energy Efficiency,energy,energy,23784,105.6583745; muon mass energy equivalent in MeV [MeV] uncertainty=0.000 0024. muon_mass_in_u; 0.1134289257; muon mass in u [u] uncertainty=0.000 000 0025. muon_molar_mass; 0.0001134289257; muon molar mass [kg mol^{-1}] uncertainty=0.000 000 0025 e-3. muon_neutron_mass_ratio; 0.1124545167; muon-neutron mass ratio [] uncertainty=0.000 000 0025. muon_proton_mag_mom_ratio; -3.183345142; muon-proton mag. mom. ratio [] uncertainty=0.000 000 071. muon_proton_mass_ratio; 0.1126095262; muon-proton mass ratio [] uncertainty=0.000 000 0025. muon_tau_mass_ratio; 0.0594649; muon-tau mass ratio [] uncertainty=0.000 54 e-2. natural_unit_of_action; 1.054571800E-34; natural unit of action [J s] uncertainty=0.000 000 013 e-34. natural_unit_of_action_in_eV_s; 6.582119514E-16; natural unit of action in eV s [eV s] uncertainty=0.000 000 040 e-16. natural_unit_of_energy; 8.18710565E-14; natural unit of energy [J] uncertainty=0.000 000 10 e-14. natural_unit_of_energy_in_MeV; 0.5109989461; natural unit of energy in MeV [MeV] uncertainty=0.000 000 0031. natural_unit_of_length; 3.8615926764E-13; natural unit of length [m] uncertainty=0.000 000 18 e-15. natural_unit_of_mass; 9.10938356E-31; natural unit of mass [kg] uncertainty=0.000 000 11 e-31. natural_unit_of_momum; 2.730924488E-22; natural unit of mom.um [kg m s^{-1}] uncertainty=0.000 000 034 e-22. natural_unit_of_momum_in_MeVpc; 0.5109989461; natural unit of mom.um in MeV/c [MeV/c] uncertainty=0.000 000 0031. natural_unit_of_time; 1.28808866712E-21; natural unit of time [s] uncertainty=0.000 000 000 58 e-21. natural_unit_of_velocity; 299792458; natural unit of velocity [m s^{-1}] uncertainty=(exact). neutron_Compton_wavelength; 1.31959090481E-15; neutron Compton wavelength [m] uncertainty=0.000 000 000 88 e-15. neutron_Compton_wavelength_over_2_pi; 2.1001941536E-16; neutron Compton wavelength over 2 pi [m] uncertainty=0.000 000 000 14 e-15. neutron_electron_mag_mom_ratio; 0.00104066882; neutron-electron mag. mom. ratio [] uncertainty=0.,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:25693,Energy Efficiency,energy,energy,25693,_electron_mag_mom_ratio; 0.00104066882; neutron-electron mag. mom. ratio [] uncertainty=0.000 000 25 e-3. neutron_electron_mass_ratio; 1838.68366158; neutron-electron mass ratio [] uncertainty=0.000 000 90. neutron_g_factor; -3.82608545; neutron g factor [] uncertainty=0.000 000 90. neutron_gyromag_ratio; 183247172; neutron gyromag. ratio [s^{-1} T^{-1}] uncertainty=0.000 000 43 e8. neutron_gyromag_ratio_over_2_pi; 29.1646933; neutron gyromag. ratio over 2 pi [MHz T^{-1}] uncertainty=0.000 0069. neutron_mag_mom; -9.6623650E-27; neutron mag. mom. [J T^{-1}] uncertainty=0.000 000 23 e-26. neutron_mag_mom_to_Bohr_magneton_ratio; -0.00104187563; neutron mag. mom. to Bohr magneton ratio [] uncertainty=0.000 000 25 e-3. neutron_mag_mom_to_nuclear_magneton_ratio; -1.91304273; neutron mag. mom. to nuclear magneton ratio [] uncertainty=0.000 000 45. neutron_mass; 1.674927471E-27; neutron mass [kg] uncertainty=0.000 000 021 e-27. neutron_mass_energy_equivalent; 1.505349739E-10; neutron mass energy equivalent [J] uncertainty=0.000 000 019 e-10. neutron_mass_energy_equivalent_in_MeV; 939.5654133; neutron mass energy equivalent in MeV [MeV] uncertainty=0.000 0058. neutron_mass_in_u; 1.00866491588; neutron mass in u [u] uncertainty=0.000 000 000 49. neutron_molar_mass; 0.00100866491588; neutron molar mass [kg mol^{-1}] uncertainty=0.000 000 000 49 e-3. neutron_muon_mass_ratio; 8.89248408; neutron-muon mass ratio [] uncertainty=0.000 000 20. neutron_proton_mag_mom_ratio; -0.68497934; neutron-proton mag. mom. ratio [] uncertainty=0.000 000 16. neutron_proton_mass_difference; 2.30557377E-30; neutron-proton mass difference [] uncertainty=0.000 000 85 e-30. neutron_proton_mass_difference_energy_equivalent; 2.07214637E-13; neutron-proton mass difference energy equivalent [] uncertainty=0.000 000 76 e-13. neutron_proton_mass_difference_energy_equivalent_in_MeV; 1.29333205; neutron-proton mass difference energy equivalent in MeV [] uncertainty=0.000 000 48. neutron_proton_mass_difference,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:25812,Energy Efficiency,energy,energy,25812,s_ratio; 1838.68366158; neutron-electron mass ratio [] uncertainty=0.000 000 90. neutron_g_factor; -3.82608545; neutron g factor [] uncertainty=0.000 000 90. neutron_gyromag_ratio; 183247172; neutron gyromag. ratio [s^{-1} T^{-1}] uncertainty=0.000 000 43 e8. neutron_gyromag_ratio_over_2_pi; 29.1646933; neutron gyromag. ratio over 2 pi [MHz T^{-1}] uncertainty=0.000 0069. neutron_mag_mom; -9.6623650E-27; neutron mag. mom. [J T^{-1}] uncertainty=0.000 000 23 e-26. neutron_mag_mom_to_Bohr_magneton_ratio; -0.00104187563; neutron mag. mom. to Bohr magneton ratio [] uncertainty=0.000 000 25 e-3. neutron_mag_mom_to_nuclear_magneton_ratio; -1.91304273; neutron mag. mom. to nuclear magneton ratio [] uncertainty=0.000 000 45. neutron_mass; 1.674927471E-27; neutron mass [kg] uncertainty=0.000 000 021 e-27. neutron_mass_energy_equivalent; 1.505349739E-10; neutron mass energy equivalent [J] uncertainty=0.000 000 019 e-10. neutron_mass_energy_equivalent_in_MeV; 939.5654133; neutron mass energy equivalent in MeV [MeV] uncertainty=0.000 0058. neutron_mass_in_u; 1.00866491588; neutron mass in u [u] uncertainty=0.000 000 000 49. neutron_molar_mass; 0.00100866491588; neutron molar mass [kg mol^{-1}] uncertainty=0.000 000 000 49 e-3. neutron_muon_mass_ratio; 8.89248408; neutron-muon mass ratio [] uncertainty=0.000 000 20. neutron_proton_mag_mom_ratio; -0.68497934; neutron-proton mag. mom. ratio [] uncertainty=0.000 000 16. neutron_proton_mass_difference; 2.30557377E-30; neutron-proton mass difference [] uncertainty=0.000 000 85 e-30. neutron_proton_mass_difference_energy_equivalent; 2.07214637E-13; neutron-proton mass difference energy equivalent [] uncertainty=0.000 000 76 e-13. neutron_proton_mass_difference_energy_equivalent_in_MeV; 1.29333205; neutron-proton mass difference energy equivalent in MeV [] uncertainty=0.000 000 48. neutron_proton_mass_difference_in_u; 0.00138844900; neutron-proton mass difference in u [] uncertainty=0.000 000 000 51. neutron_proton_mass_ratio; 1.0013784,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:26461,Energy Efficiency,energy,energy,26461,_ratio; -1.91304273; neutron mag. mom. to nuclear magneton ratio [] uncertainty=0.000 000 45. neutron_mass; 1.674927471E-27; neutron mass [kg] uncertainty=0.000 000 021 e-27. neutron_mass_energy_equivalent; 1.505349739E-10; neutron mass energy equivalent [J] uncertainty=0.000 000 019 e-10. neutron_mass_energy_equivalent_in_MeV; 939.5654133; neutron mass energy equivalent in MeV [MeV] uncertainty=0.000 0058. neutron_mass_in_u; 1.00866491588; neutron mass in u [u] uncertainty=0.000 000 000 49. neutron_molar_mass; 0.00100866491588; neutron molar mass [kg mol^{-1}] uncertainty=0.000 000 000 49 e-3. neutron_muon_mass_ratio; 8.89248408; neutron-muon mass ratio [] uncertainty=0.000 000 20. neutron_proton_mag_mom_ratio; -0.68497934; neutron-proton mag. mom. ratio [] uncertainty=0.000 000 16. neutron_proton_mass_difference; 2.30557377E-30; neutron-proton mass difference [] uncertainty=0.000 000 85 e-30. neutron_proton_mass_difference_energy_equivalent; 2.07214637E-13; neutron-proton mass difference energy equivalent [] uncertainty=0.000 000 76 e-13. neutron_proton_mass_difference_energy_equivalent_in_MeV; 1.29333205; neutron-proton mass difference energy equivalent in MeV [] uncertainty=0.000 000 48. neutron_proton_mass_difference_in_u; 0.00138844900; neutron-proton mass difference in u [] uncertainty=0.000 000 000 51. neutron_proton_mass_ratio; 1.00137841898; neutron-proton mass ratio [] uncertainty=0.000 000 000 51. neutron_tau_mass_ratio; 0.528790; neutron-tau mass ratio [] uncertainty=0.000 048. neutron_to_shielded_proton_mag_mom_ratio; -0.68499694; neutron to shielded proton mag. mom. ratio [] uncertainty=0.000 000 16. Newtonian_constant_of_gravitation; 6.67408E-11; Newtonian constant of gravitation [m^3 kg^{-1} s^{-2}] uncertainty=0.000 31 e-11. Newtonian_constant_of_gravitation_over_h_bar_c; 6.70861E-39; Newtonian constant of gravitation over h-bar c [(GeV/c^2)^-2] uncertainty=0.000 31 e-39. nuclear_magneton; 5.050783699E-27; nuclear magneton [J T^{-1}] uncertainty=0.,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:26613,Energy Efficiency,energy,energy,26613,000 000 021 e-27. neutron_mass_energy_equivalent; 1.505349739E-10; neutron mass energy equivalent [J] uncertainty=0.000 000 019 e-10. neutron_mass_energy_equivalent_in_MeV; 939.5654133; neutron mass energy equivalent in MeV [MeV] uncertainty=0.000 0058. neutron_mass_in_u; 1.00866491588; neutron mass in u [u] uncertainty=0.000 000 000 49. neutron_molar_mass; 0.00100866491588; neutron molar mass [kg mol^{-1}] uncertainty=0.000 000 000 49 e-3. neutron_muon_mass_ratio; 8.89248408; neutron-muon mass ratio [] uncertainty=0.000 000 20. neutron_proton_mag_mom_ratio; -0.68497934; neutron-proton mag. mom. ratio [] uncertainty=0.000 000 16. neutron_proton_mass_difference; 2.30557377E-30; neutron-proton mass difference [] uncertainty=0.000 000 85 e-30. neutron_proton_mass_difference_energy_equivalent; 2.07214637E-13; neutron-proton mass difference energy equivalent [] uncertainty=0.000 000 76 e-13. neutron_proton_mass_difference_energy_equivalent_in_MeV; 1.29333205; neutron-proton mass difference energy equivalent in MeV [] uncertainty=0.000 000 48. neutron_proton_mass_difference_in_u; 0.00138844900; neutron-proton mass difference in u [] uncertainty=0.000 000 000 51. neutron_proton_mass_ratio; 1.00137841898; neutron-proton mass ratio [] uncertainty=0.000 000 000 51. neutron_tau_mass_ratio; 0.528790; neutron-tau mass ratio [] uncertainty=0.000 048. neutron_to_shielded_proton_mag_mom_ratio; -0.68499694; neutron to shielded proton mag. mom. ratio [] uncertainty=0.000 000 16. Newtonian_constant_of_gravitation; 6.67408E-11; Newtonian constant of gravitation [m^3 kg^{-1} s^{-2}] uncertainty=0.000 31 e-11. Newtonian_constant_of_gravitation_over_h_bar_c; 6.70861E-39; Newtonian constant of gravitation over h-bar c [(GeV/c^2)^-2] uncertainty=0.000 31 e-39. nuclear_magneton; 5.050783699E-27; nuclear magneton [J T^{-1}] uncertainty=0.000 000 031 e-27. nuclear_magneton_in_eVpT; 3.1524512550E-8; nuclear magneton in eV/T [eV T^{-1}] uncertainty=0.000 000 0015 e-8. nuclear_magneton_in_inverse_,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:27675,Energy Efficiency,meter,meters,27675,ton_mass_difference_in_u; 0.00138844900; neutron-proton mass difference in u [] uncertainty=0.000 000 000 51. neutron_proton_mass_ratio; 1.00137841898; neutron-proton mass ratio [] uncertainty=0.000 000 000 51. neutron_tau_mass_ratio; 0.528790; neutron-tau mass ratio [] uncertainty=0.000 048. neutron_to_shielded_proton_mag_mom_ratio; -0.68499694; neutron to shielded proton mag. mom. ratio [] uncertainty=0.000 000 16. Newtonian_constant_of_gravitation; 6.67408E-11; Newtonian constant of gravitation [m^3 kg^{-1} s^{-2}] uncertainty=0.000 31 e-11. Newtonian_constant_of_gravitation_over_h_bar_c; 6.70861E-39; Newtonian constant of gravitation over h-bar c [(GeV/c^2)^-2] uncertainty=0.000 31 e-39. nuclear_magneton; 5.050783699E-27; nuclear magneton [J T^{-1}] uncertainty=0.000 000 031 e-27. nuclear_magneton_in_eVpT; 3.1524512550E-8; nuclear magneton in eV/T [eV T^{-1}] uncertainty=0.000 000 0015 e-8. nuclear_magneton_in_inverse_meters_per_tesla; 0.02542623432; nuclear magneton in inverse meters per tesla [m^{-1} T^{-1}] uncertainty=0.000 000 016 e-2. nuclear_magneton_in_KpT; 0.00036582690; nuclear magneton in K/T [K T^{-1}] uncertainty=0.000 0021 e-4. nuclear_magneton_in_MHzpT; 7.622593285; nuclear magneton in MHz/T [MHz T^{-1}] uncertainty=0.000 000 047. Planck_constant; 6.626070040E-34; Planck constant [J s] uncertainty=0.000 000 081 e-34. Planck_constant_in_eV_s; 4.135667662E-15; Planck constant in eV s [eV s] uncertainty=0.000 000 025 e-15. Planck_constant_over_2_pi; 1.054571800E-34; Planck constant over 2 pi [J s] uncertainty=0.000 000 013 e-34. Planck_constant_over_2_pi_in_eV_s; 6.582119514E-16; Planck constant over 2 pi in eV s [eV s] uncertainty=0.000 000 040 e-16. Planck_constant_over_2_pi_times_c_in_MeV_fm; 197.3269788; Planck constant over 2 pi times c in MeV fm [MeV fm] uncertainty=0.000 0012. Planck_length; 1.616229E-35; Planck length [m] uncertainty=0.000 038 e-35. Planck_mass; 2.176470E-8; Planck mass [kg] uncertainty=0.000 051 e-8. Planck_mass_energy_equiv,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:28718,Energy Efficiency,energy,energy,28718,0 016 e-2. nuclear_magneton_in_KpT; 0.00036582690; nuclear magneton in K/T [K T^{-1}] uncertainty=0.000 0021 e-4. nuclear_magneton_in_MHzpT; 7.622593285; nuclear magneton in MHz/T [MHz T^{-1}] uncertainty=0.000 000 047. Planck_constant; 6.626070040E-34; Planck constant [J s] uncertainty=0.000 000 081 e-34. Planck_constant_in_eV_s; 4.135667662E-15; Planck constant in eV s [eV s] uncertainty=0.000 000 025 e-15. Planck_constant_over_2_pi; 1.054571800E-34; Planck constant over 2 pi [J s] uncertainty=0.000 000 013 e-34. Planck_constant_over_2_pi_in_eV_s; 6.582119514E-16; Planck constant over 2 pi in eV s [eV s] uncertainty=0.000 000 040 e-16. Planck_constant_over_2_pi_times_c_in_MeV_fm; 197.3269788; Planck constant over 2 pi times c in MeV fm [MeV fm] uncertainty=0.000 0012. Planck_length; 1.616229E-35; Planck length [m] uncertainty=0.000 038 e-35. Planck_mass; 2.176470E-8; Planck mass [kg] uncertainty=0.000 051 e-8. Planck_mass_energy_equivalent_in_GeV; 1.220910E+19; Planck mass energy equivalent in GeV [GeV] uncertainty=0.000 029 e19. Planck_temperature; 1.416808E+32; Planck temperature [K] uncertainty=0.000 033 e32. Planck_time; 5.39116E-44; Planck time [s] uncertainty=0.000 13 e-44. proton_charge_to_mass_quotient; 95788332.26; proton charge to mass quotient [C kg^{-1}] uncertainty=0.000 000 059 e7. proton_Compton_wavelength; 1.32140985396E-15; proton Compton wavelength [m] uncertainty=0.000 000 000 61 e-15. proton_Compton_wavelength_over_2_pi; 2.10308910109E-16; proton Compton wavelength over 2 pi [m] uncertainty=0.000 000 000 097 e-15. proton_electron_mass_ratio; 1836.15267389; proton-electron mass ratio [] uncertainty=0.000 000 17. proton_g_factor; 5.585694702; proton g factor [] uncertainty=0.000 000 017. proton_gyromag_ratio; 267522190.0; proton gyromag. ratio [s^{-1} T^{-1}] uncertainty=0.000 000 018 e8. proton_gyromag_ratio_over_2_pi; 42.57747892; proton gyromag. ratio over 2 pi [MHz T^{-1}] uncertainty=0.000 000 29. proton_mag_mom; 1.4106067873E-26; proton mag.,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:28981,Energy Efficiency,charge,charge,28981, s] uncertainty=0.000 000 081 e-34. Planck_constant_in_eV_s; 4.135667662E-15; Planck constant in eV s [eV s] uncertainty=0.000 000 025 e-15. Planck_constant_over_2_pi; 1.054571800E-34; Planck constant over 2 pi [J s] uncertainty=0.000 000 013 e-34. Planck_constant_over_2_pi_in_eV_s; 6.582119514E-16; Planck constant over 2 pi in eV s [eV s] uncertainty=0.000 000 040 e-16. Planck_constant_over_2_pi_times_c_in_MeV_fm; 197.3269788; Planck constant over 2 pi times c in MeV fm [MeV fm] uncertainty=0.000 0012. Planck_length; 1.616229E-35; Planck length [m] uncertainty=0.000 038 e-35. Planck_mass; 2.176470E-8; Planck mass [kg] uncertainty=0.000 051 e-8. Planck_mass_energy_equivalent_in_GeV; 1.220910E+19; Planck mass energy equivalent in GeV [GeV] uncertainty=0.000 029 e19. Planck_temperature; 1.416808E+32; Planck temperature [K] uncertainty=0.000 033 e32. Planck_time; 5.39116E-44; Planck time [s] uncertainty=0.000 13 e-44. proton_charge_to_mass_quotient; 95788332.26; proton charge to mass quotient [C kg^{-1}] uncertainty=0.000 000 059 e7. proton_Compton_wavelength; 1.32140985396E-15; proton Compton wavelength [m] uncertainty=0.000 000 000 61 e-15. proton_Compton_wavelength_over_2_pi; 2.10308910109E-16; proton Compton wavelength over 2 pi [m] uncertainty=0.000 000 000 097 e-15. proton_electron_mass_ratio; 1836.15267389; proton-electron mass ratio [] uncertainty=0.000 000 17. proton_g_factor; 5.585694702; proton g factor [] uncertainty=0.000 000 017. proton_gyromag_ratio; 267522190.0; proton gyromag. ratio [s^{-1} T^{-1}] uncertainty=0.000 000 018 e8. proton_gyromag_ratio_over_2_pi; 42.57747892; proton gyromag. ratio over 2 pi [MHz T^{-1}] uncertainty=0.000 000 29. proton_mag_mom; 1.4106067873E-26; proton mag. mom. [J T^{-1}] uncertainty=0.000 000 0097 e-26. proton_mag_mom_to_Bohr_magneton_ratio; 0.0015210322053; proton mag. mom. to Bohr magneton ratio [] uncertainty=0.000 000 0046 e-3. proton_mag_mom_to_nuclear_magneton_ratio; 2.7928473508; proton mag. mom. to nuclear magneto,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:30284,Energy Efficiency,energy,energy,30284,. proton_electron_mass_ratio; 1836.15267389; proton-electron mass ratio [] uncertainty=0.000 000 17. proton_g_factor; 5.585694702; proton g factor [] uncertainty=0.000 000 017. proton_gyromag_ratio; 267522190.0; proton gyromag. ratio [s^{-1} T^{-1}] uncertainty=0.000 000 018 e8. proton_gyromag_ratio_over_2_pi; 42.57747892; proton gyromag. ratio over 2 pi [MHz T^{-1}] uncertainty=0.000 000 29. proton_mag_mom; 1.4106067873E-26; proton mag. mom. [J T^{-1}] uncertainty=0.000 000 0097 e-26. proton_mag_mom_to_Bohr_magneton_ratio; 0.0015210322053; proton mag. mom. to Bohr magneton ratio [] uncertainty=0.000 000 0046 e-3. proton_mag_mom_to_nuclear_magneton_ratio; 2.7928473508; proton mag. mom. to nuclear magneton ratio [] uncertainty=0.000 000 0085. proton_mag_shielding_correction; 0.000025691; proton mag. shielding correction [] uncertainty=0.011 e-6. proton_mass; 1.672621898E-27; proton mass [kg] uncertainty=0.000 000 021 e-27. proton_mass_energy_equivalent; 1.503277593E-10; proton mass energy equivalent [J] uncertainty=0.000 000 018 e-10. proton_mass_energy_equivalent_in_MeV; 938.2720813; proton mass energy equivalent in MeV [MeV] uncertainty=0.000 0058. proton_mass_in_u; 1.007276466879; proton mass in u [u] uncertainty=0.000 000 000 091. proton_molar_mass; 0.001007276466879; proton molar mass [kg mol^{-1}] uncertainty=0.000 000 000 091 e-3. proton_muon_mass_ratio; 8.88024338; proton-muon mass ratio [] uncertainty=0.000 000 20. proton_neutron_mag_mom_ratio; -1.45989805; proton-neutron mag. mom. ratio [] uncertainty=0.000 000 34. proton_neutron_mass_ratio; 0.99862347844; proton-neutron mass ratio [] uncertainty=0.000 000 000 51. proton_rms_charge_radius; 8.751E-16; proton rms charge radius [m] uncertainty=0.0061 e-15. proton_tau_mass_ratio; 0.528063; proton-tau mass ratio [] uncertainty=0.000 048. quantum_of_circulation; 0.00036369475486; quantum of circulation [m^2 s^{-1}] uncertainty=0.000 000 0017 e-4. quantum_of_circulation_times_2; 0.00072738950972; quantum of circula,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:30401,Energy Efficiency,energy,energy,30401,4702; proton g factor [] uncertainty=0.000 000 017. proton_gyromag_ratio; 267522190.0; proton gyromag. ratio [s^{-1} T^{-1}] uncertainty=0.000 000 018 e8. proton_gyromag_ratio_over_2_pi; 42.57747892; proton gyromag. ratio over 2 pi [MHz T^{-1}] uncertainty=0.000 000 29. proton_mag_mom; 1.4106067873E-26; proton mag. mom. [J T^{-1}] uncertainty=0.000 000 0097 e-26. proton_mag_mom_to_Bohr_magneton_ratio; 0.0015210322053; proton mag. mom. to Bohr magneton ratio [] uncertainty=0.000 000 0046 e-3. proton_mag_mom_to_nuclear_magneton_ratio; 2.7928473508; proton mag. mom. to nuclear magneton ratio [] uncertainty=0.000 000 0085. proton_mag_shielding_correction; 0.000025691; proton mag. shielding correction [] uncertainty=0.011 e-6. proton_mass; 1.672621898E-27; proton mass [kg] uncertainty=0.000 000 021 e-27. proton_mass_energy_equivalent; 1.503277593E-10; proton mass energy equivalent [J] uncertainty=0.000 000 018 e-10. proton_mass_energy_equivalent_in_MeV; 938.2720813; proton mass energy equivalent in MeV [MeV] uncertainty=0.000 0058. proton_mass_in_u; 1.007276466879; proton mass in u [u] uncertainty=0.000 000 000 091. proton_molar_mass; 0.001007276466879; proton molar mass [kg mol^{-1}] uncertainty=0.000 000 000 091 e-3. proton_muon_mass_ratio; 8.88024338; proton-muon mass ratio [] uncertainty=0.000 000 20. proton_neutron_mag_mom_ratio; -1.45989805; proton-neutron mag. mom. ratio [] uncertainty=0.000 000 34. proton_neutron_mass_ratio; 0.99862347844; proton-neutron mass ratio [] uncertainty=0.000 000 000 51. proton_rms_charge_radius; 8.751E-16; proton rms charge radius [m] uncertainty=0.0061 e-15. proton_tau_mass_ratio; 0.528063; proton-tau mass ratio [] uncertainty=0.000 048. quantum_of_circulation; 0.00036369475486; quantum of circulation [m^2 s^{-1}] uncertainty=0.000 000 0017 e-4. quantum_of_circulation_times_2; 0.00072738950972; quantum of circulation times 2 [m^2 s^{-1}] uncertainty=0.000 000 0033 e-4. Rydberg_constant; 10973731.568508; Rydberg constant [m^{-1}] uncer,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:30987,Energy Efficiency,charge,charge,30987," magneton ratio [] uncertainty=0.000 000 0085. proton_mag_shielding_correction; 0.000025691; proton mag. shielding correction [] uncertainty=0.011 e-6. proton_mass; 1.672621898E-27; proton mass [kg] uncertainty=0.000 000 021 e-27. proton_mass_energy_equivalent; 1.503277593E-10; proton mass energy equivalent [J] uncertainty=0.000 000 018 e-10. proton_mass_energy_equivalent_in_MeV; 938.2720813; proton mass energy equivalent in MeV [MeV] uncertainty=0.000 0058. proton_mass_in_u; 1.007276466879; proton mass in u [u] uncertainty=0.000 000 000 091. proton_molar_mass; 0.001007276466879; proton molar mass [kg mol^{-1}] uncertainty=0.000 000 000 091 e-3. proton_muon_mass_ratio; 8.88024338; proton-muon mass ratio [] uncertainty=0.000 000 20. proton_neutron_mag_mom_ratio; -1.45989805; proton-neutron mag. mom. ratio [] uncertainty=0.000 000 34. proton_neutron_mass_ratio; 0.99862347844; proton-neutron mass ratio [] uncertainty=0.000 000 000 51. proton_rms_charge_radius; 8.751E-16; proton rms charge radius [m] uncertainty=0.0061 e-15. proton_tau_mass_ratio; 0.528063; proton-tau mass ratio [] uncertainty=0.000 048. quantum_of_circulation; 0.00036369475486; quantum of circulation [m^2 s^{-1}] uncertainty=0.000 000 0017 e-4. quantum_of_circulation_times_2; 0.00072738950972; quantum of circulation times 2 [m^2 s^{-1}] uncertainty=0.000 000 0033 e-4. Rydberg_constant; 10973731.568508; Rydberg constant [m^{-1}] uncertainty=0.000 065. Rydberg_constant_times_c_in_Hz; 3.289841960355E+15; Rydberg constant times c in Hz [Hz] uncertainty=0.000 000 000 019 e15. Rydberg_constant_times_hc_in_eV; 13.605693009; Rydberg constant times hc in eV [eV] uncertainty=0.000 000 084. Rydberg_constant_times_hc_in_J; 2.179872325E-18; Rydberg constant times hc in J [J] uncertainty=0.000 000 027 e-18. Sackur_Tetrode_constant_1_K_100_kPa; -1.1517084; Sackur-Tetrode constant (1 K, 100 kPa) [] uncertainty=0.000 0014. Sackur_Tetrode_constant_1_K_101325_kPa; -1.1648714; Sackur-Tetrode constant (1 K, 101.325 kPa) []",MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:34586,Energy Efficiency,energy,energy,34586,m_to_nuclear_magneton_ratio; 2.792775600; shielded proton mag. mom. to nuclear magneton ratio [] uncertainty=0.000 000 030. speed_of_light_in_vacuum; 299792458; speed of light in vacuum [m s^{-1}] uncertainty=(exact). standard_acceleration_of_gravity; 9.80665; standard acceleration of gravity [m s^{-2}] uncertainty=(exact). standard_atmosphere; 101325; standard atmosphere [Pa] uncertainty=(exact). standard_state_pressure; 100000; standard-state pressure [Pa] uncertainty=(exact). Stefan_Boltzmann_constant; 5.670367E-8; Stefan-Boltzmann constant [W m^{-2} K^{-4}] uncertainty=0.000 013 e-8. tau_Compton_wavelength; 6.97787E-16; tau Compton wavelength [m] uncertainty=0.000 063 e-15. tau_Compton_wavelength_over_2_pi; 1.11056E-16; tau Compton wavelength over 2 pi [m] uncertainty=0.000 010 e-15. tau_electron_mass_ratio; 3477.15; tau-electron mass ratio [] uncertainty=0.31. tau_mass; 3.16747E-27; tau mass [kg] uncertainty=0.000 29 e-27. tau_mass_energy_equivalent; 2.84678E-10; tau mass energy equivalent [J] uncertainty=0.000 26 e-10. tau_mass_energy_equivalent_in_MeV; 1776.82; tau mass energy equivalent in MeV [MeV] uncertainty=0.16. tau_mass_in_u; 1.90749; tau mass in u [u] uncertainty=0.000 17. tau_molar_mass; 0.00190749; tau molar mass [kg mol^{-1}] uncertainty=0.000 17 e-3. tau_muon_mass_ratio; 16.8167; tau-muon mass ratio [] uncertainty=0.0015. tau_neutron_mass_ratio; 1.89111; tau-neutron mass ratio [] uncertainty=0.000 17. tau_proton_mass_ratio; 1.89372; tau-proton mass ratio [] uncertainty=0.000 17. Thomson_cross_section; 6.6524587158E-29; Thomson cross section [m^2] uncertainty=0.000 000 000 91 e-28. triton_electron_mass_ratio; 5496.92153588; triton-electron mass ratio [] uncertainty=0.000 000 26. triton_g_factor; 5.957924920; triton g factor [] uncertainty=0.000 000 028. triton_mag_mom; 1.504609503E-26; triton mag. mom. [J T^{-1}] uncertainty=0.000 000 012 e-26. triton_mag_mom_to_Bohr_magneton_ratio; 0.0016223936616; triton mag. mom. to Bohr magneton ratio [] uncert,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:34688,Energy Efficiency,energy,energy,34688,.000 000 030. speed_of_light_in_vacuum; 299792458; speed of light in vacuum [m s^{-1}] uncertainty=(exact). standard_acceleration_of_gravity; 9.80665; standard acceleration of gravity [m s^{-2}] uncertainty=(exact). standard_atmosphere; 101325; standard atmosphere [Pa] uncertainty=(exact). standard_state_pressure; 100000; standard-state pressure [Pa] uncertainty=(exact). Stefan_Boltzmann_constant; 5.670367E-8; Stefan-Boltzmann constant [W m^{-2} K^{-4}] uncertainty=0.000 013 e-8. tau_Compton_wavelength; 6.97787E-16; tau Compton wavelength [m] uncertainty=0.000 063 e-15. tau_Compton_wavelength_over_2_pi; 1.11056E-16; tau Compton wavelength over 2 pi [m] uncertainty=0.000 010 e-15. tau_electron_mass_ratio; 3477.15; tau-electron mass ratio [] uncertainty=0.31. tau_mass; 3.16747E-27; tau mass [kg] uncertainty=0.000 29 e-27. tau_mass_energy_equivalent; 2.84678E-10; tau mass energy equivalent [J] uncertainty=0.000 26 e-10. tau_mass_energy_equivalent_in_MeV; 1776.82; tau mass energy equivalent in MeV [MeV] uncertainty=0.16. tau_mass_in_u; 1.90749; tau mass in u [u] uncertainty=0.000 17. tau_molar_mass; 0.00190749; tau molar mass [kg mol^{-1}] uncertainty=0.000 17 e-3. tau_muon_mass_ratio; 16.8167; tau-muon mass ratio [] uncertainty=0.0015. tau_neutron_mass_ratio; 1.89111; tau-neutron mass ratio [] uncertainty=0.000 17. tau_proton_mass_ratio; 1.89372; tau-proton mass ratio [] uncertainty=0.000 17. Thomson_cross_section; 6.6524587158E-29; Thomson cross section [m^2] uncertainty=0.000 000 000 91 e-28. triton_electron_mass_ratio; 5496.92153588; triton-electron mass ratio [] uncertainty=0.000 000 26. triton_g_factor; 5.957924920; triton g factor [] uncertainty=0.000 000 028. triton_mag_mom; 1.504609503E-26; triton mag. mom. [J T^{-1}] uncertainty=0.000 000 012 e-26. triton_mag_mom_to_Bohr_magneton_ratio; 0.0016223936616; triton mag. mom. to Bohr magneton ratio [] uncertainty=0.000 000 0076 e-3. triton_mag_mom_to_nuclear_magneton_ratio; 2.978962460; triton mag. mom. to nuclear m,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:35887,Energy Efficiency,energy,energy,35887,n_mass_ratio; 16.8167; tau-muon mass ratio [] uncertainty=0.0015. tau_neutron_mass_ratio; 1.89111; tau-neutron mass ratio [] uncertainty=0.000 17. tau_proton_mass_ratio; 1.89372; tau-proton mass ratio [] uncertainty=0.000 17. Thomson_cross_section; 6.6524587158E-29; Thomson cross section [m^2] uncertainty=0.000 000 000 91 e-28. triton_electron_mass_ratio; 5496.92153588; triton-electron mass ratio [] uncertainty=0.000 000 26. triton_g_factor; 5.957924920; triton g factor [] uncertainty=0.000 000 028. triton_mag_mom; 1.504609503E-26; triton mag. mom. [J T^{-1}] uncertainty=0.000 000 012 e-26. triton_mag_mom_to_Bohr_magneton_ratio; 0.0016223936616; triton mag. mom. to Bohr magneton ratio [] uncertainty=0.000 000 0076 e-3. triton_mag_mom_to_nuclear_magneton_ratio; 2.978962460; triton mag. mom. to nuclear magneton ratio [] uncertainty=0.000 000 014. triton_mass; 5.007356665E-27; triton mass [kg] uncertainty=0.000 000 062 e-27. triton_mass_energy_equivalent; 4.500387735E-10; triton mass energy equivalent [J] uncertainty=0.000 000 055 e-10. triton_mass_energy_equivalent_in_MeV; 2808.921112; triton mass energy equivalent in MeV [MeV] uncertainty=0.000 017. triton_mass_in_u; 3.01550071632; triton mass in u [u] uncertainty=0.000 000 000 11. triton_molar_mass; 0.00301550071632; triton molar mass [kg mol^{-1}] uncertainty=0.000 000 000 11 e-3. triton_proton_mass_ratio; 2.99371703348; triton-proton mass ratio [] uncertainty=0.000 000 000 22. unified_atomic_mass_unit; 1.660539040E-27; unified atomic mass unit [kg] uncertainty=0.000 000 020 e-27. von_Klitzing_constant; 25812.8074555; von Klitzing constant [ohm] uncertainty=0.000 0059. weak_mixing_angle; 0.2223; weak mixing angle [] uncertainty=0.0021. Wien_frequency_displacement_law_constant; 5.8789238E+10; Wien frequency displacement law constant [Hz K^{-1}] uncertainty=0.000 0034 e10. Wien_wavelength_displacement_law_constant; 0.0028977729; Wien wavelength displacement law constant [m K] uncertainty=0.000 0017 e-3. calorie_joule_,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:36004,Energy Efficiency,energy,energy,36004,uncertainty=0.000 17. tau_proton_mass_ratio; 1.89372; tau-proton mass ratio [] uncertainty=0.000 17. Thomson_cross_section; 6.6524587158E-29; Thomson cross section [m^2] uncertainty=0.000 000 000 91 e-28. triton_electron_mass_ratio; 5496.92153588; triton-electron mass ratio [] uncertainty=0.000 000 26. triton_g_factor; 5.957924920; triton g factor [] uncertainty=0.000 000 028. triton_mag_mom; 1.504609503E-26; triton mag. mom. [J T^{-1}] uncertainty=0.000 000 012 e-26. triton_mag_mom_to_Bohr_magneton_ratio; 0.0016223936616; triton mag. mom. to Bohr magneton ratio [] uncertainty=0.000 000 0076 e-3. triton_mag_mom_to_nuclear_magneton_ratio; 2.978962460; triton mag. mom. to nuclear magneton ratio [] uncertainty=0.000 000 014. triton_mass; 5.007356665E-27; triton mass [kg] uncertainty=0.000 000 062 e-27. triton_mass_energy_equivalent; 4.500387735E-10; triton mass energy equivalent [J] uncertainty=0.000 000 055 e-10. triton_mass_energy_equivalent_in_MeV; 2808.921112; triton mass energy equivalent in MeV [MeV] uncertainty=0.000 017. triton_mass_in_u; 3.01550071632; triton mass in u [u] uncertainty=0.000 000 000 11. triton_molar_mass; 0.00301550071632; triton molar mass [kg mol^{-1}] uncertainty=0.000 000 000 11 e-3. triton_proton_mass_ratio; 2.99371703348; triton-proton mass ratio [] uncertainty=0.000 000 000 22. unified_atomic_mass_unit; 1.660539040E-27; unified atomic mass unit [kg] uncertainty=0.000 000 020 e-27. von_Klitzing_constant; 25812.8074555; von Klitzing constant [ohm] uncertainty=0.000 0059. weak_mixing_angle; 0.2223; weak mixing angle [] uncertainty=0.0021. Wien_frequency_displacement_law_constant; 5.8789238E+10; Wien frequency displacement law constant [Hz K^{-1}] uncertainty=0.000 0034 e10. Wien_wavelength_displacement_law_constant; 0.0028977729; Wien wavelength displacement law constant [m K] uncertainty=0.000 0017 e-3. calorie_joule_relationship; 4.184; calorie-joule relationship [J] uncertainty=(exact). h; 6.626070040E-34; h [J] The Planck constant (Js). ,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:36921,Energy Efficiency,joule,joule,36921,-10. triton_mass_energy_equivalent_in_MeV; 2808.921112; triton mass energy equivalent in MeV [MeV] uncertainty=0.000 017. triton_mass_in_u; 3.01550071632; triton mass in u [u] uncertainty=0.000 000 000 11. triton_molar_mass; 0.00301550071632; triton molar mass [kg mol^{-1}] uncertainty=0.000 000 000 11 e-3. triton_proton_mass_ratio; 2.99371703348; triton-proton mass ratio [] uncertainty=0.000 000 000 22. unified_atomic_mass_unit; 1.660539040E-27; unified atomic mass unit [kg] uncertainty=0.000 000 020 e-27. von_Klitzing_constant; 25812.8074555; von Klitzing constant [ohm] uncertainty=0.000 0059. weak_mixing_angle; 0.2223; weak mixing angle [] uncertainty=0.0021. Wien_frequency_displacement_law_constant; 5.8789238E+10; Wien frequency displacement law constant [Hz K^{-1}] uncertainty=0.000 0034 e10. Wien_wavelength_displacement_law_constant; 0.0028977729; Wien wavelength displacement law constant [m K] uncertainty=0.000 0017 e-3. calorie_joule_relationship; 4.184; calorie-joule relationship [J] uncertainty=(exact). h; 6.626070040E-34; h [J] The Planck constant (Js). c; 299792458; c [Hz] Speed of light (ms$^{-1}$). kb; 1.38064852E-23; kb [J] The Boltzmann constant (JK$^{-1}$). R; 8.3144598; R [J mol^-1 K^-1] Universal gas constant (JK$^{-1}$mol$^{-1}$). bohr2angstroms; 0.52917721067; bohr2angstroms [AA] Bohr to Angstroms conversion factor. bohr2m; 5.2917721067E-11; bohr2m [m] Bohr to meters conversion factor. bohr2cm; 5.291772106700E-9; bohr2cm [cm] Bohr to centimeters conversion factor. amu2g; 1.660539040000E-24; amu2g [g] Atomic mass units to grams conversion factor. amu2kg; 1.660539040E-27; amu2kg [kg] Atomic mass units to kg conversion factor. au2amu; 0.000548579909070; au2amu [u] Atomic units (m$@@e$) to atomic mass units conversion factor. hartree2J; 4.359744650E-18; hartree2J [J] Hartree to joule conversion factor. hartree2aJ; 4.359744650; hartree2aJ [aJ] Hartree to attojoule (10$^{-18}$J) conversion factor. cal2J; 4.184; cal2J [J] Calorie to joule conversion fa,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:37340,Energy Efficiency,meter,meters,37340, 000 22. unified_atomic_mass_unit; 1.660539040E-27; unified atomic mass unit [kg] uncertainty=0.000 000 020 e-27. von_Klitzing_constant; 25812.8074555; von Klitzing constant [ohm] uncertainty=0.000 0059. weak_mixing_angle; 0.2223; weak mixing angle [] uncertainty=0.0021. Wien_frequency_displacement_law_constant; 5.8789238E+10; Wien frequency displacement law constant [Hz K^{-1}] uncertainty=0.000 0034 e10. Wien_wavelength_displacement_law_constant; 0.0028977729; Wien wavelength displacement law constant [m K] uncertainty=0.000 0017 e-3. calorie_joule_relationship; 4.184; calorie-joule relationship [J] uncertainty=(exact). h; 6.626070040E-34; h [J] The Planck constant (Js). c; 299792458; c [Hz] Speed of light (ms$^{-1}$). kb; 1.38064852E-23; kb [J] The Boltzmann constant (JK$^{-1}$). R; 8.3144598; R [J mol^-1 K^-1] Universal gas constant (JK$^{-1}$mol$^{-1}$). bohr2angstroms; 0.52917721067; bohr2angstroms [AA] Bohr to Angstroms conversion factor. bohr2m; 5.2917721067E-11; bohr2m [m] Bohr to meters conversion factor. bohr2cm; 5.291772106700E-9; bohr2cm [cm] Bohr to centimeters conversion factor. amu2g; 1.660539040000E-24; amu2g [g] Atomic mass units to grams conversion factor. amu2kg; 1.660539040E-27; amu2kg [kg] Atomic mass units to kg conversion factor. au2amu; 0.000548579909070; au2amu [u] Atomic units (m$@@e$) to atomic mass units conversion factor. hartree2J; 4.359744650E-18; hartree2J [J] Hartree to joule conversion factor. hartree2aJ; 4.359744650; hartree2aJ [aJ] Hartree to attojoule (10$^{-18}$J) conversion factor. cal2J; 4.184; cal2J [J] Calorie to joule conversion factor. dipmom_au2si; 8.478353552E-30; dipmom_au2si [C m] Atomic units to SI units (Cm) conversion factor for dipoles. dipmom_au2debye; 2.541746451895025916414946904; dipmom_au2debye [???] Atomic units to Debye conversion factor for dipoles. dipmom_debye2si; 3.335640951E-30; dipmom_debye2si [???] Debye to SI units (Cm) conversion factor for dipoles. c_au; 137.035999139; c_au [] Speed of light in at,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:37762,Energy Efficiency,joule,joule,37762,length_displacement_law_constant; 0.0028977729; Wien wavelength displacement law constant [m K] uncertainty=0.000 0017 e-3. calorie_joule_relationship; 4.184; calorie-joule relationship [J] uncertainty=(exact). h; 6.626070040E-34; h [J] The Planck constant (Js). c; 299792458; c [Hz] Speed of light (ms$^{-1}$). kb; 1.38064852E-23; kb [J] The Boltzmann constant (JK$^{-1}$). R; 8.3144598; R [J mol^-1 K^-1] Universal gas constant (JK$^{-1}$mol$^{-1}$). bohr2angstroms; 0.52917721067; bohr2angstroms [AA] Bohr to Angstroms conversion factor. bohr2m; 5.2917721067E-11; bohr2m [m] Bohr to meters conversion factor. bohr2cm; 5.291772106700E-9; bohr2cm [cm] Bohr to centimeters conversion factor. amu2g; 1.660539040000E-24; amu2g [g] Atomic mass units to grams conversion factor. amu2kg; 1.660539040E-27; amu2kg [kg] Atomic mass units to kg conversion factor. au2amu; 0.000548579909070; au2amu [u] Atomic units (m$@@e$) to atomic mass units conversion factor. hartree2J; 4.359744650E-18; hartree2J [J] Hartree to joule conversion factor. hartree2aJ; 4.359744650; hartree2aJ [aJ] Hartree to attojoule (10$^{-18}$J) conversion factor. cal2J; 4.184; cal2J [J] Calorie to joule conversion factor. dipmom_au2si; 8.478353552E-30; dipmom_au2si [C m] Atomic units to SI units (Cm) conversion factor for dipoles. dipmom_au2debye; 2.541746451895025916414946904; dipmom_au2debye [???] Atomic units to Debye conversion factor for dipoles. dipmom_debye2si; 3.335640951E-30; dipmom_debye2si [???] Debye to SI units (Cm) conversion factor for dipoles. c_au; 137.035999139; c_au [] Speed of light in atomic units. hartree2ev; 27.21138602; hartree2ev [eV] Hartree to eV conversion factor. hartree2wavenumbers; 219474.6313702; hartree2wavenumbers [cm^-1] Hartree to cm$^{-1}$ conversion factor. hartree2kcalmol; 627.5094737775374055927342256; hartree2kcalmol [kcal mol^-1] Hartree to kcal mol$^{-1}$ conversion factor. hartree2kJmol; 2625.4996382852165050; hartree2kJmol [kJ mol^-1] Hartree to kilojoule mol$^{-1}$ conversi,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:37917,Energy Efficiency,joule,joule,37917,orie-joule relationship [J] uncertainty=(exact). h; 6.626070040E-34; h [J] The Planck constant (Js). c; 299792458; c [Hz] Speed of light (ms$^{-1}$). kb; 1.38064852E-23; kb [J] The Boltzmann constant (JK$^{-1}$). R; 8.3144598; R [J mol^-1 K^-1] Universal gas constant (JK$^{-1}$mol$^{-1}$). bohr2angstroms; 0.52917721067; bohr2angstroms [AA] Bohr to Angstroms conversion factor. bohr2m; 5.2917721067E-11; bohr2m [m] Bohr to meters conversion factor. bohr2cm; 5.291772106700E-9; bohr2cm [cm] Bohr to centimeters conversion factor. amu2g; 1.660539040000E-24; amu2g [g] Atomic mass units to grams conversion factor. amu2kg; 1.660539040E-27; amu2kg [kg] Atomic mass units to kg conversion factor. au2amu; 0.000548579909070; au2amu [u] Atomic units (m$@@e$) to atomic mass units conversion factor. hartree2J; 4.359744650E-18; hartree2J [J] Hartree to joule conversion factor. hartree2aJ; 4.359744650; hartree2aJ [aJ] Hartree to attojoule (10$^{-18}$J) conversion factor. cal2J; 4.184; cal2J [J] Calorie to joule conversion factor. dipmom_au2si; 8.478353552E-30; dipmom_au2si [C m] Atomic units to SI units (Cm) conversion factor for dipoles. dipmom_au2debye; 2.541746451895025916414946904; dipmom_au2debye [???] Atomic units to Debye conversion factor for dipoles. dipmom_debye2si; 3.335640951E-30; dipmom_debye2si [???] Debye to SI units (Cm) conversion factor for dipoles. c_au; 137.035999139; c_au [] Speed of light in atomic units. hartree2ev; 27.21138602; hartree2ev [eV] Hartree to eV conversion factor. hartree2wavenumbers; 219474.6313702; hartree2wavenumbers [cm^-1] Hartree to cm$^{-1}$ conversion factor. hartree2kcalmol; 627.5094737775374055927342256; hartree2kcalmol [kcal mol^-1] Hartree to kcal mol$^{-1}$ conversion factor. hartree2kJmol; 2625.4996382852165050; hartree2kJmol [kJ mol^-1] Hartree to kilojoule mol$^{-1}$ conversion factor. hartree2MHz; 6579683920.711; hartree2MHz [MHz] Hartree to MHz conversion factor. kcalmol2wavenumbers; 349.7550882318031839256652313; kcalmol2wavenumber,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_physconst.html:13332,Modifiability,coupling,coupling,13332, e14. electron_volt_inverse_meter_relationship; 806554.4005; electron volt-inverse meter relationship [m^{-1}] uncertainty=0.000 000 050 e5. electron_volt_joule_relationship; 1.6021766208E-19; electron volt-joule relationship [J] uncertainty=0.000 000 0098 e-19. electron_volt_kelvin_relationship; 11604.5221; electron volt-kelvin relationship [K] uncertainty=0.000 000 67 e4. electron_volt_kilogram_relationship; 1.782661907E-36; electron volt-kilogram relationship [kg] uncertainty=0.000 000 011 e-36. elementary_charge; 1.6021766208E-19; elementary charge [C] uncertainty=0.000 000 0098 e-19. elementary_charge_over_h; 2.417989262E+14; elementary charge over h [A J^{-1}] uncertainty=0.000 000 015 e14. Faraday_constant; 96485.33289; Faraday constant [C mol^{-1}] uncertainty=0.000 59. Faraday_constant_for_conventional_electric_current; 96485.3251; Faraday constant for conventional electric current [C_{90} mol^{-1}] uncertainty=0.0012. Fermi_coupling_constant; 0.000011663787; Fermi coupling constant [GeV^{-2}] uncertainty=0.000 0006 e-5. fine_structure_constant; 0.0072973525664; fine-structure constant [] uncertainty=0.000 000 0017 e-3. first_radiation_constant; 3.741771790E-16; first radiation constant [W m^2] uncertainty=0.000 000 046 e-16. first_radiation_constant_for_spectral_radiance; 1.191042953E-16; first radiation constant for spectral radiance [W m^2 sr^{-1}] uncertainty=0.000 000 015 e-16. hartree_atomic_mass_unit_relationship; 2.9212623197E-8; hartree-atomic mass unit relationship [u] uncertainty=0.000 000 0013 e-8. hartree_electron_volt_relationship; 27.21138602; hartree-electron volt relationship [eV] uncertainty=0.000 000 17. Hartree_energy; 4.359744650E-18; Hartree energy [J] uncertainty=0.000 000 054 e-18. Hartree_energy_in_eV; 27.21138602; Hartree energy in eV [eV] uncertainty=0.000 000 17. hartree_hertz_relationship; 6.579683920711E+15; hartree-hertz relationship [Hz] uncertainty=0.000 000 000 039 e15. hartree_inverse_meter_relationship; 21947463.13702; har,MatchSource.WIKI,psi4manual/master/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_physconst.html
https://psicode.org/psi4manual/master/autodoc_psi4bases.html:149,Availability,avail,availability,149,﻿. <no title>. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Basis Sets by Element; <no title>. Basis set availability by element in PSI4¶. Basis Set; PUREAM; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe; Cs; Ba; La; Hf; Ta; W; Re; Os; Ir; Pt; Au; Hg; Tl; Pb; Bi; Po; At; Rn. Pople. sto-3g; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I. 3-21g; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe; Cs. 6-31gs; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr. 6-31g; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr. 6-31g_d_p_; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr. 6-31gss; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr. 6-31g_d_; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr. 6-31pg_d_; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca. 6-31pg; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca. 6-31pg_d_p_; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca. 6-31ppgs; 6D/10F; H. Li; Be; B; C; N; O; F; Ne; Na; Mg,MatchSource.WIKI,psi4manual/master/autodoc_psi4bases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_psi4bases.html
https://psicode.org/psi4manual/master/autodoc_psi4bases.html:59548,Deployability,update,updated,59548," Re; Os; Ir; Pt; Au; Hg; Tl; Pb; Bi; Po; At; Rn. 5zapa-nr; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar. lanl2dz; 6D/10F; H. Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe; Cs; Ba; La; Hf; Ta; W; Re; Os; Ir; Pt; Au; Hg; Tl; Pb; Bi. dgauss-dzvp-autoabs; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe. 7zapa-nr; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne. Mg; Al; Si; P; S; Cl; Ar. cfour-qz2p; 5D/7F; H. B; C; N; O; F. Si; P; S; Cl. 6zapa-nr; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar. psi3-tz2pf; 6D/10F; H. B; C; N; O; F. Al; Si; P; S; Cl. roos-ano-tz; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar. Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn. 3zapa-nr; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar. psi3-tz2p; 6D/10F; H. B; C; N; O; F. Al; Si; P; S; Cl. 4zapa-nr; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar. pe_ecp; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar. sto-6g; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe. sadlej-lpol-dl; 5D/7F; H. C; N; O; F. dz; 6D/10F; H. Li. B; C; N; O; F; Ne. Al; Si; P; S; Cl. 2zapa-nr; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Basis Sets by Element; <no title>. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_psi4bases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_psi4bases.html
https://psicode.org/psi4manual/master/autodoc_psifiles.html:5292,Availability,error,error,5292,3B_SAPT_TRIMER; SAPT Three-Body Trimer. 221; PSIF_3B_SAPT_DIMER_AB; SAPT Three-Body Dimer AB. 222; PSIF_3B_SAPT_DIMER_AC; SAPT Three-Body Dimer AC. 223; PSIF_3B_SAPT_DIMER_BC; SAPT Three-Body Dimer BC. 224; PSIF_3B_SAPT_MONOMER_A; SAPT Three-Body Mon A. 225; PSIF_3B_SAPT_MONOMER_B; SAPT Three-Body Mon B. 226; PSIF_3B_SAPT_MONOMER_C; SAPT Three-Body Mon C. 227; PSIF_3B_SAPT_AA_DF_INTS. 228; PSIF_3B_SAPT_BB_DF_INTS. 229; PSIF_3B_SAPT_CC_DF_INTS. 230; PSIF_3B_SAPT_AMPS. 250; PSIF_DCC_IJAK; CEPA/CC (ij|ak). 251; PSIF_DCC_IJAK2; CEPA/CC (ij|ak). 252; PSIF_DCC_ABCI; CEPA/CC (ia|bc). 253; PSIF_DCC_ABCI2; CEPA/CC (ia|bc). 254; PSIF_DCC_ABCI3; CEPA/CC (ia|bc). 255; PSIF_DCC_ABCI4; CEPA/CC (ia|bc). 256; PSIF_DCC_ABCI5; CEPA/CC (ia|bc). 257; PSIF_DCC_ABCD1; CEPA/CC (ab|cd)+. 258; PSIF_DCC_ABCD2; CEPA/CC (ab|cd)-. 259; PSIF_DCC_IJAB; CEPA/CC (ij|ab). 260; PSIF_DCC_IAJB; CEPA/CC (ia|jb). 261; PSIF_DCC_IJKL; CEPA/CC (ij|kl). 262; PSIF_DCC_OVEC; CEPA/CC old vectors for diis. 263; PSIF_DCC_EVEC; CEPA/CC error vectors for diis. 264; PSIF_DCC_R2; CEPA/CC residual. 265; PSIF_DCC_TEMP; CEPA/CC temporary storage. 266; PSIF_DCC_T2; CEPA/CC t2 amplitudes. 267; PSIF_DCC_QSO; DFCC 3-index integrals. 270; PSIF_DCC_SORT_START; CEPA/CC integral sort starting file number. 271; PSIF_SAPT_CCD; SAPT2+ CCD Utility File. 272; PSIF_HESS; Hessian Utility File. 273; PSIF_OCC_DPD; OCC DPD. 274; PSIF_OCC_DENSITY; OCC Density. 275; PSIF_OCC_IABC; OCC out-of-core <IA|BC>. 276; PSIF_DFOCC_INTS; DFOCC Integrals. 277; PSIF_DFOCC_AMPS; DFOCC Amplitudes. 278; PSIF_DFOCC_DENS; DFOCC PDMs. 279; PSIF_DFOCC_IABC; DFOCC (IA|BC). 280; PSIF_DFOCC_ABIC; DFOCC <AB|IC>. 281; PSIF_DFOCC_MIABC; DFOCC M_iabc. 282; PSIF_DFOCC_TEMP; DFOCC temporary storage. 283; PSIF_DFOCC_IABC_AAAA; DFOCC <IA||BC>. 284; PSIF_DFOCC_IJAB_AAAA; DFOCC <IJ||AB>. 285; PSIF_DFOCC_IABC_BBBB; DFOCC <ia||bc>. 286; PSIF_DFOCC_IJAB_BBBB; DFOCC <ij||ab>. 287; PSIF_DFOCC_IABC_BABA; DFOCC <iA|bC>. 288; PSIF_DFOCC_IABC_ABAB; DFOCC <Ia|Bc>. 289; PSIF_DFOCC_I,MatchSource.WIKI,psi4manual/master/autodoc_psifiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_psifiles.html
https://psicode.org/psi4manual/master/autodoc_psifiles.html:6977,Deployability,update,updated,6977,"b|cd)+. 258; PSIF_DCC_ABCD2; CEPA/CC (ab|cd)-. 259; PSIF_DCC_IJAB; CEPA/CC (ij|ab). 260; PSIF_DCC_IAJB; CEPA/CC (ia|jb). 261; PSIF_DCC_IJKL; CEPA/CC (ij|kl). 262; PSIF_DCC_OVEC; CEPA/CC old vectors for diis. 263; PSIF_DCC_EVEC; CEPA/CC error vectors for diis. 264; PSIF_DCC_R2; CEPA/CC residual. 265; PSIF_DCC_TEMP; CEPA/CC temporary storage. 266; PSIF_DCC_T2; CEPA/CC t2 amplitudes. 267; PSIF_DCC_QSO; DFCC 3-index integrals. 270; PSIF_DCC_SORT_START; CEPA/CC integral sort starting file number. 271; PSIF_SAPT_CCD; SAPT2+ CCD Utility File. 272; PSIF_HESS; Hessian Utility File. 273; PSIF_OCC_DPD; OCC DPD. 274; PSIF_OCC_DENSITY; OCC Density. 275; PSIF_OCC_IABC; OCC out-of-core <IA|BC>. 276; PSIF_DFOCC_INTS; DFOCC Integrals. 277; PSIF_DFOCC_AMPS; DFOCC Amplitudes. 278; PSIF_DFOCC_DENS; DFOCC PDMs. 279; PSIF_DFOCC_IABC; DFOCC (IA|BC). 280; PSIF_DFOCC_ABIC; DFOCC <AB|IC>. 281; PSIF_DFOCC_MIABC; DFOCC M_iabc. 282; PSIF_DFOCC_TEMP; DFOCC temporary storage. 283; PSIF_DFOCC_IABC_AAAA; DFOCC <IA||BC>. 284; PSIF_DFOCC_IJAB_AAAA; DFOCC <IJ||AB>. 285; PSIF_DFOCC_IABC_BBBB; DFOCC <ia||bc>. 286; PSIF_DFOCC_IJAB_BBBB; DFOCC <ij||ab>. 287; PSIF_DFOCC_IABC_BABA; DFOCC <iA|bC>. 288; PSIF_DFOCC_IABC_ABAB; DFOCC <Ia|Bc>. 289; PSIF_DFOCC_IJAB_ABAB; DFOCC <Ij|Ab>. 290; PSIF_DFOCC_MIABC_AAAA; DFOCC M_IABC. 291; PSIF_DFOCC_MIABC_BBBB; DFOCC M_iabc. 292; PSIF_DFOCC_MIABC_AABB; DFOCC M_IAbc. 293; PSIF_DFOCC_MIABC_BBAA; DFOCC M_iaBC. 300; PSIF_SAD; A SAD file (File for SAD related quantities. 350; PSIF_CI_HD_FILE; DETCI H diagonal. 351; PSIF_CI_C_FILE; DETCI CI coeffs. 352; PSIF_CI_S_FILE; DETCI sigma coeffs. 353; PSIF_CI_D_FILE; DETCI D correction vectors. 400; PSIF_DCT_DPD; DCT DPD handle. 401; PSIF_DCT_DENSITY; DCT density. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; PSIOH Intermediate Files. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_psifiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_psifiles.html
https://psicode.org/psi4manual/master/autodoc_psifiles.html:3190,Integrability,contract,contractions,3190,"PSIF_CC_OEI_NEW. 114; PSIF_CC_GAMMA_NEW. 115; PSIF_CC_AINTS_NEW. 116; PSIF_CC_BINTS_NEW. 117; PSIF_CC_CINTS_NEW. 118; PSIF_CC_DINTS_NEW. 119; PSIF_CC_EINTS_NEW. 120; PSIF_CC_FINTS_NEW. 121; PSIF_CC_LAMBDA. 122; PSIF_CC_RAMPS. 123; PSIF_CC_LAMPS. 124; PSIF_CC_LR. 125; PSIF_CC_DIIS_ERR. 126; PSIF_CC_DIIS_AMP. 127; PSIF_CC_TMP. 128; PSIF_CC_TMP0. 129; PSIF_CC_TMP1. 130; PSIF_CC_TMP2. 131; PSIF_CC_TMP3. 132; PSIF_CC_TMP4. 133; PSIF_CC_TMP5. 134; PSIF_CC_TMP6. 135; PSIF_CC_TMP8. 137; PSIF_CC_TMP9. 138; PSIF_CC_TMP10. 139; PSIF_CC_TMP11. 140; PSIF_EOM_D. 141; PSIF_EOM_CME. 142; PSIF_EOM_Cme. 143; PSIF_EOM_CMNEF. 144; PSIF_EOM_Cmnef. 145; PSIF_EOM_CMnEf. 146; PSIF_EOM_SIA. 147; PSIF_EOM_Sia. 148; PSIF_EOM_SIJAB. 149; PSIF_EOM_Sijab. 150; PSIF_EOM_SIjAb. 151; PSIF_EOM_R; holds residual. 152; PSIF_CC_GLG; left-hand psi for g.s. parts of cc-density. 153; PSIF_CC_GL; left-hand psi for e.s. parts of cc-density. 154; PSIF_CC_GR; right-hand eigenvector for cc-density. 155; PSIF_EOM_TMP1; intermediates just for single contractions. 156; PSIF_EOM_TMP0; temporary copies of density. 157; PSIF_EOM_TMP_XI; intermediates for xi computation. 158; PSIF_EOM_XI; xi = dE/dt amplitudes. 159; PSIF_EOM_TMP; intermediates used more than once. 160; PSIF_CC3_HET1; [H,e^T1]. 161; PSIF_CC3_HC1; [H,C1]. 162; PSIF_CC3_HC1ET1; [[H,e^T1],C1]. 163; PSIF_CC3_MISC; various intermediates needed in CC3 codes. 164; PSIF_CC2_HET1; [H,e^T1]. 165; PSIF_WK_PK; File to contain wK pre-sorted integrals for PK. 180; PSIF_SCF_MOS; Save SCF orbitals for re-use later as guess, etc. 181; PSIF_DFMP2_AIA; Unfitted three-index MO ints for DFMP2. 182; PSIF_DFMP2_QIA; Fitted-three index MO ints for DFMP2. 190; PSIF_SAPT_DIMER; SAPT Two-Body Dimer. 191; PSIF_SAPT_MONOMERA; SAPT Two-Body Mon A. 192; PSIF_SAPT_MONOMERB; SAPT Two-Body Mon B. 193; PSIF_SAPT_AA_DF_INTS; SAPT AA DF Ints. 194; PSIF_SAPT_AB_DF_INTS; SAPT AB DF Ints. 195; PSIF_SAPT_BB_DF_INTS; SAPT BB DF Ints. 196; PSIF_SAPT_AMPS; SAPT Amplitudes. 197; PSIF_SAPT_TEMP; ",MatchSource.WIKI,psi4manual/master/autodoc_psifiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_psifiles.html
https://psicode.org/psi4manual/master/autodoc_psifiles.html:266,Performance,optimiz,optimization,266,"﻿. PSIOH Intermediate Files. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; PSIOH Intermediate Files. PSIOH Intermediate Files¶. Auxiliary files in PSI4¶. File; File Label; Contents. 1; PSIF_OPTKING. 11; PSIF_GRAD; geometry optimization, geometry, and gradient; currently is an ASCII file like output.grad. 12; PSIF_INTCO; internal coordinates file, currently is ASCII file like output.intco. 16; PSIF_3INDEX. 33; PSIF_SO_TEI. 34; PSIF_SO_PK. 35; PSIF_OEI. 36; PSIF_SO_ERF_TEI. 37; PSIF_SO_ERFC_TEI. 38; PSIF_SO_R12. 39; PSIF_SO_R12T1. 40; PSIF_DERINFO. 41; PSIF_SO_PRESORT. 43; PSIF_CIVECT; CI vector from DETCI along with string and determinant info. 44; PSIF_AO_DGDBX; B-field derivative AO integrals over GIAO Gaussians – only bra-ket permutational symmetry holds. 45; PSIF_AO_DGDBY. 46; PSIF_AO_DGDBZ. 50; PSIF_PSIMRCC_INTEGRALS. 51; PSIF_PSIMRCC_RESTART. 52; PSIF_MCSCF. 53; PSIF_TPDM_HALFTRANS. 60; PSIF_DETCAS. 61; PSIF_LIBTRANS_DPD; libtrans: All transformed integrals in DPD format are sent here by default. 62; PSIF_LIBTRANS_A_HT; libtrans: Alpha half-transformed integrals in DPD format. 63; PSIF_LIBTRANS_B_HT; libtrans: Beta half-transformed integrals in DPD format. 64; PSIF_LIBDIIS; Storage for libdiis. 71; PSIF_TPDM_PRESORT. 72; PSIF_MO_TEI. 73; PSIF_MO_OPDM. 74; PSIF_MO_TPDM. 75; PSIF_MO_LAG. 76; PSIF_AO_OPDM; PSIF_AO_OPDM also contains AO Lagrangian. 77; PSIF_AO_TPDM. 79; PSIF_MO_R12. 80; PSIF_MO_R12T2. 81; PSIF_MO_AA_TEI. 82; PSIF_MO_BB_TEI. 83; PSIF_MO_AB_TEI. 84; PSIF_MO_AA_TPDM. 85; PSIF_MO_BB_TPDM. 86; PSIF_MO_AB_TPDM. 87; PSIF_AA_PRESORT; AA UHF twopdm presort file. 88; PSIF_BB_PRESORT; BB UHF twopdm presort file. 89; PSIF_AB_PRESORT; AB UHF twopdm presort file. 92; PSIF_SO_PKSUPER1. 93; PSIF_SO_PKSUPER2. 94; PSIF_HALFT0. 95; PSIF_HALFT1. 97; PSIF_DFSCF_BJ; B Matrix containing 3-index tensor in AOs with J^-1/2 for use with DF-SCF. 100; PSIF_CC_INFO. 101; PSIF_CC_OEI. 102; PSIF_CC_AINTS. 103; PSIF_CC_BINTS. 104; PSIF_CC_",MatchSource.WIKI,psi4manual/master/autodoc_psifiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_psifiles.html
https://psicode.org/psi4manual/master/autodoc_psivariables_bymodule.html:657,Deployability,update,updated,657,"﻿. PSI Variables by Module. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; PSI Variables by Module. PSI Variables by Module¶. Note; Lowercase letters in PSI variable names represent variable portions of the name.; See PSI Variables by Alpha for fuller description. ADC; CCENERGY; DCT; DDX; DETCI; DFMP2; DFOCC; DLPNO; DMRG; EFP; FISAPT; FNOCC; GDMA; MCSCF; MRCC; OCC; PCM; PE; PSIMRCC; SAPT; SCF; THERMO; OEPROP; CFOUR. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; PSI Variables by Module. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_psivariables_bymodule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_psivariables_bymodule.html
https://psicode.org/psi4manual/master/autodoc_psivariables_bymodule.html:199,Modifiability,variab,variable,199,"﻿. PSI Variables by Module. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; PSI Variables by Module. PSI Variables by Module¶. Note; Lowercase letters in PSI variable names represent variable portions of the name.; See PSI Variables by Alpha for fuller description. ADC; CCENERGY; DCT; DDX; DETCI; DFMP2; DFOCC; DLPNO; DMRG; EFP; FISAPT; FNOCC; GDMA; MCSCF; MRCC; OCC; PCM; PE; PSIMRCC; SAPT; SCF; THERMO; OEPROP; CFOUR. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; PSI Variables by Module. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_psivariables_bymodule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_psivariables_bymodule.html
https://psicode.org/psi4manual/master/autodoc_psivariables_bymodule.html:224,Modifiability,variab,variable,224,"﻿. PSI Variables by Module. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; PSI Variables by Module. PSI Variables by Module¶. Note; Lowercase letters in PSI variable names represent variable portions of the name.; See PSI Variables by Alpha for fuller description. ADC; CCENERGY; DCT; DDX; DETCI; DFMP2; DFOCC; DLPNO; DMRG; EFP; FISAPT; FNOCC; GDMA; MCSCF; MRCC; OCC; PCM; PE; PSIMRCC; SAPT; SCF; THERMO; OEPROP; CFOUR. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; PSI Variables by Module. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_psivariables_bymodule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_psivariables_bymodule.html
https://psicode.org/psi4manual/master/autodoc_testsuite_brianqc.html:1870,Deployability,update,updated,1870,"﻿. BRIANQC. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. BRIANQC¶. Input File; Description. brianqc/single-point-dft-nlc; Water with sto-3g, lc-vv10 with sg1 grid the vv10 b and c parameters are manually set to also check dft parameter passing through the BrianQC API. brianqc/single-point-hf-rohf; Hydroxyl with sto-3g. brianqc/linear-dependence; Water with modified sto-3g to test linearly-dependent basis. brianqc/frequency-hf-uhf; Hydroxyl with sto-3g frequencies. brianqc/geometry-optimization-hf-rohf; Geometry optimization for hydroxyl with sto-3g. brianqc/frequency-hf; Water with sto-3g frequencies. brianqc/single-point-dft-lrc; Water with sto-3g, wb97x long-range corrected functional with sg1 grid the omega of the functional is manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-hf; Geometry optimization for ethane with sto-3g. brianqc/single-point-dft-uhf; Hydroxyl with sto-3g, b3lyp with sg1 grid. brianqc/pentacene; Pentacene with cc-pvdz, b3lyp with eml(50,110) grid. brianqc/geometry-optimization-dft-lrc; Geometry optimization for ethane with sto-3g, wb97x long-range corrected functional with sg1 grid. brianqc/geometry-optimization-hf-uhf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-dft; Water with sto-3g, b3lyp with sg1 grid. brianqc/high-angular-momentum; Water with cc-pvqz. brianqc/single-point-hf-uhf; Hydroxyl with sto-3g. brianqc/geometry-optimization-dft; Geometry optimization for ethane with sto-3g, b3lyp with sg1 grid. brianqc/single-point-hf; Water with sto-3g. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_brianqc.html
https://psicode.org/psi4manual/master/autodoc_testsuite_brianqc.html:419,Integrability,depend,dependence,419,"﻿. BRIANQC. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. BRIANQC¶. Input File; Description. brianqc/single-point-dft-nlc; Water with sto-3g, lc-vv10 with sg1 grid the vv10 b and c parameters are manually set to also check dft parameter passing through the BrianQC API. brianqc/single-point-hf-rohf; Hydroxyl with sto-3g. brianqc/linear-dependence; Water with modified sto-3g to test linearly-dependent basis. brianqc/frequency-hf-uhf; Hydroxyl with sto-3g frequencies. brianqc/geometry-optimization-hf-rohf; Geometry optimization for hydroxyl with sto-3g. brianqc/frequency-hf; Water with sto-3g frequencies. brianqc/single-point-dft-lrc; Water with sto-3g, wb97x long-range corrected functional with sg1 grid the omega of the functional is manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-hf; Geometry optimization for ethane with sto-3g. brianqc/single-point-dft-uhf; Hydroxyl with sto-3g, b3lyp with sg1 grid. brianqc/pentacene; Pentacene with cc-pvdz, b3lyp with eml(50,110) grid. brianqc/geometry-optimization-dft-lrc; Geometry optimization for ethane with sto-3g, wb97x long-range corrected functional with sg1 grid. brianqc/geometry-optimization-hf-uhf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-dft; Water with sto-3g, b3lyp with sg1 grid. brianqc/high-angular-momentum; Water with cc-pvqz. brianqc/single-point-hf-uhf; Hydroxyl with sto-3g. brianqc/geometry-optimization-dft; Geometry optimization for ethane with sto-3g, b3lyp with sg1 grid. brianqc/single-point-hf; Water with sto-3g. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_brianqc.html
https://psicode.org/psi4manual/master/autodoc_testsuite_brianqc.html:475,Integrability,depend,dependent,475,"﻿. BRIANQC. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. BRIANQC¶. Input File; Description. brianqc/single-point-dft-nlc; Water with sto-3g, lc-vv10 with sg1 grid the vv10 b and c parameters are manually set to also check dft parameter passing through the BrianQC API. brianqc/single-point-hf-rohf; Hydroxyl with sto-3g. brianqc/linear-dependence; Water with modified sto-3g to test linearly-dependent basis. brianqc/frequency-hf-uhf; Hydroxyl with sto-3g frequencies. brianqc/geometry-optimization-hf-rohf; Geometry optimization for hydroxyl with sto-3g. brianqc/frequency-hf; Water with sto-3g frequencies. brianqc/single-point-dft-lrc; Water with sto-3g, wb97x long-range corrected functional with sg1 grid the omega of the functional is manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-hf; Geometry optimization for ethane with sto-3g. brianqc/single-point-dft-uhf; Hydroxyl with sto-3g, b3lyp with sg1 grid. brianqc/pentacene; Pentacene with cc-pvdz, b3lyp with eml(50,110) grid. brianqc/geometry-optimization-dft-lrc; Geometry optimization for ethane with sto-3g, wb97x long-range corrected functional with sg1 grid. brianqc/geometry-optimization-hf-uhf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-dft; Water with sto-3g, b3lyp with sg1 grid. brianqc/high-angular-momentum; Water with cc-pvqz. brianqc/single-point-hf-uhf; Hydroxyl with sto-3g. brianqc/geometry-optimization-dft; Geometry optimization for ethane with sto-3g, b3lyp with sg1 grid. brianqc/single-point-hf; Water with sto-3g. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_brianqc.html
https://psicode.org/psi4manual/master/autodoc_testsuite_brianqc.html:569,Performance,optimiz,optimization-hf-rohf,569,"﻿. BRIANQC. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. BRIANQC¶. Input File; Description. brianqc/single-point-dft-nlc; Water with sto-3g, lc-vv10 with sg1 grid the vv10 b and c parameters are manually set to also check dft parameter passing through the BrianQC API. brianqc/single-point-hf-rohf; Hydroxyl with sto-3g. brianqc/linear-dependence; Water with modified sto-3g to test linearly-dependent basis. brianqc/frequency-hf-uhf; Hydroxyl with sto-3g frequencies. brianqc/geometry-optimization-hf-rohf; Geometry optimization for hydroxyl with sto-3g. brianqc/frequency-hf; Water with sto-3g frequencies. brianqc/single-point-dft-lrc; Water with sto-3g, wb97x long-range corrected functional with sg1 grid the omega of the functional is manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-hf; Geometry optimization for ethane with sto-3g. brianqc/single-point-dft-uhf; Hydroxyl with sto-3g, b3lyp with sg1 grid. brianqc/pentacene; Pentacene with cc-pvdz, b3lyp with eml(50,110) grid. brianqc/geometry-optimization-dft-lrc; Geometry optimization for ethane with sto-3g, wb97x long-range corrected functional with sg1 grid. brianqc/geometry-optimization-hf-uhf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-dft; Water with sto-3g, b3lyp with sg1 grid. brianqc/high-angular-momentum; Water with cc-pvqz. brianqc/single-point-hf-uhf; Hydroxyl with sto-3g. brianqc/geometry-optimization-dft; Geometry optimization for ethane with sto-3g, b3lyp with sg1 grid. brianqc/single-point-hf; Water with sto-3g. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_brianqc.html
https://psicode.org/psi4manual/master/autodoc_testsuite_brianqc.html:600,Performance,optimiz,optimization,600,"﻿. BRIANQC. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. BRIANQC¶. Input File; Description. brianqc/single-point-dft-nlc; Water with sto-3g, lc-vv10 with sg1 grid the vv10 b and c parameters are manually set to also check dft parameter passing through the BrianQC API. brianqc/single-point-hf-rohf; Hydroxyl with sto-3g. brianqc/linear-dependence; Water with modified sto-3g to test linearly-dependent basis. brianqc/frequency-hf-uhf; Hydroxyl with sto-3g frequencies. brianqc/geometry-optimization-hf-rohf; Geometry optimization for hydroxyl with sto-3g. brianqc/frequency-hf; Water with sto-3g frequencies. brianqc/single-point-dft-lrc; Water with sto-3g, wb97x long-range corrected functional with sg1 grid the omega of the functional is manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-hf; Geometry optimization for ethane with sto-3g. brianqc/single-point-dft-uhf; Hydroxyl with sto-3g, b3lyp with sg1 grid. brianqc/pentacene; Pentacene with cc-pvdz, b3lyp with eml(50,110) grid. brianqc/geometry-optimization-dft-lrc; Geometry optimization for ethane with sto-3g, wb97x long-range corrected functional with sg1 grid. brianqc/geometry-optimization-hf-uhf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-dft; Water with sto-3g, b3lyp with sg1 grid. brianqc/high-angular-momentum; Water with cc-pvqz. brianqc/single-point-hf-uhf; Hydroxyl with sto-3g. brianqc/geometry-optimization-dft; Geometry optimization for ethane with sto-3g, b3lyp with sg1 grid. brianqc/single-point-hf; Water with sto-3g. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_brianqc.html
https://psicode.org/psi4manual/master/autodoc_testsuite_brianqc.html:915,Performance,optimiz,optimization-hf,915,"﻿. BRIANQC. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. BRIANQC¶. Input File; Description. brianqc/single-point-dft-nlc; Water with sto-3g, lc-vv10 with sg1 grid the vv10 b and c parameters are manually set to also check dft parameter passing through the BrianQC API. brianqc/single-point-hf-rohf; Hydroxyl with sto-3g. brianqc/linear-dependence; Water with modified sto-3g to test linearly-dependent basis. brianqc/frequency-hf-uhf; Hydroxyl with sto-3g frequencies. brianqc/geometry-optimization-hf-rohf; Geometry optimization for hydroxyl with sto-3g. brianqc/frequency-hf; Water with sto-3g frequencies. brianqc/single-point-dft-lrc; Water with sto-3g, wb97x long-range corrected functional with sg1 grid the omega of the functional is manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-hf; Geometry optimization for ethane with sto-3g. brianqc/single-point-dft-uhf; Hydroxyl with sto-3g, b3lyp with sg1 grid. brianqc/pentacene; Pentacene with cc-pvdz, b3lyp with eml(50,110) grid. brianqc/geometry-optimization-dft-lrc; Geometry optimization for ethane with sto-3g, wb97x long-range corrected functional with sg1 grid. brianqc/geometry-optimization-hf-uhf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-dft; Water with sto-3g, b3lyp with sg1 grid. brianqc/high-angular-momentum; Water with cc-pvqz. brianqc/single-point-hf-uhf; Hydroxyl with sto-3g. brianqc/geometry-optimization-dft; Geometry optimization for ethane with sto-3g, b3lyp with sg1 grid. brianqc/single-point-hf; Water with sto-3g. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_brianqc.html
https://psicode.org/psi4manual/master/autodoc_testsuite_brianqc.html:941,Performance,optimiz,optimization,941,"﻿. BRIANQC. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. BRIANQC¶. Input File; Description. brianqc/single-point-dft-nlc; Water with sto-3g, lc-vv10 with sg1 grid the vv10 b and c parameters are manually set to also check dft parameter passing through the BrianQC API. brianqc/single-point-hf-rohf; Hydroxyl with sto-3g. brianqc/linear-dependence; Water with modified sto-3g to test linearly-dependent basis. brianqc/frequency-hf-uhf; Hydroxyl with sto-3g frequencies. brianqc/geometry-optimization-hf-rohf; Geometry optimization for hydroxyl with sto-3g. brianqc/frequency-hf; Water with sto-3g frequencies. brianqc/single-point-dft-lrc; Water with sto-3g, wb97x long-range corrected functional with sg1 grid the omega of the functional is manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-hf; Geometry optimization for ethane with sto-3g. brianqc/single-point-dft-uhf; Hydroxyl with sto-3g, b3lyp with sg1 grid. brianqc/pentacene; Pentacene with cc-pvdz, b3lyp with eml(50,110) grid. brianqc/geometry-optimization-dft-lrc; Geometry optimization for ethane with sto-3g, wb97x long-range corrected functional with sg1 grid. brianqc/geometry-optimization-hf-uhf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-dft; Water with sto-3g, b3lyp with sg1 grid. brianqc/high-angular-momentum; Water with cc-pvqz. brianqc/single-point-hf-uhf; Hydroxyl with sto-3g. brianqc/geometry-optimization-dft; Geometry optimization for ethane with sto-3g, b3lyp with sg1 grid. brianqc/single-point-hf; Water with sto-3g. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_brianqc.html
https://psicode.org/psi4manual/master/autodoc_testsuite_brianqc.html:1140,Performance,optimiz,optimization-dft-lrc,1140,"﻿. BRIANQC. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. BRIANQC¶. Input File; Description. brianqc/single-point-dft-nlc; Water with sto-3g, lc-vv10 with sg1 grid the vv10 b and c parameters are manually set to also check dft parameter passing through the BrianQC API. brianqc/single-point-hf-rohf; Hydroxyl with sto-3g. brianqc/linear-dependence; Water with modified sto-3g to test linearly-dependent basis. brianqc/frequency-hf-uhf; Hydroxyl with sto-3g frequencies. brianqc/geometry-optimization-hf-rohf; Geometry optimization for hydroxyl with sto-3g. brianqc/frequency-hf; Water with sto-3g frequencies. brianqc/single-point-dft-lrc; Water with sto-3g, wb97x long-range corrected functional with sg1 grid the omega of the functional is manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-hf; Geometry optimization for ethane with sto-3g. brianqc/single-point-dft-uhf; Hydroxyl with sto-3g, b3lyp with sg1 grid. brianqc/pentacene; Pentacene with cc-pvdz, b3lyp with eml(50,110) grid. brianqc/geometry-optimization-dft-lrc; Geometry optimization for ethane with sto-3g, wb97x long-range corrected functional with sg1 grid. brianqc/geometry-optimization-hf-uhf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-dft; Water with sto-3g, b3lyp with sg1 grid. brianqc/high-angular-momentum; Water with cc-pvqz. brianqc/single-point-hf-uhf; Hydroxyl with sto-3g. brianqc/geometry-optimization-dft; Geometry optimization for ethane with sto-3g, b3lyp with sg1 grid. brianqc/single-point-hf; Water with sto-3g. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_brianqc.html
https://psicode.org/psi4manual/master/autodoc_testsuite_brianqc.html:1171,Performance,optimiz,optimization,1171,"﻿. BRIANQC. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. BRIANQC¶. Input File; Description. brianqc/single-point-dft-nlc; Water with sto-3g, lc-vv10 with sg1 grid the vv10 b and c parameters are manually set to also check dft parameter passing through the BrianQC API. brianqc/single-point-hf-rohf; Hydroxyl with sto-3g. brianqc/linear-dependence; Water with modified sto-3g to test linearly-dependent basis. brianqc/frequency-hf-uhf; Hydroxyl with sto-3g frequencies. brianqc/geometry-optimization-hf-rohf; Geometry optimization for hydroxyl with sto-3g. brianqc/frequency-hf; Water with sto-3g frequencies. brianqc/single-point-dft-lrc; Water with sto-3g, wb97x long-range corrected functional with sg1 grid the omega of the functional is manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-hf; Geometry optimization for ethane with sto-3g. brianqc/single-point-dft-uhf; Hydroxyl with sto-3g, b3lyp with sg1 grid. brianqc/pentacene; Pentacene with cc-pvdz, b3lyp with eml(50,110) grid. brianqc/geometry-optimization-dft-lrc; Geometry optimization for ethane with sto-3g, wb97x long-range corrected functional with sg1 grid. brianqc/geometry-optimization-hf-uhf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-dft; Water with sto-3g, b3lyp with sg1 grid. brianqc/high-angular-momentum; Water with cc-pvqz. brianqc/single-point-hf-uhf; Hydroxyl with sto-3g. brianqc/geometry-optimization-dft; Geometry optimization for ethane with sto-3g, b3lyp with sg1 grid. brianqc/single-point-hf; Water with sto-3g. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_brianqc.html
https://psicode.org/psi4manual/master/autodoc_testsuite_brianqc.html:1278,Performance,optimiz,optimization-hf-uhf,1278,"﻿. BRIANQC. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. BRIANQC¶. Input File; Description. brianqc/single-point-dft-nlc; Water with sto-3g, lc-vv10 with sg1 grid the vv10 b and c parameters are manually set to also check dft parameter passing through the BrianQC API. brianqc/single-point-hf-rohf; Hydroxyl with sto-3g. brianqc/linear-dependence; Water with modified sto-3g to test linearly-dependent basis. brianqc/frequency-hf-uhf; Hydroxyl with sto-3g frequencies. brianqc/geometry-optimization-hf-rohf; Geometry optimization for hydroxyl with sto-3g. brianqc/frequency-hf; Water with sto-3g frequencies. brianqc/single-point-dft-lrc; Water with sto-3g, wb97x long-range corrected functional with sg1 grid the omega of the functional is manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-hf; Geometry optimization for ethane with sto-3g. brianqc/single-point-dft-uhf; Hydroxyl with sto-3g, b3lyp with sg1 grid. brianqc/pentacene; Pentacene with cc-pvdz, b3lyp with eml(50,110) grid. brianqc/geometry-optimization-dft-lrc; Geometry optimization for ethane with sto-3g, wb97x long-range corrected functional with sg1 grid. brianqc/geometry-optimization-hf-uhf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-dft; Water with sto-3g, b3lyp with sg1 grid. brianqc/high-angular-momentum; Water with cc-pvqz. brianqc/single-point-hf-uhf; Hydroxyl with sto-3g. brianqc/geometry-optimization-dft; Geometry optimization for ethane with sto-3g, b3lyp with sg1 grid. brianqc/single-point-hf; Water with sto-3g. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_brianqc.html
https://psicode.org/psi4manual/master/autodoc_testsuite_brianqc.html:1308,Performance,optimiz,optimization,1308,"﻿. BRIANQC. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. BRIANQC¶. Input File; Description. brianqc/single-point-dft-nlc; Water with sto-3g, lc-vv10 with sg1 grid the vv10 b and c parameters are manually set to also check dft parameter passing through the BrianQC API. brianqc/single-point-hf-rohf; Hydroxyl with sto-3g. brianqc/linear-dependence; Water with modified sto-3g to test linearly-dependent basis. brianqc/frequency-hf-uhf; Hydroxyl with sto-3g frequencies. brianqc/geometry-optimization-hf-rohf; Geometry optimization for hydroxyl with sto-3g. brianqc/frequency-hf; Water with sto-3g frequencies. brianqc/single-point-dft-lrc; Water with sto-3g, wb97x long-range corrected functional with sg1 grid the omega of the functional is manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-hf; Geometry optimization for ethane with sto-3g. brianqc/single-point-dft-uhf; Hydroxyl with sto-3g, b3lyp with sg1 grid. brianqc/pentacene; Pentacene with cc-pvdz, b3lyp with eml(50,110) grid. brianqc/geometry-optimization-dft-lrc; Geometry optimization for ethane with sto-3g, wb97x long-range corrected functional with sg1 grid. brianqc/geometry-optimization-hf-uhf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-dft; Water with sto-3g, b3lyp with sg1 grid. brianqc/high-angular-momentum; Water with cc-pvqz. brianqc/single-point-hf-uhf; Hydroxyl with sto-3g. brianqc/geometry-optimization-dft; Geometry optimization for ethane with sto-3g, b3lyp with sg1 grid. brianqc/single-point-hf; Water with sto-3g. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_brianqc.html
https://psicode.org/psi4manual/master/autodoc_testsuite_brianqc.html:1532,Performance,optimiz,optimization-dft,1532,"﻿. BRIANQC. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. BRIANQC¶. Input File; Description. brianqc/single-point-dft-nlc; Water with sto-3g, lc-vv10 with sg1 grid the vv10 b and c parameters are manually set to also check dft parameter passing through the BrianQC API. brianqc/single-point-hf-rohf; Hydroxyl with sto-3g. brianqc/linear-dependence; Water with modified sto-3g to test linearly-dependent basis. brianqc/frequency-hf-uhf; Hydroxyl with sto-3g frequencies. brianqc/geometry-optimization-hf-rohf; Geometry optimization for hydroxyl with sto-3g. brianqc/frequency-hf; Water with sto-3g frequencies. brianqc/single-point-dft-lrc; Water with sto-3g, wb97x long-range corrected functional with sg1 grid the omega of the functional is manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-hf; Geometry optimization for ethane with sto-3g. brianqc/single-point-dft-uhf; Hydroxyl with sto-3g, b3lyp with sg1 grid. brianqc/pentacene; Pentacene with cc-pvdz, b3lyp with eml(50,110) grid. brianqc/geometry-optimization-dft-lrc; Geometry optimization for ethane with sto-3g, wb97x long-range corrected functional with sg1 grid. brianqc/geometry-optimization-hf-uhf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-dft; Water with sto-3g, b3lyp with sg1 grid. brianqc/high-angular-momentum; Water with cc-pvqz. brianqc/single-point-hf-uhf; Hydroxyl with sto-3g. brianqc/geometry-optimization-dft; Geometry optimization for ethane with sto-3g, b3lyp with sg1 grid. brianqc/single-point-hf; Water with sto-3g. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_brianqc.html
https://psicode.org/psi4manual/master/autodoc_testsuite_brianqc.html:1559,Performance,optimiz,optimization,1559,"﻿. BRIANQC. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. BRIANQC¶. Input File; Description. brianqc/single-point-dft-nlc; Water with sto-3g, lc-vv10 with sg1 grid the vv10 b and c parameters are manually set to also check dft parameter passing through the BrianQC API. brianqc/single-point-hf-rohf; Hydroxyl with sto-3g. brianqc/linear-dependence; Water with modified sto-3g to test linearly-dependent basis. brianqc/frequency-hf-uhf; Hydroxyl with sto-3g frequencies. brianqc/geometry-optimization-hf-rohf; Geometry optimization for hydroxyl with sto-3g. brianqc/frequency-hf; Water with sto-3g frequencies. brianqc/single-point-dft-lrc; Water with sto-3g, wb97x long-range corrected functional with sg1 grid the omega of the functional is manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-hf; Geometry optimization for ethane with sto-3g. brianqc/single-point-dft-uhf; Hydroxyl with sto-3g, b3lyp with sg1 grid. brianqc/pentacene; Pentacene with cc-pvdz, b3lyp with eml(50,110) grid. brianqc/geometry-optimization-dft-lrc; Geometry optimization for ethane with sto-3g, wb97x long-range corrected functional with sg1 grid. brianqc/geometry-optimization-hf-uhf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-dft; Water with sto-3g, b3lyp with sg1 grid. brianqc/high-angular-momentum; Water with cc-pvqz. brianqc/single-point-hf-uhf; Hydroxyl with sto-3g. brianqc/geometry-optimization-dft; Geometry optimization for ethane with sto-3g, b3lyp with sg1 grid. brianqc/single-point-hf; Water with sto-3g. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_brianqc.html
https://psicode.org/psi4manual/master/autodoc_testsuite_brianqc.html:461,Testability,test,test,461,"﻿. BRIANQC. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. BRIANQC¶. Input File; Description. brianqc/single-point-dft-nlc; Water with sto-3g, lc-vv10 with sg1 grid the vv10 b and c parameters are manually set to also check dft parameter passing through the BrianQC API. brianqc/single-point-hf-rohf; Hydroxyl with sto-3g. brianqc/linear-dependence; Water with modified sto-3g to test linearly-dependent basis. brianqc/frequency-hf-uhf; Hydroxyl with sto-3g frequencies. brianqc/geometry-optimization-hf-rohf; Geometry optimization for hydroxyl with sto-3g. brianqc/frequency-hf; Water with sto-3g frequencies. brianqc/single-point-dft-lrc; Water with sto-3g, wb97x long-range corrected functional with sg1 grid the omega of the functional is manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-hf; Geometry optimization for ethane with sto-3g. brianqc/single-point-dft-uhf; Hydroxyl with sto-3g, b3lyp with sg1 grid. brianqc/pentacene; Pentacene with cc-pvdz, b3lyp with eml(50,110) grid. brianqc/geometry-optimization-dft-lrc; Geometry optimization for ethane with sto-3g, wb97x long-range corrected functional with sg1 grid. brianqc/geometry-optimization-hf-uhf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-dft; Water with sto-3g, b3lyp with sg1 grid. brianqc/high-angular-momentum; Water with cc-pvqz. brianqc/single-point-hf-uhf; Hydroxyl with sto-3g. brianqc/geometry-optimization-dft; Geometry optimization for ethane with sto-3g, b3lyp with sg1 grid. brianqc/single-point-hf; Water with sto-3g. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_brianqc.html
https://psicode.org/psi4manual/master/autodoc_testsuite_cfour.html:2418,Deployability,update,updated,2418,"NH2 with aobasis. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/kw-2; testing best practices options, part ii. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/master/autodoc_testsuite_cfour.html:5215,Deployability,update,updated,5215,"cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/kw-1; testing best practices options, part i. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; CFOUR. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/master/autodoc_testsuite_cfour.html:560,Energy Efficiency,energy,energy,560,"﻿. CFOUR. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; CFOUR. CFOUR¶. Input File; Description. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/sp-rohf-ccsd_t_-fc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis, frozen-core. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/kw-4; Basis set spherical/Cartesian with basis and puream. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/sp-rohf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from psi4. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/kw-2; testing best practices options, part ii. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/puream; Basis set spherical/Cartes",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/master/autodoc_testsuite_cfour.html:847,Energy Efficiency,energy,energy,847,"﻿. CFOUR. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; CFOUR. CFOUR¶. Input File; Description. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/sp-rohf-ccsd_t_-fc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis, frozen-core. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/kw-4; Basis set spherical/Cartesian with basis and puream. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/sp-rohf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from psi4. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/kw-2; testing best practices options, part ii. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/puream; Basis set spherical/Cartes",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/master/autodoc_testsuite_cfour.html:1731,Energy Efficiency,energy,energy,1731,"spherical/Cartesian with basis and puream. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/sp-rohf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from psi4. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/kw-2; testing best practices options, part ii. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/master/autodoc_testsuite_cfour.html:1834,Energy Efficiency,energy,energy,1834,"i-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/sp-rohf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from psi4. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/kw-2; testing best practices options, part ii. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobas",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/master/autodoc_testsuite_cfour.html:2223,Energy Efficiency,energy,energy,2223,"rom psi4. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/kw-2; testing best practices options, part ii. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-scf; single-poin",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/master/autodoc_testsuite_cfour.html:2447,Energy Efficiency,energy,energy,2447,"NH2 with aobasis. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/kw-2; testing best practices options, part ii. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/master/autodoc_testsuite_cfour.html:3391,Energy Efficiency,energy,energy,3391,"atrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/kw-1; testing best practices options, part i. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/sp-uhf-cc3; single-point CC3/qz2p",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/master/autodoc_testsuite_cfour.html:3585,Energy Efficiency,energy,energy,3585,"wrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/kw-1; testing best practices options, part i. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/mints5; ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/master/autodoc_testsuite_cfour.html:3729,Energy Efficiency,energy,energy,3729,"uted by sapt0 and dfmp2 methods. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/kw-1; testing best practices options, part i. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/s",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/master/autodoc_testsuite_cfour.html:2399,Modifiability,variab,variables,2399,"NH2 with aobasis. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/kw-2; testing best practices options, part ii. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/master/autodoc_testsuite_cfour.html:196,Performance,optimiz,optimization,196,"﻿. CFOUR. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; CFOUR. CFOUR¶. Input File; Description. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/sp-rohf-ccsd_t_-fc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis, frozen-core. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/kw-4; Basis set spherical/Cartesian with basis and puream. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/sp-rohf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from psi4. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/kw-2; testing best practices options, part ii. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/puream; Basis set spherical/Cartes",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/master/autodoc_testsuite_cfour.html:1167,Performance,optimiz,optimization,1167,"t-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/sp-rohf-ccsd_t_-fc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis, frozen-core. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/kw-4; Basis set spherical/Cartesian with basis and puream. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/sp-rohf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from psi4. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/kw-2; testing best practices options, part ii. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/mp2-1; All-electron MP2 6-31G** geometry op",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/master/autodoc_testsuite_cfour.html:2176,Performance,optimiz,optimization,2176,"MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from psi4. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/kw-2; testing best practices options, part ii. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-rhf-ccsd_t_; sing",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/master/autodoc_testsuite_cfour.html:2499,Performance,perform,performed,2499,"NH2 with aobasis. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/kw-2; testing best practices options, part ii. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/master/autodoc_testsuite_cfour.html:3049,Performance,optimiz,optimization,3049,"t MP2/qz2p on water. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-m",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/master/autodoc_testsuite_cfour.html:3102,Performance,optimiz,optimization,3102,"ons to cfour, part i. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/psi-a24-gr",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/master/autodoc_testsuite_cfour.html:3848,Performance,optimiz,optimization,3848,"spherical/Cartesian with basis and cfour_spherical. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/kw-1; testing best practices options, part i. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-rhf-ccs",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/master/autodoc_testsuite_cfour.html:4132,Performance,optimiz,optimization,4132,"our/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/kw-1; testing best practices options, part i. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Sui",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/master/autodoc_testsuite_cfour.html:4437,Performance,optimiz,optimization,4437,"cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/kw-1; testing best practices options, part i. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; CFOUR. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/master/autodoc_testsuite_cfour.html:1671,Testability,test,testing,1671,"2p on NH2 with aobasis. cfour/kw-4; Basis set spherical/Cartesian with basis and puream. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/sp-rohf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from psi4. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/kw-2; testing best practices options, part ii. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restr",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/master/autodoc_testsuite_cfour.html:3518,Testability,test,tests,3518,"sing polar coordinates, converted to Cartesian coordinates. cfour/pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/kw-1; testing best practices options, part i. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4.",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/master/autodoc_testsuite_cfour.html:4257,Testability,test,testing,4257,"point HF/qz2p on water. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/kw-1; testing best practices options, part i. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; CFOUR. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/master/autodoc_testsuite_cfour.html:4645,Testability,test,testing,4645,"cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/kw-1; testing best practices options, part i. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; CFOUR. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/master/autodoc_testsuite_chemps2.html:582,Deployability,update,updated,582,"﻿. CHEMPS2. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; CHEMPS2. CHEMPS2¶. Input File; Description. chemps2/ci-h2o; dmrg-ci on water. chemps2/natural-orbital; dmrg-scf on N2. chemps2/caspt2-n2; dmrg-caspt2 on nitrogen. chemps2/caspt2-small; dmrg-caspt2 on nitrogen. chemps2/scf-n2; dmrg-scf on N2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; CHEMPS2. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_chemps2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_chemps2.html
https://psicode.org/psi4manual/master/autodoc_testsuite_cookbook.html:981,Deployability,update,updated,981,"﻿. COOKBOOK. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; COOKBOOK. COOKBOOK¶. Input File; Description. cookbook/manual-fd-hess-grad; SCF STO-3G finite-difference tests. cookbook/rohf-orb-rot; Test if DGAS’s orbital rotation code matches expected values. The first two calculations compute the X (symm A’’) and A (symm A’) states of HO2 in Cs by restricting the occupations of the two states. The second two calculations compute the X and A states of HO2 in C1. Computation of the A state requires a rotation of the HOMO and SOMO by 90 degrees (i.e., by swapping these two orbitals). The orb_rotate() function accomplishes this. cookbook/manual-fd-hess-energy; SCF STO-3G finite-difference tests. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; COOKBOOK. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_cookbook.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_cookbook.html
https://psicode.org/psi4manual/master/autodoc_testsuite_cookbook.html:727,Energy Efficiency,energy,energy,727,"﻿. COOKBOOK. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; COOKBOOK. COOKBOOK¶. Input File; Description. cookbook/manual-fd-hess-grad; SCF STO-3G finite-difference tests. cookbook/rohf-orb-rot; Test if DGAS’s orbital rotation code matches expected values. The first two calculations compute the X (symm A’’) and A (symm A’) states of HO2 in Cs by restricting the occupations of the two states. The second two calculations compute the X and A states of HO2 in C1. Computation of the A state requires a rotation of the HOMO and SOMO by 90 degrees (i.e., by swapping these two orbitals). The orb_rotate() function accomplishes this. cookbook/manual-fd-hess-energy; SCF STO-3G finite-difference tests. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; COOKBOOK. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_cookbook.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_cookbook.html
https://psicode.org/psi4manual/master/autodoc_testsuite_cookbook.html:237,Testability,test,tests,237,"﻿. COOKBOOK. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; COOKBOOK. COOKBOOK¶. Input File; Description. cookbook/manual-fd-hess-grad; SCF STO-3G finite-difference tests. cookbook/rohf-orb-rot; Test if DGAS’s orbital rotation code matches expected values. The first two calculations compute the X (symm A’’) and A (symm A’) states of HO2 in Cs by restricting the occupations of the two states. The second two calculations compute the X and A states of HO2 in C1. Computation of the A state requires a rotation of the HOMO and SOMO by 90 degrees (i.e., by swapping these two orbitals). The orb_rotate() function accomplishes this. cookbook/manual-fd-hess-energy; SCF STO-3G finite-difference tests. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; COOKBOOK. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_cookbook.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_cookbook.html
https://psicode.org/psi4manual/master/autodoc_testsuite_cookbook.html:764,Testability,test,tests,764,"﻿. COOKBOOK. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; COOKBOOK. COOKBOOK¶. Input File; Description. cookbook/manual-fd-hess-grad; SCF STO-3G finite-difference tests. cookbook/rohf-orb-rot; Test if DGAS’s orbital rotation code matches expected values. The first two calculations compute the X (symm A’’) and A (symm A’) states of HO2 in Cs by restricting the occupations of the two states. The second two calculations compute the X and A states of HO2 in C1. Computation of the A state requires a rotation of the HOMO and SOMO by 90 degrees (i.e., by swapping these two orbitals). The orb_rotate() function accomplishes this. cookbook/manual-fd-hess-energy; SCF STO-3G finite-difference tests. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; COOKBOOK. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_cookbook.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_cookbook.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:5487,Availability,avail,available,5487,"ternal potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. dct8; DCT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. dfccsd-grad2; DF-CCSD cc-pVDZ gradient for the NH molecule. dft-pruning; Tests all grid pruning options available and screening of small weights. Check against grid size. cc51; EOM-CC3/cc-pVTZ on H2O. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. sapt9; usapt example with empty beta. cc7; Tests CCENERGY’s CCSD gradient in the presence of a dipole field. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. cepa1; cc-pvdz H2O Test CEPA(1) Energy. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. cc56; EOM-CCSD/6-31g excited state transition data for water cation. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analys",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:14910,Availability,checkpoint,checkpoint,14910,"level shift on a UHF computation. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cbs-xtpl-nbody; RHF interaction energies using nbody and cbs parts of the driver Ne dimer with mp2/v[dt]z + d:ccsd(t)/vdz. freq-masses; check nonphysical masses possible. scf-level-shift-cuhf; SCF level shift on a CUHF computation. dft-freq-analytic1; Analytic SVWN frequencies, compared to finite difference values. density-screen-1; RHF Density Matrix based-Integral Screening Test for water. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. mbis-2; MBIS calculation on OH- (Expanded Arrays). sapt-sf1; Tests the Psi4 SF-SAPT code. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. cc13d; Tests analytic CC2 gradients. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. olccd1; OLCCD cc-pVDZ energy for the H2O molecule. fsapt-ext-abc2; FSAPT with external charge on dimer. pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. cbs-xtpl-energy; Extrapolated water energies - density-fitted version. dforemp-grad2; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O+ molecule. molden1; Test of the superposition of atomic densities (SAD) guess, using a high",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:22398,Availability,error,error,22398," order and electrostatic potentials evaluated at the nuclear coordinates. stability3; Test LDA stability analysis against QChem. dct1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. scf-level-shift-rks; SCF level shift on an RKS computation. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. cc36; CC2(RHF)/cc-pVDZ energy of H2O. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. fnocc3; Test FNO-QCISD(T) computation. frac-sym; Fractional occupation with symmetry. tdscf-7; TD-HF test variable access. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dft1-alt; DFT Functional Test. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). scf-upcast-custom-basis; test scf castup with custom basis sets. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. mints3; Test individual integral objects for c",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:1809,Deployability,update,update,1809,"-energy1; integral conventional REMP/cc-pVDZ energies for the H2O molecule. results were independently verified against the initial wavels implementation. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. cc54; CCSD dipole with user-specified basis set. cubeprop; RHF orbitals and density for water. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. sapt11; sapt example with orbital freezing with alkali metal and dMP2. scf-guess-read2; Test if the the guess read in the same basis converges. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active s",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:1915,Deployability,update,updated,1915,"ified against the initial wavels implementation. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. cc54; CCSD dipole with user-specified basis set. cubeprop; RHF orbitals and density for water. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. sapt11; sapt example with orbital freezing with alkali metal and dMP2. scf-guess-read2; Test if the the guess read in the same basis converges. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. scf-response1; Compute the dipole, quadru",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:4826,Deployability,update,update,4826,"the H2O molecule. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. mom-h2o-4; MOM excitation from LUMO HOMO+4. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. olccd-grad2; OLCCD cc-pVDZ gradient for the NO radical. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. olccd-freq1; OLCCD cc-pVDZ freqs for C2H2. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. scf-response3; UHF Dipole Polarizability Test. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt10; usapt example with empty beta due to frozen core. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. dct8; DCT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. dfccsd-grad2; DF-CCSD cc-pVDZ gradient for the NH molecule. dft-pruning; Tests all grid pruning options available and screening of small weights. Check against grid size. cc51; EOM-CC3/cc-pVTZ on H2O. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. sapt9; usapt example with emp",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:8958,Deployability,update,updated,8958," DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. sapt-exch-ind30-inf; SAPT2+3 with S^inf exch-ind30 Geometries taken from the S66x10 database, the shortest-range point (R = 0.7 R_e). cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. density-screen-2; RKS Density Matrix based-Integral Screening Test for benzene. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega= (589 355 nm). fci-h2o; 6-31G H2O Test FCI Energy Point. dfremp-1; density fitted REMP/cc-pVDZ energies for the CO2 molecule. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. scf-cholesky-basis; incremental Cholesky filtered SCF. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O mole",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:10087,Deployability,update,update,10087," both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. scf-cholesky-basis; incremental Cholesky filtered SCF. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. ddd-function-kwargs; check distributed driver is correctly passing function kwargs. dct2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc13b; Tests RHF CCSD(T)gradients. cc17; Single point energies of multiple excited states with EOM-CCSD. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. dct9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:10633,Deployability,update,update,10633,"essures but not for different isotopologs. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. ddd-function-kwargs; check distributed driver is correctly passing function kwargs. dct2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc13b; Tests RHF CCSD(T)gradients. cc17; Single point energies of multiple excited states with EOM-CCSD. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. dct9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. scf-ecp3; Water-Argon complex with ECP present; check of UHF Hessian. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Tr",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:10935,Deployability,update,update,10935,"kwargs; check distributed driver is correctly passing function kwargs. dct2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc13b; Tests RHF CCSD(T)gradients. cc17; Single point energies of multiple excited states with EOM-CCSD. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. dct9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. scf-ecp3; Water-Argon complex with ECP present; check of UHF Hessian. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is us",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:20495,Deployability,update,updated,20495,"ctually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp2p5-1; OMP2.5 cc-pVDZ energy for the H2O molecule. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. matrix2; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating. dft-grad-meta; meta-GGA gradients of water and ssh molecules reference gradients updated due to new BraggSlater radii. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). fsapt-ext; Quick test of external potential in F-SAPT (see fsapt1 for a real example). psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dct7; DCT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. stability3; Test LDA stability analys",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:21220,Deployability,install,install,21220,"acetylene), test case 16 from the S22 database. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. matrix2; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating. dft-grad-meta; meta-GGA gradients of water and ssh molecules reference gradients updated due to new BraggSlater radii. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). fsapt-ext; Quick test of external potential in F-SAPT (see fsapt1 for a real example). psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dct7; DCT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. stability3; Test LDA stability analysis against QChem. dct1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. scf-level-shift-rks; SCF level shift on an RKS computation. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. cc36; CC2(RHF)/cc-pVDZ energy of H2O. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. fnocc3; Test FNO-QCISD(T) computation. frac-sym; Fractional occupation with symmetry. tdscf-7; TD-HF test variable access. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Poin",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:21588,Deployability,update,update,21588," M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). fsapt-ext; Quick test of external potential in F-SAPT (see fsapt1 for a real example). psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dct7; DCT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. stability3; Test LDA stability analysis against QChem. dct1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. scf-level-shift-rks; SCF level shift on an RKS computation. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. cc36; CC2(RHF)/cc-pVDZ energy of H2O. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. fnocc3; Test FNO-QCISD(T) computation. frac-sym; Fractional occupation with symmetry. tdscf-7; TD-HF test variable access. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dft1-alt; DFT Functional Test. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle a",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:25129,Deployability,update,update,25129,"Z-matrix input. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). casscf-fzc-sp; CASSCF/6-31G** energy point. scf-coverage; Lithium test for coverage. olccd3; OLCCD cc-pVDZ energy with ROHF initial guess for the NO radical. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. cisd-sp; 6-31G** H2O Test CISD Energy Point. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dct4; DCT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. props4; Electrostatic potential and electric field evaluated on a grid around water. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mp2-1; All-electron MP2 6-31G** geometry optimization of water. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. tdscf-3; td-wb97x excitation energies of singlet states of h2o, wfn passing. dft2; DFT Functional Test. dfomp2-grad2; OMP2 ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:26592,Deployability,update,update,26592," SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mp2-1; All-electron MP2 6-31G** geometry optimization of water. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. tdscf-3; td-wb97x excitation energies of singlet states of h2o, wfn passing. dft2; DFT Functional Test. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. aediis-1; ADIIS test case, from 10.1063/1.3304922. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. fsapt-ext-abc; FSAPT with external charge on trimer. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. dft-reference; MP2 with a PBE0 reference computation. dft1; DFT Functional Test all values update for new BraggSlater radii. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. ddd-deriv; Sample HF/cc-pVDZ H2O computation all derivatives. nbody-multi-level-2; many-body different levels of theory on each body of helium tetramer. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. tdscf-1; td-uhf test on triplet states of methylene (rpa). omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. pywrap-checkrun-convcrit; ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:29255,Deployability,update,updated,29255,"C for HOOH torsional rotation at the RHF/DZP level of theory. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. dfccsd-t-grad2; DF-CCSD(T) cc-pVDZ gradient for the NH molecule. cdremp-2; Cholesky decomposed REMP/cc-pVDZ energies for the CH3 radical. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. mbis-1; MBIS calculation on H2O. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. cc52; CCSD Response for H2O2. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition an",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:30544,Deployability,update,updated,30544,"t. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. cc52; CCSD Response for H2O2. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. dft-custom-mgga; updated dldf reference to new BraggSlater radii Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. linK-2; RKS Linear Exchange Algorithm test for benzene. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. ao-dfcasscf-sp; CASSCF/6-31G** energy point. cbs-parser; mtd/basis syntax examples. dlpnomp2-3; comparison of DF-MP2 and DLPNO-MP2 with a cartesian basis set. fisapt-siao1; This test case shows an example of running the I-SAPT0/jun-cc-pVDZ computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups) The SIAO1 link partitioning algorithm is used. An F-SAPT partitioning follows I-SAPT. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. dft-jk; DF",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:32338,Deployability,update,updated,32338,"n-cc-pVDZ computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups) The SIAO1 link partitioning algorithm is used. An F-SAPT partitioning follows I-SAPT. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. dft-jk; DFT JK on-disk test. cubeprop-esp; RHF orbitals and density for water. cbs-delta-energy; Extrapolated energies with delta correction. dfcasscf-sp; CASSCF/6-31G** energy point. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. fsapt-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. dforemp-grad1; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O molecule. scf-hess4; DF SCF 6-31G UHFl vs RHF test Tests DF UHF hessian code for Ca = Cb. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_DISPERSION_PARAMETERS tuple updated ‘bench’ reference values for new BraggSlater radii. dct-grad4; Unrestricted DF-DCT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. cc12; Single point energies of multiple excited states with EOM-CCSD. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. scf-ecp2; Water-Argon complex with ECP present; check of RHF Hessian. explicit-am-basis; Check that basis sets can be input with explicit angular momentum format. mbis-3; MBIS calculation on OH radical. dfccsdat2; DF-A-CCSD(T) cc-pVDZ energy for the NH molecule. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. scf",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:39781,Deployability,update,update,39781,"with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. isapt-charged; This test case shows an example of running the I-SAPT0/aug-cc-pVDZ computation for a positively charged system, illustrating the cation-pi interaction. The SIAO1 link partitioning algorithm is used. The system is taken from http://dx.doi.org/10.1016/j.comptc.2014.02.008. fnocc7; Test fnocc with linear dependencies. fnocc6; Test method/basis with disk_df. tdscf-2; td-uhf test on triplet states of methylene (tda), wfn passing. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. dct3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. sapt-ecp; sapt0 of charged system in ECP basis set. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. oremp-grad2; integral conventional OO-REMP/cc-pVDZ engrad single points for the H2O molecule. single point energies were independently checked using the original wavels code. oremp-grad1; integral conventional OO-REMP/cc-pVDZ engrad single points for the H2O molecule. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). phi-ao; Test computing values of basis functions (puream and non-puream) at points. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. tu4-h2o-freq; Optimization followed by frequen",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:40880,Deployability,update,update,40880,"ndled in the AO Basis, using integrals stored on disk. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. sapt-ecp; sapt0 of charged system in ECP basis set. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. oremp-grad2; integral conventional OO-REMP/cc-pVDZ engrad single points for the H2O molecule. single point energies were independently checked using the original wavels code. oremp-grad1; integral conventional OO-REMP/cc-pVDZ engrad single points for the H2O molecule. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). phi-ao; Test computing values of basis functions (puream and non-puream) at points. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN update ref gradient due to new BraggSlater radii. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. dct11; Restricted DF-DCT ODC-12 energies with linearly dependent basis functions. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. sapt0-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dft-omega; Test omega is setable updated wb97x_20,wb97x_03 to account for new BraggSlater radii. scf6; Tests RHF/ROHF/UHF SCF gradients. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. olccd-grad1; OLCCD cc-pVDZ gradient for the H2O molecule. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at lea",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:41440,Deployability,update,updated,41440," integral conventional OO-REMP/cc-pVDZ engrad single points for the H2O molecule. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). phi-ao; Test computing values of basis functions (puream and non-puream) at points. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN update ref gradient due to new BraggSlater radii. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. dct11; Restricted DF-DCT ODC-12 energies with linearly dependent basis functions. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. sapt0-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dft-omega; Test omega is setable updated wb97x_20,wb97x_03 to account for new BraggSlater radii. scf6; Tests RHF/ROHF/UHF SCF gradients. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. olccd-grad1; OLCCD cc-pVDZ gradient for the H2O molecule. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. mints15; check SP basis Fortran exponent parsing. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. extern4; External potential calculation involving a TIP3P water and a QM water. Gradient on the external charges is compared to gradient on the QM atoms to validate the gradient on the charges. cdoremp-energy1; Cholesky decomposed OO-REMP/cc-pVDZ energy for the H2O molecule. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartes",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:44254,Deployability,update,update,44254,". mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. pywrap-align; apply linear fragmentation algorithm to a water cluster. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. pubchem2; Superficial test of PubChem interface. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN update df/pk_ref values due to new BraggSlater radii. cbs-xtpl-dict; Extrapolated water energies. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar ato",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:46977,Deployability,update,updated,46977,"y matter for the rotational symmetry number in thermodynamic computations. extern3; External potential calculation with one Ghost atom and one point charge at the same position. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). dct12; Spin-restricted DC-06 counterpart of dct1. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. tdscf-4; td-wb97x singlet excitation energies of methylene (tda). cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. dlpnomp2-2; comparison of DF-MP2 and DLPNO-MP2 with a CBS extrapolation. fnocc4; Test F",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:48907,Deployability,update,updated,48907,"d a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. dlpnomp2-2; comparison of DF-MP2 and DLPNO-MP2 with a CBS extrapolation. fnocc4; Test FNO-DF-CCSD(T) energy. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. cubeprop-frontier; ROHF frontier orbitals of CH2(s) and CH2(t). nbody-he-4b; MP2/aug-cc-pvDZ many body energies of an arbitrary Helium complex, addressing 4-body formulas. sapt-exch-disp-inf; SAPT0 with S^inf exch-disp20. remp-energy2; integral conventional unrestricted REMP/cc-pVDZ energies for the H2O+ molecule. results were independently verified against the initial wavels implementation. omp2p5-2; OMP2.5 cc-pVDZ energy for the H2O molecule. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. scf-auto-cholesky; Cholesky filter a complete basis. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN updated ref gradient due to new BraggSlater radii. opt11; Transition-state optimizations of HOOH to both torsional transition states. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; <no title>. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:49253,Deployability,update,updated,49253,"d a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. dlpnomp2-2; comparison of DF-MP2 and DLPNO-MP2 with a CBS extrapolation. fnocc4; Test FNO-DF-CCSD(T) energy. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. cubeprop-frontier; ROHF frontier orbitals of CH2(s) and CH2(t). nbody-he-4b; MP2/aug-cc-pvDZ many body energies of an arbitrary Helium complex, addressing 4-body formulas. sapt-exch-disp-inf; SAPT0 with S^inf exch-disp20. remp-energy2; integral conventional unrestricted REMP/cc-pVDZ energies for the H2O+ molecule. results were independently verified against the initial wavels implementation. omp2p5-2; OMP2.5 cc-pVDZ energy for the H2O molecule. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. scf-auto-cholesky; Cholesky filter a complete basis. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN updated ref gradient due to new BraggSlater radii. opt11; Transition-state optimizations of HOOH to both torsional transition states. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; <no title>. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:423,Energy Efficiency,energy,energy,423,"﻿. <no title>. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; <no title>. Input File; Description. dft-freq-analytic2; Analytic UKS SVWN frequencies, compared to finite difference values. numpy-array-interface; Numpy interface testing. fsapt-ext-abc-au; analog of fsapt-ext-abc with molecule and external potentials in Bohr. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. remp-energy1; integral conventional REMP/cc-pVDZ energies for the H2O molecule. results were independently verified against the initial wavels implementation. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. cc54; CCSD dipole with user-specified basis set. cubeprop; RHF orbitals and density for water. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. dft-custom-gga; DFT (LDA/GGA) test of cus",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:2280,Energy Efficiency,energy,energy,2280,"t screening!. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. cc54; CCSD dipole with user-specified basis set. cubeprop; RHF orbitals and density for water. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. sapt11; sapt example with orbital freezing with alkali metal and dMP2. scf-guess-read2; Test if the the guess read in the same basis converges. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. mints-benchmark; run some BLAS benchmarks. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. linK-1; RHF Linear Exchang",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:3623,Energy Efficiency,energy,energy,3623," reference values. This test should match RHF values exactly. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. mints-benchmark; run some BLAS benchmarks. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. linK-1; RHF Linear Exchange Algorithm test for water. fci-h2o-2; 6-31G H2O Test FCI Energy Point. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. omp3-3; OMP3 cc-pCVDZ energy with B3LYP initial guess for the NO radical. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. mom-h2o-4; MOM excitation from LUMO HOMO+4. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. olccd-grad2; OLCCD cc-pVDZ gradient for the NO radical. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. olccd-freq1; OLCCD cc-pVDZ freqs for C2H2. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. scf-response3; UHF Dipole Polarizability Test. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt10; usapt example with empty beta due to frozen core. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. sc",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:3877,Energy Efficiency,energy,energy,3877,"se1; Compute the dipole, quadrupole, and traceless quadrupoles for water. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. mints-benchmark; run some BLAS benchmarks. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. linK-1; RHF Linear Exchange Algorithm test for water. fci-h2o-2; 6-31G H2O Test FCI Energy Point. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. omp3-3; OMP3 cc-pCVDZ energy with B3LYP initial guess for the NO radical. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. mom-h2o-4; MOM excitation from LUMO HOMO+4. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. olccd-grad2; OLCCD cc-pVDZ gradient for the NO radical. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. olccd-freq1; OLCCD cc-pVDZ freqs for C2H2. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. scf-response3; UHF Dipole Polarizability Test. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt10; usapt example with empty beta due to frozen core. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. dct8; DCT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrap",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:3981,Energy Efficiency,energy,energy,3981,"xing ECP and non-ECP orbital/fitting basis sets in a session. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. mints-benchmark; run some BLAS benchmarks. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. linK-1; RHF Linear Exchange Algorithm test for water. fci-h2o-2; 6-31G H2O Test FCI Energy Point. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. omp3-3; OMP3 cc-pCVDZ energy with B3LYP initial guess for the NO radical. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. mom-h2o-4; MOM excitation from LUMO HOMO+4. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. olccd-grad2; OLCCD cc-pVDZ gradient for the NO radical. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. olccd-freq1; OLCCD cc-pVDZ freqs for C2H2. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. scf-response3; UHF Dipole Polarizability Test. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt10; usapt example with empty beta due to frozen core. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. dct8; DCT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy c",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:4287,Energy Efficiency,energy,energy,4287,"ents for C4NH4. linK-1; RHF Linear Exchange Algorithm test for water. fci-h2o-2; 6-31G H2O Test FCI Energy Point. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. omp3-3; OMP3 cc-pCVDZ energy with B3LYP initial guess for the NO radical. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. mom-h2o-4; MOM excitation from LUMO HOMO+4. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. olccd-grad2; OLCCD cc-pVDZ gradient for the NO radical. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. olccd-freq1; OLCCD cc-pVDZ freqs for C2H2. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. scf-response3; UHF Dipole Polarizability Test. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt10; usapt example with empty beta due to frozen core. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. dct8; DCT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cc30",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:4397,Energy Efficiency,energy,energy,4397,"cc-pVDZ gradient for the NO molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. omp3-3; OMP3 cc-pCVDZ energy with B3LYP initial guess for the NO radical. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. mom-h2o-4; MOM excitation from LUMO HOMO+4. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. olccd-grad2; OLCCD cc-pVDZ gradient for the NO radical. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. olccd-freq1; OLCCD cc-pVDZ freqs for C2H2. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. scf-response3; UHF Dipole Polarizability Test. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt10; usapt example with empty beta due to frozen core. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. dct8; DCT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. dfccsd-grad2; DF-CCSD cc-pVDZ grad",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:4963,Energy Efficiency,energy,energy,4963," LUMO HOMO+4. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. olccd-grad2; OLCCD cc-pVDZ gradient for the NO radical. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. olccd-freq1; OLCCD cc-pVDZ freqs for C2H2. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. scf-response3; UHF Dipole Polarizability Test. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt10; usapt example with empty beta due to frozen core. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. dct8; DCT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. dfccsd-grad2; DF-CCSD cc-pVDZ gradient for the NH molecule. dft-pruning; Tests all grid pruning options available and screening of small weights. Check against grid size. cc51; EOM-CC3/cc-pVTZ on H2O. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. sapt9; usapt example with empty beta. cc7; Tests CCENERGY’s CCSD gradient in the presence of a dipole field. mcscf2; TCSCF cc-p",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:5207,Energy Efficiency,energy,energy,5207,"pole Polarizability Test. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt10; usapt example with empty beta due to frozen core. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. dct8; DCT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. dfccsd-grad2; DF-CCSD cc-pVDZ gradient for the NH molecule. dft-pruning; Tests all grid pruning options available and screening of small weights. Check against grid size. cc51; EOM-CC3/cc-pVTZ on H2O. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. sapt9; usapt example with empty beta. cc7; Tests CCENERGY’s CCSD gradient in the presence of a dipole field. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:5610,Energy Efficiency,energy,energy,5610,"alidate forces. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. dct8; DCT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. dfccsd-grad2; DF-CCSD cc-pVDZ gradient for the NH molecule. dft-pruning; Tests all grid pruning options available and screening of small weights. Check against grid size. cc51; EOM-CC3/cc-pVTZ on H2O. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. sapt9; usapt example with empty beta. cc7; Tests CCENERGY’s CCSD gradient in the presence of a dipole field. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. cepa1; cc-pvdz H2O Test CEPA(1) Energy. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. cc56; EOM-CCSD/6-31g excited state transition data for water cation. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. opt-irc-2; Compute the IRC for HCN <",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:5939,Energy Efficiency,energy,energy,5939," two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. dfccsd-grad2; DF-CCSD cc-pVDZ gradient for the NH molecule. dft-pruning; Tests all grid pruning options available and screening of small weights. Check against grid size. cc51; EOM-CC3/cc-pVTZ on H2O. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. sapt9; usapt example with empty beta. cc7; Tests CCENERGY’s CCSD gradient in the presence of a dipole field. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. cepa1; cc-pvdz H2O Test CEPA(1) Energy. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. cc56; EOM-CCSD/6-31g excited state transition data for water cation. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (s",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:6288,Energy Efficiency,energy,energy,6288," rotation calculation (length gauge only) at two frequencies on methyloxirane. dfccsd-grad2; DF-CCSD cc-pVDZ gradient for the NH molecule. dft-pruning; Tests all grid pruning options available and screening of small weights. Check against grid size. cc51; EOM-CC3/cc-pVTZ on H2O. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. sapt9; usapt example with empty beta. cc7; Tests CCENERGY’s CCSD gradient in the presence of a dipole field. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. cepa1; cc-pvdz H2O Test CEPA(1) Energy. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. cc56; EOM-CCSD/6-31g excited state transition data for water cation. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. fnocc5; Test FNO-DF-CCSD(T) energy. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. scf-uhf-grad-nobeta; UHF gradient for a one-electron system (no beta electrons). cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. dft-smoke; DFT Func",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:7048,Energy Efficiency,energy,energy,7048,"molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. cepa1; cc-pvdz H2O Test CEPA(1) Energy. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. cc56; EOM-CCSD/6-31g excited state transition data for water cation. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. fnocc5; Test FNO-DF-CCSD(T) energy. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. scf-uhf-grad-nobeta; UHF gradient for a one-electron system (no beta electrons). cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. dft-smoke; DFT Functional Smoke Test. ao-casscf-sp; CASSCF/6-31G** energy point. cepa-module; routing check on lccd, lccsd, cepa(0). dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. cbs-xtpl-alpha; Extrapolated water energies. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. nbody-nocp-gradient; Computation of NoCP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and i",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:7231,Energy Efficiency,energy,energy,7231,"; cc-pvdz H2O Test CEPA(1) Energy. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. cc56; EOM-CCSD/6-31g excited state transition data for water cation. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. fnocc5; Test FNO-DF-CCSD(T) energy. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. scf-uhf-grad-nobeta; UHF gradient for a one-electron system (no beta electrons). cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. dft-smoke; DFT Functional Smoke Test. ao-casscf-sp; CASSCF/6-31G** energy point. cepa-module; routing check on lccd, lccsd, cepa(0). dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. cbs-xtpl-alpha; Extrapolated water energies. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. nbody-nocp-gradient; Computation of NoCP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. sapt-exch-ind30-inf; SAPT2+3 with S^inf exch-ind30 Geometries taken from the S66x10 data",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:7353,Energy Efficiency,energy,energy,7353,"D/6-31g excited state transition data for water cation. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. fnocc5; Test FNO-DF-CCSD(T) energy. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. scf-uhf-grad-nobeta; UHF gradient for a one-electron system (no beta electrons). cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. dft-smoke; DFT Functional Smoke Test. ao-casscf-sp; CASSCF/6-31G** energy point. cepa-module; routing check on lccd, lccsd, cepa(0). dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. cbs-xtpl-alpha; Extrapolated water energies. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. nbody-nocp-gradient; Computation of NoCP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. sapt-exch-ind30-inf; SAPT2+3 with S^inf exch-ind30 Geometries taken from the S66x10 database, the shortest-range point (R = 0.7 R_e). cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methy",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:7860,Energy Efficiency,energy,energy,7860,"ess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. fnocc5; Test FNO-DF-CCSD(T) energy. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. scf-uhf-grad-nobeta; UHF gradient for a one-electron system (no beta electrons). cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. dft-smoke; DFT Functional Smoke Test. ao-casscf-sp; CASSCF/6-31G** energy point. cepa-module; routing check on lccd, lccsd, cepa(0). dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. cbs-xtpl-alpha; Extrapolated water energies. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. nbody-nocp-gradient; Computation of NoCP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. sapt-exch-ind30-inf; SAPT2+3 with S^inf exch-ind30 Geometries taken from the S66x10 database, the shortest-range point (R = 0.7 R_e). cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. density-screen-2; RKS Density Matrix based-Integral Screening Test for benzene. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega= (589 355 nm). fci-h2o; 6-31G H2O Test FCI Energy Point. dfremp-1; density fitted REMP/cc-pVDZ energies for the CO2 molecule. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:8421,Energy Efficiency,energy,energy,8421,"a(0). dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. cbs-xtpl-alpha; Extrapolated water energies. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. nbody-nocp-gradient; Computation of NoCP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. sapt-exch-ind30-inf; SAPT2+3 with S^inf exch-ind30 Geometries taken from the S66x10 database, the shortest-range point (R = 0.7 R_e). cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. density-screen-2; RKS Density Matrix based-Integral Screening Test for benzene. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega= (589 355 nm). fci-h2o; 6-31G H2O Test FCI Energy Point. dfremp-1; density fitted REMP/cc-pVDZ energies for the CO2 molecule. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. scf1; RHF cc-pVQZ energy for the BH molecu",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:8441,Energy Efficiency,energy,energy,8441,"dients for the H2O molecule. cbs-xtpl-alpha; Extrapolated water energies. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. nbody-nocp-gradient; Computation of NoCP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. sapt-exch-ind30-inf; SAPT2+3 with S^inf exch-ind30 Geometries taken from the S66x10 database, the shortest-range point (R = 0.7 R_e). cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. density-screen-2; RKS Density Matrix based-Integral Screening Test for benzene. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega= (589 355 nm). fci-h2o; 6-31G H2O Test FCI Energy Point. dfremp-1; density fitted REMP/cc-pVDZ energies for the CO2 molecule. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. scf-cholesky-basi",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:9389,Energy Efficiency,energy,energy,9389,"; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. density-screen-2; RKS Density Matrix based-Integral Screening Test for benzene. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega= (589 355 nm). fci-h2o; 6-31G H2O Test FCI Energy Point. dfremp-1; density fitted REMP/cc-pVDZ energies for the CO2 molecule. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. scf-cholesky-basis; incremental Cholesky filtered SCF. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. ddd-function-kwargs; check distributed driver is correctly passing function kwargs. dct2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc13b; Tests RHF CCSD(T)gradients. cc17; Single point energies of multiple excited states with EOM-CCSD. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy usi",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:9710,Energy Efficiency,energy,energy,9710,"nsity fitted REMP/cc-pVDZ energies for the CO2 molecule. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. scf-cholesky-basis; incremental Cholesky filtered SCF. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. ddd-function-kwargs; check distributed driver is correctly passing function kwargs. dct2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc13b; Tests RHF CCSD(T)gradients. cc17; Single point energies of multiple excited states with EOM-CCSD. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. decontract; RHF/cc-pvdz-decontract HCl single-p",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:9831,Energy Efficiency,energy,energy,9831,"for the H2O molecule. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. scf-cholesky-basis; incremental Cholesky filtered SCF. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. ddd-function-kwargs; check distributed driver is correctly passing function kwargs. dct2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc13b; Tests RHF CCSD(T)gradients. cc17; Single point energies of multiple excited states with EOM-CCSD. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. cepa2; cc-pvdz H2O Test ACPF Energy/",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:9907,Energy Efficiency,energy,energy,9907,"cetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. scf-cholesky-basis; incremental Cholesky filtered SCF. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. ddd-function-kwargs; check distributed driver is correctly passing function kwargs. dct2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc13b; Tests RHF CCSD(T)gradients. cc17; Single point energies of multiple excited states with EOM-CCSD. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. dct9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. Th",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:10394,Energy Efficiency,energy,energy,10394,"; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. scf-cholesky-basis; incremental Cholesky filtered SCF. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. ddd-function-kwargs; check distributed driver is correctly passing function kwargs. dct2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc13b; Tests RHF CCSD(T)gradients. cc17; Single point energies of multiple excited states with EOM-CCSD. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. dct9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. cc46; EOM-CC2/cc-pVDZ on H2O2 with two e",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:10735,Energy Efficiency,energy,energy,10735," state of the CN radical, with Cartesian input. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. ddd-function-kwargs; check distributed driver is correctly passing function kwargs. dct2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc13b; Tests RHF CCSD(T)gradients. cc17; Single point energies of multiple excited states with EOM-CCSD. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. dct9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. scf-ecp3; Water-Argon complex with ECP present; check of UHF Hessian. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. pywrap-all; Intercalls amo",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:10890,Energy Efficiency,energy,energy,10890,"le\)). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. ddd-function-kwargs; check distributed driver is correctly passing function kwargs. dct2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc13b; Tests RHF CCSD(T)gradients. cc17; Single point energies of multiple excited states with EOM-CCSD. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. dct9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. scf-ecp3; Water-Argon complex with ECP present; check of UHF Hessian. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:11496,Energy Efficiency,energy,energy,11496,"pecifications of ghost atoms in a manual counterpoise correction. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. dct9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. scf-ecp3; Water-Argon complex with ECP present; check of UHF Hessian. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. fsaptd-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. dct-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BAS",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:11685,Energy Efficiency,energy,energy,11685,"; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. dct9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. scf-ecp3; Water-Argon complex with ECP present; check of UHF Hessian. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. fsaptd-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. dct-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cbs",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:11784,Energy Efficiency,energy,energy,11784,"in line -decontract option for basis sets. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. dct9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. scf-ecp3; Water-Argon complex with ECP present; check of UHF Hessian. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. fsaptd-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. dct-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cbs-xtpl-freq; Various gradients for a strained helium dimer an",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:12662,Energy Efficiency,energy,energy,12662,"2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. fsaptd-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. dct-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. sapt-compare; SAPT0 aug-cc-pVDZ computation of the water-water interaction energy, using the three SAPT codes. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. omp2-3; OMP2 cc-pVDZ energy for the NO radical. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t de",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:12847,Energy Efficiency,energy,energy,12847,"ons individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. fsaptd-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. dct-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. sapt-compare; SAPT0 aug-cc-pVDZ computation of the water-water interaction energy, using the three SAPT codes. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. omp2-3; OMP2 cc-pVDZ energy for the NO radical. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf-response2; Compute the dipole polarizability for water with custom basis set. scf-",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:13029,Energy Efficiency,energy,energy,13029,", with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. dct-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. sapt-compare; SAPT0 aug-cc-pVDZ computation of the water-water interaction energy, using the three SAPT codes. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. omp2-3; OMP2 cc-pVDZ energy for the NO radical. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf-response2; Compute the dipole polarizability for water with custom basis set. scf-guess-read3; Test if the the guess read in the same basis converges. scf-level-shift-uhf; SCF level shift on a UHF computation. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. dfccs",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:13287,Energy Efficiency,energy,energy,13287,"lti; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. dct-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. sapt-compare; SAPT0 aug-cc-pVDZ computation of the water-water interaction energy, using the three SAPT codes. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. omp2-3; OMP2 cc-pVDZ energy for the NO radical. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf-response2; Compute the dipole polarizability for water with custom basis set. scf-guess-read3; Test if the the guess read in the same basis converges. scf-level-shift-uhf; SCF level shift on a UHF computation. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cbs-xtpl-nbody; RHF interaction energies using ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:14057,Energy Efficiency,energy,energy,14057,"nd density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. omp2-3; OMP2 cc-pVDZ energy for the NO radical. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf-response2; Compute the dipole polarizability for water with custom basis set. scf-guess-read3; Test if the the guess read in the same basis converges. scf-level-shift-uhf; SCF level shift on a UHF computation. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cbs-xtpl-nbody; RHF interaction energies using nbody and cbs parts of the driver Ne dimer with mp2/v[dt]z + d:ccsd(t)/vdz. freq-masses; check nonphysical masses possible. scf-level-shift-cuhf; SCF level shift on a CUHF computation. dft-freq-analytic1; Analytic SVWN frequencies, compared to finite difference values. density-screen-1; RHF Density Matrix based-Integral Screening Test for water. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. mbis-2; MBIS calculation on OH- (Expanded Arrays). sapt-sf1; Tests the Psi4 SF-SAPT code. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. df",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:14185,Energy Efficiency,energy,energy,14185,"ensity fitting with ROHF. dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. omp2-3; OMP2 cc-pVDZ energy for the NO radical. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf-response2; Compute the dipole polarizability for water with custom basis set. scf-guess-read3; Test if the the guess read in the same basis converges. scf-level-shift-uhf; SCF level shift on a UHF computation. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cbs-xtpl-nbody; RHF interaction energies using nbody and cbs parts of the driver Ne dimer with mp2/v[dt]z + d:ccsd(t)/vdz. freq-masses; check nonphysical masses possible. scf-level-shift-cuhf; SCF level shift on a CUHF computation. dft-freq-analytic1; Analytic SVWN frequencies, compared to finite difference values. density-screen-1; RHF Density Matrix based-Integral Screening Test for water. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. mbis-2; MBIS calculation on OH- (Expanded Arrays). sapt-sf1; Tests the Psi4 SF-SAPT code. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. cc13d; Tests analytic CC2 gradients. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ c",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:14834,Energy Efficiency,energy,energy,14834," Test if the the guess read in the same basis converges. scf-level-shift-uhf; SCF level shift on a UHF computation. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cbs-xtpl-nbody; RHF interaction energies using nbody and cbs parts of the driver Ne dimer with mp2/v[dt]z + d:ccsd(t)/vdz. freq-masses; check nonphysical masses possible. scf-level-shift-cuhf; SCF level shift on a CUHF computation. dft-freq-analytic1; Analytic SVWN frequencies, compared to finite difference values. density-screen-1; RHF Density Matrix based-Integral Screening Test for water. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. mbis-2; MBIS calculation on OH- (Expanded Arrays). sapt-sf1; Tests the Psi4 SF-SAPT code. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. cc13d; Tests analytic CC2 gradients. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. olccd1; OLCCD cc-pVDZ energy for the H2O molecule. fsapt-ext-abc2; FSAPT with external charge on dimer. pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. cbs-xtpl-energy; Extrapolated water energies - density-fitted version. dforemp-grad2; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O+ molecul",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:15081,Energy Efficiency,energy,energy,15081,"e. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cbs-xtpl-nbody; RHF interaction energies using nbody and cbs parts of the driver Ne dimer with mp2/v[dt]z + d:ccsd(t)/vdz. freq-masses; check nonphysical masses possible. scf-level-shift-cuhf; SCF level shift on a CUHF computation. dft-freq-analytic1; Analytic SVWN frequencies, compared to finite difference values. density-screen-1; RHF Density Matrix based-Integral Screening Test for water. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. mbis-2; MBIS calculation on OH- (Expanded Arrays). sapt-sf1; Tests the Psi4 SF-SAPT code. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. cc13d; Tests analytic CC2 gradients. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. olccd1; OLCCD cc-pVDZ energy for the H2O molecule. fsapt-ext-abc2; FSAPT with external charge on dimer. pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. cbs-xtpl-energy; Extrapolated water energies - density-fitted version. dforemp-grad2; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O+ molecule. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) op",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:15173,Energy Efficiency,energy,energy,15173,"glet Oxygen energy SOSCF, also tests non-symmetric density matrices. cbs-xtpl-nbody; RHF interaction energies using nbody and cbs parts of the driver Ne dimer with mp2/v[dt]z + d:ccsd(t)/vdz. freq-masses; check nonphysical masses possible. scf-level-shift-cuhf; SCF level shift on a CUHF computation. dft-freq-analytic1; Analytic SVWN frequencies, compared to finite difference values. density-screen-1; RHF Density Matrix based-Integral Screening Test for water. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. mbis-2; MBIS calculation on OH- (Expanded Arrays). sapt-sf1; Tests the Psi4 SF-SAPT code. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. cc13d; Tests analytic CC2 gradients. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. olccd1; OLCCD cc-pVDZ energy for the H2O molecule. fsapt-ext-abc2; FSAPT with external charge on dimer. pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. cbs-xtpl-energy; Extrapolated water energies - density-fitted version. dforemp-grad2; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O+ molecule. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then i",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:15279,Energy Efficiency,energy,energy,15279,"s using nbody and cbs parts of the driver Ne dimer with mp2/v[dt]z + d:ccsd(t)/vdz. freq-masses; check nonphysical masses possible. scf-level-shift-cuhf; SCF level shift on a CUHF computation. dft-freq-analytic1; Analytic SVWN frequencies, compared to finite difference values. density-screen-1; RHF Density Matrix based-Integral Screening Test for water. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. mbis-2; MBIS calculation on OH- (Expanded Arrays). sapt-sf1; Tests the Psi4 SF-SAPT code. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. cc13d; Tests analytic CC2 gradients. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. olccd1; OLCCD cc-pVDZ energy for the H2O molecule. fsapt-ext-abc2; FSAPT with external charge on dimer. pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. cbs-xtpl-energy; Extrapolated water energies - density-fitted version. dforemp-grad2; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O+ molecule. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low mem",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:15344,Energy Efficiency,charge,charge,15344,"ith mp2/v[dt]z + d:ccsd(t)/vdz. freq-masses; check nonphysical masses possible. scf-level-shift-cuhf; SCF level shift on a CUHF computation. dft-freq-analytic1; Analytic SVWN frequencies, compared to finite difference values. density-screen-1; RHF Density Matrix based-Integral Screening Test for water. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. mbis-2; MBIS calculation on OH- (Expanded Arrays). sapt-sf1; Tests the Psi4 SF-SAPT code. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. cc13d; Tests analytic CC2 gradients. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. olccd1; OLCCD cc-pVDZ energy for the H2O molecule. fsapt-ext-abc2; FSAPT with external charge on dimer. pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. cbs-xtpl-energy; Extrapolated water energies - density-fitted version. dforemp-grad2; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O+ molecule. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. nbody-vmfc-hessian; Computation of VMFC-correct",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:15690,Energy Efficiency,energy,energy,15690,"MBIS calculation on OH- (Expanded Arrays). sapt-sf1; Tests the Psi4 SF-SAPT code. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. cc13d; Tests analytic CC2 gradients. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. olccd1; OLCCD cc-pVDZ energy for the H2O molecule. fsapt-ext-abc2; FSAPT with external charge on dimer. pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. cbs-xtpl-energy; Extrapolated water energies - density-fitted version. dforemp-grad2; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O+ molecule. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. nbody-vmfc-hessian; Computation of VMFC-corrected water trimer Hessian (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. nbody-hessian; Computation of VMFC-corrected HF dimer Hessian. cc13c; Tests RHF CCSD(T)gradients. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. sad1; Test of the superposition of atomic densities (SAD) guess, using",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:17639,Energy Efficiency,energy,energy,17639," of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. fci-dipole; 6-31G H2O Test FCI Energy Point. tdscf-5; td-camb3lyp with DiskDF and method/basis specification. dft-grac; Gradient regularized asymptotic correction (GRAC) test. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. scf-hess5; DF SCF 6-31G analytical vs finite-difference tests Tests DF UHF hessian code for Ca != Cb. linK-3; UHF and ROHF Linear Exchange Algorithm test for benzyl cation. scf7; Tests SCF gradient in the presence of a dipole field. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. fnocc2; Test G2 method for H2O. mints2-bse; Similar to mints2, but using the BSE to specify the basis sets. isapt-siao1; This test case shows an example of running the I-SAPT0/jun-cc-pVDZ computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:18750,Energy Efficiency,energy,energy,18750,"de for Ca != Cb. linK-3; UHF and ROHF Linear Exchange Algorithm test for benzyl cation. scf7; Tests SCF gradient in the presence of a dipole field. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. fnocc2; Test G2 method for H2O. mints2-bse; Similar to mints2, but using the BSE to specify the basis sets. isapt-siao1; This test case shows an example of running the I-SAPT0/jun-cc-pVDZ computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups) The SIAO1 link partitioning algorithm is used. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). fcidump; test FCIDUMP functionality for rhf/uhf. x2c-perturb-h; Test SFX2C-1e with a static electric field on He aug-cc-pVTZ. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:19294,Energy Efficiency,energy,energy,19294,"t that Python Molecule class processes geometry like psi4 Molecule class. fnocc2; Test G2 method for H2O. mints2-bse; Similar to mints2, but using the BSE to specify the basis sets. isapt-siao1; This test case shows an example of running the I-SAPT0/jun-cc-pVDZ computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups) The SIAO1 link partitioning algorithm is used. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). fcidump; test FCIDUMP functionality for rhf/uhf. x2c-perturb-h; Test SFX2C-1e with a static electric field on He aug-cc-pVTZ. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp2p5-1; OMP2.5 cc-pVDZ energy for the H2O molecule. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. scf-dipder; Test SCF dipole derivatives against old Ps",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:19618,Energy Efficiency,energy,energy,19618,"s used. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). fcidump; test FCIDUMP functionality for rhf/uhf. x2c-perturb-h; Test SFX2C-1e with a static electric field on He aug-cc-pVTZ. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp2p5-1; OMP2.5 cc-pVDZ energy for the H2O molecule. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. matrix2; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating. dft-grad-meta; meta-GGA gradients of water and ssh molecules reference gradients updated due to new BraggSlater radii. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). fsapt-ext; Quick test of external potenti",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:19909,Energy Efficiency,energy,energy,19909,"s = 0 component of the triplet. Uses ROHF triplet orbitals. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). fcidump; test FCIDUMP functionality for rhf/uhf. x2c-perturb-h; Test SFX2C-1e with a static electric field on He aug-cc-pVTZ. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp2p5-1; OMP2.5 cc-pVDZ energy for the H2O molecule. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. matrix2; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating. dft-grad-meta; meta-GGA gradients of water and ssh molecules reference gradients updated due to new BraggSlater radii. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). fsapt-ext; Quick test of external potential in F-SAPT (see fsapt1 for a real example). psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dct7; DCT calcula",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:20093,Energy Efficiency,energy,energy,20093,"cited state of H2O+ (B1 excitation). fcidump; test FCIDUMP functionality for rhf/uhf. x2c-perturb-h; Test SFX2C-1e with a static electric field on He aug-cc-pVTZ. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp2p5-1; OMP2.5 cc-pVDZ energy for the H2O molecule. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. matrix2; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating. dft-grad-meta; meta-GGA gradients of water and ssh molecules reference gradients updated due to new BraggSlater radii. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). fsapt-ext; Quick test of external potential in F-SAPT (see fsapt1 for a real example). psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dct7; DCT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. fd-freq-gradient; SCF STO-3G finite-diff",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:21034,Energy Efficiency,energy,energy,21034," natural orbital approximations. omp2p5-1; OMP2.5 cc-pVDZ energy for the H2O molecule. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. matrix2; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating. dft-grad-meta; meta-GGA gradients of water and ssh molecules reference gradients updated due to new BraggSlater radii. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). fsapt-ext; Quick test of external potential in F-SAPT (see fsapt1 for a real example). psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dct7; DCT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. stability3; Test LDA stability analysis against QChem. dct1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. scf-level-shift-rks; SCF level shift on an RKS computation. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. cc36; CC2(RHF)/cc-pVDZ energy of H2O. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. fnocc3; Test F",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:21930,Energy Efficiency,energy,energy,21930,"riplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. stability3; Test LDA stability analysis against QChem. dct1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. scf-level-shift-rks; SCF level shift on an RKS computation. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. cc36; CC2(RHF)/cc-pVDZ energy of H2O. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. fnocc3; Test FNO-QCISD(T) computation. frac-sym; Fractional occupation with symmetry. tdscf-7; TD-HF test variable access. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dft1-alt; DFT Functional Test. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). scf-upcast-custom-basis; test scf castup with custom basis sets. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the C",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:21975,Energy Efficiency,energy,energy,21975,"taneous algorithm is tested. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. stability3; Test LDA stability analysis against QChem. dct1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. scf-level-shift-rks; SCF level shift on an RKS computation. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. cc36; CC2(RHF)/cc-pVDZ energy of H2O. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. fnocc3; Test FNO-QCISD(T) computation. frac-sym; Fractional occupation with symmetry. tdscf-7; TD-HF test variable access. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dft1-alt; DFT Functional Test. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). scf-upcast-custom-basis; test scf castup with custom basis sets. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entrie",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:22253,Energy Efficiency,energy,energy,22253,"ns. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. stability3; Test LDA stability analysis against QChem. dct1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. scf-level-shift-rks; SCF level shift on an RKS computation. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. cc36; CC2(RHF)/cc-pVDZ energy of H2O. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. fnocc3; Test FNO-QCISD(T) computation. frac-sym; Fractional occupation with symmetry. tdscf-7; TD-HF test variable access. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dft1-alt; DFT Functional Test. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). scf-upcast-custom-basis; test scf castup with custom basis sets. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. cc31; CCSD/sto-3g",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:22571,Energy Efficiency,energy,energy,22571," performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. scf-level-shift-rks; SCF level shift on an RKS computation. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. cc36; CC2(RHF)/cc-pVDZ energy of H2O. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. fnocc3; Test FNO-QCISD(T) computation. frac-sym; Fractional occupation with symmetry. tdscf-7; TD-HF test variable access. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dft1-alt; DFT Functional Test. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). scf-upcast-custom-basis; test scf castup with custom basis sets. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. mints3; Test individual integral objects for correctness. dft-custom; DFT custom functional test. lccd-grad1; LCCD cc-pVDZ gradient for the H2O molecule. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. dfmp2-freq1",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:23190,Energy Efficiency,energy,energy,23190,"y-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dft1-alt; DFT Functional Test. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). scf-upcast-custom-basis; test scf castup with custom basis sets. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. mints3; Test individual integral objects for correctness. dft-custom; DFT custom functional test. lccd-grad1; LCCD cc-pVDZ gradient for the H2O molecule. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. soscf-large; Second-order SCF convergnece: Benzene. opt16; SCF 6-31G(d) optimization of TS for HCN to HNC Performs finite difference hessian calculation. Then optimizes using previous orbitals for scf guess, in subsequent calculations. The last two displacements of the hessian break the plane of symemtry, This test confirms that only the reference geometry, with the correct symmetry, writes orbitals to disk. SCF will fail (ValidationError) otherwise. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:23494,Energy Efficiency,energy,energy,23494,"; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). scf-upcast-custom-basis; test scf castup with custom basis sets. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. mints3; Test individual integral objects for correctness. dft-custom; DFT custom functional test. lccd-grad1; LCCD cc-pVDZ gradient for the H2O molecule. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. soscf-large; Second-order SCF convergnece: Benzene. opt16; SCF 6-31G(d) optimization of TS for HCN to HNC Performs finite difference hessian calculation. Then optimizes using previous orbitals for scf guess, in subsequent calculations. The last two displacements of the hessian break the plane of symemtry, This test confirms that only the reference geometry, with the correct symmetry, writes orbitals to disk. SCF will fail (ValidationError) otherwise. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). casscf-fzc-sp; CASSCF/6-31G** energy point. scf-coverage; Lithium test for coverage. olccd3; OLCCD cc-pVDZ energy with ROHF initial guess for the NO radical. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. dfmp2-2; Density fitted MP2 energ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:23530,Energy Efficiency,energy,energy,23530,"; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). scf-upcast-custom-basis; test scf castup with custom basis sets. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. mints3; Test individual integral objects for correctness. dft-custom; DFT custom functional test. lccd-grad1; LCCD cc-pVDZ gradient for the H2O molecule. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. soscf-large; Second-order SCF convergnece: Benzene. opt16; SCF 6-31G(d) optimization of TS for HCN to HNC Performs finite difference hessian calculation. Then optimizes using previous orbitals for scf guess, in subsequent calculations. The last two displacements of the hessian break the plane of symemtry, This test confirms that only the reference geometry, with the correct symmetry, writes orbitals to disk. SCF will fail (ValidationError) otherwise. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). casscf-fzc-sp; CASSCF/6-31G** energy point. scf-coverage; Lithium test for coverage. olccd3; OLCCD cc-pVDZ energy with ROHF initial guess for the NO radical. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. dfmp2-2; Density fitted MP2 energ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:24092,Energy Efficiency,energy,energy,24092,"enzene, computed at the DF-SCF cc-pVDZ geometry. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. mints3; Test individual integral objects for correctness. dft-custom; DFT custom functional test. lccd-grad1; LCCD cc-pVDZ gradient for the H2O molecule. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. soscf-large; Second-order SCF convergnece: Benzene. opt16; SCF 6-31G(d) optimization of TS for HCN to HNC Performs finite difference hessian calculation. Then optimizes using previous orbitals for scf guess, in subsequent calculations. The last two displacements of the hessian break the plane of symemtry, This test confirms that only the reference geometry, with the correct symmetry, writes orbitals to disk. SCF will fail (ValidationError) otherwise. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). casscf-fzc-sp; CASSCF/6-31G** energy point. scf-coverage; Lithium test for coverage. olccd3; OLCCD cc-pVDZ energy with ROHF initial guess for the NO radical. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. cisd-sp; 6-31G** H2O Test CISD Energy Point. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dct4; DCT calculation for the HF+ using DC-06 functional. This performs both two-step",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:24296,Energy Efficiency,energy,energy,24296,"frequencies on methyloxirane. mints3; Test individual integral objects for correctness. dft-custom; DFT custom functional test. lccd-grad1; LCCD cc-pVDZ gradient for the H2O molecule. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. soscf-large; Second-order SCF convergnece: Benzene. opt16; SCF 6-31G(d) optimization of TS for HCN to HNC Performs finite difference hessian calculation. Then optimizes using previous orbitals for scf guess, in subsequent calculations. The last two displacements of the hessian break the plane of symemtry, This test confirms that only the reference geometry, with the correct symmetry, writes orbitals to disk. SCF will fail (ValidationError) otherwise. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). casscf-fzc-sp; CASSCF/6-31G** energy point. scf-coverage; Lithium test for coverage. olccd3; OLCCD cc-pVDZ energy with ROHF initial guess for the NO radical. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. cisd-sp; 6-31G** H2O Test CISD Energy Point. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dct4; DCT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:24373,Energy Efficiency,energy,energy,24373," DFT custom functional test. lccd-grad1; LCCD cc-pVDZ gradient for the H2O molecule. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. soscf-large; Second-order SCF convergnece: Benzene. opt16; SCF 6-31G(d) optimization of TS for HCN to HNC Performs finite difference hessian calculation. Then optimizes using previous orbitals for scf guess, in subsequent calculations. The last two displacements of the hessian break the plane of symemtry, This test confirms that only the reference geometry, with the correct symmetry, writes orbitals to disk. SCF will fail (ValidationError) otherwise. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). casscf-fzc-sp; CASSCF/6-31G** energy point. scf-coverage; Lithium test for coverage. olccd3; OLCCD cc-pVDZ energy with ROHF initial guess for the NO radical. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. cisd-sp; 6-31G** H2O Test CISD Energy Point. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dct4; DCT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:24506,Energy Efficiency,energy,energy,24506,"butions. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. soscf-large; Second-order SCF convergnece: Benzene. opt16; SCF 6-31G(d) optimization of TS for HCN to HNC Performs finite difference hessian calculation. Then optimizes using previous orbitals for scf guess, in subsequent calculations. The last two displacements of the hessian break the plane of symemtry, This test confirms that only the reference geometry, with the correct symmetry, writes orbitals to disk. SCF will fail (ValidationError) otherwise. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). casscf-fzc-sp; CASSCF/6-31G** energy point. scf-coverage; Lithium test for coverage. olccd3; OLCCD cc-pVDZ energy with ROHF initial guess for the NO radical. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. cisd-sp; 6-31G** H2O Test CISD Energy Point. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dct4; DCT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. props4; Electrostatic potential and electric ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:24983,Energy Efficiency,charge,charge,24983," the correct symmetry, writes orbitals to disk. SCF will fail (ValidationError) otherwise. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). casscf-fzc-sp; CASSCF/6-31G** energy point. scf-coverage; Lithium test for coverage. olccd3; OLCCD cc-pVDZ energy with ROHF initial guess for the NO radical. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. cisd-sp; 6-31G** H2O Test CISD Energy Point. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dct4; DCT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. props4; Electrostatic potential and electric field evaluated on a grid around water. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mp2-1; All-electron MP2 6-31G** geometry optimization of water. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specifi",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:24999,Energy Efficiency,energy,energy,24999," the correct symmetry, writes orbitals to disk. SCF will fail (ValidationError) otherwise. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). casscf-fzc-sp; CASSCF/6-31G** energy point. scf-coverage; Lithium test for coverage. olccd3; OLCCD cc-pVDZ energy with ROHF initial guess for the NO radical. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. cisd-sp; 6-31G** H2O Test CISD Energy Point. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dct4; DCT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. props4; Electrostatic potential and electric field evaluated on a grid around water. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mp2-1; All-electron MP2 6-31G** geometry optimization of water. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specifi",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:25266,Energy Efficiency,energy,energy,25266,"n, IJQC 98, 601-611 (1998). casscf-fzc-sp; CASSCF/6-31G** energy point. scf-coverage; Lithium test for coverage. olccd3; OLCCD cc-pVDZ energy with ROHF initial guess for the NO radical. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. cisd-sp; 6-31G** H2O Test CISD Energy Point. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dct4; DCT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. props4; Electrostatic potential and electric field evaluated on a grid around water. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mp2-1; All-electron MP2 6-31G** geometry optimization of water. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. tdscf-3; td-wb97x excitation energies of singlet states of h2o, wfn passing. dft2; DFT Functional Test. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. aediis-1; ADIIS test case, from 10.1063/1.3304922. soscf-dft; Tri",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:25666,Energy Efficiency,energy,energy,25666,"ns by using the default options and by specifiying the format. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. cisd-sp; 6-31G** H2O Test CISD Energy Point. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dct4; DCT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. props4; Electrostatic potential and electric field evaluated on a grid around water. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mp2-1; All-electron MP2 6-31G** geometry optimization of water. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. tdscf-3; td-wb97x excitation energies of singlet states of h2o, wfn passing. dft2; DFT Functional Test. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. aediis-1; ADIIS test case, from 10.1063/1.3304922. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. fsapt-ext-abc; FSAPT with external charge on trimer. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. dft-reference; MP2 with a PBE0 reference computation. dft1; DFT Functional Test all values update for new BraggSlater radii. dfmp2-freq2; DF-MP2 frequency by differ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:25878,Energy Efficiency,energy,energy,25878,"ing scs-mp2. cisd-sp; 6-31G** H2O Test CISD Energy Point. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dct4; DCT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. props4; Electrostatic potential and electric field evaluated on a grid around water. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mp2-1; All-electron MP2 6-31G** geometry optimization of water. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. tdscf-3; td-wb97x excitation energies of singlet states of h2o, wfn passing. dft2; DFT Functional Test. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. aediis-1; ADIIS test case, from 10.1063/1.3304922. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. fsapt-ext-abc; FSAPT with external charge on trimer. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. dft-reference; MP2 with a PBE0 reference computation. dft1; DFT Functional Test all values update for new BraggSlater radii. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. ddd-deriv; Sample HF/cc-pVDZ H2O computation all derivatives. nbody-multi-level-2; many-body different levels of theory on each body of helium tetramer. mom; Maximum Overlap Method (MOM) Tes",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:26145,Energy Efficiency,energy,energy,26145,"rbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. props4; Electrostatic potential and electric field evaluated on a grid around water. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mp2-1; All-electron MP2 6-31G** geometry optimization of water. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. tdscf-3; td-wb97x excitation energies of singlet states of h2o, wfn passing. dft2; DFT Functional Test. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. aediis-1; ADIIS test case, from 10.1063/1.3304922. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. fsapt-ext-abc; FSAPT with external charge on trimer. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. dft-reference; MP2 with a PBE0 reference computation. dft1; DFT Functional Test all values update for new BraggSlater radii. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. ddd-deriv; Sample HF/cc-pVDZ H2O computation all derivatives. nbody-multi-level-2; many-body different levels of theory on each body of helium tetramer. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:26261,Energy Efficiency,energy,energy,26261,"gy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. props4; Electrostatic potential and electric field evaluated on a grid around water. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mp2-1; All-electron MP2 6-31G** geometry optimization of water. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. tdscf-3; td-wb97x excitation energies of singlet states of h2o, wfn passing. dft2; DFT Functional Test. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. aediis-1; ADIIS test case, from 10.1063/1.3304922. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. fsapt-ext-abc; FSAPT with external charge on trimer. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. dft-reference; MP2 with a PBE0 reference computation. dft1; DFT Functional Test all values update for new BraggSlater radii. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. ddd-deriv; Sample HF/cc-pVDZ H2O computation all derivatives. nbody-multi-level-2; many-body different levels of theory on each body of helium tetramer. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. td",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:26400,Energy Efficiency,charge,charge,26400,"tual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. props4; Electrostatic potential and electric field evaluated on a grid around water. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mp2-1; All-electron MP2 6-31G** geometry optimization of water. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. tdscf-3; td-wb97x excitation energies of singlet states of h2o, wfn passing. dft2; DFT Functional Test. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. aediis-1; ADIIS test case, from 10.1063/1.3304922. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. fsapt-ext-abc; FSAPT with external charge on trimer. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. dft-reference; MP2 with a PBE0 reference computation. dft1; DFT Functional Test all values update for new BraggSlater radii. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. ddd-deriv; Sample HF/cc-pVDZ H2O computation all derivatives. nbody-multi-level-2; many-body different levels of theory on each body of helium tetramer. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. tdscf-1; td-uhf test on triplet states of methylene (rpa). omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. nbody-in",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:27535,Energy Efficiency,energy,energy,27535,"ence computation. dft1; DFT Functional Test all values update for new BraggSlater radii. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. ddd-deriv; Sample HF/cc-pVDZ H2O computation all derivatives. nbody-multi-level-2; many-body different levels of theory on each body of helium tetramer. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. tdscf-1; td-uhf test on triplet states of methylene (rpa). omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. dfccsd-t-grad2; DF-CCSD(T) cc-pVDZ gr",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:28384,Energy Efficiency,energy,energy,28384,"rmediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. dfccsd-t-grad2; DF-CCSD(T) cc-pVDZ gradient for the NH molecule. cdremp-2; Cholesky decomposed REMP/cc-pVDZ energies for the CH3 radical. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. mbis-1; MBIS calculation on H2O. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:28646,Energy Efficiency,energy,energy-large,28646,"re computation has actually converged to the expected accuracy. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. dfccsd-t-grad2; DF-CCSD(T) cc-pVDZ gradient for the NH molecule. cdremp-2; Cholesky decomposed REMP/cc-pVDZ energies for the CH3 radical. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. mbis-1; MBIS calculation on H2O. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:29060,Energy Efficiency,energy,energy,29060,"eed only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. dfccsd-t-grad2; DF-CCSD(T) cc-pVDZ gradient for the NH molecule. cdremp-2; Cholesky decomposed REMP/cc-pVDZ energies for the CH3 radical. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. mbis-1; MBIS calculation on H2O. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. cc52; CCSD Res",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:29284,Energy Efficiency,energy,energy,29284,"C for HOOH torsional rotation at the RHF/DZP level of theory. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. dfccsd-t-grad2; DF-CCSD(T) cc-pVDZ gradient for the NH molecule. cdremp-2; Cholesky decomposed REMP/cc-pVDZ energies for the CH3 radical. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. mbis-1; MBIS calculation on H2O. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. cc52; CCSD Response for H2O2. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition an",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:29748,Energy Efficiency,energy,energy,29748,"st of implementations in: hybrid_superfuncs.py. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. mbis-1; MBIS calculation on H2O. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. cc52; CCSD Response for H2O2. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. dft-custom-mgga; updated dldf reference to new BraggSlater radii Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett.",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:31072,Energy Efficiency,energy,energy,31072,"es and doubles in the active space. cc52; CCSD Response for H2O2. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. dft-custom-mgga; updated dldf reference to new BraggSlater radii Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. linK-2; RKS Linear Exchange Algorithm test for benzene. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. ao-dfcasscf-sp; CASSCF/6-31G** energy point. cbs-parser; mtd/basis syntax examples. dlpnomp2-3; comparison of DF-MP2 and DLPNO-MP2 with a cartesian basis set. fisapt-siao1; This test case shows an example of running the I-SAPT0/jun-cc-pVDZ computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups) The SIAO1 link partitioning algorithm is used. An F-SAPT partitioning follows I-SAPT. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. dft-jk; DFT JK on-disk test. cubeprop-esp; RHF orbitals and density for water. cbs-delta-energy; Extrapolated energies with delta correction. dfcasscf-sp; CASSCF/6-31G** energy point. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. fsapt-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. dfo",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:31135,Energy Efficiency,energy,energy,31135,"2O2. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. dft-custom-mgga; updated dldf reference to new BraggSlater radii Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. linK-2; RKS Linear Exchange Algorithm test for benzene. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. ao-dfcasscf-sp; CASSCF/6-31G** energy point. cbs-parser; mtd/basis syntax examples. dlpnomp2-3; comparison of DF-MP2 and DLPNO-MP2 with a cartesian basis set. fisapt-siao1; This test case shows an example of running the I-SAPT0/jun-cc-pVDZ computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups) The SIAO1 link partitioning algorithm is used. An F-SAPT partitioning follows I-SAPT. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. dft-jk; DFT JK on-disk test. cubeprop-esp; RHF orbitals and density for water. cbs-delta-energy; Extrapolated energies with delta correction. dfcasscf-sp; CASSCF/6-31G** energy point. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. fsapt-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. dforemp-grad1; density fitted OO-REMP/cc-pVDZ engrad single poin",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:31560,Energy Efficiency,energy,energy,31560,"gSlater radii Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. linK-2; RKS Linear Exchange Algorithm test for benzene. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. ao-dfcasscf-sp; CASSCF/6-31G** energy point. cbs-parser; mtd/basis syntax examples. dlpnomp2-3; comparison of DF-MP2 and DLPNO-MP2 with a cartesian basis set. fisapt-siao1; This test case shows an example of running the I-SAPT0/jun-cc-pVDZ computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups) The SIAO1 link partitioning algorithm is used. An F-SAPT partitioning follows I-SAPT. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. dft-jk; DFT JK on-disk test. cubeprop-esp; RHF orbitals and density for water. cbs-delta-energy; Extrapolated energies with delta correction. dfcasscf-sp; CASSCF/6-31G** energy point. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. fsapt-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. dforemp-grad1; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O molecule. scf-hess4; DF SCF 6-31G UHFl vs RHF test Tests DF UHF hessian code for Ca = Cb. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_DISPERSION_PARAMETERS tuple updated ‘bench’ reference values for new BraggSlater radii. dct-grad4; Unrestricted DF-DCT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. cc12; Single",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:31709,Energy Efficiency,energy,energy,31709," et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. linK-2; RKS Linear Exchange Algorithm test for benzene. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. ao-dfcasscf-sp; CASSCF/6-31G** energy point. cbs-parser; mtd/basis syntax examples. dlpnomp2-3; comparison of DF-MP2 and DLPNO-MP2 with a cartesian basis set. fisapt-siao1; This test case shows an example of running the I-SAPT0/jun-cc-pVDZ computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups) The SIAO1 link partitioning algorithm is used. An F-SAPT partitioning follows I-SAPT. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. dft-jk; DFT JK on-disk test. cubeprop-esp; RHF orbitals and density for water. cbs-delta-energy; Extrapolated energies with delta correction. dfcasscf-sp; CASSCF/6-31G** energy point. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. fsapt-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. dforemp-grad1; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O molecule. scf-hess4; DF SCF 6-31G UHFl vs RHF test Tests DF UHF hessian code for Ca = Cb. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_DISPERSION_PARAMETERS tuple updated ‘bench’ reference values for new BraggSlater radii. dct-grad4; Unrestricted DF-DCT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. cc12; Single point energies of multiple excited states with EOM-CCSD. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:31790,Energy Efficiency,energy,energy,31790,"alewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. linK-2; RKS Linear Exchange Algorithm test for benzene. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. ao-dfcasscf-sp; CASSCF/6-31G** energy point. cbs-parser; mtd/basis syntax examples. dlpnomp2-3; comparison of DF-MP2 and DLPNO-MP2 with a cartesian basis set. fisapt-siao1; This test case shows an example of running the I-SAPT0/jun-cc-pVDZ computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups) The SIAO1 link partitioning algorithm is used. An F-SAPT partitioning follows I-SAPT. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. dft-jk; DFT JK on-disk test. cubeprop-esp; RHF orbitals and density for water. cbs-delta-energy; Extrapolated energies with delta correction. dfcasscf-sp; CASSCF/6-31G** energy point. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. fsapt-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. dforemp-grad1; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O molecule. scf-hess4; DF SCF 6-31G UHFl vs RHF test Tests DF UHF hessian code for Ca = Cb. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_DISPERSION_PARAMETERS tuple updated ‘bench’ reference values for new BraggSlater radii. dct-grad4; Unrestricted DF-DCT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. cc12; Single point energies of multiple excited states with EOM-CCSD. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. scf-ecp2; Water-Argon complex with ECP ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:31841,Energy Efficiency,energy,energy,31841,"VDZ gradient for the H2O molecule. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. linK-2; RKS Linear Exchange Algorithm test for benzene. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. ao-dfcasscf-sp; CASSCF/6-31G** energy point. cbs-parser; mtd/basis syntax examples. dlpnomp2-3; comparison of DF-MP2 and DLPNO-MP2 with a cartesian basis set. fisapt-siao1; This test case shows an example of running the I-SAPT0/jun-cc-pVDZ computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups) The SIAO1 link partitioning algorithm is used. An F-SAPT partitioning follows I-SAPT. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. dft-jk; DFT JK on-disk test. cubeprop-esp; RHF orbitals and density for water. cbs-delta-energy; Extrapolated energies with delta correction. dfcasscf-sp; CASSCF/6-31G** energy point. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. fsapt-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. dforemp-grad1; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O molecule. scf-hess4; DF SCF 6-31G UHFl vs RHF test Tests DF UHF hessian code for Ca = Cb. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_DISPERSION_PARAMETERS tuple updated ‘bench’ reference values for new BraggSlater radii. dct-grad4; Unrestricted DF-DCT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. cc12; Single point energies of multiple excited states with EOM-CCSD. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. scf-ecp2; Water-Argon complex with ECP present; check of RHF Hessian. explicit-am-basis; Check that basis sets can be",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:32978,Energy Efficiency,energy,energy,32978,"e. fsapt-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. dforemp-grad1; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O molecule. scf-hess4; DF SCF 6-31G UHFl vs RHF test Tests DF UHF hessian code for Ca = Cb. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_DISPERSION_PARAMETERS tuple updated ‘bench’ reference values for new BraggSlater radii. dct-grad4; Unrestricted DF-DCT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. cc12; Single point energies of multiple excited states with EOM-CCSD. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. scf-ecp2; Water-Argon complex with ECP present; check of RHF Hessian. explicit-am-basis; Check that basis sets can be input with explicit angular momentum format. mbis-3; MBIS calculation on OH radical. dfccsdat2; DF-A-CCSD(T) cc-pVDZ energy for the NH molecule. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. dfccsdt2; DF-CCSD(T) cc-pVDZ energy for the NH molecule. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dfremp-2; density fitted REMP/cc-pVDZ energies for the CH3 radical. mints-helper; A general test of the MintsHelper function. dct-grad3; Restricted DF-DCT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. mp2-h; check that methods can act on single atom. dfep2-2; Compute three IP and",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:33116,Energy Efficiency,energy,energy,33116,"O molecule. scf-hess4; DF SCF 6-31G UHFl vs RHF test Tests DF UHF hessian code for Ca = Cb. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_DISPERSION_PARAMETERS tuple updated ‘bench’ reference values for new BraggSlater radii. dct-grad4; Unrestricted DF-DCT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. cc12; Single point energies of multiple excited states with EOM-CCSD. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. scf-ecp2; Water-Argon complex with ECP present; check of RHF Hessian. explicit-am-basis; Check that basis sets can be input with explicit angular momentum format. mbis-3; MBIS calculation on OH radical. dfccsdat2; DF-A-CCSD(T) cc-pVDZ energy for the NH molecule. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. dfccsdt2; DF-CCSD(T) cc-pVDZ energy for the NH molecule. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dfremp-2; density fitted REMP/cc-pVDZ energies for the CH3 radical. mints-helper; A general test of the MintsHelper function. dct-grad3; Restricted DF-DCT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. mp2-h; check that methods can act on single atom. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. cdremp-1; Cholesky decomposed REMP/cc-pVDZ energies for the CO2 molecule. cbs-xtpl-opt; Various extrapolated optimization methods for t",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:33435,Energy Efficiency,energy,energy,33435,"12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. cc12; Single point energies of multiple excited states with EOM-CCSD. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. scf-ecp2; Water-Argon complex with ECP present; check of RHF Hessian. explicit-am-basis; Check that basis sets can be input with explicit angular momentum format. mbis-3; MBIS calculation on OH radical. dfccsdat2; DF-A-CCSD(T) cc-pVDZ energy for the NH molecule. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. dfccsdt2; DF-CCSD(T) cc-pVDZ energy for the NH molecule. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dfremp-2; density fitted REMP/cc-pVDZ energies for the CH3 radical. mints-helper; A general test of the MintsHelper function. dct-grad3; Restricted DF-DCT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. mp2-h; check that methods can act on single atom. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. cdremp-1; Cholesky decomposed REMP/cc-pVDZ energies for the CO2 molecule. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. lccd-grad2; LCCD cc-pVDZ gradient for the NO radical. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). tdscf-6; td-camb3lyp with DiskDF and method/basis specification. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:33500,Energy Efficiency,energy,energy,33500,"; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. cc12; Single point energies of multiple excited states with EOM-CCSD. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. scf-ecp2; Water-Argon complex with ECP present; check of RHF Hessian. explicit-am-basis; Check that basis sets can be input with explicit angular momentum format. mbis-3; MBIS calculation on OH radical. dfccsdat2; DF-A-CCSD(T) cc-pVDZ energy for the NH molecule. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. dfccsdt2; DF-CCSD(T) cc-pVDZ energy for the NH molecule. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dfremp-2; density fitted REMP/cc-pVDZ energies for the CH3 radical. mints-helper; A general test of the MintsHelper function. dct-grad3; Restricted DF-DCT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. mp2-h; check that methods can act on single atom. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. cdremp-1; Cholesky decomposed REMP/cc-pVDZ energies for the CO2 molecule. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. lccd-grad2; LCCD cc-pVDZ gradient for the NO radical. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). tdscf-6; td-camb3lyp with DiskDF and method/basis specification. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. casscf-sp; CASSCF/6-31G** energy",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:34374,Energy Efficiency,energy,energy,34374,"-SCF frequency test for water. dfccsdt2; DF-CCSD(T) cc-pVDZ energy for the NH molecule. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dfremp-2; density fitted REMP/cc-pVDZ energies for the CH3 radical. mints-helper; A general test of the MintsHelper function. dct-grad3; Restricted DF-DCT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. mp2-h; check that methods can act on single atom. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. cdremp-1; Cholesky decomposed REMP/cc-pVDZ energies for the CO2 molecule. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. lccd-grad2; LCCD cc-pVDZ gradient for the NO radical. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). tdscf-6; td-camb3lyp with DiskDF and method/basis specification. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. casscf-sp; CASSCF/6-31G** energy point. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cbs-xtpl-func; optimization with method defined via cbs. omp3-2; OMP3 cc-pCVDZ energy with ROHF initial guess for the NO radical. dfmp2-fc; Kr–Kr nocp energies with all-electron basis set to check frozen core. scf-occ; force occupations in scf. cdoremp-energy2; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O+ molecule. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. cc5; RHF CCSD(T) cc-pVDZ frozen-core energy of C4NH4 Anion. aediis-2; EDIIS test case from 10.1063/1.1470195. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct in",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:34513,Energy Efficiency,energy,energy,34513," for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dfremp-2; density fitted REMP/cc-pVDZ energies for the CH3 radical. mints-helper; A general test of the MintsHelper function. dct-grad3; Restricted DF-DCT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. mp2-h; check that methods can act on single atom. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. cdremp-1; Cholesky decomposed REMP/cc-pVDZ energies for the CO2 molecule. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. lccd-grad2; LCCD cc-pVDZ gradient for the NO radical. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). tdscf-6; td-camb3lyp with DiskDF and method/basis specification. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. casscf-sp; CASSCF/6-31G** energy point. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cbs-xtpl-func; optimization with method defined via cbs. omp3-2; OMP3 cc-pCVDZ energy with ROHF initial guess for the NO radical. dfmp2-fc; Kr–Kr nocp energies with all-electron basis set to check frozen core. scf-occ; force occupations in scf. cdoremp-energy2; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O+ molecule. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. cc5; RHF CCSD(T) cc-pVDZ frozen-core energy of C4NH4 Anion. aediis-2; EDIIS test case from 10.1063/1.1470195. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. isapt2; This is a shorter version if isa",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:34695,Energy Efficiency,energy,energy,34695,"ad3; Restricted DF-DCT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. mp2-h; check that methods can act on single atom. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. cdremp-1; Cholesky decomposed REMP/cc-pVDZ energies for the CO2 molecule. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. lccd-grad2; LCCD cc-pVDZ gradient for the NO radical. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). tdscf-6; td-camb3lyp with DiskDF and method/basis specification. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. casscf-sp; CASSCF/6-31G** energy point. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cbs-xtpl-func; optimization with method defined via cbs. omp3-2; OMP3 cc-pCVDZ energy with ROHF initial guess for the NO radical. dfmp2-fc; Kr–Kr nocp energies with all-electron basis set to check frozen core. scf-occ; force occupations in scf. cdoremp-energy2; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O+ molecule. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. cc5; RHF CCSD(T) cc-pVDZ frozen-core energy of C4NH4 Anion. aediis-2; EDIIS test case from 10.1063/1.1470195. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:35151,Energy Efficiency,energy,energy,35151,"H2 molecule. lccd-grad2; LCCD cc-pVDZ gradient for the NO radical. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). tdscf-6; td-camb3lyp with DiskDF and method/basis specification. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. casscf-sp; CASSCF/6-31G** energy point. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cbs-xtpl-func; optimization with method defined via cbs. omp3-2; OMP3 cc-pCVDZ energy with ROHF initial guess for the NO radical. dfmp2-fc; Kr–Kr nocp energies with all-electron basis set to check frozen core. scf-occ; force occupations in scf. cdoremp-energy2; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O+ molecule. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. cc5; RHF CCSD(T) cc-pVDZ frozen-core energy of C4NH4 Anion. aediis-2; EDIIS test case from 10.1063/1.1470195. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). fci-coverage; 6-31G H2O Test for coverage. dlpnomp2-1; comparison of DF-MP2 and DLPNO-MP2. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. mbis-4; MBIS calculation on NaC",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:35283,Energy Efficiency,energy,energy,35283,"ation. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. casscf-sp; CASSCF/6-31G** energy point. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cbs-xtpl-func; optimization with method defined via cbs. omp3-2; OMP3 cc-pCVDZ energy with ROHF initial guess for the NO radical. dfmp2-fc; Kr–Kr nocp energies with all-electron basis set to check frozen core. scf-occ; force occupations in scf. cdoremp-energy2; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O+ molecule. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. cc5; RHF CCSD(T) cc-pVDZ frozen-core energy of C4NH4 Anion. aediis-2; EDIIS test case from 10.1063/1.1470195. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). fci-coverage; 6-31G H2O Test for coverage. dlpnomp2-1; comparison of DF-MP2 and DLPNO-MP2. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. mbis-4; MBIS calculation on NaCl. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. dfomp2-3; OMP2 cc",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:35590,Energy Efficiency,energy,energy,35590," via analytic gradients. cbs-xtpl-func; optimization with method defined via cbs. omp3-2; OMP3 cc-pCVDZ energy with ROHF initial guess for the NO radical. dfmp2-fc; Kr–Kr nocp energies with all-electron basis set to check frozen core. scf-occ; force occupations in scf. cdoremp-energy2; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O+ molecule. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. cc5; RHF CCSD(T) cc-pVDZ frozen-core energy of C4NH4 Anion. aediis-2; EDIIS test case from 10.1063/1.1470195. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). fci-coverage; 6-31G H2O Test for coverage. dlpnomp2-1; comparison of DF-MP2 and DLPNO-MP2. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. mbis-4; MBIS calculation on NaCl. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. pywrap-cbs1; Various basis set extrapolation tests. dct-grad1; Various DCT analytic gradients for the O2 molecule with 6-31G basis set. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. dct1",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:36080,Energy Efficiency,energy,energy,36080," 034108 (2006) paper defining the functional. cc5; RHF CCSD(T) cc-pVDZ frozen-core energy of C4NH4 Anion. aediis-2; EDIIS test case from 10.1063/1.1470195. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). fci-coverage; 6-31G H2O Test for coverage. dlpnomp2-1; comparison of DF-MP2 and DLPNO-MP2. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. mbis-4; MBIS calculation on NaCl. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. pywrap-cbs1; Various basis set extrapolation tests. dct-grad1; Various DCT analytic gradients for the O2 molecule with 6-31G basis set. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. dct10; The multiple guesses for DCT amplitudes for ODC-12. mom-h2o-3; MOM excitation from LUMO HOMO+3. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:36350,Energy Efficiency,energy,energy,36350,"with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). fci-coverage; 6-31G H2O Test for coverage. dlpnomp2-1; comparison of DF-MP2 and DLPNO-MP2. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. mbis-4; MBIS calculation on NaCl. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. pywrap-cbs1; Various basis set extrapolation tests. dct-grad1; Various DCT analytic gradients for the O2 molecule with 6-31G basis set. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. dct10; The multiple guesses for DCT amplitudes for ODC-12. mom-h2o-3; MOM excitation from LUMO HOMO+3. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. nbo; Generation of NBO file. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. fsapt1; This test case shows an example of running and an",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:36920,Energy Efficiency,energy,energy,36920,"o and testing purposes. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. mbis-4; MBIS calculation on NaCl. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. pywrap-cbs1; Various basis set extrapolation tests. dct-grad1; Various DCT analytic gradients for the O2 molecule with 6-31G basis set. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. dct10; The multiple guesses for DCT amplitudes for ODC-12. mom-h2o-3; MOM excitation from LUMO HOMO+3. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. nbo; Generation of NBO file. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. scf-hess3; CONV SCF 6-31G analytical vs finite-difference tests Tests UHF hessian code for Ca != Cb. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. mbis-5; MBIS calculation on ZnO. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. fd-gradient; SCF STO-3G finite-difference tests. opt15; 6-31G(d) optimization of",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:37128,Energy Efficiency,energy,energy,37128,"on NaCl. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. pywrap-cbs1; Various basis set extrapolation tests. dct-grad1; Various DCT analytic gradients for the O2 molecule with 6-31G basis set. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. dct10; The multiple guesses for DCT amplitudes for ODC-12. mom-h2o-3; MOM excitation from LUMO HOMO+3. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. nbo; Generation of NBO file. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. scf-hess3; CONV SCF 6-31G analytical vs finite-difference tests Tests UHF hessian code for Ca != Cb. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. mbis-5; MBIS calculation on ZnO. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. fd-gradient; SCF STO-3G finite-difference tests. opt15; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. C",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:38604,Energy Efficiency,energy,energy-conv,38604," cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. mbis-5; MBIS calculation on ZnO. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. fd-gradient; SCF STO-3G finite-difference tests. opt15; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. scf3; File retention, docc, socc, and bond distances specified explicitly. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. options1; check all variety of options parsing. cbs-xtpl-energy-conv; Extrapolated water energies - conventional integrals version. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. isapt-charged; This test case shows an example of running the I-SAPT0/aug-cc-pVDZ computation for a positively charged system, illustrating the cation-pi interaction. The SIAO1 link partitioning algorithm is used. The system is taken from http://dx.doi.org/10.1016/j.comptc.2014.02.008. fnocc7; Test fnocc with linear dependencies. fnocc6; Test method/basis with disk_df. tdscf-2; td-uhf test on triplet states of methylene (tda), wfn passing. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic cou",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:38886,Energy Efficiency,charge,charged,38886," not linear in the optimized structure but is in a symmetry plane of the molecule. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. scf3; File retention, docc, socc, and bond distances specified explicitly. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. options1; check all variety of options parsing. cbs-xtpl-energy-conv; Extrapolated water energies - conventional integrals version. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. isapt-charged; This test case shows an example of running the I-SAPT0/aug-cc-pVDZ computation for a positively charged system, illustrating the cation-pi interaction. The SIAO1 link partitioning algorithm is used. The system is taken from http://dx.doi.org/10.1016/j.comptc.2014.02.008. fnocc7; Test fnocc with linear dependencies. fnocc6; Test method/basis with disk_df. tdscf-2; td-uhf test on triplet states of methylene (tda), wfn passing. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. dct3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. pywrap-alias; Test parsed and exoti",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:38991,Energy Efficiency,charge,charged,38991," not linear in the optimized structure but is in a symmetry plane of the molecule. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. scf3; File retention, docc, socc, and bond distances specified explicitly. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. options1; check all variety of options parsing. cbs-xtpl-energy-conv; Extrapolated water energies - conventional integrals version. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. isapt-charged; This test case shows an example of running the I-SAPT0/aug-cc-pVDZ computation for a positively charged system, illustrating the cation-pi interaction. The SIAO1 link partitioning algorithm is used. The system is taken from http://dx.doi.org/10.1016/j.comptc.2014.02.008. fnocc7; Test fnocc with linear dependencies. fnocc6; Test method/basis with disk_df. tdscf-2; td-uhf test on triplet states of methylene (tda), wfn passing. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. dct3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. pywrap-alias; Test parsed and exoti",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:39610,Energy Efficiency,energy,energy,39610,"sing. cbs-xtpl-energy-conv; Extrapolated water energies - conventional integrals version. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. isapt-charged; This test case shows an example of running the I-SAPT0/aug-cc-pVDZ computation for a positively charged system, illustrating the cation-pi interaction. The SIAO1 link partitioning algorithm is used. The system is taken from http://dx.doi.org/10.1016/j.comptc.2014.02.008. fnocc7; Test fnocc with linear dependencies. fnocc6; Test method/basis with disk_df. tdscf-2; td-uhf test on triplet states of methylene (tda), wfn passing. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. dct3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. sapt-ecp; sapt0 of charged system in ECP basis set. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. oremp-grad2; integral conventional OO-REMP/cc-pVDZ engrad single points for the H2O molecule. single point energies were independently checked using the original wavels code. oremp-grad1; integral conventional OO-REMP/cc-pVDZ engrad single points for the H2O molecule. castup1; Test of SAD/Cast-up (mainly not dying due to",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:39974,Energy Efficiency,energy,energy,39974,"omputation for a positively charged system, illustrating the cation-pi interaction. The SIAO1 link partitioning algorithm is used. The system is taken from http://dx.doi.org/10.1016/j.comptc.2014.02.008. fnocc7; Test fnocc with linear dependencies. fnocc6; Test method/basis with disk_df. tdscf-2; td-uhf test on triplet states of methylene (tda), wfn passing. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. dct3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. sapt-ecp; sapt0 of charged system in ECP basis set. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. oremp-grad2; integral conventional OO-REMP/cc-pVDZ engrad single points for the H2O molecule. single point energies were independently checked using the original wavels code. oremp-grad1; integral conventional OO-REMP/cc-pVDZ engrad single points for the H2O molecule. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). phi-ao; Test computing values of basis functions (puream and non-puream) at points. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN update ref gradient due to new BraggSlater radii. sapt-dft-lrc; SAPT(DFT) aug-cc-pV",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:40184,Energy Efficiency,charge,charged,40184," linear dependencies. fnocc6; Test method/basis with disk_df. tdscf-2; td-uhf test on triplet states of methylene (tda), wfn passing. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. dct3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. sapt-ecp; sapt0 of charged system in ECP basis set. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. oremp-grad2; integral conventional OO-REMP/cc-pVDZ engrad single points for the H2O molecule. single point energies were independently checked using the original wavels code. oremp-grad1; integral conventional OO-REMP/cc-pVDZ engrad single points for the H2O molecule. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). phi-ao; Test computing values of basis functions (puream and non-puream) at points. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN update ref gradient due to new BraggSlater radii. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. dct11; Restricted DF-DCT ODC-12 energies with linearly dependent basis functions. mp2p5-grad1; MP2.5 cc-pVDZ grad",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:40978,Energy Efficiency,energy,energy,40978,"s to energy() like zapt4, mp2.5, and cisd are working. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. sapt-ecp; sapt0 of charged system in ECP basis set. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. oremp-grad2; integral conventional OO-REMP/cc-pVDZ engrad single points for the H2O molecule. single point energies were independently checked using the original wavels code. oremp-grad1; integral conventional OO-REMP/cc-pVDZ engrad single points for the H2O molecule. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). phi-ao; Test computing values of basis functions (puream and non-puream) at points. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN update ref gradient due to new BraggSlater radii. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. dct11; Restricted DF-DCT ODC-12 energies with linearly dependent basis functions. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. sapt0-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dft-omega; Test omega is setable updated wb97x_20,wb97x_03 to account for new BraggSlater radii. scf6; Tests RHF/ROHF/UHF SCF gradients. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. olccd-grad1; OLCCD cc-pVDZ gradient for the H2O molecule. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. mints15; check SP basis Fortran exponent parsing. cc4",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:41322,Energy Efficiency,energy,energy,41322,"single points for the H2O molecule. single point energies were independently checked using the original wavels code. oremp-grad1; integral conventional OO-REMP/cc-pVDZ engrad single points for the H2O molecule. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). phi-ao; Test computing values of basis functions (puream and non-puream) at points. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN update ref gradient due to new BraggSlater radii. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. dct11; Restricted DF-DCT ODC-12 energies with linearly dependent basis functions. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. sapt0-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dft-omega; Test omega is setable updated wb97x_20,wb97x_03 to account for new BraggSlater radii. scf6; Tests RHF/ROHF/UHF SCF gradients. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. olccd-grad1; OLCCD cc-pVDZ gradient for the H2O molecule. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. mints15; check SP basis Fortran exponent parsing. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. extern4; External potential calculation involving a TIP3P water and a QM water. Gradient on the external charges is compared to gradient on the QM atoms to validate the gradient on the charges. cdoremp-energy1; Cholesky decomposed OO-REMP/cc-pVDZ energy for the H2O molecule. dfccsd-t-grad",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:41378,Energy Efficiency,energy,energy,41378,"gies were independently checked using the original wavels code. oremp-grad1; integral conventional OO-REMP/cc-pVDZ engrad single points for the H2O molecule. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). phi-ao; Test computing values of basis functions (puream and non-puream) at points. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN update ref gradient due to new BraggSlater radii. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. dct11; Restricted DF-DCT ODC-12 energies with linearly dependent basis functions. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. sapt0-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dft-omega; Test omega is setable updated wb97x_20,wb97x_03 to account for new BraggSlater radii. scf6; Tests RHF/ROHF/UHF SCF gradients. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. olccd-grad1; OLCCD cc-pVDZ gradient for the H2O molecule. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. mints15; check SP basis Fortran exponent parsing. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. extern4; External potential calculation involving a TIP3P water and a QM water. Gradient on the external charges is compared to gradient on the QM atoms to validate the gradient on the charges. cdoremp-energy1; Cholesky decomposed OO-REMP/cc-pVDZ energy for the H2O molecule. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule.",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:42141,Energy Efficiency,charge,charges,42141,"MP2.5 cc-pVDZ gradient for the H2O molecule. sapt0-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dft-omega; Test omega is setable updated wb97x_20,wb97x_03 to account for new BraggSlater radii. scf6; Tests RHF/ROHF/UHF SCF gradients. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. olccd-grad1; OLCCD cc-pVDZ gradient for the H2O molecule. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. mints15; check SP basis Fortran exponent parsing. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. extern4; External potential calculation involving a TIP3P water and a QM water. Gradient on the external charges is compared to gradient on the QM atoms to validate the gradient on the charges. cdoremp-energy1; Cholesky decomposed OO-REMP/cc-pVDZ energy for the H2O molecule. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. mbis-6; MBIS calculation on H2O. psimrcc-fd-freq1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. olccd2; OLCCD cc-pVDZ energy with B3LYP initial guess for the NO radical. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-ste",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:42221,Energy Efficiency,charge,charges,42221,"MP2.5 cc-pVDZ gradient for the H2O molecule. sapt0-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dft-omega; Test omega is setable updated wb97x_20,wb97x_03 to account for new BraggSlater radii. scf6; Tests RHF/ROHF/UHF SCF gradients. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. olccd-grad1; OLCCD cc-pVDZ gradient for the H2O molecule. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. mints15; check SP basis Fortran exponent parsing. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. extern4; External potential calculation involving a TIP3P water and a QM water. Gradient on the external charges is compared to gradient on the QM atoms to validate the gradient on the charges. cdoremp-energy1; Cholesky decomposed OO-REMP/cc-pVDZ energy for the H2O molecule. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. mbis-6; MBIS calculation on H2O. psimrcc-fd-freq1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. olccd2; OLCCD cc-pVDZ energy with B3LYP initial guess for the NO radical. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-ste",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:42283,Energy Efficiency,energy,energy,42283," damping functions/parameters. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dft-omega; Test omega is setable updated wb97x_20,wb97x_03 to account for new BraggSlater radii. scf6; Tests RHF/ROHF/UHF SCF gradients. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. olccd-grad1; OLCCD cc-pVDZ gradient for the H2O molecule. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. mints15; check SP basis Fortran exponent parsing. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. extern4; External potential calculation involving a TIP3P water and a QM water. Gradient on the external charges is compared to gradient on the QM atoms to validate the gradient on the charges. cdoremp-energy1; Cholesky decomposed OO-REMP/cc-pVDZ energy for the H2O molecule. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. mbis-6; MBIS calculation on H2O. psimrcc-fd-freq1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. olccd2; OLCCD cc-pVDZ energy with B3LYP initial guess for the NO radical. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. scf-level-shift-rohf; SCF level shift on an ROHF computation. mints8; Patch",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:42417,Energy Efficiency,energy,energy,42417,"t omega is setable updated wb97x_20,wb97x_03 to account for new BraggSlater radii. scf6; Tests RHF/ROHF/UHF SCF gradients. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. olccd-grad1; OLCCD cc-pVDZ gradient for the H2O molecule. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. mints15; check SP basis Fortran exponent parsing. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. extern4; External potential calculation involving a TIP3P water and a QM water. Gradient on the external charges is compared to gradient on the QM atoms to validate the gradient on the charges. cdoremp-energy1; Cholesky decomposed OO-REMP/cc-pVDZ energy for the H2O molecule. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. mbis-6; MBIS calculation on H2O. psimrcc-fd-freq1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. olccd2; OLCCD cc-pVDZ energy with B3LYP initial guess for the NO radical. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. scf-level-shift-rohf; SCF level shift on an ROHF computation. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cc38; RHF-CC2-LR/cc-pVDZ static polarizab",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:43044,Energy Efficiency,energy,energy,43044,"ntial calculation involving a TIP3P water and a QM water. Gradient on the external charges is compared to gradient on the QM atoms to validate the gradient on the charges. cdoremp-energy1; Cholesky decomposed OO-REMP/cc-pVDZ energy for the H2O molecule. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. mbis-6; MBIS calculation on H2O. psimrcc-fd-freq1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. olccd2; OLCCD cc-pVDZ energy with B3LYP initial guess for the NO radical. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. scf-level-shift-rohf; SCF level shift on an ROHF computation. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. pywrap-align; apply linear fragmentation algorithm to a water cluster. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. pubchem2; Superficial test of PubChem interface. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. rasci-h2o; RASCI/6-31G** H",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:43334,Energy Efficiency,energy,energy,43334,"-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. mbis-6; MBIS calculation on H2O. psimrcc-fd-freq1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. olccd2; OLCCD cc-pVDZ energy with B3LYP initial guess for the NO radical. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. scf-level-shift-rohf; SCF level shift on an ROHF computation. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. pywrap-align; apply linear fragmentation algorithm to a water cluster. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. pubchem2; Superficial test of PubChem interface. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN update df/pk_ref values due to new BraggSlater radii. cbs-xtpl-d",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:43490,Energy Efficiency,energy,energy,43490,"CC option explicitly. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. mbis-6; MBIS calculation on H2O. psimrcc-fd-freq1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. olccd2; OLCCD cc-pVDZ energy with B3LYP initial guess for the NO radical. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. scf-level-shift-rohf; SCF level shift on an ROHF computation. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. pywrap-align; apply linear fragmentation algorithm to a water cluster. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. pubchem2; Superficial test of PubChem interface. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN update df/pk_ref values due to new BraggSlater radii. cbs-xtpl-dict; Extrapolated water energies. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. sapt6; checks that all SAPT physical components (elst, exch, i",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:44429,Energy Efficiency,energy,energy,44429,"2-LR/cc-pVDZ static polarizabilities of HOF molecule. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. pywrap-align; apply linear fragmentation algorithm to a water cluster. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. pubchem2; Superficial test of PubChem interface. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN update df/pk_ref values due to new BraggSlater radii. cbs-xtpl-dict; Extrapolated water energies. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. psimrcc-ccsd_t-4; Mk-MRCCSD(T) ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:45227,Energy Efficiency,energy,energy,45227,"wB97X-D cc-pVDZ gradient of S22 HCN update df/pk_ref values due to new BraggSlater radii. cbs-xtpl-dict; Extrapolated water energies. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. sad-scf-type; Test SAD SCF guesses on noble gas atom. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. extern3; External potential calculation with one Ghost atom and one point charge at the same position. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 f",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:45301,Energy Efficiency,energy,energy,45301,"s-xtpl-dict; Extrapolated water energies. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. sad-scf-type; Test SAD SCF guesses on noble gas atom. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. extern3; External potential calculation with one Ghost atom and one point charge at the same position. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). dct12; Spin-restricted DC-06 counterpart of dct1. tu3-h2o-opt; Optimize ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:46128,Energy Efficiency,charge,charge,46128,"basis. The reference numbers are from Lan Cheng’s implementation in Cfour. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. sad-scf-type; Test SAD SCF guesses on noble gas atom. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. extern3; External potential calculation with one Ghost atom and one point charge at the same position. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). dct12; Spin-restricted DC-06 counterpart of dct1. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. tdscf-4; td-wb97x singlet excitation energies of methylene (tda). cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:46490,Energy Efficiency,energy,energy,46490,"-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. sad-scf-type; Test SAD SCF guesses on noble gas atom. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. extern3; External potential calculation with one Ghost atom and one point charge at the same position. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). dct12; Spin-restricted DC-06 counterpart of dct1. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. tdscf-4; td-wb97x singlet excitation energies of methylene (tda). cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:46747,Energy Efficiency,energy,energy,46747,"the singlet. Uses TCSCF orbitals. sad-scf-type; Test SAD SCF guesses on noble gas atom. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. extern3; External potential calculation with one Ghost atom and one point charge at the same position. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). dct12; Spin-restricted DC-06 counterpart of dct1. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. tdscf-4; td-wb97x singlet excitation energies of methylene (tda). cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (R",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:47010,Energy Efficiency,charge,charge,47010,"y matter for the rotational symmetry number in thermodynamic computations. extern3; External potential calculation with one Ghost atom and one point charge at the same position. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). dct12; Spin-restricted DC-06 counterpart of dct1. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. tdscf-4; td-wb97x singlet excitation energies of methylene (tda). cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. dlpnomp2-2; comparison of DF-MP2 and DLPNO-MP2 with a CBS extrapolation. fnocc4; Test F",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:47993,Energy Efficiency,energy,energy,47993,"ed parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. dlpnomp2-2; comparison of DF-MP2 and DLPNO-MP2 with a CBS extrapolation. fnocc4; Test FNO-DF-CCSD(T) energy. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. cubeprop-frontier; ROHF frontier orbitals of CH2(s) and CH2(t). nbody-he-4b; MP2/aug-cc-pvDZ many body energies of an arbitrary Helium complex, addressing 4-body formulas. sapt-exch-disp-inf; SAPT0 with S^inf exch-disp20. remp-energy2; integral conventional unrestricted REMP/cc-pVDZ energies for the H2O+ molecule. results were independently verified against the initial wavels implementation. omp2p5-2; OMP2.5 cc-pVDZ energy for the H2O molecule. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. scf-auto-cholesky; Cholesky filter a complete basis. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN updated ref gradient due to new BraggSlater radii. opt11; Transition-state ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:48577,Energy Efficiency,energy,energy,48577,"d a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. dlpnomp2-2; comparison of DF-MP2 and DLPNO-MP2 with a CBS extrapolation. fnocc4; Test FNO-DF-CCSD(T) energy. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. cubeprop-frontier; ROHF frontier orbitals of CH2(s) and CH2(t). nbody-he-4b; MP2/aug-cc-pvDZ many body energies of an arbitrary Helium complex, addressing 4-body formulas. sapt-exch-disp-inf; SAPT0 with S^inf exch-disp20. remp-energy2; integral conventional unrestricted REMP/cc-pVDZ energies for the H2O+ molecule. results were independently verified against the initial wavels implementation. omp2p5-2; OMP2.5 cc-pVDZ energy for the H2O molecule. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. scf-auto-cholesky; Cholesky filter a complete basis. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN updated ref gradient due to new BraggSlater radii. opt11; Transition-state optimizations of HOOH to both torsional transition states. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; <no title>. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:48683,Energy Efficiency,energy,energy,48683,"d a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. dlpnomp2-2; comparison of DF-MP2 and DLPNO-MP2 with a CBS extrapolation. fnocc4; Test FNO-DF-CCSD(T) energy. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. cubeprop-frontier; ROHF frontier orbitals of CH2(s) and CH2(t). nbody-he-4b; MP2/aug-cc-pvDZ many body energies of an arbitrary Helium complex, addressing 4-body formulas. sapt-exch-disp-inf; SAPT0 with S^inf exch-disp20. remp-energy2; integral conventional unrestricted REMP/cc-pVDZ energies for the H2O+ molecule. results were independently verified against the initial wavels implementation. omp2p5-2; OMP2.5 cc-pVDZ energy for the H2O molecule. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. scf-auto-cholesky; Cholesky filter a complete basis. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN updated ref gradient due to new BraggSlater radii. opt11; Transition-state optimizations of HOOH to both torsional transition states. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; <no title>. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:272,Integrability,interface,interface,272,"﻿. <no title>. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; <no title>. Input File; Description. dft-freq-analytic2; Analytic UKS SVWN frequencies, compared to finite difference values. numpy-array-interface; Numpy interface testing. fsapt-ext-abc-au; analog of fsapt-ext-abc with molecule and external potentials in Bohr. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. remp-energy1; integral conventional REMP/cc-pVDZ energies for the H2O molecule. results were independently verified against the initial wavels implementation. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. cc54; CCSD dipole with user-specified basis set. cubeprop; RHF orbitals and density for water. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. dft-custom-gga; DFT (LDA/GGA) test of cus",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:289,Integrability,interface,interface,289,"﻿. <no title>. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; <no title>. Input File; Description. dft-freq-analytic2; Analytic UKS SVWN frequencies, compared to finite difference values. numpy-array-interface; Numpy interface testing. fsapt-ext-abc-au; analog of fsapt-ext-abc with molecule and external potentials in Bohr. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. remp-energy1; integral conventional REMP/cc-pVDZ energies for the H2O molecule. results were independently verified against the initial wavels implementation. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. cc54; CCSD dipole with user-specified basis set. cubeprop; RHF orbitals and density for water. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. dft-custom-gga; DFT (LDA/GGA) test of cus",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:7380,Integrability,rout,routing,7380,"cation. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. fnocc5; Test FNO-DF-CCSD(T) energy. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. scf-uhf-grad-nobeta; UHF gradient for a one-electron system (no beta electrons). cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. dft-smoke; DFT Functional Smoke Test. ao-casscf-sp; CASSCF/6-31G** energy point. cepa-module; routing check on lccd, lccsd, cepa(0). dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. cbs-xtpl-alpha; Extrapolated water energies. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. nbody-nocp-gradient; Computation of NoCP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. sapt-exch-ind30-inf; SAPT2+3 with S^inf exch-ind30 Geometries taken from the S66x10 database, the shortest-range point (R = 0.7 R_e). cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm).",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:11749,Integrability,wrap,wrappers,11749,"in line -decontract option for basis sets. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. dct9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. scf-ecp3; Water-Argon complex with ECP present; check of UHF Hessian. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. fsaptd-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. dct-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cbs-xtpl-freq; Various gradients for a strained helium dimer an",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:13559,Integrability,depend,depend,13559,"adient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. sapt-compare; SAPT0 aug-cc-pVDZ computation of the water-water interaction energy, using the three SAPT codes. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. omp2-3; OMP2 cc-pVDZ energy for the NO radical. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf-response2; Compute the dipole polarizability for water with custom basis set. scf-guess-read3; Test if the the guess read in the same basis converges. scf-level-shift-uhf; SCF level shift on a UHF computation. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cbs-xtpl-nbody; RHF interaction energies using nbody and cbs parts of the driver Ne dimer with mp2/v[dt]z + d:ccsd(t)/vdz. freq-masses; check nonphysical masses possible. scf-level-shift-cuhf; SCF level shift on a CUHF computation. dft-freq-analytic1; Analytic SVWN frequencies, compared to finite difference values. de",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:13662,Integrability,depend,depend,13662,"-pVDZ energy for the H2O molecule. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. sapt-compare; SAPT0 aug-cc-pVDZ computation of the water-water interaction energy, using the three SAPT codes. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. omp2-3; OMP2 cc-pVDZ energy for the NO radical. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf-response2; Compute the dipole polarizability for water with custom basis set. scf-guess-read3; Test if the the guess read in the same basis converges. scf-level-shift-uhf; SCF level shift on a UHF computation. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cbs-xtpl-nbody; RHF interaction energies using nbody and cbs parts of the driver Ne dimer with mp2/v[dt]z + d:ccsd(t)/vdz. freq-masses; check nonphysical masses possible. scf-level-shift-cuhf; SCF level shift on a CUHF computation. dft-freq-analytic1; Analytic SVWN frequencies, compared to finite difference values. density-screen-1; RHF Density Matrix based-Integral Screening Test for water. frac-ip-fitting; Ome",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:17401,Integrability,depend,depend,17401,"126-2136 (2015)). dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. nbody-hessian; Computation of VMFC-corrected HF dimer Hessian. cc13c; Tests RHF CCSD(T)gradients. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. fci-dipole; 6-31G H2O Test FCI Energy Point. tdscf-5; td-camb3lyp with DiskDF and method/basis specification. dft-grac; Gradient regularized asymptotic correction (GRAC) test. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. scf-hess5; DF SCF 6-31G analytical vs finite-difference tests Tests DF UHF hessian code for Ca != Cb. linK-3; UHF and ROHF Linear Exchange Algorithm test for benzyl cation. scf7; Tests SCF gradient in the presence of a dipole field. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. fnocc2; Test G2 method for H2O. mint",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:17504,Integrability,depend,depend,17504,"y-hessian; Computation of VMFC-corrected HF dimer Hessian. cc13c; Tests RHF CCSD(T)gradients. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. fci-dipole; 6-31G H2O Test FCI Energy Point. tdscf-5; td-camb3lyp with DiskDF and method/basis specification. dft-grac; Gradient regularized asymptotic correction (GRAC) test. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. scf-hess5; DF SCF 6-31G analytical vs finite-difference tests Tests DF UHF hessian code for Ca != Cb. linK-3; UHF and ROHF Linear Exchange Algorithm test for benzyl cation. scf7; Tests SCF gradient in the presence of a dipole field. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. fnocc2; Test G2 method for H2O. mints2-bse; Similar to mints2, but using the BSE to specify the basis sets. isapt-siao1; This test c",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:29723,Integrability,wrap,wrapper,29723,"st of implementations in: hybrid_superfuncs.py. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. mbis-1; MBIS calculation on H2O. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. cc52; CCSD Response for H2O2. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. dft-custom-mgga; updated dldf reference to new BraggSlater radii Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett.",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:39198,Integrability,depend,dependencies,39198,"erty; MP2 cc-pvDZ properties for Nitrogen oxide. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. scf3; File retention, docc, socc, and bond distances specified explicitly. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. options1; check all variety of options parsing. cbs-xtpl-energy-conv; Extrapolated water energies - conventional integrals version. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. isapt-charged; This test case shows an example of running the I-SAPT0/aug-cc-pVDZ computation for a positively charged system, illustrating the cation-pi interaction. The SIAO1 link partitioning algorithm is used. The system is taken from http://dx.doi.org/10.1016/j.comptc.2014.02.008. fnocc7; Test fnocc with linear dependencies. fnocc6; Test method/basis with disk_df. tdscf-2; td-uhf test on triplet states of methylene (tda), wfn passing. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. dct3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. sapt-ecp; sapt0 of charg",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:41132,Integrability,depend,dependent,41132,"VDZ geometry optimization for the H2O molecule. sapt-ecp; sapt0 of charged system in ECP basis set. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. oremp-grad2; integral conventional OO-REMP/cc-pVDZ engrad single points for the H2O molecule. single point energies were independently checked using the original wavels code. oremp-grad1; integral conventional OO-REMP/cc-pVDZ engrad single points for the H2O molecule. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). phi-ao; Test computing values of basis functions (puream and non-puream) at points. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN update ref gradient due to new BraggSlater radii. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. dct11; Restricted DF-DCT ODC-12 energies with linearly dependent basis functions. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. sapt0-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dft-omega; Test omega is setable updated wb97x_20,wb97x_03 to account for new BraggSlater radii. scf6; Tests RHF/ROHF/UHF SCF gradients. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. olccd-grad1; OLCCD cc-pVDZ gradient for the H2O molecule. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. mints15; check SP basis Fortran exponent parsing. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. extern4; External potential calculation involving a TIP3P water and a QM water. G",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:43819,Integrability,interface,interface,43819,"n of H2O2. gauge = both, omega = (589 355 nm). scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. olccd2; OLCCD cc-pVDZ energy with B3LYP initial guess for the NO radical. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. scf-level-shift-rohf; SCF level shift on an ROHF computation. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. pywrap-align; apply linear fragmentation algorithm to a water cluster. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. pubchem2; Superficial test of PubChem interface. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN update df/pk_ref values due to new BraggSlater radii. cbs-xtpl-dict; Extrapolated water energies. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. nbody-cp-gradien",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:1706,Modifiability,variab,variables,1706,"d to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. remp-energy1; integral conventional REMP/cc-pVDZ energies for the H2O molecule. results were independently verified against the initial wavels implementation. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. cc54; CCSD dipole with user-specified basis set. cubeprop; RHF orbitals and density for water. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. sapt11; sapt example with orbital freezing with alkali metal and dMP2. scf-guess-read2; Test if the the guess read in the same basis converges. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:1789,Modifiability,variab,variables,1789,"-energy1; integral conventional REMP/cc-pVDZ energies for the H2O molecule. results were independently verified against the initial wavels implementation. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. cc54; CCSD dipole with user-specified basis set. cubeprop; RHF orbitals and density for water. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. sapt11; sapt example with orbital freezing with alkali metal and dMP2. scf-guess-read2; Test if the the guess read in the same basis converges. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active s",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:21188,Modifiability,plugin,plugins,21188,"acetylene), test case 16 from the S22 database. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. matrix2; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating. dft-grad-meta; meta-GGA gradients of water and ssh molecules reference gradients updated due to new BraggSlater radii. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). fsapt-ext; Quick test of external potential in F-SAPT (see fsapt1 for a real example). psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dct7; DCT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. stability3; Test LDA stability analysis against QChem. dct1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. scf-level-shift-rks; SCF level shift on an RKS computation. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. cc36; CC2(RHF)/cc-pVDZ energy of H2O. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. fnocc3; Test FNO-QCISD(T) computation. frac-sym; Fractional occupation with symmetry. tdscf-7; TD-HF test variable access. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Poin",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:22128,Modifiability,variab,variable,22128,"m gradients for H2O. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. stability3; Test LDA stability analysis against QChem. dct1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. scf-level-shift-rks; SCF level shift on an RKS computation. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. cc36; CC2(RHF)/cc-pVDZ energy of H2O. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. fnocc3; Test FNO-QCISD(T) computation. frac-sym; Fractional occupation with symmetry. tdscf-7; TD-HF test variable access. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dft1-alt; DFT Functional Test. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). scf-upcast-custom-basis; test scf castup with custom basis sets. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, compute",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:22768,Modifiability,variab,variables,22768,"ample with frozen cartesian. scf-level-shift-rks; SCF level shift on an RKS computation. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. cc36; CC2(RHF)/cc-pVDZ energy of H2O. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. fnocc3; Test FNO-QCISD(T) computation. frac-sym; Fractional occupation with symmetry. tdscf-7; TD-HF test variable access. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dft1-alt; DFT Functional Test. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). scf-upcast-custom-basis; test scf castup with custom basis sets. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. mints3; Test individual integral objects for correctness. dft-custom; DFT custom functional test. lccd-grad1; LCCD cc-pVDZ gradient for the H2O molecule. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. soscf-large; Second-order SCF convergnece: Benzene. opt16; SCF 6-31G(d) optimization of TS for HCN to HNC Performs finite difference ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:29236,Modifiability,variab,variables,29236,"C for HOOH torsional rotation at the RHF/DZP level of theory. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. dfccsd-t-grad2; DF-CCSD(T) cc-pVDZ gradient for the NH molecule. cdremp-2; Cholesky decomposed REMP/cc-pVDZ energies for the CH3 radical. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. mbis-1; MBIS calculation on H2O. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. cc52; CCSD Response for H2O2. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition an",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:503,Performance,optimiz,optimizations,503,"﻿. <no title>. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; <no title>. Input File; Description. dft-freq-analytic2; Analytic UKS SVWN frequencies, compared to finite difference values. numpy-array-interface; Numpy interface testing. fsapt-ext-abc-au; analog of fsapt-ext-abc with molecule and external potentials in Bohr. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. remp-energy1; integral conventional REMP/cc-pVDZ energies for the H2O molecule. results were independently verified against the initial wavels implementation. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. cc54; CCSD dipole with user-specified basis set. cubeprop; RHF orbitals and density for water. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. dft-custom-gga; DFT (LDA/GGA) test of cus",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:2381,Performance,optimiz,optimizations,2381,"t screening!. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. cc54; CCSD dipole with user-specified basis set. cubeprop; RHF orbitals and density for water. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. sapt11; sapt example with orbital freezing with alkali metal and dMP2. scf-guess-read2; Test if the the guess read in the same basis converges. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. mints-benchmark; run some BLAS benchmarks. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. linK-1; RHF Linear Exchang",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:2517,Performance,perform,performed,2517,"ility analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. sapt11; sapt example with orbital freezing with alkali metal and dMP2. scf-guess-read2; Test if the the guess read in the same basis converges. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. mints-benchmark; run some BLAS benchmarks. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. linK-1; RHF Linear Exchange Algorithm test for water. fci-h2o-2; 6-31G H2O Test FCI Energy Point. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. psithon1; Spectroscopic constants of H2, and the full ci ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:3721,Performance,perform,performed,3721,"nergy Point will default to only singles and doubles in the active space. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. mints-benchmark; run some BLAS benchmarks. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. linK-1; RHF Linear Exchange Algorithm test for water. fci-h2o-2; 6-31G H2O Test FCI Energy Point. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. omp3-3; OMP3 cc-pCVDZ energy with B3LYP initial guess for the NO radical. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. mom-h2o-4; MOM excitation from LUMO HOMO+4. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. olccd-grad2; OLCCD cc-pVDZ gradient for the NO radical. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. olccd-freq1; OLCCD cc-pVDZ freqs for C2H2. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. scf-response3; UHF Dipole Polarizability Test. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt10; usapt example with empty beta due to frozen core. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. dct8; DCT calculation for the NH3",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:4605,Performance,perform,performed,4605,"D. omp3-3; OMP3 cc-pCVDZ energy with B3LYP initial guess for the NO radical. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. mom-h2o-4; MOM excitation from LUMO HOMO+4. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. olccd-grad2; OLCCD cc-pVDZ gradient for the NO radical. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. olccd-freq1; OLCCD cc-pVDZ freqs for C2H2. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. scf-response3; UHF Dipole Polarizability Test. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt10; usapt example with empty beta due to frozen core. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. dct8; DCT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. dfccsd-grad2; DF-CCSD cc-pVDZ gradient for the NH molecule. dft-pruning; Tests all grid pruning options available and screening of small weights. Check against grid size. cc51; EOM-CC3/cc-pVTZ on H2O. opt7; Various c",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:4792,Performance,perform,performs,4792,"the H2O molecule. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. mom-h2o-4; MOM excitation from LUMO HOMO+4. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. olccd-grad2; OLCCD cc-pVDZ gradient for the NO radical. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. olccd-freq1; OLCCD cc-pVDZ freqs for C2H2. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. scf-response3; UHF Dipole Polarizability Test. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt10; usapt example with empty beta due to frozen core. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. dct8; DCT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. dfccsd-grad2; DF-CCSD cc-pVDZ gradient for the NH molecule. dft-pruning; Tests all grid pruning options available and screening of small weights. Check against grid size. cc51; EOM-CC3/cc-pVTZ on H2O. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. sapt9; usapt example with emp",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:6075,Performance,perform,performs,6075,"eometry optimzation, with Z-matrix input, by finite-differences. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. dfccsd-grad2; DF-CCSD cc-pVDZ gradient for the NH molecule. dft-pruning; Tests all grid pruning options available and screening of small weights. Check against grid size. cc51; EOM-CC3/cc-pVTZ on H2O. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. sapt9; usapt example with empty beta. cc7; Tests CCENERGY’s CCSD gradient in the presence of a dipole field. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. cepa1; cc-pvdz H2O Test CEPA(1) Energy. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. cc56; EOM-CCSD/6-31g excited state transition data for water cation. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. fnocc5; Test FNO-DF-CCSD(T) energy. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. scf-uhf-",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:6093,Performance,optimiz,optimization,6093,"eometry optimzation, with Z-matrix input, by finite-differences. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. dfccsd-grad2; DF-CCSD cc-pVDZ gradient for the NH molecule. dft-pruning; Tests all grid pruning options available and screening of small weights. Check against grid size. cc51; EOM-CC3/cc-pVTZ on H2O. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. sapt9; usapt example with empty beta. cc7; Tests CCENERGY’s CCSD gradient in the presence of a dipole field. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. cepa1; cc-pvdz H2O Test CEPA(1) Energy. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. cc56; EOM-CCSD/6-31g excited state transition data for water cation. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. fnocc5; Test FNO-DF-CCSD(T) energy. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. scf-uhf-",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:6440,Performance,optimiz,optimization,6440," all grid pruning options available and screening of small weights. Check against grid size. cc51; EOM-CC3/cc-pVTZ on H2O. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. sapt9; usapt example with empty beta. cc7; Tests CCENERGY’s CCSD gradient in the presence of a dipole field. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. cepa1; cc-pvdz H2O Test CEPA(1) Energy. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. cc56; EOM-CCSD/6-31g excited state transition data for water cation. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. fnocc5; Test FNO-DF-CCSD(T) energy. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. scf-uhf-grad-nobeta; UHF gradient for a one-electron system (no beta electrons). cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. dft-smoke; DFT Functional Smoke Test. ao-casscf-sp; CASSCF/6-31G** energy point. cepa-module; routing check on lccd, lccsd, cepa(0). dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradient",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:7564,Performance,optimiz,optimization,7564,"or the H2O molecule. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. fnocc5; Test FNO-DF-CCSD(T) energy. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. scf-uhf-grad-nobeta; UHF gradient for a one-electron system (no beta electrons). cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. dft-smoke; DFT Functional Smoke Test. ao-casscf-sp; CASSCF/6-31G** energy point. cepa-module; routing check on lccd, lccsd, cepa(0). dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. cbs-xtpl-alpha; Extrapolated water energies. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. nbody-nocp-gradient; Computation of NoCP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. sapt-exch-ind30-inf; SAPT2+3 with S^inf exch-ind30 Geometries taken from the S66x10 database, the shortest-range point (R = 0.7 R_e). cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. density-screen-2; RKS Density Matrix based-Integral Scree",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:8820,Performance,optimiz,optimization,8820,"ation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. sapt-exch-ind30-inf; SAPT2+3 with S^inf exch-ind30 Geometries taken from the S66x10 database, the shortest-range point (R = 0.7 R_e). cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. density-screen-2; RKS Density Matrix based-Integral Screening Test for benzene. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega= (589 355 nm). fci-h2o; 6-31G H2O Test FCI Energy Point. dfremp-1; density fitted REMP/cc-pVDZ energies for the CO2 molecule. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. scf-cholesky-basis; incremental Cholesky filtered SCF. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cc15; RHF-B-CCD(T)/6-31G** H2O si",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:10067,Performance,perform,performs,10067," both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. scf-cholesky-basis; incremental Cholesky filtered SCF. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. ddd-function-kwargs; check distributed driver is correctly passing function kwargs. dct2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc13b; Tests RHF CCSD(T)gradients. cc17; Single point energies of multiple excited states with EOM-CCSD. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. dct9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:10911,Performance,perform,performs,10911,"kwargs; check distributed driver is correctly passing function kwargs. dct2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc13b; Tests RHF CCSD(T)gradients. cc17; Single point energies of multiple excited states with EOM-CCSD. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. dct9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. scf-ecp3; Water-Argon complex with ECP present; check of UHF Hessian. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is us",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:11254,Performance,optimiz,optimized,11254,"7; Single point energies of multiple excited states with EOM-CCSD. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. dct9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. scf-ecp3; Water-Argon complex with ECP present; check of UHF Hessian. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. fsaptd-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. cc25; Single point gra",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:11774,Performance,optimiz,optimize,11774,"in line -decontract option for basis sets. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. dct9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. scf-ecp3; Water-Argon complex with ECP present; check of UHF Hessian. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. fsaptd-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. dct-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cbs-xtpl-freq; Various gradients for a strained helium dimer an",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:12079,Performance,optimiz,optimization,12079,"=NONE is used, where four-virtual integrals are transformed into MO basis. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. scf-ecp3; Water-Argon complex with ECP present; check of UHF Hessian. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. fsaptd-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. dct-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. sapt-compare; SAPT0 aug-cc-pVDZ computation of the water-water interaction energy, using the three SAPT codes. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integr",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:14660,Performance,optimiz,optimization,14660," options (scf_type) being set global or local. This input uses local. scf-response2; Compute the dipole polarizability for water with custom basis set. scf-guess-read3; Test if the the guess read in the same basis converges. scf-level-shift-uhf; SCF level shift on a UHF computation. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cbs-xtpl-nbody; RHF interaction energies using nbody and cbs parts of the driver Ne dimer with mp2/v[dt]z + d:ccsd(t)/vdz. freq-masses; check nonphysical masses possible. scf-level-shift-cuhf; SCF level shift on a CUHF computation. dft-freq-analytic1; Analytic SVWN frequencies, compared to finite difference values. density-screen-1; RHF Density Matrix based-Integral Screening Test for water. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. mbis-2; MBIS calculation on OH- (Expanded Arrays). sapt-sf1; Tests the Psi4 SF-SAPT code. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. cc13d; Tests analytic CC2 gradients. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. olccd1; OLCCD cc-pVDZ energy for the H2O molecule. fsapt-ext-abc2; FSAPT with external charge on dimer. pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:16136,Performance,perform,performed,16136,"dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. olccd1; OLCCD cc-pVDZ energy for the H2O molecule. fsapt-ext-abc2; FSAPT with external charge on dimer. pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. cbs-xtpl-energy; Extrapolated water energies - density-fitted version. dforemp-grad2; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O+ molecule. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. nbody-vmfc-hessian; Computation of VMFC-corrected water trimer Hessian (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. nbody-hessian; Computation of VMFC-corrected HF dimer Hessian. cc13c; Tests RHF CCSD(T)gradients. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. fci-dipole; 6-31G H2O Test FCI Energy Point. tdscf-5; td-camb3lyp with DiskDF and method/basis specification. dft-grac; Gradient regularized asymptotic correction (GRAC",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:16937,Performance,perform,performed,16937,"y with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. nbody-vmfc-hessian; Computation of VMFC-corrected water trimer Hessian (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. nbody-hessian; Computation of VMFC-corrected HF dimer Hessian. cc13c; Tests RHF CCSD(T)gradients. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. fci-dipole; 6-31G H2O Test FCI Energy Point. tdscf-5; td-camb3lyp with DiskDF and method/basis specification. dft-grac; Gradient regularized asymptotic correction (GRAC) test. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. scf-hess5; DF SCF 6-31G analytical vs finite-difference tests Tests DF UHF hessian code for Ca != Cb. linK-3; UHF and ROHF Linear Exchange Algorithm test for benzyl cation. scf7; Tests SCF gradient in the presence of a dipole field. pywrap-molecule; Check that C++ M",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:19005,Performance,optimiz,optimization,19005,"ule input strings identically. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. fnocc2; Test G2 method for H2O. mints2-bse; Similar to mints2, but using the BSE to specify the basis sets. isapt-siao1; This test case shows an example of running the I-SAPT0/jun-cc-pVDZ computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups) The SIAO1 link partitioning algorithm is used. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). fcidump; test FCIDUMP functionality for rhf/uhf. x2c-perturb-h; Test SFX2C-1e with a static electric field on He aug-cc-pVTZ. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example u",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:19372,Performance,optimiz,optimization,19372,". fnocc2; Test G2 method for H2O. mints2-bse; Similar to mints2, but using the BSE to specify the basis sets. isapt-siao1; This test case shows an example of running the I-SAPT0/jun-cc-pVDZ computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups) The SIAO1 link partitioning algorithm is used. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). fcidump; test FCIDUMP functionality for rhf/uhf. x2c-perturb-h; Test SFX2C-1e with a static electric field on He aug-cc-pVTZ. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp2p5-1; OMP2.5 cc-pVDZ energy for the H2O molecule. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. matrix2; An example of using BLAS and LAPACK calls ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:19717,Performance,optimiz,optimized,19717,"s used. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). fcidump; test FCIDUMP functionality for rhf/uhf. x2c-perturb-h; Test SFX2C-1e with a static electric field on He aug-cc-pVTZ. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp2p5-1; OMP2.5 cc-pVDZ energy for the H2O molecule. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. matrix2; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating. dft-grad-meta; meta-GGA gradients of water and ssh molecules reference gradients updated due to new BraggSlater radii. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). fsapt-ext; Quick test of external potenti",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:21564,Performance,perform,performs,21564," M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). fsapt-ext; Quick test of external potential in F-SAPT (see fsapt1 for a real example). psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dct7; DCT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. stability3; Test LDA stability analysis against QChem. dct1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. scf-level-shift-rks; SCF level shift on an RKS computation. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. cc36; CC2(RHF)/cc-pVDZ energy of H2O. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. fnocc3; Test FNO-QCISD(T) computation. frac-sym; Fractional occupation with symmetry. tdscf-7; TD-HF test variable access. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dft1-alt; DFT Functional Test. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle a",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:21734,Performance,optimiz,optimization,21734,"example). psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dct7; DCT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. stability3; Test LDA stability analysis against QChem. dct1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. scf-level-shift-rks; SCF level shift on an RKS computation. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. cc36; CC2(RHF)/cc-pVDZ energy of H2O. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. fnocc3; Test FNO-QCISD(T) computation. frac-sym; Fractional occupation with symmetry. tdscf-7; TD-HF test variable access. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dft1-alt; DFT Functional Test. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). scf-upcast-custom-basis; test scf castup with custom basis sets. mints4; A demonstration of mixed Cartesian/ZMatrix ge",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:21873,Performance,optimiz,optimization,21873," RHF singlet orbitals. dct7; DCT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. stability3; Test LDA stability analysis against QChem. dct1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. scf-level-shift-rks; SCF level shift on an RKS computation. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. cc36; CC2(RHF)/cc-pVDZ energy of H2O. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. fnocc3; Test FNO-QCISD(T) computation. frac-sym; Fractional occupation with symmetry. tdscf-7; TD-HF test variable access. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dft1-alt; DFT Functional Test. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). scf-upcast-custom-basis; test scf castup with custom basis sets. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether the",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:23689,Performance,optimiz,optimization,23689," Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. mints3; Test individual integral objects for correctness. dft-custom; DFT custom functional test. lccd-grad1; LCCD cc-pVDZ gradient for the H2O molecule. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. soscf-large; Second-order SCF convergnece: Benzene. opt16; SCF 6-31G(d) optimization of TS for HCN to HNC Performs finite difference hessian calculation. Then optimizes using previous orbitals for scf guess, in subsequent calculations. The last two displacements of the hessian break the plane of symemtry, This test confirms that only the reference geometry, with the correct symmetry, writes orbitals to disk. SCF will fail (ValidationError) otherwise. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). casscf-fzc-sp; CASSCF/6-31G** energy point. scf-coverage; Lithium test for coverage. olccd3; OLCCD cc-pVDZ energy with ROHF initial guess for the NO radical. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:23776,Performance,optimiz,optimizes,23776,"x. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. mints3; Test individual integral objects for correctness. dft-custom; DFT custom functional test. lccd-grad1; LCCD cc-pVDZ gradient for the H2O molecule. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. soscf-large; Second-order SCF convergnece: Benzene. opt16; SCF 6-31G(d) optimization of TS for HCN to HNC Performs finite difference hessian calculation. Then optimizes using previous orbitals for scf guess, in subsequent calculations. The last two displacements of the hessian break the plane of symemtry, This test confirms that only the reference geometry, with the correct symmetry, writes orbitals to disk. SCF will fail (ValidationError) otherwise. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). casscf-fzc-sp; CASSCF/6-31G** energy point. scf-coverage; Lithium test for coverage. olccd3; OLCCD cc-pVDZ energy with ROHF initial guess for the NO radical. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. dfm",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:25089,Performance,perform,performs,25089,"Z-matrix input. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). casscf-fzc-sp; CASSCF/6-31G** energy point. scf-coverage; Lithium test for coverage. olccd3; OLCCD cc-pVDZ energy with ROHF initial guess for the NO radical. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. cisd-sp; 6-31G** H2O Test CISD Energy Point. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dct4; DCT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. props4; Electrostatic potential and electric field evaluated on a grid around water. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mp2-1; All-electron MP2 6-31G** geometry optimization of water. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. tdscf-3; td-wb97x excitation energies of singlet states of h2o, wfn passing. dft2; DFT Functional Test. dfomp2-grad2; OMP2 ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:25789,Performance,optimiz,optimization,25789,"tarting from bent structure. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. cisd-sp; 6-31G** H2O Test CISD Energy Point. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dct4; DCT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. props4; Electrostatic potential and electric field evaluated on a grid around water. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mp2-1; All-electron MP2 6-31G** geometry optimization of water. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. tdscf-3; td-wb97x excitation energies of singlet states of h2o, wfn passing. dft2; DFT Functional Test. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. aediis-1; ADIIS test case, from 10.1063/1.3304922. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. fsapt-ext-abc; FSAPT with external charge on trimer. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. dft-reference; MP2 with a PBE0 reference computation. dft1; DFT Functional Test all values update for new BraggSlater radii. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. ddd-deriv; Sample HF/cc-pVDZ H2O computation all derivatives. nbody-multi-level-2; many-",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:28228,Performance,perform,performed,28228,"ch irrep in \(^{3}B_1\) CH2. tdscf-1; td-uhf test on triplet states of methylene (rpa). omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. dfccsd-t-grad2; DF-CCSD(T) cc-pVDZ gradient for the NH molecule. cdremp-2; Cholesky decomposed REMP/cc-pVDZ energies for the CH3 radical. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. mbis-1; MBIS calculation on H2O. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with vari",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:28464,Performance,optimiz,optimizations,28464,"er complex Size vs cost tradeoff is rough here. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. dfccsd-t-grad2; DF-CCSD(T) cc-pVDZ gradient for the NH molecule. cdremp-2; Cholesky decomposed REMP/cc-pVDZ energies for the CH3 radical. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. mbis-1; MBIS calculation on H2O. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. pywrap-db1; Database calculation, so no molecule section i",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:29336,Performance,perform,performed,29336,"C for HOOH torsional rotation at the RHF/DZP level of theory. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. dfccsd-t-grad2; DF-CCSD(T) cc-pVDZ gradient for the NH molecule. cdremp-2; Cholesky decomposed REMP/cc-pVDZ energies for the CH3 radical. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. mbis-1; MBIS calculation on H2O. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. cc52; CCSD Response for H2O2. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition an",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:30338,Performance,perform,performed,30338,"oordinates, converted to Cartesian coordinates. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. cc52; CCSD Response for H2O2. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. dft-custom-mgga; updated dldf reference to new BraggSlater radii Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. linK-2; RKS Linear Exchange Algorithm test for benzene. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. ao-dfcasscf-sp; CASSCF/6-31G** energy point. cbs-parser; mtd/basis syntax examples. dlpnomp2-3; comparison of DF-MP2 and DLPNO-MP2 with a cartesian basis set. fisapt-siao1; This test case shows an example of running the I-SAPT0/jun-cc-pVDZ computation for",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:34114,Performance,optimiz,optimization,34114,"energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. dfccsdt2; DF-CCSD(T) cc-pVDZ energy for the NH molecule. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dfremp-2; density fitted REMP/cc-pVDZ energies for the CH3 radical. mints-helper; A general test of the MintsHelper function. dct-grad3; Restricted DF-DCT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. mp2-h; check that methods can act on single atom. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. cdremp-1; Cholesky decomposed REMP/cc-pVDZ energies for the CO2 molecule. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. lccd-grad2; LCCD cc-pVDZ gradient for the NO radical. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). tdscf-6; td-camb3lyp with DiskDF and method/basis specification. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. casscf-sp; CASSCF/6-31G** energy point. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cbs-xtpl-func; optimization with method defined via cbs. omp3-2; OMP3 cc-pCVDZ energy with ROHF initial guess for the NO radical. dfmp2-fc; Kr–Kr nocp energies with all-electron basis set to check frozen core. scf-occ; force occupations in scf. cdoremp-energy2; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O+ molecule. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. cc5",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:34450,Performance,optimiz,optimization,34450,"or the NH molecule. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dfremp-2; density fitted REMP/cc-pVDZ energies for the CH3 radical. mints-helper; A general test of the MintsHelper function. dct-grad3; Restricted DF-DCT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. mp2-h; check that methods can act on single atom. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. cdremp-1; Cholesky decomposed REMP/cc-pVDZ energies for the CO2 molecule. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. lccd-grad2; LCCD cc-pVDZ gradient for the NO radical. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). tdscf-6; td-camb3lyp with DiskDF and method/basis specification. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. casscf-sp; CASSCF/6-31G** energy point. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cbs-xtpl-func; optimization with method defined via cbs. omp3-2; OMP3 cc-pCVDZ energy with ROHF initial guess for the NO radical. dfmp2-fc; Kr–Kr nocp energies with all-electron basis set to check frozen core. scf-occ; force occupations in scf. cdoremp-energy2; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O+ molecule. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. cc5; RHF CCSD(T) cc-pVDZ frozen-core energy of C4NH4 Anion. aediis-2; EDIIS test case from 10.1063/1.1470195. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri dens",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:34579,Performance,optimiz,optimization,34579,"nput. dfremp-2; density fitted REMP/cc-pVDZ energies for the CH3 radical. mints-helper; A general test of the MintsHelper function. dct-grad3; Restricted DF-DCT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. mp2-h; check that methods can act on single atom. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. cdremp-1; Cholesky decomposed REMP/cc-pVDZ energies for the CO2 molecule. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. lccd-grad2; LCCD cc-pVDZ gradient for the NO radical. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). tdscf-6; td-camb3lyp with DiskDF and method/basis specification. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. casscf-sp; CASSCF/6-31G** energy point. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cbs-xtpl-func; optimization with method defined via cbs. omp3-2; OMP3 cc-pCVDZ energy with ROHF initial guess for the NO radical. dfmp2-fc; Kr–Kr nocp energies with all-electron basis set to check frozen core. scf-occ; force occupations in scf. cdoremp-energy2; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O+ molecule. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. cc5; RHF CCSD(T) cc-pVDZ frozen-core energy of C4NH4 Anion. aediis-2; EDIIS test case from 10.1063/1.1470195. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. dfccsd",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:34631,Performance,optimiz,optimization,34631," mints-helper; A general test of the MintsHelper function. dct-grad3; Restricted DF-DCT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. mp2-h; check that methods can act on single atom. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. cdremp-1; Cholesky decomposed REMP/cc-pVDZ energies for the CO2 molecule. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. lccd-grad2; LCCD cc-pVDZ gradient for the NO radical. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). tdscf-6; td-camb3lyp with DiskDF and method/basis specification. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. casscf-sp; CASSCF/6-31G** energy point. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cbs-xtpl-func; optimization with method defined via cbs. omp3-2; OMP3 cc-pCVDZ energy with ROHF initial guess for the NO radical. dfmp2-fc; Kr–Kr nocp energies with all-electron basis set to check frozen core. scf-occ; force occupations in scf. cdoremp-energy2; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O+ molecule. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. cc5; RHF CCSD(T) cc-pVDZ frozen-core energy of C4NH4 Anion. aediis-2; EDIIS test case from 10.1063/1.1470195. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. nbody-freq; Vibrational a",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:35858,Performance,optimiz,optimization,35858,"s in scf. cdoremp-energy2; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O+ molecule. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. cc5; RHF CCSD(T) cc-pVDZ frozen-core energy of C4NH4 Anion. aediis-2; EDIIS test case from 10.1063/1.1470195. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). fci-coverage; 6-31G H2O Test for coverage. dlpnomp2-1; comparison of DF-MP2 and DLPNO-MP2. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. mbis-4; MBIS calculation on NaCl. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. pywrap-cbs1; Various basis set extrapolation tests. dct-grad1; Various DCT analytic gradients for the O2 molecule with 6-31G basis set. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. dct10; The multiple guesses for DCT amplitudes for ODC-12. mom-h2o-3; MOM excitation from LUMO HOMO+3. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen b",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:36547,Performance,optimiz,optimization,36547," full details. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). fci-coverage; 6-31G H2O Test for coverage. dlpnomp2-1; comparison of DF-MP2 and DLPNO-MP2. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. mbis-4; MBIS calculation on NaCl. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. pywrap-cbs1; Various basis set extrapolation tests. dct-grad1; Various DCT analytic gradients for the O2 molecule with 6-31G basis set. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. dct10; The multiple guesses for DCT amplitudes for ODC-12. mom-h2o-3; MOM excitation from LUMO HOMO+3. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. nbo; Generation of NBO file. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. scf-hess3; CONV SCF 6-31G analytical vs finite-difference tests Tests UHF hessian code for Ca != Cb. dft3; DF",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:37578,Performance,perform,performing,37578,"or DCT amplitudes for ODC-12. mom-h2o-3; MOM excitation from LUMO HOMO+3. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. nbo; Generation of NBO file. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. scf-hess3; CONV SCF 6-31G analytical vs finite-difference tests Tests UHF hessian code for Ca != Cb. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. mbis-5; MBIS calculation on ZnO. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. fd-gradient; SCF STO-3G finite-difference tests. opt15; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. scf3; File retention, docc, socc, and bond distances specified explicitly. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. options1; check all variety of options parsing. cbs-xtpl-energy-conv; ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:37791,Performance,optimiz,optimization,37791,"tanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. nbo; Generation of NBO file. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. scf-hess3; CONV SCF 6-31G analytical vs finite-difference tests Tests UHF hessian code for Ca != Cb. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. mbis-5; MBIS calculation on ZnO. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. fd-gradient; SCF STO-3G finite-difference tests. opt15; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. scf3; File retention, docc, socc, and bond distances specified explicitly. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. options1; check all variety of options parsing. cbs-xtpl-energy-conv; Extrapolated water energies - conventional integrals version. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with t",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:37903,Performance,optimiz,optimization,37903,"ample of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. nbo; Generation of NBO file. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. scf-hess3; CONV SCF 6-31G analytical vs finite-difference tests Tests UHF hessian code for Ca != Cb. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. mbis-5; MBIS calculation on ZnO. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. fd-gradient; SCF STO-3G finite-difference tests. opt15; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. scf3; File retention, docc, socc, and bond distances specified explicitly. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. options1; check all variety of options parsing. cbs-xtpl-energy-conv; Extrapolated water energies - conventional integrals version. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. isapt-charged; This test case shows an example of running the I-SAPT0/aug-cc-pVDZ com",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:37981,Performance,optimiz,optimized,37981,"ample of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. nbo; Generation of NBO file. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. scf-hess3; CONV SCF 6-31G analytical vs finite-difference tests Tests UHF hessian code for Ca != Cb. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. mbis-5; MBIS calculation on ZnO. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. fd-gradient; SCF STO-3G finite-difference tests. opt15; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. scf3; File retention, docc, socc, and bond distances specified explicitly. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. options1; check all variety of options parsing. cbs-xtpl-energy-conv; Extrapolated water energies - conventional integrals version. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. isapt-charged; This test case shows an example of running the I-SAPT0/aug-cc-pVDZ com",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:39757,Performance,perform,performs,39757,"with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. isapt-charged; This test case shows an example of running the I-SAPT0/aug-cc-pVDZ computation for a positively charged system, illustrating the cation-pi interaction. The SIAO1 link partitioning algorithm is used. The system is taken from http://dx.doi.org/10.1016/j.comptc.2014.02.008. fnocc7; Test fnocc with linear dependencies. fnocc6; Test method/basis with disk_df. tdscf-2; td-uhf test on triplet states of methylene (tda), wfn passing. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. dct3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. sapt-ecp; sapt0 of charged system in ECP basis set. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. oremp-grad2; integral conventional OO-REMP/cc-pVDZ engrad single points for the H2O molecule. single point energies were independently checked using the original wavels code. oremp-grad1; integral conventional OO-REMP/cc-pVDZ engrad single points for the H2O molecule. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). phi-ao; Test computing values of basis functions (puream and non-puream) at points. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. tu4-h2o-freq; Optimization followed by frequen",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:40130,Performance,optimiz,optimization,40130,"doi.org/10.1016/j.comptc.2014.02.008. fnocc7; Test fnocc with linear dependencies. fnocc6; Test method/basis with disk_df. tdscf-2; td-uhf test on triplet states of methylene (tda), wfn passing. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. dct3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. sapt-ecp; sapt0 of charged system in ECP basis set. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. oremp-grad2; integral conventional OO-REMP/cc-pVDZ engrad single points for the H2O molecule. single point energies were independently checked using the original wavels code. oremp-grad1; integral conventional OO-REMP/cc-pVDZ engrad single points for the H2O molecule. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). phi-ao; Test computing values of basis functions (puream and non-puream) at points. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN update ref gradient due to new BraggSlater radii. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. dct11; Restricted DF-DCT ODC-12 energies with linearl",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:43639,Performance,optimiz,optimization,43639,"e Ms = 0 component of the triplet. Uses ROHF triplet orbitals. cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. olccd2; OLCCD cc-pVDZ energy with B3LYP initial guess for the NO radical. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. scf-level-shift-rohf; SCF level shift on an ROHF computation. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. pywrap-align; apply linear fragmentation algorithm to a water cluster. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. pubchem2; Superficial test of PubChem interface. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN update df/pk_ref values due to new BraggSlater radii. cbs-xtpl-dict; Extrapolated water energies. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excita",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:43717,Performance,optimiz,optimized,43717,"e Ms = 0 component of the triplet. Uses ROHF triplet orbitals. cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. olccd2; OLCCD cc-pVDZ energy with B3LYP initial guess for the NO radical. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. scf-level-shift-rohf; SCF level shift on an ROHF computation. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. pywrap-align; apply linear fragmentation algorithm to a water cluster. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. pubchem2; Superficial test of PubChem interface. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN update df/pk_ref values due to new BraggSlater radii. cbs-xtpl-dict; Extrapolated water energies. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excita",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:48982,Performance,optimiz,optimizations,48982,"d a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. dlpnomp2-2; comparison of DF-MP2 and DLPNO-MP2 with a CBS extrapolation. fnocc4; Test FNO-DF-CCSD(T) energy. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. cubeprop-frontier; ROHF frontier orbitals of CH2(s) and CH2(t). nbody-he-4b; MP2/aug-cc-pvDZ many body energies of an arbitrary Helium complex, addressing 4-body formulas. sapt-exch-disp-inf; SAPT0 with S^inf exch-disp20. remp-energy2; integral conventional unrestricted REMP/cc-pVDZ energies for the H2O+ molecule. results were independently verified against the initial wavels implementation. omp2p5-2; OMP2.5 cc-pVDZ energy for the H2O molecule. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. scf-auto-cholesky; Cholesky filter a complete basis. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN updated ref gradient due to new BraggSlater radii. opt11; Transition-state optimizations of HOOH to both torsional transition states. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; <no title>. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:5104,Safety,avoid,avoided,5104,"al. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. olccd-freq1; OLCCD cc-pVDZ freqs for C2H2. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. scf-response3; UHF Dipole Polarizability Test. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt10; usapt example with empty beta due to frozen core. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. dct8; DCT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. dfccsd-grad2; DF-CCSD cc-pVDZ gradient for the NH molecule. dft-pruning; Tests all grid pruning options available and screening of small weights. Check against grid size. cc51; EOM-CC3/cc-pVTZ on H2O. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. sapt9; usapt example with empty beta. cc7; Tests CCENERGY’s CCSD gradient in the presence of a dipole field. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dct5; DC-06 calculation for the O2 molecule (t",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:11080,Safety,avoid,avoided,11080,"on for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc13b; Tests RHF CCSD(T)gradients. cc17; Single point energies of multiple excited states with EOM-CCSD. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. dct9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. scf-ecp3; Water-Argon complex with ECP present; check of UHF Hessian. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. fsaptd-terms; F-SAPT0/jun-cc-pvdz procedure for methan",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:25403,Safety,avoid,avoided,25403,"e. olccd3; OLCCD cc-pVDZ energy with ROHF initial guess for the NO radical. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. cisd-sp; 6-31G** H2O Test CISD Energy Point. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dct4; DCT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. props4; Electrostatic potential and electric field evaluated on a grid around water. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mp2-1; All-electron MP2 6-31G** geometry optimization of water. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. tdscf-3; td-wb97x excitation energies of singlet states of h2o, wfn passing. dft2; DFT Functional Test. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. aediis-1; ADIIS test case, from 10.1063/1.3304922. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. scf-bz2; Benzene Dimer Out-of-C",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:2530,Security,validat,validate,2530,"ility analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. sapt11; sapt example with orbital freezing with alkali metal and dMP2. scf-guess-read2; Test if the the guess read in the same basis converges. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. mints-benchmark; run some BLAS benchmarks. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. linK-1; RHF Linear Exchange Algorithm test for water. fci-h2o-2; 6-31G H2O Test FCI Energy Point. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. psithon1; Spectroscopic constants of H2, and the full ci ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:4618,Security,validat,validate,4618,"D. omp3-3; OMP3 cc-pCVDZ energy with B3LYP initial guess for the NO radical. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. mom-h2o-4; MOM excitation from LUMO HOMO+4. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. olccd-grad2; OLCCD cc-pVDZ gradient for the NO radical. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. olccd-freq1; OLCCD cc-pVDZ freqs for C2H2. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. scf-response3; UHF Dipole Polarizability Test. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt10; usapt example with empty beta due to frozen core. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. dct8; DCT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. dfccsd-grad2; DF-CCSD cc-pVDZ gradient for the NH molecule. dft-pruning; Tests all grid pruning options available and screening of small weights. Check against grid size. cc51; EOM-CC3/cc-pVTZ on H2O. opt7; Various c",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:22137,Security,access,access,22137,"m gradients for H2O. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. stability3; Test LDA stability analysis against QChem. dct1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. scf-level-shift-rks; SCF level shift on an RKS computation. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. cc36; CC2(RHF)/cc-pVDZ energy of H2O. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. fnocc3; Test FNO-QCISD(T) computation. frac-sym; Fractional occupation with symmetry. tdscf-7; TD-HF test variable access. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dft1-alt; DFT Functional Test. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). scf-upcast-custom-basis; test scf castup with custom basis sets. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, compute",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:42192,Security,validat,validate,42192,"MP2.5 cc-pVDZ gradient for the H2O molecule. sapt0-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dft-omega; Test omega is setable updated wb97x_20,wb97x_03 to account for new BraggSlater radii. scf6; Tests RHF/ROHF/UHF SCF gradients. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. olccd-grad1; OLCCD cc-pVDZ gradient for the H2O molecule. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. mints15; check SP basis Fortran exponent parsing. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. extern4; External potential calculation involving a TIP3P water and a QM water. Gradient on the external charges is compared to gradient on the QM atoms to validate the gradient on the charges. cdoremp-energy1; Cholesky decomposed OO-REMP/cc-pVDZ energy for the H2O molecule. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. mbis-6; MBIS calculation on H2O. psimrcc-fd-freq1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. olccd2; OLCCD cc-pVDZ energy with B3LYP initial guess for the NO radical. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-ste",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:299,Testability,test,testing,299,"﻿. <no title>. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; <no title>. Input File; Description. dft-freq-analytic2; Analytic UKS SVWN frequencies, compared to finite difference values. numpy-array-interface; Numpy interface testing. fsapt-ext-abc-au; analog of fsapt-ext-abc with molecule and external potentials in Bohr. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. remp-energy1; integral conventional REMP/cc-pVDZ energies for the H2O molecule. results were independently verified against the initial wavels implementation. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. cc54; CCSD dipole with user-specified basis set. cubeprop; RHF orbitals and density for water. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. dft-custom-gga; DFT (LDA/GGA) test of cus",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:550,Testability,test,test,550,"﻿. <no title>. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; <no title>. Input File; Description. dft-freq-analytic2; Analytic UKS SVWN frequencies, compared to finite difference values. numpy-array-interface; Numpy interface testing. fsapt-ext-abc-au; analog of fsapt-ext-abc with molecule and external potentials in Bohr. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. remp-energy1; integral conventional REMP/cc-pVDZ energies for the H2O molecule. results were independently verified against the initial wavels implementation. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. cc54; CCSD dipole with user-specified basis set. cubeprop; RHF orbitals and density for water. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. dft-custom-gga; DFT (LDA/GGA) test of cus",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:979,Testability,test,test,979,"modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; <no title>. Input File; Description. dft-freq-analytic2; Analytic UKS SVWN frequencies, compared to finite difference values. numpy-array-interface; Numpy interface testing. fsapt-ext-abc-au; analog of fsapt-ext-abc with molecule and external potentials in Bohr. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. remp-energy1; integral conventional REMP/cc-pVDZ energies for the H2O molecule. results were independently verified against the initial wavels implementation. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. cc54; CCSD dipole with user-specified basis set. cubeprop; RHF orbitals and density for water. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_super",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:1150,Testability,test,test,1150," <no title>. Input File; Description. dft-freq-analytic2; Analytic UKS SVWN frequencies, compared to finite difference values. numpy-array-interface; Numpy interface testing. fsapt-ext-abc-au; analog of fsapt-ext-abc with molecule and external potentials in Bohr. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. remp-energy1; integral conventional REMP/cc-pVDZ energies for the H2O molecule. results were independently verified against the initial wavels implementation. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. cc54; CCSD dipole with user-specified basis set. cubeprop; RHF orbitals and density for water. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. sapt11; sapt example with orbital freezing with alkali metal and dMP2. scf-guess-read2; T",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:1525,Testability,test,test,1525,"est of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. remp-energy1; integral conventional REMP/cc-pVDZ energies for the H2O molecule. results were independently verified against the initial wavels implementation. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. cc54; CCSD dipole with user-specified basis set. cubeprop; RHF orbitals and density for water. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. sapt11; sapt example with orbital freezing with alkali metal and dMP2. scf-guess-read2; Test if the the guess read in the same basis converges. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. scf-",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:1593,Testability,test,test,1593,"est of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. remp-energy1; integral conventional REMP/cc-pVDZ energies for the H2O molecule. results were independently verified against the initial wavels implementation. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. cc54; CCSD dipole with user-specified basis set. cubeprop; RHF orbitals and density for water. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. sapt11; sapt example with orbital freezing with alkali metal and dMP2. scf-guess-read2; Test if the the guess read in the same basis converges. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. scf-",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:1692,Testability,test,test,1692,"d to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. remp-energy1; integral conventional REMP/cc-pVDZ energies for the H2O molecule. results were independently verified against the initial wavels implementation. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. cc54; CCSD dipole with user-specified basis set. cubeprop; RHF orbitals and density for water. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. sapt11; sapt example with orbital freezing with alkali metal and dMP2. scf-guess-read2; Test if the the guess read in the same basis converges. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:1757,Testability,test,testing,1757,"-energy1; integral conventional REMP/cc-pVDZ energies for the H2O molecule. results were independently verified against the initial wavels implementation. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. cc54; CCSD dipole with user-specified basis set. cubeprop; RHF orbitals and density for water. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. sapt11; sapt example with orbital freezing with alkali metal and dMP2. scf-guess-read2; Test if the the guess read in the same basis converges. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active s",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:1990,Testability,test,test,1990,"xample of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. cc54; CCSD dipole with user-specified basis set. cubeprop; RHF orbitals and density for water. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. sapt11; sapt example with orbital freezing with alkali metal and dMP2. scf-guess-read2; Test if the the guess read in the same basis converges. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. basis-ecp; check mixing ECP and non-ECP orbital/",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:2493,Testability,test,test,2493,"ility analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. sapt11; sapt example with orbital freezing with alkali metal and dMP2. scf-guess-read2; Test if the the guess read in the same basis converges. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. mints-benchmark; run some BLAS benchmarks. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. linK-1; RHF Linear Exchange Algorithm test for water. fci-h2o-2; 6-31G H2O Test FCI Energy Point. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. psithon1; Spectroscopic constants of H2, and the full ci ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:2619,Testability,test,test,2619," without symmetry. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. sapt11; sapt example with orbital freezing with alkali metal and dMP2. scf-guess-read2; Test if the the guess read in the same basis converges. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. mints-benchmark; run some BLAS benchmarks. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. linK-1; RHF Linear Exchange Algorithm test for water. fci-h2o-2; 6-31G H2O Test FCI Energy Point. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:2661,Testability,test,test,2661,"hane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. sapt11; sapt example with orbital freezing with alkali metal and dMP2. scf-guess-read2; Test if the the guess read in the same basis converges. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. mints-benchmark; run some BLAS benchmarks. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. linK-1; RHF Linear Exchange Algorithm test for water. fci-h2o-2; 6-31G H2O Test FCI Energy Point. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. omp3-3; OMP3 cc-pCVDZ energy with B3LYP initial guess for the NO radical. pr",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:3120,Testability,benchmark,benchmark,3120,"st if the the guess read in the same basis converges. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. mints-benchmark; run some BLAS benchmarks. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. linK-1; RHF Linear Exchange Algorithm test for water. fci-h2o-2; 6-31G H2O Test FCI Energy Point. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. omp3-3; OMP3 cc-pCVDZ energy with B3LYP initial guess for the NO radical. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. mom-h2o-4; MOM excitation from LUMO HOMO+4. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. olccd-grad2; OLCCD cc-pVDZ gradient for the NO radical. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. olccd-freq1; OL",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:3145,Testability,benchmark,benchmarks,3145,"st if the the guess read in the same basis converges. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. mints-benchmark; run some BLAS benchmarks. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. linK-1; RHF Linear Exchange Algorithm test for water. fci-h2o-2; 6-31G H2O Test FCI Energy Point. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. omp3-3; OMP3 cc-pCVDZ energy with B3LYP initial guess for the NO radical. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. mom-h2o-4; MOM excitation from LUMO HOMO+4. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. olccd-grad2; OLCCD cc-pVDZ gradient for the NO radical. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. olccd-freq1; OL",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:3336,Testability,test,test,3336,"F Internal-coordinate constraints in internal-coordinate optimizations. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. mints-benchmark; run some BLAS benchmarks. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. linK-1; RHF Linear Exchange Algorithm test for water. fci-h2o-2; 6-31G H2O Test FCI Energy Point. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. omp3-3; OMP3 cc-pCVDZ energy with B3LYP initial guess for the NO radical. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. mom-h2o-4; MOM excitation from LUMO HOMO+4. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. olccd-grad2; OLCCD cc-pVDZ gradient for the NO radical. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. olccd-freq1; OLCCD cc-pVDZ freqs for C2H2. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. scf-response3; UHF Dipole Polarizability Test. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt10; usapt example",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:4581,Testability,test,test,4581,"D. omp3-3; OMP3 cc-pCVDZ energy with B3LYP initial guess for the NO radical. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. mom-h2o-4; MOM excitation from LUMO HOMO+4. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. olccd-grad2; OLCCD cc-pVDZ gradient for the NO radical. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. olccd-freq1; OLCCD cc-pVDZ freqs for C2H2. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. scf-response3; UHF Dipole Polarizability Test. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt10; usapt example with empty beta due to frozen core. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. dct8; DCT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. dfccsd-grad2; DF-CCSD cc-pVDZ gradient for the NH molecule. dft-pruning; Tests all grid pruning options available and screening of small weights. Check against grid size. cc51; EOM-CC3/cc-pVTZ on H2O. opt7; Various c",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:6983,Testability,test,test,6983,"displaced ozone, with Z-matrix input. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. cepa1; cc-pvdz H2O Test CEPA(1) Energy. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. cc56; EOM-CCSD/6-31g excited state transition data for water cation. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. fnocc5; Test FNO-DF-CCSD(T) energy. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. scf-uhf-grad-nobeta; UHF gradient for a one-electron system (no beta electrons). cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. dft-smoke; DFT Functional Smoke Test. ao-casscf-sp; CASSCF/6-31G** energy point. cepa-module; routing check on lccd, lccsd, cepa(0). dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. cbs-xtpl-alpha; Extrapolated water energies. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. nbody-nocp-gradient; Computation of NoCP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and di",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:9016,Testability,test,test,9016,"atics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. sapt-exch-ind30-inf; SAPT2+3 with S^inf exch-ind30 Geometries taken from the S66x10 database, the shortest-range point (R = 0.7 R_e). cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. density-screen-2; RKS Density Matrix based-Integral Screening Test for benzene. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega= (589 355 nm). fci-h2o; 6-31G H2O Test FCI Energy Point. dfremp-1; density fitted REMP/cc-pVDZ energies for the CO2 molecule. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. scf-cholesky-basis; incremental Cholesky filtered SCF. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. ddd-function-kwargs; check distributed driver is correctly passing function kwargs. dct2; D",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:10603,Testability,test,test,10603,"essures but not for different isotopologs. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. ddd-function-kwargs; check distributed driver is correctly passing function kwargs. dct2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc13b; Tests RHF CCSD(T)gradients. cc17; Single point energies of multiple excited states with EOM-CCSD. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. dct9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. scf-ecp3; Water-Argon complex with ECP present; check of UHF Hessian. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Tr",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:13260,Testability,test,test,13260,"ent of 1-2B2 state of H2O+ with EOM-CCSD. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. dct-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. sapt-compare; SAPT0 aug-cc-pVDZ computation of the water-water interaction energy, using the three SAPT codes. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. omp2-3; OMP2 cc-pVDZ energy for the NO radical. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf-response2; Compute the dipole polarizability for water with custom basis set. scf-guess-read3; Test if the the guess read in the same basis converges. scf-level-shift-uhf; SCF level shift on a UHF computation. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:14204,Testability,test,tests,14204,"ensity fitting with ROHF. dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. omp2-3; OMP2 cc-pVDZ energy for the NO radical. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf-response2; Compute the dipole polarizability for water with custom basis set. scf-guess-read3; Test if the the guess read in the same basis converges. scf-level-shift-uhf; SCF level shift on a UHF computation. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cbs-xtpl-nbody; RHF interaction energies using nbody and cbs parts of the driver Ne dimer with mp2/v[dt]z + d:ccsd(t)/vdz. freq-masses; check nonphysical masses possible. scf-level-shift-cuhf; SCF level shift on a CUHF computation. dft-freq-analytic1; Analytic SVWN frequencies, compared to finite difference values. density-screen-1; RHF Density Matrix based-Integral Screening Test for water. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. mbis-2; MBIS calculation on OH- (Expanded Arrays). sapt-sf1; Tests the Psi4 SF-SAPT code. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. cc13d; Tests analytic CC2 gradients. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ c",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:15991,Testability,test,test,15991,"cular root. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. cc13d; Tests analytic CC2 gradients. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. olccd1; OLCCD cc-pVDZ energy for the H2O molecule. fsapt-ext-abc2; FSAPT with external charge on dimer. pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. cbs-xtpl-energy; Extrapolated water energies - density-fitted version. dforemp-grad2; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O+ molecule. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. nbody-vmfc-hessian; Computation of VMFC-corrected water trimer Hessian (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. nbody-hessian; Computation of VMFC-corrected HF dimer Hessian. cc13c; Tests RHF CCSD(T)gradients. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. fci-dipole; 6-31G H2O Test FCI Energy Point. tdscf-5; td-camb3lyp ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:16122,Testability,test,test,16122,"dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. olccd1; OLCCD cc-pVDZ energy for the H2O molecule. fsapt-ext-abc2; FSAPT with external charge on dimer. pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. cbs-xtpl-energy; Extrapolated water energies - density-fitted version. dforemp-grad2; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O+ molecule. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. nbody-vmfc-hessian; Computation of VMFC-corrected water trimer Hessian (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. nbody-hessian; Computation of VMFC-corrected HF dimer Hessian. cc13c; Tests RHF CCSD(T)gradients. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. fci-dipole; 6-31G H2O Test FCI Energy Point. tdscf-5; td-camb3lyp with DiskDF and method/basis specification. dft-grac; Gradient regularized asymptotic correction (GRAC",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:16232,Testability,test,test,16232,"ient for the NO radical. olccd1; OLCCD cc-pVDZ energy for the H2O molecule. fsapt-ext-abc2; FSAPT with external charge on dimer. pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. cbs-xtpl-energy; Extrapolated water energies - density-fitted version. dforemp-grad2; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O+ molecule. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. nbody-vmfc-hessian; Computation of VMFC-corrected water trimer Hessian (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. nbody-hessian; Computation of VMFC-corrected HF dimer Hessian. cc13c; Tests RHF CCSD(T)gradients. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. fci-dipole; 6-31G H2O Test FCI Energy Point. tdscf-5; td-camb3lyp with DiskDF and method/basis specification. dft-grac; Gradient regularized asymptotic correction (GRAC) test. castup2; SCF with various combinations of pk/density-fitting, castup/no-cast",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:16792,Testability,test,test,16792,"n1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. nbody-vmfc-hessian; Computation of VMFC-corrected water trimer Hessian (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. nbody-hessian; Computation of VMFC-corrected HF dimer Hessian. cc13c; Tests RHF CCSD(T)gradients. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. fci-dipole; 6-31G H2O Test FCI Energy Point. tdscf-5; td-camb3lyp with DiskDF and method/basis specification. dft-grac; Gradient regularized asymptotic correction (GRAC) test. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. scf-hess5; DF SCF 6-31G analytical vs finite-difference tests Tests DF UHF hessian code for Ca != Cb. linK-3; UHF and ROHF Linear Exchange Algorithm test for benzyl",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:16923,Testability,test,test,16923,"y with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. nbody-vmfc-hessian; Computation of VMFC-corrected water trimer Hessian (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. nbody-hessian; Computation of VMFC-corrected HF dimer Hessian. cc13c; Tests RHF CCSD(T)gradients. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. fci-dipole; 6-31G H2O Test FCI Energy Point. tdscf-5; td-camb3lyp with DiskDF and method/basis specification. dft-grac; Gradient regularized asymptotic correction (GRAC) test. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. scf-hess5; DF SCF 6-31G analytical vs finite-difference tests Tests DF UHF hessian code for Ca != Cb. linK-3; UHF and ROHF Linear Exchange Algorithm test for benzyl cation. scf7; Tests SCF gradient in the presence of a dipole field. pywrap-molecule; Check that C++ M",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:17150,Testability,test,test,17150,"test is first performed in C2v symmetry, and then in C1. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. nbody-vmfc-hessian; Computation of VMFC-corrected water trimer Hessian (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. nbody-hessian; Computation of VMFC-corrected HF dimer Hessian. cc13c; Tests RHF CCSD(T)gradients. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. fci-dipole; 6-31G H2O Test FCI Energy Point. tdscf-5; td-camb3lyp with DiskDF and method/basis specification. dft-grac; Gradient regularized asymptotic correction (GRAC) test. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. scf-hess5; DF SCF 6-31G analytical vs finite-difference tests Tests DF UHF hessian code for Ca != Cb. linK-3; UHF and ROHF Linear Exchange Algorithm test for benzyl cation. scf7; Tests SCF gradient in the presence of a dipole field. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. cc43; RHF-CC",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:17739,Testability,test,tests,17739,"ed water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. fci-dipole; 6-31G H2O Test FCI Energy Point. tdscf-5; td-camb3lyp with DiskDF and method/basis specification. dft-grac; Gradient regularized asymptotic correction (GRAC) test. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. scf-hess5; DF SCF 6-31G analytical vs finite-difference tests Tests DF UHF hessian code for Ca != Cb. linK-3; UHF and ROHF Linear Exchange Algorithm test for benzyl cation. scf7; Tests SCF gradient in the presence of a dipole field. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. fnocc2; Test G2 method for H2O. mints2-bse; Similar to mints2, but using the BSE to specify the basis sets. isapt-siao1; This test case shows an example of running the I-SAPT0/jun-cc-pVDZ computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups) The SIAO1 link partitioning algorithm is used. cc8a; ROHF-CCSD(T) cc-",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:17832,Testability,test,test,17832,"er need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. fci-dipole; 6-31G H2O Test FCI Energy Point. tdscf-5; td-camb3lyp with DiskDF and method/basis specification. dft-grac; Gradient regularized asymptotic correction (GRAC) test. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. scf-hess5; DF SCF 6-31G analytical vs finite-difference tests Tests DF UHF hessian code for Ca != Cb. linK-3; UHF and ROHF Linear Exchange Algorithm test for benzyl cation. scf7; Tests SCF gradient in the presence of a dipole field. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. fnocc2; Test G2 method for H2O. mints2-bse; Similar to mints2, but using the BSE to specify the basis sets. isapt-siao1; This test case shows an example of running the I-SAPT0/jun-cc-pVDZ computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups) The SIAO1 link partitioning algorithm is used. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:18493,Testability,test,test,18493,"2; 6-31G** H2O Test CISD Energy Point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. scf-hess5; DF SCF 6-31G analytical vs finite-difference tests Tests DF UHF hessian code for Ca != Cb. linK-3; UHF and ROHF Linear Exchange Algorithm test for benzyl cation. scf7; Tests SCF gradient in the presence of a dipole field. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. fnocc2; Test G2 method for H2O. mints2-bse; Similar to mints2, but using the BSE to specify the basis sets. isapt-siao1; This test case shows an example of running the I-SAPT0/jun-cc-pVDZ computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups) The SIAO1 link partitioning algorithm is used. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). fcidump; test FCIDUMP functionality for rhf/uhf. x2c-perturb-h; Test SFX2C-1e with a static electric field on He aug-cc-pVTZ. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. pubchem1; Benzene",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:19148,Testability,test,test,19148,"yloxirane. gauge = both, omega = (589 355 nm). cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. fnocc2; Test G2 method for H2O. mints2-bse; Similar to mints2, but using the BSE to specify the basis sets. isapt-siao1; This test case shows an example of running the I-SAPT0/jun-cc-pVDZ computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups) The SIAO1 link partitioning algorithm is used. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). fcidump; test FCIDUMP functionality for rhf/uhf. x2c-perturb-h; Test SFX2C-1e with a static electric field on He aug-cc-pVTZ. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp2p5-1; OMP2.5 cc-pVDZ energy for the H2O molecule. tu5-sapt; Example SAPT computation for et",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:19426,Testability,test,tests,19426,"t using the BSE to specify the basis sets. isapt-siao1; This test case shows an example of running the I-SAPT0/jun-cc-pVDZ computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups) The SIAO1 link partitioning algorithm is used. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). fcidump; test FCIDUMP functionality for rhf/uhf. x2c-perturb-h; Test SFX2C-1e with a static electric field on He aug-cc-pVTZ. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp2p5-1; OMP2.5 cc-pVDZ energy for the H2O molecule. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. matrix2; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating. dft-grad-meta; meta",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:20203,Testability,test,test,20203,"FX2C-1e with a static electric field on He aug-cc-pVTZ. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp2p5-1; OMP2.5 cc-pVDZ energy for the H2O molecule. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. matrix2; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating. dft-grad-meta; meta-GGA gradients of water and ssh molecules reference gradients updated due to new BraggSlater radii. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). fsapt-ext; Quick test of external potential in F-SAPT (see fsapt1 for a real example). psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dct7; DCT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. psithon2; Accesses basis sets, databases, plugins, and executab",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:20679,Testability,test,test,20679,"ry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp2p5-1; OMP2.5 cc-pVDZ energy for the H2O molecule. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. matrix2; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating. dft-grad-meta; meta-GGA gradients of water and ssh molecules reference gradients updated due to new BraggSlater radii. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). fsapt-ext; Quick test of external potential in F-SAPT (see fsapt1 for a real example). psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dct7; DCT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. stability3; Test LDA stability analysis against QChem. dct1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. op",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:21003,Testability,test,tested,21003," This example uses frozen core as well as MP2 natural orbital approximations. omp2p5-1; OMP2.5 cc-pVDZ energy for the H2O molecule. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. matrix2; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating. dft-grad-meta; meta-GGA gradients of water and ssh molecules reference gradients updated due to new BraggSlater radii. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). fsapt-ext; Quick test of external potential in F-SAPT (see fsapt1 for a real example). psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dct7; DCT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. stability3; Test LDA stability analysis against QChem. dct1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. scf-level-shift-rks; SCF level shift on an RKS computation. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. cc36; CC2(RHF)/cc-pVDZ energy of H2O. tu6-cp-ne2; Example potential energy surface s",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:22123,Testability,test,test,22123,"m gradients for H2O. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. stability3; Test LDA stability analysis against QChem. dct1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. scf-level-shift-rks; SCF level shift on an RKS computation. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. cc36; CC2(RHF)/cc-pVDZ energy of H2O. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. fnocc3; Test FNO-QCISD(T) computation. frac-sym; Fractional occupation with symmetry. tdscf-7; TD-HF test variable access. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dft1-alt; DFT Functional Test. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). scf-upcast-custom-basis; test scf castup with custom basis sets. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, compute",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:22647,Testability,test,test,22647,"ur-virtual integrals are handled in the MO Basis. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. scf-level-shift-rks; SCF level shift on an RKS computation. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. cc36; CC2(RHF)/cc-pVDZ energy of H2O. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. fnocc3; Test FNO-QCISD(T) computation. frac-sym; Fractional occupation with symmetry. tdscf-7; TD-HF test variable access. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dft1-alt; DFT Functional Test. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). scf-upcast-custom-basis; test scf castup with custom basis sets. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. mints3; Test individual integral objects for correctness. dft-custom; DFT custom functional test. lccd-grad1; LCCD cc-pVDZ gradient for the H2O molecule. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. soscf-large; Second-order SCF converg",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:23409,Testability,test,test,23409,"rid error. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dft1-alt; DFT Functional Test. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). scf-upcast-custom-basis; test scf castup with custom basis sets. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. mints3; Test individual integral objects for correctness. dft-custom; DFT custom functional test. lccd-grad1; LCCD cc-pVDZ gradient for the H2O molecule. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. soscf-large; Second-order SCF convergnece: Benzene. opt16; SCF 6-31G(d) optimization of TS for HCN to HNC Performs finite difference hessian calculation. Then optimizes using previous orbitals for scf guess, in subsequent calculations. The last two displacements of the hessian break the plane of symemtry, This test confirms that only the reference geometry, with the correct symmetry, writes orbitals to disk. SCF will fail (ValidationError) otherwise. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). casscf-fzc-sp; CASSCF/6-31G** energy point. scf-coverage; Lithium test for coverage. olccd3; OLCCD cc-pVDZ energy with ROHF init",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:23929,Testability,test,test,23929,"ication must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. mints3; Test individual integral objects for correctness. dft-custom; DFT custom functional test. lccd-grad1; LCCD cc-pVDZ gradient for the H2O molecule. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. soscf-large; Second-order SCF convergnece: Benzene. opt16; SCF 6-31G(d) optimization of TS for HCN to HNC Performs finite difference hessian calculation. Then optimizes using previous orbitals for scf guess, in subsequent calculations. The last two displacements of the hessian break the plane of symemtry, This test confirms that only the reference geometry, with the correct symmetry, writes orbitals to disk. SCF will fail (ValidationError) otherwise. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). casscf-fzc-sp; CASSCF/6-31G** energy point. scf-coverage; Lithium test for coverage. olccd3; OLCCD cc-pVDZ energy with ROHF initial guess for the NO radical. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. cisd-sp; 6-31G** H2O Test CISD Energy Point. s",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:24332,Testability,test,test,24332," individual integral objects for correctness. dft-custom; DFT custom functional test. lccd-grad1; LCCD cc-pVDZ gradient for the H2O molecule. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. soscf-large; Second-order SCF convergnece: Benzene. opt16; SCF 6-31G(d) optimization of TS for HCN to HNC Performs finite difference hessian calculation. Then optimizes using previous orbitals for scf guess, in subsequent calculations. The last two displacements of the hessian break the plane of symemtry, This test confirms that only the reference geometry, with the correct symmetry, writes orbitals to disk. SCF will fail (ValidationError) otherwise. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). casscf-fzc-sp; CASSCF/6-31G** energy point. scf-coverage; Lithium test for coverage. olccd3; OLCCD cc-pVDZ energy with ROHF initial guess for the NO radical. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. cisd-sp; 6-31G** H2O Test CISD Energy Point. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dct4; DCT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:24854,Testability,test,test,24854,"s. The last two displacements of the hessian break the plane of symemtry, This test confirms that only the reference geometry, with the correct symmetry, writes orbitals to disk. SCF will fail (ValidationError) otherwise. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). casscf-fzc-sp; CASSCF/6-31G** energy point. scf-coverage; Lithium test for coverage. olccd3; OLCCD cc-pVDZ energy with ROHF initial guess for the NO radical. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. cisd-sp; 6-31G** H2O Test CISD Energy Point. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dct4; DCT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. props4; Electrostatic potential and electric field evaluated on a grid around water. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mp2-1; All-electron MP2 6-31G** geometry optimization of water. sapt1; SAPT0 cc-pVDZ computation of th",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:26189,Testability,test,test,26189," Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. props4; Electrostatic potential and electric field evaluated on a grid around water. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mp2-1; All-electron MP2 6-31G** geometry optimization of water. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. tdscf-3; td-wb97x excitation energies of singlet states of h2o, wfn passing. dft2; DFT Functional Test. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. aediis-1; ADIIS test case, from 10.1063/1.3304922. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. fsapt-ext-abc; FSAPT with external charge on trimer. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. dft-reference; MP2 with a PBE0 reference computation. dft1; DFT Functional Test all values update for new BraggSlater radii. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. ddd-deriv; Sample HF/cc-pVDZ H2O computation all derivatives. nbody-multi-level-2; many-body different levels of theory on each body of helium tetramer. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. cc22",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:26280,Testability,test,tests,26280,"gy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. props4; Electrostatic potential and electric field evaluated on a grid around water. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mp2-1; All-electron MP2 6-31G** geometry optimization of water. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. tdscf-3; td-wb97x excitation energies of singlet states of h2o, wfn passing. dft2; DFT Functional Test. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. aediis-1; ADIIS test case, from 10.1063/1.3304922. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. fsapt-ext-abc; FSAPT with external charge on trimer. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. dft-reference; MP2 with a PBE0 reference computation. dft1; DFT Functional Test all values update for new BraggSlater radii. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. ddd-deriv; Sample HF/cc-pVDZ H2O computation all derivatives. nbody-multi-level-2; many-body different levels of theory on each body of helium tetramer. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. td",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:27051,Testability,test,test,27051,"nal Test. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. aediis-1; ADIIS test case, from 10.1063/1.3304922. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. fsapt-ext-abc; FSAPT with external charge on trimer. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. dft-reference; MP2 with a PBE0 reference computation. dft1; DFT Functional Test all values update for new BraggSlater radii. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. ddd-deriv; Sample HF/cc-pVDZ H2O computation all derivatives. nbody-multi-level-2; many-body different levels of theory on each body of helium tetramer. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. tdscf-1; td-uhf test on triplet states of methylene (rpa). omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the u",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:27284,Testability,test,test,27284,"ric density matrices. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. fsapt-ext-abc; FSAPT with external charge on trimer. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. dft-reference; MP2 with a PBE0 reference computation. dft1; DFT Functional Test all values update for new BraggSlater radii. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. ddd-deriv; Sample HF/cc-pVDZ H2O computation all derivatives. nbody-multi-level-2; many-body different levels of theory on each body of helium tetramer. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. tdscf-1; td-uhf test on triplet states of methylene (rpa). omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. opt-irc-1; Compute the IRC",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:27821,Testability,test,testing,27821,"ramer. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. tdscf-1; td-uhf test on triplet states of methylene (rpa). omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. dfccsd-t-grad2; DF-CCSD(T) cc-pVDZ gradient for the NH molecule. cdremp-2; Cholesky decomposed REMP/cc-pVDZ energies for the CH3 radical. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. psimrcc-ccsd_t-2; Mk-MRCCSD(T) sin",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:28083,Testability,test,test,28083,"ocedure for phenol dimer from the S22 database. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. tdscf-1; td-uhf test on triplet states of methylene (rpa). omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. dfccsd-t-grad2; DF-CCSD(T) cc-pVDZ gradient for the NH molecule. cdremp-2; Cholesky decomposed REMP/cc-pVDZ energies for the CH3 radical. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. mbis-1; MBIS calculation on H2O. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coo",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:28214,Testability,test,test,28214,"ch irrep in \(^{3}B_1\) CH2. tdscf-1; td-uhf test on triplet states of methylene (rpa). omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. dfccsd-t-grad2; DF-CCSD(T) cc-pVDZ gradient for the NH molecule. cdremp-2; Cholesky decomposed REMP/cc-pVDZ energies for the CH3 radical. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. mbis-1; MBIS calculation on H2O. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with vari",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:28753,Testability,test,test,28753,"2.5 cc-pVDZ gradient for the NO radical. pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. dfccsd-t-grad2; DF-CCSD(T) cc-pVDZ gradient for the NH molecule. cdremp-2; Cholesky decomposed REMP/cc-pVDZ energies for the CH3 radical. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. mbis-1; MBIS calculation on H2O. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:30668,Testability,test,testing,30668,"t. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. cc52; CCSD Response for H2O2. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. dft-custom-mgga; updated dldf reference to new BraggSlater radii Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. linK-2; RKS Linear Exchange Algorithm test for benzene. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. ao-dfcasscf-sp; CASSCF/6-31G** energy point. cbs-parser; mtd/basis syntax examples. dlpnomp2-3; comparison of DF-MP2 and DLPNO-MP2 with a cartesian basis set. fisapt-siao1; This test case shows an example of running the I-SAPT0/jun-cc-pVDZ computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups) The SIAO1 link partitioning algorithm is used. An F-SAPT partitioning follows I-SAPT. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. dft-jk; DF",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:31009,Testability,test,test,31009,"p; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. cc52; CCSD Response for H2O2. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. dft-custom-mgga; updated dldf reference to new BraggSlater radii Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. linK-2; RKS Linear Exchange Algorithm test for benzene. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. ao-dfcasscf-sp; CASSCF/6-31G** energy point. cbs-parser; mtd/basis syntax examples. dlpnomp2-3; comparison of DF-MP2 and DLPNO-MP2 with a cartesian basis set. fisapt-siao1; This test case shows an example of running the I-SAPT0/jun-cc-pVDZ computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups) The SIAO1 link partitioning algorithm is used. An F-SAPT partitioning follows I-SAPT. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. dft-jk; DFT JK on-disk test. cubeprop-esp; RHF orbitals and density for water. cbs-delta-energy; Extrapolated energies with delta correction. dfcasscf-sp; CASSCF/6-31G** energy point. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. fsapt-d; Tests SAPT0",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:31282,Testability,test,test,31282," from the Psi library. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. dft-custom-mgga; updated dldf reference to new BraggSlater radii Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. linK-2; RKS Linear Exchange Algorithm test for benzene. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. ao-dfcasscf-sp; CASSCF/6-31G** energy point. cbs-parser; mtd/basis syntax examples. dlpnomp2-3; comparison of DF-MP2 and DLPNO-MP2 with a cartesian basis set. fisapt-siao1; This test case shows an example of running the I-SAPT0/jun-cc-pVDZ computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups) The SIAO1 link partitioning algorithm is used. An F-SAPT partitioning follows I-SAPT. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. dft-jk; DFT JK on-disk test. cubeprop-esp; RHF orbitals and density for water. cbs-delta-energy; Extrapolated energies with delta correction. dfcasscf-sp; CASSCF/6-31G** energy point. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. fsapt-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. dforemp-grad1; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O molecule. scf-hess4; DF SCF 6-31G UHFl vs RHF test Tests DF UHF hessian code for Ca = Cb. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_DISPERSION_PARAMETERS tuple updated ‘bench’ reference values for new Br",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:31643,Testability,test,test,31643,") internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. linK-2; RKS Linear Exchange Algorithm test for benzene. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. ao-dfcasscf-sp; CASSCF/6-31G** energy point. cbs-parser; mtd/basis syntax examples. dlpnomp2-3; comparison of DF-MP2 and DLPNO-MP2 with a cartesian basis set. fisapt-siao1; This test case shows an example of running the I-SAPT0/jun-cc-pVDZ computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups) The SIAO1 link partitioning algorithm is used. An F-SAPT partitioning follows I-SAPT. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. dft-jk; DFT JK on-disk test. cubeprop-esp; RHF orbitals and density for water. cbs-delta-energy; Extrapolated energies with delta correction. dfcasscf-sp; CASSCF/6-31G** energy point. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. fsapt-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. dforemp-grad1; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O molecule. scf-hess4; DF SCF 6-31G UHFl vs RHF test Tests DF UHF hessian code for Ca = Cb. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_DISPERSION_PARAMETERS tuple updated ‘bench’ reference values for new BraggSlater radii. dct-grad4; Unrestricted DF-DCT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. cc12; Single point energies of multiple excited states with EOM-CCS",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:32187,Testability,test,test,32187,"pnomp2-3; comparison of DF-MP2 and DLPNO-MP2 with a cartesian basis set. fisapt-siao1; This test case shows an example of running the I-SAPT0/jun-cc-pVDZ computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups) The SIAO1 link partitioning algorithm is used. An F-SAPT partitioning follows I-SAPT. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. dft-jk; DFT JK on-disk test. cubeprop-esp; RHF orbitals and density for water. cbs-delta-energy; Extrapolated energies with delta correction. dfcasscf-sp; CASSCF/6-31G** energy point. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. fsapt-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. dforemp-grad1; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O molecule. scf-hess4; DF SCF 6-31G UHFl vs RHF test Tests DF UHF hessian code for Ca = Cb. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_DISPERSION_PARAMETERS tuple updated ‘bench’ reference values for new BraggSlater radii. dct-grad4; Unrestricted DF-DCT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. cc12; Single point energies of multiple excited states with EOM-CCSD. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. scf-ecp2; Water-Argon complex with ECP present; check of RHF Hessian. explicit-am-basis; Check that basis sets can be input with explicit angular momentum format. mbis-3; MBIS calculation on OH radical. dfccsdat2; DF-A-CCSD(T) cc-pVDZ energy for the NH molecule. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. psim",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:32266,Testability,test,test,32266,"n basis set. fisapt-siao1; This test case shows an example of running the I-SAPT0/jun-cc-pVDZ computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups) The SIAO1 link partitioning algorithm is used. An F-SAPT partitioning follows I-SAPT. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. dft-jk; DFT JK on-disk test. cubeprop-esp; RHF orbitals and density for water. cbs-delta-energy; Extrapolated energies with delta correction. dfcasscf-sp; CASSCF/6-31G** energy point. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. fsapt-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. dforemp-grad1; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O molecule. scf-hess4; DF SCF 6-31G UHFl vs RHF test Tests DF UHF hessian code for Ca = Cb. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_DISPERSION_PARAMETERS tuple updated ‘bench’ reference values for new BraggSlater radii. dct-grad4; Unrestricted DF-DCT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. cc12; Single point energies of multiple excited states with EOM-CCSD. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. scf-ecp2; Water-Argon complex with ECP present; check of RHF Hessian. explicit-am-basis; Check that basis sets can be input with explicit angular momentum format. mbis-3; MBIS calculation on OH radical. dfccsdat2; DF-A-CCSD(T) cc-pVDZ energy for the NH molecule. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:33390,Testability,test,test,33390,"BraggSlater radii. dct-grad4; Unrestricted DF-DCT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. cc12; Single point energies of multiple excited states with EOM-CCSD. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. scf-ecp2; Water-Argon complex with ECP present; check of RHF Hessian. explicit-am-basis; Check that basis sets can be input with explicit angular momentum format. mbis-3; MBIS calculation on OH radical. dfccsdat2; DF-A-CCSD(T) cc-pVDZ energy for the NH molecule. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. dfccsdt2; DF-CCSD(T) cc-pVDZ energy for the NH molecule. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dfremp-2; density fitted REMP/cc-pVDZ energies for the CH3 radical. mints-helper; A general test of the MintsHelper function. dct-grad3; Restricted DF-DCT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. mp2-h; check that methods can act on single atom. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. cdremp-1; Cholesky decomposed REMP/cc-pVDZ energies for the CO2 molecule. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. lccd-grad2; LCCD cc-pVDZ gradient for the NO radical. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). tdscf-6; td-camb3lyp with DiskDF and method/basis specification. cdomp2-2; OMP2 cc-pVDZ energy",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:33668,Testability,test,test,33668,"dz Energy. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. scf-ecp2; Water-Argon complex with ECP present; check of RHF Hessian. explicit-am-basis; Check that basis sets can be input with explicit angular momentum format. mbis-3; MBIS calculation on OH radical. dfccsdat2; DF-A-CCSD(T) cc-pVDZ energy for the NH molecule. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. dfccsdt2; DF-CCSD(T) cc-pVDZ energy for the NH molecule. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dfremp-2; density fitted REMP/cc-pVDZ energies for the CH3 radical. mints-helper; A general test of the MintsHelper function. dct-grad3; Restricted DF-DCT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. mp2-h; check that methods can act on single atom. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. cdremp-1; Cholesky decomposed REMP/cc-pVDZ energies for the CO2 molecule. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. lccd-grad2; LCCD cc-pVDZ gradient for the NO radical. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). tdscf-6; td-camb3lyp with DiskDF and method/basis specification. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. casscf-sp; CASSCF/6-31G** energy point. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cbs-xtpl-func; optimization with method defined via cbs.",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:33850,Testability,test,test,33850,"can be input with explicit angular momentum format. mbis-3; MBIS calculation on OH radical. dfccsdat2; DF-A-CCSD(T) cc-pVDZ energy for the NH molecule. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. dfccsdt2; DF-CCSD(T) cc-pVDZ energy for the NH molecule. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dfremp-2; density fitted REMP/cc-pVDZ energies for the CH3 radical. mints-helper; A general test of the MintsHelper function. dct-grad3; Restricted DF-DCT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. mp2-h; check that methods can act on single atom. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. cdremp-1; Cholesky decomposed REMP/cc-pVDZ energies for the CO2 molecule. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. lccd-grad2; LCCD cc-pVDZ gradient for the NO radical. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). tdscf-6; td-camb3lyp with DiskDF and method/basis specification. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. casscf-sp; CASSCF/6-31G** energy point. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cbs-xtpl-func; optimization with method defined via cbs. omp3-2; OMP3 cc-pCVDZ energy with ROHF initial guess for the NO radical. dfmp2-fc; Kr–Kr nocp energies with all-electron basis set to check frozen core. scf-occ; force occupations i",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:35190,Testability,test,test,35190,"for the NO radical. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). tdscf-6; td-camb3lyp with DiskDF and method/basis specification. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. casscf-sp; CASSCF/6-31G** energy point. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cbs-xtpl-func; optimization with method defined via cbs. omp3-2; OMP3 cc-pCVDZ energy with ROHF initial guess for the NO radical. dfmp2-fc; Kr–Kr nocp energies with all-electron basis set to check frozen core. scf-occ; force occupations in scf. cdoremp-energy2; density fitted OO-REMP/cc-pVDZ engrad single points for the H2O+ molecule. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. cc5; RHF CCSD(T) cc-pVDZ frozen-core energy of C4NH4 Anion. aediis-2; EDIIS test case from 10.1063/1.1470195. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). fci-coverage; 6-31G H2O Test for coverage. dlpnomp2-1; comparison of DF-MP2 and DLPNO-MP2. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. mbis-4; MBIS calculation on NaCl. cisd-opt-fd; H2O CISD/6-31G** Optimize Geomet",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:35924,Testability,test,testing,35924,"DZ engrad single points for the H2O+ molecule. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. cc5; RHF CCSD(T) cc-pVDZ frozen-core energy of C4NH4 Anion. aediis-2; EDIIS test case from 10.1063/1.1470195. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). fci-coverage; 6-31G H2O Test for coverage. dlpnomp2-1; comparison of DF-MP2 and DLPNO-MP2. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. mbis-4; MBIS calculation on NaCl. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. pywrap-cbs1; Various basis set extrapolation tests. dct-grad1; Various DCT analytic gradients for the O2 molecule with 6-31G basis set. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. dct10; The multiple guesses for DCT amplitudes for ODC-12. mom-h2o-3; MOM excitation from LUMO HOMO+3. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfccsdat1; DF-CCS",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:36424,Testability,test,tests,36424,"on that is computed with cc-pVDZ-ri density fitting with UHF. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). fci-coverage; 6-31G H2O Test for coverage. dlpnomp2-1; comparison of DF-MP2 and DLPNO-MP2. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. mbis-4; MBIS calculation on NaCl. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. pywrap-cbs1; Various basis set extrapolation tests. dct-grad1; Various DCT analytic gradients for the O2 molecule with 6-31G basis set. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. dct10; The multiple guesses for DCT amplitudes for ODC-12. mom-h2o-3; MOM excitation from LUMO HOMO+3. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. nbo; Generation of NBO file. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:36703,Testability,test,test,36703,"omp2-1; comparison of DF-MP2 and DLPNO-MP2. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. mbis-4; MBIS calculation on NaCl. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. pywrap-cbs1; Various basis set extrapolation tests. dct-grad1; Various DCT analytic gradients for the O2 molecule with 6-31G basis set. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. dct10; The multiple guesses for DCT amplitudes for ODC-12. mom-h2o-3; MOM excitation from LUMO HOMO+3. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. nbo; Generation of NBO file. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. scf-hess3; CONV SCF 6-31G analytical vs finite-difference tests Tests UHF hessian code for Ca != Cb. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. mbis-5; MBIS calculation on ZnO. cc2; 6-31G** H2O CCS",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:37308,Testability,test,test,37308,"O molecule. pywrap-cbs1; Various basis set extrapolation tests. dct-grad1; Various DCT analytic gradients for the O2 molecule with 6-31G basis set. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. dct10; The multiple guesses for DCT amplitudes for ODC-12. mom-h2o-3; MOM excitation from LUMO HOMO+3. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. nbo; Generation of NBO file. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. scf-hess3; CONV SCF 6-31G analytical vs finite-difference tests Tests UHF hessian code for Ca != Cb. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. mbis-5; MBIS calculation on ZnO. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. fd-gradient; SCF STO-3G finite-difference tests. opt15; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. scf3; Fil",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:37499,Testability,test,tests,37499,"le with 6-31G basis set. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. dct10; The multiple guesses for DCT amplitudes for ODC-12. mom-h2o-3; MOM excitation from LUMO HOMO+3. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. nbo; Generation of NBO file. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. scf-hess3; CONV SCF 6-31G analytical vs finite-difference tests Tests UHF hessian code for Ca != Cb. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. mbis-5; MBIS calculation on ZnO. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. fd-gradient; SCF STO-3G finite-difference tests. opt15; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. scf3; File retention, docc, socc, and bond distances specified explicitly. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecu",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:37572,Testability,test,test,37572,"or DCT amplitudes for ODC-12. mom-h2o-3; MOM excitation from LUMO HOMO+3. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. nbo; Generation of NBO file. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. scf-hess3; CONV SCF 6-31G analytical vs finite-difference tests Tests UHF hessian code for Ca != Cb. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. mbis-5; MBIS calculation on ZnO. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. fd-gradient; SCF STO-3G finite-difference tests. opt15; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. scf3; File retention, docc, socc, and bond distances specified explicitly. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. options1; check all variety of options parsing. cbs-xtpl-energy-conv; ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:37698,Testability,test,tests,37698,"shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. nbo; Generation of NBO file. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. scf-hess3; CONV SCF 6-31G analytical vs finite-difference tests Tests UHF hessian code for Ca != Cb. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. mbis-5; MBIS calculation on ZnO. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. fd-gradient; SCF STO-3G finite-difference tests. opt15; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. scf3; File retention, docc, socc, and bond distances specified explicitly. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. options1; check all variety of options parsing. cbs-xtpl-energy-conv; Extrapolated water energies - conventional integrals version. rasci-c2-active; 6-31G* C2 Test RAS",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:37880,Testability,test,tests,37880,"n the two hydroxyl groups). dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. nbo; Generation of NBO file. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. scf-hess3; CONV SCF 6-31G analytical vs finite-difference tests Tests UHF hessian code for Ca != Cb. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. mbis-5; MBIS calculation on ZnO. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. fd-gradient; SCF STO-3G finite-difference tests. opt15; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. scf3; File retention, docc, socc, and bond distances specified explicitly. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. options1; check all variety of options parsing. cbs-xtpl-energy-conv; Extrapolated water energies - conventional integrals version. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:38731,Testability,test,testing,38731,"G** H2O CCSD optimization by energies, with Z-Matrix input. fd-gradient; SCF STO-3G finite-difference tests. opt15; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. scf3; File retention, docc, socc, and bond distances specified explicitly. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. options1; check all variety of options parsing. cbs-xtpl-energy-conv; Extrapolated water energies - conventional integrals version. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. isapt-charged; This test case shows an example of running the I-SAPT0/aug-cc-pVDZ computation for a positively charged system, illustrating the cation-pi interaction. The SIAO1 link partitioning algorithm is used. The system is taken from http://dx.doi.org/10.1016/j.comptc.2014.02.008. fnocc7; Test fnocc with linear dependencies. fnocc6; Test method/basis with disk_df. tdscf-2; td-uhf test on triplet states of methylene (tda), wfn passing. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. dct3; DC-06 calculation for the He dimer. This performs a simultaneou",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:38900,Testability,test,test,38900," not linear in the optimized structure but is in a symmetry plane of the molecule. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. scf3; File retention, docc, socc, and bond distances specified explicitly. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. options1; check all variety of options parsing. cbs-xtpl-energy-conv; Extrapolated water energies - conventional integrals version. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. isapt-charged; This test case shows an example of running the I-SAPT0/aug-cc-pVDZ computation for a positively charged system, illustrating the cation-pi interaction. The SIAO1 link partitioning algorithm is used. The system is taken from http://dx.doi.org/10.1016/j.comptc.2014.02.008. fnocc7; Test fnocc with linear dependencies. fnocc6; Test method/basis with disk_df. tdscf-2; td-uhf test on triplet states of methylene (tda), wfn passing. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. dct3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. pywrap-alias; Test parsed and exoti",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:39268,Testability,test,test,39268,"DZ The reference numbers are from Lan Cheng’s implementation in Cfour. scf3; File retention, docc, socc, and bond distances specified explicitly. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. options1; check all variety of options parsing. cbs-xtpl-energy-conv; Extrapolated water energies - conventional integrals version. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. isapt-charged; This test case shows an example of running the I-SAPT0/aug-cc-pVDZ computation for a positively charged system, illustrating the cation-pi interaction. The SIAO1 link partitioning algorithm is used. The system is taken from http://dx.doi.org/10.1016/j.comptc.2014.02.008. fnocc7; Test fnocc with linear dependencies. fnocc6; Test method/basis with disk_df. tdscf-2; td-uhf test on triplet states of methylene (tda), wfn passing. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. dct3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. sapt-ecp; sapt0 of charged system in ECP basis set. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. oremp-grad2; integra",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:42479,Testability,test,tests,42479,"ater radii. scf6; Tests RHF/ROHF/UHF SCF gradients. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. olccd-grad1; OLCCD cc-pVDZ gradient for the H2O molecule. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. mints15; check SP basis Fortran exponent parsing. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. extern4; External potential calculation involving a TIP3P water and a QM water. Gradient on the external charges is compared to gradient on the QM atoms to validate the gradient on the charges. cdoremp-energy1; Cholesky decomposed OO-REMP/cc-pVDZ energy for the H2O molecule. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. mbis-6; MBIS calculation on H2O. psimrcc-fd-freq1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. olccd2; OLCCD cc-pVDZ energy with B3LYP initial guess for the NO radical. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. scf-level-shift-rohf; SCF level shift on an ROHF computation. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. pywrap-checkrun-rohf; This checks that all en",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:43187,Testability,test,tested,43187,"the QM atoms to validate the gradient on the charges. cdoremp-energy1; Cholesky decomposed OO-REMP/cc-pVDZ energy for the H2O molecule. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. mbis-6; MBIS calculation on H2O. psimrcc-fd-freq1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. olccd2; OLCCD cc-pVDZ energy with B3LYP initial guess for the NO radical. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. scf-level-shift-rohf; SCF level shift on an ROHF computation. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. pywrap-align; apply linear fragmentation algorithm to a water cluster. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. pubchem2; Superficial test of PubChem interface. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. dfomp2-grad3; Tests OMP2 gradient in the p",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:43803,Testability,test,test,43803,"n of H2O2. gauge = both, omega = (589 355 nm). scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. olccd2; OLCCD cc-pVDZ energy with B3LYP initial guess for the NO radical. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. scf-level-shift-rohf; SCF level shift on an ROHF computation. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. pywrap-align; apply linear fragmentation algorithm to a water cluster. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. pubchem2; Superficial test of PubChem interface. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN update df/pk_ref values due to new BraggSlater radii. cbs-xtpl-dict; Extrapolated water energies. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. nbody-cp-gradien",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:43839,Testability,test,test,43839,"; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. olccd2; OLCCD cc-pVDZ energy with B3LYP initial guess for the NO radical. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. scf-level-shift-rohf; SCF level shift on an ROHF computation. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. pywrap-align; apply linear fragmentation algorithm to a water cluster. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. pubchem2; Superficial test of PubChem interface. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN update df/pk_ref values due to new BraggSlater radii. cbs-xtpl-dict; Extrapolated water energies. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. nbody-cp-gradient; Computation of CP-corrected water trimer gradie",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:43982,Testability,test,test,43982," FCI Energy Point. olccd2; OLCCD cc-pVDZ energy with B3LYP initial guess for the NO radical. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. scf-level-shift-rohf; SCF level shift on an ROHF computation. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. pywrap-align; apply linear fragmentation algorithm to a water cluster. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. pubchem2; Superficial test of PubChem interface. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN update df/pk_ref values due to new BraggSlater radii. cbs-xtpl-dict; Extrapolated water energies. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. x2c2; Test of SFX",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:44016,Testability,test,test,44016," FCI Energy Point. olccd2; OLCCD cc-pVDZ energy with B3LYP initial guess for the NO radical. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. scf-level-shift-rohf; SCF level shift on an ROHF computation. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. pywrap-align; apply linear fragmentation algorithm to a water cluster. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. pubchem2; Superficial test of PubChem interface. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN update df/pk_ref values due to new BraggSlater radii. cbs-xtpl-dict; Extrapolated water energies. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. x2c2; Test of SFX",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:45039,Testability,test,test,45039,"int. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN update df/pk_ref values due to new BraggSlater radii. cbs-xtpl-dict; Extrapolated water energies. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. sad-scf-type; Test SAD SCF guesses on noble gas atom. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. extern3; Externa",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html:46190,Testability,test,test,46190,"T(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. sad-scf-type; Test SAD SCF guesses on noble gas atom. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. extern3; External potential calculation with one Ghost atom and one point charge at the same position. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). dct12; Spin-restricted DC-06 counterpart of dct1. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. tdscf-4; td-wb97x singlet excitation energies of methylene (tda). cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherril",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_dftd3.html:249,Deployability,install,install,249,"﻿. DFTD3. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; DFTD3. DFTD3¶. Input File; Description. dftd3/psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dftd3/version; Exercises the various DFT-D corrections, both through python directly and through c++ all dft values updated to new BraggSlater radii. dftd3/nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dftd3/grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN, calling Grimme’s dftd3 program for -D2 gradients update reference for new BraggSlater radii. dftd3/energy; Exercises the various DFT-D corrections, both through python directly and through c++. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; DFTD3. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_dftd3.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_dftd3.html
https://psicode.org/psi4manual/master/autodoc_testsuite_dftd3.html:384,Deployability,update,updated,384,"﻿. DFTD3. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; DFTD3. DFTD3¶. Input File; Description. dftd3/psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dftd3/version; Exercises the various DFT-D corrections, both through python directly and through c++ all dft values updated to new BraggSlater radii. dftd3/nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dftd3/grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN, calling Grimme’s dftd3 program for -D2 gradients update reference for new BraggSlater radii. dftd3/energy; Exercises the various DFT-D corrections, both through python directly and through c++. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; DFTD3. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_dftd3.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_dftd3.html
https://psicode.org/psi4manual/master/autodoc_testsuite_dftd3.html:668,Deployability,update,update,668,"﻿. DFTD3. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; DFTD3. DFTD3¶. Input File; Description. dftd3/psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dftd3/version; Exercises the various DFT-D corrections, both through python directly and through c++ all dft values updated to new BraggSlater radii. dftd3/nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dftd3/grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN, calling Grimme’s dftd3 program for -D2 gradients update reference for new BraggSlater radii. dftd3/energy; Exercises the various DFT-D corrections, both through python directly and through c++. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; DFTD3. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_dftd3.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_dftd3.html
https://psicode.org/psi4manual/master/autodoc_testsuite_dftd3.html:1020,Deployability,update,updated,1020,"﻿. DFTD3. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; DFTD3. DFTD3¶. Input File; Description. dftd3/psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dftd3/version; Exercises the various DFT-D corrections, both through python directly and through c++ all dft values updated to new BraggSlater radii. dftd3/nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dftd3/grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN, calling Grimme’s dftd3 program for -D2 gradients update reference for new BraggSlater radii. dftd3/energy; Exercises the various DFT-D corrections, both through python directly and through c++. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; DFTD3. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_dftd3.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_dftd3.html
https://psicode.org/psi4manual/master/autodoc_testsuite_dftd3.html:718,Energy Efficiency,energy,energy,718,"﻿. DFTD3. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; DFTD3. DFTD3¶. Input File; Description. dftd3/psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dftd3/version; Exercises the various DFT-D corrections, both through python directly and through c++ all dft values updated to new BraggSlater radii. dftd3/nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dftd3/grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN, calling Grimme’s dftd3 program for -D2 gradients update reference for new BraggSlater radii. dftd3/energy; Exercises the various DFT-D corrections, both through python directly and through c++. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; DFTD3. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_dftd3.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_dftd3.html
https://psicode.org/psi4manual/master/autodoc_testsuite_dftd3.html:217,Modifiability,plugin,plugins,217,"﻿. DFTD3. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; DFTD3. DFTD3¶. Input File; Description. dftd3/psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dftd3/version; Exercises the various DFT-D corrections, both through python directly and through c++ all dft values updated to new BraggSlater radii. dftd3/nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dftd3/grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN, calling Grimme’s dftd3 program for -D2 gradients update reference for new BraggSlater radii. dftd3/energy; Exercises the various DFT-D corrections, both through python directly and through c++. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; DFTD3. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_dftd3.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_dftd3.html
https://psicode.org/psi4manual/master/autodoc_testsuite_dftd4.html:533,Deployability,update,updated,533,"﻿. DFTD4. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; DFTD4. DFTD4¶. Input File; Description. dftd4/r2scan; Sample r2scan-d4/cc-pVDZ H2O computation. dftd4/energy; Exercises the various DFT-D corrections, both through python directly and through c++. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; DFTD4. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_dftd4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_dftd4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_dftd4.html:231,Energy Efficiency,energy,energy,231,"﻿. DFTD4. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; DFTD4. DFTD4¶. Input File; Description. dftd4/r2scan; Sample r2scan-d4/cc-pVDZ H2O computation. dftd4/energy; Exercises the various DFT-D corrections, both through python directly and through c++. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; DFTD4. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_dftd4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_dftd4.html
https://psicode.org/psi4manual/master/autodoc_testsuite_dkh.html:479,Deployability,update,updated,479,"﻿. DKH. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; DKH. DKH¶. Input File; Description. dkh/molpro-2order; DKH comparison Psi4 vs. Molpro from http://forum.psicode.org/t/problems-enabling-dkh/388/3. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; DKH. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_dkh.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_dkh.html
https://psicode.org/psi4manual/master/autodoc_testsuite_gcp.html:748,Deployability,update,updated,748,"﻿. GCP. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; GCP. GCP¶. Input File; Description. gcp/hf3c; Verify HF-3c method over S22. gcp/b973c; Sample B97-3c H2O computation. gcp/hf3c-gradient; HF3C fd and analytical gradient. gcp/hf3c-hessian; HF3C fd and analytical frequency. gcp/dft-custom-hybrid; DFT (hybrids) + GCP test of implementations in: hybrid_superfuncs.py. gcp/r2scan3c; Sample r2scan-3c H2O computation. gcp/pbeh3c; validate PBEh-3c against the literature. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; GCP. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_gcp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_gcp.html
https://psicode.org/psi4manual/master/autodoc_testsuite_gcp.html:502,Security,validat,validate,502,"﻿. GCP. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; GCP. GCP¶. Input File; Description. gcp/hf3c; Verify HF-3c method over S22. gcp/b973c; Sample B97-3c H2O computation. gcp/hf3c-gradient; HF3C fd and analytical gradient. gcp/hf3c-hessian; HF3C fd and analytical frequency. gcp/dft-custom-hybrid; DFT (hybrids) + GCP test of implementations in: hybrid_superfuncs.py. gcp/r2scan3c; Sample r2scan-3c H2O computation. gcp/pbeh3c; validate PBEh-3c against the literature. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; GCP. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_gcp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_gcp.html
https://psicode.org/psi4manual/master/autodoc_testsuite_gcp.html:392,Testability,test,test,392,"﻿. GCP. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; GCP. GCP¶. Input File; Description. gcp/hf3c; Verify HF-3c method over S22. gcp/b973c; Sample B97-3c H2O computation. gcp/hf3c-gradient; HF3C fd and analytical gradient. gcp/hf3c-hessian; HF3C fd and analytical frequency. gcp/dft-custom-hybrid; DFT (hybrids) + GCP test of implementations in: hybrid_superfuncs.py. gcp/r2scan3c; Sample r2scan-3c H2O computation. gcp/pbeh3c; validate PBEh-3c against the literature. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; GCP. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_gcp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_gcp.html
https://psicode.org/psi4manual/master/autodoc_testsuite_gdma.html:434,Deployability,update,updated,434,"﻿. GDMA. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; GDMA. GDMA¶. Input File; Description. gdma/gdma1; Water RHF/cc-pVTZ distributed multipole analysis. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; GDMA. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_gdma.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_gdma.html
https://psicode.org/psi4manual/master/autodoc_testsuite_gpu_dfcc.html:522,Deployability,update,updated,522,"﻿. GPU_DFCC. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; GPU_DFCC. GPU_DFCC¶. Input File; Description. gpu_dfcc/gpudfcc2; aug-cc-pvdz H2O Test DF-CCSD(T) vs GPU-DF-CCSD(T). gpu_dfcc/gpudfcc1; aug-cc-pvdz H2O Test DF-CCSD vs GPU-DF-CCSD. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; GPU_DFCC. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_gpu_dfcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_gpu_dfcc.html
https://psicode.org/psi4manual/master/autodoc_testsuite_json.html:815,Deployability,update,updated,815,"﻿. JSON. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; JSON. JSON¶. Input File; Description. json/schema-1-energy; test QCSchema for energy. json/schema-1-gradient; test QCSchema for gradient. json/schema-1-orient; test QCSchema mol orientation. json/schema-1-response; test QCSchema for response properties. json/schema-1-ghost; test QCSchema with ghost atoms. json/schema-1-throws; test QCSchema noncontiguous mol. json/schema-1-properties; test QCSchema for properties. json/schema-1-tamps; test QCSchema for CCSD amplitudes saving. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; JSON. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_json.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_json.html
https://psicode.org/psi4manual/master/autodoc_testsuite_json.html:180,Energy Efficiency,energy,energy,180,"﻿. JSON. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; JSON. JSON¶. Input File; Description. json/schema-1-energy; test QCSchema for energy. json/schema-1-gradient; test QCSchema for gradient. json/schema-1-orient; test QCSchema mol orientation. json/schema-1-response; test QCSchema for response properties. json/schema-1-ghost; test QCSchema with ghost atoms. json/schema-1-throws; test QCSchema noncontiguous mol. json/schema-1-properties; test QCSchema for properties. json/schema-1-tamps; test QCSchema for CCSD amplitudes saving. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; JSON. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_json.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_json.html
https://psicode.org/psi4manual/master/autodoc_testsuite_json.html:206,Energy Efficiency,energy,energy,206,"﻿. JSON. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; JSON. JSON¶. Input File; Description. json/schema-1-energy; test QCSchema for energy. json/schema-1-gradient; test QCSchema for gradient. json/schema-1-orient; test QCSchema mol orientation. json/schema-1-response; test QCSchema for response properties. json/schema-1-ghost; test QCSchema with ghost atoms. json/schema-1-throws; test QCSchema noncontiguous mol. json/schema-1-properties; test QCSchema for properties. json/schema-1-tamps; test QCSchema for CCSD amplitudes saving. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; JSON. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_json.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_json.html
https://psicode.org/psi4manual/master/autodoc_testsuite_json.html:188,Testability,test,test,188,"﻿. JSON. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; JSON. JSON¶. Input File; Description. json/schema-1-energy; test QCSchema for energy. json/schema-1-gradient; test QCSchema for gradient. json/schema-1-orient; test QCSchema mol orientation. json/schema-1-response; test QCSchema for response properties. json/schema-1-ghost; test QCSchema with ghost atoms. json/schema-1-throws; test QCSchema noncontiguous mol. json/schema-1-properties; test QCSchema for properties. json/schema-1-tamps; test QCSchema for CCSD amplitudes saving. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; JSON. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_json.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_json.html
https://psicode.org/psi4manual/master/autodoc_testsuite_json.html:238,Testability,test,test,238,"﻿. JSON. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; JSON. JSON¶. Input File; Description. json/schema-1-energy; test QCSchema for energy. json/schema-1-gradient; test QCSchema for gradient. json/schema-1-orient; test QCSchema mol orientation. json/schema-1-response; test QCSchema for response properties. json/schema-1-ghost; test QCSchema with ghost atoms. json/schema-1-throws; test QCSchema noncontiguous mol. json/schema-1-properties; test QCSchema for properties. json/schema-1-tamps; test QCSchema for CCSD amplitudes saving. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; JSON. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_json.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_json.html
https://psicode.org/psi4manual/master/autodoc_testsuite_json.html:288,Testability,test,test,288,"﻿. JSON. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; JSON. JSON¶. Input File; Description. json/schema-1-energy; test QCSchema for energy. json/schema-1-gradient; test QCSchema for gradient. json/schema-1-orient; test QCSchema mol orientation. json/schema-1-response; test QCSchema for response properties. json/schema-1-ghost; test QCSchema with ghost atoms. json/schema-1-throws; test QCSchema noncontiguous mol. json/schema-1-properties; test QCSchema for properties. json/schema-1-tamps; test QCSchema for CCSD amplitudes saving. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; JSON. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_json.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_json.html
https://psicode.org/psi4manual/master/autodoc_testsuite_json.html:343,Testability,test,test,343,"﻿. JSON. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; JSON. JSON¶. Input File; Description. json/schema-1-energy; test QCSchema for energy. json/schema-1-gradient; test QCSchema for gradient. json/schema-1-orient; test QCSchema mol orientation. json/schema-1-response; test QCSchema for response properties. json/schema-1-ghost; test QCSchema with ghost atoms. json/schema-1-throws; test QCSchema noncontiguous mol. json/schema-1-properties; test QCSchema for properties. json/schema-1-tamps; test QCSchema for CCSD amplitudes saving. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; JSON. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_json.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_json.html
https://psicode.org/psi4manual/master/autodoc_testsuite_json.html:403,Testability,test,test,403,"﻿. JSON. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; JSON. JSON¶. Input File; Description. json/schema-1-energy; test QCSchema for energy. json/schema-1-gradient; test QCSchema for gradient. json/schema-1-orient; test QCSchema mol orientation. json/schema-1-response; test QCSchema for response properties. json/schema-1-ghost; test QCSchema with ghost atoms. json/schema-1-throws; test QCSchema noncontiguous mol. json/schema-1-properties; test QCSchema for properties. json/schema-1-tamps; test QCSchema for CCSD amplitudes saving. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; JSON. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_json.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_json.html
https://psicode.org/psi4manual/master/autodoc_testsuite_json.html:457,Testability,test,test,457,"﻿. JSON. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; JSON. JSON¶. Input File; Description. json/schema-1-energy; test QCSchema for energy. json/schema-1-gradient; test QCSchema for gradient. json/schema-1-orient; test QCSchema mol orientation. json/schema-1-response; test QCSchema for response properties. json/schema-1-ghost; test QCSchema with ghost atoms. json/schema-1-throws; test QCSchema noncontiguous mol. json/schema-1-properties; test QCSchema for properties. json/schema-1-tamps; test QCSchema for CCSD amplitudes saving. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; JSON. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_json.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_json.html
https://psicode.org/psi4manual/master/autodoc_testsuite_json.html:516,Testability,test,test,516,"﻿. JSON. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; JSON. JSON¶. Input File; Description. json/schema-1-energy; test QCSchema for energy. json/schema-1-gradient; test QCSchema for gradient. json/schema-1-orient; test QCSchema mol orientation. json/schema-1-response; test QCSchema for response properties. json/schema-1-ghost; test QCSchema with ghost atoms. json/schema-1-throws; test QCSchema noncontiguous mol. json/schema-1-properties; test QCSchema for properties. json/schema-1-tamps; test QCSchema for CCSD amplitudes saving. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; JSON. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_json.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_json.html
https://psicode.org/psi4manual/master/autodoc_testsuite_json.html:567,Testability,test,test,567,"﻿. JSON. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; JSON. JSON¶. Input File; Description. json/schema-1-energy; test QCSchema for energy. json/schema-1-gradient; test QCSchema for gradient. json/schema-1-orient; test QCSchema mol orientation. json/schema-1-response; test QCSchema for response properties. json/schema-1-ghost; test QCSchema with ghost atoms. json/schema-1-throws; test QCSchema noncontiguous mol. json/schema-1-properties; test QCSchema for properties. json/schema-1-tamps; test QCSchema for CCSD amplitudes saving. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; JSON. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_json.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_json.html
https://psicode.org/psi4manual/master/autodoc_testsuite_libefp.html:1036,Deployability,update,updated,1036,"﻿. LIBEFP. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; LIBEFP. LIBEFP¶. Input File; Description. libefp/efp-grad; EFP gradient many-EFP-fragment system (geom and E from libefp pol_3a test). Tests passing of efp torques. libefp/qmefp-moldomains; EFP on mixed QM and EFP systems, testing that right parts of molecule get activated. libefp/qchem-qmefp-puream-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem, both for a native 6D and native 5D basis. libefp/qchem-qmefp-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem. libefp/qchem-efp-sp; EFP-only single-point, all components for benzene dimer. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; LIBEFP. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_libefp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_libefp.html
https://psicode.org/psi4manual/master/autodoc_testsuite_libefp.html:514,Performance,perform,performed,514,"﻿. LIBEFP. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; LIBEFP. LIBEFP¶. Input File; Description. libefp/efp-grad; EFP gradient many-EFP-fragment system (geom and E from libefp pol_3a test). Tests passing of efp torques. libefp/qmefp-moldomains; EFP on mixed QM and EFP systems, testing that right parts of molecule get activated. libefp/qchem-qmefp-puream-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem, both for a native 6D and native 5D basis. libefp/qchem-qmefp-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem. libefp/qchem-efp-sp; EFP-only single-point, all components for benzene dimer. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; LIBEFP. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_libefp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_libefp.html
https://psicode.org/psi4manual/master/autodoc_testsuite_libefp.html:704,Performance,perform,performed,704,"﻿. LIBEFP. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; LIBEFP. LIBEFP¶. Input File; Description. libefp/efp-grad; EFP gradient many-EFP-fragment system (geom and E from libefp pol_3a test). Tests passing of efp torques. libefp/qmefp-moldomains; EFP on mixed QM and EFP systems, testing that right parts of molecule get activated. libefp/qchem-qmefp-puream-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem, both for a native 6D and native 5D basis. libefp/qchem-qmefp-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem. libefp/qchem-efp-sp; EFP-only single-point, all components for benzene dimer. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; LIBEFP. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_libefp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_libefp.html
https://psicode.org/psi4manual/master/autodoc_testsuite_libefp.html:258,Testability,test,test,258,"﻿. LIBEFP. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; LIBEFP. LIBEFP¶. Input File; Description. libefp/efp-grad; EFP gradient many-EFP-fragment system (geom and E from libefp pol_3a test). Tests passing of efp torques. libefp/qmefp-moldomains; EFP on mixed QM and EFP systems, testing that right parts of molecule get activated. libefp/qchem-qmefp-puream-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem, both for a native 6D and native 5D basis. libefp/qchem-qmefp-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem. libefp/qchem-efp-sp; EFP-only single-point, all components for benzene dimer. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; LIBEFP. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_libefp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_libefp.html
https://psicode.org/psi4manual/master/autodoc_testsuite_libefp.html:353,Testability,test,testing,353,"﻿. LIBEFP. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; LIBEFP. LIBEFP¶. Input File; Description. libefp/efp-grad; EFP gradient many-EFP-fragment system (geom and E from libefp pol_3a test). Tests passing of efp torques. libefp/qmefp-moldomains; EFP on mixed QM and EFP systems, testing that right parts of molecule get activated. libefp/qchem-qmefp-puream-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem, both for a native 6D and native 5D basis. libefp/qchem-qmefp-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem. libefp/qchem-efp-sp; EFP-only single-point, all components for benzene dimer. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; LIBEFP. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_libefp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_libefp.html
https://psicode.org/psi4manual/master/autodoc_testsuite_libefp.html:533,Testability,test,test,533,"﻿. LIBEFP. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; LIBEFP. LIBEFP¶. Input File; Description. libefp/efp-grad; EFP gradient many-EFP-fragment system (geom and E from libefp pol_3a test). Tests passing of efp torques. libefp/qmefp-moldomains; EFP on mixed QM and EFP systems, testing that right parts of molecule get activated. libefp/qchem-qmefp-puream-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem, both for a native 6D and native 5D basis. libefp/qchem-qmefp-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem. libefp/qchem-efp-sp; EFP-only single-point, all components for benzene dimer. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; LIBEFP. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_libefp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_libefp.html
https://psicode.org/psi4manual/master/autodoc_testsuite_libefp.html:723,Testability,test,test,723,"﻿. LIBEFP. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; LIBEFP. LIBEFP¶. Input File; Description. libefp/efp-grad; EFP gradient many-EFP-fragment system (geom and E from libefp pol_3a test). Tests passing of efp torques. libefp/qmefp-moldomains; EFP on mixed QM and EFP systems, testing that right parts of molecule get activated. libefp/qchem-qmefp-puream-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem, both for a native 6D and native 5D basis. libefp/qchem-qmefp-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem. libefp/qchem-efp-sp; EFP-only single-point, all components for benzene dimer. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; LIBEFP. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_libefp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_libefp.html
https://psicode.org/psi4manual/master/autodoc_testsuite_mrcc.html:807,Deployability,update,updated,807,"﻿. MRCC. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; MRCC. MRCC¶. Input File; Description. mrcc/optfreq; CCSDT cc-pVDZ optimization and frequencies for the H2O molecule using MRCC. mrcc/ccsd_t_; CCSD(T) cc-pVDZ geometry optimization for the H2O molecule using MRCC. mrcc/ccsdt_q_; CCSDT(Q) cc-pVDZ energy for the H2O molecule using MRCC. This example builds up from CCSD. First CCSD, then CCSDT, finally CCSDT(Q). mrcc/ccsdt; CCSDT cc-pVDZ energy for the H2O molecule using MRCC. mrcc/rohf_ccsdt_q_; rohf ccsdt(q) using mrcc. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; MRCC. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_mrcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_mrcc.html
https://psicode.org/psi4manual/master/autodoc_testsuite_mrcc.html:373,Energy Efficiency,energy,energy,373,"﻿. MRCC. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; MRCC. MRCC¶. Input File; Description. mrcc/optfreq; CCSDT cc-pVDZ optimization and frequencies for the H2O molecule using MRCC. mrcc/ccsd_t_; CCSD(T) cc-pVDZ geometry optimization for the H2O molecule using MRCC. mrcc/ccsdt_q_; CCSDT(Q) cc-pVDZ energy for the H2O molecule using MRCC. This example builds up from CCSD. First CCSD, then CCSDT, finally CCSDT(Q). mrcc/ccsdt; CCSDT cc-pVDZ energy for the H2O molecule using MRCC. mrcc/rohf_ccsdt_q_; rohf ccsdt(q) using mrcc. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; MRCC. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_mrcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_mrcc.html
https://psicode.org/psi4manual/master/autodoc_testsuite_mrcc.html:515,Energy Efficiency,energy,energy,515,"﻿. MRCC. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; MRCC. MRCC¶. Input File; Description. mrcc/optfreq; CCSDT cc-pVDZ optimization and frequencies for the H2O molecule using MRCC. mrcc/ccsd_t_; CCSD(T) cc-pVDZ geometry optimization for the H2O molecule using MRCC. mrcc/ccsdt_q_; CCSDT(Q) cc-pVDZ energy for the H2O molecule using MRCC. This example builds up from CCSD. First CCSD, then CCSDT, finally CCSDT(Q). mrcc/ccsdt; CCSDT cc-pVDZ energy for the H2O molecule using MRCC. mrcc/rohf_ccsdt_q_; rohf ccsdt(q) using mrcc. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; MRCC. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_mrcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_mrcc.html
https://psicode.org/psi4manual/master/autodoc_testsuite_mrcc.html:194,Performance,optimiz,optimization,194,"﻿. MRCC. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; MRCC. MRCC¶. Input File; Description. mrcc/optfreq; CCSDT cc-pVDZ optimization and frequencies for the H2O molecule using MRCC. mrcc/ccsd_t_; CCSD(T) cc-pVDZ geometry optimization for the H2O molecule using MRCC. mrcc/ccsdt_q_; CCSDT(Q) cc-pVDZ energy for the H2O molecule using MRCC. This example builds up from CCSD. First CCSD, then CCSDT, finally CCSDT(Q). mrcc/ccsdt; CCSDT cc-pVDZ energy for the H2O molecule using MRCC. mrcc/rohf_ccsdt_q_; rohf ccsdt(q) using mrcc. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; MRCC. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_mrcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_mrcc.html
https://psicode.org/psi4manual/master/autodoc_testsuite_mrcc.html:295,Performance,optimiz,optimization,295,"﻿. MRCC. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; MRCC. MRCC¶. Input File; Description. mrcc/optfreq; CCSDT cc-pVDZ optimization and frequencies for the H2O molecule using MRCC. mrcc/ccsd_t_; CCSD(T) cc-pVDZ geometry optimization for the H2O molecule using MRCC. mrcc/ccsdt_q_; CCSDT(Q) cc-pVDZ energy for the H2O molecule using MRCC. This example builds up from CCSD. First CCSD, then CCSDT, finally CCSDT(Q). mrcc/ccsdt; CCSDT cc-pVDZ energy for the H2O molecule using MRCC. mrcc/rohf_ccsdt_q_; rohf ccsdt(q) using mrcc. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; MRCC. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_mrcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_mrcc.html
https://psicode.org/psi4manual/master/autodoc_testsuite_pcmsolver.html:258,Deployability,update,updated,258,"﻿. PCMSOLVER. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; PCMSOLVER. PCMSOLVER¶. Input File; Description. pcmsolver/dipole; dipole moment for HF and B3LYP in presence of perturbation updated B3LYP values due to new BraggSlater radii. pcmsolver/alpha; PCM dipole polarizabilities. Ref. values from lsdaton test case: static_alpha_hf_H2O_eq_pcmsolver.out. pcmsolver/opt-fd; PCM-SCF STO-3G geometry optimization by finite differences, with Z-matrix input. pcmsolver/ghost; ghost atoms for the pcmsolver addon. pcmsolver/dft; pcm updated totalenergy to new BraggSlater radii values. pcmsolver/scf; pcm. pcmsolver/uhf-tdscf; UHF PCM TDSCF. pcmsolver/tdscf; PCM TDSCF Ref. values from lsdaton test case: opa_hf_H2O_noneq_pcmsolver.out. pcmsolver/ccsd-pte; coupled-cluster with PCM. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; PCMSOLVER. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_pcmsolver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_pcmsolver.html
https://psicode.org/psi4manual/master/autodoc_testsuite_pcmsolver.html:601,Deployability,update,updated,601,"﻿. PCMSOLVER. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; PCMSOLVER. PCMSOLVER¶. Input File; Description. pcmsolver/dipole; dipole moment for HF and B3LYP in presence of perturbation updated B3LYP values due to new BraggSlater radii. pcmsolver/alpha; PCM dipole polarizabilities. Ref. values from lsdaton test case: static_alpha_hf_H2O_eq_pcmsolver.out. pcmsolver/opt-fd; PCM-SCF STO-3G geometry optimization by finite differences, with Z-matrix input. pcmsolver/ghost; ghost atoms for the pcmsolver addon. pcmsolver/dft; pcm updated totalenergy to new BraggSlater radii values. pcmsolver/scf; pcm. pcmsolver/uhf-tdscf; UHF PCM TDSCF. pcmsolver/tdscf; PCM TDSCF Ref. values from lsdaton test case: opa_hf_H2O_noneq_pcmsolver.out. pcmsolver/ccsd-pte; coupled-cluster with PCM. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; PCMSOLVER. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_pcmsolver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_pcmsolver.html
https://psicode.org/psi4manual/master/autodoc_testsuite_pcmsolver.html:1062,Deployability,update,updated,1062,"﻿. PCMSOLVER. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; PCMSOLVER. PCMSOLVER¶. Input File; Description. pcmsolver/dipole; dipole moment for HF and B3LYP in presence of perturbation updated B3LYP values due to new BraggSlater radii. pcmsolver/alpha; PCM dipole polarizabilities. Ref. values from lsdaton test case: static_alpha_hf_H2O_eq_pcmsolver.out. pcmsolver/opt-fd; PCM-SCF STO-3G geometry optimization by finite differences, with Z-matrix input. pcmsolver/ghost; ghost atoms for the pcmsolver addon. pcmsolver/dft; pcm updated totalenergy to new BraggSlater radii values. pcmsolver/scf; pcm. pcmsolver/uhf-tdscf; UHF PCM TDSCF. pcmsolver/tdscf; PCM TDSCF Ref. values from lsdaton test case: opa_hf_H2O_noneq_pcmsolver.out. pcmsolver/ccsd-pte; coupled-cluster with PCM. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; PCMSOLVER. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_pcmsolver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_pcmsolver.html
https://psicode.org/psi4manual/master/autodoc_testsuite_pcmsolver.html:471,Performance,optimiz,optimization,471,"﻿. PCMSOLVER. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; PCMSOLVER. PCMSOLVER¶. Input File; Description. pcmsolver/dipole; dipole moment for HF and B3LYP in presence of perturbation updated B3LYP values due to new BraggSlater radii. pcmsolver/alpha; PCM dipole polarizabilities. Ref. values from lsdaton test case: static_alpha_hf_H2O_eq_pcmsolver.out. pcmsolver/opt-fd; PCM-SCF STO-3G geometry optimization by finite differences, with Z-matrix input. pcmsolver/ghost; ghost atoms for the pcmsolver addon. pcmsolver/dft; pcm updated totalenergy to new BraggSlater radii values. pcmsolver/scf; pcm. pcmsolver/uhf-tdscf; UHF PCM TDSCF. pcmsolver/tdscf; PCM TDSCF Ref. values from lsdaton test case: opa_hf_H2O_noneq_pcmsolver.out. pcmsolver/ccsd-pte; coupled-cluster with PCM. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; PCMSOLVER. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_pcmsolver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_pcmsolver.html
https://psicode.org/psi4manual/master/autodoc_testsuite_pcmsolver.html:380,Testability,test,test,380,"﻿. PCMSOLVER. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; PCMSOLVER. PCMSOLVER¶. Input File; Description. pcmsolver/dipole; dipole moment for HF and B3LYP in presence of perturbation updated B3LYP values due to new BraggSlater radii. pcmsolver/alpha; PCM dipole polarizabilities. Ref. values from lsdaton test case: static_alpha_hf_H2O_eq_pcmsolver.out. pcmsolver/opt-fd; PCM-SCF STO-3G geometry optimization by finite differences, with Z-matrix input. pcmsolver/ghost; ghost atoms for the pcmsolver addon. pcmsolver/dft; pcm updated totalenergy to new BraggSlater radii values. pcmsolver/scf; pcm. pcmsolver/uhf-tdscf; UHF PCM TDSCF. pcmsolver/tdscf; PCM TDSCF Ref. values from lsdaton test case: opa_hf_H2O_noneq_pcmsolver.out. pcmsolver/ccsd-pte; coupled-cluster with PCM. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; PCMSOLVER. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_pcmsolver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_pcmsolver.html
https://psicode.org/psi4manual/master/autodoc_testsuite_pcmsolver.html:762,Testability,test,test,762,"﻿. PCMSOLVER. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; PCMSOLVER. PCMSOLVER¶. Input File; Description. pcmsolver/dipole; dipole moment for HF and B3LYP in presence of perturbation updated B3LYP values due to new BraggSlater radii. pcmsolver/alpha; PCM dipole polarizabilities. Ref. values from lsdaton test case: static_alpha_hf_H2O_eq_pcmsolver.out. pcmsolver/opt-fd; PCM-SCF STO-3G geometry optimization by finite differences, with Z-matrix input. pcmsolver/ghost; ghost atoms for the pcmsolver addon. pcmsolver/dft; pcm updated totalenergy to new BraggSlater radii values. pcmsolver/scf; pcm. pcmsolver/uhf-tdscf; UHF PCM TDSCF. pcmsolver/tdscf; PCM TDSCF Ref. values from lsdaton test case: opa_hf_H2O_noneq_pcmsolver.out. pcmsolver/ccsd-pte; coupled-cluster with PCM. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; PCMSOLVER. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_pcmsolver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_pcmsolver.html
https://psicode.org/psi4manual/master/autodoc_testsuite_psi4numpy.html:756,Deployability,update,updated,756,"﻿. PSI4NUMPY. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; PSI4NUMPY. PSI4NUMPY¶. Input File; Description. psi4numpy/cphf; Tests out the CG solver with CPHF Polarizabilities. psi4numpy/dfmp2; A simple Psi 4 input script to compute MP2 from a RHF reference. psi4numpy/rhf-gradient; rhf gradient code. psi4numpy/rhf; A simple Psi 4 input script to compute a SCF reference using Psi4’s libJK. psi4numpy/fci; coded full CI vs. detci. psi4numpy/rhf-hessian; RHF Hessian code. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; PSI4NUMPY. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_psi4numpy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_psi4numpy.html
https://psicode.org/psi4manual/master/autodoc_testsuite_psi4numpy.html:268,Usability,simpl,simple,268,"﻿. PSI4NUMPY. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; PSI4NUMPY. PSI4NUMPY¶. Input File; Description. psi4numpy/cphf; Tests out the CG solver with CPHF Polarizabilities. psi4numpy/dfmp2; A simple Psi 4 input script to compute MP2 from a RHF reference. psi4numpy/rhf-gradient; rhf gradient code. psi4numpy/rhf; A simple Psi 4 input script to compute a SCF reference using Psi4’s libJK. psi4numpy/fci; coded full CI vs. detci. psi4numpy/rhf-hessian; RHF Hessian code. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; PSI4NUMPY. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_psi4numpy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_psi4numpy.html
https://psicode.org/psi4manual/master/autodoc_testsuite_psi4numpy.html:391,Usability,simpl,simple,391,"﻿. PSI4NUMPY. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; PSI4NUMPY. PSI4NUMPY¶. Input File; Description. psi4numpy/cphf; Tests out the CG solver with CPHF Polarizabilities. psi4numpy/dfmp2; A simple Psi 4 input script to compute MP2 from a RHF reference. psi4numpy/rhf-gradient; rhf gradient code. psi4numpy/rhf; A simple Psi 4 input script to compute a SCF reference using Psi4’s libJK. psi4numpy/fci; coded full CI vs. detci. psi4numpy/rhf-hessian; RHF Hessian code. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; PSI4NUMPY. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_psi4numpy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_psi4numpy.html
https://psicode.org/psi4manual/master/autodoc_testsuite_python.html:1840,Deployability,update,updated,1840,"﻿. PYTHON. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. PYTHON¶. Input File; Description. python/mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. python/cc54; CCSD dipole with user-specified basis set. python/cc-amps; API access to CCSD amplitudes. python/mints13; test fragment decomposition + to/from_dict. python/mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. python/curve; PsiAPI scanning a potential energy curve. python/3-index-transforms; examine JK packing forms. python/databases; PsiAPI energy example. python/mints14; Check for correctness of ESP values. The ESP values are calculated using one or four threads The one thread values are checked against the four thread values. The one thread values are also checked against the reference values (1 thread values computed, when generating this test). Caution: The reference values are not obtained using an actual physical reference, but rather generated by Psi4 at one point in time. python/pubchem; PsiAPI pubchem access. python/energy; PsiAPI energy example. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_python.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_python.html
https://psicode.org/psi4manual/master/autodoc_testsuite_python.html:1015,Energy Efficiency,energy,energy,1015,"﻿. PYTHON. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. PYTHON¶. Input File; Description. python/mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. python/cc54; CCSD dipole with user-specified basis set. python/cc-amps; API access to CCSD amplitudes. python/mints13; test fragment decomposition + to/from_dict. python/mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. python/curve; PsiAPI scanning a potential energy curve. python/3-index-transforms; examine JK packing forms. python/databases; PsiAPI energy example. python/mints14; Check for correctness of ESP values. The ESP values are calculated using one or four threads The one thread values are checked against the four thread values. The one thread values are also checked against the reference values (1 thread values computed, when generating this test). Caution: The reference values are not obtained using an actual physical reference, but rather generated by Psi4 at one point in time. python/pubchem; PsiAPI pubchem access. python/energy; PsiAPI energy example. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_python.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_python.html
https://psicode.org/psi4manual/master/autodoc_testsuite_python.html:1107,Energy Efficiency,energy,energy,1107,"﻿. PYTHON. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. PYTHON¶. Input File; Description. python/mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. python/cc54; CCSD dipole with user-specified basis set. python/cc-amps; API access to CCSD amplitudes. python/mints13; test fragment decomposition + to/from_dict. python/mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. python/curve; PsiAPI scanning a potential energy curve. python/3-index-transforms; examine JK packing forms. python/databases; PsiAPI energy example. python/mints14; Check for correctness of ESP values. The ESP values are calculated using one or four threads The one thread values are checked against the four thread values. The one thread values are also checked against the reference values (1 thread values computed, when generating this test). Caution: The reference values are not obtained using an actual physical reference, but rather generated by Psi4 at one point in time. python/pubchem; PsiAPI pubchem access. python/energy; PsiAPI energy example. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_python.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_python.html
https://psicode.org/psi4manual/master/autodoc_testsuite_python.html:1601,Energy Efficiency,energy,energy,1601,"﻿. PYTHON. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. PYTHON¶. Input File; Description. python/mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. python/cc54; CCSD dipole with user-specified basis set. python/cc-amps; API access to CCSD amplitudes. python/mints13; test fragment decomposition + to/from_dict. python/mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. python/curve; PsiAPI scanning a potential energy curve. python/3-index-transforms; examine JK packing forms. python/databases; PsiAPI energy example. python/mints14; Check for correctness of ESP values. The ESP values are calculated using one or four threads The one thread values are checked against the four thread values. The one thread values are also checked against the reference values (1 thread values computed, when generating this test). Caution: The reference values are not obtained using an actual physical reference, but rather generated by Psi4 at one point in time. python/pubchem; PsiAPI pubchem access. python/energy; PsiAPI energy example. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_python.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_python.html
https://psicode.org/psi4manual/master/autodoc_testsuite_python.html:1616,Energy Efficiency,energy,energy,1616,"﻿. PYTHON. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. PYTHON¶. Input File; Description. python/mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. python/cc54; CCSD dipole with user-specified basis set. python/cc-amps; API access to CCSD amplitudes. python/mints13; test fragment decomposition + to/from_dict. python/mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. python/curve; PsiAPI scanning a potential energy curve. python/3-index-transforms; examine JK packing forms. python/databases; PsiAPI energy example. python/mints14; Check for correctness of ESP values. The ESP values are calculated using one or four threads The one thread values are checked against the four thread values. The one thread values are also checked against the reference values (1 thread values computed, when generating this test). Caution: The reference values are not obtained using an actual physical reference, but rather generated by Psi4 at one point in time. python/pubchem; PsiAPI pubchem access. python/energy; PsiAPI energy example. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_python.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_python.html
https://psicode.org/psi4manual/master/autodoc_testsuite_python.html:514,Security,access,access,514,"﻿. PYTHON. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. PYTHON¶. Input File; Description. python/mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. python/cc54; CCSD dipole with user-specified basis set. python/cc-amps; API access to CCSD amplitudes. python/mints13; test fragment decomposition + to/from_dict. python/mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. python/curve; PsiAPI scanning a potential energy curve. python/3-index-transforms; examine JK packing forms. python/databases; PsiAPI energy example. python/mints14; Check for correctness of ESP values. The ESP values are calculated using one or four threads The one thread values are checked against the four thread values. The one thread values are also checked against the reference values (1 thread values computed, when generating this test). Caution: The reference values are not obtained using an actual physical reference, but rather generated by Psi4 at one point in time. python/pubchem; PsiAPI pubchem access. python/energy; PsiAPI energy example. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_python.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_python.html
https://psicode.org/psi4manual/master/autodoc_testsuite_python.html:1586,Security,access,access,1586,"﻿. PYTHON. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. PYTHON¶. Input File; Description. python/mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. python/cc54; CCSD dipole with user-specified basis set. python/cc-amps; API access to CCSD amplitudes. python/mints13; test fragment decomposition + to/from_dict. python/mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. python/curve; PsiAPI scanning a potential energy curve. python/3-index-transforms; examine JK packing forms. python/databases; PsiAPI energy example. python/mints14; Check for correctness of ESP values. The ESP values are calculated using one or four threads The one thread values are checked against the four thread values. The one thread values are also checked against the reference values (1 thread values computed, when generating this test). Caution: The reference values are not obtained using an actual physical reference, but rather generated by Psi4 at one point in time. python/pubchem; PsiAPI pubchem access. python/energy; PsiAPI energy example. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_python.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_python.html
https://psicode.org/psi4manual/master/autodoc_testsuite_python.html:189,Testability,test,test,189,"﻿. PYTHON. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. PYTHON¶. Input File; Description. python/mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. python/cc54; CCSD dipole with user-specified basis set. python/cc-amps; API access to CCSD amplitudes. python/mints13; test fragment decomposition + to/from_dict. python/mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. python/curve; PsiAPI scanning a potential energy curve. python/3-index-transforms; examine JK packing forms. python/databases; PsiAPI energy example. python/mints14; Check for correctness of ESP values. The ESP values are calculated using one or four threads The one thread values are checked against the four thread values. The one thread values are also checked against the reference values (1 thread values computed, when generating this test). Caution: The reference values are not obtained using an actual physical reference, but rather generated by Psi4 at one point in time. python/pubchem; PsiAPI pubchem access. python/energy; PsiAPI energy example. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_python.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_python.html
https://psicode.org/psi4manual/master/autodoc_testsuite_python.html:557,Testability,test,test,557,"﻿. PYTHON. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. PYTHON¶. Input File; Description. python/mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. python/cc54; CCSD dipole with user-specified basis set. python/cc-amps; API access to CCSD amplitudes. python/mints13; test fragment decomposition + to/from_dict. python/mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. python/curve; PsiAPI scanning a potential energy curve. python/3-index-transforms; examine JK packing forms. python/databases; PsiAPI energy example. python/mints14; Check for correctness of ESP values. The ESP values are calculated using one or four threads The one thread values are checked against the four thread values. The one thread values are also checked against the reference values (1 thread values computed, when generating this test). Caution: The reference values are not obtained using an actual physical reference, but rather generated by Psi4 at one point in time. python/pubchem; PsiAPI pubchem access. python/energy; PsiAPI energy example. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_python.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_python.html
https://psicode.org/psi4manual/master/autodoc_testsuite_python.html:618,Testability,test,test,618,"﻿. PYTHON. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. PYTHON¶. Input File; Description. python/mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. python/cc54; CCSD dipole with user-specified basis set. python/cc-amps; API access to CCSD amplitudes. python/mints13; test fragment decomposition + to/from_dict. python/mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. python/curve; PsiAPI scanning a potential energy curve. python/3-index-transforms; examine JK packing forms. python/databases; PsiAPI energy example. python/mints14; Check for correctness of ESP values. The ESP values are calculated using one or four threads The one thread values are checked against the four thread values. The one thread values are also checked against the reference values (1 thread values computed, when generating this test). Caution: The reference values are not obtained using an actual physical reference, but rather generated by Psi4 at one point in time. python/pubchem; PsiAPI pubchem access. python/energy; PsiAPI energy example. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_python.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_python.html
https://psicode.org/psi4manual/master/autodoc_testsuite_python.html:1414,Testability,test,test,1414,"﻿. PYTHON. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. PYTHON¶. Input File; Description. python/mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. python/cc54; CCSD dipole with user-specified basis set. python/cc-amps; API access to CCSD amplitudes. python/mints13; test fragment decomposition + to/from_dict. python/mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. python/curve; PsiAPI scanning a potential energy curve. python/3-index-transforms; examine JK packing forms. python/databases; PsiAPI energy example. python/mints14; Check for correctness of ESP values. The ESP values are calculated using one or four threads The one thread values are checked against the four thread values. The one thread values are also checked against the reference values (1 thread values computed, when generating this test). Caution: The reference values are not obtained using an actual physical reference, but rather generated by Psi4 at one point in time. python/pubchem; PsiAPI pubchem access. python/energy; PsiAPI energy example. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_python.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_python.html
https://psicode.org/psi4manual/master/autodoc_testsuite_simint.html:626,Deployability,update,updated,626,"﻿. SIMINT. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; SIMINT. SIMINT¶. Input File; Description. simint/mp2-module; OMP2 cc-pVDZ energy for the H2O molecule and using SIMINT integrals. simint/scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set and using SIMINT integrals. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; SIMINT. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_simint.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_simint.html
https://psicode.org/psi4manual/master/autodoc_testsuite_simint.html:204,Energy Efficiency,energy,energy,204,"﻿. SIMINT. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; SIMINT. SIMINT¶. Input File; Description. simint/mp2-module; OMP2 cc-pVDZ energy for the H2O molecule and using SIMINT integrals. simint/scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set and using SIMINT integrals. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; SIMINT. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_simint.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_simint.html
https://psicode.org/psi4manual/master/autodoc_testsuite_snsmp2.html:502,Deployability,update,updated,502,"﻿. SNSMP2. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; SNSMP2. SNSMP2¶. Input File; Description. snsmp2/cf-o; snsmp2 on fluoromethane-water. snsmp2/cc-cc; sns-mp2 on ethane dimer. snsmp2/he-he; sns-mp2 on helium dimer. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; SNSMP2. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_snsmp2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_snsmp2.html
https://psicode.org/psi4manual/master/autodoc_testsuite_v2rdm_casscf.html:865,Deployability,update,updated,865,"﻿. V2RDM_CASSCF. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; V2RDM_CASSCF. V2RDM_CASSCF¶. Input File; Description. v2rdm_casscf/v2rdm6; cc-pvdz N2 (6,6) active space Test DQG. v2rdm_casscf/v2rdm5; cc-pvdz N2 (6,6) active space Test DQG. v2rdm_casscf/v2rdm7; STO-3g benzene (6,6) guess orbital rotation test DQG. v2rdm_casscf/v2rdm1; cc-pvdz N2 (6,6) active space Test DQG. v2rdm_casscf/v2rdm2; cc-pvdz N2 (6,6) active space Test DQG. v2rdm_casscf/v2rdm4; v2rdm_casscf 1,4-phenylenedinitrene/(10,10)/cc-pVDZ. v2rdm_casscf/v2rdm3; H3 / cc-pvdz / D+D3 vs full CI, scf_type = PK. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; V2RDM_CASSCF. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_v2rdm_casscf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_v2rdm_casscf.html
https://psicode.org/psi4manual/master/autodoc_testsuite_v2rdm_casscf.html:377,Testability,test,test,377,"﻿. V2RDM_CASSCF. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; V2RDM_CASSCF. V2RDM_CASSCF¶. Input File; Description. v2rdm_casscf/v2rdm6; cc-pvdz N2 (6,6) active space Test DQG. v2rdm_casscf/v2rdm5; cc-pvdz N2 (6,6) active space Test DQG. v2rdm_casscf/v2rdm7; STO-3g benzene (6,6) guess orbital rotation test DQG. v2rdm_casscf/v2rdm1; cc-pvdz N2 (6,6) active space Test DQG. v2rdm_casscf/v2rdm2; cc-pvdz N2 (6,6) active space Test DQG. v2rdm_casscf/v2rdm4; v2rdm_casscf 1,4-phenylenedinitrene/(10,10)/cc-pVDZ. v2rdm_casscf/v2rdm3; H3 / cc-pvdz / D+D3 vs full CI, scf_type = PK. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Test Suite and Sample Inputs; V2RDM_CASSCF. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/autodoc_testsuite_v2rdm_casscf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/autodoc_testsuite_v2rdm_casscf.html
https://psicode.org/psi4manual/master/basissets.html:1353,Availability,avail,available,1353,"ectron [no effective core potentials (ECPs)],; and of Gaussian94 format (for ease of export from EMSL).; Both spherical harmonic (5D/7F) and Cartesian (6D/10F) Gaussian functions are supported,; but their mixtures are not, neither within a basis set (e.g., 6D/7F) nor within a calculation; (e.g., cartesian for the orbital basis and spherical for the fitting basis).; For built-in basis sets, the correct spherical/cartesian value for PUREAM; is set internally from the orbital basis. Built-In Basis Sets; Specifying basis sets; Built-in basis sets by family; Built-in basis sets by element; User-Defined basis sets; Auxiliary bases for built-in orbital basis sets. Built-In Basis Sets¶; A wide range of orbital basis sets are built into PSI4. These are; summarized in Tables Pople,; Dunning,; Dunning (Douglas-Kroll),; Karlsruhe,; Jensen,; and Other in Appendix Basis Sets by Family.; These tables are arranged so that columns indicate degree of; augmentation by diffuse functions (generally necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the \(X\;=\zeta\) levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar’s [Papajak:2011:10] calendar; truncations described in Table Months Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting \((oo|\)-type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting \((ov|\)-type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/psi4/share/psi4/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element.; PSI",MatchSource.WIKI,psi4manual/master/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/basissets.html
https://psicode.org/psi4manual/master/basissets.html:1673,Availability,avail,available,1673," is set internally from the orbital basis. Built-In Basis Sets; Specifying basis sets; Built-in basis sets by family; Built-in basis sets by element; User-Defined basis sets; Auxiliary bases for built-in orbital basis sets. Built-In Basis Sets¶; A wide range of orbital basis sets are built into PSI4. These are; summarized in Tables Pople,; Dunning,; Dunning (Douglas-Kroll),; Karlsruhe,; Jensen,; and Other in Appendix Basis Sets by Family.; These tables are arranged so that columns indicate degree of; augmentation by diffuse functions (generally necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the \(X\;=\zeta\) levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar’s [Papajak:2011:10] calendar; truncations described in Table Months Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting \((oo|\)-type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting \((ov|\)-type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/psi4/share/psi4/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element.; PSI4 uses the angular momentum convention below that; skips the letter J. Note that Gaussian94 convention is; not to skip this letter.; PSI4 can use either convention for .gbs import (assuming; angular momentum levels are not skipped), but it will always output; in the HIK sequence. Another portion of the G94 format, labeling; angular momentum with L=l syntax is newly (August 2020); implemented, and this is preferred for L=7 and above to; a",MatchSource.WIKI,psi4manual/master/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/basissets.html
https://psicode.org/psi4manual/master/basissets.html:2135,Availability,avail,availability,2135,"e degree of; augmentation by diffuse functions (generally necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the \(X\;=\zeta\) levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar’s [Papajak:2011:10] calendar; truncations described in Table Months Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting \((oo|\)-type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting \((ov|\)-type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/psi4/share/psi4/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element.; PSI4 uses the angular momentum convention below that; skips the letter J. Note that Gaussian94 convention is; not to skip this letter.; PSI4 can use either convention for .gbs import (assuming; angular momentum levels are not skipped), but it will always output; in the HIK sequence. Another portion of the G94 format, labeling; angular momentum with L=l syntax is newly (August 2020); implemented, and this is preferred for L=7 and above to; avoid ambiguity.; L: 0123456789...; Psi4: SPDFGHIKLM...; G94: SPDFGHIJKL... Mixing Basis Sets¶; While the above syntax will suffice for specifying basis sets in most cases,; the user may need to assign basis sets to specific atoms. To achieve this, a; basis “block” can be used. We use a snippet from the mints2 sample; input file, which performs a benzene SCF computation, to demonstrate this; feature.; basis {; assign DZ; assign C 3-21G; assign H1 sto-3g; assign C1 sto-3g; }. The first line",MatchSource.WIKI,psi4manual/master/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/basissets.html
https://psicode.org/psi4manual/master/basissets.html:11209,Deployability,update,updated,11209," the; command basis {...}, as shown below. Multiple basis sets can be; specified by adding additional sections within the surrounding brackets.; Use assign statements to actually request the basis set. This; basis {...} section replaces the usual set basis XXX line.; In a more complex input, if the user needs to call the user-defined; basis by name, this can be achieved using the syntax basis mybas {...},; and then the basis can be recalled later as set basis mybas.; To use a custom basis set as described in this section, it must be; defined prior to its use in a function that performs a computation.; basis {. # assign basset to all atoms and addl to hydrogens; assign basset; assign H addl. # basis set section like in snippet above goes here; [basset]; ... # additional basis set sections follow; [addl]; ...; }. The test case mints2 provides a complete example of; user-specified basis sets. Inputting effective core potentials (ECPs)¶; For ECP containing basis sets, all of the above mechanisms may still be used to; input the basis set; simply place the ECP definitions (in G94 format) in the; same file or input section as the orbital basis definition. Because the ECP; appears in the same section as the orbital basis, it will be parsed; automatically and the number of core electrons the ECP represents will be; detected, so no further input is required to use a core potential. See; Effective core potentials (ECPs) for more information about using ECPs and the; Def2-TZVP basis set definition; for an example of their input syntax. table of contents. Basis Sets; Built-In Basis Sets; Mixing Basis Sets; Decontracted Basis Sets; User-Defined Basis Sets; Inputting effective core potentials (ECPs). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Psithon: Structuring an Input File; Basis Sets. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/basissets.html
https://psicode.org/psi4manual/master/basissets.html:4455,Energy Efficiency,energy,energy,4455,"STO-3G basis set, leaving the unlabelled hydrogen; atoms with the DZ basis set. Likewise, the fourth line assigns the STO-3G; basis set to just the carbon atoms labelled C1. This bizarre example was; constructed to demonstrate the syntax, but the flexibility of the basis set; specification is advantageous, for example, when selectively omitting diffuse; functions to make computations more tractable.; In the above example the basis sets have been assigned asymmetrically, reducing; the effective symmetry from \(D_{6h}\) to \(C_{2v}\); PSI4 will detect this; automatically and run in the appropriate point group.; Basis blocks can also be named, e.g., basis; optional_basis_name {...} and the basis defined by it later; applied to another molecule.; # sets basis keyword; basis mybas {; assign aug-cc-pvtz; assign f cc-pvtz; }. # re-sets basis keyword; set basis aug-cc-pvtz. molecule hf {; H; F 1 1.0; }. molecule h2o {; O; H 1 1.0; H 1 1.0 2 90.0; }. # runs HF and H2O with aug-cc-pvtz; energy('hf', molecule=hf); energy('hf', molecule=h2o). # re-re-sets basis keyword; set basis mybas. # runs HF with cc-pvtz on F and aug-cc-pvtz on H; energy('hf', molecule=hf). # runs H2O with aug-cc-pvtz, effectively; energy('hf', molecule=h2o). Finally, we note that the basis {...} block may also be used; for defining basis sets, as detailed in User-Defined Basis Sets.; Calculations requesting density fitting (on by default for many methods); require auxiliary fitting basis set(s) in addition to the primary; orbital one associated with the BASIS keyword.; When most popular basis sets are being used, including Dunning and; Pople-style, the SCF, DF-MP2, and SAPT codes will chose the appropriate; auxiliary basis set automatically according to Auxiliary Basis Sets,; unless instructed otherwise by setting the auxiliary basis set in the; input.; Should needed elements be missing from the best; auxiliary basis or should the orbital basis be unknown to PSI4,; the auxiliary basis will fall back on def",MatchSource.WIKI,psi4manual/master/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/basissets.html
https://psicode.org/psi4manual/master/basissets.html:4482,Energy Efficiency,energy,energy,4482,"STO-3G basis set, leaving the unlabelled hydrogen; atoms with the DZ basis set. Likewise, the fourth line assigns the STO-3G; basis set to just the carbon atoms labelled C1. This bizarre example was; constructed to demonstrate the syntax, but the flexibility of the basis set; specification is advantageous, for example, when selectively omitting diffuse; functions to make computations more tractable.; In the above example the basis sets have been assigned asymmetrically, reducing; the effective symmetry from \(D_{6h}\) to \(C_{2v}\); PSI4 will detect this; automatically and run in the appropriate point group.; Basis blocks can also be named, e.g., basis; optional_basis_name {...} and the basis defined by it later; applied to another molecule.; # sets basis keyword; basis mybas {; assign aug-cc-pvtz; assign f cc-pvtz; }. # re-sets basis keyword; set basis aug-cc-pvtz. molecule hf {; H; F 1 1.0; }. molecule h2o {; O; H 1 1.0; H 1 1.0 2 90.0; }. # runs HF and H2O with aug-cc-pvtz; energy('hf', molecule=hf); energy('hf', molecule=h2o). # re-re-sets basis keyword; set basis mybas. # runs HF with cc-pvtz on F and aug-cc-pvtz on H; energy('hf', molecule=hf). # runs H2O with aug-cc-pvtz, effectively; energy('hf', molecule=h2o). Finally, we note that the basis {...} block may also be used; for defining basis sets, as detailed in User-Defined Basis Sets.; Calculations requesting density fitting (on by default for many methods); require auxiliary fitting basis set(s) in addition to the primary; orbital one associated with the BASIS keyword.; When most popular basis sets are being used, including Dunning and; Pople-style, the SCF, DF-MP2, and SAPT codes will chose the appropriate; auxiliary basis set automatically according to Auxiliary Basis Sets,; unless instructed otherwise by setting the auxiliary basis set in the; input.; Should needed elements be missing from the best; auxiliary basis or should the orbital basis be unknown to PSI4,; the auxiliary basis will fall back on def",MatchSource.WIKI,psi4manual/master/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/basissets.html
https://psicode.org/psi4manual/master/basissets.html:4605,Energy Efficiency,energy,energy,4605,"is set to just the carbon atoms labelled C1. This bizarre example was; constructed to demonstrate the syntax, but the flexibility of the basis set; specification is advantageous, for example, when selectively omitting diffuse; functions to make computations more tractable.; In the above example the basis sets have been assigned asymmetrically, reducing; the effective symmetry from \(D_{6h}\) to \(C_{2v}\); PSI4 will detect this; automatically and run in the appropriate point group.; Basis blocks can also be named, e.g., basis; optional_basis_name {...} and the basis defined by it later; applied to another molecule.; # sets basis keyword; basis mybas {; assign aug-cc-pvtz; assign f cc-pvtz; }. # re-sets basis keyword; set basis aug-cc-pvtz. molecule hf {; H; F 1 1.0; }. molecule h2o {; O; H 1 1.0; H 1 1.0 2 90.0; }. # runs HF and H2O with aug-cc-pvtz; energy('hf', molecule=hf); energy('hf', molecule=h2o). # re-re-sets basis keyword; set basis mybas. # runs HF with cc-pvtz on F and aug-cc-pvtz on H; energy('hf', molecule=hf). # runs H2O with aug-cc-pvtz, effectively; energy('hf', molecule=h2o). Finally, we note that the basis {...} block may also be used; for defining basis sets, as detailed in User-Defined Basis Sets.; Calculations requesting density fitting (on by default for many methods); require auxiliary fitting basis set(s) in addition to the primary; orbital one associated with the BASIS keyword.; When most popular basis sets are being used, including Dunning and; Pople-style, the SCF, DF-MP2, and SAPT codes will chose the appropriate; auxiliary basis set automatically according to Auxiliary Basis Sets,; unless instructed otherwise by setting the auxiliary basis set in the; input.; Should needed elements be missing from the best; auxiliary basis or should the orbital basis be unknown to PSI4,; the auxiliary basis will fall back on def2 quad-zeta fitting bases; :source:`psi4/driver/qcdb/libmintsbasisset.py#L762.; Note that if BASIS is known to be larger than qua",MatchSource.WIKI,psi4manual/master/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/basissets.html
https://psicode.org/psi4manual/master/basissets.html:4674,Energy Efficiency,energy,energy,4674,"structed to demonstrate the syntax, but the flexibility of the basis set; specification is advantageous, for example, when selectively omitting diffuse; functions to make computations more tractable.; In the above example the basis sets have been assigned asymmetrically, reducing; the effective symmetry from \(D_{6h}\) to \(C_{2v}\); PSI4 will detect this; automatically and run in the appropriate point group.; Basis blocks can also be named, e.g., basis; optional_basis_name {...} and the basis defined by it later; applied to another molecule.; # sets basis keyword; basis mybas {; assign aug-cc-pvtz; assign f cc-pvtz; }. # re-sets basis keyword; set basis aug-cc-pvtz. molecule hf {; H; F 1 1.0; }. molecule h2o {; O; H 1 1.0; H 1 1.0 2 90.0; }. # runs HF and H2O with aug-cc-pvtz; energy('hf', molecule=hf); energy('hf', molecule=h2o). # re-re-sets basis keyword; set basis mybas. # runs HF with cc-pvtz on F and aug-cc-pvtz on H; energy('hf', molecule=hf). # runs H2O with aug-cc-pvtz, effectively; energy('hf', molecule=h2o). Finally, we note that the basis {...} block may also be used; for defining basis sets, as detailed in User-Defined Basis Sets.; Calculations requesting density fitting (on by default for many methods); require auxiliary fitting basis set(s) in addition to the primary; orbital one associated with the BASIS keyword.; When most popular basis sets are being used, including Dunning and; Pople-style, the SCF, DF-MP2, and SAPT codes will chose the appropriate; auxiliary basis set automatically according to Auxiliary Basis Sets,; unless instructed otherwise by setting the auxiliary basis set in the; input.; Should needed elements be missing from the best; auxiliary basis or should the orbital basis be unknown to PSI4,; the auxiliary basis will fall back on def2 quad-zeta fitting bases; :source:`psi4/driver/qcdb/libmintsbasisset.py#L762.; Note that if BASIS is known to be larger than quad-zeta,; PSI4 will not attempt to fall back on the def2 fitting bases.; T",MatchSource.WIKI,psi4manual/master/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/basissets.html
https://psicode.org/psi4manual/master/basissets.html:6458,Integrability,depend,dependence,6458,"is will fall back on def2 quad-zeta fitting bases; :source:`psi4/driver/qcdb/libmintsbasisset.py#L762.; Note that if BASIS is known to be larger than quad-zeta,; PSI4 will not attempt to fall back on the def2 fitting bases.; The same basis “block” syntax can be; used to specify basis sets other than that used to define orbitals. For; example,; set df_basis_mp2 cc-pvdz-ri. or. df_basis_mp2 {; assign cc-pVDZ-RI; }. are both equivalent ways to set the auxiliary basis set for density fitted MP2; computations. To assign the aug-cc-pVDZ-RI to carbon atoms, the following; command is used:; df_basis_mp2 {; assign C aug-cc-pVDZ-RI; }. Decontracted Basis Sets¶; Decontraction of the basis set can be useful in certain situations. In; order to decontract a given basis set, simply add “-decon” to the name; of the primary basis set (e.g. decontract).; set basis cc-pvdz-decon. Obviously this will add significantly to the computational cost of any given calculation, however it can; be useful when checking the basis set dependence of a particular calculated property or in certain situations; where a large basis set is critical. Currently it is recommended that a decontracted basis is always used when performing relativistic calculations using the X2C Hamiltonian. User-Defined Basis Sets¶. Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR, including those described below. There are three routes by which a basis set in G94 format can be introduced to PSI4‘s notice.; (1) Install new basis set file into PSI4 basis library.; Copy the basis set definitions for all elements into a blank file. Exclamation points denote comments.; As the first line of the file, add the word spherical or cartesian to indicate; whether the basis set will run in (5D/7F) or (6D/10F).; cartesian; ****; H 0; S 3 1.00; 3.42525091 0.15432897; 0.62391373 0.53532814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454",MatchSource.WIKI,psi4manual/master/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/basissets.html
https://psicode.org/psi4manual/master/basissets.html:6875,Integrability,rout,routes,6875,"sis set for density fitted MP2; computations. To assign the aug-cc-pVDZ-RI to carbon atoms, the following; command is used:; df_basis_mp2 {; assign C aug-cc-pVDZ-RI; }. Decontracted Basis Sets¶; Decontraction of the basis set can be useful in certain situations. In; order to decontract a given basis set, simply add “-decon” to the name; of the primary basis set (e.g. decontract).; set basis cc-pvdz-decon. Obviously this will add significantly to the computational cost of any given calculation, however it can; be useful when checking the basis set dependence of a particular calculated property or in certain situations; where a large basis set is critical. Currently it is recommended that a decontracted basis is always used when performing relativistic calculations using the X2C Hamiltonian. User-Defined Basis Sets¶. Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR, including those described below. There are three routes by which a basis set in G94 format can be introduced to PSI4‘s notice.; (1) Install new basis set file into PSI4 basis library.; Copy the basis set definitions for all elements into a blank file. Exclamation points denote comments.; As the first line of the file, add the word spherical or cartesian to indicate; whether the basis set will run in (5D/7F) or (6D/10F).; cartesian; ****; H 0; S 3 1.00; 3.42525091 0.15432897; 0.62391373 0.53532814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****. Name the file with the name of the basis set and a .gbs extension,; after applying the following transformations. All letters lowercase; Replace all * with s; Replace all + with p; Replace all ( ) , with _ (underscores replace parentheses and commas). For example, basis 6-31++G** is stored in psi4/psi4/share/psi4/basis/6-31ppgss.gbs,; and cc-pV",MatchSource.WIKI,psi4manual/master/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/basissets.html
https://psicode.org/psi4manual/master/basissets.html:8335,Modifiability,variab,variable,8335,"62391373 0.53532814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****. Name the file with the name of the basis set and a .gbs extension,; after applying the following transformations. All letters lowercase; Replace all * with s; Replace all + with p; Replace all ( ) , with _ (underscores replace parentheses and commas). For example, basis 6-31++G** is stored in psi4/psi4/share/psi4/basis/6-31ppgss.gbs,; and cc-pV(D+d)Z is stored in psi4/psi4/share/psi4/basis/cc-pv_dpd_z.gbs.; Only one basis set may be specified per file.; Copy the new basis set file into psi4/psi4/share/psi4/basis.; Request the new basis set in an input file in the usual manner.; set basis new_basis_name. (2) Use new basis set file in arbitrary location.; Prepare a basis set file exactly as above. Append the directory; containing the basis set file to the environment variable; PSIPATH. If the directory is the current working directory,; PSI4 will find it automatically, and the directory does not need; to be added to PSIPATH.; Request the new basis set in an input file in the usual manner.; set basis new_basis_name. (3) Include new basis set in input file.; Construct for a basis set a section like the one below that includes; [basis name], PUREAM value, and element basis set; specifications. Hash signs denote comments. This format is exactly like; the stand-alone basis file except for the addition of the basis name in; brackets.; [ sto-3g ]; cartesian; ****; H 0; S 3 1.00; 3.42525091 0.15432897; 0.62391373 0.53532814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****. Copy the section into a PSI4 input file and surround it with the; command basis ",MatchSource.WIKI,psi4manual/master/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/basissets.html
https://psicode.org/psi4manual/master/basissets.html:3025,Performance,perform,performs,3025,"sis sets can be found in their; definition files at psi4/psi4/share/psi4/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element.; PSI4 uses the angular momentum convention below that; skips the letter J. Note that Gaussian94 convention is; not to skip this letter.; PSI4 can use either convention for .gbs import (assuming; angular momentum levels are not skipped), but it will always output; in the HIK sequence. Another portion of the G94 format, labeling; angular momentum with L=l syntax is newly (August 2020); implemented, and this is preferred for L=7 and above to; avoid ambiguity.; L: 0123456789...; Psi4: SPDFGHIKLM...; G94: SPDFGHIJKL... Mixing Basis Sets¶; While the above syntax will suffice for specifying basis sets in most cases,; the user may need to assign basis sets to specific atoms. To achieve this, a; basis “block” can be used. We use a snippet from the mints2 sample; input file, which performs a benzene SCF computation, to demonstrate this; feature.; basis {; assign DZ; assign C 3-21G; assign H1 sto-3g; assign C1 sto-3g; }. The first line in this block assigns the DZ basis set to all atoms for the primary/orbital basis. The next; line then assigns 3-21G to all carbon atoms, leaving the hydrogens with the DZ; basis set. On the third line, the hydrogen atoms which have been specifically; labelled as H1 are given the STO-3G basis set, leaving the unlabelled hydrogen; atoms with the DZ basis set. Likewise, the fourth line assigns the STO-3G; basis set to just the carbon atoms labelled C1. This bizarre example was; constructed to demonstrate the syntax, but the flexibility of the basis set; specification is advantageous, for example, when selectively omitting diffuse; functions to make computations more tractable.; In the above example the basis sets have been assigned asymmetrically, reducing; the effective symmetry from \(D_{6h}\) to \(C_{2v}\); PSI4 will detect this; aut",MatchSource.WIKI,psi4manual/master/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/basissets.html
https://psicode.org/psi4manual/master/basissets.html:6642,Performance,perform,performing,6642," on the def2 fitting bases.; The same basis “block” syntax can be; used to specify basis sets other than that used to define orbitals. For; example,; set df_basis_mp2 cc-pvdz-ri. or. df_basis_mp2 {; assign cc-pVDZ-RI; }. are both equivalent ways to set the auxiliary basis set for density fitted MP2; computations. To assign the aug-cc-pVDZ-RI to carbon atoms, the following; command is used:; df_basis_mp2 {; assign C aug-cc-pVDZ-RI; }. Decontracted Basis Sets¶; Decontraction of the basis set can be useful in certain situations. In; order to decontract a given basis set, simply add “-decon” to the name; of the primary basis set (e.g. decontract).; set basis cc-pvdz-decon. Obviously this will add significantly to the computational cost of any given calculation, however it can; be useful when checking the basis set dependence of a particular calculated property or in certain situations; where a large basis set is critical. Currently it is recommended that a decontracted basis is always used when performing relativistic calculations using the X2C Hamiltonian. User-Defined Basis Sets¶. Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR, including those described below. There are three routes by which a basis set in G94 format can be introduced to PSI4‘s notice.; (1) Install new basis set file into PSI4 basis library.; Copy the basis set definitions for all elements into a blank file. Exclamation points denote comments.; As the first line of the file, add the word spherical or cartesian to indicate; whether the basis set will run in (5D/7F) or (6D/10F).; cartesian; ****; H 0; S 3 1.00; 3.42525091 0.15432897; 0.62391373 0.53532814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****. Name the file with the name of the basis set and a .gbs extension,; after app",MatchSource.WIKI,psi4manual/master/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/basissets.html
https://psicode.org/psi4manual/master/basissets.html:9872,Performance,perform,performs,9872,"e stand-alone basis file except for the addition of the basis name in; brackets.; [ sto-3g ]; cartesian; ****; H 0; S 3 1.00; 3.42525091 0.15432897; 0.62391373 0.53532814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****. Copy the section into a PSI4 input file and surround it with the; command basis {...}, as shown below. Multiple basis sets can be; specified by adding additional sections within the surrounding brackets.; Use assign statements to actually request the basis set. This; basis {...} section replaces the usual set basis XXX line.; In a more complex input, if the user needs to call the user-defined; basis by name, this can be achieved using the syntax basis mybas {...},; and then the basis can be recalled later as set basis mybas.; To use a custom basis set as described in this section, it must be; defined prior to its use in a function that performs a computation.; basis {. # assign basset to all atoms and addl to hydrogens; assign basset; assign H addl. # basis set section like in snippet above goes here; [basset]; ... # additional basis set sections follow; [addl]; ...; }. The test case mints2 provides a complete example of; user-specified basis sets. Inputting effective core potentials (ECPs)¶; For ECP containing basis sets, all of the above mechanisms may still be used to; input the basis set; simply place the ECP definitions (in G94 format) in the; same file or input section as the orbital basis definition. Because the ECP; appears in the same section as the orbital basis, it will be parsed; automatically and the number of core electrons the ECP represents will be; detected, so no further input is required to use a core potential. See; Effective core potentials (ECPs) for more information about using ECPs and the; Def2-TZVP basis set definition; for an example of their inp",MatchSource.WIKI,psi4manual/master/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/basissets.html
https://psicode.org/psi4manual/master/basissets.html:2687,Safety,avoid,avoid,2687,"Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting \((oo|\)-type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting \((ov|\)-type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/psi4/share/psi4/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element.; PSI4 uses the angular momentum convention below that; skips the letter J. Note that Gaussian94 convention is; not to skip this letter.; PSI4 can use either convention for .gbs import (assuming; angular momentum levels are not skipped), but it will always output; in the HIK sequence. Another portion of the G94 format, labeling; angular momentum with L=l syntax is newly (August 2020); implemented, and this is preferred for L=7 and above to; avoid ambiguity.; L: 0123456789...; Psi4: SPDFGHIKLM...; G94: SPDFGHIJKL... Mixing Basis Sets¶; While the above syntax will suffice for specifying basis sets in most cases,; the user may need to assign basis sets to specific atoms. To achieve this, a; basis “block” can be used. We use a snippet from the mints2 sample; input file, which performs a benzene SCF computation, to demonstrate this; feature.; basis {; assign DZ; assign C 3-21G; assign H1 sto-3g; assign C1 sto-3g; }. The first line in this block assigns the DZ basis set to all atoms for the primary/orbital basis. The next; line then assigns 3-21G to all carbon atoms, leaving the hydrogens with the DZ; basis set. On the third line, the hydrogen atoms which have been specifically; labelled as H1 are given the STO-3G basis set, leaving the unlabelled hydrogen; atoms with the DZ basis set. Likewise, the fourth line assigns the STO-3G; basis set to just the carb",MatchSource.WIKI,psi4manual/master/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/basissets.html
https://psicode.org/psi4manual/master/basissets.html:4012,Safety,detect,detect,4012,"e a snippet from the mints2 sample; input file, which performs a benzene SCF computation, to demonstrate this; feature.; basis {; assign DZ; assign C 3-21G; assign H1 sto-3g; assign C1 sto-3g; }. The first line in this block assigns the DZ basis set to all atoms for the primary/orbital basis. The next; line then assigns 3-21G to all carbon atoms, leaving the hydrogens with the DZ; basis set. On the third line, the hydrogen atoms which have been specifically; labelled as H1 are given the STO-3G basis set, leaving the unlabelled hydrogen; atoms with the DZ basis set. Likewise, the fourth line assigns the STO-3G; basis set to just the carbon atoms labelled C1. This bizarre example was; constructed to demonstrate the syntax, but the flexibility of the basis set; specification is advantageous, for example, when selectively omitting diffuse; functions to make computations more tractable.; In the above example the basis sets have been assigned asymmetrically, reducing; the effective symmetry from \(D_{6h}\) to \(C_{2v}\); PSI4 will detect this; automatically and run in the appropriate point group.; Basis blocks can also be named, e.g., basis; optional_basis_name {...} and the basis defined by it later; applied to another molecule.; # sets basis keyword; basis mybas {; assign aug-cc-pvtz; assign f cc-pvtz; }. # re-sets basis keyword; set basis aug-cc-pvtz. molecule hf {; H; F 1 1.0; }. molecule h2o {; O; H 1 1.0; H 1 1.0 2 90.0; }. # runs HF and H2O with aug-cc-pvtz; energy('hf', molecule=hf); energy('hf', molecule=h2o). # re-re-sets basis keyword; set basis mybas. # runs HF with cc-pvtz on F and aug-cc-pvtz on H; energy('hf', molecule=hf). # runs H2O with aug-cc-pvtz, effectively; energy('hf', molecule=h2o). Finally, we note that the basis {...} block may also be used; for defining basis sets, as detailed in User-Defined Basis Sets.; Calculations requesting density fitting (on by default for many methods); require auxiliary fitting basis set(s) in addition to the primary; o",MatchSource.WIKI,psi4manual/master/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/basissets.html
https://psicode.org/psi4manual/master/basissets.html:10616,Safety,detect,detected,10616," the; command basis {...}, as shown below. Multiple basis sets can be; specified by adding additional sections within the surrounding brackets.; Use assign statements to actually request the basis set. This; basis {...} section replaces the usual set basis XXX line.; In a more complex input, if the user needs to call the user-defined; basis by name, this can be achieved using the syntax basis mybas {...},; and then the basis can be recalled later as set basis mybas.; To use a custom basis set as described in this section, it must be; defined prior to its use in a function that performs a computation.; basis {. # assign basset to all atoms and addl to hydrogens; assign basset; assign H addl. # basis set section like in snippet above goes here; [basset]; ... # additional basis set sections follow; [addl]; ...; }. The test case mints2 provides a complete example of; user-specified basis sets. Inputting effective core potentials (ECPs)¶; For ECP containing basis sets, all of the above mechanisms may still be used to; input the basis set; simply place the ECP definitions (in G94 format) in the; same file or input section as the orbital basis definition. Because the ECP; appears in the same section as the orbital basis, it will be parsed; automatically and the number of core electrons the ECP represents will be; detected, so no further input is required to use a core potential. See; Effective core potentials (ECPs) for more information about using ECPs and the; Def2-TZVP basis set definition; for an example of their input syntax. table of contents. Basis Sets; Built-In Basis Sets; Mixing Basis Sets; Decontracted Basis Sets; User-Defined Basis Sets; Inputting effective core potentials (ECPs). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Psithon: Structuring an Input File; Basis Sets. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/basissets.html
https://psicode.org/psi4manual/master/basissets.html:10115,Testability,test,test,10115,"1627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****. Copy the section into a PSI4 input file and surround it with the; command basis {...}, as shown below. Multiple basis sets can be; specified by adding additional sections within the surrounding brackets.; Use assign statements to actually request the basis set. This; basis {...} section replaces the usual set basis XXX line.; In a more complex input, if the user needs to call the user-defined; basis by name, this can be achieved using the syntax basis mybas {...},; and then the basis can be recalled later as set basis mybas.; To use a custom basis set as described in this section, it must be; defined prior to its use in a function that performs a computation.; basis {. # assign basset to all atoms and addl to hydrogens; assign basset; assign H addl. # basis set section like in snippet above goes here; [basset]; ... # additional basis set sections follow; [addl]; ...; }. The test case mints2 provides a complete example of; user-specified basis sets. Inputting effective core potentials (ECPs)¶; For ECP containing basis sets, all of the above mechanisms may still be used to; input the basis set; simply place the ECP definitions (in G94 format) in the; same file or input section as the orbital basis definition. Because the ECP; appears in the same section as the orbital basis, it will be parsed; automatically and the number of core electrons the ECP represents will be; detected, so no further input is required to use a core potential. See; Effective core potentials (ECPs) for more information about using ECPs and the; Def2-TZVP basis set definition; for an example of their input syntax. table of contents. Basis Sets; Built-In Basis Sets; Mixing Basis Sets; Decontracted Basis Sets; User-Defined Basis Sets; Inputting effective core potentials (ECPs). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Psithon: Structuring an Input File; ",MatchSource.WIKI,psi4manual/master/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/basissets.html
https://psicode.org/psi4manual/master/basissets.html:6211,Usability,simpl,simply,6211,"sis Sets,; unless instructed otherwise by setting the auxiliary basis set in the; input.; Should needed elements be missing from the best; auxiliary basis or should the orbital basis be unknown to PSI4,; the auxiliary basis will fall back on def2 quad-zeta fitting bases; :source:`psi4/driver/qcdb/libmintsbasisset.py#L762.; Note that if BASIS is known to be larger than quad-zeta,; PSI4 will not attempt to fall back on the def2 fitting bases.; The same basis “block” syntax can be; used to specify basis sets other than that used to define orbitals. For; example,; set df_basis_mp2 cc-pvdz-ri. or. df_basis_mp2 {; assign cc-pVDZ-RI; }. are both equivalent ways to set the auxiliary basis set for density fitted MP2; computations. To assign the aug-cc-pVDZ-RI to carbon atoms, the following; command is used:; df_basis_mp2 {; assign C aug-cc-pVDZ-RI; }. Decontracted Basis Sets¶; Decontraction of the basis set can be useful in certain situations. In; order to decontract a given basis set, simply add “-decon” to the name; of the primary basis set (e.g. decontract).; set basis cc-pvdz-decon. Obviously this will add significantly to the computational cost of any given calculation, however it can; be useful when checking the basis set dependence of a particular calculated property or in certain situations; where a large basis set is critical. Currently it is recommended that a decontracted basis is always used when performing relativistic calculations using the X2C Hamiltonian. User-Defined Basis Sets¶. Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR, including those described below. There are three routes by which a basis set in G94 format can be introduced to PSI4‘s notice.; (1) Install new basis set file into PSI4 basis library.; Copy the basis set definitions for all elements into a blank file. Exclamation points denote comments.; As the first line of the file, add the word spherical or cartesian to indicate; whether the basis set wil",MatchSource.WIKI,psi4manual/master/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/basissets.html
https://psicode.org/psi4manual/master/basissets.html:10338,Usability,simpl,simply,10338," the; command basis {...}, as shown below. Multiple basis sets can be; specified by adding additional sections within the surrounding brackets.; Use assign statements to actually request the basis set. This; basis {...} section replaces the usual set basis XXX line.; In a more complex input, if the user needs to call the user-defined; basis by name, this can be achieved using the syntax basis mybas {...},; and then the basis can be recalled later as set basis mybas.; To use a custom basis set as described in this section, it must be; defined prior to its use in a function that performs a computation.; basis {. # assign basset to all atoms and addl to hydrogens; assign basset; assign H addl. # basis set section like in snippet above goes here; [basset]; ... # additional basis set sections follow; [addl]; ...; }. The test case mints2 provides a complete example of; user-specified basis sets. Inputting effective core potentials (ECPs)¶; For ECP containing basis sets, all of the above mechanisms may still be used to; input the basis set; simply place the ECP definitions (in G94 format) in the; same file or input section as the orbital basis definition. Because the ECP; appears in the same section as the orbital basis, it will be parsed; automatically and the number of core electrons the ECP represents will be; detected, so no further input is required to use a core potential. See; Effective core potentials (ECPs) for more information about using ECPs and the; Def2-TZVP basis set definition; for an example of their input syntax. table of contents. Basis Sets; Built-In Basis Sets; Mixing Basis Sets; Decontracted Basis Sets; User-Defined Basis Sets; Inputting effective core potentials (ECPs). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Psithon: Structuring an Input File; Basis Sets. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/basissets.html
https://psicode.org/psi4manual/master/basissets_byelement.html:172,Availability,avail,availability,172,﻿. Basis Sets by Element. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Basis Sets by Element. Basis Sets by Element¶. Basis set availability by element in PSI4¶. Basis Set; PUREAM; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe; Cs; Ba; La; Hf; Ta; W; Re; Os; Ir; Pt; Au; Hg; Tl; Pb; Bi; Po; At; Rn. Pople. sto-3g; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I. 3-21g; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe; Cs. 6-31gs; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr. 6-31g; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr. 6-31g_d_p_; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr. 6-31gss; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr. 6-31g_d_; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr. 6-31pg_d_; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca. 6-31pg; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca. 6-31pg_d_p_; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca. 6-31ppgs; 6D/10F; H. Li; Be; B;,MatchSource.WIKI,psi4manual/master/basissets_byelement.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/basissets_byelement.html
https://psicode.org/psi4manual/master/basissets_byelement.html:59559,Deployability,update,updated,59559,"; Hf; Ta; W; Re; Os; Ir; Pt; Au; Hg; Tl; Pb; Bi; Po; At; Rn. 5zapa-nr; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar. lanl2dz; 6D/10F; H. Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe; Cs; Ba; La; Hf; Ta; W; Re; Os; Ir; Pt; Au; Hg; Tl; Pb; Bi. dgauss-dzvp-autoabs; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe. 7zapa-nr; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne. Mg; Al; Si; P; S; Cl; Ar. cfour-qz2p; 5D/7F; H. B; C; N; O; F. Si; P; S; Cl. 6zapa-nr; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar. psi3-tz2pf; 6D/10F; H. B; C; N; O; F. Al; Si; P; S; Cl. roos-ano-tz; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar. Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn. 3zapa-nr; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar. psi3-tz2p; 6D/10F; H. B; C; N; O; F. Al; Si; P; S; Cl. 4zapa-nr; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar. pe_ecp; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar. sto-6g; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe. sadlej-lpol-dl; 5D/7F; H. C; N; O; F. dz; 6D/10F; H. Li. B; C; N; O; F; Ne. Al; Si; P; S; Cl. 2zapa-nr; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Basis Sets by Element. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/basissets_byelement.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/basissets_byelement.html
https://psicode.org/psi4manual/master/basissets_byfamily.html:21034,Deployability,update,updated,21034,"-qzvppd-ri; pcseg-0. aug-pcSseg-4; aug-pcsseg-4; aug-cc-pv5z-jkfit; aug-cc-pwcv5z-ri; pcseg-0. pcseg-0; pcseg-0; def2-universal-jkfit; def2-sv_p_-ri; —. pcseg-1; pcseg-1; def2-universal-jkfit; def2-svp-ri; pcseg-0. pcseg-2; pcseg-2; def2-universal-jkfit; def2-tzvpp-ri; pcseg-0. pcseg-3; pcseg-3; def2-universal-jkfit; def2-qzvpp-ri; pcseg-0. pcseg-4; pcseg-4; cc-pv5z-jkfit; cc-pv5z-ri; pcseg-0. pcSseg-0; pcsseg-0; def2-universal-jkfit; def2-sv_p_-ri; pcseg-0. pcSseg-1; pcsseg-1; def2-universal-jkfit; def2-svp-ri; pcseg-0. pcSseg-2; pcsseg-2; def2-universal-jkfit; def2-tzvpp-ri; pcseg-0. pcSseg-3; pcsseg-3; def2-universal-jkfit; def2-qzvpp-ri; pcseg-0. pcSseg-4; pcsseg-4; cc-pv5z-jkfit; cc-pwcv5z-ri; pcseg-0. minix; minix; def2-universal-jkfit; def2-svp-ri; —. vDZP; vdzp; def2-universal-jkfit; def2-svp-ri; —. DZ; dz; —; —; —. DZP; dzp; —; —; —. DZVP; dzvp; dgauss-dzvp-mix; dgauss-dzvp-autoaux; —. psi3-DZP; psi3-dzp; —; —; —. psi3-TZ2P; psi3-tz2p; —; —; —. psi3-TZ2PF; psi3-tz2pf; —; —; —. sadlej-lpol-dl; sadlej-lpol-dl; —; —; —. sadlej-lpol-ds; sadlej-lpol-ds; —; —; —. sadlej-lpol-fl; sadlej-lpol-fl; —; —; —. sadlej-lpol-fs; sadlej-lpol-fs; —; —; —. 2zapa-nr; 2zapa-nr; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; pcseg-0. 3zapa-nr; 3zapa-nr; aug-cc-pvqz-jkfit; aug-cc-pvqz-ri; pcseg-0. 4zapa-nr; 4zapa-nr; aug-cc-pv5z-jkfit; aug-cc-pv5z-ri; pcseg-0. 5zapa-nr; 5zapa-nr; aug-cc-pv5z-jkfit; aug-cc-pv6z-ri; pcseg-0. 6zapa-nr; 6zapa-nr; aug-cc-pv6z-ri; aug-cc-pv6z-ri; pcseg-0. 7zapa-nr; 7zapa-nr; aug-cc-pv6z-ri; aug-cc-pv6z-ri; pcseg-0. cc-pvqz-f12; cc-pvqz-f12; cc-pv5z-jkfit; cc-pv5z-ri; pcseg-0. cc-pvtz-f12; cc-pvtz-f12; cc-pvqz-jkfit; cc-pvqz-ri; pcseg-0. cc-pvqz-f12; cc-pvqz-f12; cc-pv5z-jkfit; cc-pv5z-ri; pcseg-0. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Auxiliary Basis Sets. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/basissets_byfamily.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/basissets_byfamily.html
https://psicode.org/psi4manual/master/basissets_tables.html:302,Availability,avail,available,302,"﻿. Basis Sets by Family. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Basis Sets by Family. Basis Sets by Family¶; Tables Pople,; Dunning,; Dunning (Douglas-Kroll),; Dunning (F12),; Karlsruhe,; Jensen,; Petersson,; and Other summarize the orbital basis sets available in; PSI4. These tables are arranged so that columns indicate degree of; augmentation by diffuse functions (generally necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the \(X\;=\zeta\) levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar’s [Papajak:2011:10] calendar; truncations described in Table Months Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting \((oo|\)-type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting \((ov|\)-type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/psi4/share/psi4/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element. Summary of Pople-style orbital basis sets available in PSI4 [1]¶. no diffuse; heavy-augmented; augmented. basis set; alias; basis set; alias; basis set; alias. STO-3G. 3-21G. 6-31G. 6-31+G. 6-31++G. 6-31G(d); 6-31G*; 6-31+G(d); 6-31+G*; 6-31++G(d); 6-31++G*. 6-31G(d,p); 6-31G**; 6-31+G(d,p); 6-31+G**; 6-31++G(d,p); 6-31++G**. 6-311G. 6-311+G. 6-311++G. 6-311G(d); 6-311G*; 6-311+G(d); 6-311+G*; 6-311++G(d); 6-311++G*. 6-311G(d,p); 6-311G**; 6-311+G(d,p); 6-311+G**; 6-311++G(d,p); 6-311++G**. 6-311G(2d). 6-311+G(2d). 6-311++G(2d). 6-311G(2d,p). 6-311+G(2d,p). 6-31",MatchSource.WIKI,psi4manual/master/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/basissets_tables.html
https://psicode.org/psi4manual/master/basissets_tables.html:543,Availability,avail,available,543,"﻿. Basis Sets by Family. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Basis Sets by Family. Basis Sets by Family¶; Tables Pople,; Dunning,; Dunning (Douglas-Kroll),; Dunning (F12),; Karlsruhe,; Jensen,; Petersson,; and Other summarize the orbital basis sets available in; PSI4. These tables are arranged so that columns indicate degree of; augmentation by diffuse functions (generally necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the \(X\;=\zeta\) levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar’s [Papajak:2011:10] calendar; truncations described in Table Months Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting \((oo|\)-type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting \((ov|\)-type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/psi4/share/psi4/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element. Summary of Pople-style orbital basis sets available in PSI4 [1]¶. no diffuse; heavy-augmented; augmented. basis set; alias; basis set; alias; basis set; alias. STO-3G. 3-21G. 6-31G. 6-31+G. 6-31++G. 6-31G(d); 6-31G*; 6-31+G(d); 6-31+G*; 6-31++G(d); 6-31++G*. 6-31G(d,p); 6-31G**; 6-31+G(d,p); 6-31+G**; 6-31++G(d,p); 6-31++G**. 6-311G. 6-311+G. 6-311++G. 6-311G(d); 6-311G*; 6-311+G(d); 6-311+G*; 6-311++G(d); 6-311++G*. 6-311G(d,p); 6-311G**; 6-311+G(d,p); 6-311+G**; 6-311++G(d,p); 6-311++G**. 6-311G(2d). 6-311+G(2d). 6-311++G(2d). 6-311G(2d,p). 6-311+G(2d,p). 6-31",MatchSource.WIKI,psi4manual/master/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/basissets_tables.html
https://psicode.org/psi4manual/master/basissets_tables.html:863,Availability,avail,available,863,"﻿. Basis Sets by Family. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Basis Sets by Family. Basis Sets by Family¶; Tables Pople,; Dunning,; Dunning (Douglas-Kroll),; Dunning (F12),; Karlsruhe,; Jensen,; Petersson,; and Other summarize the orbital basis sets available in; PSI4. These tables are arranged so that columns indicate degree of; augmentation by diffuse functions (generally necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the \(X\;=\zeta\) levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar’s [Papajak:2011:10] calendar; truncations described in Table Months Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting \((oo|\)-type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting \((ov|\)-type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/psi4/share/psi4/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element. Summary of Pople-style orbital basis sets available in PSI4 [1]¶. no diffuse; heavy-augmented; augmented. basis set; alias; basis set; alias; basis set; alias. STO-3G. 3-21G. 6-31G. 6-31+G. 6-31++G. 6-31G(d); 6-31G*; 6-31+G(d); 6-31+G*; 6-31++G(d); 6-31++G*. 6-31G(d,p); 6-31G**; 6-31+G(d,p); 6-31+G**; 6-31++G(d,p); 6-31++G**. 6-311G. 6-311+G. 6-311++G. 6-311G(d); 6-311G*; 6-311+G(d); 6-311+G*; 6-311++G(d); 6-311++G*. 6-311G(d,p); 6-311G**; 6-311+G(d,p); 6-311+G**; 6-311++G(d,p); 6-311++G**. 6-311G(2d). 6-311+G(2d). 6-311++G(2d). 6-311G(2d,p). 6-311+G(2d,p). 6-31",MatchSource.WIKI,psi4manual/master/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/basissets_tables.html
https://psicode.org/psi4manual/master/basissets_tables.html:1325,Availability,avail,availability,1325,"e degree of; augmentation by diffuse functions (generally necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the \(X\;=\zeta\) levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar’s [Papajak:2011:10] calendar; truncations described in Table Months Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting \((oo|\)-type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting \((ov|\)-type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/psi4/share/psi4/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element. Summary of Pople-style orbital basis sets available in PSI4 [1]¶. no diffuse; heavy-augmented; augmented. basis set; alias; basis set; alias; basis set; alias. STO-3G. 3-21G. 6-31G. 6-31+G. 6-31++G. 6-31G(d); 6-31G*; 6-31+G(d); 6-31+G*; 6-31++G(d); 6-31++G*. 6-31G(d,p); 6-31G**; 6-31+G(d,p); 6-31+G**; 6-31++G(d,p); 6-31++G**. 6-311G. 6-311+G. 6-311++G. 6-311G(d); 6-311G*; 6-311+G(d); 6-311+G*; 6-311++G(d); 6-311++G*. 6-311G(d,p); 6-311G**; 6-311+G(d,p); 6-311+G**; 6-311++G(d,p); 6-311++G**. 6-311G(2d). 6-311+G(2d). 6-311++G(2d). 6-311G(2d,p). 6-311+G(2d,p). 6-311++G(2d,p). 6-311G(2d,2p). 6-311+G(2d,2p). 6-311++G(2d,2p). 6-311G(2df). 6-311+G(2df). 6-311++G(2df). 6-311G(2df,p). 6-311+G(2df,p). 6-311++G(2df,p). 6-311G(2df,2p). 6-311+G(2df,2p). 6-311++G(2df,2p). 6-311G(2df,2pd). 6-311+G(2df,2pd). 6-311++G(2df,2pd). 6-311G(3df). 6-311+G(3df). 6-311++G(3df). 6-311G(3df,p). 6-311+G(3df,p). 6-311++G(3df,p). 6-311G(3df,2p). 6-311+G(3",MatchSource.WIKI,psi4manual/master/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/basissets_tables.html
https://psicode.org/psi4manual/master/basissets_tables.html:1475,Availability,avail,available,1475,"s, and noncovalent interactions) and DTQ56 indicate the \(X\;=\zeta\) levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar’s [Papajak:2011:10] calendar; truncations described in Table Months Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting \((oo|\)-type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting \((ov|\)-type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/psi4/share/psi4/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element. Summary of Pople-style orbital basis sets available in PSI4 [1]¶. no diffuse; heavy-augmented; augmented. basis set; alias; basis set; alias; basis set; alias. STO-3G. 3-21G. 6-31G. 6-31+G. 6-31++G. 6-31G(d); 6-31G*; 6-31+G(d); 6-31+G*; 6-31++G(d); 6-31++G*. 6-31G(d,p); 6-31G**; 6-31+G(d,p); 6-31+G**; 6-31++G(d,p); 6-31++G**. 6-311G. 6-311+G. 6-311++G. 6-311G(d); 6-311G*; 6-311+G(d); 6-311+G*; 6-311++G(d); 6-311++G*. 6-311G(d,p); 6-311G**; 6-311+G(d,p); 6-311+G**; 6-311++G(d,p); 6-311++G**. 6-311G(2d). 6-311+G(2d). 6-311++G(2d). 6-311G(2d,p). 6-311+G(2d,p). 6-311++G(2d,p). 6-311G(2d,2p). 6-311+G(2d,2p). 6-311++G(2d,2p). 6-311G(2df). 6-311+G(2df). 6-311++G(2df). 6-311G(2df,p). 6-311+G(2df,p). 6-311++G(2df,p). 6-311G(2df,2p). 6-311+G(2df,2p). 6-311++G(2df,2p). 6-311G(2df,2pd). 6-311+G(2df,2pd). 6-311++G(2df,2pd). 6-311G(3df). 6-311+G(3df). 6-311++G(3df). 6-311G(3df,p). 6-311+G(3df,p). 6-311++G(3df,p). 6-311G(3df,2p). 6-311+G(3df,2p). 6-311++G(3df,2p). 6-311G(3df,2pd). 6-311+G(3df,2pd). 6-311++G(3df,2pd). 6-311G(3df,3pd",MatchSource.WIKI,psi4manual/master/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/basissets_tables.html
https://psicode.org/psi4manual/master/basissets_tables.html:3189,Availability,avail,available,3189,"2p). 6-311++G(2df,2p). 6-311G(2df,2pd). 6-311+G(2df,2pd). 6-311++G(2df,2pd). 6-311G(3df). 6-311+G(3df). 6-311++G(3df). 6-311G(3df,p). 6-311+G(3df,p). 6-311++G(3df,p). 6-311G(3df,2p). 6-311+G(3df,2p). 6-311++G(3df,2p). 6-311G(3df,2pd). 6-311+G(3df,2pd). 6-311++G(3df,2pd). 6-311G(3df,3pd). 6-311+G(3df,3pd). 6-311++G(3df,3pd). Levels of truncation for diffuse functions in standard basis sets¶. augmentation level; angular momenta in the diffuse space [4]; valid basis sets. Li-Kr main group; H & He; D\(\zeta\); T\(\zeta\); Q\(\zeta\). aug-cc-pVXZ; s, p, \(\cdots\), \(\ell_{max}-2\), \(\ell_{max}-1\), \(\ell_{max}\); s, p, \(\cdots\), \(\ell_{max}-1\); aDZ; aTZ; aQZ. heavy-aug-cc-pVXZ [2]; s, p, \(\cdots\), \(\ell_{max}-2\), \(\ell_{max}-1\), \(\ell_{max}\). haDZ; haTZ; haQZ. jun-cc-pVXZ; s, p, \(\cdots\), \(\ell_{max}-2\), \(\ell_{max}-1\). jaDZ; jaTZ; jaQZ. may-cc-pVXZ; s, p, \(\cdots\), \(\ell_{max}-2\). maTZ; maQZ. \(\cdots\); s, p. aaQZ. cc-pVXZ. DZ; TZ; QZ. Summary of Dunning orbital basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pV(X+d)Z; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pCVXZ; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pCV(X+d)Z; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pwCVXZ; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning Douglas-Kroll orbital basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DK; DTQ5. DTQ5; DTQ5. cc-pV(X+d)Z-DK. cc-pCVXZ-DK; DTQ5. DTQ5; DTQ5. cc-pCV(X+d)Z-DK. cc-pwCVXZ-DK; –TQ5. –TQ5; –TQ5. cc-pwCV(X+d)Z-DK. Summary of Dunning F12 orbital basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-F12; DTQ. Summary of Dunning JK-fitting basis sets available in PSI4¶. basis set; no diffus",MatchSource.WIKI,psi4manual/master/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/basissets_tables.html
https://psicode.org/psi4manual/master/basissets_tables.html:3704,Availability,avail,available,3704,"\); T\(\zeta\); Q\(\zeta\). aug-cc-pVXZ; s, p, \(\cdots\), \(\ell_{max}-2\), \(\ell_{max}-1\), \(\ell_{max}\); s, p, \(\cdots\), \(\ell_{max}-1\); aDZ; aTZ; aQZ. heavy-aug-cc-pVXZ [2]; s, p, \(\cdots\), \(\ell_{max}-2\), \(\ell_{max}-1\), \(\ell_{max}\). haDZ; haTZ; haQZ. jun-cc-pVXZ; s, p, \(\cdots\), \(\ell_{max}-2\), \(\ell_{max}-1\). jaDZ; jaTZ; jaQZ. may-cc-pVXZ; s, p, \(\cdots\), \(\ell_{max}-2\). maTZ; maQZ. \(\cdots\); s, p. aaQZ. cc-pVXZ. DZ; TZ; QZ. Summary of Dunning orbital basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pV(X+d)Z; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pCVXZ; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pCV(X+d)Z; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pwCVXZ; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning Douglas-Kroll orbital basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DK; DTQ5. DTQ5; DTQ5. cc-pV(X+d)Z-DK. cc-pCVXZ-DK; DTQ5. DTQ5; DTQ5. cc-pCV(X+d)Z-DK. cc-pwCVXZ-DK; –TQ5. –TQ5; –TQ5. cc-pwCV(X+d)Z-DK. Summary of Dunning F12 orbital basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-F12; DTQ. Summary of Dunning JK-fitting basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-JKFIT [3]; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pV(X+d)Z-JKFIT; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pCVXZ-JKFIT [3]. cc-pCV(X+d)Z-JKFIT. cc-pwCVXZ-JKFIT [3]. cc-pwCV(X+d)Z-JKFIT. Summary of Dunning MP2-fitting basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56. cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56. cc-p",MatchSource.WIKI,psi4manual/master/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/basissets_tables.html
https://psicode.org/psi4manual/master/basissets_tables.html:3985,Availability,avail,available,3985,"s, p, \(\cdots\), \(\ell_{max}-2\), \(\ell_{max}-1\). jaDZ; jaTZ; jaQZ. may-cc-pVXZ; s, p, \(\cdots\), \(\ell_{max}-2\). maTZ; maQZ. \(\cdots\); s, p. aaQZ. cc-pVXZ. DZ; TZ; QZ. Summary of Dunning orbital basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pV(X+d)Z; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pCVXZ; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pCV(X+d)Z; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pwCVXZ; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning Douglas-Kroll orbital basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DK; DTQ5. DTQ5; DTQ5. cc-pV(X+d)Z-DK. cc-pCVXZ-DK; DTQ5. DTQ5; DTQ5. cc-pCV(X+d)Z-DK. cc-pwCVXZ-DK; –TQ5. –TQ5; –TQ5. cc-pwCV(X+d)Z-DK. Summary of Dunning F12 orbital basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-F12; DTQ. Summary of Dunning JK-fitting basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-JKFIT [3]; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pV(X+d)Z-JKFIT; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pCVXZ-JKFIT [3]. cc-pCV(X+d)Z-JKFIT. cc-pwCVXZ-JKFIT [3]. cc-pwCV(X+d)Z-JKFIT. Summary of Dunning MP2-fitting basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56. cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56. cc-pCVXZ-RI. cc-pCV(X+d)Z-RI. cc-pwCVXZ-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL;",MatchSource.WIKI,psi4manual/master/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/basissets_tables.html
https://psicode.org/psi4manual/master/basissets_tables.html:4139,Availability,avail,available,4139,Z. cc-pVXZ. DZ; TZ; QZ. Summary of Dunning orbital basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pV(X+d)Z; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pCVXZ; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pCV(X+d)Z; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pwCVXZ; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning Douglas-Kroll orbital basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DK; DTQ5. DTQ5; DTQ5. cc-pV(X+d)Z-DK. cc-pCVXZ-DK; DTQ5. DTQ5; DTQ5. cc-pCV(X+d)Z-DK. cc-pwCVXZ-DK; –TQ5. –TQ5; –TQ5. cc-pwCV(X+d)Z-DK. Summary of Dunning F12 orbital basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-F12; DTQ. Summary of Dunning JK-fitting basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-JKFIT [3]; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pV(X+d)Z-JKFIT; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pCVXZ-JKFIT [3]. cc-pCV(X+d)Z-JKFIT. cc-pwCVXZ-JKFIT [3]. cc-pwCV(X+d)Z-JKFIT. Summary of Dunning MP2-fitting basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56. cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56. cc-pCVXZ-RI. cc-pCV(X+d)Z-RI. cc-pwCVXZ-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ. TQ; DTQ. cc-pV(X+d)Z-DUAL. cc-pCVXZ-DUAL. cc-pCV(X+d)Z-DUAL. cc-pwCVXZ-DUAL. cc-pwCV(X+d)Z-DUAL. Summary of Karlsruhe orbital basis sets available in ,MatchSource.WIKI,psi4manual/master/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/basissets_tables.html
https://psicode.org/psi4manual/master/basissets_tables.html:4468,Availability,avail,available,4468,"Q56; DTQ56; DTQ56. cc-pCV(X+d)Z; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pwCVXZ; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning Douglas-Kroll orbital basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DK; DTQ5. DTQ5; DTQ5. cc-pV(X+d)Z-DK. cc-pCVXZ-DK; DTQ5. DTQ5; DTQ5. cc-pCV(X+d)Z-DK. cc-pwCVXZ-DK; –TQ5. –TQ5; –TQ5. cc-pwCV(X+d)Z-DK. Summary of Dunning F12 orbital basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-F12; DTQ. Summary of Dunning JK-fitting basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-JKFIT [3]; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pV(X+d)Z-JKFIT; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pCVXZ-JKFIT [3]. cc-pCV(X+d)Z-JKFIT. cc-pwCVXZ-JKFIT [3]. cc-pwCV(X+d)Z-JKFIT. Summary of Dunning MP2-fitting basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56. cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56. cc-pCVXZ-RI. cc-pCV(X+d)Z-RI. cc-pwCVXZ-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ. TQ; DTQ. cc-pV(X+d)Z-DUAL. cc-pCVXZ-DUAL. cc-pCV(X+d)Z-DUAL. cc-pwCVXZ-DUAL. cc-pwCV(X+d)Z-DUAL. Summary of Karlsruhe orbital basis sets available in PSI4¶. no diffuse; augmented. def2-SV(P). def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. def2-mSVP. def2-mTZVP. def2-mTZVPP. Summary of Jensen orbital basis sets available in PSI4¶. basis set; no diffuse; augmented; tight; augmented, tight. pcseg-N; 01234 [5",MatchSource.WIKI,psi4manual/master/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/basissets_tables.html
https://psicode.org/psi4manual/master/basissets_tables.html:4865,Availability,avail,available,4865,"VXZ-DK; DTQ5. DTQ5; DTQ5. cc-pCV(X+d)Z-DK. cc-pwCVXZ-DK; –TQ5. –TQ5; –TQ5. cc-pwCV(X+d)Z-DK. Summary of Dunning F12 orbital basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-F12; DTQ. Summary of Dunning JK-fitting basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-JKFIT [3]; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pV(X+d)Z-JKFIT; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pCVXZ-JKFIT [3]. cc-pCV(X+d)Z-JKFIT. cc-pwCVXZ-JKFIT [3]. cc-pwCV(X+d)Z-JKFIT. Summary of Dunning MP2-fitting basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56. cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56. cc-pCVXZ-RI. cc-pCV(X+d)Z-RI. cc-pwCVXZ-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ. TQ; DTQ. cc-pV(X+d)Z-DUAL. cc-pCVXZ-DUAL. cc-pCV(X+d)Z-DUAL. cc-pwCVXZ-DUAL. cc-pwCV(X+d)Z-DUAL. Summary of Karlsruhe orbital basis sets available in PSI4¶. no diffuse; augmented. def2-SV(P). def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. def2-mSVP. def2-mTZVP. def2-mTZVPP. Summary of Jensen orbital basis sets available in PSI4¶. basis set; no diffuse; augmented; tight; augmented, tight. pcseg-N; 01234 [5]. aug-pcseg-N. 01234. pcSseg-N. 01234. aug-pcSseg-N. 01234. Summary of Petersson orbital basis sets available in PSI4¶. basis set; augmented, tight. nZaPa-NR; 234567. Summary of other orbital basis sets available in PSI4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. [1]; Corresponding basis set filenames have star replaced by “s”, plus replac",MatchSource.WIKI,psi4manual/master/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/basissets_tables.html
https://psicode.org/psi4manual/master/basissets_tables.html:5115,Availability,avail,available,5115,"y of Dunning JK-fitting basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-JKFIT [3]; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pV(X+d)Z-JKFIT; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pCVXZ-JKFIT [3]. cc-pCV(X+d)Z-JKFIT. cc-pwCVXZ-JKFIT [3]. cc-pwCV(X+d)Z-JKFIT. Summary of Dunning MP2-fitting basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56. cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56. cc-pCVXZ-RI. cc-pCV(X+d)Z-RI. cc-pwCVXZ-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ. TQ; DTQ. cc-pV(X+d)Z-DUAL. cc-pCVXZ-DUAL. cc-pCV(X+d)Z-DUAL. cc-pwCVXZ-DUAL. cc-pwCV(X+d)Z-DUAL. Summary of Karlsruhe orbital basis sets available in PSI4¶. no diffuse; augmented. def2-SV(P). def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. def2-mSVP. def2-mTZVP. def2-mTZVPP. Summary of Jensen orbital basis sets available in PSI4¶. basis set; no diffuse; augmented; tight; augmented, tight. pcseg-N; 01234 [5]. aug-pcseg-N. 01234. pcSseg-N. 01234. aug-pcSseg-N. 01234. Summary of Petersson orbital basis sets available in PSI4¶. basis set; augmented, tight. nZaPa-NR; 234567. Summary of other orbital basis sets available in PSI4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. [1]; Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. [2]; (1,2,3,4,5,6,7); The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. [3]; (1,2,3); The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of",MatchSource.WIKI,psi4manual/master/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/basissets_tables.html
https://psicode.org/psi4manual/master/basissets_tables.html:5360,Availability,avail,available,5360,"XZ-JKFIT [3]. cc-pCV(X+d)Z-JKFIT. cc-pwCVXZ-JKFIT [3]. cc-pwCV(X+d)Z-JKFIT. Summary of Dunning MP2-fitting basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56. cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56. cc-pCVXZ-RI. cc-pCV(X+d)Z-RI. cc-pwCVXZ-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ. TQ; DTQ. cc-pV(X+d)Z-DUAL. cc-pCVXZ-DUAL. cc-pCV(X+d)Z-DUAL. cc-pwCVXZ-DUAL. cc-pwCV(X+d)Z-DUAL. Summary of Karlsruhe orbital basis sets available in PSI4¶. no diffuse; augmented. def2-SV(P). def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. def2-mSVP. def2-mTZVP. def2-mTZVPP. Summary of Jensen orbital basis sets available in PSI4¶. basis set; no diffuse; augmented; tight; augmented, tight. pcseg-N; 01234 [5]. aug-pcseg-N. 01234. pcSseg-N. 01234. aug-pcSseg-N. 01234. Summary of Petersson orbital basis sets available in PSI4¶. basis set; augmented, tight. nZaPa-NR; 234567. Summary of other orbital basis sets available in PSI4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. [1]; Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. [2]; (1,2,3,4,5,6,7); The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. [3]; (1,2,3); The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-functions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. [4]; D\(\zeta\) has \(\ell_{max}=2\) or d.; T\(\zeta\) has \(\ell_{max}=3\) or f.; Q\(\zeta\) has \(\ell_{max}=4\) or",MatchSource.WIKI,psi4manual/master/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/basissets_tables.html
https://psicode.org/psi4manual/master/basissets_tables.html:5557,Availability,avail,available,5557,"[2]; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56. cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56. cc-pCVXZ-RI. cc-pCV(X+d)Z-RI. cc-pwCVXZ-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ. TQ; DTQ. cc-pV(X+d)Z-DUAL. cc-pCVXZ-DUAL. cc-pCV(X+d)Z-DUAL. cc-pwCVXZ-DUAL. cc-pwCV(X+d)Z-DUAL. Summary of Karlsruhe orbital basis sets available in PSI4¶. no diffuse; augmented. def2-SV(P). def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. def2-mSVP. def2-mTZVP. def2-mTZVPP. Summary of Jensen orbital basis sets available in PSI4¶. basis set; no diffuse; augmented; tight; augmented, tight. pcseg-N; 01234 [5]. aug-pcseg-N. 01234. pcSseg-N. 01234. aug-pcSseg-N. 01234. Summary of Petersson orbital basis sets available in PSI4¶. basis set; augmented, tight. nZaPa-NR; 234567. Summary of other orbital basis sets available in PSI4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. [1]; Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. [2]; (1,2,3,4,5,6,7); The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. [3]; (1,2,3); The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-functions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. [4]; D\(\zeta\) has \(\ell_{max}=2\) or d.; T\(\zeta\) has \(\ell_{max}=3\) or f.; Q\(\zeta\) has \(\ell_{max}=4\) or g, etc. [5]; N in Jensen basis sets corresponds to \(N+1\zeta\) basis set. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendic",MatchSource.WIKI,psi4manual/master/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/basissets_tables.html
https://psicode.org/psi4manual/master/basissets_tables.html:5660,Availability,avail,available,5660,"Q56; TQ56; DTQ56; DTQ56; DTQ56. cc-pCVXZ-RI. cc-pCV(X+d)Z-RI. cc-pwCVXZ-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ. TQ; DTQ. cc-pV(X+d)Z-DUAL. cc-pCVXZ-DUAL. cc-pCV(X+d)Z-DUAL. cc-pwCVXZ-DUAL. cc-pwCV(X+d)Z-DUAL. Summary of Karlsruhe orbital basis sets available in PSI4¶. no diffuse; augmented. def2-SV(P). def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. def2-mSVP. def2-mTZVP. def2-mTZVPP. Summary of Jensen orbital basis sets available in PSI4¶. basis set; no diffuse; augmented; tight; augmented, tight. pcseg-N; 01234 [5]. aug-pcseg-N. 01234. pcSseg-N. 01234. aug-pcSseg-N. 01234. Summary of Petersson orbital basis sets available in PSI4¶. basis set; augmented, tight. nZaPa-NR; 234567. Summary of other orbital basis sets available in PSI4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. [1]; Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. [2]; (1,2,3,4,5,6,7); The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. [3]; (1,2,3); The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-functions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. [4]; D\(\zeta\) has \(\ell_{max}=2\) or d.; T\(\zeta\) has \(\ell_{max}=3\) or f.; Q\(\zeta\) has \(\ell_{max}=4\) or g, etc. [5]; N in Jensen basis sets corresponds to \(N+1\zeta\) basis set. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Basis Sets by Family. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November",MatchSource.WIKI,psi4manual/master/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/basissets_tables.html
https://psicode.org/psi4manual/master/basissets_tables.html:6619,Deployability,update,updated,6619,"-pCV(X+d)Z-RI. cc-pwCVXZ-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ. TQ; DTQ. cc-pV(X+d)Z-DUAL. cc-pCVXZ-DUAL. cc-pCV(X+d)Z-DUAL. cc-pwCVXZ-DUAL. cc-pwCV(X+d)Z-DUAL. Summary of Karlsruhe orbital basis sets available in PSI4¶. no diffuse; augmented. def2-SV(P). def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. def2-mSVP. def2-mTZVP. def2-mTZVPP. Summary of Jensen orbital basis sets available in PSI4¶. basis set; no diffuse; augmented; tight; augmented, tight. pcseg-N; 01234 [5]. aug-pcseg-N. 01234. pcSseg-N. 01234. aug-pcSseg-N. 01234. Summary of Petersson orbital basis sets available in PSI4¶. basis set; augmented, tight. nZaPa-NR; 234567. Summary of other orbital basis sets available in PSI4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. [1]; Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. [2]; (1,2,3,4,5,6,7); The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. [3]; (1,2,3); The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-functions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. [4]; D\(\zeta\) has \(\ell_{max}=2\) or d.; T\(\zeta\) has \(\ell_{max}=3\) or f.; Q\(\zeta\) has \(\ell_{max}=4\) or g, etc. [5]; N in Jensen basis sets corresponds to \(N+1\zeta\) basis set. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Basis Sets by Family. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/basissets_tables.html
https://psicode.org/psi4manual/master/basissets_tables.html:5943,Testability,stub,stub,5943,"-pCV(X+d)Z-RI. cc-pwCVXZ-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ. TQ; DTQ. cc-pV(X+d)Z-DUAL. cc-pCVXZ-DUAL. cc-pCV(X+d)Z-DUAL. cc-pwCVXZ-DUAL. cc-pwCV(X+d)Z-DUAL. Summary of Karlsruhe orbital basis sets available in PSI4¶. no diffuse; augmented. def2-SV(P). def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. def2-mSVP. def2-mTZVP. def2-mTZVPP. Summary of Jensen orbital basis sets available in PSI4¶. basis set; no diffuse; augmented; tight; augmented, tight. pcseg-N; 01234 [5]. aug-pcseg-N. 01234. pcSseg-N. 01234. aug-pcSseg-N. 01234. Summary of Petersson orbital basis sets available in PSI4¶. basis set; augmented, tight. nZaPa-NR; 234567. Summary of other orbital basis sets available in PSI4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. [1]; Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. [2]; (1,2,3,4,5,6,7); The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. [3]; (1,2,3); The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-functions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. [4]; D\(\zeta\) has \(\ell_{max}=2\) or d.; T\(\zeta\) has \(\ell_{max}=3\) or f.; Q\(\zeta\) has \(\ell_{max}=4\) or g, etc. [5]; N in Jensen basis sets corresponds to \(N+1\zeta\) basis set. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Basis Sets by Family. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/basissets_tables.html
https://psicode.org/psi4manual/master/basissets_tables.html:5959,Testability,stub,stub,5959,"-pCV(X+d)Z-RI. cc-pwCVXZ-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ. TQ; DTQ. cc-pV(X+d)Z-DUAL. cc-pCVXZ-DUAL. cc-pCV(X+d)Z-DUAL. cc-pwCVXZ-DUAL. cc-pwCV(X+d)Z-DUAL. Summary of Karlsruhe orbital basis sets available in PSI4¶. no diffuse; augmented. def2-SV(P). def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. def2-mSVP. def2-mTZVP. def2-mTZVPP. Summary of Jensen orbital basis sets available in PSI4¶. basis set; no diffuse; augmented; tight; augmented, tight. pcseg-N; 01234 [5]. aug-pcseg-N. 01234. pcSseg-N. 01234. aug-pcSseg-N. 01234. Summary of Petersson orbital basis sets available in PSI4¶. basis set; augmented, tight. nZaPa-NR; 234567. Summary of other orbital basis sets available in PSI4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. [1]; Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. [2]; (1,2,3,4,5,6,7); The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. [3]; (1,2,3); The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-functions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. [4]; D\(\zeta\) has \(\ell_{max}=2\) or d.; T\(\zeta\) has \(\ell_{max}=3\) or f.; Q\(\zeta\) has \(\ell_{max}=4\) or g, etc. [5]; N in Jensen basis sets corresponds to \(N+1\zeta\) basis set. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Basis Sets by Family. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/basissets_tables.html
https://psicode.org/psi4manual/master/basissets_tables.html:6048,Testability,stub,stub,6048,"-pCV(X+d)Z-RI. cc-pwCVXZ-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ. TQ; DTQ. cc-pV(X+d)Z-DUAL. cc-pCVXZ-DUAL. cc-pCV(X+d)Z-DUAL. cc-pwCVXZ-DUAL. cc-pwCV(X+d)Z-DUAL. Summary of Karlsruhe orbital basis sets available in PSI4¶. no diffuse; augmented. def2-SV(P). def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. def2-mSVP. def2-mTZVP. def2-mTZVPP. Summary of Jensen orbital basis sets available in PSI4¶. basis set; no diffuse; augmented; tight; augmented, tight. pcseg-N; 01234 [5]. aug-pcseg-N. 01234. pcSseg-N. 01234. aug-pcSseg-N. 01234. Summary of Petersson orbital basis sets available in PSI4¶. basis set; augmented, tight. nZaPa-NR; 234567. Summary of other orbital basis sets available in PSI4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. [1]; Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. [2]; (1,2,3,4,5,6,7); The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. [3]; (1,2,3); The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-functions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. [4]; D\(\zeta\) has \(\ell_{max}=2\) or d.; T\(\zeta\) has \(\ell_{max}=3\) or f.; Q\(\zeta\) has \(\ell_{max}=4\) or g, etc. [5]; N in Jensen basis sets corresponds to \(N+1\zeta\) basis set. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Basis Sets by Family. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/basissets_tables.html
https://psicode.org/psi4manual/master/basissets_tables.html:6185,Testability,stub,stubXZ-JKFIT,6185,"-pCV(X+d)Z-RI. cc-pwCVXZ-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug [2]; aug; d-aug. cc-pVXZ-DUAL; TQ. TQ; DTQ. cc-pV(X+d)Z-DUAL. cc-pCVXZ-DUAL. cc-pCV(X+d)Z-DUAL. cc-pwCVXZ-DUAL. cc-pwCV(X+d)Z-DUAL. Summary of Karlsruhe orbital basis sets available in PSI4¶. no diffuse; augmented. def2-SV(P). def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. def2-mSVP. def2-mTZVP. def2-mTZVPP. Summary of Jensen orbital basis sets available in PSI4¶. basis set; no diffuse; augmented; tight; augmented, tight. pcseg-N; 01234 [5]. aug-pcseg-N. 01234. pcSseg-N. 01234. aug-pcSseg-N. 01234. Summary of Petersson orbital basis sets available in PSI4¶. basis set; augmented, tight. nZaPa-NR; 234567. Summary of other orbital basis sets available in PSI4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. [1]; Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. [2]; (1,2,3,4,5,6,7); The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. [3]; (1,2,3); The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-functions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. [4]; D\(\zeta\) has \(\ell_{max}=2\) or d.; T\(\zeta\) has \(\ell_{max}=3\) or f.; Q\(\zeta\) has \(\ell_{max}=4\) or g, etc. [5]; N in Jensen basis sets corresponds to \(N+1\zeta\) basis set. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Basis Sets by Family. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/basissets_tables.html
https://psicode.org/psi4manual/master/bibliography.html:19633,Deployability,update,updates,19633,"016).; https://doi.org/10.1063/1.4948318. [Bozkaya:2017:dfccsdtgrad]; U. Bozkaya and C. D. Sherrill,; J. Chem. Phys. 147, 044104 (2017).; https://doi.org/10.1063/1.4994918. [Bozkaya:2018:dfomp3grad]; U. Bozkaya,; J. Comput. Chem. 39, 351-360 (2018).; https://doi.org/10.1002/jcc.25122. [Bozkaya:2020:dfoccd]; U. Bozkaya,; J. Chem. Phys. 153, 244115 (2020).; https://doi.org/10.1063/5.0035811. [Luu:2023:356]; D. Luu and K. Patkowski,; J. Phys. Chem. A 127, 356-377 (2023).; https://doi.org/10.1021/acs.jpca.2c06465. [Weigend:2002:4285]; F. Weigend,; Phys. Chem. Chem. Phys. 4, 4285-4291 (2002).; https://doi.org/10.1039/B204199P. [Brandenburg:2018:b973c]; J. G. Brandenburg, C.Bannwarth, A. Hansen, S. Grimme,; J. Chem. Phys. 148, 064104, (2018).; https://doi.org/10.1063/1.5012601. [Muller:2023:014103]; M. Müller and A. Hansen and S. Grimme; J. Chem. Phys. 158, 014103 (2023).; https://doi.org/10.1063/5.0133026. [Grimme:2021:064103]; S. Grimme and A. Hansen and S. Ehlert and J.-M. Mewes; J. Chem. Phys. 154, 064103 (2021).; https://doi.org/10.1063/5.0040021. [Williams-Young:2023:234104]; “Distributed memory, GPU accelerated Fock construction for hybrid, Gaussian basis density functional theory”; D. B. Williams-Young and A. Asadchev and D. T. Popovici and D. Clark and J. Waldrop and T.L. Windus and E. F. Valeev and W. A. de Jong; J. Chem. Phys. 158, 234104 (2023).; https://doi.org/10.1063/5.0151070. [Laqua:2020:1456]; “Highly Efficient, Linear-Scaling Seminumerical Exact-Exchange Method for Graphic Processing Units”; H. Laqua and T. H. Thompson and J. Kussmann and C. Ochsenfeld; J. Chem. Theory Comput. 16, 1456-1468 (2020); https://doi.org/10.1021/acs.jctc.9b00860. >>>>>>> Other build cleanups and documentation updates. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Bibliography. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/bibliography.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/bibliography.html
https://psicode.org/psi4manual/master/bibliography.html:19826,Deployability,update,updated,19826,"016).; https://doi.org/10.1063/1.4948318. [Bozkaya:2017:dfccsdtgrad]; U. Bozkaya and C. D. Sherrill,; J. Chem. Phys. 147, 044104 (2017).; https://doi.org/10.1063/1.4994918. [Bozkaya:2018:dfomp3grad]; U. Bozkaya,; J. Comput. Chem. 39, 351-360 (2018).; https://doi.org/10.1002/jcc.25122. [Bozkaya:2020:dfoccd]; U. Bozkaya,; J. Chem. Phys. 153, 244115 (2020).; https://doi.org/10.1063/5.0035811. [Luu:2023:356]; D. Luu and K. Patkowski,; J. Phys. Chem. A 127, 356-377 (2023).; https://doi.org/10.1021/acs.jpca.2c06465. [Weigend:2002:4285]; F. Weigend,; Phys. Chem. Chem. Phys. 4, 4285-4291 (2002).; https://doi.org/10.1039/B204199P. [Brandenburg:2018:b973c]; J. G. Brandenburg, C.Bannwarth, A. Hansen, S. Grimme,; J. Chem. Phys. 148, 064104, (2018).; https://doi.org/10.1063/1.5012601. [Muller:2023:014103]; M. Müller and A. Hansen and S. Grimme; J. Chem. Phys. 158, 014103 (2023).; https://doi.org/10.1063/5.0133026. [Grimme:2021:064103]; S. Grimme and A. Hansen and S. Ehlert and J.-M. Mewes; J. Chem. Phys. 154, 064103 (2021).; https://doi.org/10.1063/5.0040021. [Williams-Young:2023:234104]; “Distributed memory, GPU accelerated Fock construction for hybrid, Gaussian basis density functional theory”; D. B. Williams-Young and A. Asadchev and D. T. Popovici and D. Clark and J. Waldrop and T.L. Windus and E. F. Valeev and W. A. de Jong; J. Chem. Phys. 158, 234104 (2023).; https://doi.org/10.1063/5.0151070. [Laqua:2020:1456]; “Highly Efficient, Linear-Scaling Seminumerical Exact-Exchange Method for Graphic Processing Units”; H. Laqua and T. H. Thompson and J. Kussmann and C. Ochsenfeld; J. Chem. Theory Comput. 16, 1456-1468 (2020); https://doi.org/10.1021/acs.jctc.9b00860. >>>>>>> Other build cleanups and documentation updates. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Appendices; Bibliography. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/bibliography.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/bibliography.html
https://psicode.org/psi4manual/master/bibliography.html:14954,Energy Efficiency,charge,charge,14954," [Neese:2009:98]; F. Neese, F. Wennmohs, and A. Hansen; Chem. Phys. 356, 98-109 (2009). [Izsak:2011:144105]; R. Izsák and F. Neese; J. Chem. Phys. 135, 144105 (2011). [Smith:2018:3504]; 10.1021/acs.jctc.8b00286,; “PSI4NUMPY: An Interactive Quantum Chemistry Programming Environment for Reference Implementations and Rapid Development”,; D. G. A. Smith, L. A. Burns, D. A. Sirianni, D. R. Nascimento, A. Kumar, A. M. James, J. B. Schriber, T. Zhang, B. Zhang, A. S. Abbott, E. J. Berquist, M. H. Lechner, L. A. Cunha, A. G. Heide, J. M. Waldrop, T. Y. Takeshita, A. Alenaizan, D. Neuhauser, R. A. King, A. C. Simmonett, J. M. Turney, H. F. Schaefer III, F. A. Evangelista, A. E. DePrince, T. D. Crawford, K. Patkowski, and C. D. Sherrill; J. Chem. Theory Comput. 14, 3504-3511 (2018). [Schriber:2021:234107]; J. B. Schriber, D. A. Sirianni, D. G. A. Smith, L. A. Burns, D. Sitkoff, D. L. Cheney, C. D. Sherrill; J. Chem. Phys. 154, 234107 (2021). [Caldeweyher:2019:154122]; “A generally applicable atomic-charge dependent London dispersion correction”,; E. Caldeweyher, S. Ehlert, A. Hansen, H. Neugebauer, S. Spicher, C. Bannwarth, and S. Grimme,; J. Chem. Phys. 150, 154122 (2019).; https://doi.org/10.1063/1.5090222. [Haser:1989:104]; M. Haser and R. Ahlrichs,; J. Comp. Chem. 10(1), 104 (1989).; https://doi.org/10.1002/jcc.540100111. [Thompson:2017:144101]; T. H. Thompson and C. Ochsenfeld; J. Chem. Phys. 147, 144101 (2017).; https://doi.org/10.1063/1.4994190. [Smith:2020:184108]; “PSI4 1.4: Open-source software for high-throughput quantum chemistry”,; D. G. A. Smith, L. A. Burns, A. C. Simmonett, R. M. Parrish, M. C. Schieber, R. Galvelis, P. Kraus, H. Kruse, R. Di Remigio, A. Alenaizan, A. M. James, S. Lehtola, J. P. Misiewicz, M. Scheurer, R. A. Shaw, J. B. Schriber, Y. Xie, Z. L. Glick, D. A. Sirianni, J. S. O’Brien, J. M. Waldrop, A. Kumar, E. G. Hohenstein, B. P. Pritchard, B. R. Brooks, H. F. Schaefer III, A. Yu. Sokolov, K. Patkowski, A. E. DePrince III, U. Bozkaya, R. King, ",MatchSource.WIKI,psi4manual/master/bibliography.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/bibliography.html
https://psicode.org/psi4manual/master/bibliography.html:16161,Energy Efficiency,energy,energy,16161,"0.1063/1.5090222. [Haser:1989:104]; M. Haser and R. Ahlrichs,; J. Comp. Chem. 10(1), 104 (1989).; https://doi.org/10.1002/jcc.540100111. [Thompson:2017:144101]; T. H. Thompson and C. Ochsenfeld; J. Chem. Phys. 147, 144101 (2017).; https://doi.org/10.1063/1.4994190. [Smith:2020:184108]; “PSI4 1.4: Open-source software for high-throughput quantum chemistry”,; D. G. A. Smith, L. A. Burns, A. C. Simmonett, R. M. Parrish, M. C. Schieber, R. Galvelis, P. Kraus, H. Kruse, R. Di Remigio, A. Alenaizan, A. M. James, S. Lehtola, J. P. Misiewicz, M. Scheurer, R. A. Shaw, J. B. Schriber, Y. Xie, Z. L. Glick, D. A. Sirianni, J. S. O’Brien, J. M. Waldrop, A. Kumar, E. G. Hohenstein, B. P. Pritchard, B. R. Brooks, H. F. Schaefer III, A. Yu. Sokolov, K. Patkowski, A. E. DePrince III, U. Bozkaya, R. King, F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D. Sherrill; J. Chem. Phys. 152, 184108 (2020).; https://doi.org/10.1063/5.0006002. [Waldrop:2021:024103]; “Nonapproximated third-order exchange induction energy in symmetry-adapted perturbation theory”,; J. M. Waldrop and K. Patkowski; J. Chem. Phys. 154, 024103 (2021).; https://doi.org/10.1063/1.4994190. [Ochsenfeld:1998:1663]; C. Ochsenfeld, C. A. White, M. Head-Gordon; J. Chem. Phys. 109, 1663 (1998); https://doi.org/10.1063/1.476741. [Behnle:2019:REMP]; “REMP: A hybrid perturbation theory providing improved electronic wavefunctions and properties”,; S. Behnle and R. F. Fink,; J. Chem. Phys. 150, 1241077 (2019).; https://doi.org/10.1063/1.5086168. [Behnle:2021:OREMP]; “OO-REMP: Approaching Chemical Accuracy with Second-Order Perturbation Theory”,; S. Behnle and R. F. Fink,; J. Chem. Theory Comput. 17, 3259 (2021).; https://doi.org/10.1021/acs.jctc.1c00280. [Behnle:2022:OREMP]; “UREMP, RO-REMP, and OO-REMP: Hybrid perturbation theories for open-shell electronic structure calculations”,; S. Behnle and R. F. Fink; J. Chem. Phys. 156, 124103 (2022).; https://doi.org/10.1063/5.0081285. [Fink:2006:RE]; “Two new unitary-invariant ",MatchSource.WIKI,psi4manual/master/bibliography.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/bibliography.html
https://psicode.org/psi4manual/master/bibliography.html:16180,Energy Efficiency,adapt,adapted,16180,"0.1063/1.5090222. [Haser:1989:104]; M. Haser and R. Ahlrichs,; J. Comp. Chem. 10(1), 104 (1989).; https://doi.org/10.1002/jcc.540100111. [Thompson:2017:144101]; T. H. Thompson and C. Ochsenfeld; J. Chem. Phys. 147, 144101 (2017).; https://doi.org/10.1063/1.4994190. [Smith:2020:184108]; “PSI4 1.4: Open-source software for high-throughput quantum chemistry”,; D. G. A. Smith, L. A. Burns, A. C. Simmonett, R. M. Parrish, M. C. Schieber, R. Galvelis, P. Kraus, H. Kruse, R. Di Remigio, A. Alenaizan, A. M. James, S. Lehtola, J. P. Misiewicz, M. Scheurer, R. A. Shaw, J. B. Schriber, Y. Xie, Z. L. Glick, D. A. Sirianni, J. S. O’Brien, J. M. Waldrop, A. Kumar, E. G. Hohenstein, B. P. Pritchard, B. R. Brooks, H. F. Schaefer III, A. Yu. Sokolov, K. Patkowski, A. E. DePrince III, U. Bozkaya, R. King, F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D. Sherrill; J. Chem. Phys. 152, 184108 (2020).; https://doi.org/10.1063/5.0006002. [Waldrop:2021:024103]; “Nonapproximated third-order exchange induction energy in symmetry-adapted perturbation theory”,; J. M. Waldrop and K. Patkowski; J. Chem. Phys. 154, 024103 (2021).; https://doi.org/10.1063/1.4994190. [Ochsenfeld:1998:1663]; C. Ochsenfeld, C. A. White, M. Head-Gordon; J. Chem. Phys. 109, 1663 (1998); https://doi.org/10.1063/1.476741. [Behnle:2019:REMP]; “REMP: A hybrid perturbation theory providing improved electronic wavefunctions and properties”,; S. Behnle and R. F. Fink,; J. Chem. Phys. 150, 1241077 (2019).; https://doi.org/10.1063/1.5086168. [Behnle:2021:OREMP]; “OO-REMP: Approaching Chemical Accuracy with Second-Order Perturbation Theory”,; S. Behnle and R. F. Fink,; J. Chem. Theory Comput. 17, 3259 (2021).; https://doi.org/10.1021/acs.jctc.1c00280. [Behnle:2022:OREMP]; “UREMP, RO-REMP, and OO-REMP: Hybrid perturbation theories for open-shell electronic structure calculations”,; S. Behnle and R. F. Fink; J. Chem. Phys. 156, 124103 (2022).; https://doi.org/10.1063/5.0081285. [Fink:2006:RE]; “Two new unitary-invariant ",MatchSource.WIKI,psi4manual/master/bibliography.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/bibliography.html
https://psicode.org/psi4manual/master/bibliography.html:17235,Energy Efficiency,energy,energy,17235,"ry-adapted perturbation theory”,; J. M. Waldrop and K. Patkowski; J. Chem. Phys. 154, 024103 (2021).; https://doi.org/10.1063/1.4994190. [Ochsenfeld:1998:1663]; C. Ochsenfeld, C. A. White, M. Head-Gordon; J. Chem. Phys. 109, 1663 (1998); https://doi.org/10.1063/1.476741. [Behnle:2019:REMP]; “REMP: A hybrid perturbation theory providing improved electronic wavefunctions and properties”,; S. Behnle and R. F. Fink,; J. Chem. Phys. 150, 1241077 (2019).; https://doi.org/10.1063/1.5086168. [Behnle:2021:OREMP]; “OO-REMP: Approaching Chemical Accuracy with Second-Order Perturbation Theory”,; S. Behnle and R. F. Fink,; J. Chem. Theory Comput. 17, 3259 (2021).; https://doi.org/10.1021/acs.jctc.1c00280. [Behnle:2022:OREMP]; “UREMP, RO-REMP, and OO-REMP: Hybrid perturbation theories for open-shell electronic structure calculations”,; S. Behnle and R. F. Fink; J. Chem. Phys. 156, 124103 (2022).; https://doi.org/10.1063/5.0081285. [Fink:2006:RE]; “Two new unitary-invariant and size-consistent perturbation theoretical approaches to the electron correlation energy”,; R. F. Fink; Chem. Phys. Lett., 428, 461 (2006); https://doi.org/10.1016/j.cplett.2006.07.081. [Bozkaya:2014:dfomp2grad]; U. Bozkaya,; J. Chem. Theory Comput. 10, 4389-4399 (2014).; https://doi.org/10.1021/ct500634s. [Bozkaya:2016:dfomp3]; U. Bozkaya,; J. Chem. Theory Comput. 12, 1179-1188 (2016).; https://doi.org/10.1021/acs.jctc.5b01128. [Bozkaya:2016:dfolccd]; U. Bozkaya,; Phys. Chem. Chem. Phys. 18, 11362-11373 (2016).; https://doi.org/10.1039/c6cp00164e. [Bozkaya:2016:dfccsdat]; U. Bozkaya,; J. Chem. Phys. 144, 144108 (2016).; https://doi.org/10.1063/1.4945706. [Bozkaya:2016:dfccsdgrad]; U. Bozkaya and C. D. Sherrill,; J. Chem. Phys. 144, 174103 (2016).; https://doi.org/10.1063/1.4948318. [Bozkaya:2017:dfccsdtgrad]; U. Bozkaya and C. D. Sherrill,; J. Chem. Phys. 147, 044104 (2017).; https://doi.org/10.1063/1.4994918. [Bozkaya:2018:dfomp3grad]; U. Bozkaya,; J. Comput. Chem. 39, 351-360 (2018).; https://doi.org/10.10",MatchSource.WIKI,psi4manual/master/bibliography.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/bibliography.html
https://psicode.org/psi4manual/master/bibliography.html:14961,Integrability,depend,dependent,14961," [Neese:2009:98]; F. Neese, F. Wennmohs, and A. Hansen; Chem. Phys. 356, 98-109 (2009). [Izsak:2011:144105]; R. Izsák and F. Neese; J. Chem. Phys. 135, 144105 (2011). [Smith:2018:3504]; 10.1021/acs.jctc.8b00286,; “PSI4NUMPY: An Interactive Quantum Chemistry Programming Environment for Reference Implementations and Rapid Development”,; D. G. A. Smith, L. A. Burns, D. A. Sirianni, D. R. Nascimento, A. Kumar, A. M. James, J. B. Schriber, T. Zhang, B. Zhang, A. S. Abbott, E. J. Berquist, M. H. Lechner, L. A. Cunha, A. G. Heide, J. M. Waldrop, T. Y. Takeshita, A. Alenaizan, D. Neuhauser, R. A. King, A. C. Simmonett, J. M. Turney, H. F. Schaefer III, F. A. Evangelista, A. E. DePrince, T. D. Crawford, K. Patkowski, and C. D. Sherrill; J. Chem. Theory Comput. 14, 3504-3511 (2018). [Schriber:2021:234107]; J. B. Schriber, D. A. Sirianni, D. G. A. Smith, L. A. Burns, D. Sitkoff, D. L. Cheney, C. D. Sherrill; J. Chem. Phys. 154, 234107 (2021). [Caldeweyher:2019:154122]; “A generally applicable atomic-charge dependent London dispersion correction”,; E. Caldeweyher, S. Ehlert, A. Hansen, H. Neugebauer, S. Spicher, C. Bannwarth, and S. Grimme,; J. Chem. Phys. 150, 154122 (2019).; https://doi.org/10.1063/1.5090222. [Haser:1989:104]; M. Haser and R. Ahlrichs,; J. Comp. Chem. 10(1), 104 (1989).; https://doi.org/10.1002/jcc.540100111. [Thompson:2017:144101]; T. H. Thompson and C. Ochsenfeld; J. Chem. Phys. 147, 144101 (2017).; https://doi.org/10.1063/1.4994190. [Smith:2020:184108]; “PSI4 1.4: Open-source software for high-throughput quantum chemistry”,; D. G. A. Smith, L. A. Burns, A. C. Simmonett, R. M. Parrish, M. C. Schieber, R. Galvelis, P. Kraus, H. Kruse, R. Di Remigio, A. Alenaizan, A. M. James, S. Lehtola, J. P. Misiewicz, M. Scheurer, R. A. Shaw, J. B. Schriber, Y. Xie, Z. L. Glick, D. A. Sirianni, J. S. O’Brien, J. M. Waldrop, A. Kumar, E. G. Hohenstein, B. P. Pritchard, B. R. Brooks, H. F. Schaefer III, A. Yu. Sokolov, K. Patkowski, A. E. DePrince III, U. Bozkaya, R. King, ",MatchSource.WIKI,psi4manual/master/bibliography.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/bibliography.html
https://psicode.org/psi4manual/master/bibliography.html:16180,Modifiability,adapt,adapted,16180,"0.1063/1.5090222. [Haser:1989:104]; M. Haser and R. Ahlrichs,; J. Comp. Chem. 10(1), 104 (1989).; https://doi.org/10.1002/jcc.540100111. [Thompson:2017:144101]; T. H. Thompson and C. Ochsenfeld; J. Chem. Phys. 147, 144101 (2017).; https://doi.org/10.1063/1.4994190. [Smith:2020:184108]; “PSI4 1.4: Open-source software for high-throughput quantum chemistry”,; D. G. A. Smith, L. A. Burns, A. C. Simmonett, R. M. Parrish, M. C. Schieber, R. Galvelis, P. Kraus, H. Kruse, R. Di Remigio, A. Alenaizan, A. M. James, S. Lehtola, J. P. Misiewicz, M. Scheurer, R. A. Shaw, J. B. Schriber, Y. Xie, Z. L. Glick, D. A. Sirianni, J. S. O’Brien, J. M. Waldrop, A. Kumar, E. G. Hohenstein, B. P. Pritchard, B. R. Brooks, H. F. Schaefer III, A. Yu. Sokolov, K. Patkowski, A. E. DePrince III, U. Bozkaya, R. King, F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D. Sherrill; J. Chem. Phys. 152, 184108 (2020).; https://doi.org/10.1063/5.0006002. [Waldrop:2021:024103]; “Nonapproximated third-order exchange induction energy in symmetry-adapted perturbation theory”,; J. M. Waldrop and K. Patkowski; J. Chem. Phys. 154, 024103 (2021).; https://doi.org/10.1063/1.4994190. [Ochsenfeld:1998:1663]; C. Ochsenfeld, C. A. White, M. Head-Gordon; J. Chem. Phys. 109, 1663 (1998); https://doi.org/10.1063/1.476741. [Behnle:2019:REMP]; “REMP: A hybrid perturbation theory providing improved electronic wavefunctions and properties”,; S. Behnle and R. F. Fink,; J. Chem. Phys. 150, 1241077 (2019).; https://doi.org/10.1063/1.5086168. [Behnle:2021:OREMP]; “OO-REMP: Approaching Chemical Accuracy with Second-Order Perturbation Theory”,; S. Behnle and R. F. Fink,; J. Chem. Theory Comput. 17, 3259 (2021).; https://doi.org/10.1021/acs.jctc.1c00280. [Behnle:2022:OREMP]; “UREMP, RO-REMP, and OO-REMP: Hybrid perturbation theories for open-shell electronic structure calculations”,; S. Behnle and R. F. Fink; J. Chem. Phys. 156, 124103 (2022).; https://doi.org/10.1063/5.0081285. [Fink:2006:RE]; “Two new unitary-invariant ",MatchSource.WIKI,psi4manual/master/bibliography.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/bibliography.html
https://psicode.org/psi4manual/master/bibliography.html:15479,Performance,throughput,throughput,15479," J. M. Waldrop, T. Y. Takeshita, A. Alenaizan, D. Neuhauser, R. A. King, A. C. Simmonett, J. M. Turney, H. F. Schaefer III, F. A. Evangelista, A. E. DePrince, T. D. Crawford, K. Patkowski, and C. D. Sherrill; J. Chem. Theory Comput. 14, 3504-3511 (2018). [Schriber:2021:234107]; J. B. Schriber, D. A. Sirianni, D. G. A. Smith, L. A. Burns, D. Sitkoff, D. L. Cheney, C. D. Sherrill; J. Chem. Phys. 154, 234107 (2021). [Caldeweyher:2019:154122]; “A generally applicable atomic-charge dependent London dispersion correction”,; E. Caldeweyher, S. Ehlert, A. Hansen, H. Neugebauer, S. Spicher, C. Bannwarth, and S. Grimme,; J. Chem. Phys. 150, 154122 (2019).; https://doi.org/10.1063/1.5090222. [Haser:1989:104]; M. Haser and R. Ahlrichs,; J. Comp. Chem. 10(1), 104 (1989).; https://doi.org/10.1002/jcc.540100111. [Thompson:2017:144101]; T. H. Thompson and C. Ochsenfeld; J. Chem. Phys. 147, 144101 (2017).; https://doi.org/10.1063/1.4994190. [Smith:2020:184108]; “PSI4 1.4: Open-source software for high-throughput quantum chemistry”,; D. G. A. Smith, L. A. Burns, A. C. Simmonett, R. M. Parrish, M. C. Schieber, R. Galvelis, P. Kraus, H. Kruse, R. Di Remigio, A. Alenaizan, A. M. James, S. Lehtola, J. P. Misiewicz, M. Scheurer, R. A. Shaw, J. B. Schriber, Y. Xie, Z. L. Glick, D. A. Sirianni, J. S. O’Brien, J. M. Waldrop, A. Kumar, E. G. Hohenstein, B. P. Pritchard, B. R. Brooks, H. F. Schaefer III, A. Yu. Sokolov, K. Patkowski, A. E. DePrince III, U. Bozkaya, R. King, F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D. Sherrill; J. Chem. Phys. 152, 184108 (2020).; https://doi.org/10.1063/5.0006002. [Waldrop:2021:024103]; “Nonapproximated third-order exchange induction energy in symmetry-adapted perturbation theory”,; J. M. Waldrop and K. Patkowski; J. Chem. Phys. 154, 024103 (2021).; https://doi.org/10.1063/1.4994190. [Ochsenfeld:1998:1663]; C. Ochsenfeld, C. A. White, M. Head-Gordon; J. Chem. Phys. 109, 1663 (1998); https://doi.org/10.1063/1.476741. [Behnle:2019:REMP]; “REMP: A hy",MatchSource.WIKI,psi4manual/master/bibliography.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/bibliography.html
https://psicode.org/psi4manual/master/brianqc.html:447,Availability,avail,available,447,"﻿. Interface to the BrianQC GPU module by the BrianQC team. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to the BrianQC GPU module by the BrianQC team. Interface to the BrianQC GPU module by the BrianQC team¶; Code author: Gergely Kis; Section author: Gergely Kis; PSI4 contains code to interface to the BrianQC GPU module developed; by the BrianQC team, which is available after a license agreement from; https://brianqc.com/. Installing BrianQC¶; Please contact BrianQC at https://brianqc.com/; to download the BrianQC GPU module and obtain a license.; Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the BrianQC manual; for a full list of prerequisites.; When installing BrianQC, choose the SDK installation by setting the; BRIANQC_SDK_INSTALL envoronment variable to 1. Building BrianQC’s user-built components¶; After the installation, build BrianQC’s example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build PSI4 with BrianQC. Create a build directory to keep the source tree clean. cd <brianqc_install_path>; mkdir build; cd build. Configure project and generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have b",MatchSource.WIKI,psi4manual/master/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/brianqc.html
https://psicode.org/psi4manual/master/brianqc.html:583,Availability,down,download,583,"﻿. Interface to the BrianQC GPU module by the BrianQC team. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to the BrianQC GPU module by the BrianQC team. Interface to the BrianQC GPU module by the BrianQC team¶; Code author: Gergely Kis; Section author: Gergely Kis; PSI4 contains code to interface to the BrianQC GPU module developed; by the BrianQC team, which is available after a license agreement from; https://brianqc.com/. Installing BrianQC¶; Please contact BrianQC at https://brianqc.com/; to download the BrianQC GPU module and obtain a license.; Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the BrianQC manual; for a full list of prerequisites.; When installing BrianQC, choose the SDK installation by setting the; BRIANQC_SDK_INSTALL envoronment variable to 1. Building BrianQC’s user-built components¶; After the installation, build BrianQC’s example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build PSI4 with BrianQC. Create a build directory to keep the source tree clean. cd <brianqc_install_path>; mkdir build; cd build. Configure project and generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have b",MatchSource.WIKI,psi4manual/master/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/brianqc.html
https://psicode.org/psi4manual/master/brianqc.html:733,Availability,avail,available,733,"﻿. Interface to the BrianQC GPU module by the BrianQC team. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to the BrianQC GPU module by the BrianQC team. Interface to the BrianQC GPU module by the BrianQC team¶; Code author: Gergely Kis; Section author: Gergely Kis; PSI4 contains code to interface to the BrianQC GPU module developed; by the BrianQC team, which is available after a license agreement from; https://brianqc.com/. Installing BrianQC¶; Please contact BrianQC at https://brianqc.com/; to download the BrianQC GPU module and obtain a license.; Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the BrianQC manual; for a full list of prerequisites.; When installing BrianQC, choose the SDK installation by setting the; BRIANQC_SDK_INSTALL envoronment variable to 1. Building BrianQC’s user-built components¶; After the installation, build BrianQC’s example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build PSI4 with BrianQC. Create a build directory to keep the source tree clean. cd <brianqc_install_path>; mkdir build; cd build. Configure project and generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have b",MatchSource.WIKI,psi4manual/master/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/brianqc.html
https://psicode.org/psi4manual/master/brianqc.html:800,Deployability,install,installed,800,"﻿. Interface to the BrianQC GPU module by the BrianQC team. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to the BrianQC GPU module by the BrianQC team. Interface to the BrianQC GPU module by the BrianQC team¶; Code author: Gergely Kis; Section author: Gergely Kis; PSI4 contains code to interface to the BrianQC GPU module developed; by the BrianQC team, which is available after a license agreement from; https://brianqc.com/. Installing BrianQC¶; Please contact BrianQC at https://brianqc.com/; to download the BrianQC GPU module and obtain a license.; Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the BrianQC manual; for a full list of prerequisites.; When installing BrianQC, choose the SDK installation by setting the; BRIANQC_SDK_INSTALL envoronment variable to 1. Building BrianQC’s user-built components¶; After the installation, build BrianQC’s example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build PSI4 with BrianQC. Create a build directory to keep the source tree clean. cd <brianqc_install_path>; mkdir build; cd build. Configure project and generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have b",MatchSource.WIKI,psi4manual/master/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/brianqc.html
https://psicode.org/psi4manual/master/brianqc.html:887,Deployability,install,installing,887,"﻿. Interface to the BrianQC GPU module by the BrianQC team. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to the BrianQC GPU module by the BrianQC team. Interface to the BrianQC GPU module by the BrianQC team¶; Code author: Gergely Kis; Section author: Gergely Kis; PSI4 contains code to interface to the BrianQC GPU module developed; by the BrianQC team, which is available after a license agreement from; https://brianqc.com/. Installing BrianQC¶; Please contact BrianQC at https://brianqc.com/; to download the BrianQC GPU module and obtain a license.; Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the BrianQC manual; for a full list of prerequisites.; When installing BrianQC, choose the SDK installation by setting the; BRIANQC_SDK_INSTALL envoronment variable to 1. Building BrianQC’s user-built components¶; After the installation, build BrianQC’s example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build PSI4 with BrianQC. Create a build directory to keep the source tree clean. cd <brianqc_install_path>; mkdir build; cd build. Configure project and generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have b",MatchSource.WIKI,psi4manual/master/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/brianqc.html
https://psicode.org/psi4manual/master/brianqc.html:922,Deployability,install,installation,922,"﻿. Interface to the BrianQC GPU module by the BrianQC team. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to the BrianQC GPU module by the BrianQC team. Interface to the BrianQC GPU module by the BrianQC team¶; Code author: Gergely Kis; Section author: Gergely Kis; PSI4 contains code to interface to the BrianQC GPU module developed; by the BrianQC team, which is available after a license agreement from; https://brianqc.com/. Installing BrianQC¶; Please contact BrianQC at https://brianqc.com/; to download the BrianQC GPU module and obtain a license.; Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the BrianQC manual; for a full list of prerequisites.; When installing BrianQC, choose the SDK installation by setting the; BRIANQC_SDK_INSTALL envoronment variable to 1. Building BrianQC’s user-built components¶; After the installation, build BrianQC’s example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build PSI4 with BrianQC. Create a build directory to keep the source tree clean. cd <brianqc_install_path>; mkdir build; cd build. Configure project and generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have b",MatchSource.WIKI,psi4manual/master/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/brianqc.html
https://psicode.org/psi4manual/master/brianqc.html:1051,Deployability,install,installation,1051," · ; 1.10a1.dev61;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to the BrianQC GPU module by the BrianQC team. Interface to the BrianQC GPU module by the BrianQC team¶; Code author: Gergely Kis; Section author: Gergely Kis; PSI4 contains code to interface to the BrianQC GPU module developed; by the BrianQC team, which is available after a license agreement from; https://brianqc.com/. Installing BrianQC¶; Please contact BrianQC at https://brianqc.com/; to download the BrianQC GPU module and obtain a license.; Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the BrianQC manual; for a full list of prerequisites.; When installing BrianQC, choose the SDK installation by setting the; BRIANQC_SDK_INSTALL envoronment variable to 1. Building BrianQC’s user-built components¶; After the installation, build BrianQC’s example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build PSI4 with BrianQC. Create a build directory to keep the source tree clean. cd <brianqc_install_path>; mkdir build; cd build. Configure project and generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built (usually <brianqc_install_path>/build), then build PSI4 normally. Using BrianQC from PSI4¶; To u",MatchSource.WIKI,psi4manual/master/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/brianqc.html
https://psicode.org/psi4manual/master/brianqc.html:1160,Deployability,configurat,configuration,1160," · ; 1.10a1.dev61;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to the BrianQC GPU module by the BrianQC team. Interface to the BrianQC GPU module by the BrianQC team¶; Code author: Gergely Kis; Section author: Gergely Kis; PSI4 contains code to interface to the BrianQC GPU module developed; by the BrianQC team, which is available after a license agreement from; https://brianqc.com/. Installing BrianQC¶; Please contact BrianQC at https://brianqc.com/; to download the BrianQC GPU module and obtain a license.; Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the BrianQC manual; for a full list of prerequisites.; When installing BrianQC, choose the SDK installation by setting the; BRIANQC_SDK_INSTALL envoronment variable to 1. Building BrianQC’s user-built components¶; After the installation, build BrianQC’s example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build PSI4 with BrianQC. Create a build directory to keep the source tree clean. cd <brianqc_install_path>; mkdir build; cd build. Configure project and generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built (usually <brianqc_install_path>/build), then build PSI4 normally. Using BrianQC from PSI4¶; To u",MatchSource.WIKI,psi4manual/master/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/brianqc.html
https://psicode.org/psi4manual/master/brianqc.html:1524,Deployability,install,installation,1524,"ntact BrianQC at https://brianqc.com/; to download the BrianQC GPU module and obtain a license.; Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the BrianQC manual; for a full list of prerequisites.; When installing BrianQC, choose the SDK installation by setting the; BRIANQC_SDK_INSTALL envoronment variable to 1. Building BrianQC’s user-built components¶; After the installation, build BrianQC’s example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build PSI4 with BrianQC. Create a build directory to keep the source tree clean. cd <brianqc_install_path>; mkdir build; cd build. Configure project and generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built (usually <brianqc_install_path>/build), then build PSI4 normally. Using BrianQC from PSI4¶; To use BrianQC, the BRIANQC_INSTALL_PATH environment variable; must be set to the full path of your BrianQC installation.; There are two ways to enable BrianQC for a specific calculation:. setting the BRIANQC_ENABLE input option to True;; setting the BRIANQC_ENABLE environment variable to 1. If both the input option and the environment variable are specified,; then the environment variable takes precedence. When to enable BrianQC¶; The",MatchSource.WIKI,psi4manual/master/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/brianqc.html
https://psicode.org/psi4manual/master/brianqc.html:2211,Deployability,install,installation,2211,"and CMake configuration files; required to build PSI4 with BrianQC. Create a build directory to keep the source tree clean. cd <brianqc_install_path>; mkdir build; cd build. Configure project and generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built (usually <brianqc_install_path>/build), then build PSI4 normally. Using BrianQC from PSI4¶; To use BrianQC, the BRIANQC_INSTALL_PATH environment variable; must be set to the full path of your BrianQC installation.; There are two ways to enable BrianQC for a specific calculation:. setting the BRIANQC_ENABLE input option to True;; setting the BRIANQC_ENABLE environment variable to 1. If both the input option and the environment variable are specified,; then the environment variable takes precedence. When to enable BrianQC¶; The operation of BrianQC is transparent from a user’s point of view; every; internal computation is either performed by PSI4 (if unsupported by BrianQC),; or taken over by BrianQC, yielding the same result to within the required; precision. In particular, BrianQC will respect all of PSI4’s usual precision; parameters, like INTS_TOLERANCE and E_CONVERGENCE.; BrianQC can speed up a number of internal computations, including Fock and; gradient computation. Thus, BrianQC will speed up any calculation involving; those terms, such as. HF and DFT single point energies; HF and DFT geometry optimizations; HF and ",MatchSource.WIKI,psi4manual/master/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/brianqc.html
https://psicode.org/psi4manual/master/brianqc.html:4406,Deployability,install,installation,4406," a calculation works with BrianQC, the following options need to; be set when enabling BrianQC:. BrianQC currently only handles the C1 molecular symmetry point group. Thus, if; the molecule has any symmetries (which PSI4 would detect by default), the; input geometry must contain the line symmetry c1 to force PSI4 to; disregard the symmetry. To achieve peak performance, the following settings are recommended when enabling; BrianQC:. By default, PSI4 uses density-fitted preiterations for SCF, which BrianQC; doesn’t handle yet. To ensure that no non-BrianQC-accelerated iterations are; performed, disable the preiterations by setting DF_SCF_GUESS to False.; By default, PSI4 uses a disk-based Fock building, but BrianQC currently only; accelerates direct Fock builds. To ensure that Fock building is accelerated by; BrianQC, set SCF_TYPE to direct. Keywords¶. BRIANQC_ENABLE¶. Whether to enable using the BrianQC GPU module. Type: boolean; Default: false. Environment Variables¶. BRIANQC_SDK_INSTALL¶; Toggle for type of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc-manual/BrianQC_Manual_v1_1_0.pdf for details. BRIANQC_INSTALL_PATH¶; Location of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc-manual/BrianQC_Manual_v1_1_0.pdf for details. BRIANQC_ENABLE¶; Runtime toggle of whether to use BrianQC. table of contents. Interface to the BrianQC GPU module by the BrianQC team; Installing BrianQC; Building BrianQC’s user-built components; Building PSI4 with BrianQC; Using BrianQC from PSI4; When to enable BrianQC; Necessary and recommended option values. Keywords; BRIANQC_ENABLE. Environment Variables. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to the BrianQC GPU module by the BrianQC team. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/brianqc.html
https://psicode.org/psi4manual/master/brianqc.html:4562,Deployability,install,installation,4562," a calculation works with BrianQC, the following options need to; be set when enabling BrianQC:. BrianQC currently only handles the C1 molecular symmetry point group. Thus, if; the molecule has any symmetries (which PSI4 would detect by default), the; input geometry must contain the line symmetry c1 to force PSI4 to; disregard the symmetry. To achieve peak performance, the following settings are recommended when enabling; BrianQC:. By default, PSI4 uses density-fitted preiterations for SCF, which BrianQC; doesn’t handle yet. To ensure that no non-BrianQC-accelerated iterations are; performed, disable the preiterations by setting DF_SCF_GUESS to False.; By default, PSI4 uses a disk-based Fock building, but BrianQC currently only; accelerates direct Fock builds. To ensure that Fock building is accelerated by; BrianQC, set SCF_TYPE to direct. Keywords¶. BRIANQC_ENABLE¶. Whether to enable using the BrianQC GPU module. Type: boolean; Default: false. Environment Variables¶. BRIANQC_SDK_INSTALL¶; Toggle for type of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc-manual/BrianQC_Manual_v1_1_0.pdf for details. BRIANQC_INSTALL_PATH¶; Location of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc-manual/BrianQC_Manual_v1_1_0.pdf for details. BRIANQC_ENABLE¶; Runtime toggle of whether to use BrianQC. table of contents. Interface to the BrianQC GPU module by the BrianQC team; Installing BrianQC; Building BrianQC’s user-built components; Building PSI4 with BrianQC; Using BrianQC from PSI4; When to enable BrianQC; Necessary and recommended option values. Keywords; BRIANQC_ENABLE. Environment Variables. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to the BrianQC GPU module by the BrianQC team. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/brianqc.html
https://psicode.org/psi4manual/master/brianqc.html:4700,Deployability,toggle,toggle,4700," a calculation works with BrianQC, the following options need to; be set when enabling BrianQC:. BrianQC currently only handles the C1 molecular symmetry point group. Thus, if; the molecule has any symmetries (which PSI4 would detect by default), the; input geometry must contain the line symmetry c1 to force PSI4 to; disregard the symmetry. To achieve peak performance, the following settings are recommended when enabling; BrianQC:. By default, PSI4 uses density-fitted preiterations for SCF, which BrianQC; doesn’t handle yet. To ensure that no non-BrianQC-accelerated iterations are; performed, disable the preiterations by setting DF_SCF_GUESS to False.; By default, PSI4 uses a disk-based Fock building, but BrianQC currently only; accelerates direct Fock builds. To ensure that Fock building is accelerated by; BrianQC, set SCF_TYPE to direct. Keywords¶. BRIANQC_ENABLE¶. Whether to enable using the BrianQC GPU module. Type: boolean; Default: false. Environment Variables¶. BRIANQC_SDK_INSTALL¶; Toggle for type of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc-manual/BrianQC_Manual_v1_1_0.pdf for details. BRIANQC_INSTALL_PATH¶; Location of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc-manual/BrianQC_Manual_v1_1_0.pdf for details. BRIANQC_ENABLE¶; Runtime toggle of whether to use BrianQC. table of contents. Interface to the BrianQC GPU module by the BrianQC team; Installing BrianQC; Building BrianQC’s user-built components; Building PSI4 with BrianQC; Using BrianQC from PSI4; When to enable BrianQC; Necessary and recommended option values. Keywords; BRIANQC_ENABLE. Environment Variables. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to the BrianQC GPU module by the BrianQC team. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/brianqc.html
https://psicode.org/psi4manual/master/brianqc.html:5295,Deployability,update,updated,5295," a calculation works with BrianQC, the following options need to; be set when enabling BrianQC:. BrianQC currently only handles the C1 molecular symmetry point group. Thus, if; the molecule has any symmetries (which PSI4 would detect by default), the; input geometry must contain the line symmetry c1 to force PSI4 to; disregard the symmetry. To achieve peak performance, the following settings are recommended when enabling; BrianQC:. By default, PSI4 uses density-fitted preiterations for SCF, which BrianQC; doesn’t handle yet. To ensure that no non-BrianQC-accelerated iterations are; performed, disable the preiterations by setting DF_SCF_GUESS to False.; By default, PSI4 uses a disk-based Fock building, but BrianQC currently only; accelerates direct Fock builds. To ensure that Fock building is accelerated by; BrianQC, set SCF_TYPE to direct. Keywords¶. BRIANQC_ENABLE¶. Whether to enable using the BrianQC GPU module. Type: boolean; Default: false. Environment Variables¶. BRIANQC_SDK_INSTALL¶; Toggle for type of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc-manual/BrianQC_Manual_v1_1_0.pdf for details. BRIANQC_INSTALL_PATH¶; Location of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc-manual/BrianQC_Manual_v1_1_0.pdf for details. BRIANQC_ENABLE¶; Runtime toggle of whether to use BrianQC. table of contents. Interface to the BrianQC GPU module by the BrianQC team; Installing BrianQC; Building BrianQC’s user-built components; Building PSI4 with BrianQC; Using BrianQC from PSI4; When to enable BrianQC; Necessary and recommended option values. Keywords; BRIANQC_ENABLE. Environment Variables. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to the BrianQC GPU module by the BrianQC team. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/brianqc.html
https://psicode.org/psi4manual/master/brianqc.html:370,Integrability,interface,interface,370,"﻿. Interface to the BrianQC GPU module by the BrianQC team. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to the BrianQC GPU module by the BrianQC team. Interface to the BrianQC GPU module by the BrianQC team¶; Code author: Gergely Kis; Section author: Gergely Kis; PSI4 contains code to interface to the BrianQC GPU module developed; by the BrianQC team, which is available after a license agreement from; https://brianqc.com/. Installing BrianQC¶; Please contact BrianQC at https://brianqc.com/; to download the BrianQC GPU module and obtain a license.; Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the BrianQC manual; for a full list of prerequisites.; When installing BrianQC, choose the SDK installation by setting the; BRIANQC_SDK_INSTALL envoronment variable to 1. Building BrianQC’s user-built components¶; After the installation, build BrianQC’s example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build PSI4 with BrianQC. Create a build directory to keep the source tree clean. cd <brianqc_install_path>; mkdir build; cd build. Configure project and generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have b",MatchSource.WIKI,psi4manual/master/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/brianqc.html
https://psicode.org/psi4manual/master/brianqc.html:1134,Integrability,wrap,wrapper,1134," · ; 1.10a1.dev61;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to the BrianQC GPU module by the BrianQC team. Interface to the BrianQC GPU module by the BrianQC team¶; Code author: Gergely Kis; Section author: Gergely Kis; PSI4 contains code to interface to the BrianQC GPU module developed; by the BrianQC team, which is available after a license agreement from; https://brianqc.com/. Installing BrianQC¶; Please contact BrianQC at https://brianqc.com/; to download the BrianQC GPU module and obtain a license.; Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the BrianQC manual; for a full list of prerequisites.; When installing BrianQC, choose the SDK installation by setting the; BRIANQC_SDK_INSTALL envoronment variable to 1. Building BrianQC’s user-built components¶; After the installation, build BrianQC’s example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build PSI4 with BrianQC. Create a build directory to keep the source tree clean. cd <brianqc_install_path>; mkdir build; cd build. Configure project and generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built (usually <brianqc_install_path>/build), then build PSI4 normally. Using BrianQC from PSI4¶; To u",MatchSource.WIKI,psi4manual/master/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/brianqc.html
https://psicode.org/psi4manual/master/brianqc.html:3273,Integrability,depend,depends,3273,"to enable BrianQC for a specific calculation:. setting the BRIANQC_ENABLE input option to True;; setting the BRIANQC_ENABLE environment variable to 1. If both the input option and the environment variable are specified,; then the environment variable takes precedence. When to enable BrianQC¶; The operation of BrianQC is transparent from a user’s point of view; every; internal computation is either performed by PSI4 (if unsupported by BrianQC),; or taken over by BrianQC, yielding the same result to within the required; precision. In particular, BrianQC will respect all of PSI4’s usual precision; parameters, like INTS_TOLERANCE and E_CONVERGENCE.; BrianQC can speed up a number of internal computations, including Fock and; gradient computation. Thus, BrianQC will speed up any calculation involving; those terms, such as. HF and DFT single point energies; HF and DFT geometry optimizations; HF and DFT frequency analysis. Note that not every term of every calculation can be handled by BrianQC, thus,; the actual speedup depends on the specifics of the calculation. Necessary and recommended option values¶; To ensure that a calculation works with BrianQC, the following options need to; be set when enabling BrianQC:. BrianQC currently only handles the C1 molecular symmetry point group. Thus, if; the molecule has any symmetries (which PSI4 would detect by default), the; input geometry must contain the line symmetry c1 to force PSI4 to; disregard the symmetry. To achieve peak performance, the following settings are recommended when enabling; BrianQC:. By default, PSI4 uses density-fitted preiterations for SCF, which BrianQC; doesn’t handle yet. To ensure that no non-BrianQC-accelerated iterations are; performed, disable the preiterations by setting DF_SCF_GUESS to False.; By default, PSI4 uses a disk-based Fock building, but BrianQC currently only; accelerates direct Fock builds. To ensure that Fock building is accelerated by; BrianQC, set SCF_TYPE to direct. Keywords¶. BRIANQC_",MatchSource.WIKI,psi4manual/master/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/brianqc.html
https://psicode.org/psi4manual/master/brianqc.html:983,Modifiability,variab,variable,983,"﻿. Interface to the BrianQC GPU module by the BrianQC team. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to the BrianQC GPU module by the BrianQC team. Interface to the BrianQC GPU module by the BrianQC team¶; Code author: Gergely Kis; Section author: Gergely Kis; PSI4 contains code to interface to the BrianQC GPU module developed; by the BrianQC team, which is available after a license agreement from; https://brianqc.com/. Installing BrianQC¶; Please contact BrianQC at https://brianqc.com/; to download the BrianQC GPU module and obtain a license.; Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the BrianQC manual; for a full list of prerequisites.; When installing BrianQC, choose the SDK installation by setting the; BRIANQC_SDK_INSTALL envoronment variable to 1. Building BrianQC’s user-built components¶; After the installation, build BrianQC’s example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build PSI4 with BrianQC. Create a build directory to keep the source tree clean. cd <brianqc_install_path>; mkdir build; cd build. Configure project and generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have b",MatchSource.WIKI,psi4manual/master/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/brianqc.html
https://psicode.org/psi4manual/master/brianqc.html:1160,Modifiability,config,configuration,1160," · ; 1.10a1.dev61;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to the BrianQC GPU module by the BrianQC team. Interface to the BrianQC GPU module by the BrianQC team¶; Code author: Gergely Kis; Section author: Gergely Kis; PSI4 contains code to interface to the BrianQC GPU module developed; by the BrianQC team, which is available after a license agreement from; https://brianqc.com/. Installing BrianQC¶; Please contact BrianQC at https://brianqc.com/; to download the BrianQC GPU module and obtain a license.; Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the BrianQC manual; for a full list of prerequisites.; When installing BrianQC, choose the SDK installation by setting the; BRIANQC_SDK_INSTALL envoronment variable to 1. Building BrianQC’s user-built components¶; After the installation, build BrianQC’s example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build PSI4 with BrianQC. Create a build directory to keep the source tree clean. cd <brianqc_install_path>; mkdir build; cd build. Configure project and generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built (usually <brianqc_install_path>/build), then build PSI4 normally. Using BrianQC from PSI4¶; To u",MatchSource.WIKI,psi4manual/master/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/brianqc.html
https://psicode.org/psi4manual/master/brianqc.html:1625,Modifiability,variab,variable,1625,"and obtain a license.; Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the BrianQC manual; for a full list of prerequisites.; When installing BrianQC, choose the SDK installation by setting the; BRIANQC_SDK_INSTALL envoronment variable to 1. Building BrianQC’s user-built components¶; After the installation, build BrianQC’s example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build PSI4 with BrianQC. Create a build directory to keep the source tree clean. cd <brianqc_install_path>; mkdir build; cd build. Configure project and generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built (usually <brianqc_install_path>/build), then build PSI4 normally. Using BrianQC from PSI4¶; To use BrianQC, the BRIANQC_INSTALL_PATH environment variable; must be set to the full path of your BrianQC installation.; There are two ways to enable BrianQC for a specific calculation:. setting the BRIANQC_ENABLE input option to True;; setting the BRIANQC_ENABLE environment variable to 1. If both the input option and the environment variable are specified,; then the environment variable takes precedence. When to enable BrianQC¶; The operation of BrianQC is transparent from a user’s point of view; every; ",MatchSource.WIKI,psi4manual/master/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/brianqc.html
https://psicode.org/psi4manual/master/brianqc.html:1901,Modifiability,variab,variable,1901,"e; BRIANQC_SDK_INSTALL envoronment variable to 1. Building BrianQC’s user-built components¶; After the installation, build BrianQC’s example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build PSI4 with BrianQC. Create a build directory to keep the source tree clean. cd <brianqc_install_path>; mkdir build; cd build. Configure project and generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built (usually <brianqc_install_path>/build), then build PSI4 normally. Using BrianQC from PSI4¶; To use BrianQC, the BRIANQC_INSTALL_PATH environment variable; must be set to the full path of your BrianQC installation.; There are two ways to enable BrianQC for a specific calculation:. setting the BRIANQC_ENABLE input option to True;; setting the BRIANQC_ENABLE environment variable to 1. If both the input option and the environment variable are specified,; then the environment variable takes precedence. When to enable BrianQC¶; The operation of BrianQC is transparent from a user’s point of view; every; internal computation is either performed by PSI4 (if unsupported by BrianQC),; or taken over by BrianQC, yielding the same result to within the required; precision. In particular, BrianQC will respect all of PSI4’s usual precision; parameters, like INTS_TOLERANCE and E_CONVERGENCE.; BrianQC can speed up a number of internal computat",MatchSource.WIKI,psi4manual/master/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/brianqc.html
https://psicode.org/psi4manual/master/brianqc.html:1946,Modifiability,variab,variable,1946,"e; BRIANQC_SDK_INSTALL envoronment variable to 1. Building BrianQC’s user-built components¶; After the installation, build BrianQC’s example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build PSI4 with BrianQC. Create a build directory to keep the source tree clean. cd <brianqc_install_path>; mkdir build; cd build. Configure project and generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built (usually <brianqc_install_path>/build), then build PSI4 normally. Using BrianQC from PSI4¶; To use BrianQC, the BRIANQC_INSTALL_PATH environment variable; must be set to the full path of your BrianQC installation.; There are two ways to enable BrianQC for a specific calculation:. setting the BRIANQC_ENABLE input option to True;; setting the BRIANQC_ENABLE environment variable to 1. If both the input option and the environment variable are specified,; then the environment variable takes precedence. When to enable BrianQC¶; The operation of BrianQC is transparent from a user’s point of view; every; internal computation is either performed by PSI4 (if unsupported by BrianQC),; or taken over by BrianQC, yielding the same result to within the required; precision. In particular, BrianQC will respect all of PSI4’s usual precision; parameters, like INTS_TOLERANCE and E_CONVERGENCE.; BrianQC can speed up a number of internal computat",MatchSource.WIKI,psi4manual/master/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/brianqc.html
https://psicode.org/psi4manual/master/brianqc.html:2156,Modifiability,variab,variable,2156,"and CMake configuration files; required to build PSI4 with BrianQC. Create a build directory to keep the source tree clean. cd <brianqc_install_path>; mkdir build; cd build. Configure project and generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built (usually <brianqc_install_path>/build), then build PSI4 normally. Using BrianQC from PSI4¶; To use BrianQC, the BRIANQC_INSTALL_PATH environment variable; must be set to the full path of your BrianQC installation.; There are two ways to enable BrianQC for a specific calculation:. setting the BRIANQC_ENABLE input option to True;; setting the BRIANQC_ENABLE environment variable to 1. If both the input option and the environment variable are specified,; then the environment variable takes precedence. When to enable BrianQC¶; The operation of BrianQC is transparent from a user’s point of view; every; internal computation is either performed by PSI4 (if unsupported by BrianQC),; or taken over by BrianQC, yielding the same result to within the required; precision. In particular, BrianQC will respect all of PSI4’s usual precision; parameters, like INTS_TOLERANCE and E_CONVERGENCE.; BrianQC can speed up a number of internal computations, including Fock and; gradient computation. Thus, BrianQC will speed up any calculation involving; those terms, such as. HF and DFT single point energies; HF and DFT geometry optimizations; HF and ",MatchSource.WIKI,psi4manual/master/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/brianqc.html
https://psicode.org/psi4manual/master/brianqc.html:2381,Modifiability,variab,variable,2381,"nd generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built (usually <brianqc_install_path>/build), then build PSI4 normally. Using BrianQC from PSI4¶; To use BrianQC, the BRIANQC_INSTALL_PATH environment variable; must be set to the full path of your BrianQC installation.; There are two ways to enable BrianQC for a specific calculation:. setting the BRIANQC_ENABLE input option to True;; setting the BRIANQC_ENABLE environment variable to 1. If both the input option and the environment variable are specified,; then the environment variable takes precedence. When to enable BrianQC¶; The operation of BrianQC is transparent from a user’s point of view; every; internal computation is either performed by PSI4 (if unsupported by BrianQC),; or taken over by BrianQC, yielding the same result to within the required; precision. In particular, BrianQC will respect all of PSI4’s usual precision; parameters, like INTS_TOLERANCE and E_CONVERGENCE.; BrianQC can speed up a number of internal computations, including Fock and; gradient computation. Thus, BrianQC will speed up any calculation involving; those terms, such as. HF and DFT single point energies; HF and DFT geometry optimizations; HF and DFT frequency analysis. Note that not every term of every calculation can be handled by BrianQC, thus,; the actual speedup depends on the specifics of the calculation. Necessary and recommended",MatchSource.WIKI,psi4manual/master/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/brianqc.html
https://psicode.org/psi4manual/master/brianqc.html:2441,Modifiability,variab,variable,2441,"ersion 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built (usually <brianqc_install_path>/build), then build PSI4 normally. Using BrianQC from PSI4¶; To use BrianQC, the BRIANQC_INSTALL_PATH environment variable; must be set to the full path of your BrianQC installation.; There are two ways to enable BrianQC for a specific calculation:. setting the BRIANQC_ENABLE input option to True;; setting the BRIANQC_ENABLE environment variable to 1. If both the input option and the environment variable are specified,; then the environment variable takes precedence. When to enable BrianQC¶; The operation of BrianQC is transparent from a user’s point of view; every; internal computation is either performed by PSI4 (if unsupported by BrianQC),; or taken over by BrianQC, yielding the same result to within the required; precision. In particular, BrianQC will respect all of PSI4’s usual precision; parameters, like INTS_TOLERANCE and E_CONVERGENCE.; BrianQC can speed up a number of internal computations, including Fock and; gradient computation. Thus, BrianQC will speed up any calculation involving; those terms, such as. HF and DFT single point energies; HF and DFT geometry optimizations; HF and DFT frequency analysis. Note that not every term of every calculation can be handled by BrianQC, thus,; the actual speedup depends on the specifics of the calculation. Necessary and recommended option values¶; To ensure that a calculation works with BrianQC, the following options need to; be set when en",MatchSource.WIKI,psi4manual/master/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/brianqc.html
https://psicode.org/psi4manual/master/brianqc.html:2487,Modifiability,variab,variable,2487,"ersion 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built (usually <brianqc_install_path>/build), then build PSI4 normally. Using BrianQC from PSI4¶; To use BrianQC, the BRIANQC_INSTALL_PATH environment variable; must be set to the full path of your BrianQC installation.; There are two ways to enable BrianQC for a specific calculation:. setting the BRIANQC_ENABLE input option to True;; setting the BRIANQC_ENABLE environment variable to 1. If both the input option and the environment variable are specified,; then the environment variable takes precedence. When to enable BrianQC¶; The operation of BrianQC is transparent from a user’s point of view; every; internal computation is either performed by PSI4 (if unsupported by BrianQC),; or taken over by BrianQC, yielding the same result to within the required; precision. In particular, BrianQC will respect all of PSI4’s usual precision; parameters, like INTS_TOLERANCE and E_CONVERGENCE.; BrianQC can speed up a number of internal computations, including Fock and; gradient computation. Thus, BrianQC will speed up any calculation involving; those terms, such as. HF and DFT single point energies; HF and DFT geometry optimizations; HF and DFT frequency analysis. Note that not every term of every calculation can be handled by BrianQC, thus,; the actual speedup depends on the specifics of the calculation. Necessary and recommended option values¶; To ensure that a calculation works with BrianQC, the following options need to; be set when en",MatchSource.WIKI,psi4manual/master/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/brianqc.html
https://psicode.org/psi4manual/master/brianqc.html:2646,Performance,perform,performed,2646,"install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built (usually <brianqc_install_path>/build), then build PSI4 normally. Using BrianQC from PSI4¶; To use BrianQC, the BRIANQC_INSTALL_PATH environment variable; must be set to the full path of your BrianQC installation.; There are two ways to enable BrianQC for a specific calculation:. setting the BRIANQC_ENABLE input option to True;; setting the BRIANQC_ENABLE environment variable to 1. If both the input option and the environment variable are specified,; then the environment variable takes precedence. When to enable BrianQC¶; The operation of BrianQC is transparent from a user’s point of view; every; internal computation is either performed by PSI4 (if unsupported by BrianQC),; or taken over by BrianQC, yielding the same result to within the required; precision. In particular, BrianQC will respect all of PSI4’s usual precision; parameters, like INTS_TOLERANCE and E_CONVERGENCE.; BrianQC can speed up a number of internal computations, including Fock and; gradient computation. Thus, BrianQC will speed up any calculation involving; those terms, such as. HF and DFT single point energies; HF and DFT geometry optimizations; HF and DFT frequency analysis. Note that not every term of every calculation can be handled by BrianQC, thus,; the actual speedup depends on the specifics of the calculation. Necessary and recommended option values¶; To ensure that a calculation works with BrianQC, the following options need to; be set when enabling BrianQC:. BrianQC currently only handles the C1 molecular symmetry point group. Thus, if; the molecule has any symmetries (which PSI4 would detect by default), the; input geometry must ",MatchSource.WIKI,psi4manual/master/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/brianqc.html
https://psicode.org/psi4manual/master/brianqc.html:3128,Performance,optimiz,optimizations,3128,"BRIANQC_INSTALL_PATH environment variable; must be set to the full path of your BrianQC installation.; There are two ways to enable BrianQC for a specific calculation:. setting the BRIANQC_ENABLE input option to True;; setting the BRIANQC_ENABLE environment variable to 1. If both the input option and the environment variable are specified,; then the environment variable takes precedence. When to enable BrianQC¶; The operation of BrianQC is transparent from a user’s point of view; every; internal computation is either performed by PSI4 (if unsupported by BrianQC),; or taken over by BrianQC, yielding the same result to within the required; precision. In particular, BrianQC will respect all of PSI4’s usual precision; parameters, like INTS_TOLERANCE and E_CONVERGENCE.; BrianQC can speed up a number of internal computations, including Fock and; gradient computation. Thus, BrianQC will speed up any calculation involving; those terms, such as. HF and DFT single point energies; HF and DFT geometry optimizations; HF and DFT frequency analysis. Note that not every term of every calculation can be handled by BrianQC, thus,; the actual speedup depends on the specifics of the calculation. Necessary and recommended option values¶; To ensure that a calculation works with BrianQC, the following options need to; be set when enabling BrianQC:. BrianQC currently only handles the C1 molecular symmetry point group. Thus, if; the molecule has any symmetries (which PSI4 would detect by default), the; input geometry must contain the line symmetry c1 to force PSI4 to; disregard the symmetry. To achieve peak performance, the following settings are recommended when enabling; BrianQC:. By default, PSI4 uses density-fitted preiterations for SCF, which BrianQC; doesn’t handle yet. To ensure that no non-BrianQC-accelerated iterations are; performed, disable the preiterations by setting DF_SCF_GUESS to False.; By default, PSI4 uses a disk-based Fock building, but BrianQC currently only; accelerate",MatchSource.WIKI,psi4manual/master/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/brianqc.html
https://psicode.org/psi4manual/master/brianqc.html:3733,Performance,perform,performance,3733,"uired; precision. In particular, BrianQC will respect all of PSI4’s usual precision; parameters, like INTS_TOLERANCE and E_CONVERGENCE.; BrianQC can speed up a number of internal computations, including Fock and; gradient computation. Thus, BrianQC will speed up any calculation involving; those terms, such as. HF and DFT single point energies; HF and DFT geometry optimizations; HF and DFT frequency analysis. Note that not every term of every calculation can be handled by BrianQC, thus,; the actual speedup depends on the specifics of the calculation. Necessary and recommended option values¶; To ensure that a calculation works with BrianQC, the following options need to; be set when enabling BrianQC:. BrianQC currently only handles the C1 molecular symmetry point group. Thus, if; the molecule has any symmetries (which PSI4 would detect by default), the; input geometry must contain the line symmetry c1 to force PSI4 to; disregard the symmetry. To achieve peak performance, the following settings are recommended when enabling; BrianQC:. By default, PSI4 uses density-fitted preiterations for SCF, which BrianQC; doesn’t handle yet. To ensure that no non-BrianQC-accelerated iterations are; performed, disable the preiterations by setting DF_SCF_GUESS to False.; By default, PSI4 uses a disk-based Fock building, but BrianQC currently only; accelerates direct Fock builds. To ensure that Fock building is accelerated by; BrianQC, set SCF_TYPE to direct. Keywords¶. BRIANQC_ENABLE¶. Whether to enable using the BrianQC GPU module. Type: boolean; Default: false. Environment Variables¶. BRIANQC_SDK_INSTALL¶; Toggle for type of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc-manual/BrianQC_Manual_v1_1_0.pdf for details. BRIANQC_INSTALL_PATH¶; Location of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc-manual/BrianQC_Manual_v1_1_0.pdf for details. BRIANQC_ENABLE¶; Runtime toggle of whether to use BrianQC. table of contents. Interface ",MatchSource.WIKI,psi4manual/master/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/brianqc.html
https://psicode.org/psi4manual/master/brianqc.html:3963,Performance,perform,performed,3963,"k and; gradient computation. Thus, BrianQC will speed up any calculation involving; those terms, such as. HF and DFT single point energies; HF and DFT geometry optimizations; HF and DFT frequency analysis. Note that not every term of every calculation can be handled by BrianQC, thus,; the actual speedup depends on the specifics of the calculation. Necessary and recommended option values¶; To ensure that a calculation works with BrianQC, the following options need to; be set when enabling BrianQC:. BrianQC currently only handles the C1 molecular symmetry point group. Thus, if; the molecule has any symmetries (which PSI4 would detect by default), the; input geometry must contain the line symmetry c1 to force PSI4 to; disregard the symmetry. To achieve peak performance, the following settings are recommended when enabling; BrianQC:. By default, PSI4 uses density-fitted preiterations for SCF, which BrianQC; doesn’t handle yet. To ensure that no non-BrianQC-accelerated iterations are; performed, disable the preiterations by setting DF_SCF_GUESS to False.; By default, PSI4 uses a disk-based Fock building, but BrianQC currently only; accelerates direct Fock builds. To ensure that Fock building is accelerated by; BrianQC, set SCF_TYPE to direct. Keywords¶. BRIANQC_ENABLE¶. Whether to enable using the BrianQC GPU module. Type: boolean; Default: false. Environment Variables¶. BRIANQC_SDK_INSTALL¶; Toggle for type of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc-manual/BrianQC_Manual_v1_1_0.pdf for details. BRIANQC_INSTALL_PATH¶; Location of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc-manual/BrianQC_Manual_v1_1_0.pdf for details. BRIANQC_ENABLE¶; Runtime toggle of whether to use BrianQC. table of contents. Interface to the BrianQC GPU module by the BrianQC team; Installing BrianQC; Building BrianQC’s user-built components; Building PSI4 with BrianQC; Using BrianQC from PSI4; When to enable BrianQC; Necessary and recomm",MatchSource.WIKI,psi4manual/master/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/brianqc.html
https://psicode.org/psi4manual/master/brianqc.html:3601,Safety,detect,detect,3601,"utation is either performed by PSI4 (if unsupported by BrianQC),; or taken over by BrianQC, yielding the same result to within the required; precision. In particular, BrianQC will respect all of PSI4’s usual precision; parameters, like INTS_TOLERANCE and E_CONVERGENCE.; BrianQC can speed up a number of internal computations, including Fock and; gradient computation. Thus, BrianQC will speed up any calculation involving; those terms, such as. HF and DFT single point energies; HF and DFT geometry optimizations; HF and DFT frequency analysis. Note that not every term of every calculation can be handled by BrianQC, thus,; the actual speedup depends on the specifics of the calculation. Necessary and recommended option values¶; To ensure that a calculation works with BrianQC, the following options need to; be set when enabling BrianQC:. BrianQC currently only handles the C1 molecular symmetry point group. Thus, if; the molecule has any symmetries (which PSI4 would detect by default), the; input geometry must contain the line symmetry c1 to force PSI4 to; disregard the symmetry. To achieve peak performance, the following settings are recommended when enabling; BrianQC:. By default, PSI4 uses density-fitted preiterations for SCF, which BrianQC; doesn’t handle yet. To ensure that no non-BrianQC-accelerated iterations are; performed, disable the preiterations by setting DF_SCF_GUESS to False.; By default, PSI4 uses a disk-based Fock building, but BrianQC currently only; accelerates direct Fock builds. To ensure that Fock building is accelerated by; BrianQC, set SCF_TYPE to direct. Keywords¶. BRIANQC_ENABLE¶. Whether to enable using the BrianQC GPU module. Type: boolean; Default: false. Environment Variables¶. BRIANQC_SDK_INSTALL¶; Toggle for type of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc-manual/BrianQC_Manual_v1_1_0.pdf for details. BRIANQC_INSTALL_PATH¶; Location of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc",MatchSource.WIKI,psi4manual/master/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/brianqc.html
https://psicode.org/psi4manual/master/brianqc.html:1402,Testability,test,tested,1402,"odule developed; by the BrianQC team, which is available after a license agreement from; https://brianqc.com/. Installing BrianQC¶; Please contact BrianQC at https://brianqc.com/; to download the BrianQC GPU module and obtain a license.; Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the BrianQC manual; for a full list of prerequisites.; When installing BrianQC, choose the SDK installation by setting the; BRIANQC_SDK_INSTALL envoronment variable to 1. Building BrianQC’s user-built components¶; After the installation, build BrianQC’s example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build PSI4 with BrianQC. Create a build directory to keep the source tree clean. cd <brianqc_install_path>; mkdir build; cd build. Configure project and generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built (usually <brianqc_install_path>/build), then build PSI4 normally. Using BrianQC from PSI4¶; To use BrianQC, the BRIANQC_INSTALL_PATH environment variable; must be set to the full path of your BrianQC installation.; There are two ways to enable BrianQC for a specific calculation:. setting the BRIANQC_ENABLE input option to True;; setting the BRIANQC_ENABLE environment variable to 1. If b",MatchSource.WIKI,psi4manual/master/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/brianqc.html
https://psicode.org/psi4manual/master/brianqc.html:1441,Testability,test,tested,1441,"is available after a license agreement from; https://brianqc.com/. Installing BrianQC¶; Please contact BrianQC at https://brianqc.com/; to download the BrianQC GPU module and obtain a license.; Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the BrianQC manual; for a full list of prerequisites.; When installing BrianQC, choose the SDK installation by setting the; BRIANQC_SDK_INSTALL envoronment variable to 1. Building BrianQC’s user-built components¶; After the installation, build BrianQC’s example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build PSI4 with BrianQC. Create a build directory to keep the source tree clean. cd <brianqc_install_path>; mkdir build; cd build. Configure project and generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built (usually <brianqc_install_path>/build), then build PSI4 normally. Using BrianQC from PSI4¶; To use BrianQC, the BRIANQC_INSTALL_PATH environment variable; must be set to the full path of your BrianQC installation.; There are two ways to enable BrianQC for a specific calculation:. setting the BRIANQC_ENABLE input option to True;; setting the BRIANQC_ENABLE environment variable to 1. If both the input option and the environment vari",MatchSource.WIKI,psi4manual/master/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/brianqc.html
https://psicode.org/psi4manual/master/build_faq.html:417,Availability,down,downloads,417,"﻿. Build & Run FAQ. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Installation and Runtime Configuration; Build & Run FAQ. Build & Run FAQ¶. Warning; As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult psicode downloads; page for the latest guides. Obtaining and Updating PSI4¶. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “",MatchSource.WIKI,psi4manual/master/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_faq.html
https://psicode.org/psi4manual/master/build_faq.html:831,Availability,down,download,831,"﻿. Build & Run FAQ. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Installation and Runtime Configuration; Build & Run FAQ. Build & Run FAQ¶. Warning; As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult psicode downloads; page for the latest guides. Obtaining and Updating PSI4¶. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “",MatchSource.WIKI,psi4manual/master/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_faq.html
https://psicode.org/psi4manual/master/build_faq.html:1455,Availability,avail,available,1455,"vel-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC ",MatchSource.WIKI,psi4manual/master/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_faq.html
https://psicode.org/psi4manual/master/build_faq.html:1728,Availability,error,errors,1728,"vel-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC ",MatchSource.WIKI,psi4manual/master/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_faq.html
https://psicode.org/psi4manual/master/build_faq.html:3075,Availability,error,errors,3075,"How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retain specific Psi4 scratch files; How to use logging in Psi4; How to find the Psi4 module from the executable and vice versa. Runtime Errors and Debugging¶. How to use gdb and lldb with Psi4; How to compile for debugging; How to fix “undefined symbol: _Py_FalseStruct”. Managing Code¶. What is the directory l",MatchSource.WIKI,psi4manual/master/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_faq.html
https://psicode.org/psi4manual/master/build_faq.html:290,Deployability,install,install,290,"﻿. Build & Run FAQ. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Installation and Runtime Configuration; Build & Run FAQ. Build & Run FAQ¶. Warning; As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult psicode downloads; page for the latest guides. Obtaining and Updating PSI4¶. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “",MatchSource.WIKI,psi4manual/master/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_faq.html
https://psicode.org/psi4manual/master/build_faq.html:356,Deployability,update,updated,356,"﻿. Build & Run FAQ. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Installation and Runtime Configuration; Build & Run FAQ. Build & Run FAQ¶. Warning; As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult psicode downloads; page for the latest guides. Obtaining and Updating PSI4¶. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “",MatchSource.WIKI,psi4manual/master/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_faq.html
https://psicode.org/psi4manual/master/build_faq.html:702,Deployability,update,update,702,"﻿. Build & Run FAQ. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Installation and Runtime Configuration; Build & Run FAQ. Build & Run FAQ¶. Warning; As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult psicode downloads; page for the latest guides. Obtaining and Updating PSI4¶. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “",MatchSource.WIKI,psi4manual/master/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_faq.html
https://psicode.org/psi4manual/master/build_faq.html:779,Deployability,install,install,779,"﻿. Build & Run FAQ. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Installation and Runtime Configuration; Build & Run FAQ. Build & Run FAQ¶. Warning; As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult psicode downloads; page for the latest guides. Obtaining and Updating PSI4¶. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “",MatchSource.WIKI,psi4manual/master/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_faq.html
https://psicode.org/psi4manual/master/build_faq.html:820,Deployability,install,installer,820,"﻿. Build & Run FAQ. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Installation and Runtime Configuration; Build & Run FAQ. Build & Run FAQ¶. Warning; As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult psicode downloads; page for the latest guides. Obtaining and Updating PSI4¶. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “",MatchSource.WIKI,psi4manual/master/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_faq.html
https://psicode.org/psi4manual/master/build_faq.html:853,Deployability,install,install,853,"﻿. Build & Run FAQ. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Installation and Runtime Configuration; Build & Run FAQ. Build & Run FAQ¶. Warning; As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult psicode downloads; page for the latest guides. Obtaining and Updating PSI4¶. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “",MatchSource.WIKI,psi4manual/master/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_faq.html
https://psicode.org/psi4manual/master/build_faq.html:894,Deployability,install,installer,894,"﻿. Build & Run FAQ. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Installation and Runtime Configuration; Build & Run FAQ. Build & Run FAQ¶. Warning; As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult psicode downloads; page for the latest guides. Obtaining and Updating PSI4¶. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “",MatchSource.WIKI,psi4manual/master/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_faq.html
https://psicode.org/psi4manual/master/build_faq.html:926,Deployability,install,install,926,"﻿. Build & Run FAQ. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Installation and Runtime Configuration; Build & Run FAQ. Build & Run FAQ¶. Warning; As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult psicode downloads; page for the latest guides. Obtaining and Updating PSI4¶. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “",MatchSource.WIKI,psi4manual/master/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_faq.html
https://psicode.org/psi4manual/master/build_faq.html:991,Deployability,update,update,991,"﻿. Build & Run FAQ. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Installation and Runtime Configuration; Build & Run FAQ. Build & Run FAQ¶. Warning; As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult psicode downloads; page for the latest guides. Obtaining and Updating PSI4¶. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “",MatchSource.WIKI,psi4manual/master/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_faq.html
https://psicode.org/psi4manual/master/build_faq.html:1116,Deployability,install,installer,1116,"﻿. Build & Run FAQ. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Installation and Runtime Configuration; Build & Run FAQ. Build & Run FAQ¶. Warning; As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult psicode downloads; page for the latest guides. Obtaining and Updating PSI4¶. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “",MatchSource.WIKI,psi4manual/master/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_faq.html
https://psicode.org/psi4manual/master/build_faq.html:1323,Deployability,install,install,1323,"vel-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC ",MatchSource.WIKI,psi4manual/master/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_faq.html
https://psicode.org/psi4manual/master/build_faq.html:1382,Deployability,install,install,1382,"vel-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC ",MatchSource.WIKI,psi4manual/master/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_faq.html
https://psicode.org/psi4manual/master/build_faq.html:1429,Deployability,configurat,configuration,1429,"vel-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC ",MatchSource.WIKI,psi4manual/master/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_faq.html
https://psicode.org/psi4manual/master/build_faq.html:1524,Deployability,install,install,1524,"vel-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC ",MatchSource.WIKI,psi4manual/master/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_faq.html
https://psicode.org/psi4manual/master/build_faq.html:1760,Deployability,configurat,configuration,1760,"vel-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC ",MatchSource.WIKI,psi4manual/master/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_faq.html
https://psicode.org/psi4manual/master/build_faq.html:3170,Deployability,install,installation,3170,"How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retain specific Psi4 scratch files; How to use logging in Psi4; How to find the Psi4 module from the executable and vice versa. Runtime Errors and Debugging¶. How to use gdb and lldb with Psi4; How to compile for debugging; How to fix “undefined symbol: _Py_FalseStruct”. Managing Code¶. What is the directory l",MatchSource.WIKI,psi4manual/master/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_faq.html
https://psicode.org/psi4manual/master/build_faq.html:3359,Deployability,install,installation,3359,"an compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retain specific Psi4 scratch files; How to use logging in Psi4; How to find the Psi4 module from the executable and vice versa. Runtime Errors and Debugging¶. How to use gdb and lldb with Psi4; How to compile for debugging; How to fix “undefined symbol: _Py_FalseStruct”. Managing Code¶. What is the directory layout of the installed or staged Psi4; What is the suggested GitHub workflow; How to highlight git merge conflicts in vi. Miscellaneous¶. How to refer to Psi4; How to get a Psi4 logo file. table of contents. Build & Run FAQ; Obtaining and Updating PSI4; Configuring and Installing PSI4",MatchSource.WIKI,psi4manual/master/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_faq.html
https://psicode.org/psi4manual/master/build_faq.html:4129,Deployability,install,installed,4129,"to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retain specific Psi4 scratch files; How to use logging in Psi4; How to find the Psi4 module from the executable and vice versa. Runtime Errors and Debugging¶. How to use gdb and lldb with Psi4; How to compile for debugging; How to fix “undefined symbol: _Py_FalseStruct”. Managing Code¶. What is the directory layout of the installed or staged Psi4; What is the suggested GitHub workflow; How to highlight git merge conflicts in vi. Miscellaneous¶. How to refer to Psi4; How to get a Psi4 logo file. table of contents. Build & Run FAQ; Obtaining and Updating PSI4; Configuring and Installing PSI4 via Binary; Configuring, Building, and Installing PSI4 via Source; Non-QC Dependencies; QC Dependencies and Extensions; Testing; Runtime Setup; Running PSI4; Runtime Errors and Debugging; Managing Code; Miscellaneous. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Installation and Runtime Configuration; Build & Run FAQ. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_faq.html
https://psicode.org/psi4manual/master/build_faq.html:4835,Deployability,update,updated,4835,"to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retain specific Psi4 scratch files; How to use logging in Psi4; How to find the Psi4 module from the executable and vice versa. Runtime Errors and Debugging¶. How to use gdb and lldb with Psi4; How to compile for debugging; How to fix “undefined symbol: _Py_FalseStruct”. Managing Code¶. What is the directory layout of the installed or staged Psi4; What is the suggested GitHub workflow; How to highlight git merge conflicts in vi. Miscellaneous¶. How to refer to Psi4; How to get a Psi4 logo file. table of contents. Build & Run FAQ; Obtaining and Updating PSI4; Configuring and Installing PSI4 via Binary; Configuring, Building, and Installing PSI4 via Source; Non-QC Dependencies; QC Dependencies and Extensions; Testing; Runtime Setup; Running PSI4; Runtime Errors and Debugging; Managing Code; Miscellaneous. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Installation and Runtime Configuration; Build & Run FAQ. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_faq.html
https://psicode.org/psi4manual/master/build_faq.html:1893,Integrability,depend,dependencies,1893,"ier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see ",MatchSource.WIKI,psi4manual/master/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_faq.html
https://psicode.org/psi4manual/master/build_faq.html:2642,Integrability,depend,dependencies,2642,"How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retai",MatchSource.WIKI,psi4manual/master/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_faq.html
https://psicode.org/psi4manual/master/build_faq.html:1273,Modifiability,config,configure,1273,"vel-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC ",MatchSource.WIKI,psi4manual/master/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_faq.html
https://psicode.org/psi4manual/master/build_faq.html:1429,Modifiability,config,configuration,1429,"vel-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC ",MatchSource.WIKI,psi4manual/master/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_faq.html
https://psicode.org/psi4manual/master/build_faq.html:1627,Modifiability,config,configure,1627,"vel-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC ",MatchSource.WIKI,psi4manual/master/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_faq.html
https://psicode.org/psi4manual/master/build_faq.html:1760,Modifiability,config,configuration,1760,"vel-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC ",MatchSource.WIKI,psi4manual/master/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_faq.html
https://psicode.org/psi4manual/master/build_faq.html:1816,Modifiability,config,configure,1816,"vel-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC ",MatchSource.WIKI,psi4manual/master/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_faq.html
https://psicode.org/psi4manual/master/build_faq.html:1950,Modifiability,config,configure,1950,"ier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see ",MatchSource.WIKI,psi4manual/master/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_faq.html
https://psicode.org/psi4manual/master/build_faq.html:2075,Modifiability,config,configure,2075,"ier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see ",MatchSource.WIKI,psi4manual/master/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_faq.html
https://psicode.org/psi4manual/master/build_faq.html:2123,Modifiability,config,configure,2123,"ier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see ",MatchSource.WIKI,psi4manual/master/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_faq.html
https://psicode.org/psi4manual/master/build_faq.html:2386,Modifiability,config,configure,2386,"detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executab",MatchSource.WIKI,psi4manual/master/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_faq.html
https://psicode.org/psi4manual/master/build_faq.html:2719,Modifiability,config,configure,2719,"How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retai",MatchSource.WIKI,psi4manual/master/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_faq.html
https://psicode.org/psi4manual/master/build_faq.html:2768,Modifiability,plugin,plugin,2768,"How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retai",MatchSource.WIKI,psi4manual/master/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_faq.html
https://psicode.org/psi4manual/master/build_faq.html:2834,Modifiability,config,configure,2834,"How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retai",MatchSource.WIKI,psi4manual/master/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_faq.html
https://psicode.org/psi4manual/master/build_faq.html:2874,Modifiability,config,configure,2874,"How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retai",MatchSource.WIKI,psi4manual/master/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_faq.html
https://psicode.org/psi4manual/master/build_faq.html:2917,Modifiability,config,configure,2917,"How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retai",MatchSource.WIKI,psi4manual/master/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_faq.html
https://psicode.org/psi4manual/master/build_faq.html:2958,Modifiability,config,configure,2958,"How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retai",MatchSource.WIKI,psi4manual/master/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_faq.html
https://psicode.org/psi4manual/master/build_faq.html:3001,Modifiability,config,configure,3001,"How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retai",MatchSource.WIKI,psi4manual/master/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_faq.html
https://psicode.org/psi4manual/master/build_faq.html:3518,Modifiability,config,configure,3518,"an compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retain specific Psi4 scratch files; How to use logging in Psi4; How to find the Psi4 module from the executable and vice versa. Runtime Errors and Debugging¶. How to use gdb and lldb with Psi4; How to compile for debugging; How to fix “undefined symbol: _Py_FalseStruct”. Managing Code¶. What is the directory layout of the installed or staged Psi4; What is the suggested GitHub workflow; How to highlight git merge conflicts in vi. Miscellaneous¶. How to refer to Psi4; How to get a Psi4 logo file. table of contents. Build & Run FAQ; Obtaining and Updating PSI4; Configuring and Installing PSI4",MatchSource.WIKI,psi4manual/master/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_faq.html
https://psicode.org/psi4manual/master/build_faq.html:3678,Modifiability,variab,variables,3678,"needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retain specific Psi4 scratch files; How to use logging in Psi4; How to find the Psi4 module from the executable and vice versa. Runtime Errors and Debugging¶. How to use gdb and lldb with Psi4; How to compile for debugging; How to fix “undefined symbol: _Py_FalseStruct”. Managing Code¶. What is the directory layout of the installed or staged Psi4; What is the suggested GitHub workflow; How to highlight git merge conflicts in vi. Miscellaneous¶. How to refer to Psi4; How to get a Psi4 logo file. table of contents. Build & Run FAQ; Obtaining and Updating PSI4; Configuring and Installing PSI4 via Binary; Configuring, Building, and Installing PSI4 via Source; Non-QC Dependencies; QC Dependencies and Extensions; Testing; Runtime Setup; Running PSI4; Runtime Errors and Debugging; Managing Code; Miscellaneous. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Installation and Runtime Configuration; Buil",MatchSource.WIKI,psi4manual/master/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_faq.html
https://psicode.org/psi4manual/master/build_faq.html:3789,Performance,queue,queue,3789,"needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retain specific Psi4 scratch files; How to use logging in Psi4; How to find the Psi4 module from the executable and vice versa. Runtime Errors and Debugging¶. How to use gdb and lldb with Psi4; How to compile for debugging; How to fix “undefined symbol: _Py_FalseStruct”. Managing Code¶. What is the directory layout of the installed or staged Psi4; What is the suggested GitHub workflow; How to highlight git merge conflicts in vi. Miscellaneous¶. How to refer to Psi4; How to get a Psi4 logo file. table of contents. Build & Run FAQ; Obtaining and Updating PSI4; Configuring and Installing PSI4 via Binary; Configuring, Building, and Installing PSI4 via Source; Non-QC Dependencies; QC Dependencies and Extensions; Testing; Runtime Setup; Running PSI4; Runtime Errors and Debugging; Managing Code; Miscellaneous. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Installation and Runtime Configuration; Buil",MatchSource.WIKI,psi4manual/master/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_faq.html
https://psicode.org/psi4manual/master/build_faq.html:1372,Testability,test,test,1372,"vel-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC ",MatchSource.WIKI,psi4manual/master/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_faq.html
https://psicode.org/psi4manual/master/build_faq.html:3067,Testability,test,testing,3067,"How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retain specific Psi4 scratch files; How to use logging in Psi4; How to find the Psi4 module from the executable and vice versa. Runtime Errors and Debugging¶. How to use gdb and lldb with Psi4; How to compile for debugging; How to fix “undefined symbol: _Py_FalseStruct”. Managing Code¶. What is the directory l",MatchSource.WIKI,psi4manual/master/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_faq.html
https://psicode.org/psi4manual/master/build_faq.html:3106,Testability,test,tests,3106,"How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retain specific Psi4 scratch files; How to use logging in Psi4; How to find the Psi4 module from the executable and vice versa. Runtime Errors and Debugging¶. How to use gdb and lldb with Psi4; How to compile for debugging; How to fix “undefined symbol: _Py_FalseStruct”. Managing Code¶. What is the directory l",MatchSource.WIKI,psi4manual/master/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_faq.html
https://psicode.org/psi4manual/master/build_faq.html:3144,Testability,test,tests,3144,"How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retain specific Psi4 scratch files; How to use logging in Psi4; How to find the Psi4 module from the executable and vice versa. Runtime Errors and Debugging¶. How to use gdb and lldb with Psi4; How to compile for debugging; How to fix “undefined symbol: _Py_FalseStruct”. Managing Code¶. What is the directory l",MatchSource.WIKI,psi4manual/master/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_faq.html
https://psicode.org/psi4manual/master/build_faq.html:3158,Testability,test,test,3158,"How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retain specific Psi4 scratch files; How to use logging in Psi4; How to find the Psi4 module from the executable and vice versa. Runtime Errors and Debugging¶. How to use gdb and lldb with Psi4; How to compile for debugging; How to fix “undefined symbol: _Py_FalseStruct”. Managing Code¶. What is the directory l",MatchSource.WIKI,psi4manual/master/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_faq.html
https://psicode.org/psi4manual/master/build_faq.html:3852,Testability,log,logging,3852,"needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retain specific Psi4 scratch files; How to use logging in Psi4; How to find the Psi4 module from the executable and vice versa. Runtime Errors and Debugging¶. How to use gdb and lldb with Psi4; How to compile for debugging; How to fix “undefined symbol: _Py_FalseStruct”. Managing Code¶. What is the directory layout of the installed or staged Psi4; What is the suggested GitHub workflow; How to highlight git merge conflicts in vi. Miscellaneous¶. How to refer to Psi4; How to get a Psi4 logo file. table of contents. Build & Run FAQ; Obtaining and Updating PSI4; Configuring and Installing PSI4 via Binary; Configuring, Building, and Installing PSI4 via Source; Non-QC Dependencies; QC Dependencies and Extensions; Testing; Runtime Setup; Running PSI4; Runtime Errors and Debugging; Managing Code; Miscellaneous. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Installation and Runtime Configuration; Buil",MatchSource.WIKI,psi4manual/master/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_faq.html
https://psicode.org/psi4manual/master/build_faq.html:4294,Testability,log,logo,4294,"to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retain specific Psi4 scratch files; How to use logging in Psi4; How to find the Psi4 module from the executable and vice versa. Runtime Errors and Debugging¶. How to use gdb and lldb with Psi4; How to compile for debugging; How to fix “undefined symbol: _Py_FalseStruct”. Managing Code¶. What is the directory layout of the installed or staged Psi4; What is the suggested GitHub workflow; How to highlight git merge conflicts in vi. Miscellaneous¶. How to refer to Psi4; How to get a Psi4 logo file. table of contents. Build & Run FAQ; Obtaining and Updating PSI4; Configuring and Installing PSI4 via Binary; Configuring, Building, and Installing PSI4 via Source; Non-QC Dependencies; QC Dependencies and Extensions; Testing; Runtime Setup; Running PSI4; Runtime Errors and Debugging; Managing Code; Miscellaneous. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Installation and Runtime Configuration; Build & Run FAQ. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_faq.html
https://psicode.org/psi4manual/master/build_faq.html:448,Usability,guid,guides,448,"﻿. Build & Run FAQ. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Installation and Runtime Configuration; Build & Run FAQ. Build & Run FAQ¶. Warning; As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult psicode downloads; page for the latest guides. Obtaining and Updating PSI4¶. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “",MatchSource.WIKI,psi4manual/master/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_faq.html
https://psicode.org/psi4manual/master/build_obtaining.html:414,Availability,down,downloads,414,"﻿. Obtaining PSI4. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Installation and Runtime Configuration; Obtaining PSI4. Obtaining PSI4¶. Warning; As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult psicode downloads; page for the latest guides. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}¶; A better decision tree is available at psicode.org/installs/latest,; though the below remains valid.; Take a quiz to find the best version of the codebase for; your needs, be it binary, tarball, or version-controlled repository. Or,; select outright among:. Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository (only path to develop PSI4); Tarball from GitHub Repository. Find-the-code Quiz¶; A better decision tree is available at psicode.org/installs/latest,; though the below remains valid. I just want to run the code. I may tweak the Python, but I’m not; developing anything to contribute back to the code base. Provided I still get good, threaded BLAS/LAPACK, OpenMP parallelism,; and optimization for a variety of processor architectures, I’m willing to forgo; architecture tuning wizardry to avoid compiling it myself. I’m on Linux or Mac (Intel or Silicon chips) or Windows (native or WSL/Ubuntu Bash Shell). I’m familiar with conda and want to manage PSI4 as an; ordinary conda package. — Goto Binary-Package; I just want a PSI4 installer. — Goto; Binary-Installer. I want to compile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; ",MatchSource.WIKI,psi4manual/master/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_obtaining.html
https://psicode.org/psi4manual/master/build_obtaining.html:560,Availability,avail,available,560,"﻿. Obtaining PSI4. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Installation and Runtime Configuration; Obtaining PSI4. Obtaining PSI4¶. Warning; As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult psicode downloads; page for the latest guides. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}¶; A better decision tree is available at psicode.org/installs/latest,; though the below remains valid.; Take a quiz to find the best version of the codebase for; your needs, be it binary, tarball, or version-controlled repository. Or,; select outright among:. Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository (only path to develop PSI4); Tarball from GitHub Repository. Find-the-code Quiz¶; A better decision tree is available at psicode.org/installs/latest,; though the below remains valid. I just want to run the code. I may tweak the Python, but I’m not; developing anything to contribute back to the code base. Provided I still get good, threaded BLAS/LAPACK, OpenMP parallelism,; and optimization for a variety of processor architectures, I’m willing to forgo; architecture tuning wizardry to avoid compiling it myself. I’m on Linux or Mac (Intel or Silicon chips) or Windows (native or WSL/Ubuntu Bash Shell). I’m familiar with conda and want to manage PSI4 as an; ordinary conda package. — Goto Binary-Package; I just want a PSI4 installer. — Goto; Binary-Installer. I want to compile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; ",MatchSource.WIKI,psi4manual/master/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_obtaining.html
https://psicode.org/psi4manual/master/build_obtaining.html:998,Availability,avail,available,998,"﻿. Obtaining PSI4. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Installation and Runtime Configuration; Obtaining PSI4. Obtaining PSI4¶. Warning; As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult psicode downloads; page for the latest guides. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}¶; A better decision tree is available at psicode.org/installs/latest,; though the below remains valid.; Take a quiz to find the best version of the codebase for; your needs, be it binary, tarball, or version-controlled repository. Or,; select outright among:. Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository (only path to develop PSI4); Tarball from GitHub Repository. Find-the-code Quiz¶; A better decision tree is available at psicode.org/installs/latest,; though the below remains valid. I just want to run the code. I may tweak the Python, but I’m not; developing anything to contribute back to the code base. Provided I still get good, threaded BLAS/LAPACK, OpenMP parallelism,; and optimization for a variety of processor architectures, I’m willing to forgo; architecture tuning wizardry to avoid compiling it myself. I’m on Linux or Mac (Intel or Silicon chips) or Windows (native or WSL/Ubuntu Bash Shell). I’m familiar with conda and want to manage PSI4 as an; ordinary conda package. — Goto Binary-Package; I just want a PSI4 installer. — Goto; Binary-Installer. I want to compile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; ",MatchSource.WIKI,psi4manual/master/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_obtaining.html
https://psicode.org/psi4manual/master/build_obtaining.html:2648,Availability,avail,available,2648,"mpile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4. In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop using PSI4 infrastructure and libraries, not; on them; I think a plugin might do. I’ve got a PSI4 compilation. Use it, then consult plugins; I’d rather not compile PSI4 or I don’t have compilers —; Goto Binary-Package then consult; plugins through conda. I really like parentheses and/or DBOC, so I want Psi3. —; Psi3 is available from sourceforge, but you’re on your own. Binary Installer¶. Get Initially; Just go to http://www.psicode.org/downloads.html, select “Installer”,; “Stable Release”, and your choice of architecture and Python version,; and follow the instructions there. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4. Contribute Back; Not applicable as not under git control. Conda Binary Package¶. Get Initially; The pre-compiled conda packages at https://anaconda.org/conda-forge/psi4; can be installed into an existing Anaconda or Miniconda distribution; according to directions. Locally, install into; a conda environment as below.; >>> conda create -n p4env psi4 -c conda-forge/label/libint_dev -c conda-forge; >>> conda activate p4env. >>> # nightly build (Linux and Windows only); >>> conda create -n p4env psi4/label/dev::psi4 -c conda-forge/label/libint_dev -c conda-forge; >>> # release; >>> conda create -n p4env psi4 -c conda-forge/label/libint_dev -c conda-forge. Build",MatchSource.WIKI,psi4manual/master/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_obtaining.html
https://psicode.org/psi4manual/master/build_obtaining.html:2768,Availability,down,downloads,2768,"iler, threading,; and BLAS/LAPACK compatibility. I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4. In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop using PSI4 infrastructure and libraries, not; on them; I think a plugin might do. I’ve got a PSI4 compilation. Use it, then consult plugins; I’d rather not compile PSI4 or I don’t have compilers —; Goto Binary-Package then consult; plugins through conda. I really like parentheses and/or DBOC, so I want Psi3. —; Psi3 is available from sourceforge, but you’re on your own. Binary Installer¶. Get Initially; Just go to http://www.psicode.org/downloads.html, select “Installer”,; “Stable Release”, and your choice of architecture and Python version,; and follow the instructions there. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4. Contribute Back; Not applicable as not under git control. Conda Binary Package¶. Get Initially; The pre-compiled conda packages at https://anaconda.org/conda-forge/psi4; can be installed into an existing Anaconda or Miniconda distribution; according to directions. Locally, install into; a conda environment as below.; >>> conda create -n p4env psi4 -c conda-forge/label/libint_dev -c conda-forge; >>> conda activate p4env. >>> # nightly build (Linux and Windows only); >>> conda create -n p4env psi4/label/dev::psi4 -c conda-forge/label/libint_dev -c conda-forge; >>> # release; >>> conda create -n p4env psi4 -c conda-forge/label/libint_dev -c conda-forge. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4 -c conda-forge. ",MatchSource.WIKI,psi4manual/master/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_obtaining.html
https://psicode.org/psi4manual/master/build_obtaining.html:5575,Availability,down,download,5575,"://github.com/johndoe/psi4.git. Fork from GitHub Repository¶. Get Initially; Go to https://github.com/psi4/psi4, and hit the Fork button to store a; PSI4 repository in your GitHub account. Locally, proceed to clone:; # replace johndoe; # use https or ssh; >>> git clone https://github.com/johndoe/psi4.git; >>> cd psi4; # this is your {top-level-psi4-dir}. Set up a connection; between your forked repository and the parent repository.; >>> git remote add upstream https://github.com/psi4/psi4.git. Build directions; Get Updates; Locally, update your fork from the parent; repository and store on GitHub at your fork.; # on branch working_branch; >>> git pull --rebase upstream master; >>> git push origin working_branch. Remember: Working in the master branch of a fork is considered bad practice. Contribute Back; PSI4 contributions process here and; here.; Consider preparing your contribution in a branch; then issue a GitHub pull request. Tarball from GitHub Repository¶. Get Initially; Discouraged! From the PSI4 repository at https://github.com/psi4/psi4, hit the; “Clone or download” then “Download ZIP” button. Locally, unpack as; below.; >>> unzip psi4-master.zip; >>> cd psi4-master; # this is your {top-level-psi4-dir}. Build directions; Get Updates; Download new tarball and rebuild. Contribute Back; Not applicable as source not under git control. What is the suggested GitHub workflow¶. table of contents. Obtaining PSI4; How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; What is the suggested GitHub workflow. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Installation and Runtime Configuration; Obtaining PSI4. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_obtaining.html
https://psicode.org/psi4manual/master/build_obtaining.html:287,Deployability,install,install,287,"﻿. Obtaining PSI4. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Installation and Runtime Configuration; Obtaining PSI4. Obtaining PSI4¶. Warning; As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult psicode downloads; page for the latest guides. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}¶; A better decision tree is available at psicode.org/installs/latest,; though the below remains valid.; Take a quiz to find the best version of the codebase for; your needs, be it binary, tarball, or version-controlled repository. Or,; select outright among:. Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository (only path to develop PSI4); Tarball from GitHub Repository. Find-the-code Quiz¶; A better decision tree is available at psicode.org/installs/latest,; though the below remains valid. I just want to run the code. I may tweak the Python, but I’m not; developing anything to contribute back to the code base. Provided I still get good, threaded BLAS/LAPACK, OpenMP parallelism,; and optimization for a variety of processor architectures, I’m willing to forgo; architecture tuning wizardry to avoid compiling it myself. I’m on Linux or Mac (Intel or Silicon chips) or Windows (native or WSL/Ubuntu Bash Shell). I’m familiar with conda and want to manage PSI4 as an; ordinary conda package. — Goto Binary-Package; I just want a PSI4 installer. — Goto; Binary-Installer. I want to compile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; ",MatchSource.WIKI,psi4manual/master/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_obtaining.html
https://psicode.org/psi4manual/master/build_obtaining.html:353,Deployability,update,updated,353,"﻿. Obtaining PSI4. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Installation and Runtime Configuration; Obtaining PSI4. Obtaining PSI4¶. Warning; As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult psicode downloads; page for the latest guides. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}¶; A better decision tree is available at psicode.org/installs/latest,; though the below remains valid.; Take a quiz to find the best version of the codebase for; your needs, be it binary, tarball, or version-controlled repository. Or,; select outright among:. Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository (only path to develop PSI4); Tarball from GitHub Repository. Find-the-code Quiz¶; A better decision tree is available at psicode.org/installs/latest,; though the below remains valid. I just want to run the code. I may tweak the Python, but I’m not; developing anything to contribute back to the code base. Provided I still get good, threaded BLAS/LAPACK, OpenMP parallelism,; and optimization for a variety of processor architectures, I’m willing to forgo; architecture tuning wizardry to avoid compiling it myself. I’m on Linux or Mac (Intel or Silicon chips) or Windows (native or WSL/Ubuntu Bash Shell). I’m familiar with conda and want to manage PSI4 as an; ordinary conda package. — Goto Binary-Package; I just want a PSI4 installer. — Goto; Binary-Installer. I want to compile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; ",MatchSource.WIKI,psi4manual/master/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_obtaining.html
https://psicode.org/psi4manual/master/build_obtaining.html:585,Deployability,install,installs,585,"﻿. Obtaining PSI4. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Installation and Runtime Configuration; Obtaining PSI4. Obtaining PSI4¶. Warning; As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult psicode downloads; page for the latest guides. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}¶; A better decision tree is available at psicode.org/installs/latest,; though the below remains valid.; Take a quiz to find the best version of the codebase for; your needs, be it binary, tarball, or version-controlled repository. Or,; select outright among:. Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository (only path to develop PSI4); Tarball from GitHub Repository. Find-the-code Quiz¶; A better decision tree is available at psicode.org/installs/latest,; though the below remains valid. I just want to run the code. I may tweak the Python, but I’m not; developing anything to contribute back to the code base. Provided I still get good, threaded BLAS/LAPACK, OpenMP parallelism,; and optimization for a variety of processor architectures, I’m willing to forgo; architecture tuning wizardry to avoid compiling it myself. I’m on Linux or Mac (Intel or Silicon chips) or Windows (native or WSL/Ubuntu Bash Shell). I’m familiar with conda and want to manage PSI4 as an; ordinary conda package. — Goto Binary-Package; I just want a PSI4 installer. — Goto; Binary-Installer. I want to compile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; ",MatchSource.WIKI,psi4manual/master/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_obtaining.html
https://psicode.org/psi4manual/master/build_obtaining.html:1023,Deployability,install,installs,1023,"    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Installation and Runtime Configuration; Obtaining PSI4. Obtaining PSI4¶. Warning; As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult psicode downloads; page for the latest guides. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}¶; A better decision tree is available at psicode.org/installs/latest,; though the below remains valid.; Take a quiz to find the best version of the codebase for; your needs, be it binary, tarball, or version-controlled repository. Or,; select outright among:. Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository (only path to develop PSI4); Tarball from GitHub Repository. Find-the-code Quiz¶; A better decision tree is available at psicode.org/installs/latest,; though the below remains valid. I just want to run the code. I may tweak the Python, but I’m not; developing anything to contribute back to the code base. Provided I still get good, threaded BLAS/LAPACK, OpenMP parallelism,; and optimization for a variety of processor architectures, I’m willing to forgo; architecture tuning wizardry to avoid compiling it myself. I’m on Linux or Mac (Intel or Silicon chips) or Windows (native or WSL/Ubuntu Bash Shell). I’m familiar with conda and want to manage PSI4 as an; ordinary conda package. — Goto Binary-Package; I just want a PSI4 installer. — Goto; Binary-Installer. I want to compile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; I don’t want to deal with this newfangled git",MatchSource.WIKI,psi4manual/master/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_obtaining.html
https://psicode.org/psi4manual/master/build_obtaining.html:1618,Deployability,install,installer,1618,"; though the below remains valid.; Take a quiz to find the best version of the codebase for; your needs, be it binary, tarball, or version-controlled repository. Or,; select outright among:. Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository (only path to develop PSI4); Tarball from GitHub Repository. Find-the-code Quiz¶; A better decision tree is available at psicode.org/installs/latest,; though the below remains valid. I just want to run the code. I may tweak the Python, but I’m not; developing anything to contribute back to the code base. Provided I still get good, threaded BLAS/LAPACK, OpenMP parallelism,; and optimization for a variety of processor architectures, I’m willing to forgo; architecture tuning wizardry to avoid compiling it myself. I’m on Linux or Mac (Intel or Silicon chips) or Windows (native or WSL/Ubuntu Bash Shell). I’m familiar with conda and want to manage PSI4 as an; ordinary conda package. — Goto Binary-Package; I just want a PSI4 installer. — Goto; Binary-Installer. I want to compile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4. In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop using PSI4 infrastructure and libraries, not; on them; I think a plugin might do. I’ve got a PSI4 compilation. Use it, then consult plugins; I’d rather not compile PSI4 or I don’t have compilers —; Goto Binary-Package then consult; plugins through conda. I really like parent",MatchSource.WIKI,psi4manual/master/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_obtaining.html
https://psicode.org/psi4manual/master/build_obtaining.html:2991,Deployability,update,update,2991,"to Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4. In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop using PSI4 infrastructure and libraries, not; on them; I think a plugin might do. I’ve got a PSI4 compilation. Use it, then consult plugins; I’d rather not compile PSI4 or I don’t have compilers —; Goto Binary-Package then consult; plugins through conda. I really like parentheses and/or DBOC, so I want Psi3. —; Psi3 is available from sourceforge, but you’re on your own. Binary Installer¶. Get Initially; Just go to http://www.psicode.org/downloads.html, select “Installer”,; “Stable Release”, and your choice of architecture and Python version,; and follow the instructions there. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4. Contribute Back; Not applicable as not under git control. Conda Binary Package¶. Get Initially; The pre-compiled conda packages at https://anaconda.org/conda-forge/psi4; can be installed into an existing Anaconda or Miniconda distribution; according to directions. Locally, install into; a conda environment as below.; >>> conda create -n p4env psi4 -c conda-forge/label/libint_dev -c conda-forge; >>> conda activate p4env. >>> # nightly build (Linux and Windows only); >>> conda create -n p4env psi4/label/dev::psi4 -c conda-forge/label/libint_dev -c conda-forge; >>> # release; >>> conda create -n p4env psi4 -c conda-forge/label/libint_dev -c conda-forge. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4 -c conda-forge. Contribute Back; Not applicable as not under git control. Clone from GitHub Repository¶. Get Initially; The PSI4 repository at https://github.com/psi4/psi4 works like; every other GitHub repo.; Locally, clone ",MatchSource.WIKI,psi4manual/master/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_obtaining.html
https://psicode.org/psi4manual/master/build_obtaining.html:3181,Deployability,install,installed,3181," my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop using PSI4 infrastructure and libraries, not; on them; I think a plugin might do. I’ve got a PSI4 compilation. Use it, then consult plugins; I’d rather not compile PSI4 or I don’t have compilers —; Goto Binary-Package then consult; plugins through conda. I really like parentheses and/or DBOC, so I want Psi3. —; Psi3 is available from sourceforge, but you’re on your own. Binary Installer¶. Get Initially; Just go to http://www.psicode.org/downloads.html, select “Installer”,; “Stable Release”, and your choice of architecture and Python version,; and follow the instructions there. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4. Contribute Back; Not applicable as not under git control. Conda Binary Package¶. Get Initially; The pre-compiled conda packages at https://anaconda.org/conda-forge/psi4; can be installed into an existing Anaconda or Miniconda distribution; according to directions. Locally, install into; a conda environment as below.; >>> conda create -n p4env psi4 -c conda-forge/label/libint_dev -c conda-forge; >>> conda activate p4env. >>> # nightly build (Linux and Windows only); >>> conda create -n p4env psi4/label/dev::psi4 -c conda-forge/label/libint_dev -c conda-forge; >>> # release; >>> conda create -n p4env psi4 -c conda-forge/label/libint_dev -c conda-forge. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4 -c conda-forge. Contribute Back; Not applicable as not under git control. Clone from GitHub Repository¶. Get Initially; The PSI4 repository at https://github.com/psi4/psi4 works like; every other GitHub repo.; Locally, clone as below.; # use https or ssh; >>> git clone https://github.com/psi4/psi4.git; >>> cd psi4; # this is your {top-level-psi4-dir}. Build directions; Get Updates; # on branch master; >>> git pull origin master. Contribute Back; Contr",MatchSource.WIKI,psi4manual/master/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_obtaining.html
https://psicode.org/psi4manual/master/build_obtaining.html:3278,Deployability,install,install,3278,"k-from-GitHub; I want to develop using PSI4 infrastructure and libraries, not; on them; I think a plugin might do. I’ve got a PSI4 compilation. Use it, then consult plugins; I’d rather not compile PSI4 or I don’t have compilers —; Goto Binary-Package then consult; plugins through conda. I really like parentheses and/or DBOC, so I want Psi3. —; Psi3 is available from sourceforge, but you’re on your own. Binary Installer¶. Get Initially; Just go to http://www.psicode.org/downloads.html, select “Installer”,; “Stable Release”, and your choice of architecture and Python version,; and follow the instructions there. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4. Contribute Back; Not applicable as not under git control. Conda Binary Package¶. Get Initially; The pre-compiled conda packages at https://anaconda.org/conda-forge/psi4; can be installed into an existing Anaconda or Miniconda distribution; according to directions. Locally, install into; a conda environment as below.; >>> conda create -n p4env psi4 -c conda-forge/label/libint_dev -c conda-forge; >>> conda activate p4env. >>> # nightly build (Linux and Windows only); >>> conda create -n p4env psi4/label/dev::psi4 -c conda-forge/label/libint_dev -c conda-forge; >>> # release; >>> conda create -n p4env psi4 -c conda-forge/label/libint_dev -c conda-forge. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4 -c conda-forge. Contribute Back; Not applicable as not under git control. Clone from GitHub Repository¶. Get Initially; The PSI4 repository at https://github.com/psi4/psi4 works like; every other GitHub repo.; Locally, clone as below.; # use https or ssh; >>> git clone https://github.com/psi4/psi4.git; >>> cd psi4; # this is your {top-level-psi4-dir}. Build directions; Get Updates; # on branch master; >>> git pull origin master. Contribute Back; Contributions cannot be made directly to the main repository. Fork; instead.; To convert c",MatchSource.WIKI,psi4manual/master/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_obtaining.html
https://psicode.org/psi4manual/master/build_obtaining.html:3575,Deployability,release,release,3575," then consult; plugins through conda. I really like parentheses and/or DBOC, so I want Psi3. —; Psi3 is available from sourceforge, but you’re on your own. Binary Installer¶. Get Initially; Just go to http://www.psicode.org/downloads.html, select “Installer”,; “Stable Release”, and your choice of architecture and Python version,; and follow the instructions there. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4. Contribute Back; Not applicable as not under git control. Conda Binary Package¶. Get Initially; The pre-compiled conda packages at https://anaconda.org/conda-forge/psi4; can be installed into an existing Anaconda or Miniconda distribution; according to directions. Locally, install into; a conda environment as below.; >>> conda create -n p4env psi4 -c conda-forge/label/libint_dev -c conda-forge; >>> conda activate p4env. >>> # nightly build (Linux and Windows only); >>> conda create -n p4env psi4/label/dev::psi4 -c conda-forge/label/libint_dev -c conda-forge; >>> # release; >>> conda create -n p4env psi4 -c conda-forge/label/libint_dev -c conda-forge. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4 -c conda-forge. Contribute Back; Not applicable as not under git control. Clone from GitHub Repository¶. Get Initially; The PSI4 repository at https://github.com/psi4/psi4 works like; every other GitHub repo.; Locally, clone as below.; # use https or ssh; >>> git clone https://github.com/psi4/psi4.git; >>> cd psi4; # this is your {top-level-psi4-dir}. Build directions; Get Updates; # on branch master; >>> git pull origin master. Contribute Back; Contributions cannot be made directly to the main repository. Fork; instead.; To convert clone to fork, go to https://github.com/psi4/psi4, and; hit the Fork; button to store a PSI4 repository in your GitHub account.; >>> git remote rename origin upstream; >>> git remote add origin https://github.com/johndoe/psi4.git. Fork from GitHub Rep",MatchSource.WIKI,psi4manual/master/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_obtaining.html
https://psicode.org/psi4manual/master/build_obtaining.html:3743,Deployability,update,update,3743,"go to http://www.psicode.org/downloads.html, select “Installer”,; “Stable Release”, and your choice of architecture and Python version,; and follow the instructions there. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4. Contribute Back; Not applicable as not under git control. Conda Binary Package¶. Get Initially; The pre-compiled conda packages at https://anaconda.org/conda-forge/psi4; can be installed into an existing Anaconda or Miniconda distribution; according to directions. Locally, install into; a conda environment as below.; >>> conda create -n p4env psi4 -c conda-forge/label/libint_dev -c conda-forge; >>> conda activate p4env. >>> # nightly build (Linux and Windows only); >>> conda create -n p4env psi4/label/dev::psi4 -c conda-forge/label/libint_dev -c conda-forge; >>> # release; >>> conda create -n p4env psi4 -c conda-forge/label/libint_dev -c conda-forge. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4 -c conda-forge. Contribute Back; Not applicable as not under git control. Clone from GitHub Repository¶. Get Initially; The PSI4 repository at https://github.com/psi4/psi4 works like; every other GitHub repo.; Locally, clone as below.; # use https or ssh; >>> git clone https://github.com/psi4/psi4.git; >>> cd psi4; # this is your {top-level-psi4-dir}. Build directions; Get Updates; # on branch master; >>> git pull origin master. Contribute Back; Contributions cannot be made directly to the main repository. Fork; instead.; To convert clone to fork, go to https://github.com/psi4/psi4, and; hit the Fork; button to store a PSI4 repository in your GitHub account.; >>> git remote rename origin upstream; >>> git remote add origin https://github.com/johndoe/psi4.git. Fork from GitHub Repository¶. Get Initially; Go to https://github.com/psi4/psi4, and hit the Fork button to store a; PSI4 repository in your GitHub account. Locally, proceed to clone:; # replace johndoe; # use http",MatchSource.WIKI,psi4manual/master/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_obtaining.html
https://psicode.org/psi4manual/master/build_obtaining.html:5032,Deployability,update,update,5032,"si4.git; >>> cd psi4; # this is your {top-level-psi4-dir}. Build directions; Get Updates; # on branch master; >>> git pull origin master. Contribute Back; Contributions cannot be made directly to the main repository. Fork; instead.; To convert clone to fork, go to https://github.com/psi4/psi4, and; hit the Fork; button to store a PSI4 repository in your GitHub account.; >>> git remote rename origin upstream; >>> git remote add origin https://github.com/johndoe/psi4.git. Fork from GitHub Repository¶. Get Initially; Go to https://github.com/psi4/psi4, and hit the Fork button to store a; PSI4 repository in your GitHub account. Locally, proceed to clone:; # replace johndoe; # use https or ssh; >>> git clone https://github.com/johndoe/psi4.git; >>> cd psi4; # this is your {top-level-psi4-dir}. Set up a connection; between your forked repository and the parent repository.; >>> git remote add upstream https://github.com/psi4/psi4.git. Build directions; Get Updates; Locally, update your fork from the parent; repository and store on GitHub at your fork.; # on branch working_branch; >>> git pull --rebase upstream master; >>> git push origin working_branch. Remember: Working in the master branch of a fork is considered bad practice. Contribute Back; PSI4 contributions process here and; here.; Consider preparing your contribution in a branch; then issue a GitHub pull request. Tarball from GitHub Repository¶. Get Initially; Discouraged! From the PSI4 repository at https://github.com/psi4/psi4, hit the; “Clone or download” then “Download ZIP” button. Locally, unpack as; below.; >>> unzip psi4-master.zip; >>> cd psi4-master; # this is your {top-level-psi4-dir}. Build directions; Get Updates; Download new tarball and rebuild. Contribute Back; Not applicable as source not under git control. What is the suggested GitHub workflow¶. table of contents. Obtaining PSI4; How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Con",MatchSource.WIKI,psi4manual/master/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_obtaining.html
https://psicode.org/psi4manual/master/build_obtaining.html:6414,Deployability,update,updated,6414,"://github.com/johndoe/psi4.git. Fork from GitHub Repository¶. Get Initially; Go to https://github.com/psi4/psi4, and hit the Fork button to store a; PSI4 repository in your GitHub account. Locally, proceed to clone:; # replace johndoe; # use https or ssh; >>> git clone https://github.com/johndoe/psi4.git; >>> cd psi4; # this is your {top-level-psi4-dir}. Set up a connection; between your forked repository and the parent repository.; >>> git remote add upstream https://github.com/psi4/psi4.git. Build directions; Get Updates; Locally, update your fork from the parent; repository and store on GitHub at your fork.; # on branch working_branch; >>> git pull --rebase upstream master; >>> git push origin working_branch. Remember: Working in the master branch of a fork is considered bad practice. Contribute Back; PSI4 contributions process here and; here.; Consider preparing your contribution in a branch; then issue a GitHub pull request. Tarball from GitHub Repository¶. Get Initially; Discouraged! From the PSI4 repository at https://github.com/psi4/psi4, hit the; “Clone or download” then “Download ZIP” button. Locally, unpack as; below.; >>> unzip psi4-master.zip; >>> cd psi4-master; # this is your {top-level-psi4-dir}. Build directions; Get Updates; Download new tarball and rebuild. Contribute Back; Not applicable as source not under git control. What is the suggested GitHub workflow¶. table of contents. Obtaining PSI4; How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; What is the suggested GitHub workflow. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Installation and Runtime Configuration; Obtaining PSI4. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_obtaining.html
https://psicode.org/psi4manual/master/build_obtaining.html:2392,Modifiability,plugin,plugin,2392,"; architecture tuning wizardry to avoid compiling it myself. I’m on Linux or Mac (Intel or Silicon chips) or Windows (native or WSL/Ubuntu Bash Shell). I’m familiar with conda and want to manage PSI4 as an; ordinary conda package. — Goto Binary-Package; I just want a PSI4 installer. — Goto; Binary-Installer. I want to compile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4. In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop using PSI4 infrastructure and libraries, not; on them; I think a plugin might do. I’ve got a PSI4 compilation. Use it, then consult plugins; I’d rather not compile PSI4 or I don’t have compilers —; Goto Binary-Package then consult; plugins through conda. I really like parentheses and/or DBOC, so I want Psi3. —; Psi3 is available from sourceforge, but you’re on your own. Binary Installer¶. Get Initially; Just go to http://www.psicode.org/downloads.html, select “Installer”,; “Stable Release”, and your choice of architecture and Python version,; and follow the instructions there. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4. Contribute Back; Not applicable as not under git control. Conda Binary Package¶. Get Initially; The pre-compiled conda packages at https://anaconda.org/conda-forge/psi4; can be installed into an existing Anaconda or Miniconda distribution; according to directions. Locally, install into; a conda environment as below.; >>> conda create -n p4",MatchSource.WIKI,psi4manual/master/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_obtaining.html
https://psicode.org/psi4manual/master/build_obtaining.html:2459,Modifiability,plugin,plugins,2459," with conda and want to manage PSI4 as an; ordinary conda package. — Goto Binary-Package; I just want a PSI4 installer. — Goto; Binary-Installer. I want to compile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4. In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop using PSI4 infrastructure and libraries, not; on them; I think a plugin might do. I’ve got a PSI4 compilation. Use it, then consult plugins; I’d rather not compile PSI4 or I don’t have compilers —; Goto Binary-Package then consult; plugins through conda. I really like parentheses and/or DBOC, so I want Psi3. —; Psi3 is available from sourceforge, but you’re on your own. Binary Installer¶. Get Initially; Just go to http://www.psicode.org/downloads.html, select “Installer”,; “Stable Release”, and your choice of architecture and Python version,; and follow the instructions there. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4. Contribute Back; Not applicable as not under git control. Conda Binary Package¶. Get Initially; The pre-compiled conda packages at https://anaconda.org/conda-forge/psi4; can be installed into an existing Anaconda or Miniconda distribution; according to directions. Locally, install into; a conda environment as below.; >>> conda create -n p4env psi4 -c conda-forge/label/libint_dev -c conda-forge; >>> conda activate p4env. >>> # nightly build (Linux and Windows only); >>> conda create -n p4env psi4/labe",MatchSource.WIKI,psi4manual/master/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_obtaining.html
https://psicode.org/psi4manual/master/build_obtaining.html:2559,Modifiability,plugin,plugins,2559," with conda and want to manage PSI4 as an; ordinary conda package. — Goto Binary-Package; I just want a PSI4 installer. — Goto; Binary-Installer. I want to compile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4. In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop using PSI4 infrastructure and libraries, not; on them; I think a plugin might do. I’ve got a PSI4 compilation. Use it, then consult plugins; I’d rather not compile PSI4 or I don’t have compilers —; Goto Binary-Package then consult; plugins through conda. I really like parentheses and/or DBOC, so I want Psi3. —; Psi3 is available from sourceforge, but you’re on your own. Binary Installer¶. Get Initially; Just go to http://www.psicode.org/downloads.html, select “Installer”,; “Stable Release”, and your choice of architecture and Python version,; and follow the instructions there. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4. Contribute Back; Not applicable as not under git control. Conda Binary Package¶. Get Initially; The pre-compiled conda packages at https://anaconda.org/conda-forge/psi4; can be installed into an existing Anaconda or Miniconda distribution; according to directions. Locally, install into; a conda environment as below.; >>> conda create -n p4env psi4 -c conda-forge/label/libint_dev -c conda-forge; >>> conda activate p4env. >>> # nightly build (Linux and Windows only); >>> conda create -n p4env psi4/labe",MatchSource.WIKI,psi4manual/master/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_obtaining.html
https://psicode.org/psi4manual/master/build_obtaining.html:1270,Performance,optimiz,optimization,1270," for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult psicode downloads; page for the latest guides. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}¶; A better decision tree is available at psicode.org/installs/latest,; though the below remains valid.; Take a quiz to find the best version of the codebase for; your needs, be it binary, tarball, or version-controlled repository. Or,; select outright among:. Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository (only path to develop PSI4); Tarball from GitHub Repository. Find-the-code Quiz¶; A better decision tree is available at psicode.org/installs/latest,; though the below remains valid. I just want to run the code. I may tweak the Python, but I’m not; developing anything to contribute back to the code base. Provided I still get good, threaded BLAS/LAPACK, OpenMP parallelism,; and optimization for a variety of processor architectures, I’m willing to forgo; architecture tuning wizardry to avoid compiling it myself. I’m on Linux or Mac (Intel or Silicon chips) or Windows (native or WSL/Ubuntu Bash Shell). I’m familiar with conda and want to manage PSI4 as an; ordinary conda package. — Goto Binary-Package; I just want a PSI4 installer. — Goto; Binary-Installer. I want to compile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4. In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from",MatchSource.WIKI,psi4manual/master/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_obtaining.html
https://psicode.org/psi4manual/master/build_obtaining.html:1699,Performance,perform,performance,1699,"or; your needs, be it binary, tarball, or version-controlled repository. Or,; select outright among:. Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository (only path to develop PSI4); Tarball from GitHub Repository. Find-the-code Quiz¶; A better decision tree is available at psicode.org/installs/latest,; though the below remains valid. I just want to run the code. I may tweak the Python, but I’m not; developing anything to contribute back to the code base. Provided I still get good, threaded BLAS/LAPACK, OpenMP parallelism,; and optimization for a variety of processor architectures, I’m willing to forgo; architecture tuning wizardry to avoid compiling it myself. I’m on Linux or Mac (Intel or Silicon chips) or Windows (native or WSL/Ubuntu Bash Shell). I’m familiar with conda and want to manage PSI4 as an; ordinary conda package. — Goto Binary-Package; I just want a PSI4 installer. — Goto; Binary-Installer. I want to compile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4. In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop using PSI4 infrastructure and libraries, not; on them; I think a plugin might do. I’ve got a PSI4 compilation. Use it, then consult plugins; I’d rather not compile PSI4 or I don’t have compilers —; Goto Binary-Package then consult; plugins through conda. I really like parentheses and/or DBOC, so I want Psi3. —; Psi3 is available from sourceforge, but you’re on y",MatchSource.WIKI,psi4manual/master/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_obtaining.html
https://psicode.org/psi4manual/master/build_obtaining.html:1379,Safety,avoid,avoid,1379," for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult psicode downloads; page for the latest guides. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}¶; A better decision tree is available at psicode.org/installs/latest,; though the below remains valid.; Take a quiz to find the best version of the codebase for; your needs, be it binary, tarball, or version-controlled repository. Or,; select outright among:. Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository (only path to develop PSI4); Tarball from GitHub Repository. Find-the-code Quiz¶; A better decision tree is available at psicode.org/installs/latest,; though the below remains valid. I just want to run the code. I may tweak the Python, but I’m not; developing anything to contribute back to the code base. Provided I still get good, threaded BLAS/LAPACK, OpenMP parallelism,; and optimization for a variety of processor architectures, I’m willing to forgo; architecture tuning wizardry to avoid compiling it myself. I’m on Linux or Mac (Intel or Silicon chips) or Windows (native or WSL/Ubuntu Bash Shell). I’m familiar with conda and want to manage PSI4 as an; ordinary conda package. — Goto Binary-Package; I just want a PSI4 installer. — Goto; Binary-Installer. I want to compile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4. In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from",MatchSource.WIKI,psi4manual/master/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_obtaining.html
https://psicode.org/psi4manual/master/build_obtaining.html:1926,Security,access,access,1926,"ball from GitHub Repository. Find-the-code Quiz¶; A better decision tree is available at psicode.org/installs/latest,; though the below remains valid. I just want to run the code. I may tweak the Python, but I’m not; developing anything to contribute back to the code base. Provided I still get good, threaded BLAS/LAPACK, OpenMP parallelism,; and optimization for a variety of processor architectures, I’m willing to forgo; architecture tuning wizardry to avoid compiling it myself. I’m on Linux or Mac (Intel or Silicon chips) or Windows (native or WSL/Ubuntu Bash Shell). I’m familiar with conda and want to manage PSI4 as an; ordinary conda package. — Goto Binary-Package; I just want a PSI4 installer. — Goto; Binary-Installer. I want to compile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4. In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop using PSI4 infrastructure and libraries, not; on them; I think a plugin might do. I’ve got a PSI4 compilation. Use it, then consult plugins; I’d rather not compile PSI4 or I don’t have compilers —; Goto Binary-Package then consult; plugins through conda. I really like parentheses and/or DBOC, so I want Psi3. —; Psi3 is available from sourceforge, but you’re on your own. Binary Installer¶. Get Initially; Just go to http://www.psicode.org/downloads.html, select “Installer”,; “Stable Release”, and your choice of architecture and Python version,; and follow the instructions there. Build; Not a",MatchSource.WIKI,psi4manual/master/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_obtaining.html
https://psicode.org/psi4manual/master/build_obtaining.html:445,Usability,guid,guides,445,"﻿. Obtaining PSI4. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Installation and Runtime Configuration; Obtaining PSI4. Obtaining PSI4¶. Warning; As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult psicode downloads; page for the latest guides. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}¶; A better decision tree is available at psicode.org/installs/latest,; though the below remains valid.; Take a quiz to find the best version of the codebase for; your needs, be it binary, tarball, or version-controlled repository. Or,; select outright among:. Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository (only path to develop PSI4); Tarball from GitHub Repository. Find-the-code Quiz¶; A better decision tree is available at psicode.org/installs/latest,; though the below remains valid. I just want to run the code. I may tweak the Python, but I’m not; developing anything to contribute back to the code base. Provided I still get good, threaded BLAS/LAPACK, OpenMP parallelism,; and optimization for a variety of processor architectures, I’m willing to forgo; architecture tuning wizardry to avoid compiling it myself. I’m on Linux or Mac (Intel or Silicon chips) or Windows (native or WSL/Ubuntu Bash Shell). I’m familiar with conda and want to manage PSI4 as an; ordinary conda package. — Goto Binary-Package; I just want a PSI4 installer. — Goto; Binary-Installer. I want to compile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; ",MatchSource.WIKI,psi4manual/master/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_obtaining.html
https://psicode.org/psi4manual/master/build_planning.html:572,Availability,down,downloads,572,"﻿. Compiling and Installing from Source. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Installation and Runtime Configuration; Compiling and Installing from Source. Compiling and Installing from Source¶. Warning; As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult psi4/conda/psi4-path-advisor.py; (extensive help menu at conda/psi4-path-advisor.py -h); or psicode downloads; page for the latest guides. This section fulfills the duty of every Linux project to have an INSTALL; file detailing how to build it from source. Few (mostly packagers and; sysadmins) are expected to read this file as it is a broad guide to the; many choices in building this project. For a specific, well-tested,; and performance-tuned build path, see psicode.org/installs/latest; (select “source”). For pre-built binaries again well-tested,; performance-tuned, and available for all common operating systems,; see psicode.org/installs/latest (select “conda”).; To see working builds for Linux, Mac, and Windows, see :src:; [this GHA]. Planning: how to configure Psi4 and invoke CMake¶; PSI4 is built through CMake. An abbreviated build guide can be found; within the source itself .; CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it’s very possible that; from top-level-psi4-dir source directory, you can call cmake -S.; -Bobjdir without any further arguments, and it will invoke cmake,; detect some appropriate defaults, configure the build, create a build; directory objdir, and complete, leaving you to only invoke; make or Ninja in the new build directory.; Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within core; dependencies and add-on dependencies to plan a s",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:1050,Availability,avail,available,1050,"gation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Installation and Runtime Configuration; Compiling and Installing from Source. Compiling and Installing from Source¶. Warning; As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult psi4/conda/psi4-path-advisor.py; (extensive help menu at conda/psi4-path-advisor.py -h); or psicode downloads; page for the latest guides. This section fulfills the duty of every Linux project to have an INSTALL; file detailing how to build it from source. Few (mostly packagers and; sysadmins) are expected to read this file as it is a broad guide to the; many choices in building this project. For a specific, well-tested,; and performance-tuned build path, see psicode.org/installs/latest; (select “source”). For pre-built binaries again well-tested,; performance-tuned, and available for all common operating systems,; see psicode.org/installs/latest (select “conda”).; To see working builds for Linux, Mac, and Windows, see :src:; [this GHA]. Planning: how to configure Psi4 and invoke CMake¶; PSI4 is built through CMake. An abbreviated build guide can be found; within the source itself .; CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it’s very possible that; from top-level-psi4-dir source directory, you can call cmake -S.; -Bobjdir without any further arguments, and it will invoke cmake,; detect some appropriate defaults, configure the build, create a build; directory objdir, and complete, leaving you to only invoke; make or Ninja in the new build directory.; Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within core; dependencies and add-on dependencies to plan a set of arguments to cmake tailored to; your c",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:3467,Availability,avail,available,3467,"rget install -j`getconf _NPROCESSORS_ONLN`. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. >>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation). >>> cd {objdir}; >>> cmake --build . -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest and Pytest to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. 6. Install. If tests pass, install the code.; >>> cmake --install . 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. W",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:4110,Availability,error,errors,4110," to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation). >>> cd {objdir}; >>> cmake --build . -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest and Pytest to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. 6. Install. If tests pass, install the code.; >>> cmake --install . 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux and Mac) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it.; See psi4/codedeps.yaml for a structured listing and history of dependencies. C++ and C Compilers (C++20 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux dis",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:5190,Availability,down,download,5190," If tests pass, install the code.; >>> cmake --install . 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux and Mac) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it.; See psi4/codedeps.yaml for a structured listing and history of dependencies. C++ and C Compilers (C++20 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (3.8+) https://www.python.org/; CMake (3.15+) https://cmake.org/download/; NumPy (needed at runtime and buildtime) https://numpy.org/; System utilities: GNU make and GNU install or Ninja, POSIX threads (Pthreads) library. The following are also required for PSI4, but if not detected, the; build system will automatically download and build. gau2grid — [what is gau2grid?] [gau2grid min version]; Libint — [what is Libint?] [Libint min version] (Libint2 as of Nov 2020; added by v1.4). Eigen https://eigen.tuxfamily.org/index.php?title=Main_Page; Boost https://www.boost.org/ header-only preprocessor library. Libxc — [what is Libxc?] [Libxc min version]; pybind11 — [what is Pybind11?] [Pybind11 min version]; QCElemental — [what is QCElemental?]; QCEngine — [what is QCEngine?] (March 2019; added by v1.4); optking — [what is optking] (runtime dependency, required at build-time). Additionally, there are runtime-only dependencies:. msgpack-python for MessagePack https://msgpack.org/ (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); NumPy https://numpy.",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:5448,Availability,down,download,5448,"compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux and Mac) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it.; See psi4/codedeps.yaml for a structured listing and history of dependencies. C++ and C Compilers (C++20 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (3.8+) https://www.python.org/; CMake (3.15+) https://cmake.org/download/; NumPy (needed at runtime and buildtime) https://numpy.org/; System utilities: GNU make and GNU install or Ninja, POSIX threads (Pthreads) library. The following are also required for PSI4, but if not detected, the; build system will automatically download and build. gau2grid — [what is gau2grid?] [gau2grid min version]; Libint — [what is Libint?] [Libint min version] (Libint2 as of Nov 2020; added by v1.4). Eigen https://eigen.tuxfamily.org/index.php?title=Main_Page; Boost https://www.boost.org/ header-only preprocessor library. Libxc — [what is Libxc?] [Libxc min version]; pybind11 — [what is Pybind11?] [Pybind11 min version]; QCElemental — [what is QCElemental?]; QCEngine — [what is QCEngine?] (March 2019; added by v1.4); optking — [what is optking] (runtime dependency, required at build-time). Additionally, there are runtime-only dependencies:. msgpack-python for MessagePack https://msgpack.org/ (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); NumPy https://numpy.org/; networkx https://github.com/networkx/networkx (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); pint https://pint.readthedocs.io/en/latest/ (t",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:6616,Availability,error,error,6616,"https://eigen.tuxfamily.org/index.php?title=Main_Page; Boost https://www.boost.org/ header-only preprocessor library. Libxc — [what is Libxc?] [Libxc min version]; pybind11 — [what is Pybind11?] [Pybind11 min version]; QCElemental — [what is QCElemental?]; QCEngine — [what is QCEngine?] (March 2019; added by v1.4); optking — [what is optking] (runtime dependency, required at build-time). Additionally, there are runtime-only dependencies:. msgpack-python for MessagePack https://msgpack.org/ (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); NumPy https://numpy.org/; networkx https://github.com/networkx/networkx (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); pint https://pint.readthedocs.io/en/latest/ (transitive dependency of QCElemental); pydantic https://pydantic-docs.helpmanual.io/# (transitive dependency of QCElemental); SciPy https://scipy.org/ (avoidable if necessary by following directions in runtime error message); py-cpuinfo (provides import cpuinfo) https://github.com/workhorsy/py-cpuinfo (transitive dependency of QCEngine); psutil https://github.com/giampaolo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. Boost (September 2016; dropped by v1.1); deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4); MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2; Perl for testing (April 2022; dropped by v1.6). What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing. CTest https://cmake.org/download/; pytest (for installed testing) http://doc.pytest.org/en/lat",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:7478,Availability,avail,available,7478,"ual.io/# (transitive dependency of QCElemental); SciPy https://scipy.org/ (avoidable if necessary by following directions in runtime error message); py-cpuinfo (provides import cpuinfo) https://github.com/workhorsy/py-cpuinfo (transitive dependency of QCEngine); psutil https://github.com/giampaolo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. Boost (September 2016; dropped by v1.1); deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4); MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2; Perl for testing (April 2022; dropped by v1.6). What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing. CTest https://cmake.org/download/; pytest (for installed testing) http://doc.pytest.org/en/latest/; pytest-xdist (for installed testing many tests at once) https://github.com/pytest-dev/pytest-xdist. PSI4 Documentation (available pre-built at psicode.org/psi4manual/master/index.html). Sphinx (3.5+) http://sphinx-doc.org; Perl (for some auto-documentation scripts) https://www.perl.org/; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; See [“message” lines] for advice on obtaining docs dependencies or [conda env spec]; See psi4/.github/workflows/docs.yml for full docs building procedure to follow. Ambit — https://github.com/jturney/ambit; CheMPS2 — [what is CheMPS2?] [CheMPS2 min version]. HDF5 https://support.hdfgroup.org/HDF5/; zlib http://www.zlib.net/. ecpint — [what is ecpint?] [ecpint min version]; dkh — [what is dkh?] [dkh min version]. F",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:7548,Availability,down,download,7548,"ecessary by following directions in runtime error message); py-cpuinfo (provides import cpuinfo) https://github.com/workhorsy/py-cpuinfo (transitive dependency of QCEngine); psutil https://github.com/giampaolo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. Boost (September 2016; dropped by v1.1); deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4); MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2; Perl for testing (April 2022; dropped by v1.6). What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing. CTest https://cmake.org/download/; pytest (for installed testing) http://doc.pytest.org/en/latest/; pytest-xdist (for installed testing many tests at once) https://github.com/pytest-dev/pytest-xdist. PSI4 Documentation (available pre-built at psicode.org/psi4manual/master/index.html). Sphinx (3.5+) http://sphinx-doc.org; Perl (for some auto-documentation scripts) https://www.perl.org/; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; See [“message” lines] for advice on obtaining docs dependencies or [conda env spec]; See psi4/.github/workflows/docs.yml for full docs building procedure to follow. Ambit — https://github.com/jturney/ambit; CheMPS2 — [what is CheMPS2?] [CheMPS2 min version]. HDF5 https://support.hdfgroup.org/HDF5/; zlib http://www.zlib.net/. ecpint — [what is ecpint?] [ecpint min version]; dkh — [what is dkh?] [dkh min version]. Fortran Compiler. gdma — [what is gdma?] [gdma min version]. Fortran Compiler. PCMSolver — ",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:7744,Availability,avail,available,7744,"til https://github.com/giampaolo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. Boost (September 2016; dropped by v1.1); deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4); MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2; Perl for testing (April 2022; dropped by v1.6). What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing. CTest https://cmake.org/download/; pytest (for installed testing) http://doc.pytest.org/en/latest/; pytest-xdist (for installed testing many tests at once) https://github.com/pytest-dev/pytest-xdist. PSI4 Documentation (available pre-built at psicode.org/psi4manual/master/index.html). Sphinx (3.5+) http://sphinx-doc.org; Perl (for some auto-documentation scripts) https://www.perl.org/; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; See [“message” lines] for advice on obtaining docs dependencies or [conda env spec]; See psi4/.github/workflows/docs.yml for full docs building procedure to follow. Ambit — https://github.com/jturney/ambit; CheMPS2 — [what is CheMPS2?] [CheMPS2 min version]. HDF5 https://support.hdfgroup.org/HDF5/; zlib http://www.zlib.net/. ecpint — [what is ecpint?] [ecpint min version]; dkh — [what is dkh?] [dkh min version]. Fortran Compiler. gdma — [what is gdma?] [gdma min version]. Fortran Compiler. PCMSolver — [what is PCMSolver?]. Fortran Compiler; zlib http://www.zlib.net/. simint — [what is simint?] [simint min version]. Additionally, there are runtime-loaded capabilities:. PylibE",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:10110,Availability,avail,available,10110," https://github.com/dftd4/dftd4; mrcc — [what is MPCC?]; v2rdm_casscf — [what is v2rdm_casscf?]; sns-mp2 — https://github.com/DEShawResearch/sns-mp2/commits/master; resp — https://github.com/cdsgroup/resp; gpu_dfcc — https://github.com/edeprince3/gpu_dfcc/commits/master; OpenFermion-Psi4 — https://github.com/quantumlib/OpenFermion; cppe — https://github.com/maxscheurer/cppe; mp2d — https://github.com/Chandemonium/MP2D; FockCI — https://github.com/shannonhouck/psi4fockci; cct3 — https://github.com/piecuch-group/cct3; adcc — https://github.com/adc-connect/adcc; BrianQC — https://www.brianqc.com/; i-PI — http://ipi-code.org/; psixas — https://github.com/Masterluke87/psixas; MDI — https://github.com/MolSSI-MDI/MDI_Library; ddx — https://github.com/ddsolvation/ddx. How to use conda to get a Psi4 development environment¶; PSI4 has a lot of dependencies, some of which are complicated; to build. Fortunately, conda can supply them all. A conda; package psi4-dev is available to gather the dependencies; and build tools needed to compiler PSI4 from source. Go to; psicode.org/installs/latest, select “source” and “nightly build” along; with Linux/Mac and a Python version. Follow its instructions to create; a conda environment that has a script psi4-path-advisor. Running; psi4-path-advisor --help shows more options. Running the script; without arguments gives a cmake command that supplies paths to dependency; conda packages to CMake’s cache. You can add further cmake options to; this command when you execute it. Once the cmake command has built your; objdir, you can build PSI4. Remember to activate this; conda environment during PSI4 running or development. There are a; few extra options to psi4-path-advisor to set up using conda’s GNU; compilers (on Linux), conda’s Clang compilers (on Mac; less reliably),; or your own Intel compilers backed by conda’s GNU compilers (on Linux).; >>> git clone https://github.com/psi4/psi4.git && cd psi4; >>> conda create -n p4dev psi4-dev python=3.",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:10952,Availability,reliab,reliably,10952,"conda to get a Psi4 development environment¶; PSI4 has a lot of dependencies, some of which are complicated; to build. Fortunately, conda can supply them all. A conda; package psi4-dev is available to gather the dependencies; and build tools needed to compiler PSI4 from source. Go to; psicode.org/installs/latest, select “source” and “nightly build” along; with Linux/Mac and a Python version. Follow its instructions to create; a conda environment that has a script psi4-path-advisor. Running; psi4-path-advisor --help shows more options. Running the script; without arguments gives a cmake command that supplies paths to dependency; conda packages to CMake’s cache. You can add further cmake options to; this command when you execute it. Once the cmake command has built your; objdir, you can build PSI4. Remember to activate this; conda environment during PSI4 running or development. There are a; few extra options to psi4-path-advisor to set up using conda’s GNU; compilers (on Linux), conda’s Clang compilers (on Mac; less reliably),; or your own Intel compilers backed by conda’s GNU compilers (on Linux).; >>> git clone https://github.com/psi4/psi4.git && cd psi4; >>> conda create -n p4dev psi4-dev python=3.8 -c psi4/label/dev; >>> conda activate p4dev; >>> `psi4-path-advisor --gcc`; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`. How to configure code to use high angular momentum basis sets¶; The Libint integral code handles; arbitrary order angular momentum (AM), but compiling that is; prohibitive. The build process for Libint2 takes longer than; for Libint1, so it’s recommended to use the conda packages. The AM controlling keyword MAX_AM_ERI; has definition changed a little from Libint1. It is used to ensure; that conventional energies can use at least MAX_AM_ERI zeta. See; psi4//external/upstream/libint2/CMakeLists.txt for a fuller; discussion of AM capabilities. Unless BUILD_Libint2_GENERATOR; is set to ON, an internal build of Libint2 will download a; pregenerated ",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:11898,Availability,down,download,11898,"GNU; compilers (on Linux), conda’s Clang compilers (on Mac; less reliably),; or your own Intel compilers backed by conda’s GNU compilers (on Linux).; >>> git clone https://github.com/psi4/psi4.git && cd psi4; >>> conda create -n p4dev psi4-dev python=3.8 -c psi4/label/dev; >>> conda activate p4dev; >>> `psi4-path-advisor --gcc`; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`. How to configure code to use high angular momentum basis sets¶; The Libint integral code handles; arbitrary order angular momentum (AM), but compiling that is; prohibitive. The build process for Libint2 takes longer than; for Libint1, so it’s recommended to use the conda packages. The AM controlling keyword MAX_AM_ERI; has definition changed a little from Libint1. It is used to ensure; that conventional energies can use at least MAX_AM_ERI zeta. See; psi4//external/upstream/libint2/CMakeLists.txt for a fuller; discussion of AM capabilities. Unless BUILD_Libint2_GENERATOR; is set to ON, an internal build of Libint2 will download a; pregenerated tarball of at least MAX_AM_ERI AM. If you; want to build completely from generator source, turn on the keyword,; but parts can only run in serial and parts benefit from parallel, so; it’s not recommended. All the AM generation settings would need to be; edited in the above CMakeLists.txt rather than passing them into; the PSI4 build directly. Build with Higher Angular Momentum; >>> cmake -DMAX_AM_ERI=6. Relevant CMake Options:; MAX_AM_ERI=N # The maximum angular momentum level (1=p, 2=d, 3=f,; # etc.) for the libint integrals and derivative; # integrals. A value of N implies a maximum first; # derivative of N-1, and maximum second derivative of; # N-2, so for an atom such as Neon, the default 5 gets; # you conventional cc-pV5Z for energies, cc-pVQZ for; # gradients, cc-pVTZ for frequencies and density-fitted; # cc-pVQZ for energies, cc-pVTZ for gradients, cc-pVDZ; # for frequencies. [default: 5]. Note that since PSI4 1.1, it is possible to build Libi",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:13943,Availability,avail,available,13943," libint conda package), then have; any/all PSI4 builds detect that installation at compile-time.; To switch a finished build to a larger Libint, enter <objdir>,; remove the result of make install (if ever invoked), remove; external/upstream/libint/. If earlier Libint was built; internally (as opposed to detecting an external installation),; remove stage/include/libint/, stage/share/cmake/Libint/,; stage/lib/libint2.so.2. Edit MAX_AM_ERI; value in CMakeCache.txt. Reinvoke make and check the number; beside Found Libint in the CMake output.; Note that the same keyword MAX_AM_ERI controls Libint and simint. simint; can’t compile above AM7, so you’ll have to turn off simint to get an; internal compile of AM>=8 Libint. The keyword is only a lower bound for; detection, so you can set it at 7, have both Libint and simint enabled,; and point CMake toward a pre-built Libint AM8 just fine. How to configure Libint for building Psi4. How to get high angular momentum integrals from conda¶; Libint2 conda packages are available from conda for Linux, Mac, and Windows.; The Linux package has base MAX_AM_ERI=7 and can run 7z energies; and gradients conventional, 6z energies and gradients density-fitted,; and qz Hessians both conventional and density fitted.; The Mac and Windows packages have base MAX_AM_ERI=5 and can run; 5z energies, qz gradients, and tz Hessians, both conventional and; density-fitted.; Details about angular momentum settings are available here; psi4/external/upstream/libint2/CMakeLists.txt; . How to see what build configuration options are available¶; CMake doesn’t provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:; cmake_policy(SET CMP0167 OLD); endif (); # 3.15: useable FindPython with NumPy component and LOCATION; # 3.8: CXX_STANDARD recognizes C++17; # 3.3: EP_add(DEPENDS interfacelib, CheckFortranCompilerFlag; # 3.2: continue(); # ",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:14378,Availability,avail,available,14378,"he.txt. Reinvoke make and check the number; beside Found Libint in the CMake output.; Note that the same keyword MAX_AM_ERI controls Libint and simint. simint; can’t compile above AM7, so you’ll have to turn off simint to get an; internal compile of AM>=8 Libint. The keyword is only a lower bound for; detection, so you can set it at 7, have both Libint and simint enabled,; and point CMake toward a pre-built Libint AM8 just fine. How to configure Libint for building Psi4. How to get high angular momentum integrals from conda¶; Libint2 conda packages are available from conda for Linux, Mac, and Windows.; The Linux package has base MAX_AM_ERI=7 and can run 7z energies; and gradients conventional, 6z energies and gradients density-fitted,; and qz Hessians both conventional and density fitted.; The Mac and Windows packages have base MAX_AM_ERI=5 and can run; 5z energies, qz gradients, and tz Hessians, both conventional and; density-fitted.; Details about angular momentum settings are available here; psi4/external/upstream/libint2/CMakeLists.txt; . How to see what build configuration options are available¶; CMake doesn’t provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:; cmake_policy(SET CMP0167 OLD); endif (); # 3.15: useable FindPython with NumPy component and LOCATION; # 3.8: CXX_STANDARD recognizes C++17; # 3.3: EP_add(DEPENDS interfacelib, CheckFortranCompilerFlag; # 3.2: continue(); # 3.1: CMAKE_CXX_STANDARD, BUILD_ALWAYS. set(CMAKE_BUILD_TYPE ""Release"" CACHE STRING ""Choose the type of build."") # foil Ninja Debug on Windows. project(psi4; LANGUAGES C CXX); set(psi4_URL ""http://www.psicode.org/""); set(psi4_EMAIL ""psi4aiqc+cmake@gmail.com""); set(psi4_LICENSE ""GNU Lesser General Public License, version 3 (LGPL-3.0)""); set(psi4_DESCRIPTION ""Open-Source Quantum Chemistry""). list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake). ",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:14491,Availability,avail,available,14491,". simint; can’t compile above AM7, so you’ll have to turn off simint to get an; internal compile of AM>=8 Libint. The keyword is only a lower bound for; detection, so you can set it at 7, have both Libint and simint enabled,; and point CMake toward a pre-built Libint AM8 just fine. How to configure Libint for building Psi4. How to get high angular momentum integrals from conda¶; Libint2 conda packages are available from conda for Linux, Mac, and Windows.; The Linux package has base MAX_AM_ERI=7 and can run 7z energies; and gradients conventional, 6z energies and gradients density-fitted,; and qz Hessians both conventional and density fitted.; The Mac and Windows packages have base MAX_AM_ERI=5 and can run; 5z energies, qz gradients, and tz Hessians, both conventional and; density-fitted.; Details about angular momentum settings are available here; psi4/external/upstream/libint2/CMakeLists.txt; . How to see what build configuration options are available¶; CMake doesn’t provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:; cmake_policy(SET CMP0167 OLD); endif (); # 3.15: useable FindPython with NumPy component and LOCATION; # 3.8: CXX_STANDARD recognizes C++17; # 3.3: EP_add(DEPENDS interfacelib, CheckFortranCompilerFlag; # 3.2: continue(); # 3.1: CMAKE_CXX_STANDARD, BUILD_ALWAYS. set(CMAKE_BUILD_TYPE ""Release"" CACHE STRING ""Choose the type of build."") # foil Ninja Debug on Windows. project(psi4; LANGUAGES C CXX); set(psi4_URL ""http://www.psicode.org/""); set(psi4_EMAIL ""psi4aiqc+cmake@gmail.com""); set(psi4_LICENSE ""GNU Lesser General Public License, version 3 (LGPL-3.0)""); set(psi4_DESCRIPTION ""Open-Source Quantum Chemistry""). list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake). message(STATUS ""Building using CMake ${CMAKE_VERSION} Generator ${CMAKE_GENERATOR}""). ################ Options: Overview and Not Otherwise Mentioned ##",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:30632,Availability,echo,echo,30632,"bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH={prefix}/lib:$PYTHONPATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. How to configure paths for PsiAPI. Run PSI4.; >>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable or Python module from conda installation¶; The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing PSI4 into a Anaconda,; Miniconda, or Psi4conda distribution, condadist =; ana|mini|psi4conda. To see the message again after initial installation,; with the conda environment active, run .psi4-post-link.sh.; If which conda python psi4 points to your; condadist and echo $PSI_SCRATCH is set, skip ahead to the; “Run PSI4"" commands below. Otherwise, issue the following; commands directly in your terminal or place them into your “rc” file and; open a new terminal.; If you installed the Psi4conda distribution or installed the PSI4; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your PATH, as prompted, then; which psi4 likely yields condadist/bin/psi4 and the PATH; setting lines below are redundant.; If you installed into a conda environment p4env and performed; conda activate p4env, then which psi4 likely yields; condadist/envs/p4env/bin/psi4 and the PATH setting lines; below are redundant.; # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:31111,Availability,redundant,redundant,31111,"rgy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable or Python module from conda installation¶; The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing PSI4 into a Anaconda,; Miniconda, or Psi4conda distribution, condadist =; ana|mini|psi4conda. To see the message again after initial installation,; with the conda environment active, run .psi4-post-link.sh.; If which conda python psi4 points to your; condadist and echo $PSI_SCRATCH is set, skip ahead to the; “Run PSI4"" commands below. Otherwise, issue the following; commands directly in your terminal or place them into your “rc” file and; open a new terminal.; If you installed the Psi4conda distribution or installed the PSI4; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your PATH, as prompted, then; which psi4 likely yields condadist/bin/psi4 and the PATH; setting lines below are redundant.; If you installed into a conda environment p4env and performed; conda activate p4env, then which psi4 likely yields; condadist/envs/p4env/bin/psi4 and the PATH setting lines; below are redundant.; # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run PSI4 as executable.; >>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.......................................................",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:31307,Availability,redundant,redundant,31307,"odule from conda installation¶; The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing PSI4 into a Anaconda,; Miniconda, or Psi4conda distribution, condadist =; ana|mini|psi4conda. To see the message again after initial installation,; with the conda environment active, run .psi4-post-link.sh.; If which conda python psi4 points to your; condadist and echo $PSI_SCRATCH is set, skip ahead to the; “Run PSI4"" commands below. Otherwise, issue the following; commands directly in your terminal or place them into your “rc” file and; open a new terminal.; If you installed the Psi4conda distribution or installed the PSI4; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your PATH, as prompted, then; which psi4 likely yields condadist/bin/psi4 and the PATH; setting lines below are redundant.; If you installed into a conda environment p4env and performed; conda activate p4env, then which psi4 likely yields; condadist/envs/p4env/bin/psi4 and the PATH setting lines; below are redundant.; # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run PSI4 as executable.; >>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. or Run PSI4 as Python module.; >>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sampl",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:32706,Availability,avail,available,32706,"/existing/writable/local-not-network/directory/for/scratch/files. Run PSI4 as executable.; >>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. or Run PSI4 as Python module.; >>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable after compilation using driver from source¶; When developing python driver code, it can be annoying to keep makeing to test the code. PSI4 can be run “inplace” through the; following procedure. To be clear, this is running compiled C++ from the; build directory and python from the source directory. This is an expert; option for development, and not all functionality will be available.; >>> cd {objdir}; >>> ln -s {top-level-psi4-dir}/{objdir}/stage/lib/psi4/core.cpython-{ext_will_vary}.so ../psi4/core.cpython-{ext_will_vary}.so; >>> python ../psi4/run_psi4.py --inplace input.dat. Why not to set PSIDATADIR¶; PSIDATADIR is an environment variable containing the location of the; text resource parts of the PSI4 codebase (e.g., basis sets,; databases, EFP fragments). It is for developer use only. In PSI4 1.1; and beyond, the program always knows where its resources are, and the; only reason to set this variable is to point to another location.; Previously in PSI4 1.0 and previous, only installed executables knew; the location, so it always needed to be explicitly set when run from the; compilation directory.; At runtime; >>> psi4 -p {top-level-psi4-dir}/psi4/share/psi4. Or in the shell; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIDATADIR {top-level-psi4-dir}/psi4/share/psi4. # sh, bash: add to shell or ~/.bashrc (Lin",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:37901,Availability,echo,echo,37901,"API Classic compilers work fine, as do OneAPI Clang icpx compilers. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS. How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew¶; The easiest compiler to obtain is clang which is a drop-in replacement; for gcc and g++. Just install XCode. Some old versions; of XCode can’t handle some of the advanced C++ language features, but this; is a software not hardware limitation. Checks for version compliance; performed at build-time. Note that this “AppleClang” will not be compatible; with conda Mac packages using C++11, nor can it make use of OpenMP directives.; Another route to obtaining clang compilers without the above limitations; is through conda.; # Install Clang 4.0.1 into a non-primary conda environment; >>> conda create -n clang401 clangxx_osx-64 clang_osx-64 llvm-openmp intel-openmp. # To Build, activate environment (prepends PATH and defines environment variables CLANG, CLANGXX, HOST, etc):; >>> conda activate clang401; >>> echo ${CLANGXX}; /path/to/miniconda/envs/clang401/bin/x86_64-apple-darwin13.4.0-clang++; >>> echo ${HOST}; x86_64-apple-darwin13.4.0. # build with Clang; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=${CLANG} \; -DCMAKE_CXX_COMPILER=${CLANGXX} \; -DCMAKE_CXX_FLAGS=""-stdlib=libc++"" \; -DOpenMP_CXX_FLAG=""-fopenmp=libiomp5"". # build with Intel; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-clang-name=${CLANG}"" \; -DCMAKE_CXX_FLAGS=""-clang-name=${CLANG} -clangxx-name=${CLANGXX} -stdlib=libc++ -I${CONDA_PREFIX}/include/c++/v1"". # Configure and build. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS¶; # See if GCC too old (in this case, yes); >>> gcc --version; gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-4). Even if you’re not using GCC as a compiler, your Intel compiler seeks; gcc to generate code compatible with your current GCC version. If your; GCC is too old (like above), you can up",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:37994,Availability,echo,echo,37994,"e OS. How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew¶; The easiest compiler to obtain is clang which is a drop-in replacement; for gcc and g++. Just install XCode. Some old versions; of XCode can’t handle some of the advanced C++ language features, but this; is a software not hardware limitation. Checks for version compliance; performed at build-time. Note that this “AppleClang” will not be compatible; with conda Mac packages using C++11, nor can it make use of OpenMP directives.; Another route to obtaining clang compilers without the above limitations; is through conda.; # Install Clang 4.0.1 into a non-primary conda environment; >>> conda create -n clang401 clangxx_osx-64 clang_osx-64 llvm-openmp intel-openmp. # To Build, activate environment (prepends PATH and defines environment variables CLANG, CLANGXX, HOST, etc):; >>> conda activate clang401; >>> echo ${CLANGXX}; /path/to/miniconda/envs/clang401/bin/x86_64-apple-darwin13.4.0-clang++; >>> echo ${HOST}; x86_64-apple-darwin13.4.0. # build with Clang; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=${CLANG} \; -DCMAKE_CXX_COMPILER=${CLANGXX} \; -DCMAKE_CXX_FLAGS=""-stdlib=libc++"" \; -DOpenMP_CXX_FLAG=""-fopenmp=libiomp5"". # build with Intel; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-clang-name=${CLANG}"" \; -DCMAKE_CXX_FLAGS=""-clang-name=${CLANG} -clangxx-name=${CLANGXX} -stdlib=libc++ -I${CONDA_PREFIX}/include/c++/v1"". # Configure and build. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS¶; # See if GCC too old (in this case, yes); >>> gcc --version; gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-4). Even if you’re not using GCC as a compiler, your Intel compiler seeks; gcc to generate code compatible with your current GCC version. If your; GCC is too old (like above), you can update your system GCC through your; package manager or install an acceptable version elsewhere on your; system. The latter route, tested on",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:39302,Availability,echo,echo,39302,"_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-clang-name=${CLANG}"" \; -DCMAKE_CXX_FLAGS=""-clang-name=${CLANG} -clangxx-name=${CLANGXX} -stdlib=libc++ -I${CONDA_PREFIX}/include/c++/v1"". # Configure and build. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS¶; # See if GCC too old (in this case, yes); >>> gcc --version; gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-4). Even if you’re not using GCC as a compiler, your Intel compiler seeks; gcc to generate code compatible with your current GCC version. If your; GCC is too old (like above), you can update your system GCC through your; package manager or install an acceptable version elsewhere on your; system. The latter route, tested on Linux with Intel compilers, is below.; # Install GCC 7.2 into a non-primary conda environment; >>> conda create -n gcc72 gxx_linux-64 gcc_linux-64. # To Build, either:. # (A) activate environment (prepends PATH and defines environment variables CC, CXX, HOST, etc); >>> conda activate gcc72; >>> echo ${CXX}; /path/to/miniconda/envs/gcc72/bin/x86_64-conda_cos6-linux-gnu-g++; >>> echo ${HOST}; x86_64-conda_cos6-linux-gnu. # build with GNU; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=${CC} \; -DCMAKE_CXX_COMPILER=${CXX} \. # build with Intel; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${HOST}-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${HOST}-"" \. # (B) tell CMake to tell the compiler which GCC to use; >>> GCC7=/path/to/miniconda/envs/gcc72; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; ...; # if Fortran active ...; -DCMAKE_Fortran_COMPILER=ifort \; -DCMAKE_Fortran_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \. # Configure and build. # To Run:; >>> export LD_LIBRARY_PATH=${GCC7}/lib:$LD_LIBRARY_PATH. How to configure a Psi4",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:39386,Availability,echo,echo,39386,"_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-clang-name=${CLANG}"" \; -DCMAKE_CXX_FLAGS=""-clang-name=${CLANG} -clangxx-name=${CLANGXX} -stdlib=libc++ -I${CONDA_PREFIX}/include/c++/v1"". # Configure and build. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS¶; # See if GCC too old (in this case, yes); >>> gcc --version; gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-4). Even if you’re not using GCC as a compiler, your Intel compiler seeks; gcc to generate code compatible with your current GCC version. If your; GCC is too old (like above), you can update your system GCC through your; package manager or install an acceptable version elsewhere on your; system. The latter route, tested on Linux with Intel compilers, is below.; # Install GCC 7.2 into a non-primary conda environment; >>> conda create -n gcc72 gxx_linux-64 gcc_linux-64. # To Build, either:. # (A) activate environment (prepends PATH and defines environment variables CC, CXX, HOST, etc); >>> conda activate gcc72; >>> echo ${CXX}; /path/to/miniconda/envs/gcc72/bin/x86_64-conda_cos6-linux-gnu-g++; >>> echo ${HOST}; x86_64-conda_cos6-linux-gnu. # build with GNU; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=${CC} \; -DCMAKE_CXX_COMPILER=${CXX} \. # build with Intel; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${HOST}-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${HOST}-"" \. # (B) tell CMake to tell the compiler which GCC to use; >>> GCC7=/path/to/miniconda/envs/gcc72; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; ...; # if Fortran active ...; -DCMAKE_Fortran_COMPILER=ifort \; -DCMAKE_Fortran_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \. # Configure and build. # To Run:; >>> export LD_LIBRARY_PATH=${GCC7}/lib:$LD_LIBRARY_PATH. How to configure a Psi4",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:41868,Availability,down,download,41868,"cies. Role — In PSI4, a Fortran compiler in unneeded for core; features but may be required for add-ons.; Downstream Dependencies. PSI4 (\(\Leftarrow\) optional) Fortran Compiler; dkh, gdma, PCMSolver \(\Leftarrow\) Fortran Compiler. CMake Variables. CMAKE_Fortran_COMPILER — CMake variable to specify name or full path to Fortran compiler.; CMAKE_Fortran_FLAGS — CMake variable to specify any additional custom compiler flags for Fortran source. Examples. Build with detected compiler from PATH. >>> cmake. Build with specific (Intel) compiler from PATH. >>> cmake -DCMAKE_Fortran_COMPILER=ifort. What Fortran compilers are approved¶; On Linux and Mac, the following work nicely. GNU: gfortran; Intel: ifort. Packages to install for specific OS or package managers:. Ubuntu gfortran; conda gfortran_linux-64 or gfortran_osx-64 to get gfortran. How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew¶; Xcode does not provide a Fortran compiler. A way to get one is to download; the gfortran_osx-64 conda package. This provides; gfortran compilers for Mac. The version is 4.8.5, which is quite old,; but the Fortran compiler will work. How to configure BLAS/LAPACK for building Psi4¶; Role and Dependencies. Role — In PSI4, BLAS and LAPACK control much of the speed; and efficiency of the code since computational chemistry is essentially; linear algebra on molecular systems.; Downstream Dependencies — PSI4 \(\Leftarrow\) LAPACK Libraries. CMake Variables. BLAS_TYPE — CMake variable to specify which BLAS libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; LAPACK_TYPE — CMake variable to specify which LAPACK libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; LAPACK_LIBRARIES — CMake variable to specify BLAS/LAPACK libraries explicitly, bypassing math detection. Should be “;”-separated list of full paths.; LAPACK_INCLUDE_DIRS — CMake variable to specify BLAS/LAPACK header location explicitly, bypassing math detection. Only nee",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:43074,Availability,error,error,43074,"Psi4¶; Role and Dependencies. Role — In PSI4, BLAS and LAPACK control much of the speed; and efficiency of the code since computational chemistry is essentially; linear algebra on molecular systems.; Downstream Dependencies — PSI4 \(\Leftarrow\) LAPACK Libraries. CMake Variables. BLAS_TYPE — CMake variable to specify which BLAS libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; LAPACK_TYPE — CMake variable to specify which LAPACK libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; LAPACK_LIBRARIES — CMake variable to specify BLAS/LAPACK libraries explicitly, bypassing math detection. Should be “;”-separated list of full paths.; LAPACK_INCLUDE_DIRS — CMake variable to specify BLAS/LAPACK header location explicitly, bypassing math detection. Only needed for MKL.; OpenMP_LIBRARY_DIRS — CMake variable to specify OpenMP library (iomp5/gomp/omp) directories explicitly. Should be “;”-separated list of full directory paths. Usually the solution to error Could NOT find MathOpenMP. MKL_ROOT¶; Environment variable set by Intel compilervars scripts. Sufficient to trigger math detection of MKL at this location. MATH_ROOT¶; Environment variable to specify root directory in which BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib64/libblas.so and ${MATH_ROOT}/lib64/liblapack.so). Examples. Build with any LAPACK in standard location. >>> cmake. Build with native Accelerate LAPACK on Mac (MKL not also present).; If NumPy not using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. >>> cmake. Build with native Accelerate LAPACK on Mac (MKL also present); If NumPy not using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. >>> cmake -DBLAS_TYPE=SYSTEM_NATIVE -DLAPACK_TYPE=SYSTEM_NATIVE. Build with Intel MKL. >>> source /path/to/intel/vers/linux/mkl/bin/mklvars.sh intel64 # adjust sh/csh and arch as needed; >>> cmake. >>> MATH_ROOT=/path/to/intel/vers/linux/mkl/ cmake. Build with Intel MKL ",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:45437,Availability,avail,available,45437,"el64/libmkl_rt.so"" -DLAPACK_INCLUDE_DIRS=""/path/to/mkl-h-include/"". Build with explicit non-MKL LAPACK. >>> cmake -DLAPACK_LIBRARIES=""/path/to/lib/liblapack.so;/path/to/lib/libblas.a"". Build with MKL and GCC (iomp5 needed instead of gomp for threading. use OpenMP_LIBRARY_DIRS to hint location.). >>> cmake -DLAPACK_LIBRARIES=/opt/intel/mkl/lib/intel64/libmkl_rt.so -DLAPACK_INCLUDE_DIRS=/opt/intel/mkl/include -DOpenMP_LIBRARY_DIRS=/opt/intel/compiler/lib/intel64/. Notes. Much of PSI4‘s speed and efficiency depends on the corresponding; speed and efficiency of the linked BLAS and LAPACK libraries; (especially the former). Consider the following recommendations:. It is NOT wise to use the stock BLAS library provided with many; Linux distributions like RedHat, as it is usually just the completely; unoptimized netlib distribution. The choice of LAPACK is less; critical, and so the unoptimized netlib distribution is acceptable.; Perhaps the best choice, if available, is Intel’s MKL library,; which includes efficient threaded BLAS and LAPACK (as of PSI4; v1.1, earliest known working version is MKL 2013; as of v1.4,; should use at leat MKL 2019). MKL, which is; freely available through conda, is the only threaded BLAS/LAPACK; distribution fully supported by PSI4.; On Mac, the native Accelerate libraries are very nice and would; be recommended but for the potential conflict between PSI4; BLAS and NumPy BLAS. Unless you’ve a special NumPy, avoid!; The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it at your own risk and after testing your; particular distribution, including tests run multithreaded,; if you intend to run PSI4 so. Use at least 0.2.15, and; pay attention to how it was compiled - unthreaded seems safe,; openmp-threaded is mostly safe, default pthreaded is not safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis.; Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last ",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:45651,Availability,avail,available,45651," needed instead of gomp for threading. use OpenMP_LIBRARY_DIRS to hint location.). >>> cmake -DLAPACK_LIBRARIES=/opt/intel/mkl/lib/intel64/libmkl_rt.so -DLAPACK_INCLUDE_DIRS=/opt/intel/mkl/include -DOpenMP_LIBRARY_DIRS=/opt/intel/compiler/lib/intel64/. Notes. Much of PSI4‘s speed and efficiency depends on the corresponding; speed and efficiency of the linked BLAS and LAPACK libraries; (especially the former). Consider the following recommendations:. It is NOT wise to use the stock BLAS library provided with many; Linux distributions like RedHat, as it is usually just the completely; unoptimized netlib distribution. The choice of LAPACK is less; critical, and so the unoptimized netlib distribution is acceptable.; Perhaps the best choice, if available, is Intel’s MKL library,; which includes efficient threaded BLAS and LAPACK (as of PSI4; v1.1, earliest known working version is MKL 2013; as of v1.4,; should use at leat MKL 2019). MKL, which is; freely available through conda, is the only threaded BLAS/LAPACK; distribution fully supported by PSI4.; On Mac, the native Accelerate libraries are very nice and would; be recommended but for the potential conflict between PSI4; BLAS and NumPy BLAS. Unless you’ve a special NumPy, avoid!; The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it at your own risk and after testing your; particular distribution, including tests run multithreaded,; if you intend to run PSI4 so. Use at least 0.2.15, and; pay attention to how it was compiled - unthreaded seems safe,; openmp-threaded is mostly safe, default pthreaded is not safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis.; Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391.; ACML libraries are known to work with PSI4 v1.1 at ACML 6. Because of how link loaders work, at runtime, the BLAS of PSI4; and the BLAS of NumPy are not independen",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:46765,Availability,error,errors,46765," libraries are very nice and would; be recommended but for the potential conflict between PSI4; BLAS and NumPy BLAS. Unless you’ve a special NumPy, avoid!; The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it at your own risk and after testing your; particular distribution, including tests run multithreaded,; if you intend to run PSI4 so. Use at least 0.2.15, and; pay attention to how it was compiled - unthreaded seems safe,; openmp-threaded is mostly safe, default pthreaded is not safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis.; Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391.; ACML libraries are known to work with PSI4 v1.1 at ACML 6. Because of how link loaders work, at runtime, the BLAS of PSI4; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if PSI4; and NumPy BLAS don’t match down to the library name (that is,; libmkl_rt, libmkl_core.so, libmkl_core.a are not; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for gory discussions.; Choose your NumPy and PSI4 compile conditions to use the same; BLAS distribution.; The BLAS/LAPACK detected for PSI4 are also linked into any; Add-Ons (e.g., libefp) that require them, rather than relying on; those packages’ native math detection.; The separation between BLAS and LAPACK seen in detection printing; and CMake variables is purely formal. In practice, they get run; together and linked as ${LAPACK_LIBRARIES} ${BLAS_LIBRARIES}.; Sometimes the CMake’s library search capabilites falter at SONAMEs; (e.g., libblas.so.3 vs. libblas.so), extensions (static; vs. dynamic), or suffixes (e.g., libacml_mp.so vs.; libacml.so). The developers would be interested in hearing; of such problems to expand the mat",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:46808,Availability,down,down,46808," libraries are very nice and would; be recommended but for the potential conflict between PSI4; BLAS and NumPy BLAS. Unless you’ve a special NumPy, avoid!; The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it at your own risk and after testing your; particular distribution, including tests run multithreaded,; if you intend to run PSI4 so. Use at least 0.2.15, and; pay attention to how it was compiled - unthreaded seems safe,; openmp-threaded is mostly safe, default pthreaded is not safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis.; Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391.; ACML libraries are known to work with PSI4 v1.1 at ACML 6. Because of how link loaders work, at runtime, the BLAS of PSI4; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if PSI4; and NumPy BLAS don’t match down to the library name (that is,; libmkl_rt, libmkl_core.so, libmkl_core.a are not; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for gory discussions.; Choose your NumPy and PSI4 compile conditions to use the same; BLAS distribution.; The BLAS/LAPACK detected for PSI4 are also linked into any; Add-Ons (e.g., libefp) that require them, rather than relying on; those packages’ native math detection.; The separation between BLAS and LAPACK seen in detection printing; and CMake variables is purely formal. In practice, they get run; together and linked as ${LAPACK_LIBRARIES} ${BLAS_LIBRARIES}.; Sometimes the CMake’s library search capabilites falter at SONAMEs; (e.g., libblas.so.3 vs. libblas.so), extensions (static; vs. dynamic), or suffixes (e.g., libacml_mp.so vs.; libacml.so). The developers would be interested in hearing; of such problems to expand the mat",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:50192,Availability,error,error,50192,"ecification to root directory ${PFXC}. >>> cmake -DPython_EXECUTABLE=""${PFXC}/bin/python"" \; -DPython_LIBRARY=""${PFXC}/lib/libpython3.9.so"" \; -DPython_INCLUDE_DIR=""${PFXC}/include/python3.9"". What Python is Psi4 running¶; The Python detected at build-time is embedded into the PSI4; executable. That is, the top line of bin/psi4 is something like; #!/path/to/miniconda/envs/p4deps/bin/python3.5, and that’s the Python; through which PSI4 is running, rather than the Python of which python.; To use a different Python with PSI4 in the short term, just; path/to/desired/python psi4 on the command line to override the; shebang line. To use a different Python with PSI4 in the long term,; edit the shebang line.; If you’re using PSI4 as a Python module, then PSI4 is running; the Python of which python. How to fix “undefined symbol: _Py_FalseStruct”¶; You’re probably loading a Py3-compiled Psi4 in Py2. Switch interpreters; and re-run. A python of proper Py2 or Py3-ness is baked into the PSI4; “executable”, so you’ll see this error only for Psi4 as Python module. How to use gdb and lldb with Psi4¶; Debugging PSI4 has gotten a little confusing now that it’s running through Python. Here’s the syntax; >>> cd {objdir}; >>> lldb -- python stage/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (lldb) run. >>> cd {objdir}; >>> gdb --args python stage/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (gdb) run. How to see the actual compiling commands (or errors) with cmake¶; CMake by default hides a lot of useful debugging information to make the; compilation cleaner. Issue make VERBOSE=1 to display the full; compilation commands and errors. How to highlight git merge conflicts in vi¶; Edit your ~/.vimrc file to include the lines below. Hitting the F7; key will toggle highlighting of git’s conflict markers.; >>> cat ~/.vimrc; set hlsearch; map <F7> :/\(<<<<<<<\\|=======\\|>>>>>>>\)<CR>. How to handle “runtime library may be hidden” when building with Anaconda Python¶; When building against",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:50619,Availability,error,errors,50619,".; To use a different Python with PSI4 in the short term, just; path/to/desired/python psi4 on the command line to override the; shebang line. To use a different Python with PSI4 in the long term,; edit the shebang line.; If you’re using PSI4 as a Python module, then PSI4 is running; the Python of which python. How to fix “undefined symbol: _Py_FalseStruct”¶; You’re probably loading a Py3-compiled Psi4 in Py2. Switch interpreters; and re-run. A python of proper Py2 or Py3-ness is baked into the PSI4; “executable”, so you’ll see this error only for Psi4 as Python module. How to use gdb and lldb with Psi4¶; Debugging PSI4 has gotten a little confusing now that it’s running through Python. Here’s the syntax; >>> cd {objdir}; >>> lldb -- python stage/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (lldb) run. >>> cd {objdir}; >>> gdb --args python stage/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (gdb) run. How to see the actual compiling commands (or errors) with cmake¶; CMake by default hides a lot of useful debugging information to make the; compilation cleaner. Issue make VERBOSE=1 to display the full; compilation commands and errors. How to highlight git merge conflicts in vi¶; Edit your ~/.vimrc file to include the lines below. Hitting the F7; key will toggle highlighting of git’s conflict markers.; >>> cat ~/.vimrc; set hlsearch; map <F7> :/\(<<<<<<<\\|=======\\|>>>>>>>\)<CR>. How to handle “runtime library may be hidden” when building with Anaconda Python¶; When building against Ana/Miniconda python (e.g., cmake; -DPython_EXECUTABLE=/path/to/conda/bin/python), the warning below often; appears. It is harmless, proceed.; CMake Warning at src/bin/psi4/CMakeLists.txt:58 (add_executable):; Cannot generate a safe runtime search path for target psi4 because files in; some directories may conflict with libraries in implicit directories:. runtime library [libm.so.6] in /usr/lib64 may be hidden by files in:; /theoryfs2/common/software/anaconda/lib. Some of these librar",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:50802,Availability,error,errors,50802,"rride the; shebang line. To use a different Python with PSI4 in the long term,; edit the shebang line.; If you’re using PSI4 as a Python module, then PSI4 is running; the Python of which python. How to fix “undefined symbol: _Py_FalseStruct”¶; You’re probably loading a Py3-compiled Psi4 in Py2. Switch interpreters; and re-run. A python of proper Py2 or Py3-ness is baked into the PSI4; “executable”, so you’ll see this error only for Psi4 as Python module. How to use gdb and lldb with Psi4¶; Debugging PSI4 has gotten a little confusing now that it’s running through Python. Here’s the syntax; >>> cd {objdir}; >>> lldb -- python stage/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (lldb) run. >>> cd {objdir}; >>> gdb --args python stage/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (gdb) run. How to see the actual compiling commands (or errors) with cmake¶; CMake by default hides a lot of useful debugging information to make the; compilation cleaner. Issue make VERBOSE=1 to display the full; compilation commands and errors. How to highlight git merge conflicts in vi¶; Edit your ~/.vimrc file to include the lines below. Hitting the F7; key will toggle highlighting of git’s conflict markers.; >>> cat ~/.vimrc; set hlsearch; map <F7> :/\(<<<<<<<\\|=======\\|>>>>>>>\)<CR>. How to handle “runtime library may be hidden” when building with Anaconda Python¶; When building against Ana/Miniconda python (e.g., cmake; -DPython_EXECUTABLE=/path/to/conda/bin/python), the warning below often; appears. It is harmless, proceed.; CMake Warning at src/bin/psi4/CMakeLists.txt:58 (add_executable):; Cannot generate a safe runtime search path for target psi4 because files in; some directories may conflict with libraries in implicit directories:. runtime library [libm.so.6] in /usr/lib64 may be hidden by files in:; /theoryfs2/common/software/anaconda/lib. Some of these libraries may not be found correctly. How to set up the scratch directory¶; The scratch directory is where Psi4 stores poten",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:55351,Availability,error,errors,55351," Windows): ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 5 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that continuous integration checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. Pytest has similar commands:. Run tests in parallel with -n flag (if Python package pytest-xdist installed). For maximum parallelism: pytest -n auto; Run full test suite: pytest; Run the quick tests: pytest -m quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: pytest -m smoke; Run tests matching by name: pytest -k testname; Run tests excluding those by name: pytest -k ""not testname""; Run tests matching by label: pytest -m testlabel; Run tests excluding those by label: pytest -m ""not testlabel""; Run tests with complicated filtering by name: pytest -k ""cc and not cc4 and not stdsuite""; Run tests and see test names: pytest -v; Run tests and see test names and sometimes more verbose errors: pytest -vv. How to see CTest testing errors¶; >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest req",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:55396,Availability,error,errors,55396,"est -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. Pytest has similar commands:. Run tests in parallel with -n flag (if Python package pytest-xdist installed). For maximum parallelism: pytest -n auto; Run full test suite: pytest; Run the quick tests: pytest -m quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: pytest -m smoke; Run tests matching by name: pytest -k testname; Run tests excluding those by name: pytest -k ""not testname""; Run tests matching by label: pytest -m testlabel; Run tests excluding those by label: pytest -m ""not testlabel""; Run tests with complicated filtering by name: pytest -k ""cc and not cc4 and not stdsuite""; Run tests and see test names: pytest -v; Run tests and see test names and sometimes more verbose errors: pytest -vv. How to see CTest testing errors¶; >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of “smoke” tests is; generally sufficient to verify an installation. From the executable; # smoke tests only in serial; psi4 --tes",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:56261,Availability,avail,available,56261,"c4 and not stdsuite""; Run tests and see test names: pytest -v; Run tests and see test names and sometimes more verbose errors: pytest -vv. How to see CTest testing errors¶; >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of “smoke” tests is; generally sufficient to verify an installation. From the executable; # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.); # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". From pytest directly. If package pytest-xdist is installed, can run in parallel.; # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); ",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:57221,Availability,avail,available,57221,"), a supplementary test suite is available to be; run via pytest. Running a limited number of “smoke” tests is; generally sufficient to verify an installation. From the executable; # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.); # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". From pytest directly. If package pytest-xdist is installed, can run in parallel.; # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run correctly); FAILED in red is bad.; test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_simint PASSED; test_addons.py::test_json PASSED; test_addons.py::test_cfour SKIPPED; test_addons.py::test_v2rdm_casscf PASSED; test_addons.py::test_grimme_3c PASSED; test_addons.py::test_dkh PASSED; test_psi4.py::test_psi4_basic PASSED; test_psi4.py::test_psi4_cc PASSED; test_psi4.py::test_psi4_cas PASSED; test_psi4.py::test_psi4_dfmp2 PASSED; test_psi4.py::test_psi4_sapt PASSED; test_psi4.py::test_psi4_scfproperty PASSED. How to refer to Psi4¶; Ways to refer to PSI4 in text, in order of decreasing goodness:. as Psi4 in Optima regular font with “si” in cus",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:62944,Availability,avail,available,62944,"ssors have been added; so that the executable can show where the module is, and the module; can show where the executable is. > /path/to/psi4/install/bin/psi4 --module; /path/to/psi4/install/lib//; > python -c ""import psi4;print(psi4.executable)""; /path/to/psi4/install/bin/psi4. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building ",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:64292,Availability,error,errors,64292,"after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build; How to use logging in Psi4; How to find the Psi4 module from the executable and vice versa. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Installation and Runtime Configuration; Compiling and Installing from Source. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:64681,Availability,error,errors,64681,"after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build; How to use logging in Psi4; How to find the Psi4 module from the executable and vice versa. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Installation and Runtime Configuration; Compiling and Installing from Source. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:353,Deployability,install,install,353,"﻿. Compiling and Installing from Source. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Installation and Runtime Configuration; Compiling and Installing from Source. Compiling and Installing from Source¶. Warning; As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult psi4/conda/psi4-path-advisor.py; (extensive help menu at conda/psi4-path-advisor.py -h); or psicode downloads; page for the latest guides. This section fulfills the duty of every Linux project to have an INSTALL; file detailing how to build it from source. Few (mostly packagers and; sysadmins) are expected to read this file as it is a broad guide to the; many choices in building this project. For a specific, well-tested,; and performance-tuned build path, see psicode.org/installs/latest; (select “source”). For pre-built binaries again well-tested,; performance-tuned, and available for all common operating systems,; see psicode.org/installs/latest (select “conda”).; To see working builds for Linux, Mac, and Windows, see :src:; [this GHA]. Planning: how to configure Psi4 and invoke CMake¶; PSI4 is built through CMake. An abbreviated build guide can be found; within the source itself .; CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it’s very possible that; from top-level-psi4-dir source directory, you can call cmake -S.; -Bobjdir without any further arguments, and it will invoke cmake,; detect some appropriate defaults, configure the build, create a build; directory objdir, and complete, leaving you to only invoke; make or Ninja in the new build directory.; Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within core; dependencies and add-on dependencies to plan a s",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:419,Deployability,update,updated,419,"﻿. Compiling and Installing from Source. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Installation and Runtime Configuration; Compiling and Installing from Source. Compiling and Installing from Source¶. Warning; As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult psi4/conda/psi4-path-advisor.py; (extensive help menu at conda/psi4-path-advisor.py -h); or psicode downloads; page for the latest guides. This section fulfills the duty of every Linux project to have an INSTALL; file detailing how to build it from source. Few (mostly packagers and; sysadmins) are expected to read this file as it is a broad guide to the; many choices in building this project. For a specific, well-tested,; and performance-tuned build path, see psicode.org/installs/latest; (select “source”). For pre-built binaries again well-tested,; performance-tuned, and available for all common operating systems,; see psicode.org/installs/latest (select “conda”).; To see working builds for Linux, Mac, and Windows, see :src:; [this GHA]. Planning: how to configure Psi4 and invoke CMake¶; PSI4 is built through CMake. An abbreviated build guide can be found; within the source itself .; CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it’s very possible that; from top-level-psi4-dir source directory, you can call cmake -S.; -Bobjdir without any further arguments, and it will invoke cmake,; detect some appropriate defaults, configure the build, create a build; directory objdir, and complete, leaving you to only invoke; make or Ninja in the new build directory.; Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within core; dependencies and add-on dependencies to plan a s",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:948,Deployability,install,installs,948,"﻿. Compiling and Installing from Source. Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Installation and Runtime Configuration; Compiling and Installing from Source. Compiling and Installing from Source¶. Warning; As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult psi4/conda/psi4-path-advisor.py; (extensive help menu at conda/psi4-path-advisor.py -h); or psicode downloads; page for the latest guides. This section fulfills the duty of every Linux project to have an INSTALL; file detailing how to build it from source. Few (mostly packagers and; sysadmins) are expected to read this file as it is a broad guide to the; many choices in building this project. For a specific, well-tested,; and performance-tuned build path, see psicode.org/installs/latest; (select “source”). For pre-built binaries again well-tested,; performance-tuned, and available for all common operating systems,; see psicode.org/installs/latest (select “conda”).; To see working builds for Linux, Mac, and Windows, see :src:; [this GHA]. Planning: how to configure Psi4 and invoke CMake¶; PSI4 is built through CMake. An abbreviated build guide can be found; within the source itself .; CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it’s very possible that; from top-level-psi4-dir source directory, you can call cmake -S.; -Bobjdir without any further arguments, and it will invoke cmake,; detect some appropriate defaults, configure the build, create a build; directory objdir, and complete, leaving you to only invoke; make or Ninja in the new build directory.; Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within core; dependencies and add-on dependencies to plan a s",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:1111,Deployability,install,installs,1111,"ation and Runtime Configuration; Compiling and Installing from Source. Compiling and Installing from Source¶. Warning; As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult psi4/conda/psi4-path-advisor.py; (extensive help menu at conda/psi4-path-advisor.py -h); or psicode downloads; page for the latest guides. This section fulfills the duty of every Linux project to have an INSTALL; file detailing how to build it from source. Few (mostly packagers and; sysadmins) are expected to read this file as it is a broad guide to the; many choices in building this project. For a specific, well-tested,; and performance-tuned build path, see psicode.org/installs/latest; (select “source”). For pre-built binaries again well-tested,; performance-tuned, and available for all common operating systems,; see psicode.org/installs/latest (select “conda”).; To see working builds for Linux, Mac, and Windows, see :src:; [this GHA]. Planning: how to configure Psi4 and invoke CMake¶; PSI4 is built through CMake. An abbreviated build guide can be found; within the source itself .; CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it’s very possible that; from top-level-psi4-dir source directory, you can call cmake -S.; -Bobjdir without any further arguments, and it will invoke cmake,; detect some appropriate defaults, configure the build, create a build; directory objdir, and complete, leaving you to only invoke; make or Ninja in the new build directory.; Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within core; dependencies and add-on dependencies to plan a set of arguments to cmake tailored to; your computer. Proceed to quick build or; detailed build. How to build and install Psi4",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:2114,Deployability,install,install,2114,"ds for Linux, Mac, and Windows, see :src:; [this GHA]. Planning: how to configure Psi4 and invoke CMake¶; PSI4 is built through CMake. An abbreviated build guide can be found; within the source itself .; CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it’s very possible that; from top-level-psi4-dir source directory, you can call cmake -S.; -Bobjdir without any further arguments, and it will invoke cmake,; detect some appropriate defaults, configure the build, create a build; directory objdir, and complete, leaving you to only invoke; make or Ninja in the new build directory.; Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within core; dependencies and add-on dependencies to plan a set of arguments to cmake tailored to; your computer. Proceed to quick build or; detailed build. How to build and install Psi4, the compact version¶; This section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; >>> cd {top-level-psi4-dir}; >>> cmake -S. -Bobjdir [your configuration options]; # make; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install; # -or- general; >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. >>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. Wh",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:2219,Deployability,install,installing,2219,"ds for Linux, Mac, and Windows, see :src:; [this GHA]. Planning: how to configure Psi4 and invoke CMake¶; PSI4 is built through CMake. An abbreviated build guide can be found; within the source itself .; CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it’s very possible that; from top-level-psi4-dir source directory, you can call cmake -S.; -Bobjdir without any further arguments, and it will invoke cmake,; detect some appropriate defaults, configure the build, create a build; directory objdir, and complete, leaving you to only invoke; make or Ninja in the new build directory.; Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within core; dependencies and add-on dependencies to plan a set of arguments to cmake tailored to; your computer. Proceed to quick build or; detailed build. How to build and install Psi4, the compact version¶; This section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; >>> cd {top-level-psi4-dir}; >>> cmake -S. -Bobjdir [your configuration options]; # make; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install; # -or- general; >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. >>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. Wh",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:2322,Deployability,configurat,configuration,2322,"ter to locate libraries, header; files, and executables needed for compilation. So it’s very possible that; from top-level-psi4-dir source directory, you can call cmake -S.; -Bobjdir without any further arguments, and it will invoke cmake,; detect some appropriate defaults, configure the build, create a build; directory objdir, and complete, leaving you to only invoke; make or Ninja in the new build directory.; Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within core; dependencies and add-on dependencies to plan a set of arguments to cmake tailored to; your computer. Proceed to quick build or; detailed build. How to build and install Psi4, the compact version¶; This section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; >>> cd {top-level-psi4-dir}; >>> cmake -S. -Bobjdir [your configuration options]; # make; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install; # -or- general; >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. >>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration op",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:2418,Deployability,install,install,2418,"ter to locate libraries, header; files, and executables needed for compilation. So it’s very possible that; from top-level-psi4-dir source directory, you can call cmake -S.; -Bobjdir without any further arguments, and it will invoke cmake,; detect some appropriate defaults, configure the build, create a build; directory objdir, and complete, leaving you to only invoke; make or Ninja in the new build directory.; Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within core; dependencies and add-on dependencies to plan a set of arguments to cmake tailored to; your computer. Proceed to quick build or; detailed build. How to build and install Psi4, the compact version¶; This section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; >>> cd {top-level-psi4-dir}; >>> cmake -S. -Bobjdir [your configuration options]; # make; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install; # -or- general; >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. >>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration op",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:2477,Deployability,install,install,2477,"ter to locate libraries, header; files, and executables needed for compilation. So it’s very possible that; from top-level-psi4-dir source directory, you can call cmake -S.; -Bobjdir without any further arguments, and it will invoke cmake,; detect some appropriate defaults, configure the build, create a build; directory objdir, and complete, leaving you to only invoke; make or Ninja in the new build directory.; Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within core; dependencies and add-on dependencies to plan a set of arguments to cmake tailored to; your computer. Proceed to quick build or; detailed build. How to build and install Psi4, the compact version¶; This section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; >>> cd {top-level-psi4-dir}; >>> cmake -S. -Bobjdir [your configuration options]; # make; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install; # -or- general; >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. >>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration op",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:2540,Deployability,install,install,2540," source directory, you can call cmake -S.; -Bobjdir without any further arguments, and it will invoke cmake,; detect some appropriate defaults, configure the build, create a build; directory objdir, and complete, leaving you to only invoke; make or Ninja in the new build directory.; Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within core; dependencies and add-on dependencies to plan a set of arguments to cmake tailored to; your computer. Proceed to quick build or; detailed build. How to build and install Psi4, the compact version¶; This section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; >>> cd {top-level-psi4-dir}; >>> cmake -S. -Bobjdir [your configuration options]; # make; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install; # -or- general; >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. >>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. ",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:2918,Deployability,install,installation,2918," links within core; dependencies and add-on dependencies to plan a set of arguments to cmake tailored to; your computer. Proceed to quick build or; detailed build. How to build and install Psi4, the compact version¶; This section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; >>> cd {top-level-psi4-dir}; >>> cmake -S. -Bobjdir [your configuration options]; # make; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install; # -or- general; >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. >>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation). >>> cd {objdir}; >>> cmake --build . -j`getco",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:2967,Deployability,install,install,2967,"dencies to plan a set of arguments to cmake tailored to; your computer. Proceed to quick build or; detailed build. How to build and install Psi4, the compact version¶; This section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; >>> cd {top-level-psi4-dir}; >>> cmake -S. -Bobjdir [your configuration options]; # make; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install; # -or- general; >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. >>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation). >>> cd {objdir}; >>> cmake --build . -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CT",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:3153,Deployability,install,installed,3153," How to build and install Psi4, the compact version¶; This section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; >>> cd {top-level-psi4-dir}; >>> cmake -S. -Bobjdir [your configuration options]; # make; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install; # -or- general; >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. >>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation). >>> cd {objdir}; >>> cmake --build . -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest and Pytest to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see ",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:3345,Deployability,configurat,configuration,3345,"dir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install; # -or- general; >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. >>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation). >>> cd {objdir}; >>> cmake --build . -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest and Pytest to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. 6. Install. If tests pass, install the code.; >>> cmake --install . 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variab",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:3395,Deployability,configurat,configuration,3395,"dir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install; # -or- general; >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. >>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation). >>> cd {objdir}; >>> cmake --build . -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest and Pytest to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. 6. Install. If tests pass, install the code.; >>> cmake --install . 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variab",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:3441,Deployability,configurat,configuration,3441,"rget install -j`getconf _NPROCESSORS_ONLN`. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. >>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation). >>> cd {objdir}; >>> cmake --build . -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest and Pytest to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. 6. Install. If tests pass, install the code.; >>> cmake --install . 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. W",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:3790,Deployability,configurat,configuration,3790,". >>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation). >>> cd {objdir}; >>> cmake --build . -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest and Pytest to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. 6. Install. If tests pass, install the code.; >>> cmake --install . 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux and Mac) can be; satisfied through conda. The links below giv",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:4137,Deployability,install,installation,4137," to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation). >>> cd {objdir}; >>> cmake --build . -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest and Pytest to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. 6. Install. If tests pass, install the code.; >>> cmake --install . 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux and Mac) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it.; See psi4/codedeps.yaml for a structured listing and history of dependencies. C++ and C Compilers (C++20 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux dis",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:4236,Deployability,install,install,4236," What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation). >>> cd {objdir}; >>> cmake --build . -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest and Pytest to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. 6. Install. If tests pass, install the code.; >>> cmake --install . 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux and Mac) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it.; See psi4/codedeps.yaml for a structured listing and history of dependencies. C++ and C Compilers (C++20 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (3.8+) https://www.python.org/; CMake (3.15+) https://cmake.org/download/; NumPy (needed at runtime and buildti",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:4267,Deployability,install,install,4267,"ities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation). >>> cd {objdir}; >>> cmake --build . -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest and Pytest to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. 6. Install. If tests pass, install the code.; >>> cmake --install . 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux and Mac) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it.; See psi4/codedeps.yaml for a structured listing and history of dependencies. C++ and C Compilers (C++20 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (3.8+) https://www.python.org/; CMake (3.15+) https://cmake.org/download/; NumPy (needed at runtime and buildtime) https://numpy.org/; Syst",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:4317,Deployability,install,installation,4317,"or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation). >>> cd {objdir}; >>> cmake --build . -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest and Pytest to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. 6. Install. If tests pass, install the code.; >>> cmake --install . 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux and Mac) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it.; See psi4/codedeps.yaml for a structured listing and history of dependencies. C++ and C Compilers (C++20 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (3.8+) https://www.python.org/; CMake (3.15+) https://cmake.org/download/; NumPy (needed at runtime and buildtime) https://numpy.org/; System utilities: GNU make and GNU install or Ninja, POSIX threads (Pthre",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:5296,Deployability,install,install,5296," run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux and Mac) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it.; See psi4/codedeps.yaml for a structured listing and history of dependencies. C++ and C Compilers (C++20 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (3.8+) https://www.python.org/; CMake (3.15+) https://cmake.org/download/; NumPy (needed at runtime and buildtime) https://numpy.org/; System utilities: GNU make and GNU install or Ninja, POSIX threads (Pthreads) library. The following are also required for PSI4, but if not detected, the; build system will automatically download and build. gau2grid — [what is gau2grid?] [gau2grid min version]; Libint — [what is Libint?] [Libint min version] (Libint2 as of Nov 2020; added by v1.4). Eigen https://eigen.tuxfamily.org/index.php?title=Main_Page; Boost https://www.boost.org/ header-only preprocessor library. Libxc — [what is Libxc?] [Libxc min version]; pybind11 — [what is Pybind11?] [Pybind11 min version]; QCElemental — [what is QCElemental?]; QCEngine — [what is QCEngine?] (March 2019; added by v1.4); optking — [what is optking] (runtime dependency, required at build-time). Additionally, there are runtime-only dependencies:. msgpack-python for MessagePack https://msgpack.org/ (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); NumPy https://numpy.org/; networkx https://github.com/networkx/networkx (transitive dependency of QC",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:7571,Deployability,install,installed,7571,"ecessary by following directions in runtime error message); py-cpuinfo (provides import cpuinfo) https://github.com/workhorsy/py-cpuinfo (transitive dependency of QCEngine); psutil https://github.com/giampaolo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. Boost (September 2016; dropped by v1.1); deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4); MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2; Perl for testing (April 2022; dropped by v1.6). What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing. CTest https://cmake.org/download/; pytest (for installed testing) http://doc.pytest.org/en/latest/; pytest-xdist (for installed testing many tests at once) https://github.com/pytest-dev/pytest-xdist. PSI4 Documentation (available pre-built at psicode.org/psi4manual/master/index.html). Sphinx (3.5+) http://sphinx-doc.org; Perl (for some auto-documentation scripts) https://www.perl.org/; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; See [“message” lines] for advice on obtaining docs dependencies or [conda env spec]; See psi4/.github/workflows/docs.yml for full docs building procedure to follow. Ambit — https://github.com/jturney/ambit; CheMPS2 — [what is CheMPS2?] [CheMPS2 min version]. HDF5 https://support.hdfgroup.org/HDF5/; zlib http://www.zlib.net/. ecpint — [what is ecpint?] [ecpint min version]; dkh — [what is dkh?] [dkh min version]. Fortran Compiler. gdma — [what is gdma?] [gdma min version]. Fortran Compiler. PCMSolver — ",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:7642,Deployability,install,installed,7642,"s import cpuinfo) https://github.com/workhorsy/py-cpuinfo (transitive dependency of QCEngine); psutil https://github.com/giampaolo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. Boost (September 2016; dropped by v1.1); deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4); MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2; Perl for testing (April 2022; dropped by v1.6). What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing. CTest https://cmake.org/download/; pytest (for installed testing) http://doc.pytest.org/en/latest/; pytest-xdist (for installed testing many tests at once) https://github.com/pytest-dev/pytest-xdist. PSI4 Documentation (available pre-built at psicode.org/psi4manual/master/index.html). Sphinx (3.5+) http://sphinx-doc.org; Perl (for some auto-documentation scripts) https://www.perl.org/; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; See [“message” lines] for advice on obtaining docs dependencies or [conda env spec]; See psi4/.github/workflows/docs.yml for full docs building procedure to follow. Ambit — https://github.com/jturney/ambit; CheMPS2 — [what is CheMPS2?] [CheMPS2 min version]. HDF5 https://support.hdfgroup.org/HDF5/; zlib http://www.zlib.net/. ecpint — [what is ecpint?] [ecpint min version]; dkh — [what is dkh?] [dkh min version]. Fortran Compiler. gdma — [what is gdma?] [gdma min version]. Fortran Compiler. PCMSolver — [what is PCMSolver?]. Fortran Compiler; zlib http://www.zlib.net/. simint — [wh",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:10220,Deployability,install,installs,10220,"DEShawResearch/sns-mp2/commits/master; resp — https://github.com/cdsgroup/resp; gpu_dfcc — https://github.com/edeprince3/gpu_dfcc/commits/master; OpenFermion-Psi4 — https://github.com/quantumlib/OpenFermion; cppe — https://github.com/maxscheurer/cppe; mp2d — https://github.com/Chandemonium/MP2D; FockCI — https://github.com/shannonhouck/psi4fockci; cct3 — https://github.com/piecuch-group/cct3; adcc — https://github.com/adc-connect/adcc; BrianQC — https://www.brianqc.com/; i-PI — http://ipi-code.org/; psixas — https://github.com/Masterluke87/psixas; MDI — https://github.com/MolSSI-MDI/MDI_Library; ddx — https://github.com/ddsolvation/ddx. How to use conda to get a Psi4 development environment¶; PSI4 has a lot of dependencies, some of which are complicated; to build. Fortunately, conda can supply them all. A conda; package psi4-dev is available to gather the dependencies; and build tools needed to compiler PSI4 from source. Go to; psicode.org/installs/latest, select “source” and “nightly build” along; with Linux/Mac and a Python version. Follow its instructions to create; a conda environment that has a script psi4-path-advisor. Running; psi4-path-advisor --help shows more options. Running the script; without arguments gives a cmake command that supplies paths to dependency; conda packages to CMake’s cache. You can add further cmake options to; this command when you execute it. Once the cmake command has built your; objdir, you can build PSI4. Remember to activate this; conda environment during PSI4 running or development. There are a; few extra options to psi4-path-advisor to set up using conda’s GNU; compilers (on Linux), conda’s Clang compilers (on Mac; less reliably),; or your own Intel compilers backed by conda’s GNU compilers (on Linux).; >>> git clone https://github.com/psi4/psi4.git && cd psi4; >>> conda create -n p4dev psi4-dev python=3.8 -c psi4/label/dev; >>> conda activate p4dev; >>> `psi4-path-advisor --gcc`; >>> cd objdir && make -j`getconf _NPROCESSORS_ON",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:12909,Deployability,install,install,12909,"east MAX_AM_ERI AM. If you; want to build completely from generator source, turn on the keyword,; but parts can only run in serial and parts benefit from parallel, so; it’s not recommended. All the AM generation settings would need to be; edited in the above CMakeLists.txt rather than passing them into; the PSI4 build directly. Build with Higher Angular Momentum; >>> cmake -DMAX_AM_ERI=6. Relevant CMake Options:; MAX_AM_ERI=N # The maximum angular momentum level (1=p, 2=d, 3=f,; # etc.) for the libint integrals and derivative; # integrals. A value of N implies a maximum first; # derivative of N-1, and maximum second derivative of; # N-2, so for an atom such as Neon, the default 5 gets; # you conventional cc-pV5Z for energies, cc-pVQZ for; # gradients, cc-pVTZ for frequencies and density-fitted; # cc-pVQZ for energies, cc-pVTZ for gradients, cc-pVDZ; # for frequencies. [default: 5]. Note that since PSI4 1.1, it is possible to build Libint; independently (or install just the libint conda package), then have; any/all PSI4 builds detect that installation at compile-time.; To switch a finished build to a larger Libint, enter <objdir>,; remove the result of make install (if ever invoked), remove; external/upstream/libint/. If earlier Libint was built; internally (as opposed to detecting an external installation),; remove stage/include/libint/, stage/share/cmake/Libint/,; stage/lib/libint2.so.2. Edit MAX_AM_ERI; value in CMakeCache.txt. Reinvoke make and check the number; beside Found Libint in the CMake output.; Note that the same keyword MAX_AM_ERI controls Libint and simint. simint; can’t compile above AM7, so you’ll have to turn off simint to get an; internal compile of AM>=8 Libint. The keyword is only a lower bound for; detection, so you can set it at 7, have both Libint and simint enabled,; and point CMake toward a pre-built Libint AM8 just fine. How to configure Libint for building Psi4. How to get high angular momentum integrals from conda¶; Libint2 conda packages ",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:12992,Deployability,install,installation,12992,"east MAX_AM_ERI AM. If you; want to build completely from generator source, turn on the keyword,; but parts can only run in serial and parts benefit from parallel, so; it’s not recommended. All the AM generation settings would need to be; edited in the above CMakeLists.txt rather than passing them into; the PSI4 build directly. Build with Higher Angular Momentum; >>> cmake -DMAX_AM_ERI=6. Relevant CMake Options:; MAX_AM_ERI=N # The maximum angular momentum level (1=p, 2=d, 3=f,; # etc.) for the libint integrals and derivative; # integrals. A value of N implies a maximum first; # derivative of N-1, and maximum second derivative of; # N-2, so for an atom such as Neon, the default 5 gets; # you conventional cc-pV5Z for energies, cc-pVQZ for; # gradients, cc-pVTZ for frequencies and density-fitted; # cc-pVQZ for energies, cc-pVTZ for gradients, cc-pVDZ; # for frequencies. [default: 5]. Note that since PSI4 1.1, it is possible to build Libint; independently (or install just the libint conda package), then have; any/all PSI4 builds detect that installation at compile-time.; To switch a finished build to a larger Libint, enter <objdir>,; remove the result of make install (if ever invoked), remove; external/upstream/libint/. If earlier Libint was built; internally (as opposed to detecting an external installation),; remove stage/include/libint/, stage/share/cmake/Libint/,; stage/lib/libint2.so.2. Edit MAX_AM_ERI; value in CMakeCache.txt. Reinvoke make and check the number; beside Found Libint in the CMake output.; Note that the same keyword MAX_AM_ERI controls Libint and simint. simint; can’t compile above AM7, so you’ll have to turn off simint to get an; internal compile of AM>=8 Libint. The keyword is only a lower bound for; detection, so you can set it at 7, have both Libint and simint enabled,; and point CMake toward a pre-built Libint AM8 just fine. How to configure Libint for building Psi4. How to get high angular momentum integrals from conda¶; Libint2 conda packages ",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:13113,Deployability,install,install,13113,"lel, so; it’s not recommended. All the AM generation settings would need to be; edited in the above CMakeLists.txt rather than passing them into; the PSI4 build directly. Build with Higher Angular Momentum; >>> cmake -DMAX_AM_ERI=6. Relevant CMake Options:; MAX_AM_ERI=N # The maximum angular momentum level (1=p, 2=d, 3=f,; # etc.) for the libint integrals and derivative; # integrals. A value of N implies a maximum first; # derivative of N-1, and maximum second derivative of; # N-2, so for an atom such as Neon, the default 5 gets; # you conventional cc-pV5Z for energies, cc-pVQZ for; # gradients, cc-pVTZ for frequencies and density-fitted; # cc-pVQZ for energies, cc-pVTZ for gradients, cc-pVDZ; # for frequencies. [default: 5]. Note that since PSI4 1.1, it is possible to build Libint; independently (or install just the libint conda package), then have; any/all PSI4 builds detect that installation at compile-time.; To switch a finished build to a larger Libint, enter <objdir>,; remove the result of make install (if ever invoked), remove; external/upstream/libint/. If earlier Libint was built; internally (as opposed to detecting an external installation),; remove stage/include/libint/, stage/share/cmake/Libint/,; stage/lib/libint2.so.2. Edit MAX_AM_ERI; value in CMakeCache.txt. Reinvoke make and check the number; beside Found Libint in the CMake output.; Note that the same keyword MAX_AM_ERI controls Libint and simint. simint; can’t compile above AM7, so you’ll have to turn off simint to get an; internal compile of AM>=8 Libint. The keyword is only a lower bound for; detection, so you can set it at 7, have both Libint and simint enabled,; and point CMake toward a pre-built Libint AM8 just fine. How to configure Libint for building Psi4. How to get high angular momentum integrals from conda¶; Libint2 conda packages are available from conda for Linux, Mac, and Windows.; The Linux package has base MAX_AM_ERI=7 and can run 7z energies; and gradients conventional, 6z energies",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:13252,Deployability,install,installation,13252,"irectly. Build with Higher Angular Momentum; >>> cmake -DMAX_AM_ERI=6. Relevant CMake Options:; MAX_AM_ERI=N # The maximum angular momentum level (1=p, 2=d, 3=f,; # etc.) for the libint integrals and derivative; # integrals. A value of N implies a maximum first; # derivative of N-1, and maximum second derivative of; # N-2, so for an atom such as Neon, the default 5 gets; # you conventional cc-pV5Z for energies, cc-pVQZ for; # gradients, cc-pVTZ for frequencies and density-fitted; # cc-pVQZ for energies, cc-pVTZ for gradients, cc-pVDZ; # for frequencies. [default: 5]. Note that since PSI4 1.1, it is possible to build Libint; independently (or install just the libint conda package), then have; any/all PSI4 builds detect that installation at compile-time.; To switch a finished build to a larger Libint, enter <objdir>,; remove the result of make install (if ever invoked), remove; external/upstream/libint/. If earlier Libint was built; internally (as opposed to detecting an external installation),; remove stage/include/libint/, stage/share/cmake/Libint/,; stage/lib/libint2.so.2. Edit MAX_AM_ERI; value in CMakeCache.txt. Reinvoke make and check the number; beside Found Libint in the CMake output.; Note that the same keyword MAX_AM_ERI controls Libint and simint. simint; can’t compile above AM7, so you’ll have to turn off simint to get an; internal compile of AM>=8 Libint. The keyword is only a lower bound for; detection, so you can set it at 7, have both Libint and simint enabled,; and point CMake toward a pre-built Libint AM8 just fine. How to configure Libint for building Psi4. How to get high angular momentum integrals from conda¶; Libint2 conda packages are available from conda for Linux, Mac, and Windows.; The Linux package has base MAX_AM_ERI=7 and can run 7z energies; and gradients conventional, 6z energies and gradients density-fitted,; and qz Hessians both conventional and density fitted.; The Mac and Windows packages have base MAX_AM_ERI=5 and can run; 5z energi",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:14465,Deployability,configurat,configuration,14465,". simint; can’t compile above AM7, so you’ll have to turn off simint to get an; internal compile of AM>=8 Libint. The keyword is only a lower bound for; detection, so you can set it at 7, have both Libint and simint enabled,; and point CMake toward a pre-built Libint AM8 just fine. How to configure Libint for building Psi4. How to get high angular momentum integrals from conda¶; Libint2 conda packages are available from conda for Linux, Mac, and Windows.; The Linux package has base MAX_AM_ERI=7 and can run 7z energies; and gradients conventional, 6z energies and gradients density-fitted,; and qz Hessians both conventional and density fitted.; The Mac and Windows packages have base MAX_AM_ERI=5 and can run; 5z energies, qz gradients, and tz Hessians, both conventional and; density-fitted.; Details about angular momentum settings are available here; psi4/external/upstream/libint2/CMakeLists.txt; . How to see what build configuration options are available¶; CMake doesn’t provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:; cmake_policy(SET CMP0167 OLD); endif (); # 3.15: useable FindPython with NumPy component and LOCATION; # 3.8: CXX_STANDARD recognizes C++17; # 3.3: EP_add(DEPENDS interfacelib, CheckFortranCompilerFlag; # 3.2: continue(); # 3.1: CMAKE_CXX_STANDARD, BUILD_ALWAYS. set(CMAKE_BUILD_TYPE ""Release"" CACHE STRING ""Choose the type of build."") # foil Ninja Debug on Windows. project(psi4; LANGUAGES C CXX); set(psi4_URL ""http://www.psicode.org/""); set(psi4_EMAIL ""psi4aiqc+cmake@gmail.com""); set(psi4_LICENSE ""GNU Lesser General Public License, version 3 (LGPL-3.0)""); set(psi4_DESCRIPTION ""Open-Source Quantum Chemistry""). list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake). message(STATUS ""Building using CMake ${CMAKE_VERSION} Generator ${CMAKE_GENERATOR}""). ################ Options: Overview and Not Otherwise Mentioned ##",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:15690,Deployability,install,install-,15690,"t is a passable summary:; cmake_policy(SET CMP0167 OLD); endif (); # 3.15: useable FindPython with NumPy component and LOCATION; # 3.8: CXX_STANDARD recognizes C++17; # 3.3: EP_add(DEPENDS interfacelib, CheckFortranCompilerFlag; # 3.2: continue(); # 3.1: CMAKE_CXX_STANDARD, BUILD_ALWAYS. set(CMAKE_BUILD_TYPE ""Release"" CACHE STRING ""Choose the type of build."") # foil Ninja Debug on Windows. project(psi4; LANGUAGES C CXX); set(psi4_URL ""http://www.psicode.org/""); set(psi4_EMAIL ""psi4aiqc+cmake@gmail.com""); set(psi4_LICENSE ""GNU Lesser General Public License, version 3 (LGPL-3.0)""); set(psi4_DESCRIPTION ""Open-Source Quantum Chemistry""). list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake). message(STATUS ""Building using CMake ${CMAKE_VERSION} Generator ${CMAKE_GENERATOR}""). ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++20 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint >=0.10 (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - Eigen (for Libint2; e.g., `conda install eigen`); # - Boost (header-only libs for Libint2; e.g., `co",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:15833,Deployability,install,install,15833,"nd LOCATION; # 3.8: CXX_STANDARD recognizes C++17; # 3.3: EP_add(DEPENDS interfacelib, CheckFortranCompilerFlag; # 3.2: continue(); # 3.1: CMAKE_CXX_STANDARD, BUILD_ALWAYS. set(CMAKE_BUILD_TYPE ""Release"" CACHE STRING ""Choose the type of build."") # foil Ninja Debug on Windows. project(psi4; LANGUAGES C CXX); set(psi4_URL ""http://www.psicode.org/""); set(psi4_EMAIL ""psi4aiqc+cmake@gmail.com""); set(psi4_LICENSE ""GNU Lesser General Public License, version 3 (LGPL-3.0)""); set(psi4_DESCRIPTION ""Open-Source Quantum Chemistry""). list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake). message(STATUS ""Building using CMake ${CMAKE_VERSION} Generator ${CMAKE_GENERATOR}""). ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++20 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint >=0.10 (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - Eigen (for Libint2; e.g., `conda install eigen`); # - Boost (header-only libs for Libint2; e.g., `conda install boost-cpp`); # - SciPy (runtime only; avoidable through keyword setting; e.g., `conda install scipy`); #",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:15967,Deployability,install,install,15967,"""Choose the type of build."") # foil Ninja Debug on Windows. project(psi4; LANGUAGES C CXX); set(psi4_URL ""http://www.psicode.org/""); set(psi4_EMAIL ""psi4aiqc+cmake@gmail.com""); set(psi4_LICENSE ""GNU Lesser General Public License, version 3 (LGPL-3.0)""); set(psi4_DESCRIPTION ""Open-Source Quantum Chemistry""). list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake). message(STATUS ""Building using CMake ${CMAKE_VERSION} Generator ${CMAKE_GENERATOR}""). ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++20 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint >=0.10 (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - Eigen (for Libint2; e.g., `conda install eigen`); # - Boost (header-only libs for Libint2; e.g., `conda install boost-cpp`); # - SciPy (runtime only; avoidable through keyword setting; e.g., `conda install scipy`); # - py-cpuinfo (runtime only; e.g., `conda install py-cpuinfo`); # - psutil (runtime only; e.g., `conda install psutil`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration.",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:16071,Deployability,install,install,16071,"t(psi4_URL ""http://www.psicode.org/""); set(psi4_EMAIL ""psi4aiqc+cmake@gmail.com""); set(psi4_LICENSE ""GNU Lesser General Public License, version 3 (LGPL-3.0)""); set(psi4_DESCRIPTION ""Open-Source Quantum Chemistry""). list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake). message(STATUS ""Building using CMake ${CMAKE_VERSION} Generator ${CMAKE_GENERATOR}""). ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++20 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint >=0.10 (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - Eigen (for Libint2; e.g., `conda install eigen`); # - Boost (header-only libs for Libint2; e.g., `conda install boost-cpp`); # - SciPy (runtime only; avoidable through keyword setting; e.g., `conda install scipy`); # - py-cpuinfo (runtime only; e.g., `conda install py-cpuinfo`); # - psutil (runtime only; e.g., `conda install psutil`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additi",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:16156,Deployability,install,install,16156,"CENSE ""GNU Lesser General Public License, version 3 (LGPL-3.0)""); set(psi4_DESCRIPTION ""Open-Source Quantum Chemistry""). list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake). message(STATUS ""Building using CMake ${CMAKE_VERSION} Generator ${CMAKE_GENERATOR}""). ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++20 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint >=0.10 (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - Eigen (for Libint2; e.g., `conda install eigen`); # - Boost (header-only libs for Libint2; e.g., `conda install boost-cpp`); # - SciPy (runtime only; avoidable through keyword setting; e.g., `conda install scipy`); # - py-cpuinfo (runtime only; e.g., `conda install py-cpuinfo`); # - psutil (runtime only; e.g., `conda install psutil`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ fla",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:16258,Deployability,install,install,16258,"4_DESCRIPTION ""Open-Source Quantum Chemistry""). list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake). message(STATUS ""Building using CMake ${CMAKE_VERSION} Generator ${CMAKE_GENERATOR}""). ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++20 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint >=0.10 (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - Eigen (for Libint2; e.g., `conda install eigen`); # - Boost (header-only libs for Libint2; e.g., `conda install boost-cpp`); # - SciPy (runtime only; avoidable through keyword setting; e.g., `conda install scipy`); # - py-cpuinfo (runtime only; e.g., `conda install py-cpuinfo`); # - psutil (runtime only; e.g., `conda install psutil`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-o",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:16322,Deployability,install,install,16322,"E_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake). message(STATUS ""Building using CMake ${CMAKE_VERSION} Generator ${CMAKE_GENERATOR}""). ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++20 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint >=0.10 (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - Eigen (for Libint2; e.g., `conda install eigen`); # - Boost (header-only libs for Libint2; e.g., `conda install boost-cpp`); # - SciPy (runtime only; avoidable through keyword setting; e.g., `conda install scipy`); # - py-cpuinfo (runtime only; e.g., `conda install py-cpuinfo`); # - psutil (runtime only; e.g., `conda install psutil`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<<",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:16386,Deployability,install,install,16386,"ing using CMake ${CMAKE_VERSION} Generator ${CMAKE_GENERATOR}""). ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++20 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint >=0.10 (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - Eigen (for Libint2; e.g., `conda install eigen`); # - Boost (header-only libs for Libint2; e.g., `conda install boost-cpp`); # - SciPy (runtime only; avoidable through keyword setting; e.g., `conda install scipy`); # - py-cpuinfo (runtime only; e.g., `conda install py-cpuinfo`); # - psutil (runtime only; e.g., `conda install psutil`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - Python_EXECUTABLE ""Pytho",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:16464,Deployability,install,install,16464," Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++20 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint >=0.10 (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - Eigen (for Libint2; e.g., `conda install eigen`); # - Boost (header-only libs for Libint2; e.g., `conda install boost-cpp`); # - SciPy (runtime only; avoidable through keyword setting; e.g., `conda install scipy`); # - py-cpuinfo (runtime only; e.g., `conda install py-cpuinfo`); # - psutil (runtime only; e.g., `conda install psutil`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - Python_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python3.7)""; # - Python_LIBRARY ""Python library ",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:16546,Deployability,install,install,16546," overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++20 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint >=0.10 (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - Eigen (for Libint2; e.g., `conda install eigen`); # - Boost (header-only libs for Libint2; e.g., `conda install boost-cpp`); # - SciPy (runtime only; avoidable through keyword setting; e.g., `conda install scipy`); # - py-cpuinfo (runtime only; e.g., `conda install py-cpuinfo`); # - psutil (runtime only; e.g., `conda install psutil`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - Python_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python3.7)""; # - Python_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python3.7.so)""; # - Py",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:16609,Deployability,install,install,16609," >>> cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++20 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint >=0.10 (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - Eigen (for Libint2; e.g., `conda install eigen`); # - Boost (header-only libs for Libint2; e.g., `conda install boost-cpp`); # - SciPy (runtime only; avoidable through keyword setting; e.g., `conda install scipy`); # - py-cpuinfo (runtime only; e.g., `conda install py-cpuinfo`); # - psutil (runtime only; e.g., `conda install psutil`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - Python_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python3.7)""; # - Python_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python3.7.so)""; # - Python_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:16680,Deployability,install,install,16680,"-- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++20 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint >=0.10 (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - Eigen (for Libint2; e.g., `conda install eigen`); # - Boost (header-only libs for Libint2; e.g., `conda install boost-cpp`); # - SciPy (runtime only; avoidable through keyword setting; e.g., `conda install scipy`); # - py-cpuinfo (runtime only; e.g., `conda install py-cpuinfo`); # - psutil (runtime only; e.g., `conda install psutil`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - Python_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python3.7)""; # - Python_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python3.7.so)""; # - Python_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python3.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:16774,Deployability,install,install,16774,"r; # >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++20 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint >=0.10 (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - Eigen (for Libint2; e.g., `conda install eigen`); # - Boost (header-only libs for Libint2; e.g., `conda install boost-cpp`); # - SciPy (runtime only; avoidable through keyword setting; e.g., `conda install scipy`); # - py-cpuinfo (runtime only; e.g., `conda install py-cpuinfo`); # - psutil (runtime only; e.g., `conda install psutil`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - Python_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python3.7)""; # - Python_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python3.7.so)""; # - Python_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python3.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheM",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:16834,Deployability,install,install,16834,"PROCESSORS_ONLN`. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++20 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint >=0.10 (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - Eigen (for Libint2; e.g., `conda install eigen`); # - Boost (header-only libs for Libint2; e.g., `conda install boost-cpp`); # - SciPy (runtime only; avoidable through keyword setting; e.g., `conda install scipy`); # - py-cpuinfo (runtime only; e.g., `conda install py-cpuinfo`); # - psutil (runtime only; e.g., `conda install psutil`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - Python_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python3.7)""; # - Python_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python3.7.so)""; # - Python_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python3.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheMPS2, dkh, ecpint, libefp, Einsums, gau2grid, gdma, Libint2, P",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:16895,Deployability,install,install,16895,"encies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++20 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint >=0.10 (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - Eigen (for Libint2; e.g., `conda install eigen`); # - Boost (header-only libs for Libint2; e.g., `conda install boost-cpp`); # - SciPy (runtime only; avoidable through keyword setting; e.g., `conda install scipy`); # - py-cpuinfo (runtime only; e.g., `conda install py-cpuinfo`); # - psutil (runtime only; e.g., `conda install psutil`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - Python_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python3.7)""; # - Python_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python3.7.so)""; # - Python_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python3.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheMPS2, dkh, ecpint, libefp, Einsums, gau2grid, gdma, Libint2, PCMSolver, pybind11, pylibefp,; # qcelemental",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:16995,Deployability,configurat,configuration,16995,"`conda install cmake`); # - C++ and C compilers (C++20 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint >=0.10 (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - Eigen (for Libint2; e.g., `conda install eigen`); # - Boost (header-only libs for Libint2; e.g., `conda install boost-cpp`); # - SciPy (runtime only; avoidable through keyword setting; e.g., `conda install scipy`); # - py-cpuinfo (runtime only; e.g., `conda install py-cpuinfo`); # - psutil (runtime only; e.g., `conda install psutil`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - Python_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python3.7)""; # - Python_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python3.7.so)""; # - Python_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python3.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheMPS2, dkh, ecpint, libefp, Einsums, gau2grid, gdma, Libint2, PCMSolver, pybind11, pylibefp,; # qcelemental, qcengine, optking, simint, Libxc, IntegratorXX, gauxc; # - C",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:18084,Deployability,install,install-libint,18084," CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - Python_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python3.7)""; # - Python_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python3.7.so)""; # - Python_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python3.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheMPS2, dkh, ecpint, libefp, Einsums, gau2grid, gdma, Libint2, PCMSolver, pybind11, pylibefp,; # qcelemental, qcengine, optking, simint, Libxc, IntegratorXX, gauxc; # - CMAKE_PREFIX_PATH ""Set to list of root directories to look for externally built add-ons and dependencies; # (e.g., /path/to/install-libint;/path/to/install-gdma where exists /path/to/install-libint/lib/libderiv.a)""; # - ${AddOn}_DIR ""Set to directory containing ${AddOn}Config.cmake file to facilitate detection of external build""; # - CMAKE_DISABLE_FIND_PACKAGE_${AddON} ""Set to ON to force internal build""; # - CMAKE_INSIST_FIND_PACKAGE_${AddON} ""Set to ON to force external detect"". # <<< Detecting BLAS/LAPACK >>>; #; # - ENV(MATH_ROOT) ""Root directory where BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib/libblas.so)""; # - BLAS_TYPE ""Target BLAS distribution for math detection; # (default: search order MKL>FLEXIBLAS>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_TYPE ""Target LAPACK distribution for math detection; # (default: search order MKL>FLEXIBLAS>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_LIBRARIES ""Location of BLAS/LAPACK libraries as "";""-separated list of full paths, bypassing math detection""; # - LAPACK_INCLUDE_DIRS ""Location of BLAS/",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:18108,Deployability,install,install-gdma,18108," CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - Python_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python3.7)""; # - Python_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python3.7.so)""; # - Python_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python3.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheMPS2, dkh, ecpint, libefp, Einsums, gau2grid, gdma, Libint2, PCMSolver, pybind11, pylibefp,; # qcelemental, qcengine, optking, simint, Libxc, IntegratorXX, gauxc; # - CMAKE_PREFIX_PATH ""Set to list of root directories to look for externally built add-ons and dependencies; # (e.g., /path/to/install-libint;/path/to/install-gdma where exists /path/to/install-libint/lib/libderiv.a)""; # - ${AddOn}_DIR ""Set to directory containing ${AddOn}Config.cmake file to facilitate detection of external build""; # - CMAKE_DISABLE_FIND_PACKAGE_${AddON} ""Set to ON to force internal build""; # - CMAKE_INSIST_FIND_PACKAGE_${AddON} ""Set to ON to force external detect"". # <<< Detecting BLAS/LAPACK >>>; #; # - ENV(MATH_ROOT) ""Root directory where BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib/libblas.so)""; # - BLAS_TYPE ""Target BLAS distribution for math detection; # (default: search order MKL>FLEXIBLAS>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_TYPE ""Target LAPACK distribution for math detection; # (default: search order MKL>FLEXIBLAS>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_LIBRARIES ""Location of BLAS/LAPACK libraries as "";""-separated list of full paths, bypassing math detection""; # - LAPACK_INCLUDE_DIRS ""Location of BLAS/",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:18143,Deployability,install,install-libint,18143," CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - Python_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python3.7)""; # - Python_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python3.7.so)""; # - Python_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python3.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheMPS2, dkh, ecpint, libefp, Einsums, gau2grid, gdma, Libint2, PCMSolver, pybind11, pylibefp,; # qcelemental, qcengine, optking, simint, Libxc, IntegratorXX, gauxc; # - CMAKE_PREFIX_PATH ""Set to list of root directories to look for externally built add-ons and dependencies; # (e.g., /path/to/install-libint;/path/to/install-gdma where exists /path/to/install-libint/lib/libderiv.a)""; # - ${AddOn}_DIR ""Set to directory containing ${AddOn}Config.cmake file to facilitate detection of external build""; # - CMAKE_DISABLE_FIND_PACKAGE_${AddON} ""Set to ON to force internal build""; # - CMAKE_INSIST_FIND_PACKAGE_${AddON} ""Set to ON to force external detect"". # <<< Detecting BLAS/LAPACK >>>; #; # - ENV(MATH_ROOT) ""Root directory where BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib/libblas.so)""; # - BLAS_TYPE ""Target BLAS distribution for math detection; # (default: search order MKL>FLEXIBLAS>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_TYPE ""Target LAPACK distribution for math detection; # (default: search order MKL>FLEXIBLAS>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_LIBRARIES ""Location of BLAS/LAPACK libraries as "";""-separated list of full paths, bypassing math detection""; # - LAPACK_INCLUDE_DIRS ""Location of BLAS/",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:19412,Deployability,install,installed,19412,"h order MKL>FLEXIBLAS>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_TYPE ""Target LAPACK distribution for math detection; # (default: search order MKL>FLEXIBLAS>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_LIBRARIES ""Location of BLAS/LAPACK libraries as "";""-separated list of full paths, bypassing math detection""; # - LAPACK_INCLUDE_DIRS ""Location of BLAS/LAPACK headers (only needed for MKL), bypassing math detection""; # - OpenMP_LIBRARY_DIRS ""Location of OpenMP libraries (iomp5/gomp/omp) as "";""-separated list, hinting OpenMP detection"". # <<< Install >>>; #; # - CMAKE_INSTALL_PREFIX ""Location to which Psi4 and internally built add-ons are installed (default: /usr/local/psi4)""; # - CMAKE_INSTALL_BINDIR ""Location within CMAKE_INSTALL_PREFIX to which executables are installed (default: bin)""; # - CMAKE_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_PREFIX to which libraries are installed (default: lib)""; # - CMAKE_INSTALL_DATADIR ""Location within CMAKE_INSTALL_PREFIX to which resources are installed (default: share)""; # - CMAKE_INSTALL_INCLUDEDIR ""Location within CMAKE_INSTALL_PREFIX to which headers are installed (default: include)""; # - PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed (default: /); # Must start with: / . Used to imitate python install: /python3.6/site-packages ."". ############################ Options: Build What? ############################; option(ENABLE_ambit ""Enables the ambit tensor library"" OFF); option(ENABLE_bse ""Enables the basis_set_exchange for requesting basis sets (requires jsonschema, regex; can also be added at runtime)"" OFF); option(ENABLE_CheMPS2 ""Enables CheMPS2 for DMRG (requires HDF5)"" OFF); option(ENABLE_cppe ""Enables CPPE for Polarizable Embedding"" OFF); option(ENABLE_adcc ""Enables adcc for algebraic-diagrammatic construction methods (requires libtensorlight; can also be added at runtime)"" OFF); op",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:19539,Deployability,install,installed,19539,"h order MKL>FLEXIBLAS>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_TYPE ""Target LAPACK distribution for math detection; # (default: search order MKL>FLEXIBLAS>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_LIBRARIES ""Location of BLAS/LAPACK libraries as "";""-separated list of full paths, bypassing math detection""; # - LAPACK_INCLUDE_DIRS ""Location of BLAS/LAPACK headers (only needed for MKL), bypassing math detection""; # - OpenMP_LIBRARY_DIRS ""Location of OpenMP libraries (iomp5/gomp/omp) as "";""-separated list, hinting OpenMP detection"". # <<< Install >>>; #; # - CMAKE_INSTALL_PREFIX ""Location to which Psi4 and internally built add-ons are installed (default: /usr/local/psi4)""; # - CMAKE_INSTALL_BINDIR ""Location within CMAKE_INSTALL_PREFIX to which executables are installed (default: bin)""; # - CMAKE_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_PREFIX to which libraries are installed (default: lib)""; # - CMAKE_INSTALL_DATADIR ""Location within CMAKE_INSTALL_PREFIX to which resources are installed (default: share)""; # - CMAKE_INSTALL_INCLUDEDIR ""Location within CMAKE_INSTALL_PREFIX to which headers are installed (default: include)""; # - PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed (default: /); # Must start with: / . Used to imitate python install: /python3.6/site-packages ."". ############################ Options: Build What? ############################; option(ENABLE_ambit ""Enables the ambit tensor library"" OFF); option(ENABLE_bse ""Enables the basis_set_exchange for requesting basis sets (requires jsonschema, regex; can also be added at runtime)"" OFF); option(ENABLE_CheMPS2 ""Enables CheMPS2 for DMRG (requires HDF5)"" OFF); option(ENABLE_cppe ""Enables CPPE for Polarizable Embedding"" OFF); option(ENABLE_adcc ""Enables adcc for algebraic-diagrammatic construction methods (requires libtensorlight; can also be added at runtime)"" OFF); op",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:19652,Deployability,install,installed,19652,"h order MKL>FLEXIBLAS>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_TYPE ""Target LAPACK distribution for math detection; # (default: search order MKL>FLEXIBLAS>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_LIBRARIES ""Location of BLAS/LAPACK libraries as "";""-separated list of full paths, bypassing math detection""; # - LAPACK_INCLUDE_DIRS ""Location of BLAS/LAPACK headers (only needed for MKL), bypassing math detection""; # - OpenMP_LIBRARY_DIRS ""Location of OpenMP libraries (iomp5/gomp/omp) as "";""-separated list, hinting OpenMP detection"". # <<< Install >>>; #; # - CMAKE_INSTALL_PREFIX ""Location to which Psi4 and internally built add-ons are installed (default: /usr/local/psi4)""; # - CMAKE_INSTALL_BINDIR ""Location within CMAKE_INSTALL_PREFIX to which executables are installed (default: bin)""; # - CMAKE_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_PREFIX to which libraries are installed (default: lib)""; # - CMAKE_INSTALL_DATADIR ""Location within CMAKE_INSTALL_PREFIX to which resources are installed (default: share)""; # - CMAKE_INSTALL_INCLUDEDIR ""Location within CMAKE_INSTALL_PREFIX to which headers are installed (default: include)""; # - PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed (default: /); # Must start with: / . Used to imitate python install: /python3.6/site-packages ."". ############################ Options: Build What? ############################; option(ENABLE_ambit ""Enables the ambit tensor library"" OFF); option(ENABLE_bse ""Enables the basis_set_exchange for requesting basis sets (requires jsonschema, regex; can also be added at runtime)"" OFF); option(ENABLE_CheMPS2 ""Enables CheMPS2 for DMRG (requires HDF5)"" OFF); option(ENABLE_cppe ""Enables CPPE for Polarizable Embedding"" OFF); option(ENABLE_adcc ""Enables adcc for algebraic-diagrammatic construction methods (requires libtensorlight; can also be added at runtime)"" OFF); op",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:19766,Deployability,install,installed,19766,"h order MKL>FLEXIBLAS>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_TYPE ""Target LAPACK distribution for math detection; # (default: search order MKL>FLEXIBLAS>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_LIBRARIES ""Location of BLAS/LAPACK libraries as "";""-separated list of full paths, bypassing math detection""; # - LAPACK_INCLUDE_DIRS ""Location of BLAS/LAPACK headers (only needed for MKL), bypassing math detection""; # - OpenMP_LIBRARY_DIRS ""Location of OpenMP libraries (iomp5/gomp/omp) as "";""-separated list, hinting OpenMP detection"". # <<< Install >>>; #; # - CMAKE_INSTALL_PREFIX ""Location to which Psi4 and internally built add-ons are installed (default: /usr/local/psi4)""; # - CMAKE_INSTALL_BINDIR ""Location within CMAKE_INSTALL_PREFIX to which executables are installed (default: bin)""; # - CMAKE_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_PREFIX to which libraries are installed (default: lib)""; # - CMAKE_INSTALL_DATADIR ""Location within CMAKE_INSTALL_PREFIX to which resources are installed (default: share)""; # - CMAKE_INSTALL_INCLUDEDIR ""Location within CMAKE_INSTALL_PREFIX to which headers are installed (default: include)""; # - PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed (default: /); # Must start with: / . Used to imitate python install: /python3.6/site-packages ."". ############################ Options: Build What? ############################; option(ENABLE_ambit ""Enables the ambit tensor library"" OFF); option(ENABLE_bse ""Enables the basis_set_exchange for requesting basis sets (requires jsonschema, regex; can also be added at runtime)"" OFF); option(ENABLE_CheMPS2 ""Enables CheMPS2 for DMRG (requires HDF5)"" OFF); option(ENABLE_cppe ""Enables CPPE for Polarizable Embedding"" OFF); option(ENABLE_adcc ""Enables adcc for algebraic-diagrammatic construction methods (requires libtensorlight; can also be added at runtime)"" OFF); op",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:19883,Deployability,install,installed,19883,"h order MKL>FLEXIBLAS>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_TYPE ""Target LAPACK distribution for math detection; # (default: search order MKL>FLEXIBLAS>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_LIBRARIES ""Location of BLAS/LAPACK libraries as "";""-separated list of full paths, bypassing math detection""; # - LAPACK_INCLUDE_DIRS ""Location of BLAS/LAPACK headers (only needed for MKL), bypassing math detection""; # - OpenMP_LIBRARY_DIRS ""Location of OpenMP libraries (iomp5/gomp/omp) as "";""-separated list, hinting OpenMP detection"". # <<< Install >>>; #; # - CMAKE_INSTALL_PREFIX ""Location to which Psi4 and internally built add-ons are installed (default: /usr/local/psi4)""; # - CMAKE_INSTALL_BINDIR ""Location within CMAKE_INSTALL_PREFIX to which executables are installed (default: bin)""; # - CMAKE_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_PREFIX to which libraries are installed (default: lib)""; # - CMAKE_INSTALL_DATADIR ""Location within CMAKE_INSTALL_PREFIX to which resources are installed (default: share)""; # - CMAKE_INSTALL_INCLUDEDIR ""Location within CMAKE_INSTALL_PREFIX to which headers are installed (default: include)""; # - PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed (default: /); # Must start with: / . Used to imitate python install: /python3.6/site-packages ."". ############################ Options: Build What? ############################; option(ENABLE_ambit ""Enables the ambit tensor library"" OFF); option(ENABLE_bse ""Enables the basis_set_exchange for requesting basis sets (requires jsonschema, regex; can also be added at runtime)"" OFF); option(ENABLE_CheMPS2 ""Enables CheMPS2 for DMRG (requires HDF5)"" OFF); option(ENABLE_cppe ""Enables CPPE for Polarizable Embedding"" OFF); option(ENABLE_adcc ""Enables adcc for algebraic-diagrammatic construction methods (requires libtensorlight; can also be added at runtime)"" OFF); op",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:20005,Deployability,install,installed,20005,"h order MKL>FLEXIBLAS>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_TYPE ""Target LAPACK distribution for math detection; # (default: search order MKL>FLEXIBLAS>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_LIBRARIES ""Location of BLAS/LAPACK libraries as "";""-separated list of full paths, bypassing math detection""; # - LAPACK_INCLUDE_DIRS ""Location of BLAS/LAPACK headers (only needed for MKL), bypassing math detection""; # - OpenMP_LIBRARY_DIRS ""Location of OpenMP libraries (iomp5/gomp/omp) as "";""-separated list, hinting OpenMP detection"". # <<< Install >>>; #; # - CMAKE_INSTALL_PREFIX ""Location to which Psi4 and internally built add-ons are installed (default: /usr/local/psi4)""; # - CMAKE_INSTALL_BINDIR ""Location within CMAKE_INSTALL_PREFIX to which executables are installed (default: bin)""; # - CMAKE_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_PREFIX to which libraries are installed (default: lib)""; # - CMAKE_INSTALL_DATADIR ""Location within CMAKE_INSTALL_PREFIX to which resources are installed (default: share)""; # - CMAKE_INSTALL_INCLUDEDIR ""Location within CMAKE_INSTALL_PREFIX to which headers are installed (default: include)""; # - PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed (default: /); # Must start with: / . Used to imitate python install: /python3.6/site-packages ."". ############################ Options: Build What? ############################; option(ENABLE_ambit ""Enables the ambit tensor library"" OFF); option(ENABLE_bse ""Enables the basis_set_exchange for requesting basis sets (requires jsonschema, regex; can also be added at runtime)"" OFF); option(ENABLE_CheMPS2 ""Enables CheMPS2 for DMRG (requires HDF5)"" OFF); option(ENABLE_cppe ""Enables CPPE for Polarizable Embedding"" OFF); option(ENABLE_adcc ""Enables adcc for algebraic-diagrammatic construction methods (requires libtensorlight; can also be added at runtime)"" OFF); op",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:20075,Deployability,install,install,20075,"ction""; # - LAPACK_INCLUDE_DIRS ""Location of BLAS/LAPACK headers (only needed for MKL), bypassing math detection""; # - OpenMP_LIBRARY_DIRS ""Location of OpenMP libraries (iomp5/gomp/omp) as "";""-separated list, hinting OpenMP detection"". # <<< Install >>>; #; # - CMAKE_INSTALL_PREFIX ""Location to which Psi4 and internally built add-ons are installed (default: /usr/local/psi4)""; # - CMAKE_INSTALL_BINDIR ""Location within CMAKE_INSTALL_PREFIX to which executables are installed (default: bin)""; # - CMAKE_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_PREFIX to which libraries are installed (default: lib)""; # - CMAKE_INSTALL_DATADIR ""Location within CMAKE_INSTALL_PREFIX to which resources are installed (default: share)""; # - CMAKE_INSTALL_INCLUDEDIR ""Location within CMAKE_INSTALL_PREFIX to which headers are installed (default: include)""; # - PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed (default: /); # Must start with: / . Used to imitate python install: /python3.6/site-packages ."". ############################ Options: Build What? ############################; option(ENABLE_ambit ""Enables the ambit tensor library"" OFF); option(ENABLE_bse ""Enables the basis_set_exchange for requesting basis sets (requires jsonschema, regex; can also be added at runtime)"" OFF); option(ENABLE_CheMPS2 ""Enables CheMPS2 for DMRG (requires HDF5)"" OFF); option(ENABLE_cppe ""Enables CPPE for Polarizable Embedding"" OFF); option(ENABLE_adcc ""Enables adcc for algebraic-diagrammatic construction methods (requires libtensorlight; can also be added at runtime)"" OFF); option(ENABLE_ddx ""Enables ddx for domain-decomposition contiuum solvation models (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_dkh ""Enables DKH integrals (requires Fortran)"" OFF); option(ENABLE_ecpint ""Enables libecpint for effective core potentials (ECP)"" OFF); option(ENABLE_libefp ""Enables LIBEFP and PylibEFP for fragments"" OFF); option(ENABLE_Einsums ""Enables the E",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:22100,Deployability,install,installation,22100,"on(ENABLE_cppe ""Enables CPPE for Polarizable Embedding"" OFF); option(ENABLE_adcc ""Enables adcc for algebraic-diagrammatic construction methods (requires libtensorlight; can also be added at runtime)"" OFF); option(ENABLE_ddx ""Enables ddx for domain-decomposition contiuum solvation models (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_dkh ""Enables DKH integrals (requires Fortran)"" OFF); option(ENABLE_ecpint ""Enables libecpint for effective core potentials (ECP)"" OFF); option(ENABLE_libefp ""Enables LIBEFP and PylibEFP for fragments"" OFF); option(ENABLE_Einsums ""Enables the Einsums tensor library"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gauxc ""Enables use of GauXC density functional library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); option(ENABLE_snsmp2 ""Enables SNSMP2 plugin (can also be added at runtime)"" OFF); option(ENABLE_v2rdm_casscf ""Enables V2RDM_CASSCF plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_psi4fockci ""Enables Psi4FockCI plugin (can also be added at runtime)"" OFF); option(ENABLE_cct3 ""Enables cct3 plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_gpu_dfcc ""Enables GPU_DFCC plugin for gpu-accelerated df-cc (requires CUDA; can also be added at runtime)"" OFF); option(ENABLE_mdi ""Enables MolSSI driver interface"" OFF); option(ENABLE_BrianQC ""Enables the BrianQC GPU module (requires CUDA; requires separate installation and licensing of the BrianQC module)"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF); option(psi4_SKIP_ENABLE_Fortran ""Suppress enabling Fortran language even when Fortran addons enabled.",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:22255,Deployability,install,installed,22255,"on(ENABLE_cppe ""Enables CPPE for Polarizable Embedding"" OFF); option(ENABLE_adcc ""Enables adcc for algebraic-diagrammatic construction methods (requires libtensorlight; can also be added at runtime)"" OFF); option(ENABLE_ddx ""Enables ddx for domain-decomposition contiuum solvation models (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_dkh ""Enables DKH integrals (requires Fortran)"" OFF); option(ENABLE_ecpint ""Enables libecpint for effective core potentials (ECP)"" OFF); option(ENABLE_libefp ""Enables LIBEFP and PylibEFP for fragments"" OFF); option(ENABLE_Einsums ""Enables the Einsums tensor library"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gauxc ""Enables use of GauXC density functional library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); option(ENABLE_snsmp2 ""Enables SNSMP2 plugin (can also be added at runtime)"" OFF); option(ENABLE_v2rdm_casscf ""Enables V2RDM_CASSCF plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_psi4fockci ""Enables Psi4FockCI plugin (can also be added at runtime)"" OFF); option(ENABLE_cct3 ""Enables cct3 plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_gpu_dfcc ""Enables GPU_DFCC plugin for gpu-accelerated df-cc (requires CUDA; can also be added at runtime)"" OFF); option(ENABLE_mdi ""Enables MolSSI driver interface"" OFF); option(ENABLE_BrianQC ""Enables the BrianQC GPU module (requires CUDA; requires separate installation and licensing of the BrianQC module)"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF); option(psi4_SKIP_ENABLE_Fortran ""Suppress enabling Fortran language even when Fortran addons enabled.",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:22337,Deployability,install,installed,22337,"on(ENABLE_cppe ""Enables CPPE for Polarizable Embedding"" OFF); option(ENABLE_adcc ""Enables adcc for algebraic-diagrammatic construction methods (requires libtensorlight; can also be added at runtime)"" OFF); option(ENABLE_ddx ""Enables ddx for domain-decomposition contiuum solvation models (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_dkh ""Enables DKH integrals (requires Fortran)"" OFF); option(ENABLE_ecpint ""Enables libecpint for effective core potentials (ECP)"" OFF); option(ENABLE_libefp ""Enables LIBEFP and PylibEFP for fragments"" OFF); option(ENABLE_Einsums ""Enables the Einsums tensor library"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gauxc ""Enables use of GauXC density functional library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); option(ENABLE_snsmp2 ""Enables SNSMP2 plugin (can also be added at runtime)"" OFF); option(ENABLE_v2rdm_casscf ""Enables V2RDM_CASSCF plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_psi4fockci ""Enables Psi4FockCI plugin (can also be added at runtime)"" OFF); option(ENABLE_cct3 ""Enables cct3 plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_gpu_dfcc ""Enables GPU_DFCC plugin for gpu-accelerated df-cc (requires CUDA; can also be added at runtime)"" OFF); option(ENABLE_mdi ""Enables MolSSI driver interface"" OFF); option(ENABLE_BrianQC ""Enables the BrianQC GPU module (requires CUDA; requires separate installation and licensing of the BrianQC module)"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF); option(psi4_SKIP_ENABLE_Fortran ""Suppress enabling Fortran language even when Fortran addons enabled.",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:22762,Deployability,configurat,configuration,22762,"BLE_cct3 ""Enables cct3 plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_gpu_dfcc ""Enables GPU_DFCC plugin for gpu-accelerated df-cc (requires CUDA; can also be added at runtime)"" OFF); option(ENABLE_mdi ""Enables MolSSI driver interface"" OFF); option(ENABLE_BrianQC ""Enables the BrianQC GPU module (requires CUDA; requires separate installation and licensing of the BrianQC module)"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF); option(psi4_SKIP_ENABLE_Fortran ""Suppress enabling Fortran language even when Fortran addons enabled. Use when only linking pre-built, not compiling addon code."" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. How to install elsewhere than /usr/local/psi4¶; The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable CMAKE_INSTALL_PREFIX; before compiling. Build with Specific Install Directory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recurs",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:22855,Deployability,install,install,22855,")"" OFF); option(ENABLE_mdi ""Enables MolSSI driver interface"" OFF); option(ENABLE_BrianQC ""Enables the BrianQC GPU module (requires CUDA; requires separate installation and licensing of the BrianQC module)"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF); option(psi4_SKIP_ENABLE_Fortran ""Suppress enabling Fortran language even when Fortran addons enabled. Use when only linking pre-built, not compiling addon code."" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. How to install elsewhere than /usr/local/psi4¶; The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable CMAKE_INSTALL_PREFIX; before compiling. Build with Specific Install Directory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recursively delete all the “.pyc” files. It; may just run. How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUI",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:22900,Deployability,install,installation,22900,")"" OFF); option(ENABLE_mdi ""Enables MolSSI driver interface"" OFF); option(ENABLE_BrianQC ""Enables the BrianQC GPU module (requires CUDA; requires separate installation and licensing of the BrianQC module)"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF); option(psi4_SKIP_ENABLE_Fortran ""Suppress enabling Fortran language even when Fortran addons enabled. Use when only linking pre-built, not compiling addon code."" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. How to install elsewhere than /usr/local/psi4¶; The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable CMAKE_INSTALL_PREFIX; before compiling. Build with Specific Install Directory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recursively delete all the “.pyc” files. It; may just run. How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUI",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:23104,Deployability,install,installation,23104,"ng of the BrianQC module)"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF); option(psi4_SKIP_ENABLE_Fortran ""Suppress enabling Fortran language even when Fortran addons enabled. Use when only linking pre-built, not compiling addon code."" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. How to install elsewhere than /usr/local/psi4¶; The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable CMAKE_INSTALL_PREFIX; before compiling. Build with Specific Install Directory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recursively delete all the “.pyc” files. It; may just run. How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUILD_TYPE before; compiling. Note that these flags will not propagate to any add-ons that; are detected pre-built rather than built. Build without optimization; cmake -DCMAKE_BUILD_",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:23413,Deployability,install,installed,23413,"on(psi4_SKIP_ENABLE_Fortran ""Suppress enabling Fortran language even when Fortran addons enabled. Use when only linking pre-built, not compiling addon code."" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. How to install elsewhere than /usr/local/psi4¶; The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable CMAKE_INSTALL_PREFIX; before compiling. Build with Specific Install Directory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recursively delete all the “.pyc” files. It; may just run. How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUILD_TYPE before; compiling. Note that these flags will not propagate to any add-ons that; are detected pre-built rather than built. Build without optimization; cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. Relevant CMake Options:; CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. How to choose the compilation directory, {objdir}¶. there is no default; common ch",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:23510,Deployability,install,install,23510,"BLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. How to install elsewhere than /usr/local/psi4¶; The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable CMAKE_INSTALL_PREFIX; before compiling. Build with Specific Install Directory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recursively delete all the “.pyc” files. It; may just run. How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUILD_TYPE before; compiling. Note that these flags will not propagate to any add-ons that; are detected pre-built rather than built. Build without optimization; cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. Relevant CMake Options:; CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. How to choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir. cd {top-level-psi4-dir} && cmake -S. -Bobjdir; cd {top-level-psi4-dir} && cmake -S. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-le",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:24172,Deployability,release,release,24172,"ariable CMAKE_INSTALL_PREFIX; before compiling. Build with Specific Install Directory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recursively delete all the “.pyc” files. It; may just run. How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUILD_TYPE before; compiling. Note that these flags will not propagate to any add-ons that; are detected pre-built rather than built. Build without optimization; cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. Relevant CMake Options:; CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. How to choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir. cd {top-level-psi4-dir} && cmake -S. -Bobjdir; cd {top-level-psi4-dir} && cmake -S. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; >>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -S. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. What is the directory layout of the installed or staged Psi4¶; After compilation (cd objdir &&",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:24231,Deployability,release,release,24231,"rectory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recursively delete all the “.pyc” files. It; may just run. How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUILD_TYPE before; compiling. Note that these flags will not propagate to any add-ons that; are detected pre-built rather than built. Build without optimization; cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. Relevant CMake Options:; CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. How to choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir. cd {top-level-psi4-dir} && cmake -S. -Bobjdir; cd {top-level-psi4-dir} && cmake -S. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; >>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -S. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. What is the directory layout of the installed or staged Psi4¶; After compilation (cd objdir && make), a directory structure like the; below will exist at objdir/stage. This",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:24283,Deployability,release,release,24283,"rectory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recursively delete all the “.pyc” files. It; may just run. How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUILD_TYPE before; compiling. Note that these flags will not propagate to any add-ons that; are detected pre-built rather than built. Build without optimization; cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. Relevant CMake Options:; CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. How to choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir. cd {top-level-psi4-dir} && cmake -S. -Bobjdir; cd {top-level-psi4-dir} && cmake -S. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; >>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -S. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. What is the directory layout of the installed or staged Psi4¶; After compilation (cd objdir && make), a directory structure like the; below will exist at objdir/stage. This",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:24647,Deployability,configurat,configuration,24647,"g in; bin/psi4 if needed, and recursively delete all the “.pyc” files. It; may just run. How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUILD_TYPE before; compiling. Note that these flags will not propagate to any add-ons that; are detected pre-built rather than built. Build without optimization; cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. Relevant CMake Options:; CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. How to choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir. cd {top-level-psi4-dir} && cmake -S. -Bobjdir; cd {top-level-psi4-dir} && cmake -S. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; >>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -S. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. What is the directory layout of the installed or staged Psi4¶; After compilation (cd objdir && make), a directory structure like the; below will exist at objdir/stage. This may be tested and used; just like a full installation.; After installation (cd objdir && make && make install), a directory; structure like the below will exist at /prefix. This is a full; installation.; /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); incl",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:24936,Deployability,install,install-libint,24936,"UILD_TYPE before; compiling. Note that these flags will not propagate to any add-ons that; are detected pre-built rather than built. Build without optimization; cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. Relevant CMake Options:; CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. How to choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir. cd {top-level-psi4-dir} && cmake -S. -Bobjdir; cd {top-level-psi4-dir} && cmake -S. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; >>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -S. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. What is the directory layout of the installed or staged Psi4¶; After compilation (cd objdir && make), a directory structure like the; below will exist at objdir/stage. This may be tested and used; just like a full installation.; After installation (cd objdir && make && make install), a directory; structure like the below will exist at /prefix. This is a full; installation.; /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installe",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:25101,Deployability,install,installed,25101,"ke build type [default: release]. Relevant CMake Options:; CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. How to choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir. cd {top-level-psi4-dir} && cmake -S. -Bobjdir; cd {top-level-psi4-dir} && cmake -S. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; >>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -S. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. What is the directory layout of the installed or staged Psi4¶; After compilation (cd objdir && make), a directory structure like the; below will exist at objdir/stage. This may be tested and used; just like a full installation.; After installation (cd objdir && make && make install), a directory; structure like the below will exist at /prefix. This is a full; installation.; /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ ",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:25279,Deployability,install,installation,25279,"or Debug)"" [default: release]. How to choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir. cd {top-level-psi4-dir} && cmake -S. -Bobjdir; cd {top-level-psi4-dir} && cmake -S. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; >>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -S. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. What is the directory layout of the installed or staged Psi4¶; After compilation (cd objdir && make), a directory structure like the; below will exist at objdir/stage. This may be tested and used; just like a full installation.; After installation (cd objdir && make && make install), a directory; structure like the below will exist at /prefix. This is a full; installation.; /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plugins (plugin template files); share/psi4",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:25300,Deployability,install,installation,25300,"is no default; common choices are objdir or build under top-level-psi4-dir. cd {top-level-psi4-dir} && cmake -S. -Bobjdir; cd {top-level-psi4-dir} && cmake -S. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; >>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -S. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. What is the directory layout of the installed or staged Psi4¶; After compilation (cd objdir && make), a directory structure like the; below will exist at objdir/stage. This may be tested and used; just like a full installation.; After installation (cd objdir && make && make install), a directory; structure like the below will exist at /prefix. This is a full; installation.; /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plugins (plugin template files); share/psi4/fsapt (fsapt scripts); share/psi4/samples/ (sample input files); lib/ (shared libraries ",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:25340,Deployability,install,install,25340,"is no default; common choices are objdir or build under top-level-psi4-dir. cd {top-level-psi4-dir} && cmake -S. -Bobjdir; cd {top-level-psi4-dir} && cmake -S. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; >>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -S. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. What is the directory layout of the installed or staged Psi4¶; After compilation (cd objdir && make), a directory structure like the; below will exist at objdir/stage. This may be tested and used; just like a full installation.; After installation (cd objdir && make && make install), a directory; structure like the below will exist at /prefix. This is a full; installation.; /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plugins (plugin template files); share/psi4/fsapt (fsapt scripts); share/psi4/samples/ (sample input files); lib/ (shared libraries ",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:25427,Deployability,install,installation,25427,". cd {top-level-psi4-dir} && cmake -S. -Bobjdir; cd {top-level-psi4-dir} && cmake -S. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; >>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -S. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. What is the directory layout of the installed or staged Psi4¶; After compilation (cd objdir && make), a directory structure like the; below will exist at objdir/stage. This may be tested and used; just like a full installation.; After installation (cd objdir && make && make install), a directory; structure like the below will exist at /prefix. This is a full; installation.; /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plugins (plugin template files); share/psi4/fsapt (fsapt scripts); share/psi4/samples/ (sample input files); lib/ (shared libraries and py modules for psi4 + any external proj); # ordinary; lib/psi4/ (objec",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:25559,Deployability,install,installed,25559," directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; >>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -S. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. What is the directory layout of the installed or staged Psi4¶; After compilation (cd objdir && make), a directory structure like the; below will exist at objdir/stage. This may be tested and used; just like a full installation.; After installation (cd objdir && make && make install), a directory; structure like the below will exist at /prefix. This is a full; installation.; /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plugins (plugin template files); share/psi4/fsapt (fsapt scripts); share/psi4/samples/ (sample input files); lib/ (shared libraries and py modules for psi4 + any external proj); # ordinary; lib/psi4/ (object files); lib/psi4/driver/ (py-side, uncompiled); lib/psi4/header.py (prints file header); lib/psi4/metadata.py (psi4 version info); l",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:25937,Deployability,install,installed,25937," -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. What is the directory layout of the installed or staged Psi4¶; After compilation (cd objdir && make), a directory structure like the; below will exist at objdir/stage. This may be tested and used; just like a full installation.; After installation (cd objdir && make && make install), a directory; structure like the below will exist at /prefix. This is a full; installation.; /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plugins (plugin template files); share/psi4/fsapt (fsapt scripts); share/psi4/samples/ (sample input files); lib/ (shared libraries and py modules for psi4 + any external proj); # ordinary; lib/psi4/ (object files); lib/psi4/driver/ (py-side, uncompiled); lib/psi4/header.py (prints file header); lib/psi4/metadata.py (psi4 version info); lib/psi4/__init__.py (module marker/loader for psi4.core); lib/psi4/core.cpython-*.so (c-side, compiled and bound by pybind11); # conda; lib/pythonX.X/site-packages/psi4/. The following environment variables point to certain places in the above; directory structure. None to few need to be set; s",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:26003,Deployability,install,install,26003,"> chmod u+x do-configure; >>> ./do-configure. What is the directory layout of the installed or staged Psi4¶; After compilation (cd objdir && make), a directory structure like the; below will exist at objdir/stage. This may be tested and used; just like a full installation.; After installation (cd objdir && make && make install), a directory; structure like the below will exist at /prefix. This is a full; installation.; /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plugins (plugin template files); share/psi4/fsapt (fsapt scripts); share/psi4/samples/ (sample input files); lib/ (shared libraries and py modules for psi4 + any external proj); # ordinary; lib/psi4/ (object files); lib/psi4/driver/ (py-side, uncompiled); lib/psi4/header.py (prints file header); lib/psi4/metadata.py (psi4 version info); lib/psi4/__init__.py (module marker/loader for psi4.core); lib/psi4/core.cpython-*.so (c-side, compiled and bound by pybind11); # conda; lib/pythonX.X/site-packages/psi4/. The following environment variables point to certain places in the above; directory structure. None to few need to be set; see for details:; running compiled executable,; running compiled Python module,; running conda binary. PATH pointing to bin; PYTHONPATH pointing to lib (ordinary) or ",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:27163,Deployability,install,installation,27163,"i4/plugins (plugin template files); share/psi4/fsapt (fsapt scripts); share/psi4/samples/ (sample input files); lib/ (shared libraries and py modules for psi4 + any external proj); # ordinary; lib/psi4/ (object files); lib/psi4/driver/ (py-side, uncompiled); lib/psi4/header.py (prints file header); lib/psi4/metadata.py (psi4 version info); lib/psi4/__init__.py (module marker/loader for psi4.core); lib/psi4/core.cpython-*.so (c-side, compiled and bound by pybind11); # conda; lib/pythonX.X/site-packages/psi4/. The following environment variables point to certain places in the above; directory structure. None to few need to be set; see for details:; running compiled executable,; running compiled Python module,; running conda binary. PATH pointing to bin; PYTHONPATH pointing to lib (ordinary) or lib/pythonX.X/site-packages (conda); PSIDATADIR pointing to share/psi4. How to run Psi4 as executable after compilation¶; Substituting the full installation directory prefix and a; suitable scratch directory, issue the following commands directly in your; terminal or place them into your “rc” file and open a new terminal. (To; use a staged installation directory, substitute; objdir/stage for prefix.); # csh, tcsh: add to shell or ~/.tcshrc file; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run PSI4.; >>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. How to solve ModuleNotFoundError: No module named 'psi4'¶; You’re using PSI4 in PsiAPI mode (python input.py where; input.py contains import psi4) but the Python interpreter;",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:27361,Deployability,install,installation,27361,"external proj); # ordinary; lib/psi4/ (object files); lib/psi4/driver/ (py-side, uncompiled); lib/psi4/header.py (prints file header); lib/psi4/metadata.py (psi4 version info); lib/psi4/__init__.py (module marker/loader for psi4.core); lib/psi4/core.cpython-*.so (c-side, compiled and bound by pybind11); # conda; lib/pythonX.X/site-packages/psi4/. The following environment variables point to certain places in the above; directory structure. None to few need to be set; see for details:; running compiled executable,; running compiled Python module,; running conda binary. PATH pointing to bin; PYTHONPATH pointing to lib (ordinary) or lib/pythonX.X/site-packages (conda); PSIDATADIR pointing to share/psi4. How to run Psi4 as executable after compilation¶; Substituting the full installation directory prefix and a; suitable scratch directory, issue the following commands directly in your; terminal or place them into your “rc” file and open a new terminal. (To; use a staged installation directory, substitute; objdir/stage for prefix.); # csh, tcsh: add to shell or ~/.tcshrc file; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run PSI4.; >>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. How to solve ModuleNotFoundError: No module named 'psi4'¶; You’re using PSI4 in PsiAPI mode (python input.py where; input.py contains import psi4) but the Python interpreter; can’t find the PSI4 Python module. Follow the directions at; How to configure paths for PsiAPI. How to configure paths for PsiAPI¶; If you know the location of the P",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:29189,Deployability,install,installation,29189,"hon module. Follow the directions at; How to configure paths for PsiAPI. How to configure paths for PsiAPI¶; If you know the location of the PSI4 executable (bin/psi4); for Psithon mode and want to know the corresponding location to add to; PYTHONPATH for PsiAPI mode, execute psi4 --psiapi. It; will return bash commands to set PATH (for correct python; interpreter) and PYTHONPATH (to find psi4 module) correctly,; after which import psi4 will work.; >>> psi4 --psiapi-path; export PATH=/path/to/dir/of/python/interpreter/against/which/psi4/compiled:$PATH; export PYTHONPATH=/path/to/dir/of/psi4/core-dot-so:$PYTHONPATH. >>> export PATH=/path/to/dir/of/python/interpreter/against/which/psi4/compiled:$PATH; >>> export PYTHONPATH=/path/to/dir/of/psi4/core-dot-so:$PYTHONPATH. >>> python -c ""import psi4"". >>> python -c ""import psi4;print(psi4.__file__, psi4.__version__)"". How to run Psi4 as Python module after compilation¶; Substituting the full installation directory prefix and a; suitable scratch directory, issue the following commands directly in your; terminal or place them into your “rc” file and open a new terminal. (To; use a staged installation directory, substitute; objdir/stage for prefix.); # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH {prefix}/lib:$PYTHONPATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH={prefix}/lib:$PYTHONPATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. How to configure paths for PsiAPI. Run PSI4.; >>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable or Python module from conda insta",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:29387,Deployability,install,installation,29387,"; for Psithon mode and want to know the corresponding location to add to; PYTHONPATH for PsiAPI mode, execute psi4 --psiapi. It; will return bash commands to set PATH (for correct python; interpreter) and PYTHONPATH (to find psi4 module) correctly,; after which import psi4 will work.; >>> psi4 --psiapi-path; export PATH=/path/to/dir/of/python/interpreter/against/which/psi4/compiled:$PATH; export PYTHONPATH=/path/to/dir/of/psi4/core-dot-so:$PYTHONPATH. >>> export PATH=/path/to/dir/of/python/interpreter/against/which/psi4/compiled:$PATH; >>> export PYTHONPATH=/path/to/dir/of/psi4/core-dot-so:$PYTHONPATH. >>> python -c ""import psi4"". >>> python -c ""import psi4;print(psi4.__file__, psi4.__version__)"". How to run Psi4 as Python module after compilation¶; Substituting the full installation directory prefix and a; suitable scratch directory, issue the following commands directly in your; terminal or place them into your “rc” file and open a new terminal. (To; use a staged installation directory, substitute; objdir/stage for prefix.); # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH {prefix}/lib:$PYTHONPATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH={prefix}/lib:$PYTHONPATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. How to configure paths for PsiAPI. Run PSI4.; >>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable or Python module from conda installation¶; The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing PSI4 into a Anaconda,; Miniconda, or Psi4",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:30236,Deployability,install,installation,30236," them into your “rc” file and open a new terminal. (To; use a staged installation directory, substitute; objdir/stage for prefix.); # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH {prefix}/lib:$PYTHONPATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH={prefix}/lib:$PYTHONPATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. How to configure paths for PsiAPI. Run PSI4.; >>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable or Python module from conda installation¶; The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing PSI4 into a Anaconda,; Miniconda, or Psi4conda distribution, condadist =; ana|mini|psi4conda. To see the message again after initial installation,; with the conda environment active, run .psi4-post-link.sh.; If which conda python psi4 points to your; condadist and echo $PSI_SCRATCH is set, skip ahead to the; “Run PSI4"" commands below. Otherwise, issue the following; commands directly in your terminal or place them into your “rc” file and; open a new terminal.; If you installed the Psi4conda distribution or installed the PSI4; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your PATH, as prompted, then; which psi4 likely yields condadist/bin/psi4 and the PATH; setting lines below are redundant.; If you installed into a conda environment p4env and performed; conda activate p4env, then which psi4 likely yields; condadist/envs/p4env/bin/psi4 and the PATH setting lines; below are redundant.; ",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:30255,Deployability,configurat,configuration,30255," them into your “rc” file and open a new terminal. (To; use a staged installation directory, substitute; objdir/stage for prefix.); # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH {prefix}/lib:$PYTHONPATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH={prefix}/lib:$PYTHONPATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. How to configure paths for PsiAPI. Run PSI4.; >>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable or Python module from conda installation¶; The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing PSI4 into a Anaconda,; Miniconda, or Psi4conda distribution, condadist =; ana|mini|psi4conda. To see the message again after initial installation,; with the conda environment active, run .psi4-post-link.sh.; If which conda python psi4 points to your; condadist and echo $PSI_SCRATCH is set, skip ahead to the; “Run PSI4"" commands below. Otherwise, issue the following; commands directly in your terminal or place them into your “rc” file and; open a new terminal.; If you installed the Psi4conda distribution or installed the PSI4; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your PATH, as prompted, then; which psi4 likely yields condadist/bin/psi4 and the PATH; setting lines below are redundant.; If you installed into a conda environment p4env and performed; conda activate p4env, then which psi4 likely yields; condadist/envs/p4env/bin/psi4 and the PATH setting lines; below are redundant.; ",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:30356,Deployability,install,installing,30356," them into your “rc” file and open a new terminal. (To; use a staged installation directory, substitute; objdir/stage for prefix.); # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH {prefix}/lib:$PYTHONPATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH={prefix}/lib:$PYTHONPATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. How to configure paths for PsiAPI. Run PSI4.; >>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable or Python module from conda installation¶; The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing PSI4 into a Anaconda,; Miniconda, or Psi4conda distribution, condadist =; ana|mini|psi4conda. To see the message again after initial installation,; with the conda environment active, run .psi4-post-link.sh.; If which conda python psi4 points to your; condadist and echo $PSI_SCRATCH is set, skip ahead to the; “Run PSI4"" commands below. Otherwise, issue the following; commands directly in your terminal or place them into your “rc” file and; open a new terminal.; If you installed the Psi4conda distribution or installed the PSI4; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your PATH, as prompted, then; which psi4 likely yields condadist/bin/psi4 and the PATH; setting lines below are redundant.; If you installed into a conda environment p4env and performed; conda activate p4env, then which psi4 likely yields; condadist/envs/p4env/bin/psi4 and the PATH setting lines; below are redundant.; ",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:30500,Deployability,install,installation,30500,"NPATH {prefix}/lib:$PYTHONPATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH={prefix}/lib:$PYTHONPATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. How to configure paths for PsiAPI. Run PSI4.; >>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable or Python module from conda installation¶; The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing PSI4 into a Anaconda,; Miniconda, or Psi4conda distribution, condadist =; ana|mini|psi4conda. To see the message again after initial installation,; with the conda environment active, run .psi4-post-link.sh.; If which conda python psi4 points to your; condadist and echo $PSI_SCRATCH is set, skip ahead to the; “Run PSI4"" commands below. Otherwise, issue the following; commands directly in your terminal or place them into your “rc” file and; open a new terminal.; If you installed the Psi4conda distribution or installed the PSI4; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your PATH, as prompted, then; which psi4 likely yields condadist/bin/psi4 and the PATH; setting lines below are redundant.; If you installed into a conda environment p4env and performed; conda activate p4env, then which psi4 likely yields; condadist/envs/p4env/bin/psi4 and the PATH setting lines; below are redundant.; # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:30839,Deployability,install,installed,30839,"rgy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable or Python module from conda installation¶; The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing PSI4 into a Anaconda,; Miniconda, or Psi4conda distribution, condadist =; ana|mini|psi4conda. To see the message again after initial installation,; with the conda environment active, run .psi4-post-link.sh.; If which conda python psi4 points to your; condadist and echo $PSI_SCRATCH is set, skip ahead to the; “Run PSI4"" commands below. Otherwise, issue the following; commands directly in your terminal or place them into your “rc” file and; open a new terminal.; If you installed the Psi4conda distribution or installed the PSI4; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your PATH, as prompted, then; which psi4 likely yields condadist/bin/psi4 and the PATH; setting lines below are redundant.; If you installed into a conda environment p4env and performed; conda activate p4env, then which psi4 likely yields; condadist/envs/p4env/bin/psi4 and the PATH setting lines; below are redundant.; # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run PSI4 as executable.; >>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.......................................................",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:30879,Deployability,install,installed,30879,"rgy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable or Python module from conda installation¶; The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing PSI4 into a Anaconda,; Miniconda, or Psi4conda distribution, condadist =; ana|mini|psi4conda. To see the message again after initial installation,; with the conda environment active, run .psi4-post-link.sh.; If which conda python psi4 points to your; condadist and echo $PSI_SCRATCH is set, skip ahead to the; “Run PSI4"" commands below. Otherwise, issue the following; commands directly in your terminal or place them into your “rc” file and; open a new terminal.; If you installed the Psi4conda distribution or installed the PSI4; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your PATH, as prompted, then; which psi4 likely yields condadist/bin/psi4 and the PATH; setting lines below are redundant.; If you installed into a conda environment p4env and performed; conda activate p4env, then which psi4 likely yields; condadist/envs/p4env/bin/psi4 and the PATH setting lines; below are redundant.; # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run PSI4 as executable.; >>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.......................................................",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:31130,Deployability,install,installed,31130,"odule from conda installation¶; The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing PSI4 into a Anaconda,; Miniconda, or Psi4conda distribution, condadist =; ana|mini|psi4conda. To see the message again after initial installation,; with the conda environment active, run .psi4-post-link.sh.; If which conda python psi4 points to your; condadist and echo $PSI_SCRATCH is set, skip ahead to the; “Run PSI4"" commands below. Otherwise, issue the following; commands directly in your terminal or place them into your “rc” file and; open a new terminal.; If you installed the Psi4conda distribution or installed the PSI4; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your PATH, as prompted, then; which psi4 likely yields condadist/bin/psi4 and the PATH; setting lines below are redundant.; If you installed into a conda environment p4env and performed; conda activate p4env, then which psi4 likely yields; condadist/envs/p4env/bin/psi4 and the PATH setting lines; below are redundant.; # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run PSI4 as executable.; >>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. or Run PSI4 as Python module.; >>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sampl",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:33324,Deployability,install,installed,33324,"hen developing python driver code, it can be annoying to keep makeing to test the code. PSI4 can be run “inplace” through the; following procedure. To be clear, this is running compiled C++ from the; build directory and python from the source directory. This is an expert; option for development, and not all functionality will be available.; >>> cd {objdir}; >>> ln -s {top-level-psi4-dir}/{objdir}/stage/lib/psi4/core.cpython-{ext_will_vary}.so ../psi4/core.cpython-{ext_will_vary}.so; >>> python ../psi4/run_psi4.py --inplace input.dat. Why not to set PSIDATADIR¶; PSIDATADIR is an environment variable containing the location of the; text resource parts of the PSI4 codebase (e.g., basis sets,; databases, EFP fragments). It is for developer use only. In PSI4 1.1; and beyond, the program always knows where its resources are, and the; only reason to set this variable is to point to another location.; Previously in PSI4 1.0 and previous, only installed executables knew; the location, so it always needed to be explicitly set when run from the; compilation directory.; At runtime; >>> psi4 -p {top-level-psi4-dir}/psi4/share/psi4. Or in the shell; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIDATADIR {top-level-psi4-dir}/psi4/share/psi4. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIDATADIR={top-level-psi4-dir}/psi4/share/psi4. How to configure C++ and C compilers for building Psi4¶; Role and Dependencies. Role — In PSI4, a C++ compiler is vital for building the code.; Downstream Dependencies — PSI4 \(\Leftarrow\) C++ Compiler. CMake Variables. CMAKE_CXX_COMPILER — CMake variable to specify name or full path to C++ compiler.; CMAKE_C_COMPILER — CMake variable to specify name or full path to C compiler.; CMAKE_CXX_FLAGS — CMake variable to specify any additional custom compiler flags for C++ source.; CMAKE_C_FLAGS — CMake variable to specify any additional custom compiler flags for C source. Examples. Build with detected c",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:37184,Deployability,install,install,37184,"pon; activation). >>> cmake -DCMAKE_C_COMPILER=${GCC} \; -DCMAKE_CXX_COMPILER=${GXX} \; -DCMAKE_Fortran_COMPILER=${GFORTRAN}. What C and C++ compilers and versions are approved¶; On Linux, the following work nicely. GNU: gcc, g++; Intel: icc, icpc; Clang: clang, clang++. On Mac, the following work nicely. Apple Clang: clang, clang++; Intel: icc, icpc. PSI4 requires full C++20 compliance.; This compliance is checked for at build-time with file; psi4/cmake/custom_cxxstandard.cmake, so either consult that file or; try a test build to ensure your compiler is approved. Note that Intel; compilers on Linux also rely on GCC, so both icpc and gcc versions are checked.; Intel OneAPI Classic compilers work fine, as do OneAPI Clang icpx compilers. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS. How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew¶; The easiest compiler to obtain is clang which is a drop-in replacement; for gcc and g++. Just install XCode. Some old versions; of XCode can’t handle some of the advanced C++ language features, but this; is a software not hardware limitation. Checks for version compliance; performed at build-time. Note that this “AppleClang” will not be compatible; with conda Mac packages using C++11, nor can it make use of OpenMP directives.; Another route to obtaining clang compilers without the above limitations; is through conda.; # Install Clang 4.0.1 into a non-primary conda environment; >>> conda create -n clang401 clangxx_osx-64 clang_osx-64 llvm-openmp intel-openmp. # To Build, activate environment (prepends PATH and defines environment variables CLANG, CLANGXX, HOST, etc):; >>> conda activate clang401; >>> echo ${CLANGXX}; /path/to/miniconda/envs/clang401/bin/x86_64-apple-darwin13.4.0-clang++; >>> echo ${HOST}; x86_64-apple-darwin13.4.0. # build with Clang; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=${CLANG} \; -DCMAKE_CXX_COMPILER=${CLANGXX} \; -DCMAKE_CXX_FLAGS=""-stdlib=libc++"" \; -DOp",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:38865,Deployability,update,update,38865,">>> echo ${CLANGXX}; /path/to/miniconda/envs/clang401/bin/x86_64-apple-darwin13.4.0-clang++; >>> echo ${HOST}; x86_64-apple-darwin13.4.0. # build with Clang; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=${CLANG} \; -DCMAKE_CXX_COMPILER=${CLANGXX} \; -DCMAKE_CXX_FLAGS=""-stdlib=libc++"" \; -DOpenMP_CXX_FLAG=""-fopenmp=libiomp5"". # build with Intel; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-clang-name=${CLANG}"" \; -DCMAKE_CXX_FLAGS=""-clang-name=${CLANG} -clangxx-name=${CLANGXX} -stdlib=libc++ -I${CONDA_PREFIX}/include/c++/v1"". # Configure and build. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS¶; # See if GCC too old (in this case, yes); >>> gcc --version; gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-4). Even if you’re not using GCC as a compiler, your Intel compiler seeks; gcc to generate code compatible with your current GCC version. If your; GCC is too old (like above), you can update your system GCC through your; package manager or install an acceptable version elsewhere on your; system. The latter route, tested on Linux with Intel compilers, is below.; # Install GCC 7.2 into a non-primary conda environment; >>> conda create -n gcc72 gxx_linux-64 gcc_linux-64. # To Build, either:. # (A) activate environment (prepends PATH and defines environment variables CC, CXX, HOST, etc); >>> conda activate gcc72; >>> echo ${CXX}; /path/to/miniconda/envs/gcc72/bin/x86_64-conda_cos6-linux-gnu-g++; >>> echo ${HOST}; x86_64-conda_cos6-linux-gnu. # build with GNU; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=${CC} \; -DCMAKE_CXX_COMPILER=${CXX} \. # build with Intel; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${HOST}-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${HOST}-"" \. # (B) tell CMake to tell the compiler which GCC to use; >>> GCC7=/path/to/miniconda/envs/gcc72; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMA",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:38921,Deployability,install,install,38921,">>> echo ${CLANGXX}; /path/to/miniconda/envs/clang401/bin/x86_64-apple-darwin13.4.0-clang++; >>> echo ${HOST}; x86_64-apple-darwin13.4.0. # build with Clang; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=${CLANG} \; -DCMAKE_CXX_COMPILER=${CLANGXX} \; -DCMAKE_CXX_FLAGS=""-stdlib=libc++"" \; -DOpenMP_CXX_FLAG=""-fopenmp=libiomp5"". # build with Intel; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-clang-name=${CLANG}"" \; -DCMAKE_CXX_FLAGS=""-clang-name=${CLANG} -clangxx-name=${CLANGXX} -stdlib=libc++ -I${CONDA_PREFIX}/include/c++/v1"". # Configure and build. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS¶; # See if GCC too old (in this case, yes); >>> gcc --version; gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-4). Even if you’re not using GCC as a compiler, your Intel compiler seeks; gcc to generate code compatible with your current GCC version. If your; GCC is too old (like above), you can update your system GCC through your; package manager or install an acceptable version elsewhere on your; system. The latter route, tested on Linux with Intel compilers, is below.; # Install GCC 7.2 into a non-primary conda environment; >>> conda create -n gcc72 gxx_linux-64 gcc_linux-64. # To Build, either:. # (A) activate environment (prepends PATH and defines environment variables CC, CXX, HOST, etc); >>> conda activate gcc72; >>> echo ${CXX}; /path/to/miniconda/envs/gcc72/bin/x86_64-conda_cos6-linux-gnu-g++; >>> echo ${HOST}; x86_64-conda_cos6-linux-gnu. # build with GNU; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=${CC} \; -DCMAKE_CXX_COMPILER=${CXX} \. # build with Intel; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${HOST}-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${HOST}-"" \. # (B) tell CMake to tell the compiler which GCC to use; >>> GCC7=/path/to/miniconda/envs/gcc72; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMA",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:41600,Deployability,install,install,41600,"Y_ADD_RPATH=yes cmake ... CRAYPE_LINK_TYPE¶; Set to allow PSI4 to build as shared library on Cray supercomputers. CRAY_ADD_RPATH¶; Set to true to allow PSI4 to build on Cray supercomputers. How to configure Fortran compilers for building Psi4¶; Role and Dependencies. Role — In PSI4, a Fortran compiler in unneeded for core; features but may be required for add-ons.; Downstream Dependencies. PSI4 (\(\Leftarrow\) optional) Fortran Compiler; dkh, gdma, PCMSolver \(\Leftarrow\) Fortran Compiler. CMake Variables. CMAKE_Fortran_COMPILER — CMake variable to specify name or full path to Fortran compiler.; CMAKE_Fortran_FLAGS — CMake variable to specify any additional custom compiler flags for Fortran source. Examples. Build with detected compiler from PATH. >>> cmake. Build with specific (Intel) compiler from PATH. >>> cmake -DCMAKE_Fortran_COMPILER=ifort. What Fortran compilers are approved¶; On Linux and Mac, the following work nicely. GNU: gfortran; Intel: ifort. Packages to install for specific OS or package managers:. Ubuntu gfortran; conda gfortran_linux-64 or gfortran_osx-64 to get gfortran. How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew¶; Xcode does not provide a Fortran compiler. A way to get one is to download; the gfortran_osx-64 conda package. This provides; gfortran compilers for Mac. The version is 4.8.5, which is quite old,; but the Fortran compiler will work. How to configure BLAS/LAPACK for building Psi4¶; Role and Dependencies. Role — In PSI4, BLAS and LAPACK control much of the speed; and efficiency of the code since computational chemistry is essentially; linear algebra on molecular systems.; Downstream Dependencies — PSI4 \(\Leftarrow\) LAPACK Libraries. CMake Variables. BLAS_TYPE — CMake variable to specify which BLAS libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; LAPACK_TYPE — CMake variable to specify which LAPACK libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; LAPACK_LIB",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:44090,Deployability,install,install,44090,"thOpenMP. MKL_ROOT¶; Environment variable set by Intel compilervars scripts. Sufficient to trigger math detection of MKL at this location. MATH_ROOT¶; Environment variable to specify root directory in which BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib64/libblas.so and ${MATH_ROOT}/lib64/liblapack.so). Examples. Build with any LAPACK in standard location. >>> cmake. Build with native Accelerate LAPACK on Mac (MKL not also present).; If NumPy not using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. >>> cmake. Build with native Accelerate LAPACK on Mac (MKL also present); If NumPy not using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. >>> cmake -DBLAS_TYPE=SYSTEM_NATIVE -DLAPACK_TYPE=SYSTEM_NATIVE. Build with Intel MKL. >>> source /path/to/intel/vers/linux/mkl/bin/mklvars.sh intel64 # adjust sh/csh and arch as needed; >>> cmake. >>> MATH_ROOT=/path/to/intel/vers/linux/mkl/ cmake. Build with Intel MKL from conda (install mkl-devel package from defaults channel). >>> cmake -DLAPACK_LIBRARIES=""${CONDA_PREFIX}/lib/libmkl_rt.so"" -DLAPACK_INCLUDE_DIRS=""${CONDA_PREFIX}/include"". OpenBLAS - see note below. >>> MATH_ROOT=/path/to/openblas/0.2.13_seq/x86_64/gcc_5.2.0/lib cmake. Build with explicit MKL LAPACK. >>> cmake -DLAPACK_LIBRARIES=""/path/to/lib/intel64/libmkl_lapack95_lp64.a;/path/to/lib/intel64/libmkl_rt.so"" -DLAPACK_INCLUDE_DIRS=""/path/to/mkl-h-include/"". Build with explicit non-MKL LAPACK. >>> cmake -DLAPACK_LIBRARIES=""/path/to/lib/liblapack.so;/path/to/lib/libblas.a"". Build with MKL and GCC (iomp5 needed instead of gomp for threading. use OpenMP_LIBRARY_DIRS to hint location.). >>> cmake -DLAPACK_LIBRARIES=/opt/intel/mkl/lib/intel64/libmkl_rt.so -DLAPACK_INCLUDE_DIRS=/opt/intel/mkl/include -DOpenMP_LIBRARY_DIRS=/opt/intel/compiler/lib/intel64/. Notes. Much of PSI4‘s speed and efficiency depends on the corresponding; speed and efficiency of the linked BLAS and LAPACK libraries; (especially the former)",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:50932,Deployability,toggle,toggle,50932,"Python of which python. How to fix “undefined symbol: _Py_FalseStruct”¶; You’re probably loading a Py3-compiled Psi4 in Py2. Switch interpreters; and re-run. A python of proper Py2 or Py3-ness is baked into the PSI4; “executable”, so you’ll see this error only for Psi4 as Python module. How to use gdb and lldb with Psi4¶; Debugging PSI4 has gotten a little confusing now that it’s running through Python. Here’s the syntax; >>> cd {objdir}; >>> lldb -- python stage/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (lldb) run. >>> cd {objdir}; >>> gdb --args python stage/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (gdb) run. How to see the actual compiling commands (or errors) with cmake¶; CMake by default hides a lot of useful debugging information to make the; compilation cleaner. Issue make VERBOSE=1 to display the full; compilation commands and errors. How to highlight git merge conflicts in vi¶; Edit your ~/.vimrc file to include the lines below. Hitting the F7; key will toggle highlighting of git’s conflict markers.; >>> cat ~/.vimrc; set hlsearch; map <F7> :/\(<<<<<<<\\|=======\\|>>>>>>>\)<CR>. How to handle “runtime library may be hidden” when building with Anaconda Python¶; When building against Ana/Miniconda python (e.g., cmake; -DPython_EXECUTABLE=/path/to/conda/bin/python), the warning below often; appears. It is harmless, proceed.; CMake Warning at src/bin/psi4/CMakeLists.txt:58 (add_executable):; Cannot generate a safe runtime search path for target psi4 because files in; some directories may conflict with libraries in implicit directories:. runtime library [libm.so.6] in /usr/lib64 may be hidden by files in:; /theoryfs2/common/software/anaconda/lib. Some of these libraries may not be found correctly. How to set up the scratch directory¶; The scratch directory is where Psi4 stores potentially large files during; computation. It should thus be on a local, fast disk to minimize any; computational inefficiencies caused by I/O. The scratch directory is; com",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:52880,Deployability,update,update,52880,"et up through the PSI_SCRATCH environment variable:; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. See also the more general scratch documentation. How do I retain specific Psi4 scratch files¶; You can set up a specific path for PSI4 scratch file and keep them; for later use through the psi4_io handler. How to use Psi4 within a PBS queue¶; You will usually need to set up a PBS job script that is setting all; necessary environment variables, making sure the scratch directories are; set up, and invoking the executable. An example PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. How to update and rebuild Psi4¶; Obtain code updates as appropriate from Binary Installer,; Clone from GitHub Repository, or Fork from GitHub Repository. Move into; objdir and reissue make or cmake --build ., whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir based on changes to the PSI4 repository.; Upon switching conda environments, though, one should; make a new objdir since there are many full paths baked into; objdir/CMakeCache.txt. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; >>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:52918,Deployability,update,updates,52918,"et up through the PSI_SCRATCH environment variable:; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. See also the more general scratch documentation. How do I retain specific Psi4 scratch files¶; You can set up a specific path for PSI4 scratch file and keep them; for later use through the psi4_io handler. How to use Psi4 within a PBS queue¶; You will usually need to set up a PBS job script that is setting all; necessary environment variables, making sure the scratch directories are; set up, and invoking the executable. An example PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. How to update and rebuild Psi4¶; Obtain code updates as appropriate from Binary Installer,; Clone from GitHub Repository, or Fork from GitHub Repository. Move into; objdir and reissue make or cmake --build ., whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir based on changes to the PSI4 repository.; Upon switching conda environments, though, one should; make a new objdir since there are many full paths baked into; objdir/CMakeCache.txt. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; >>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:53252,Deployability,update,update,53252,"ath/to/existing/writable/local-not-network/directory/for/scratch/files. See also the more general scratch documentation. How do I retain specific Psi4 scratch files¶; You can set up a specific path for PSI4 scratch file and keep them; for later use through the psi4_io handler. How to use Psi4 within a PBS queue¶; You will usually need to set up a PBS job script that is setting all; necessary environment variables, making sure the scratch directories are; set up, and invoking the executable. An example PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. How to update and rebuild Psi4¶; Obtain code updates as appropriate from Binary Installer,; Clone from GitHub Repository, or Fork from GitHub Repository. Move into; objdir and reissue make or cmake --build ., whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir based on changes to the PSI4 repository.; Upon switching conda environments, though, one should; make a new objdir since there are many full paths baked into; objdir/CMakeCache.txt. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; >>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example] . Run tests in parallel with -j flag. For maximum parallelism (not Windows): ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 5 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests tha",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:53557,Deployability,install,installed,53557,"w to use Psi4 within a PBS queue¶; You will usually need to set up a PBS job script that is setting all; necessary environment variables, making sure the scratch directories are; set up, and invoking the executable. An example PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. How to update and rebuild Psi4¶; Obtain code updates as appropriate from Binary Installer,; Clone from GitHub Repository, or Fork from GitHub Repository. Move into; objdir and reissue make or cmake --build ., whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir based on changes to the PSI4 repository.; Upon switching conda environments, though, one should; make a new objdir since there are many full paths baked into; objdir/CMakeCache.txt. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; >>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example] . Run tests in parallel with -j flag. For maximum parallelism (not Windows): ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 5 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that continuous integration checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run te",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:53675,Deployability,install,installed,53675,"are; set up, and invoking the executable. An example PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. How to update and rebuild Psi4¶; Obtain code updates as appropriate from Binary Installer,; Clone from GitHub Repository, or Fork from GitHub Repository. Move into; objdir and reissue make or cmake --build ., whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir based on changes to the PSI4 repository.; Upon switching conda environments, though, one should; make a new objdir since there are many full paths baked into; objdir/CMakeCache.txt. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; >>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example] . Run tests in parallel with -j flag. For maximum parallelism (not Windows): ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 5 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that continuous integration checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. Pytest has similar commands:. Run tests in parallel with -n flag (if Python",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:54249,Deployability,continuous,continuous,54249,"conda environments, though, one should; make a new objdir since there are many full paths baked into; objdir/CMakeCache.txt. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; >>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example] . Run tests in parallel with -j flag. For maximum parallelism (not Windows): ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 5 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that continuous integration checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. Pytest has similar commands:. Run tests in parallel with -n flag (if Python package pytest-xdist installed). For maximum parallelism: pytest -n auto; Run full test suite: pytest; Run the quick tests: pytest -m quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: pytest -m smoke; Run tests matching by name: pytest -k testname; Run tests excluding those by name: pytest -k ""not testname""; Run tests matching by label: pytest -m testlabel; Run tests excluding those by label: pytest -m ""not testlabel""; Run tests with complicated filtering by name: pytest -k ""cc and not cc4 and not stdsuite""; Run tests and see test names: pytest -v; Run tests and see test names ",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:54260,Deployability,integrat,integration,54260,"conda environments, though, one should; make a new objdir since there are many full paths baked into; objdir/CMakeCache.txt. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; >>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example] . Run tests in parallel with -j flag. For maximum parallelism (not Windows): ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 5 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that continuous integration checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. Pytest has similar commands:. Run tests in parallel with -n flag (if Python package pytest-xdist installed). For maximum parallelism: pytest -n auto; Run full test suite: pytest; Run the quick tests: pytest -m quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: pytest -m smoke; Run tests matching by name: pytest -k testname; Run tests excluding those by name: pytest -k ""not testname""; Run tests matching by label: pytest -m testlabel; Run tests excluding those by label: pytest -m ""not testlabel""; Run tests with complicated filtering by name: pytest -k ""cc and not cc4 and not stdsuite""; Run tests and see test names: pytest -v; Run tests and see test names ",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:54723,Deployability,install,installed,54723,"ilar coverage is obtained through:; >>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example] . Run tests in parallel with -j flag. For maximum parallelism (not Windows): ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 5 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that continuous integration checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. Pytest has similar commands:. Run tests in parallel with -n flag (if Python package pytest-xdist installed). For maximum parallelism: pytest -n auto; Run full test suite: pytest; Run the quick tests: pytest -m quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: pytest -m smoke; Run tests matching by name: pytest -k testname; Run tests excluding those by name: pytest -k ""not testname""; Run tests matching by label: pytest -m testlabel; Run tests excluding those by label: pytest -m ""not testlabel""; Run tests with complicated filtering by name: pytest -k ""cc and not cc4 and not stdsuite""; Run tests and see test names: pytest -v; Run tests and see test names and sometimes more verbose errors: pytest -vv. How to see CTest testing errors¶; >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests ha",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:56028,Deployability,install,installation,56028,"estlabel; Run tests excluding those by label: pytest -m ""not testlabel""; Run tests with complicated filtering by name: pytest -k ""cc and not cc4 and not stdsuite""; Run tests and see test names: pytest -v; Run tests and see test names and sometimes more verbose errors: pytest -vv. How to see CTest testing errors¶; >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of “smoke” tests is; generally sufficient to verify an installation. From the executable; # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.); # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". From pytest directly. If package pytest-xdist is installed, can run in parallel.; # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below.",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:56158,Deployability,install,installation,56158,"estlabel; Run tests excluding those by label: pytest -m ""not testlabel""; Run tests with complicated filtering by name: pytest -k ""cc and not cc4 and not stdsuite""; Run tests and see test names: pytest -v; Run tests and see test names and sometimes more verbose errors: pytest -vv. How to see CTest testing errors¶; >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of “smoke” tests is; generally sufficient to verify an installation. From the executable; # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.); # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". From pytest directly. If package pytest-xdist is installed, can run in parallel.; # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below.",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:56184,Deployability,install,installed,56184,"c4 and not stdsuite""; Run tests and see test names: pytest -v; Run tests and see test names and sometimes more verbose errors: pytest -vv. How to see CTest testing errors¶; >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of “smoke” tests is; generally sufficient to verify an installation. From the executable; # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.); # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". From pytest directly. If package pytest-xdist is installed, can run in parallel.; # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); ",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:56216,Deployability,install,installation,56216,"c4 and not stdsuite""; Run tests and see test names: pytest -v; Run tests and see test names and sometimes more verbose errors: pytest -vv. How to see CTest testing errors¶; >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of “smoke” tests is; generally sufficient to verify an installation. From the executable; # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.); # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". From pytest directly. If package pytest-xdist is installed, can run in parallel.; # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); ",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:56374,Deployability,install,installation,56374,"re verbose errors: pytest -vv. How to see CTest testing errors¶; >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of “smoke” tests is; generally sufficient to verify an installation. From the executable; # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.); # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". From pytest directly. If package pytest-xdist is installed, can run in parallel.; # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that nee",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:56849,Deployability,install,installed,56849," was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of “smoke” tests is; generally sufficient to verify an installation. From the executable; # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.); # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". From pytest directly. If package pytest-xdist is installed, can run in parallel.; # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run correctly); FAILED in red is bad.; test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_simint PASSED; test_addons.py::test_json PASSED; test_addons.py::test_cfour SKIPPED; test_addons.py::test_v2rdm_casscf PASSED; test_addons.py::test_grimme_3c PASSED; test_addons.py::te",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:59929,Deployability,install,install,59929,"pstream development. Sometimes, you’re the one; doing that development, and you need the CMake superbuild to pull source; from a local path rather than the approved codeset.; Find the CMakeLists.txt governing the target Add-On in; psi4/external and make changes analogous to the below:; #GIT_REPOSITORY https://github.com/jturney/ambit; #GIT_TAG 1.0; DOWNLOAD_COMMAND """"; SOURCE_DIR ""/path/to/ambit-directclone"". If you’re changing the PSI4 repo codebase between compiles, there’s; nothing more to do as CMake will handle the code rebuild deps for you.; If you’re changing the local Add-On repo codebase between compiles,; CMake does not know when libaddon.[a|so|dylib] needs rebuilding. It; is recommended that the PSI4 build be initially configured with; -DBUILD_SHARED_LIBS=ON (easier to notice changes). And to trigger; Add-On library rebuild, rm -rf {objdir}/external/upstream/addon/; and rm -rf {objdir}/stage/share/cmake/AddOn. This should; re-clone the Add-On, rebuild and install it, rebuild any parts of; PSI4 that interface to it, and relink the main core.so.; If you’re modifying the Add-On’s file or directory structure, be; smart and rm all traces of it within {objdir}/stage/,; especially any *.pyc files.; Alternatively and preferentially to the above, you can instead build and install the; Add-On library yourself, external to the PSI4 repository. This; is especially useful if you want to avoid full recompiles of the; Add-On at each change to the Add-On’s source. Build the Add-On; library dynamically (-DBUILD_SHARED_LIBS=ON) and mind any; “Psi4 wants” in the Add-On’s top-level CMakeLists.txt. Install the; Add-On and note the full path to AddOnConfig.cmake. Pass; the path containing that file to PSI4‘s CMake as; -DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and re",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:60243,Deployability,install,install,60243,"REPOSITORY https://github.com/jturney/ambit; #GIT_TAG 1.0; DOWNLOAD_COMMAND """"; SOURCE_DIR ""/path/to/ambit-directclone"". If you’re changing the PSI4 repo codebase between compiles, there’s; nothing more to do as CMake will handle the code rebuild deps for you.; If you’re changing the local Add-On repo codebase between compiles,; CMake does not know when libaddon.[a|so|dylib] needs rebuilding. It; is recommended that the PSI4 build be initially configured with; -DBUILD_SHARED_LIBS=ON (easier to notice changes). And to trigger; Add-On library rebuild, rm -rf {objdir}/external/upstream/addon/; and rm -rf {objdir}/stage/share/cmake/AddOn. This should; re-clone the Add-On, rebuild and install it, rebuild any parts of; PSI4 that interface to it, and relink the main core.so.; If you’re modifying the Add-On’s file or directory structure, be; smart and rm all traces of it within {objdir}/stage/,; especially any *.pyc files.; Alternatively and preferentially to the above, you can instead build and install the; Add-On library yourself, external to the PSI4 repository. This; is especially useful if you want to avoid full recompiles of the; Add-On at each change to the Add-On’s source. Build the Add-On; library dynamically (-DBUILD_SHARED_LIBS=ON) and mind any; “Psi4 wants” in the Add-On’s top-level CMakeLists.txt. Install the; Add-On and note the full path to AddOnConfig.cmake. Pass; the path containing that file to PSI4‘s CMake as; -DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and remake; as needed. How to use logging in Psi4¶; A log file is generated alongside the output file and has extension; .log. Selected key information is sent to it. The log file contents; are provisional and haphazard, so don’t start relying upon them. It is; tentatively envisioned that log file",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:60847,Deployability,update,update,60847,"d rm -rf {objdir}/stage/share/cmake/AddOn. This should; re-clone the Add-On, rebuild and install it, rebuild any parts of; PSI4 that interface to it, and relink the main core.so.; If you’re modifying the Add-On’s file or directory structure, be; smart and rm all traces of it within {objdir}/stage/,; especially any *.pyc files.; Alternatively and preferentially to the above, you can instead build and install the; Add-On library yourself, external to the PSI4 repository. This; is especially useful if you want to avoid full recompiles of the; Add-On at each change to the Add-On’s source. Build the Add-On; library dynamically (-DBUILD_SHARED_LIBS=ON) and mind any; “Psi4 wants” in the Add-On’s top-level CMakeLists.txt. Install the; Add-On and note the full path to AddOnConfig.cmake. Pass; the path containing that file to PSI4‘s CMake as; -DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and remake; as needed. How to use logging in Psi4¶; A log file is generated alongside the output file and has extension; .log. Selected key information is sent to it. The log file contents; are provisional and haphazard, so don’t start relying upon them. It is; tentatively envisioned that log files will have much of the same results as output; files but more as structured data than narrative, nicely formatted data.; In some cases where external calls are involved, the most detailed; information may only be collectable in the log file. It is; worthwhile to check the log file if expected results are missing from; the usual output file. If the log file is empty, the logging level may; be set too low.; To change the logging level to DEBUG from the command-line:; >>> psi4 --logging 10. To change the logging level to DEBUG in PsiAPI:; >>> psi4.set_output_file(<filebase>, loglevel=10). How t",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:61961,Deployability,install,installation,61961," needed. How to use logging in Psi4¶; A log file is generated alongside the output file and has extension; .log. Selected key information is sent to it. The log file contents; are provisional and haphazard, so don’t start relying upon them. It is; tentatively envisioned that log files will have much of the same results as output; files but more as structured data than narrative, nicely formatted data.; In some cases where external calls are involved, the most detailed; information may only be collectable in the log file. It is; worthwhile to check the log file if expected results are missing from; the usual output file. If the log file is empty, the logging level may; be set too low.; To change the logging level to DEBUG from the command-line:; >>> psi4 --logging 10. To change the logging level to DEBUG in PsiAPI:; >>> psi4.set_output_file(<filebase>, loglevel=10). How to find the Psi4 module from the executable and vice versa¶; Because of the different conventions of C++/Linux and Python installation; layouts, the PSI4 executable and the PSI4 Python module aren’t; at fixed locations relative to each other. Accessors have been added; so that the executable can show where the module is, and the module; can show where the executable is. > /path/to/psi4/install/bin/psi4 --module; /path/to/psi4/install/lib//; > python -c ""import psi4;print(psi4.executable)""; /path/to/psi4/install/bin/psi4. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:62228,Deployability,install,install,62228,"same results as output; files but more as structured data than narrative, nicely formatted data.; In some cases where external calls are involved, the most detailed; information may only be collectable in the log file. It is; worthwhile to check the log file if expected results are missing from; the usual output file. If the log file is empty, the logging level may; be set too low.; To change the logging level to DEBUG from the command-line:; >>> psi4 --logging 10. To change the logging level to DEBUG in PsiAPI:; >>> psi4.set_output_file(<filebase>, loglevel=10). How to find the Psi4 module from the executable and vice versa¶; Because of the different conventions of C++/Linux and Python installation; layouts, the PSI4 executable and the PSI4 Python module aren’t; at fixed locations relative to each other. Accessors have been added; so that the executable can show where the module is, and the module; can show where the executable is. > /path/to/psi4/install/bin/psi4 --module; /path/to/psi4/install/lib//; > python -c ""import psi4;print(psi4.executable)""; /path/to/psi4/install/bin/psi4. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solv",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:62269,Deployability,install,install,62269,"same results as output; files but more as structured data than narrative, nicely formatted data.; In some cases where external calls are involved, the most detailed; information may only be collectable in the log file. It is; worthwhile to check the log file if expected results are missing from; the usual output file. If the log file is empty, the logging level may; be set too low.; To change the logging level to DEBUG from the command-line:; >>> psi4 --logging 10. To change the logging level to DEBUG in PsiAPI:; >>> psi4.set_output_file(<filebase>, loglevel=10). How to find the Psi4 module from the executable and vice versa¶; Because of the different conventions of C++/Linux and Python installation; layouts, the PSI4 executable and the PSI4 Python module aren’t; at fixed locations relative to each other. Accessors have been added; so that the executable can show where the module is, and the module; can show where the executable is. > /path/to/psi4/install/bin/psi4 --module; /path/to/psi4/install/lib//; > python -c ""import psi4;print(psi4.executable)""; /path/to/psi4/install/bin/psi4. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solv",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:62348,Deployability,install,install,62348,"ely formatted data.; In some cases where external calls are involved, the most detailed; information may only be collectable in the log file. It is; worthwhile to check the log file if expected results are missing from; the usual output file. If the log file is empty, the logging level may; be set too low.; To change the logging level to DEBUG from the command-line:; >>> psi4 --logging 10. To change the logging level to DEBUG in PsiAPI:; >>> psi4.set_output_file(<filebase>, loglevel=10). How to find the Psi4 module from the executable and vice versa¶; Because of the different conventions of C++/Linux and Python installation; layouts, the PSI4 executable and the PSI4 Python module aren’t; at fixed locations relative to each other. Accessors have been added; so that the executable can show where the module is, and the module; can show where the executable is. > /path/to/psi4/install/bin/psi4 --module; /path/to/psi4/install/lib//; > python -c ""import psi4;print(psi4.executable)""; /path/to/psi4/install/bin/psi4. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for Psi",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:62490,Deployability,install,install,62490,"ssors have been added; so that the executable can show where the module is, and the module; can show where the executable is. > /path/to/psi4/install/bin/psi4 --module; /path/to/psi4/install/lib//; > python -c ""import psi4;print(psi4.executable)""; /path/to/psi4/install/bin/psi4. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building ",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:62549,Deployability,install,install,62549,"ssors have been added; so that the executable can show where the module is, and the module; can show where the executable is. > /path/to/psi4/install/bin/psi4 --module; /path/to/psi4/install/lib//; > python -c ""import psi4;print(psi4.executable)""; /path/to/psi4/install/bin/psi4. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building ",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:62918,Deployability,configurat,configuration,62918,"ssors have been added; so that the executable can show where the module is, and the module; can show where the executable is. > /path/to/psi4/install/bin/psi4 --module; /path/to/psi4/install/lib//; > python -c ""import psi4;print(psi4.executable)""; /path/to/psi4/install/bin/psi4. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building ",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:62962,Deployability,install,install,62962,"ssors have been added; so that the executable can show where the module is, and the module; can show where the executable is. > /path/to/psi4/install/bin/psi4 --module; /path/to/psi4/install/lib//; > python -c ""import psi4;print(psi4.executable)""; /path/to/psi4/install/bin/psi4. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building ",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:63095,Deployability,configurat,configuration,63095,"ssors have been added; so that the executable can show where the module is, and the module; can show where the executable is. > /path/to/psi4/install/bin/psi4 --module; /path/to/psi4/install/lib//; > python -c ""import psi4;print(psi4.executable)""; /path/to/psi4/install/bin/psi4. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building ",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:63180,Deployability,install,installed,63180,"ssors have been added; so that the executable can show where the module is, and the module; can show where the executable is. > /path/to/psi4/install/bin/psi4 --module; /path/to/psi4/install/lib//; > python -c ""import psi4;print(psi4.executable)""; /path/to/psi4/install/bin/psi4. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building ",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:63458,Deployability,install,installation,63458,"ssors have been added; so that the executable can show where the module is, and the module; can show where the executable is. > /path/to/psi4/install/bin/psi4 --module; /path/to/psi4/install/lib//; > python -c ""import psi4;print(psi4.executable)""; /path/to/psi4/install/bin/psi4. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building ",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:64563,Deployability,update,update,64563,"after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build; How to use logging in Psi4; How to find the Psi4 module from the executable and vice versa. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Installation and Runtime Configuration; Compiling and Installing from Source. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:64708,Deployability,install,installation,64708,"after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build; How to use logging in Psi4; How to find the Psi4 module from the executable and vice versa. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Installation and Runtime Configuration; Compiling and Installing from Source. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:65157,Deployability,update,updated,65157,"after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build; How to use logging in Psi4; How to find the Psi4 module from the executable and vice versa. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Installation and Runtime Configuration; Compiling and Installing from Source. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:27853,Energy Efficiency,energy,energy,27853,"details:; running compiled executable,; running compiled Python module,; running conda binary. PATH pointing to bin; PYTHONPATH pointing to lib (ordinary) or lib/pythonX.X/site-packages (conda); PSIDATADIR pointing to share/psi4. How to run Psi4 as executable after compilation¶; Substituting the full installation directory prefix and a; suitable scratch directory, issue the following commands directly in your; terminal or place them into your “rc” file and open a new terminal. (To; use a staged installation directory, substitute; objdir/stage for prefix.); # csh, tcsh: add to shell or ~/.tcshrc file; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run PSI4.; >>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. How to solve ModuleNotFoundError: No module named 'psi4'¶; You’re using PSI4 in PsiAPI mode (python input.py where; input.py contains import psi4) but the Python interpreter; can’t find the PSI4 Python module. Follow the directions at; How to configure paths for PsiAPI. How to configure paths for PsiAPI¶; If you know the location of the PSI4 executable (bin/psi4); for Psithon mode and want to know the corresponding location to add to; PYTHONPATH for PsiAPI mode, execute psi4 --psiapi. It; will return bash commands to set PATH (for correct python; interpreter) and PYTHONPATH (to find psi4 module) correctly,; after which import psi4 will work.; >>> psi4 --psiapi-path; export PATH=/path/to/dir/of/python/interpreter/against/which/psi4/compiled:$PATH; export PYTHONPATH=/path/to/dir/of/psi4/core-dot-so:$PYTHONPATH.",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:27925,Energy Efficiency,energy,energy,27925,"ule,; running conda binary. PATH pointing to bin; PYTHONPATH pointing to lib (ordinary) or lib/pythonX.X/site-packages (conda); PSIDATADIR pointing to share/psi4. How to run Psi4 as executable after compilation¶; Substituting the full installation directory prefix and a; suitable scratch directory, issue the following commands directly in your; terminal or place them into your “rc” file and open a new terminal. (To; use a staged installation directory, substitute; objdir/stage for prefix.); # csh, tcsh: add to shell or ~/.tcshrc file; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run PSI4.; >>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. How to solve ModuleNotFoundError: No module named 'psi4'¶; You’re using PSI4 in PsiAPI mode (python input.py where; input.py contains import psi4) but the Python interpreter; can’t find the PSI4 Python module. Follow the directions at; How to configure paths for PsiAPI. How to configure paths for PsiAPI¶; If you know the location of the PSI4 executable (bin/psi4); for Psithon mode and want to know the corresponding location to add to; PYTHONPATH for PsiAPI mode, execute psi4 --psiapi. It; will return bash commands to set PATH (for correct python; interpreter) and PYTHONPATH (to find psi4 module) correctly,; after which import psi4 will work.; >>> psi4 --psiapi-path; export PATH=/path/to/dir/of/python/interpreter/against/which/psi4/compiled:$PATH; export PYTHONPATH=/path/to/dir/of/psi4/core-dot-so:$PYTHONPATH. >>> export PATH=/path/to/dir/of/python/interpreter/against/which/p",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:29972,Energy Efficiency,energy,energy,29972,"f/psi4/core-dot-so:$PYTHONPATH. >>> python -c ""import psi4"". >>> python -c ""import psi4;print(psi4.__file__, psi4.__version__)"". How to run Psi4 as Python module after compilation¶; Substituting the full installation directory prefix and a; suitable scratch directory, issue the following commands directly in your; terminal or place them into your “rc” file and open a new terminal. (To; use a staged installation directory, substitute; objdir/stage for prefix.); # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH {prefix}/lib:$PYTHONPATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH={prefix}/lib:$PYTHONPATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. How to configure paths for PsiAPI. Run PSI4.; >>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable or Python module from conda installation¶; The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing PSI4 into a Anaconda,; Miniconda, or Psi4conda distribution, condadist =; ana|mini|psi4conda. To see the message again after initial installation,; with the conda environment active, run .psi4-post-link.sh.; If which conda python psi4 points to your; condadist and echo $PSI_SCRATCH is set, skip ahead to the; “Run PSI4"" commands below. Otherwise, issue the following; commands directly in your terminal or place them into your “rc” file and; open a new terminal.; If you installed the Psi4conda distribution or installed the PSI4; conda package into the main environment of an Anaconda or Miniconda; distribution and a",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:30059,Energy Efficiency,energy,energy,30059,"psi4;print(psi4.__file__, psi4.__version__)"". How to run Psi4 as Python module after compilation¶; Substituting the full installation directory prefix and a; suitable scratch directory, issue the following commands directly in your; terminal or place them into your “rc” file and open a new terminal. (To; use a staged installation directory, substitute; objdir/stage for prefix.); # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH {prefix}/lib:$PYTHONPATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH={prefix}/lib:$PYTHONPATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. How to configure paths for PsiAPI. Run PSI4.; >>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable or Python module from conda installation¶; The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing PSI4 into a Anaconda,; Miniconda, or Psi4conda distribution, condadist =; ana|mini|psi4conda. To see the message again after initial installation,; with the conda environment active, run .psi4-post-link.sh.; If which conda python psi4 points to your; condadist and echo $PSI_SCRATCH is set, skip ahead to the; “Run PSI4"" commands below. Otherwise, issue the following; commands directly in your terminal or place them into your “rc” file and; open a new terminal.; If you installed the Psi4conda distribution or installed the PSI4; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your PATH, as prompted, then; which psi4 likely yields condadist/bin/p",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:31801,Energy Efficiency,energy,energy,31801," open a new terminal.; If you installed the Psi4conda distribution or installed the PSI4; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your PATH, as prompted, then; which psi4 likely yields condadist/bin/psi4 and the PATH; setting lines below are redundant.; If you installed into a conda environment p4env and performed; conda activate p4env, then which psi4 likely yields; condadist/envs/p4env/bin/psi4 and the PATH setting lines; below are redundant.; # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run PSI4 as executable.; >>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. or Run PSI4 as Python module.; >>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable after compilation using driver from source¶; When developing python driver code, it can be annoying to keep makeing to test the code. PSI4 can be run “inplace” through the; following procedure. To be clear, this is running compiled C++ from the; build directory and python from the source directory. This is an expert; option for development, and not all functionality will be available.; >>> cd {objdir}; >>> ln -s {top-level-psi4-dir}/{objdir}/stage/lib/psi4/core.cpython-{ext_wi",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:31873,Energy Efficiency,energy,energy,31873,"or installed the PSI4; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your PATH, as prompted, then; which psi4 likely yields condadist/bin/psi4 and the PATH; setting lines below are redundant.; If you installed into a conda environment p4env and performed; conda activate p4env, then which psi4 likely yields; condadist/envs/p4env/bin/psi4 and the PATH setting lines; below are redundant.; # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run PSI4 as executable.; >>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. or Run PSI4 as Python module.; >>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable after compilation using driver from source¶; When developing python driver code, it can be annoying to keep makeing to test the code. PSI4 can be run “inplace” through the; following procedure. To be clear, this is running compiled C++ from the; build directory and python from the source directory. This is an expert; option for development, and not all functionality will be available.; >>> cd {objdir}; >>> ln -s {top-level-psi4-dir}/{objdir}/stage/lib/psi4/core.cpython-{ext_will_vary}.so ../psi4/core.cpython-{ext_will_vary}.so; >>> python ../",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:32093,Energy Efficiency,energy,energy,32093," are redundant.; If you installed into a conda environment p4env and performed; conda activate p4env, then which psi4 likely yields; condadist/envs/p4env/bin/psi4 and the PATH setting lines; below are redundant.; # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run PSI4 as executable.; >>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. or Run PSI4 as Python module.; >>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable after compilation using driver from source¶; When developing python driver code, it can be annoying to keep makeing to test the code. PSI4 can be run “inplace” through the; following procedure. To be clear, this is running compiled C++ from the; build directory and python from the source directory. This is an expert; option for development, and not all functionality will be available.; >>> cd {objdir}; >>> ln -s {top-level-psi4-dir}/{objdir}/stage/lib/psi4/core.cpython-{ext_will_vary}.so ../psi4/core.cpython-{ext_will_vary}.so; >>> python ../psi4/run_psi4.py --inplace input.dat. Why not to set PSIDATADIR¶; PSIDATADIR is an environment variable containing the location of the; text resource parts of the PSI4 codebase (e.g., basis sets,; databases, EFP fragments). It is ",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:32180,Energy Efficiency,energy,energy,32180,"da activate p4env, then which psi4 likely yields; condadist/envs/p4env/bin/psi4 and the PATH setting lines; below are redundant.; # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run PSI4 as executable.; >>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. or Run PSI4 as Python module.; >>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable after compilation using driver from source¶; When developing python driver code, it can be annoying to keep makeing to test the code. PSI4 can be run “inplace” through the; following procedure. To be clear, this is running compiled C++ from the; build directory and python from the source directory. This is an expert; option for development, and not all functionality will be available.; >>> cd {objdir}; >>> ln -s {top-level-psi4-dir}/{objdir}/stage/lib/psi4/core.cpython-{ext_will_vary}.so ../psi4/core.cpython-{ext_will_vary}.so; >>> python ../psi4/run_psi4.py --inplace input.dat. Why not to set PSIDATADIR¶; PSIDATADIR is an environment variable containing the location of the; text resource parts of the PSI4 codebase (e.g., basis sets,; databases, EFP fragments). It is for developer use only. In PSI4 1.1; and beyond, the program always knows where its",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:45488,Energy Efficiency,efficient,efficient,45488,"el64/libmkl_rt.so"" -DLAPACK_INCLUDE_DIRS=""/path/to/mkl-h-include/"". Build with explicit non-MKL LAPACK. >>> cmake -DLAPACK_LIBRARIES=""/path/to/lib/liblapack.so;/path/to/lib/libblas.a"". Build with MKL and GCC (iomp5 needed instead of gomp for threading. use OpenMP_LIBRARY_DIRS to hint location.). >>> cmake -DLAPACK_LIBRARIES=/opt/intel/mkl/lib/intel64/libmkl_rt.so -DLAPACK_INCLUDE_DIRS=/opt/intel/mkl/include -DOpenMP_LIBRARY_DIRS=/opt/intel/compiler/lib/intel64/. Notes. Much of PSI4‘s speed and efficiency depends on the corresponding; speed and efficiency of the linked BLAS and LAPACK libraries; (especially the former). Consider the following recommendations:. It is NOT wise to use the stock BLAS library provided with many; Linux distributions like RedHat, as it is usually just the completely; unoptimized netlib distribution. The choice of LAPACK is less; critical, and so the unoptimized netlib distribution is acceptable.; Perhaps the best choice, if available, is Intel’s MKL library,; which includes efficient threaded BLAS and LAPACK (as of PSI4; v1.1, earliest known working version is MKL 2013; as of v1.4,; should use at leat MKL 2019). MKL, which is; freely available through conda, is the only threaded BLAS/LAPACK; distribution fully supported by PSI4.; On Mac, the native Accelerate libraries are very nice and would; be recommended but for the potential conflict between PSI4; BLAS and NumPy BLAS. Unless you’ve a special NumPy, avoid!; The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it at your own risk and after testing your; particular distribution, including tests run multithreaded,; if you intend to run PSI4 so. Use at least 0.2.15, and; pay attention to how it was compiled - unthreaded seems safe,; openmp-threaded is mostly safe, default pthreaded is not safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis.; Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last ",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:50436,Energy Efficiency,energy,energy,50436,"to the PSI4; executable. That is, the top line of bin/psi4 is something like; #!/path/to/miniconda/envs/p4deps/bin/python3.5, and that’s the Python; through which PSI4 is running, rather than the Python of which python.; To use a different Python with PSI4 in the short term, just; path/to/desired/python psi4 on the command line to override the; shebang line. To use a different Python with PSI4 in the long term,; edit the shebang line.; If you’re using PSI4 as a Python module, then PSI4 is running; the Python of which python. How to fix “undefined symbol: _Py_FalseStruct”¶; You’re probably loading a Py3-compiled Psi4 in Py2. Switch interpreters; and re-run. A python of proper Py2 or Py3-ness is baked into the PSI4; “executable”, so you’ll see this error only for Psi4 as Python module. How to use gdb and lldb with Psi4¶; Debugging PSI4 has gotten a little confusing now that it’s running through Python. Here’s the syntax; >>> cd {objdir}; >>> lldb -- python stage/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (lldb) run. >>> cd {objdir}; >>> gdb --args python stage/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (gdb) run. How to see the actual compiling commands (or errors) with cmake¶; CMake by default hides a lot of useful debugging information to make the; compilation cleaner. Issue make VERBOSE=1 to display the full; compilation commands and errors. How to highlight git merge conflicts in vi¶; Edit your ~/.vimrc file to include the lines below. Hitting the F7; key will toggle highlighting of git’s conflict markers.; >>> cat ~/.vimrc; set hlsearch; map <F7> :/\(<<<<<<<\\|=======\\|>>>>>>>\)<CR>. How to handle “runtime library may be hidden” when building with Anaconda Python¶; When building against Ana/Miniconda python (e.g., cmake; -DPython_EXECUTABLE=/path/to/conda/bin/python), the warning below often; appears. It is harmless, proceed.; CMake Warning at src/bin/psi4/CMakeLists.txt:58 (add_executable):; Cannot generate a safe runtime search path for target psi4 b",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:50541,Energy Efficiency,energy,energy,50541,"4deps/bin/python3.5, and that’s the Python; through which PSI4 is running, rather than the Python of which python.; To use a different Python with PSI4 in the short term, just; path/to/desired/python psi4 on the command line to override the; shebang line. To use a different Python with PSI4 in the long term,; edit the shebang line.; If you’re using PSI4 as a Python module, then PSI4 is running; the Python of which python. How to fix “undefined symbol: _Py_FalseStruct”¶; You’re probably loading a Py3-compiled Psi4 in Py2. Switch interpreters; and re-run. A python of proper Py2 or Py3-ness is baked into the PSI4; “executable”, so you’ll see this error only for Psi4 as Python module. How to use gdb and lldb with Psi4¶; Debugging PSI4 has gotten a little confusing now that it’s running through Python. Here’s the syntax; >>> cd {objdir}; >>> lldb -- python stage/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (lldb) run. >>> cd {objdir}; >>> gdb --args python stage/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (gdb) run. How to see the actual compiling commands (or errors) with cmake¶; CMake by default hides a lot of useful debugging information to make the; compilation cleaner. Issue make VERBOSE=1 to display the full; compilation commands and errors. How to highlight git merge conflicts in vi¶; Edit your ~/.vimrc file to include the lines below. Hitting the F7; key will toggle highlighting of git’s conflict markers.; >>> cat ~/.vimrc; set hlsearch; map <F7> :/\(<<<<<<<\\|=======\\|>>>>>>>\)<CR>. How to handle “runtime library may be hidden” when building with Anaconda Python¶; When building against Ana/Miniconda python (e.g., cmake; -DPython_EXECUTABLE=/path/to/conda/bin/python), the warning below often; appears. It is harmless, proceed.; CMake Warning at src/bin/psi4/CMakeLists.txt:58 (add_executable):; Cannot generate a safe runtime search path for target psi4 because files in; some directories may conflict with libraries in implicit directories:. runtime library [",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:55489,Energy Efficiency,energy,energy,55489,"est -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. Pytest has similar commands:. Run tests in parallel with -n flag (if Python package pytest-xdist installed). For maximum parallelism: pytest -n auto; Run full test suite: pytest; Run the quick tests: pytest -m quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: pytest -m smoke; Run tests matching by name: pytest -k testname; Run tests excluding those by name: pytest -k ""not testname""; Run tests matching by label: pytest -m testlabel; Run tests excluding those by label: pytest -m ""not testlabel""; Run tests with complicated filtering by name: pytest -k ""cc and not cc4 and not stdsuite""; Run tests and see test names: pytest -v; Run tests and see test names and sometimes more verbose errors: pytest -vv. How to see CTest testing errors¶; >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of “smoke” tests is; generally sufficient to verify an installation. From the executable; # smoke tests only in serial; psi4 --tes",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:55520,Energy Efficiency,energy,energy,55520,"est -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. Pytest has similar commands:. Run tests in parallel with -n flag (if Python package pytest-xdist installed). For maximum parallelism: pytest -n auto; Run full test suite: pytest; Run the quick tests: pytest -m quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: pytest -m smoke; Run tests matching by name: pytest -k testname; Run tests excluding those by name: pytest -k ""not testname""; Run tests matching by label: pytest -m testlabel; Run tests excluding those by label: pytest -m ""not testlabel""; Run tests with complicated filtering by name: pytest -k ""cc and not cc4 and not stdsuite""; Run tests and see test names: pytest -v; Run tests and see test names and sometimes more verbose errors: pytest -vv. How to see CTest testing errors¶; >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of “smoke” tests is; generally sufficient to verify an installation. From the executable; # smoke tests only in serial; psi4 --tes",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:57101,Energy Efficiency,green,green,57101,"), a supplementary test suite is available to be; run via pytest. Running a limited number of “smoke” tests is; generally sufficient to verify an installation. From the executable; # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.); # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". From pytest directly. If package pytest-xdist is installed, can run in parallel.; # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run correctly); FAILED in red is bad.; test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_simint PASSED; test_addons.py::test_json PASSED; test_addons.py::test_cfour SKIPPED; test_addons.py::test_v2rdm_casscf PASSED; test_addons.py::test_grimme_3c PASSED; test_addons.py::test_dkh PASSED; test_psi4.py::test_psi4_basic PASSED; test_psi4.py::test_psi4_cc PASSED; test_psi4.py::test_psi4_cas PASSED; test_psi4.py::test_psi4_dfmp2 PASSED; test_psi4.py::test_psi4_sapt PASSED; test_psi4.py::test_psi4_scfproperty PASSED. How to refer to Psi4¶; Ways to refer to PSI4 in text, in order of decreasing goodness:. as Psi4 in Optima regular font with “si” in cus",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:1953,Integrability,depend,dependencies,1953,"icode.org/installs/latest; (select “source”). For pre-built binaries again well-tested,; performance-tuned, and available for all common operating systems,; see psicode.org/installs/latest (select “conda”).; To see working builds for Linux, Mac, and Windows, see :src:; [this GHA]. Planning: how to configure Psi4 and invoke CMake¶; PSI4 is built through CMake. An abbreviated build guide can be found; within the source itself .; CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it’s very possible that; from top-level-psi4-dir source directory, you can call cmake -S.; -Bobjdir without any further arguments, and it will invoke cmake,; detect some appropriate defaults, configure the build, create a build; directory objdir, and complete, leaving you to only invoke; make or Ninja in the new build directory.; Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within core; dependencies and add-on dependencies to plan a set of arguments to cmake tailored to; your computer. Proceed to quick build or; detailed build. How to build and install Psi4, the compact version¶; This section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; >>> cd {top-level-psi4-dir}; >>> cmake -S. -Bobjdir [your configuration options]; # make; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install; # -or- general; >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. >>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directo",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:1977,Integrability,depend,dependencies,1977,"icode.org/installs/latest; (select “source”). For pre-built binaries again well-tested,; performance-tuned, and available for all common operating systems,; see psicode.org/installs/latest (select “conda”).; To see working builds for Linux, Mac, and Windows, see :src:; [this GHA]. Planning: how to configure Psi4 and invoke CMake¶; PSI4 is built through CMake. An abbreviated build guide can be found; within the source itself .; CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it’s very possible that; from top-level-psi4-dir source directory, you can call cmake -S.; -Bobjdir without any further arguments, and it will invoke cmake,; detect some appropriate defaults, configure the build, create a build; directory objdir, and complete, leaving you to only invoke; make or Ninja in the new build directory.; Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within core; dependencies and add-on dependencies to plan a set of arguments to cmake tailored to; your computer. Proceed to quick build or; detailed build. How to build and install Psi4, the compact version¶; This section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; >>> cd {top-level-psi4-dir}; >>> cmake -S. -Bobjdir [your configuration options]; # make; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install; # -or- general; >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. >>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directo",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:3140,Integrability,depend,dependencies,3140," How to build and install Psi4, the compact version¶; This section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; >>> cd {top-level-psi4-dir}; >>> cmake -S. -Bobjdir [your configuration options]; # make; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install; # -or- general; >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. >>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation). >>> cd {objdir}; >>> cmake --build . -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest and Pytest to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see ",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:3187,Integrability,depend,dependencies,3187,"ore detail is given here.; >>> cd {top-level-psi4-dir}; >>> cmake -S. -Bobjdir [your configuration options]; # make; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install; # -or- general; >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. >>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation). >>> cd {objdir}; >>> cmake --build . -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest and Pytest to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. 6. Install. If tests pass, i",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:3298,Integrability,depend,dependencies,3298,"ore detail is given here.; >>> cd {top-level-psi4-dir}; >>> cmake -S. -Bobjdir [your configuration options]; # make; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install; # -or- general; >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. >>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation). >>> cd {objdir}; >>> cmake --build . -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest and Pytest to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. 6. Install. If tests pass, i",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:4495,Integrability,depend,dependencies,4495,"onfigure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation). >>> cd {objdir}; >>> cmake --build . -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest and Pytest to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. 6. Install. If tests pass, install the code.; >>> cmake --install . 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux and Mac) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it.; See psi4/codedeps.yaml for a structured listing and history of dependencies. C++ and C Compilers (C++20 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (3.8+) https://www.python.org/; CMake (3.15+) https://cmake.org/download/; NumPy (needed at runtime and buildtime) https://numpy.org/; System utilities: GNU make and GNU install or Ninja, POSIX threads (Pthreads) library. The following are also required for PSI4, but if not detected, the; build system will automatically download and build. gau2grid — [what is gau2grid?] [gau2grid min version]; Libint — [",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:4941,Integrability,depend,dependencies,4941,"-j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest and Pytest to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. 6. Install. If tests pass, install the code.; >>> cmake --install . 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux and Mac) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it.; See psi4/codedeps.yaml for a structured listing and history of dependencies. C++ and C Compilers (C++20 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (3.8+) https://www.python.org/; CMake (3.15+) https://cmake.org/download/; NumPy (needed at runtime and buildtime) https://numpy.org/; System utilities: GNU make and GNU install or Ninja, POSIX threads (Pthreads) library. The following are also required for PSI4, but if not detected, the; build system will automatically download and build. gau2grid — [what is gau2grid?] [gau2grid min version]; Libint — [what is Libint?] [Libint min version] (Libint2 as of Nov 2020; added by v1.4). Eigen https://eigen.tuxfamily.org/index.php?title=Main_Page; Boost https://www.boost.org/ header-only preprocessor library. Libxc — [what is Libxc?] [Libxc min version]; pybind11 — [what is Pybind11?] [Pybind11 min version]; QCElemental — [what is QCElemental?]; QCEngine — [what is QCEngine?] (March 2019; added ",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:5972,Integrability,depend,dependency,5972,"ilers (C++20 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (3.8+) https://www.python.org/; CMake (3.15+) https://cmake.org/download/; NumPy (needed at runtime and buildtime) https://numpy.org/; System utilities: GNU make and GNU install or Ninja, POSIX threads (Pthreads) library. The following are also required for PSI4, but if not detected, the; build system will automatically download and build. gau2grid — [what is gau2grid?] [gau2grid min version]; Libint — [what is Libint?] [Libint min version] (Libint2 as of Nov 2020; added by v1.4). Eigen https://eigen.tuxfamily.org/index.php?title=Main_Page; Boost https://www.boost.org/ header-only preprocessor library. Libxc — [what is Libxc?] [Libxc min version]; pybind11 — [what is Pybind11?] [Pybind11 min version]; QCElemental — [what is QCElemental?]; QCEngine — [what is QCEngine?] (March 2019; added by v1.4); optking — [what is optking] (runtime dependency, required at build-time). Additionally, there are runtime-only dependencies:. msgpack-python for MessagePack https://msgpack.org/ (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); NumPy https://numpy.org/; networkx https://github.com/networkx/networkx (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); pint https://pint.readthedocs.io/en/latest/ (transitive dependency of QCElemental); pydantic https://pydantic-docs.helpmanual.io/# (transitive dependency of QCElemental); SciPy https://scipy.org/ (avoidable if necessary by following directions in runtime error message); py-cpuinfo (provides import cpuinfo) https://github.com/workhorsy/py-cpuinfo (transitive dependency of QCEngine); psutil https://github.com/giampaolo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. Boost (September 2016; dropped by v1.1); deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4); MPFR ",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:6046,Integrability,depend,dependencies,6046,"ferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (3.8+) https://www.python.org/; CMake (3.15+) https://cmake.org/download/; NumPy (needed at runtime and buildtime) https://numpy.org/; System utilities: GNU make and GNU install or Ninja, POSIX threads (Pthreads) library. The following are also required for PSI4, but if not detected, the; build system will automatically download and build. gau2grid — [what is gau2grid?] [gau2grid min version]; Libint — [what is Libint?] [Libint min version] (Libint2 as of Nov 2020; added by v1.4). Eigen https://eigen.tuxfamily.org/index.php?title=Main_Page; Boost https://www.boost.org/ header-only preprocessor library. Libxc — [what is Libxc?] [Libxc min version]; pybind11 — [what is Pybind11?] [Pybind11 min version]; QCElemental — [what is QCElemental?]; QCEngine — [what is QCEngine?] (March 2019; added by v1.4); optking — [what is optking] (runtime dependency, required at build-time). Additionally, there are runtime-only dependencies:. msgpack-python for MessagePack https://msgpack.org/ (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); NumPy https://numpy.org/; networkx https://github.com/networkx/networkx (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); pint https://pint.readthedocs.io/en/latest/ (transitive dependency of QCElemental); pydantic https://pydantic-docs.helpmanual.io/# (transitive dependency of QCElemental); SciPy https://scipy.org/ (avoidable if necessary by following directions in runtime error message); py-cpuinfo (provides import cpuinfo) https://github.com/workhorsy/py-cpuinfo (transitive dependency of QCEngine); psutil https://github.com/giampaolo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. Boost (September 2016; dropped by v1.1); deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4); MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer need",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:6125,Integrability,depend,dependency,6125,"(3.15+) https://cmake.org/download/; NumPy (needed at runtime and buildtime) https://numpy.org/; System utilities: GNU make and GNU install or Ninja, POSIX threads (Pthreads) library. The following are also required for PSI4, but if not detected, the; build system will automatically download and build. gau2grid — [what is gau2grid?] [gau2grid min version]; Libint — [what is Libint?] [Libint min version] (Libint2 as of Nov 2020; added by v1.4). Eigen https://eigen.tuxfamily.org/index.php?title=Main_Page; Boost https://www.boost.org/ header-only preprocessor library. Libxc — [what is Libxc?] [Libxc min version]; pybind11 — [what is Pybind11?] [Pybind11 min version]; QCElemental — [what is QCElemental?]; QCEngine — [what is QCEngine?] (March 2019; added by v1.4); optking — [what is optking] (runtime dependency, required at build-time). Additionally, there are runtime-only dependencies:. msgpack-python for MessagePack https://msgpack.org/ (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); NumPy https://numpy.org/; networkx https://github.com/networkx/networkx (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); pint https://pint.readthedocs.io/en/latest/ (transitive dependency of QCElemental); pydantic https://pydantic-docs.helpmanual.io/# (transitive dependency of QCElemental); SciPy https://scipy.org/ (avoidable if necessary by following directions in runtime error message); py-cpuinfo (provides import cpuinfo) https://github.com/workhorsy/py-cpuinfo (transitive dependency of QCEngine); psutil https://github.com/giampaolo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. Boost (September 2016; dropped by v1.1); deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4); MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2; Perl for testing (April 2022; dropped by v1.6). What are the add-on capabilities for Psi4 and what a",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:6285,Integrability,depend,dependency,6285,"OSIX threads (Pthreads) library. The following are also required for PSI4, but if not detected, the; build system will automatically download and build. gau2grid — [what is gau2grid?] [gau2grid min version]; Libint — [what is Libint?] [Libint min version] (Libint2 as of Nov 2020; added by v1.4). Eigen https://eigen.tuxfamily.org/index.php?title=Main_Page; Boost https://www.boost.org/ header-only preprocessor library. Libxc — [what is Libxc?] [Libxc min version]; pybind11 — [what is Pybind11?] [Pybind11 min version]; QCElemental — [what is QCElemental?]; QCEngine — [what is QCEngine?] (March 2019; added by v1.4); optking — [what is optking] (runtime dependency, required at build-time). Additionally, there are runtime-only dependencies:. msgpack-python for MessagePack https://msgpack.org/ (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); NumPy https://numpy.org/; networkx https://github.com/networkx/networkx (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); pint https://pint.readthedocs.io/en/latest/ (transitive dependency of QCElemental); pydantic https://pydantic-docs.helpmanual.io/# (transitive dependency of QCElemental); SciPy https://scipy.org/ (avoidable if necessary by following directions in runtime error message); py-cpuinfo (provides import cpuinfo) https://github.com/workhorsy/py-cpuinfo (transitive dependency of QCEngine); psutil https://github.com/giampaolo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. Boost (September 2016; dropped by v1.1); deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4); MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2; Perl for testing (April 2022; dropped by v1.6). What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respecti",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:6417,Integrability,depend,dependency,6417," automatically download and build. gau2grid — [what is gau2grid?] [gau2grid min version]; Libint — [what is Libint?] [Libint min version] (Libint2 as of Nov 2020; added by v1.4). Eigen https://eigen.tuxfamily.org/index.php?title=Main_Page; Boost https://www.boost.org/ header-only preprocessor library. Libxc — [what is Libxc?] [Libxc min version]; pybind11 — [what is Pybind11?] [Pybind11 min version]; QCElemental — [what is QCElemental?]; QCEngine — [what is QCEngine?] (March 2019; added by v1.4); optking — [what is optking] (runtime dependency, required at build-time). Additionally, there are runtime-only dependencies:. msgpack-python for MessagePack https://msgpack.org/ (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); NumPy https://numpy.org/; networkx https://github.com/networkx/networkx (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); pint https://pint.readthedocs.io/en/latest/ (transitive dependency of QCElemental); pydantic https://pydantic-docs.helpmanual.io/# (transitive dependency of QCElemental); SciPy https://scipy.org/ (avoidable if necessary by following directions in runtime error message); py-cpuinfo (provides import cpuinfo) https://github.com/workhorsy/py-cpuinfo (transitive dependency of QCEngine); psutil https://github.com/giampaolo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. Boost (September 2016; dropped by v1.1); deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4); MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2; Perl for testing (April 2022; dropped by v1.6). What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabl",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:6504,Integrability,depend,dependency,6504,"n]; Libint — [what is Libint?] [Libint min version] (Libint2 as of Nov 2020; added by v1.4). Eigen https://eigen.tuxfamily.org/index.php?title=Main_Page; Boost https://www.boost.org/ header-only preprocessor library. Libxc — [what is Libxc?] [Libxc min version]; pybind11 — [what is Pybind11?] [Pybind11 min version]; QCElemental — [what is QCElemental?]; QCEngine — [what is QCEngine?] (March 2019; added by v1.4); optking — [what is optking] (runtime dependency, required at build-time). Additionally, there are runtime-only dependencies:. msgpack-python for MessagePack https://msgpack.org/ (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); NumPy https://numpy.org/; networkx https://github.com/networkx/networkx (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); pint https://pint.readthedocs.io/en/latest/ (transitive dependency of QCElemental); pydantic https://pydantic-docs.helpmanual.io/# (transitive dependency of QCElemental); SciPy https://scipy.org/ (avoidable if necessary by following directions in runtime error message); py-cpuinfo (provides import cpuinfo) https://github.com/workhorsy/py-cpuinfo (transitive dependency of QCEngine); psutil https://github.com/giampaolo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. Boost (September 2016; dropped by v1.1); deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4); MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2; Perl for testing (April 2022; dropped by v1.6). What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testi",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:6622,Integrability,message,message,6622,"https://eigen.tuxfamily.org/index.php?title=Main_Page; Boost https://www.boost.org/ header-only preprocessor library. Libxc — [what is Libxc?] [Libxc min version]; pybind11 — [what is Pybind11?] [Pybind11 min version]; QCElemental — [what is QCElemental?]; QCEngine — [what is QCEngine?] (March 2019; added by v1.4); optking — [what is optking] (runtime dependency, required at build-time). Additionally, there are runtime-only dependencies:. msgpack-python for MessagePack https://msgpack.org/ (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); NumPy https://numpy.org/; networkx https://github.com/networkx/networkx (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); pint https://pint.readthedocs.io/en/latest/ (transitive dependency of QCElemental); pydantic https://pydantic-docs.helpmanual.io/# (transitive dependency of QCElemental); SciPy https://scipy.org/ (avoidable if necessary by following directions in runtime error message); py-cpuinfo (provides import cpuinfo) https://github.com/workhorsy/py-cpuinfo (transitive dependency of QCEngine); psutil https://github.com/giampaolo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. Boost (September 2016; dropped by v1.1); deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4); MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2; Perl for testing (April 2022; dropped by v1.6). What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing. CTest https://cmake.org/download/; pytest (for installed testing) http://doc.pytest.org/en/lat",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:6721,Integrability,depend,dependency,6721," library. Libxc — [what is Libxc?] [Libxc min version]; pybind11 — [what is Pybind11?] [Pybind11 min version]; QCElemental — [what is QCElemental?]; QCEngine — [what is QCEngine?] (March 2019; added by v1.4); optking — [what is optking] (runtime dependency, required at build-time). Additionally, there are runtime-only dependencies:. msgpack-python for MessagePack https://msgpack.org/ (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); NumPy https://numpy.org/; networkx https://github.com/networkx/networkx (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); pint https://pint.readthedocs.io/en/latest/ (transitive dependency of QCElemental); pydantic https://pydantic-docs.helpmanual.io/# (transitive dependency of QCElemental); SciPy https://scipy.org/ (avoidable if necessary by following directions in runtime error message); py-cpuinfo (provides import cpuinfo) https://github.com/workhorsy/py-cpuinfo (transitive dependency of QCEngine); psutil https://github.com/giampaolo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. Boost (September 2016; dropped by v1.1); deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4); MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2; Perl for testing (April 2022; dropped by v1.6). What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing. CTest https://cmake.org/download/; pytest (for installed testing) http://doc.pytest.org/en/latest/; pytest-xdist (for installed testing many tests at once) https://github.com/pytest-dev/pytest-xdist. PS",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:6801,Integrability,depend,dependency,6801,"at is Pybind11?] [Pybind11 min version]; QCElemental — [what is QCElemental?]; QCEngine — [what is QCEngine?] (March 2019; added by v1.4); optking — [what is optking] (runtime dependency, required at build-time). Additionally, there are runtime-only dependencies:. msgpack-python for MessagePack https://msgpack.org/ (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); NumPy https://numpy.org/; networkx https://github.com/networkx/networkx (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); pint https://pint.readthedocs.io/en/latest/ (transitive dependency of QCElemental); pydantic https://pydantic-docs.helpmanual.io/# (transitive dependency of QCElemental); SciPy https://scipy.org/ (avoidable if necessary by following directions in runtime error message); py-cpuinfo (provides import cpuinfo) https://github.com/workhorsy/py-cpuinfo (transitive dependency of QCEngine); psutil https://github.com/giampaolo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. Boost (September 2016; dropped by v1.1); deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4); MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2; Perl for testing (April 2022; dropped by v1.6). What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing. CTest https://cmake.org/download/; pytest (for installed testing) http://doc.pytest.org/en/latest/; pytest-xdist (for installed testing many tests at once) https://github.com/pytest-dev/pytest-xdist. PSI4 Documentation (available pre-built at psicode.org/psi4manual/master/",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:7174,Integrability,depend,dependencies,7174,"4); NumPy https://numpy.org/; networkx https://github.com/networkx/networkx (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); pint https://pint.readthedocs.io/en/latest/ (transitive dependency of QCElemental); pydantic https://pydantic-docs.helpmanual.io/# (transitive dependency of QCElemental); SciPy https://scipy.org/ (avoidable if necessary by following directions in runtime error message); py-cpuinfo (provides import cpuinfo) https://github.com/workhorsy/py-cpuinfo (transitive dependency of QCEngine); psutil https://github.com/giampaolo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. Boost (September 2016; dropped by v1.1); deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4); MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2; Perl for testing (April 2022; dropped by v1.6). What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing. CTest https://cmake.org/download/; pytest (for installed testing) http://doc.pytest.org/en/latest/; pytest-xdist (for installed testing many tests at once) https://github.com/pytest-dev/pytest-xdist. PSI4 Documentation (available pre-built at psicode.org/psi4manual/master/index.html). Sphinx (3.5+) http://sphinx-doc.org; Perl (for some auto-documentation scripts) https://www.perl.org/; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; See [“message” lines] for advice on obtaining docs dependencies or [conda env spec]; See psi4/.github/workflows/docs.yml for full d",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:7330,Integrability,depend,dependencies,7330,"l for QCElemental but required for PSI4); pint https://pint.readthedocs.io/en/latest/ (transitive dependency of QCElemental); pydantic https://pydantic-docs.helpmanual.io/# (transitive dependency of QCElemental); SciPy https://scipy.org/ (avoidable if necessary by following directions in runtime error message); py-cpuinfo (provides import cpuinfo) https://github.com/workhorsy/py-cpuinfo (transitive dependency of QCEngine); psutil https://github.com/giampaolo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. Boost (September 2016; dropped by v1.1); deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4); MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2; Perl for testing (April 2022; dropped by v1.6). What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing. CTest https://cmake.org/download/; pytest (for installed testing) http://doc.pytest.org/en/latest/; pytest-xdist (for installed testing many tests at once) https://github.com/pytest-dev/pytest-xdist. PSI4 Documentation (available pre-built at psicode.org/psi4manual/master/index.html). Sphinx (3.5+) http://sphinx-doc.org; Perl (for some auto-documentation scripts) https://www.perl.org/; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; See [“message” lines] for advice on obtaining docs dependencies or [conda env spec]; See psi4/.github/workflows/docs.yml for full docs building procedure to follow. Ambit — https://github.com/jturney/ambit; CheMPS2 — [what is CheMPS2?] [CheMPS2 min versi",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:8072,Integrability,message,message,8072,"ed by v1.6). What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing. CTest https://cmake.org/download/; pytest (for installed testing) http://doc.pytest.org/en/latest/; pytest-xdist (for installed testing many tests at once) https://github.com/pytest-dev/pytest-xdist. PSI4 Documentation (available pre-built at psicode.org/psi4manual/master/index.html). Sphinx (3.5+) http://sphinx-doc.org; Perl (for some auto-documentation scripts) https://www.perl.org/; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; See [“message” lines] for advice on obtaining docs dependencies or [conda env spec]; See psi4/.github/workflows/docs.yml for full docs building procedure to follow. Ambit — https://github.com/jturney/ambit; CheMPS2 — [what is CheMPS2?] [CheMPS2 min version]. HDF5 https://support.hdfgroup.org/HDF5/; zlib http://www.zlib.net/. ecpint — [what is ecpint?] [ecpint min version]; dkh — [what is dkh?] [dkh min version]. Fortran Compiler. gdma — [what is gdma?] [gdma min version]. Fortran Compiler. PCMSolver — [what is PCMSolver?]. Fortran Compiler; zlib http://www.zlib.net/. simint — [what is simint?] [simint min version]. Additionally, there are runtime-loaded capabilities:. PylibEFP & libefp — [what is LibEFP?] [LibEFP min version]; cfour — [what is CFOUR?]; dftd3 — [what is DFTD3?]; simple-dftd3 — [what is DFTD3?] (Nov 2022; added by v1.7) preferred alternative to dftd3 https://github.com/dftd3/simple-dftd3; gcp — [what is gCP?]; mctc-gcp — [what is gCP?] (Nov 2022; added by v1.7) preferred alternative to gcp https://github",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:8117,Integrability,depend,dependencies,8117,"ed by v1.6). What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing. CTest https://cmake.org/download/; pytest (for installed testing) http://doc.pytest.org/en/latest/; pytest-xdist (for installed testing many tests at once) https://github.com/pytest-dev/pytest-xdist. PSI4 Documentation (available pre-built at psicode.org/psi4manual/master/index.html). Sphinx (3.5+) http://sphinx-doc.org; Perl (for some auto-documentation scripts) https://www.perl.org/; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; See [“message” lines] for advice on obtaining docs dependencies or [conda env spec]; See psi4/.github/workflows/docs.yml for full docs building procedure to follow. Ambit — https://github.com/jturney/ambit; CheMPS2 — [what is CheMPS2?] [CheMPS2 min version]. HDF5 https://support.hdfgroup.org/HDF5/; zlib http://www.zlib.net/. ecpint — [what is ecpint?] [ecpint min version]; dkh — [what is dkh?] [dkh min version]. Fortran Compiler. gdma — [what is gdma?] [gdma min version]. Fortran Compiler. PCMSolver — [what is PCMSolver?]. Fortran Compiler; zlib http://www.zlib.net/. simint — [what is simint?] [simint min version]. Additionally, there are runtime-loaded capabilities:. PylibEFP & libefp — [what is LibEFP?] [LibEFP min version]; cfour — [what is CFOUR?]; dftd3 — [what is DFTD3?]; simple-dftd3 — [what is DFTD3?] (Nov 2022; added by v1.7) preferred alternative to dftd3 https://github.com/dftd3/simple-dftd3; gcp — [what is gCP?]; mctc-gcp — [what is gCP?] (Nov 2022; added by v1.7) preferred alternative to gcp https://github",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:9986,Integrability,depend,dependencies,9986,"-dftd3; gcp — [what is gCP?]; mctc-gcp — [what is gCP?] (Nov 2022; added by v1.7) preferred alternative to gcp https://github.com/grimme-lab/gcp; dftd4 — <sec:dftd3> https://github.com/dftd4/dftd4; mrcc — [what is MPCC?]; v2rdm_casscf — [what is v2rdm_casscf?]; sns-mp2 — https://github.com/DEShawResearch/sns-mp2/commits/master; resp — https://github.com/cdsgroup/resp; gpu_dfcc — https://github.com/edeprince3/gpu_dfcc/commits/master; OpenFermion-Psi4 — https://github.com/quantumlib/OpenFermion; cppe — https://github.com/maxscheurer/cppe; mp2d — https://github.com/Chandemonium/MP2D; FockCI — https://github.com/shannonhouck/psi4fockci; cct3 — https://github.com/piecuch-group/cct3; adcc — https://github.com/adc-connect/adcc; BrianQC — https://www.brianqc.com/; i-PI — http://ipi-code.org/; psixas — https://github.com/Masterluke87/psixas; MDI — https://github.com/MolSSI-MDI/MDI_Library; ddx — https://github.com/ddsolvation/ddx. How to use conda to get a Psi4 development environment¶; PSI4 has a lot of dependencies, some of which are complicated; to build. Fortunately, conda can supply them all. A conda; package psi4-dev is available to gather the dependencies; and build tools needed to compiler PSI4 from source. Go to; psicode.org/installs/latest, select “source” and “nightly build” along; with Linux/Mac and a Python version. Follow its instructions to create; a conda environment that has a script psi4-path-advisor. Running; psi4-path-advisor --help shows more options. Running the script; without arguments gives a cmake command that supplies paths to dependency; conda packages to CMake’s cache. You can add further cmake options to; this command when you execute it. Once the cmake command has built your; objdir, you can build PSI4. Remember to activate this; conda environment during PSI4 running or development. There are a; few extra options to psi4-path-advisor to set up using conda’s GNU; compilers (on Linux), conda’s Clang compilers (on Mac; less reliably),; or your own",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:10134,Integrability,depend,dependencies,10134," https://github.com/dftd4/dftd4; mrcc — [what is MPCC?]; v2rdm_casscf — [what is v2rdm_casscf?]; sns-mp2 — https://github.com/DEShawResearch/sns-mp2/commits/master; resp — https://github.com/cdsgroup/resp; gpu_dfcc — https://github.com/edeprince3/gpu_dfcc/commits/master; OpenFermion-Psi4 — https://github.com/quantumlib/OpenFermion; cppe — https://github.com/maxscheurer/cppe; mp2d — https://github.com/Chandemonium/MP2D; FockCI — https://github.com/shannonhouck/psi4fockci; cct3 — https://github.com/piecuch-group/cct3; adcc — https://github.com/adc-connect/adcc; BrianQC — https://www.brianqc.com/; i-PI — http://ipi-code.org/; psixas — https://github.com/Masterluke87/psixas; MDI — https://github.com/MolSSI-MDI/MDI_Library; ddx — https://github.com/ddsolvation/ddx. How to use conda to get a Psi4 development environment¶; PSI4 has a lot of dependencies, some of which are complicated; to build. Fortunately, conda can supply them all. A conda; package psi4-dev is available to gather the dependencies; and build tools needed to compiler PSI4 from source. Go to; psicode.org/installs/latest, select “source” and “nightly build” along; with Linux/Mac and a Python version. Follow its instructions to create; a conda environment that has a script psi4-path-advisor. Running; psi4-path-advisor --help shows more options. Running the script; without arguments gives a cmake command that supplies paths to dependency; conda packages to CMake’s cache. You can add further cmake options to; this command when you execute it. Once the cmake command has built your; objdir, you can build PSI4. Remember to activate this; conda environment during PSI4 running or development. There are a; few extra options to psi4-path-advisor to set up using conda’s GNU; compilers (on Linux), conda’s Clang compilers (on Mac; less reliably),; or your own Intel compilers backed by conda’s GNU compilers (on Linux).; >>> git clone https://github.com/psi4/psi4.git && cd psi4; >>> conda create -n p4dev psi4-dev python=3.",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:10546,Integrability,depend,dependency,10546,"ttps://github.com/Chandemonium/MP2D; FockCI — https://github.com/shannonhouck/psi4fockci; cct3 — https://github.com/piecuch-group/cct3; adcc — https://github.com/adc-connect/adcc; BrianQC — https://www.brianqc.com/; i-PI — http://ipi-code.org/; psixas — https://github.com/Masterluke87/psixas; MDI — https://github.com/MolSSI-MDI/MDI_Library; ddx — https://github.com/ddsolvation/ddx. How to use conda to get a Psi4 development environment¶; PSI4 has a lot of dependencies, some of which are complicated; to build. Fortunately, conda can supply them all. A conda; package psi4-dev is available to gather the dependencies; and build tools needed to compiler PSI4 from source. Go to; psicode.org/installs/latest, select “source” and “nightly build” along; with Linux/Mac and a Python version. Follow its instructions to create; a conda environment that has a script psi4-path-advisor. Running; psi4-path-advisor --help shows more options. Running the script; without arguments gives a cmake command that supplies paths to dependency; conda packages to CMake’s cache. You can add further cmake options to; this command when you execute it. Once the cmake command has built your; objdir, you can build PSI4. Remember to activate this; conda environment during PSI4 running or development. There are a; few extra options to psi4-path-advisor to set up using conda’s GNU; compilers (on Linux), conda’s Clang compilers (on Mac; less reliably),; or your own Intel compilers backed by conda’s GNU compilers (on Linux).; >>> git clone https://github.com/psi4/psi4.git && cd psi4; >>> conda create -n p4dev psi4-dev python=3.8 -c psi4/label/dev; >>> conda activate p4dev; >>> `psi4-path-advisor --gcc`; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`. How to configure code to use high angular momentum basis sets¶; The Libint integral code handles; arbitrary order angular momentum (AM), but compiling that is; prohibitive. The build process for Libint2 takes longer than; for Libint1, so it’s recommended ",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:14865,Integrability,interface,interfacelib,14865,"gular momentum integrals from conda¶; Libint2 conda packages are available from conda for Linux, Mac, and Windows.; The Linux package has base MAX_AM_ERI=7 and can run 7z energies; and gradients conventional, 6z energies and gradients density-fitted,; and qz Hessians both conventional and density fitted.; The Mac and Windows packages have base MAX_AM_ERI=5 and can run; 5z energies, qz gradients, and tz Hessians, both conventional and; density-fitted.; Details about angular momentum settings are available here; psi4/external/upstream/libint2/CMakeLists.txt; . How to see what build configuration options are available¶; CMake doesn’t provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:; cmake_policy(SET CMP0167 OLD); endif (); # 3.15: useable FindPython with NumPy component and LOCATION; # 3.8: CXX_STANDARD recognizes C++17; # 3.3: EP_add(DEPENDS interfacelib, CheckFortranCompilerFlag; # 3.2: continue(); # 3.1: CMAKE_CXX_STANDARD, BUILD_ALWAYS. set(CMAKE_BUILD_TYPE ""Release"" CACHE STRING ""Choose the type of build."") # foil Ninja Debug on Windows. project(psi4; LANGUAGES C CXX); set(psi4_URL ""http://www.psicode.org/""); set(psi4_EMAIL ""psi4aiqc+cmake@gmail.com""); set(psi4_LICENSE ""GNU Lesser General Public License, version 3 (LGPL-3.0)""); set(psi4_DESCRIPTION ""Open-Source Quantum Chemistry""). list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake). message(STATUS ""Building using CMake ${CMAKE_VERSION} Generator ${CMAKE_GENERATOR}""). ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. # <<< ",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:15384,Integrability,message,message,15384,"MakeLists.txt; . How to see what build configuration options are available¶; CMake doesn’t provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:; cmake_policy(SET CMP0167 OLD); endif (); # 3.15: useable FindPython with NumPy component and LOCATION; # 3.8: CXX_STANDARD recognizes C++17; # 3.3: EP_add(DEPENDS interfacelib, CheckFortranCompilerFlag; # 3.2: continue(); # 3.1: CMAKE_CXX_STANDARD, BUILD_ALWAYS. set(CMAKE_BUILD_TYPE ""Release"" CACHE STRING ""Choose the type of build."") # foil Ninja Debug on Windows. project(psi4; LANGUAGES C CXX); set(psi4_URL ""http://www.psicode.org/""); set(psi4_EMAIL ""psi4aiqc+cmake@gmail.com""); set(psi4_LICENSE ""GNU Lesser General Public License, version 3 (LGPL-3.0)""); set(psi4_DESCRIPTION ""Open-Source Quantum Chemistry""). list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake). message(STATUS ""Building using CMake ${CMAKE_VERSION} Generator ${CMAKE_GENERATOR}""). ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++20 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint >=0.10 (runtime only; e.g., `conda install pint -c conda-forge`); # - pydan",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:15893,Integrability,depend,dependencies,15893,"ontinue(); # 3.1: CMAKE_CXX_STANDARD, BUILD_ALWAYS. set(CMAKE_BUILD_TYPE ""Release"" CACHE STRING ""Choose the type of build."") # foil Ninja Debug on Windows. project(psi4; LANGUAGES C CXX); set(psi4_URL ""http://www.psicode.org/""); set(psi4_EMAIL ""psi4aiqc+cmake@gmail.com""); set(psi4_LICENSE ""GNU Lesser General Public License, version 3 (LGPL-3.0)""); set(psi4_DESCRIPTION ""Open-Source Quantum Chemistry""). list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake). message(STATUS ""Building using CMake ${CMAKE_VERSION} Generator ${CMAKE_GENERATOR}""). ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++20 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint >=0.10 (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - Eigen (for Libint2; e.g., `conda install eigen`); # - Boost (header-only libs for Libint2; e.g., `conda install boost-cpp`); # - SciPy (runtime only; avoidable through keyword setting; e.g., `conda install scipy`); # - py-cpuinfo (runtime only; e.g., `conda install py-cpuinfo`); # - psutil (runtime only; e.g., `conda install psutil`). #",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:17345,Integrability,depend,dependencies,17345,"`conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - Eigen (for Libint2; e.g., `conda install eigen`); # - Boost (header-only libs for Libint2; e.g., `conda install boost-cpp`); # - SciPy (runtime only; avoidable through keyword setting; e.g., `conda install scipy`); # - py-cpuinfo (runtime only; e.g., `conda install py-cpuinfo`); # - psutil (runtime only; e.g., `conda install psutil`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - Python_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python3.7)""; # - Python_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python3.7.so)""; # - Python_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python3.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheMPS2, dkh, ecpint, libefp, Einsums, gau2grid, gdma, Libint2, PCMSolver, pybind11, pylibefp,; # qcelemental, qcengine, optking, simint, Libxc, IntegratorXX, gauxc; # - CMAKE_PREFIX_PATH ""Set to list of root directories to look for externally built add-ons and dependencies; # (e.g., /path/to/install-libint;/path/to/install-gdma where exists /path/to/install-libint/lib/libderiv.a)""; # - ${AddOn}_DIR ""Set to directory containing ${AddOn}Config.cmake file to facilitate detection of external build""; # - CMAKE_DISABLE_FIND_PACKAGE_${AddON} ""Set to ON to force internal build""; # - CMAKE_",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:18052,Integrability,depend,dependencies,18052," # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - Python_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python3.7)""; # - Python_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python3.7.so)""; # - Python_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python3.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheMPS2, dkh, ecpint, libefp, Einsums, gau2grid, gdma, Libint2, PCMSolver, pybind11, pylibefp,; # qcelemental, qcengine, optking, simint, Libxc, IntegratorXX, gauxc; # - CMAKE_PREFIX_PATH ""Set to list of root directories to look for externally built add-ons and dependencies; # (e.g., /path/to/install-libint;/path/to/install-gdma where exists /path/to/install-libint/lib/libderiv.a)""; # - ${AddOn}_DIR ""Set to directory containing ${AddOn}Config.cmake file to facilitate detection of external build""; # - CMAKE_DISABLE_FIND_PACKAGE_${AddON} ""Set to ON to force internal build""; # - CMAKE_INSIST_FIND_PACKAGE_${AddON} ""Set to ON to force external detect"". # <<< Detecting BLAS/LAPACK >>>; #; # - ENV(MATH_ROOT) ""Root directory where BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib/libblas.so)""; # - BLAS_TYPE ""Target BLAS distribution for math detection; # (default: search order MKL>FLEXIBLAS>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_TYPE ""Target LAPACK distribution for math detection; # (default: search order MKL>FLEXIBLAS>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:21995,Integrability,interface,interface,21995,"on(ENABLE_cppe ""Enables CPPE for Polarizable Embedding"" OFF); option(ENABLE_adcc ""Enables adcc for algebraic-diagrammatic construction methods (requires libtensorlight; can also be added at runtime)"" OFF); option(ENABLE_ddx ""Enables ddx for domain-decomposition contiuum solvation models (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_dkh ""Enables DKH integrals (requires Fortran)"" OFF); option(ENABLE_ecpint ""Enables libecpint for effective core potentials (ECP)"" OFF); option(ENABLE_libefp ""Enables LIBEFP and PylibEFP for fragments"" OFF); option(ENABLE_Einsums ""Enables the Einsums tensor library"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gauxc ""Enables use of GauXC density functional library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); option(ENABLE_snsmp2 ""Enables SNSMP2 plugin (can also be added at runtime)"" OFF); option(ENABLE_v2rdm_casscf ""Enables V2RDM_CASSCF plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_psi4fockci ""Enables Psi4FockCI plugin (can also be added at runtime)"" OFF); option(ENABLE_cct3 ""Enables cct3 plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_gpu_dfcc ""Enables GPU_DFCC plugin for gpu-accelerated df-cc (requires CUDA; can also be added at runtime)"" OFF); option(ENABLE_mdi ""Enables MolSSI driver interface"" OFF); option(ENABLE_BrianQC ""Enables the BrianQC GPU module (requires CUDA; requires separate installation and licensing of the BrianQC module)"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF); option(psi4_SKIP_ENABLE_Fortran ""Suppress enabling Fortran language even when Fortran addons enabled.",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:22646,Integrability,message,message,22646,"ded at runtime)"" OFF); option(ENABLE_psi4fockci ""Enables Psi4FockCI plugin (can also be added at runtime)"" OFF); option(ENABLE_cct3 ""Enables cct3 plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_gpu_dfcc ""Enables GPU_DFCC plugin for gpu-accelerated df-cc (requires CUDA; can also be added at runtime)"" OFF); option(ENABLE_mdi ""Enables MolSSI driver interface"" OFF); option(ENABLE_BrianQC ""Enables the BrianQC GPU module (requires CUDA; requires separate installation and licensing of the BrianQC module)"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF); option(psi4_SKIP_ENABLE_Fortran ""Suppress enabling Fortran language even when Fortran addons enabled. Use when only linking pre-built, not compiling addon code."" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. How to install elsewhere than /usr/local/psi4¶; The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable CMAKE_INSTALL_PREFIX; before compiling. Build with Specific Install Directory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders un",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:30472,Integrability,message,message,30472,"NPATH {prefix}/lib:$PYTHONPATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH={prefix}/lib:$PYTHONPATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. How to configure paths for PsiAPI. Run PSI4.; >>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable or Python module from conda installation¶; The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing PSI4 into a Anaconda,; Miniconda, or Psi4conda distribution, condadist =; ana|mini|psi4conda. To see the message again after initial installation,; with the conda environment active, run .psi4-post-link.sh.; If which conda python psi4 points to your; condadist and echo $PSI_SCRATCH is set, skip ahead to the; “Run PSI4"" commands below. Otherwise, issue the following; commands directly in your terminal or place them into your “rc” file and; open a new terminal.; If you installed the Psi4conda distribution or installed the PSI4; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your PATH, as prompted, then; which psi4 likely yields condadist/bin/psi4 and the PATH; setting lines below are redundant.; If you installed into a conda environment p4env and performed; conda activate p4env, then which psi4 likely yields; condadist/envs/p4env/bin/psi4 and the PATH setting lines; below are redundant.; # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:37529,Integrability,rout,route,37529,"0 compliance.; This compliance is checked for at build-time with file; psi4/cmake/custom_cxxstandard.cmake, so either consult that file or; try a test build to ensure your compiler is approved. Note that Intel; compilers on Linux also rely on GCC, so both icpc and gcc versions are checked.; Intel OneAPI Classic compilers work fine, as do OneAPI Clang icpx compilers. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS. How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew¶; The easiest compiler to obtain is clang which is a drop-in replacement; for gcc and g++. Just install XCode. Some old versions; of XCode can’t handle some of the advanced C++ language features, but this; is a software not hardware limitation. Checks for version compliance; performed at build-time. Note that this “AppleClang” will not be compatible; with conda Mac packages using C++11, nor can it make use of OpenMP directives.; Another route to obtaining clang compilers without the above limitations; is through conda.; # Install Clang 4.0.1 into a non-primary conda environment; >>> conda create -n clang401 clangxx_osx-64 clang_osx-64 llvm-openmp intel-openmp. # To Build, activate environment (prepends PATH and defines environment variables CLANG, CLANGXX, HOST, etc):; >>> conda activate clang401; >>> echo ${CLANGXX}; /path/to/miniconda/envs/clang401/bin/x86_64-apple-darwin13.4.0-clang++; >>> echo ${HOST}; x86_64-apple-darwin13.4.0. # build with Clang; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=${CLANG} \; -DCMAKE_CXX_COMPILER=${CLANGXX} \; -DCMAKE_CXX_FLAGS=""-stdlib=libc++"" \; -DOpenMP_CXX_FLAG=""-fopenmp=libiomp5"". # build with Intel; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-clang-name=${CLANG}"" \; -DCMAKE_CXX_FLAGS=""-clang-name=${CLANG} -clangxx-name=${CLANGXX} -stdlib=libc++ -I${CONDA_PREFIX}/include/c++/v1"". # Configure and build. How to satisfy the GCC >= 4.9 requirement on Linux without upda",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:38989,Integrability,rout,route,38989,"6_64-apple-darwin13.4.0. # build with Clang; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=${CLANG} \; -DCMAKE_CXX_COMPILER=${CLANGXX} \; -DCMAKE_CXX_FLAGS=""-stdlib=libc++"" \; -DOpenMP_CXX_FLAG=""-fopenmp=libiomp5"". # build with Intel; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-clang-name=${CLANG}"" \; -DCMAKE_CXX_FLAGS=""-clang-name=${CLANG} -clangxx-name=${CLANGXX} -stdlib=libc++ -I${CONDA_PREFIX}/include/c++/v1"". # Configure and build. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS¶; # See if GCC too old (in this case, yes); >>> gcc --version; gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-4). Even if you’re not using GCC as a compiler, your Intel compiler seeks; gcc to generate code compatible with your current GCC version. If your; GCC is too old (like above), you can update your system GCC through your; package manager or install an acceptable version elsewhere on your; system. The latter route, tested on Linux with Intel compilers, is below.; # Install GCC 7.2 into a non-primary conda environment; >>> conda create -n gcc72 gxx_linux-64 gcc_linux-64. # To Build, either:. # (A) activate environment (prepends PATH and defines environment variables CC, CXX, HOST, etc); >>> conda activate gcc72; >>> echo ${CXX}; /path/to/miniconda/envs/gcc72/bin/x86_64-conda_cos6-linux-gnu-g++; >>> echo ${HOST}; x86_64-conda_cos6-linux-gnu. # build with GNU; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=${CC} \; -DCMAKE_CXX_COMPILER=${CXX} \. # build with Intel; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${HOST}-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${HOST}-"" \. # (B) tell CMake to tell the compiler which GCC to use; >>> GCC7=/path/to/miniconda/envs/gcc72; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${GCC7}/bin/",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:44983,Integrability,depend,depends,44983,"th/to/intel/vers/linux/mkl/ cmake. Build with Intel MKL from conda (install mkl-devel package from defaults channel). >>> cmake -DLAPACK_LIBRARIES=""${CONDA_PREFIX}/lib/libmkl_rt.so"" -DLAPACK_INCLUDE_DIRS=""${CONDA_PREFIX}/include"". OpenBLAS - see note below. >>> MATH_ROOT=/path/to/openblas/0.2.13_seq/x86_64/gcc_5.2.0/lib cmake. Build with explicit MKL LAPACK. >>> cmake -DLAPACK_LIBRARIES=""/path/to/lib/intel64/libmkl_lapack95_lp64.a;/path/to/lib/intel64/libmkl_rt.so"" -DLAPACK_INCLUDE_DIRS=""/path/to/mkl-h-include/"". Build with explicit non-MKL LAPACK. >>> cmake -DLAPACK_LIBRARIES=""/path/to/lib/liblapack.so;/path/to/lib/libblas.a"". Build with MKL and GCC (iomp5 needed instead of gomp for threading. use OpenMP_LIBRARY_DIRS to hint location.). >>> cmake -DLAPACK_LIBRARIES=/opt/intel/mkl/lib/intel64/libmkl_rt.so -DLAPACK_INCLUDE_DIRS=/opt/intel/mkl/include -DOpenMP_LIBRARY_DIRS=/opt/intel/compiler/lib/intel64/. Notes. Much of PSI4‘s speed and efficiency depends on the corresponding; speed and efficiency of the linked BLAS and LAPACK libraries; (especially the former). Consider the following recommendations:. It is NOT wise to use the stock BLAS library provided with many; Linux distributions like RedHat, as it is usually just the completely; unoptimized netlib distribution. The choice of LAPACK is less; critical, and so the unoptimized netlib distribution is acceptable.; Perhaps the best choice, if available, is Intel’s MKL library,; which includes efficient threaded BLAS and LAPACK (as of PSI4; v1.1, earliest known working version is MKL 2013; as of v1.4,; should use at leat MKL 2019). MKL, which is; freely available through conda, is the only threaded BLAS/LAPACK; distribution fully supported by PSI4.; On Mac, the native Accelerate libraries are very nice and would; be recommended but for the potential conflict between PSI4; BLAS and NumPy BLAS. Unless you’ve a special NumPy, avoid!; The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it a",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:48023,Integrability,interface,interface,48023,"ussions.; Choose your NumPy and PSI4 compile conditions to use the same; BLAS distribution.; The BLAS/LAPACK detected for PSI4 are also linked into any; Add-Ons (e.g., libefp) that require them, rather than relying on; those packages’ native math detection.; The separation between BLAS and LAPACK seen in detection printing; and CMake variables is purely formal. In practice, they get run; together and linked as ${LAPACK_LIBRARIES} ${BLAS_LIBRARIES}.; Sometimes the CMake’s library search capabilites falter at SONAMEs; (e.g., libblas.so.3 vs. libblas.so), extensions (static; vs. dynamic), or suffixes (e.g., libacml_mp.so vs.; libacml.so). The developers would be interested in hearing; of such problems to expand the math detection capabilities. The; immediate solution, however, is to form symlinks between the; library names that exist and the names expected. Consult file; psi4/cmake/math/MathLibs.cmake for the library patterns being; sought.; The BLAS/LAPACK interface is standardized, so only libraries, not; headers, need to be detected. The exception is MKL, where the mkl.h; header defines additional functionality; it must be located to use; BLAS threading. How to configure Python for building Psi4¶; Role and Dependencies. Role — In PSI4, Python allows the core compiled C++ code to; be flexibly accessed for manipulation and extension in an interpreted; language.; Downstream Dependencies — PSI4 \(\Leftarrow\) Python Interpreter. CMake Variables; Note that in v1.4, PSI4 switched from Numpy-written CMake Python; detection to new CMake-written CMake Python detection. Usually only; Python_EXECUTABLE is now needed to hint Python’s location. See; https://cmake.org/cmake/help/latest/module/FindPython.html for full; guidance. Python_EXECUTABLE — specify name or full path to Python interpreter.; Python_LIBRARY — specify path to Python library.; Python_INCLUDE_DIR — specify directory of Python headers. Contains Python.h. Examples. Build with detected Python from PATH. >>> cmake. ",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:53159,Integrability,depend,depending,53159,"files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. See also the more general scratch documentation. How do I retain specific Psi4 scratch files¶; You can set up a specific path for PSI4 scratch file and keep them; for later use through the psi4_io handler. How to use Psi4 within a PBS queue¶; You will usually need to set up a PBS job script that is setting all; necessary environment variables, making sure the scratch directories are; set up, and invoking the executable. An example PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. How to update and rebuild Psi4¶; Obtain code updates as appropriate from Binary Installer,; Clone from GitHub Repository, or Fork from GitHub Repository. Move into; objdir and reissue make or cmake --build ., whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir based on changes to the PSI4 repository.; Upon switching conda environments, though, one should; make a new objdir since there are many full paths baked into; objdir/CMakeCache.txt. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; >>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example] . Run tests in parallel with -j flag. For maximum parallelism (not Windows): ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run a",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:54260,Integrability,integrat,integration,54260,"conda environments, though, one should; make a new objdir since there are many full paths baked into; objdir/CMakeCache.txt. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through:; >>> make pytest. How to run a subset of tests¶; CTest allows flexibly partitioned running of the test suite. In; the examples below, testname are regex of test names,; and testlabel are regex of labels (e.g., cc, mints,; libefp defined [here, for example] . Run tests in parallel with -j flag. For maximum parallelism (not Windows): ctest -j`getconf _NPROCESSORS_ONLN`; Run full test suite: ctest; Run about a third of the tests in 5 minutes, the so-called quicktests: ctest -L quick; Run the same subset of tests that continuous integration checks (not the full test suite): ctest -L quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ctest -L smoke; Run tests matching by name: ctest -R testname; Run tests excluding those by name: ctest -E testname; Run tests matching by label: ctest -L testlabel; Run tests excluding those by label: ctest -LE testlabel. Pytest has similar commands:. Run tests in parallel with -n flag (if Python package pytest-xdist installed). For maximum parallelism: pytest -n auto; Run full test suite: pytest; Run the quick tests: pytest -m quick; Run the minimal number of tests to ensure Psi4 and any add-ons in working order: pytest -m smoke; Run tests matching by name: pytest -k testname; Run tests excluding those by name: pytest -k ""not testname""; Run tests matching by label: pytest -m testlabel; Run tests excluding those by label: pytest -m ""not testlabel""; Run tests with complicated filtering by name: pytest -k ""cc and not cc4 and not stdsuite""; Run tests and see test names: pytest -v; Run tests and see test names ",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:55816,Integrability,depend,depending,55816," the minimal number of tests to ensure Psi4 and any add-ons in working order: pytest -m smoke; Run tests matching by name: pytest -k testname; Run tests excluding those by name: pytest -k ""not testname""; Run tests matching by label: pytest -m testlabel; Run tests excluding those by label: pytest -m ""not testlabel""; Run tests with complicated filtering by name: pytest -k ""cc and not cc4 and not stdsuite""; Run tests and see test names: pytest -v; Run tests and see test names and sometimes more verbose errors: pytest -vv. How to see CTest testing errors¶; >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of “smoke” tests is; generally sufficient to verify an installation. From the executable; # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.); # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". From pytest directly. If package pytest-xdist i",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:59973,Integrability,interface,interface,59973,"pstream development. Sometimes, you’re the one; doing that development, and you need the CMake superbuild to pull source; from a local path rather than the approved codeset.; Find the CMakeLists.txt governing the target Add-On in; psi4/external and make changes analogous to the below:; #GIT_REPOSITORY https://github.com/jturney/ambit; #GIT_TAG 1.0; DOWNLOAD_COMMAND """"; SOURCE_DIR ""/path/to/ambit-directclone"". If you’re changing the PSI4 repo codebase between compiles, there’s; nothing more to do as CMake will handle the code rebuild deps for you.; If you’re changing the local Add-On repo codebase between compiles,; CMake does not know when libaddon.[a|so|dylib] needs rebuilding. It; is recommended that the PSI4 build be initially configured with; -DBUILD_SHARED_LIBS=ON (easier to notice changes). And to trigger; Add-On library rebuild, rm -rf {objdir}/external/upstream/addon/; and rm -rf {objdir}/stage/share/cmake/AddOn. This should; re-clone the Add-On, rebuild and install it, rebuild any parts of; PSI4 that interface to it, and relink the main core.so.; If you’re modifying the Add-On’s file or directory structure, be; smart and rm all traces of it within {objdir}/stage/,; especially any *.pyc files.; Alternatively and preferentially to the above, you can instead build and install the; Add-On library yourself, external to the PSI4 repository. This; is especially useful if you want to avoid full recompiles of the; Add-On at each change to the Add-On’s source. Build the Add-On; library dynamically (-DBUILD_SHARED_LIBS=ON) and mind any; “Psi4 wants” in the Add-On’s top-level CMakeLists.txt. Install the; Add-On and note the full path to AddOnConfig.cmake. Pass; the path containing that file to PSI4‘s CMake as; -DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and re",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:62597,Integrability,depend,dependencies,62597,"ssors have been added; so that the executable can show where the module is, and the module; can show where the executable is. > /path/to/psi4/install/bin/psi4 --module; /path/to/psi4/install/lib//; > python -c ""import psi4;print(psi4.executable)""; /path/to/psi4/install/bin/psi4. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building ",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:62708,Integrability,depend,dependencies,62708,"ssors have been added; so that the executable can show where the module is, and the module; can show where the executable is. > /path/to/psi4/install/bin/psi4 --module; /path/to/psi4/install/lib//; > python -c ""import psi4;print(psi4.executable)""; /path/to/psi4/install/bin/psi4. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building ",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:1237,Modifiability,config,configure,1237,"mary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult psi4/conda/psi4-path-advisor.py; (extensive help menu at conda/psi4-path-advisor.py -h); or psicode downloads; page for the latest guides. This section fulfills the duty of every Linux project to have an INSTALL; file detailing how to build it from source. Few (mostly packagers and; sysadmins) are expected to read this file as it is a broad guide to the; many choices in building this project. For a specific, well-tested,; and performance-tuned build path, see psicode.org/installs/latest; (select “source”). For pre-built binaries again well-tested,; performance-tuned, and available for all common operating systems,; see psicode.org/installs/latest (select “conda”).; To see working builds for Linux, Mac, and Windows, see :src:; [this GHA]. Planning: how to configure Psi4 and invoke CMake¶; PSI4 is built through CMake. An abbreviated build guide can be found; within the source itself .; CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it’s very possible that; from top-level-psi4-dir source directory, you can call cmake -S.; -Bobjdir without any further arguments, and it will invoke cmake,; detect some appropriate defaults, configure the build, create a build; directory objdir, and complete, leaving you to only invoke; make or Ninja in the new build directory.; Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within core; dependencies and add-on dependencies to plan a set of arguments to cmake tailored to; your computer. Proceed to quick build or; detailed build. How to build and install Psi4, the compact version¶; This section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given he",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:1685,Modifiability,config,configure,1685,"w to build it from source. Few (mostly packagers and; sysadmins) are expected to read this file as it is a broad guide to the; many choices in building this project. For a specific, well-tested,; and performance-tuned build path, see psicode.org/installs/latest; (select “source”). For pre-built binaries again well-tested,; performance-tuned, and available for all common operating systems,; see psicode.org/installs/latest (select “conda”).; To see working builds for Linux, Mac, and Windows, see :src:; [this GHA]. Planning: how to configure Psi4 and invoke CMake¶; PSI4 is built through CMake. An abbreviated build guide can be found; within the source itself .; CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it’s very possible that; from top-level-psi4-dir source directory, you can call cmake -S.; -Bobjdir without any further arguments, and it will invoke cmake,; detect some appropriate defaults, configure the build, create a build; directory objdir, and complete, leaving you to only invoke; make or Ninja in the new build directory.; Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within core; dependencies and add-on dependencies to plan a set of arguments to cmake tailored to; your computer. Proceed to quick build or; detailed build. How to build and install Psi4, the compact version¶; This section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; >>> cd {top-level-psi4-dir}; >>> cmake -S. -Bobjdir [your configuration options]; # make; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install; # -or- general; >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How t",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:2190,Modifiability,config,configuring,2190,"ds for Linux, Mac, and Windows, see :src:; [this GHA]. Planning: how to configure Psi4 and invoke CMake¶; PSI4 is built through CMake. An abbreviated build guide can be found; within the source itself .; CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it’s very possible that; from top-level-psi4-dir source directory, you can call cmake -S.; -Bobjdir without any further arguments, and it will invoke cmake,; detect some appropriate defaults, configure the build, create a build; directory objdir, and complete, leaving you to only invoke; make or Ninja in the new build directory.; Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within core; dependencies and add-on dependencies to plan a set of arguments to cmake tailored to; your computer. Proceed to quick build or; detailed build. How to build and install Psi4, the compact version¶; This section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; >>> cd {top-level-psi4-dir}; >>> cmake -S. -Bobjdir [your configuration options]; # make; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install; # -or- general; >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. >>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. Wh",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:2322,Modifiability,config,configuration,2322,"ter to locate libraries, header; files, and executables needed for compilation. So it’s very possible that; from top-level-psi4-dir source directory, you can call cmake -S.; -Bobjdir without any further arguments, and it will invoke cmake,; detect some appropriate defaults, configure the build, create a build; directory objdir, and complete, leaving you to only invoke; make or Ninja in the new build directory.; Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within core; dependencies and add-on dependencies to plan a set of arguments to cmake tailored to; your computer. Proceed to quick build or; detailed build. How to build and install Psi4, the compact version¶; This section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; >>> cd {top-level-psi4-dir}; >>> cmake -S. -Bobjdir [your configuration options]; # make; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install; # -or- general; >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. >>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration op",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:3345,Modifiability,config,configuration,3345,"dir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install; # -or- general; >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. >>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation). >>> cd {objdir}; >>> cmake --build . -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest and Pytest to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. 6. Install. If tests pass, install the code.; >>> cmake --install . 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variab",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:3395,Modifiability,config,configuration,3395,"dir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install; # -or- general; >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. >>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation). >>> cd {objdir}; >>> cmake --build . -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest and Pytest to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. 6. Install. If tests pass, install the code.; >>> cmake --install . 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variab",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:3441,Modifiability,config,configuration,3441,"rget install -j`getconf _NPROCESSORS_ONLN`. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. >>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation). >>> cd {objdir}; >>> cmake --build . -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest and Pytest to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. 6. Install. If tests pass, install the code.; >>> cmake --install . 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. W",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:3495,Modifiability,config,configure,3495,"rget install -j`getconf _NPROCESSORS_ONLN`. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. >>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation). >>> cd {objdir}; >>> cmake --build . -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest and Pytest to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. 6. Install. If tests pass, install the code.; >>> cmake --install . 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. W",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:3790,Modifiability,config,configuration,3790,". >>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation). >>> cd {objdir}; >>> cmake --build . -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest and Pytest to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. 6. Install. If tests pass, install the code.; >>> cmake --install . 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux and Mac) can be; satisfied through conda. The links below giv",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:4343,Modifiability,config,configure,4343,"or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation). >>> cd {objdir}; >>> cmake --build . -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest and Pytest to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. 6. Install. If tests pass, install the code.; >>> cmake --install . 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux and Mac) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it.; See psi4/codedeps.yaml for a structured listing and history of dependencies. C++ and C Compilers (C++20 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (3.8+) https://www.python.org/; CMake (3.15+) https://cmake.org/download/; NumPy (needed at runtime and buildtime) https://numpy.org/; System utilities: GNU make and GNU install or Ninja, POSIX threads (Pthre",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:4359,Modifiability,variab,variables,4359,"or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation). >>> cd {objdir}; >>> cmake --build . -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest and Pytest to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. 6. Install. If tests pass, install the code.; >>> cmake --install . 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux and Mac) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it.; See psi4/codedeps.yaml for a structured listing and history of dependencies. C++ and C Compilers (C++20 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (3.8+) https://www.python.org/; CMake (3.15+) https://cmake.org/download/; NumPy (needed at runtime and buildtime) https://numpy.org/; System utilities: GNU make and GNU install or Ninja, POSIX threads (Pthre",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:4798,Modifiability,config,configure,4798," Compile. Compile the code (optional -j triggers parallel compilation). >>> cd {objdir}; >>> cmake --build . -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest and Pytest to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. 6. Install. If tests pass, install the code.; >>> cmake --install . 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux and Mac) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it.; See psi4/codedeps.yaml for a structured listing and history of dependencies. C++ and C Compilers (C++20 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (3.8+) https://www.python.org/; CMake (3.15+) https://cmake.org/download/; NumPy (needed at runtime and buildtime) https://numpy.org/; System utilities: GNU make and GNU install or Ninja, POSIX threads (Pthreads) library. The following are also required for PSI4, but if not detected, the; build system will automatically download and build. gau2grid — [what is gau2grid?] [gau2grid min version]; Libint — [what is Libint?] [Libint min version] (Libint2 as of Nov 2020; added by v1.4). Eigen https://eigen.tuxfamily.org/index.php?title=Main_Page; Boost https://www.boost.org/ header-only preprocessor library. Libxc — [what is Libxc?] [Libxc min version]; pybind11 — [what is Pybind11?] [Pyb",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:11278,Modifiability,config,configure,11278,"nda environment that has a script psi4-path-advisor. Running; psi4-path-advisor --help shows more options. Running the script; without arguments gives a cmake command that supplies paths to dependency; conda packages to CMake’s cache. You can add further cmake options to; this command when you execute it. Once the cmake command has built your; objdir, you can build PSI4. Remember to activate this; conda environment during PSI4 running or development. There are a; few extra options to psi4-path-advisor to set up using conda’s GNU; compilers (on Linux), conda’s Clang compilers (on Mac; less reliably),; or your own Intel compilers backed by conda’s GNU compilers (on Linux).; >>> git clone https://github.com/psi4/psi4.git && cd psi4; >>> conda create -n p4dev psi4-dev python=3.8 -c psi4/label/dev; >>> conda activate p4dev; >>> `psi4-path-advisor --gcc`; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`. How to configure code to use high angular momentum basis sets¶; The Libint integral code handles; arbitrary order angular momentum (AM), but compiling that is; prohibitive. The build process for Libint2 takes longer than; for Libint1, so it’s recommended to use the conda packages. The AM controlling keyword MAX_AM_ERI; has definition changed a little from Libint1. It is used to ensure; that conventional energies can use at least MAX_AM_ERI zeta. See; psi4//external/upstream/libint2/CMakeLists.txt for a fuller; discussion of AM capabilities. Unless BUILD_Libint2_GENERATOR; is set to ON, an internal build of Libint2 will download a; pregenerated tarball of at least MAX_AM_ERI AM. If you; want to build completely from generator source, turn on the keyword,; but parts can only run in serial and parts benefit from parallel, so; it’s not recommended. All the AM generation settings would need to be; edited in the above CMakeLists.txt rather than passing them into; the PSI4 build directly. Build with Higher Angular Momentum; >>> cmake -DMAX_AM_ERI=6. Relevant CMake Options:; MA",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:13824,Modifiability,config,configure,13824," that since PSI4 1.1, it is possible to build Libint; independently (or install just the libint conda package), then have; any/all PSI4 builds detect that installation at compile-time.; To switch a finished build to a larger Libint, enter <objdir>,; remove the result of make install (if ever invoked), remove; external/upstream/libint/. If earlier Libint was built; internally (as opposed to detecting an external installation),; remove stage/include/libint/, stage/share/cmake/Libint/,; stage/lib/libint2.so.2. Edit MAX_AM_ERI; value in CMakeCache.txt. Reinvoke make and check the number; beside Found Libint in the CMake output.; Note that the same keyword MAX_AM_ERI controls Libint and simint. simint; can’t compile above AM7, so you’ll have to turn off simint to get an; internal compile of AM>=8 Libint. The keyword is only a lower bound for; detection, so you can set it at 7, have both Libint and simint enabled,; and point CMake toward a pre-built Libint AM8 just fine. How to configure Libint for building Psi4. How to get high angular momentum integrals from conda¶; Libint2 conda packages are available from conda for Linux, Mac, and Windows.; The Linux package has base MAX_AM_ERI=7 and can run 7z energies; and gradients conventional, 6z energies and gradients density-fitted,; and qz Hessians both conventional and density fitted.; The Mac and Windows packages have base MAX_AM_ERI=5 and can run; 5z energies, qz gradients, and tz Hessians, both conventional and; density-fitted.; Details about angular momentum settings are available here; psi4/external/upstream/libint2/CMakeLists.txt; . How to see what build configuration options are available¶; CMake doesn’t provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:; cmake_policy(SET CMP0167 OLD); endif (); # 3.15: useable FindPython with NumPy component and LOCATION; # 3.8: CXX_STANDARD recognizes C+",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:14465,Modifiability,config,configuration,14465,". simint; can’t compile above AM7, so you’ll have to turn off simint to get an; internal compile of AM>=8 Libint. The keyword is only a lower bound for; detection, so you can set it at 7, have both Libint and simint enabled,; and point CMake toward a pre-built Libint AM8 just fine. How to configure Libint for building Psi4. How to get high angular momentum integrals from conda¶; Libint2 conda packages are available from conda for Linux, Mac, and Windows.; The Linux package has base MAX_AM_ERI=7 and can run 7z energies; and gradients conventional, 6z energies and gradients density-fitted,; and qz Hessians both conventional and density fitted.; The Mac and Windows packages have base MAX_AM_ERI=5 and can run; 5z energies, qz gradients, and tz Hessians, both conventional and; density-fitted.; Details about angular momentum settings are available here; psi4/external/upstream/libint2/CMakeLists.txt; . How to see what build configuration options are available¶; CMake doesn’t provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:; cmake_policy(SET CMP0167 OLD); endif (); # 3.15: useable FindPython with NumPy component and LOCATION; # 3.8: CXX_STANDARD recognizes C++17; # 3.3: EP_add(DEPENDS interfacelib, CheckFortranCompilerFlag; # 3.2: continue(); # 3.1: CMAKE_CXX_STANDARD, BUILD_ALWAYS. set(CMAKE_BUILD_TYPE ""Release"" CACHE STRING ""Choose the type of build."") # foil Ninja Debug on Windows. project(psi4; LANGUAGES C CXX); set(psi4_URL ""http://www.psicode.org/""); set(psi4_EMAIL ""psi4aiqc+cmake@gmail.com""); set(psi4_LICENSE ""GNU Lesser General Public License, version 3 (LGPL-3.0)""); set(psi4_DESCRIPTION ""Open-Source Quantum Chemistry""). list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake). message(STATUS ""Building using CMake ${CMAKE_VERSION} Generator ${CMAKE_GENERATOR}""). ################ Options: Overview and Not Otherwise Mentioned ##",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:16975,Modifiability,variab,variables,16975,"`conda install cmake`); # - C++ and C compilers (C++20 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint >=0.10 (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - Eigen (for Libint2; e.g., `conda install eigen`); # - Boost (header-only libs for Libint2; e.g., `conda install boost-cpp`); # - SciPy (runtime only; avoidable through keyword setting; e.g., `conda install scipy`); # - py-cpuinfo (runtime only; e.g., `conda install py-cpuinfo`); # - psutil (runtime only; e.g., `conda install psutil`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - Python_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python3.7)""; # - Python_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python3.7.so)""; # - Python_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python3.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheMPS2, dkh, ecpint, libefp, Einsums, gau2grid, gdma, Libint2, PCMSolver, pybind11, pylibefp,; # qcelemental, qcengine, optking, simint, Libxc, IntegratorXX, gauxc; # - C",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:16995,Modifiability,config,configuration,16995,"`conda install cmake`); # - C++ and C compilers (C++20 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint >=0.10 (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - Eigen (for Libint2; e.g., `conda install eigen`); # - Boost (header-only libs for Libint2; e.g., `conda install boost-cpp`); # - SciPy (runtime only; avoidable through keyword setting; e.g., `conda install scipy`); # - py-cpuinfo (runtime only; e.g., `conda install py-cpuinfo`); # - psutil (runtime only; e.g., `conda install psutil`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - Python_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python3.7)""; # - Python_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python3.7.so)""; # - Python_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python3.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheMPS2, dkh, ecpint, libefp, Einsums, gau2grid, gdma, Libint2, PCMSolver, pybind11, pylibefp,; # qcelemental, qcengine, optking, simint, Libxc, IntegratorXX, gauxc; # - C",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:21484,Modifiability,plugin,plugin,21484,"on(ENABLE_cppe ""Enables CPPE for Polarizable Embedding"" OFF); option(ENABLE_adcc ""Enables adcc for algebraic-diagrammatic construction methods (requires libtensorlight; can also be added at runtime)"" OFF); option(ENABLE_ddx ""Enables ddx for domain-decomposition contiuum solvation models (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_dkh ""Enables DKH integrals (requires Fortran)"" OFF); option(ENABLE_ecpint ""Enables libecpint for effective core potentials (ECP)"" OFF); option(ENABLE_libefp ""Enables LIBEFP and PylibEFP for fragments"" OFF); option(ENABLE_Einsums ""Enables the Einsums tensor library"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gauxc ""Enables use of GauXC density functional library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); option(ENABLE_snsmp2 ""Enables SNSMP2 plugin (can also be added at runtime)"" OFF); option(ENABLE_v2rdm_casscf ""Enables V2RDM_CASSCF plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_psi4fockci ""Enables Psi4FockCI plugin (can also be added at runtime)"" OFF); option(ENABLE_cct3 ""Enables cct3 plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_gpu_dfcc ""Enables GPU_DFCC plugin for gpu-accelerated df-cc (requires CUDA; can also be added at runtime)"" OFF); option(ENABLE_mdi ""Enables MolSSI driver interface"" OFF); option(ENABLE_BrianQC ""Enables the BrianQC GPU module (requires CUDA; requires separate installation and licensing of the BrianQC module)"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF); option(psi4_SKIP_ENABLE_Fortran ""Suppress enabling Fortran language even when Fortran addons enabled.",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:21578,Modifiability,plugin,plugin,21578,"on(ENABLE_cppe ""Enables CPPE for Polarizable Embedding"" OFF); option(ENABLE_adcc ""Enables adcc for algebraic-diagrammatic construction methods (requires libtensorlight; can also be added at runtime)"" OFF); option(ENABLE_ddx ""Enables ddx for domain-decomposition contiuum solvation models (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_dkh ""Enables DKH integrals (requires Fortran)"" OFF); option(ENABLE_ecpint ""Enables libecpint for effective core potentials (ECP)"" OFF); option(ENABLE_libefp ""Enables LIBEFP and PylibEFP for fragments"" OFF); option(ENABLE_Einsums ""Enables the Einsums tensor library"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gauxc ""Enables use of GauXC density functional library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); option(ENABLE_snsmp2 ""Enables SNSMP2 plugin (can also be added at runtime)"" OFF); option(ENABLE_v2rdm_casscf ""Enables V2RDM_CASSCF plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_psi4fockci ""Enables Psi4FockCI plugin (can also be added at runtime)"" OFF); option(ENABLE_cct3 ""Enables cct3 plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_gpu_dfcc ""Enables GPU_DFCC plugin for gpu-accelerated df-cc (requires CUDA; can also be added at runtime)"" OFF); option(ENABLE_mdi ""Enables MolSSI driver interface"" OFF); option(ENABLE_BrianQC ""Enables the BrianQC GPU module (requires CUDA; requires separate installation and licensing of the BrianQC module)"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF); option(psi4_SKIP_ENABLE_Fortran ""Suppress enabling Fortran language even when Fortran addons enabled.",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:21686,Modifiability,plugin,plugin,21686,"on(ENABLE_cppe ""Enables CPPE for Polarizable Embedding"" OFF); option(ENABLE_adcc ""Enables adcc for algebraic-diagrammatic construction methods (requires libtensorlight; can also be added at runtime)"" OFF); option(ENABLE_ddx ""Enables ddx for domain-decomposition contiuum solvation models (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_dkh ""Enables DKH integrals (requires Fortran)"" OFF); option(ENABLE_ecpint ""Enables libecpint for effective core potentials (ECP)"" OFF); option(ENABLE_libefp ""Enables LIBEFP and PylibEFP for fragments"" OFF); option(ENABLE_Einsums ""Enables the Einsums tensor library"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gauxc ""Enables use of GauXC density functional library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); option(ENABLE_snsmp2 ""Enables SNSMP2 plugin (can also be added at runtime)"" OFF); option(ENABLE_v2rdm_casscf ""Enables V2RDM_CASSCF plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_psi4fockci ""Enables Psi4FockCI plugin (can also be added at runtime)"" OFF); option(ENABLE_cct3 ""Enables cct3 plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_gpu_dfcc ""Enables GPU_DFCC plugin for gpu-accelerated df-cc (requires CUDA; can also be added at runtime)"" OFF); option(ENABLE_mdi ""Enables MolSSI driver interface"" OFF); option(ENABLE_BrianQC ""Enables the BrianQC GPU module (requires CUDA; requires separate installation and licensing of the BrianQC module)"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF); option(psi4_SKIP_ENABLE_Fortran ""Suppress enabling Fortran language even when Fortran addons enabled.",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:21764,Modifiability,plugin,plugin,21764,"on(ENABLE_cppe ""Enables CPPE for Polarizable Embedding"" OFF); option(ENABLE_adcc ""Enables adcc for algebraic-diagrammatic construction methods (requires libtensorlight; can also be added at runtime)"" OFF); option(ENABLE_ddx ""Enables ddx for domain-decomposition contiuum solvation models (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_dkh ""Enables DKH integrals (requires Fortran)"" OFF); option(ENABLE_ecpint ""Enables libecpint for effective core potentials (ECP)"" OFF); option(ENABLE_libefp ""Enables LIBEFP and PylibEFP for fragments"" OFF); option(ENABLE_Einsums ""Enables the Einsums tensor library"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gauxc ""Enables use of GauXC density functional library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); option(ENABLE_snsmp2 ""Enables SNSMP2 plugin (can also be added at runtime)"" OFF); option(ENABLE_v2rdm_casscf ""Enables V2RDM_CASSCF plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_psi4fockci ""Enables Psi4FockCI plugin (can also be added at runtime)"" OFF); option(ENABLE_cct3 ""Enables cct3 plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_gpu_dfcc ""Enables GPU_DFCC plugin for gpu-accelerated df-cc (requires CUDA; can also be added at runtime)"" OFF); option(ENABLE_mdi ""Enables MolSSI driver interface"" OFF); option(ENABLE_BrianQC ""Enables the BrianQC GPU module (requires CUDA; requires separate installation and licensing of the BrianQC module)"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF); option(psi4_SKIP_ENABLE_Fortran ""Suppress enabling Fortran language even when Fortran addons enabled.",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:21868,Modifiability,plugin,plugin,21868,"on(ENABLE_cppe ""Enables CPPE for Polarizable Embedding"" OFF); option(ENABLE_adcc ""Enables adcc for algebraic-diagrammatic construction methods (requires libtensorlight; can also be added at runtime)"" OFF); option(ENABLE_ddx ""Enables ddx for domain-decomposition contiuum solvation models (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_dkh ""Enables DKH integrals (requires Fortran)"" OFF); option(ENABLE_ecpint ""Enables libecpint for effective core potentials (ECP)"" OFF); option(ENABLE_libefp ""Enables LIBEFP and PylibEFP for fragments"" OFF); option(ENABLE_Einsums ""Enables the Einsums tensor library"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gauxc ""Enables use of GauXC density functional library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); option(ENABLE_snsmp2 ""Enables SNSMP2 plugin (can also be added at runtime)"" OFF); option(ENABLE_v2rdm_casscf ""Enables V2RDM_CASSCF plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_psi4fockci ""Enables Psi4FockCI plugin (can also be added at runtime)"" OFF); option(ENABLE_cct3 ""Enables cct3 plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_gpu_dfcc ""Enables GPU_DFCC plugin for gpu-accelerated df-cc (requires CUDA; can also be added at runtime)"" OFF); option(ENABLE_mdi ""Enables MolSSI driver interface"" OFF); option(ENABLE_BrianQC ""Enables the BrianQC GPU module (requires CUDA; requires separate installation and licensing of the BrianQC module)"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF); option(psi4_SKIP_ENABLE_Fortran ""Suppress enabling Fortran language even when Fortran addons enabled.",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:22248,Modifiability,plugin,plugin,22248,"on(ENABLE_cppe ""Enables CPPE for Polarizable Embedding"" OFF); option(ENABLE_adcc ""Enables adcc for algebraic-diagrammatic construction methods (requires libtensorlight; can also be added at runtime)"" OFF); option(ENABLE_ddx ""Enables ddx for domain-decomposition contiuum solvation models (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_dkh ""Enables DKH integrals (requires Fortran)"" OFF); option(ENABLE_ecpint ""Enables libecpint for effective core potentials (ECP)"" OFF); option(ENABLE_libefp ""Enables LIBEFP and PylibEFP for fragments"" OFF); option(ENABLE_Einsums ""Enables the Einsums tensor library"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gauxc ""Enables use of GauXC density functional library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); option(ENABLE_snsmp2 ""Enables SNSMP2 plugin (can also be added at runtime)"" OFF); option(ENABLE_v2rdm_casscf ""Enables V2RDM_CASSCF plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_psi4fockci ""Enables Psi4FockCI plugin (can also be added at runtime)"" OFF); option(ENABLE_cct3 ""Enables cct3 plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_gpu_dfcc ""Enables GPU_DFCC plugin for gpu-accelerated df-cc (requires CUDA; can also be added at runtime)"" OFF); option(ENABLE_mdi ""Enables MolSSI driver interface"" OFF); option(ENABLE_BrianQC ""Enables the BrianQC GPU module (requires CUDA; requires separate installation and licensing of the BrianQC module)"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF); option(psi4_SKIP_ENABLE_Fortran ""Suppress enabling Fortran language even when Fortran addons enabled.",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:22330,Modifiability,plugin,plugin,22330,"on(ENABLE_cppe ""Enables CPPE for Polarizable Embedding"" OFF); option(ENABLE_adcc ""Enables adcc for algebraic-diagrammatic construction methods (requires libtensorlight; can also be added at runtime)"" OFF); option(ENABLE_ddx ""Enables ddx for domain-decomposition contiuum solvation models (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_dkh ""Enables DKH integrals (requires Fortran)"" OFF); option(ENABLE_ecpint ""Enables libecpint for effective core potentials (ECP)"" OFF); option(ENABLE_libefp ""Enables LIBEFP and PylibEFP for fragments"" OFF); option(ENABLE_Einsums ""Enables the Einsums tensor library"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gauxc ""Enables use of GauXC density functional library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); option(ENABLE_snsmp2 ""Enables SNSMP2 plugin (can also be added at runtime)"" OFF); option(ENABLE_v2rdm_casscf ""Enables V2RDM_CASSCF plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_psi4fockci ""Enables Psi4FockCI plugin (can also be added at runtime)"" OFF); option(ENABLE_cct3 ""Enables cct3 plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_gpu_dfcc ""Enables GPU_DFCC plugin for gpu-accelerated df-cc (requires CUDA; can also be added at runtime)"" OFF); option(ENABLE_mdi ""Enables MolSSI driver interface"" OFF); option(ENABLE_BrianQC ""Enables the BrianQC GPU module (requires CUDA; requires separate installation and licensing of the BrianQC module)"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF); option(psi4_SKIP_ENABLE_Fortran ""Suppress enabling Fortran language even when Fortran addons enabled.",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:22679,Modifiability,plugin,plugins,22679,"ded at runtime)"" OFF); option(ENABLE_psi4fockci ""Enables Psi4FockCI plugin (can also be added at runtime)"" OFF); option(ENABLE_cct3 ""Enables cct3 plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_gpu_dfcc ""Enables GPU_DFCC plugin for gpu-accelerated df-cc (requires CUDA; can also be added at runtime)"" OFF); option(ENABLE_mdi ""Enables MolSSI driver interface"" OFF); option(ENABLE_BrianQC ""Enables the BrianQC GPU module (requires CUDA; requires separate installation and licensing of the BrianQC module)"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF); option(psi4_SKIP_ENABLE_Fortran ""Suppress enabling Fortran language even when Fortran addons enabled. Use when only linking pre-built, not compiling addon code."" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. How to install elsewhere than /usr/local/psi4¶; The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable CMAKE_INSTALL_PREFIX; before compiling. Build with Specific Install Directory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders un",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:22762,Modifiability,config,configuration,22762,"BLE_cct3 ""Enables cct3 plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_gpu_dfcc ""Enables GPU_DFCC plugin for gpu-accelerated df-cc (requires CUDA; can also be added at runtime)"" OFF); option(ENABLE_mdi ""Enables MolSSI driver interface"" OFF); option(ENABLE_BrianQC ""Enables the BrianQC GPU module (requires CUDA; requires separate installation and licensing of the BrianQC module)"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF); option(psi4_SKIP_ENABLE_Fortran ""Suppress enabling Fortran language even when Fortran addons enabled. Use when only linking pre-built, not compiling addon code."" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. How to install elsewhere than /usr/local/psi4¶; The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable CMAKE_INSTALL_PREFIX; before compiling. Build with Specific Install Directory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recurs",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:23157,Modifiability,variab,variable,23157,"ng of the BrianQC module)"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF); option(psi4_SKIP_ENABLE_Fortran ""Suppress enabling Fortran language even when Fortran addons enabled. Use when only linking pre-built, not compiling addon code."" OFF). # Append modules added to pasture as needed; if(ENABLE_ccsort OR ENABLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. How to install elsewhere than /usr/local/psi4¶; The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable CMAKE_INSTALL_PREFIX; before compiling. Build with Specific Install Directory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recursively delete all the “.pyc” files. It; may just run. How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUILD_TYPE before; compiling. Note that these flags will not propagate to any add-ons that; are detected pre-built rather than built. Build without optimization; cmake -DCMAKE_BUILD_",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:23550,Modifiability,config,configured,23550,"BLE_transqt2); set(ENABLE_pasture ON); message(STATUS ""Enabling pasture plugins""); endif(). Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. How to install elsewhere than /usr/local/psi4¶; The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable CMAKE_INSTALL_PREFIX; before compiling. Build with Specific Install Directory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recursively delete all the “.pyc” files. It; may just run. How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUILD_TYPE before; compiling. Note that these flags will not propagate to any add-ons that; are detected pre-built rather than built. Build without optimization; cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. Relevant CMake Options:; CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. How to choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir. cd {top-level-psi4-dir} && cmake -S. -Bobjdir; cd {top-level-psi4-dir} && cmake -S. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-le",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:23909,Modifiability,plugin,plugins,23909,"/local/psi4¶; The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable CMAKE_INSTALL_PREFIX; before compiling. Build with Specific Install Directory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recursively delete all the “.pyc” files. It; may just run. How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUILD_TYPE before; compiling. Note that these flags will not propagate to any add-ons that; are detected pre-built rather than built. Build without optimization; cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. Relevant CMake Options:; CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. How to choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir. cd {top-level-psi4-dir} && cmake -S. -Bobjdir; cd {top-level-psi4-dir} && cmake -S. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; >>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -S. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:23928,Modifiability,variab,variable,23928,"/local/psi4¶; The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable CMAKE_INSTALL_PREFIX; before compiling. Build with Specific Install Directory; cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. Relevant CMake Options:; CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). Note; It’s not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location not configured by CMAKE_INSTALL_PREFIX,; recursively copy the folders under objdir/stage/prefix to; the desired location, chown them if needed, edit the shebang in; bin/psi4 if needed, and recursively delete all the “.pyc” files. It; may just run. How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUILD_TYPE before; compiling. Note that these flags will not propagate to any add-ons that; are detected pre-built rather than built. Build without optimization; cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. Relevant CMake Options:; CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. How to choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir. cd {top-level-psi4-dir} && cmake -S. -Bobjdir; cd {top-level-psi4-dir} && cmake -S. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; >>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -S. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:24647,Modifiability,config,configuration,24647,"g in; bin/psi4 if needed, and recursively delete all the “.pyc” files. It; may just run. How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUILD_TYPE before; compiling. Note that these flags will not propagate to any add-ons that; are detected pre-built rather than built. Build without optimization; cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. Relevant CMake Options:; CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. How to choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir. cd {top-level-psi4-dir} && cmake -S. -Bobjdir; cd {top-level-psi4-dir} && cmake -S. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; >>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -S. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. What is the directory layout of the installed or staged Psi4¶; After compilation (cd objdir && make), a directory structure like the; below will exist at objdir/stage. This may be tested and used; just like a full installation.; After installation (cd objdir && make && make install), a directory; structure like the below will exist at /prefix. This is a full; installation.; /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); incl",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:24719,Modifiability,config,configure,24719,"g in; bin/psi4 if needed, and recursively delete all the “.pyc” files. It; may just run. How to compile for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUILD_TYPE before; compiling. Note that these flags will not propagate to any add-ons that; are detected pre-built rather than built. Build without optimization; cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. Relevant CMake Options:; CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. How to choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir. cd {top-level-psi4-dir} && cmake -S. -Bobjdir; cd {top-level-psi4-dir} && cmake -S. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; >>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -S. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. What is the directory layout of the installed or staged Psi4¶; After compilation (cd objdir && make), a directory structure like the; below will exist at objdir/stage. This may be tested and used; just like a full installation.; After installation (cd objdir && make && make install), a directory; structure like the below will exist at /prefix. This is a full; installation.; /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); incl",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:24819,Modifiability,config,configure,24819," for debugging¶; Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable CMAKE_BUILD_TYPE before; compiling. Note that these flags will not propagate to any add-ons that; are detected pre-built rather than built. Build without optimization; cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. Relevant CMake Options:; CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. How to choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir. cd {top-level-psi4-dir} && cmake -S. -Bobjdir; cd {top-level-psi4-dir} && cmake -S. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; >>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -S. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. What is the directory layout of the installed or staged Psi4¶; After compilation (cd objdir && make), a directory structure like the; below will exist at objdir/stage. This may be tested and used; just like a full installation.; After installation (cd objdir && make && make install), a directory; structure like the below will exist at /prefix. This is a full; installation.; /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:25034,Modifiability,config,configure,25034,"UILD_TYPE before; compiling. Note that these flags will not propagate to any add-ons that; are detected pre-built rather than built. Build without optimization; cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. Relevant CMake Options:; CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. How to choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir. cd {top-level-psi4-dir} && cmake -S. -Bobjdir; cd {top-level-psi4-dir} && cmake -S. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; >>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -S. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. What is the directory layout of the installed or staged Psi4¶; After compilation (cd objdir && make), a directory structure like the; below will exist at objdir/stage. This may be tested and used; just like a full installation.; After installation (cd objdir && make && make install), a directory; structure like the below will exist at /prefix. This is a full; installation.; /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installe",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:25054,Modifiability,config,configure,25054," rather than built. Build without optimization; cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. Relevant CMake Options:; CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. How to choose the compilation directory, {objdir}¶. there is no default; common choices are objdir or build under top-level-psi4-dir. cd {top-level-psi4-dir} && cmake -S. -Bobjdir; cd {top-level-psi4-dir} && cmake -S. -Bbuild. in-source builds (*.cc and *.o in same directory) are disallowed; builds outside top-level-psi4-dir are permitted. How to save configuration settings for a future compilation¶; Create a file like do-configure with the cmake command and options; on one line.; >>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -S. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. What is the directory layout of the installed or staged Psi4¶; After compilation (cd objdir && make), a directory structure like the; below will exist at objdir/stage. This may be tested and used; just like a full installation.; After installation (cd objdir && make && make install), a directory; structure like the below will exist at /prefix. This is a full; installation.; /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmak",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:26219,Modifiability,plugin,plugins,26219,"a full installation.; After installation (cd objdir && make && make install), a directory; structure like the below will exist at /prefix. This is a full; installation.; /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plugins (plugin template files); share/psi4/fsapt (fsapt scripts); share/psi4/samples/ (sample input files); lib/ (shared libraries and py modules for psi4 + any external proj); # ordinary; lib/psi4/ (object files); lib/psi4/driver/ (py-side, uncompiled); lib/psi4/header.py (prints file header); lib/psi4/metadata.py (psi4 version info); lib/psi4/__init__.py (module marker/loader for psi4.core); lib/psi4/core.cpython-*.so (c-side, compiled and bound by pybind11); # conda; lib/pythonX.X/site-packages/psi4/. The following environment variables point to certain places in the above; directory structure. None to few need to be set; see for details:; running compiled executable,; running compiled Python module,; running conda binary. PATH pointing to bin; PYTHONPATH pointing to lib (ordinary) or lib/pythonX.X/site-packages (conda); PSIDATADIR pointing to share/psi4. How to run Psi4 as executable after compilation¶; Substituting the full installation directory prefix and a; suitable scratch directory, issue the following commands directly in you",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:26228,Modifiability,plugin,plugin,26228,"a full installation.; After installation (cd objdir && make && make install), a directory; structure like the below will exist at /prefix. This is a full; installation.; /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plugins (plugin template files); share/psi4/fsapt (fsapt scripts); share/psi4/samples/ (sample input files); lib/ (shared libraries and py modules for psi4 + any external proj); # ordinary; lib/psi4/ (object files); lib/psi4/driver/ (py-side, uncompiled); lib/psi4/header.py (prints file header); lib/psi4/metadata.py (psi4 version info); lib/psi4/__init__.py (module marker/loader for psi4.core); lib/psi4/core.cpython-*.so (c-side, compiled and bound by pybind11); # conda; lib/pythonX.X/site-packages/psi4/. The following environment variables point to certain places in the above; directory structure. None to few need to be set; see for details:; running compiled executable,; running compiled Python module,; running conda binary. PATH pointing to bin; PYTHONPATH pointing to lib (ordinary) or lib/pythonX.X/site-packages (conda); PSIDATADIR pointing to share/psi4. How to run Psi4 as executable after compilation¶; Substituting the full installation directory prefix and a; suitable scratch directory, issue the following commands directly in you",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:26756,Modifiability,variab,variables,26756," (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plugins (plugin template files); share/psi4/fsapt (fsapt scripts); share/psi4/samples/ (sample input files); lib/ (shared libraries and py modules for psi4 + any external proj); # ordinary; lib/psi4/ (object files); lib/psi4/driver/ (py-side, uncompiled); lib/psi4/header.py (prints file header); lib/psi4/metadata.py (psi4 version info); lib/psi4/__init__.py (module marker/loader for psi4.core); lib/psi4/core.cpython-*.so (c-side, compiled and bound by pybind11); # conda; lib/pythonX.X/site-packages/psi4/. The following environment variables point to certain places in the above; directory structure. None to few need to be set; see for details:; running compiled executable,; running compiled Python module,; running conda binary. PATH pointing to bin; PYTHONPATH pointing to lib (ordinary) or lib/pythonX.X/site-packages (conda); PSIDATADIR pointing to share/psi4. How to run Psi4 as executable after compilation¶; Substituting the full installation directory prefix and a; suitable scratch directory, issue the following commands directly in your; terminal or place them into your “rc” file and open a new terminal. (To; use a staged installation directory, substitute; objdir/stage for prefix.); # csh, tcsh: add to shell or ~/.tcshrc file; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/di",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:28285,Modifiability,config,configure,28285,"al or place them into your “rc” file and open a new terminal. (To; use a staged installation directory, substitute; objdir/stage for prefix.); # csh, tcsh: add to shell or ~/.tcshrc file; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run PSI4.; >>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. How to solve ModuleNotFoundError: No module named 'psi4'¶; You’re using PSI4 in PsiAPI mode (python input.py where; input.py contains import psi4) but the Python interpreter; can’t find the PSI4 Python module. Follow the directions at; How to configure paths for PsiAPI. How to configure paths for PsiAPI¶; If you know the location of the PSI4 executable (bin/psi4); for Psithon mode and want to know the corresponding location to add to; PYTHONPATH for PsiAPI mode, execute psi4 --psiapi. It; will return bash commands to set PATH (for correct python; interpreter) and PYTHONPATH (to find psi4 module) correctly,; after which import psi4 will work.; >>> psi4 --psiapi-path; export PATH=/path/to/dir/of/python/interpreter/against/which/psi4/compiled:$PATH; export PYTHONPATH=/path/to/dir/of/psi4/core-dot-so:$PYTHONPATH. >>> export PATH=/path/to/dir/of/python/interpreter/against/which/psi4/compiled:$PATH; >>> export PYTHONPATH=/path/to/dir/of/psi4/core-dot-so:$PYTHONPATH. >>> python -c ""import psi4"". >>> python -c ""import psi4;print(psi4.__file__, psi4.__version__)"". How to run Psi4 as Python module after compilation¶; Substituting the full installation directory prefix and a; suitable scratch directory, issue the following commands",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:28320,Modifiability,config,configure,28320,"); # csh, tcsh: add to shell or ~/.tcshrc file; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run PSI4.; >>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. How to solve ModuleNotFoundError: No module named 'psi4'¶; You’re using PSI4 in PsiAPI mode (python input.py where; input.py contains import psi4) but the Python interpreter; can’t find the PSI4 Python module. Follow the directions at; How to configure paths for PsiAPI. How to configure paths for PsiAPI¶; If you know the location of the PSI4 executable (bin/psi4); for Psithon mode and want to know the corresponding location to add to; PYTHONPATH for PsiAPI mode, execute psi4 --psiapi. It; will return bash commands to set PATH (for correct python; interpreter) and PYTHONPATH (to find psi4 module) correctly,; after which import psi4 will work.; >>> psi4 --psiapi-path; export PATH=/path/to/dir/of/python/interpreter/against/which/psi4/compiled:$PATH; export PYTHONPATH=/path/to/dir/of/psi4/core-dot-so:$PYTHONPATH. >>> export PATH=/path/to/dir/of/python/interpreter/against/which/psi4/compiled:$PATH; >>> export PYTHONPATH=/path/to/dir/of/psi4/core-dot-so:$PYTHONPATH. >>> python -c ""import psi4"". >>> python -c ""import psi4;print(psi4.__file__, psi4.__version__)"". How to run Psi4 as Python module after compilation¶; Substituting the full installation directory prefix and a; suitable scratch directory, issue the following commands directly in your; terminal or place them into your “rc” file and open a new terminal. (To; use a staged installation directory, substitute;",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:29861,Modifiability,config,configure,29861,"ort PATH=/path/to/dir/of/python/interpreter/against/which/psi4/compiled:$PATH; >>> export PYTHONPATH=/path/to/dir/of/psi4/core-dot-so:$PYTHONPATH. >>> python -c ""import psi4"". >>> python -c ""import psi4;print(psi4.__file__, psi4.__version__)"". How to run Psi4 as Python module after compilation¶; Substituting the full installation directory prefix and a; suitable scratch directory, issue the following commands directly in your; terminal or place them into your “rc” file and open a new terminal. (To; use a staged installation directory, substitute; objdir/stage for prefix.); # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH {prefix}/lib:$PYTHONPATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH={prefix}/lib:$PYTHONPATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. How to configure paths for PsiAPI. Run PSI4.; >>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable or Python module from conda installation¶; The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing PSI4 into a Anaconda,; Miniconda, or Psi4conda distribution, condadist =; ana|mini|psi4conda. To see the message again after initial installation,; with the conda environment active, run .psi4-post-link.sh.; If which conda python psi4 points to your; condadist and echo $PSI_SCRATCH is set, skip ahead to the; “Run PSI4"" commands below. Otherwise, issue the following; commands directly in your terminal or place them into your “rc” file and; open a new terminal.; If you installed the Psi4conda distribu",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:30255,Modifiability,config,configuration,30255," them into your “rc” file and open a new terminal. (To; use a staged installation directory, substitute; objdir/stage for prefix.); # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH {prefix}/lib:$PYTHONPATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH={prefix}/lib:$PYTHONPATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. How to configure paths for PsiAPI. Run PSI4.; >>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable or Python module from conda installation¶; The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing PSI4 into a Anaconda,; Miniconda, or Psi4conda distribution, condadist =; ana|mini|psi4conda. To see the message again after initial installation,; with the conda environment active, run .psi4-post-link.sh.; If which conda python psi4 points to your; condadist and echo $PSI_SCRATCH is set, skip ahead to the; “Run PSI4"" commands below. Otherwise, issue the following; commands directly in your terminal or place them into your “rc” file and; open a new terminal.; If you installed the Psi4conda distribution or installed the PSI4; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your PATH, as prompted, then; which psi4 likely yields condadist/bin/psi4 and the PATH; setting lines below are redundant.; If you installed into a conda environment p4env and performed; conda activate p4env, then which psi4 likely yields; condadist/envs/p4env/bin/psi4 and the PATH setting lines; below are redundant.; ",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:32972,Modifiability,variab,variable,32972,"SED. or Run PSI4 as Python module.; >>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable after compilation using driver from source¶; When developing python driver code, it can be annoying to keep makeing to test the code. PSI4 can be run “inplace” through the; following procedure. To be clear, this is running compiled C++ from the; build directory and python from the source directory. This is an expert; option for development, and not all functionality will be available.; >>> cd {objdir}; >>> ln -s {top-level-psi4-dir}/{objdir}/stage/lib/psi4/core.cpython-{ext_will_vary}.so ../psi4/core.cpython-{ext_will_vary}.so; >>> python ../psi4/run_psi4.py --inplace input.dat. Why not to set PSIDATADIR¶; PSIDATADIR is an environment variable containing the location of the; text resource parts of the PSI4 codebase (e.g., basis sets,; databases, EFP fragments). It is for developer use only. In PSI4 1.1; and beyond, the program always knows where its resources are, and the; only reason to set this variable is to point to another location.; Previously in PSI4 1.0 and previous, only installed executables knew; the location, so it always needed to be explicitly set when run from the; compilation directory.; At runtime; >>> psi4 -p {top-level-psi4-dir}/psi4/share/psi4. Or in the shell; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIDATADIR {top-level-psi4-dir}/psi4/share/psi4. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIDATADIR={top-level-psi4-dir}/psi4/share/psi4. How to configure C++ and C compilers for building Psi4¶; Role and Dependencies. Role — In PSI4, a C++ compiler is vital for building the code.; Downstream Dependencies — PSI4 \(\Leftarrow\) C++ Compiler. CMake Varia",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:33239,Modifiability,variab,variable,33239,"hon sample.py; SCF E.............................................................PASSED. How to run Psi4 as executable after compilation using driver from source¶; When developing python driver code, it can be annoying to keep makeing to test the code. PSI4 can be run “inplace” through the; following procedure. To be clear, this is running compiled C++ from the; build directory and python from the source directory. This is an expert; option for development, and not all functionality will be available.; >>> cd {objdir}; >>> ln -s {top-level-psi4-dir}/{objdir}/stage/lib/psi4/core.cpython-{ext_will_vary}.so ../psi4/core.cpython-{ext_will_vary}.so; >>> python ../psi4/run_psi4.py --inplace input.dat. Why not to set PSIDATADIR¶; PSIDATADIR is an environment variable containing the location of the; text resource parts of the PSI4 codebase (e.g., basis sets,; databases, EFP fragments). It is for developer use only. In PSI4 1.1; and beyond, the program always knows where its resources are, and the; only reason to set this variable is to point to another location.; Previously in PSI4 1.0 and previous, only installed executables knew; the location, so it always needed to be explicitly set when run from the; compilation directory.; At runtime; >>> psi4 -p {top-level-psi4-dir}/psi4/share/psi4. Or in the shell; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIDATADIR {top-level-psi4-dir}/psi4/share/psi4. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIDATADIR={top-level-psi4-dir}/psi4/share/psi4. How to configure C++ and C compilers for building Psi4¶; Role and Dependencies. Role — In PSI4, a C++ compiler is vital for building the code.; Downstream Dependencies — PSI4 \(\Leftarrow\) C++ Compiler. CMake Variables. CMAKE_CXX_COMPILER — CMake variable to specify name or full path to C++ compiler.; CMAKE_C_COMPILER — CMake variable to specify name or full path to C compiler.; CMAKE_CXX_FLAGS — CMake variable to specify any additiona",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:33778,Modifiability,config,configure,33778,"ll_vary}.so ../psi4/core.cpython-{ext_will_vary}.so; >>> python ../psi4/run_psi4.py --inplace input.dat. Why not to set PSIDATADIR¶; PSIDATADIR is an environment variable containing the location of the; text resource parts of the PSI4 codebase (e.g., basis sets,; databases, EFP fragments). It is for developer use only. In PSI4 1.1; and beyond, the program always knows where its resources are, and the; only reason to set this variable is to point to another location.; Previously in PSI4 1.0 and previous, only installed executables knew; the location, so it always needed to be explicitly set when run from the; compilation directory.; At runtime; >>> psi4 -p {top-level-psi4-dir}/psi4/share/psi4. Or in the shell; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIDATADIR {top-level-psi4-dir}/psi4/share/psi4. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIDATADIR={top-level-psi4-dir}/psi4/share/psi4. How to configure C++ and C compilers for building Psi4¶; Role and Dependencies. Role — In PSI4, a C++ compiler is vital for building the code.; Downstream Dependencies — PSI4 \(\Leftarrow\) C++ Compiler. CMake Variables. CMAKE_CXX_COMPILER — CMake variable to specify name or full path to C++ compiler.; CMAKE_C_COMPILER — CMake variable to specify name or full path to C compiler.; CMAKE_CXX_FLAGS — CMake variable to specify any additional custom compiler flags for C++ source.; CMAKE_C_FLAGS — CMake variable to specify any additional custom compiler flags for C source. Examples. Build with detected compilers from PATH. >>> cmake. Build with specific (Intel) compilers from PATH. >>> cmake -DCMAKE_CXX_COMPILER=icpc -DCMAKE_C_COMPILER=icc. Build with specific (GNU) compilers not in PATH. >>> cmake -DCMAKE_CXX_COMPILER=/path/to/gcc6.2/bin/g++ -DCMAKE_C_COMPILER=/path/to/gcc6.2/bin/gcc. Build with specific (Intel) compilers from PATH based on GCC not in PATH. >>> cmake -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:34019,Modifiability,variab,variable,34019," of the PSI4 codebase (e.g., basis sets,; databases, EFP fragments). It is for developer use only. In PSI4 1.1; and beyond, the program always knows where its resources are, and the; only reason to set this variable is to point to another location.; Previously in PSI4 1.0 and previous, only installed executables knew; the location, so it always needed to be explicitly set when run from the; compilation directory.; At runtime; >>> psi4 -p {top-level-psi4-dir}/psi4/share/psi4. Or in the shell; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIDATADIR {top-level-psi4-dir}/psi4/share/psi4. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIDATADIR={top-level-psi4-dir}/psi4/share/psi4. How to configure C++ and C compilers for building Psi4¶; Role and Dependencies. Role — In PSI4, a C++ compiler is vital for building the code.; Downstream Dependencies — PSI4 \(\Leftarrow\) C++ Compiler. CMake Variables. CMAKE_CXX_COMPILER — CMake variable to specify name or full path to C++ compiler.; CMAKE_C_COMPILER — CMake variable to specify name or full path to C compiler.; CMAKE_CXX_FLAGS — CMake variable to specify any additional custom compiler flags for C++ source.; CMAKE_C_FLAGS — CMake variable to specify any additional custom compiler flags for C source. Examples. Build with detected compilers from PATH. >>> cmake. Build with specific (Intel) compilers from PATH. >>> cmake -DCMAKE_CXX_COMPILER=icpc -DCMAKE_C_COMPILER=icc. Build with specific (GNU) compilers not in PATH. >>> cmake -DCMAKE_CXX_COMPILER=/path/to/gcc6.2/bin/g++ -DCMAKE_C_COMPILER=/path/to/gcc6.2/bin/gcc. Build with specific (Intel) compilers from PATH based on GCC not in PATH. >>> cmake -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gcc-name=${GCC5}/bin/gcc"" \; -DCMAKE_CXX_FLAGS=""-gcc-name=${GCC5}/bin/gcc -gxx-name=${GCC5}/bin/g++"". Build with specific (Intel) compilers from PATH based on GCC not in PATH and also building Fortran Add-Ons. >",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:34100,Modifiability,variab,variable,34100,"eveloper use only. In PSI4 1.1; and beyond, the program always knows where its resources are, and the; only reason to set this variable is to point to another location.; Previously in PSI4 1.0 and previous, only installed executables knew; the location, so it always needed to be explicitly set when run from the; compilation directory.; At runtime; >>> psi4 -p {top-level-psi4-dir}/psi4/share/psi4. Or in the shell; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIDATADIR {top-level-psi4-dir}/psi4/share/psi4. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIDATADIR={top-level-psi4-dir}/psi4/share/psi4. How to configure C++ and C compilers for building Psi4¶; Role and Dependencies. Role — In PSI4, a C++ compiler is vital for building the code.; Downstream Dependencies — PSI4 \(\Leftarrow\) C++ Compiler. CMake Variables. CMAKE_CXX_COMPILER — CMake variable to specify name or full path to C++ compiler.; CMAKE_C_COMPILER — CMake variable to specify name or full path to C compiler.; CMAKE_CXX_FLAGS — CMake variable to specify any additional custom compiler flags for C++ source.; CMAKE_C_FLAGS — CMake variable to specify any additional custom compiler flags for C source. Examples. Build with detected compilers from PATH. >>> cmake. Build with specific (Intel) compilers from PATH. >>> cmake -DCMAKE_CXX_COMPILER=icpc -DCMAKE_C_COMPILER=icc. Build with specific (GNU) compilers not in PATH. >>> cmake -DCMAKE_CXX_COMPILER=/path/to/gcc6.2/bin/g++ -DCMAKE_C_COMPILER=/path/to/gcc6.2/bin/gcc. Build with specific (Intel) compilers from PATH based on GCC not in PATH. >>> cmake -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gcc-name=${GCC5}/bin/gcc"" \; -DCMAKE_CXX_FLAGS=""-gcc-name=${GCC5}/bin/gcc -gxx-name=${GCC5}/bin/g++"". Build with specific (Intel) compilers from PATH based on GCC not in PATH and also building Fortran Add-Ons. >>> cmake -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_Fortran_C",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:34178,Modifiability,variab,variable,34178,"are, and the; only reason to set this variable is to point to another location.; Previously in PSI4 1.0 and previous, only installed executables knew; the location, so it always needed to be explicitly set when run from the; compilation directory.; At runtime; >>> psi4 -p {top-level-psi4-dir}/psi4/share/psi4. Or in the shell; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIDATADIR {top-level-psi4-dir}/psi4/share/psi4. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIDATADIR={top-level-psi4-dir}/psi4/share/psi4. How to configure C++ and C compilers for building Psi4¶; Role and Dependencies. Role — In PSI4, a C++ compiler is vital for building the code.; Downstream Dependencies — PSI4 \(\Leftarrow\) C++ Compiler. CMake Variables. CMAKE_CXX_COMPILER — CMake variable to specify name or full path to C++ compiler.; CMAKE_C_COMPILER — CMake variable to specify name or full path to C compiler.; CMAKE_CXX_FLAGS — CMake variable to specify any additional custom compiler flags for C++ source.; CMAKE_C_FLAGS — CMake variable to specify any additional custom compiler flags for C source. Examples. Build with detected compilers from PATH. >>> cmake. Build with specific (Intel) compilers from PATH. >>> cmake -DCMAKE_CXX_COMPILER=icpc -DCMAKE_C_COMPILER=icc. Build with specific (GNU) compilers not in PATH. >>> cmake -DCMAKE_CXX_COMPILER=/path/to/gcc6.2/bin/g++ -DCMAKE_C_COMPILER=/path/to/gcc6.2/bin/gcc. Build with specific (Intel) compilers from PATH based on GCC not in PATH. >>> cmake -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gcc-name=${GCC5}/bin/gcc"" \; -DCMAKE_CXX_FLAGS=""-gcc-name=${GCC5}/bin/gcc -gxx-name=${GCC5}/bin/g++"". Build with specific (Intel) compilers from PATH based on GCC not in PATH and also building Fortran Add-Ons. >>> cmake -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_Fortran_COMPILER=ifort \; -DCMAKE_C_FLAGS=""-gcc-name=${GCC5}/bin/gcc"" \; -DCMAKE_CXX_FLAGS=""-gcc-",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:34274,Modifiability,variab,variable,34274,"SI4 1.0 and previous, only installed executables knew; the location, so it always needed to be explicitly set when run from the; compilation directory.; At runtime; >>> psi4 -p {top-level-psi4-dir}/psi4/share/psi4. Or in the shell; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIDATADIR {top-level-psi4-dir}/psi4/share/psi4. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIDATADIR={top-level-psi4-dir}/psi4/share/psi4. How to configure C++ and C compilers for building Psi4¶; Role and Dependencies. Role — In PSI4, a C++ compiler is vital for building the code.; Downstream Dependencies — PSI4 \(\Leftarrow\) C++ Compiler. CMake Variables. CMAKE_CXX_COMPILER — CMake variable to specify name or full path to C++ compiler.; CMAKE_C_COMPILER — CMake variable to specify name or full path to C compiler.; CMAKE_CXX_FLAGS — CMake variable to specify any additional custom compiler flags for C++ source.; CMAKE_C_FLAGS — CMake variable to specify any additional custom compiler flags for C source. Examples. Build with detected compilers from PATH. >>> cmake. Build with specific (Intel) compilers from PATH. >>> cmake -DCMAKE_CXX_COMPILER=icpc -DCMAKE_C_COMPILER=icc. Build with specific (GNU) compilers not in PATH. >>> cmake -DCMAKE_CXX_COMPILER=/path/to/gcc6.2/bin/g++ -DCMAKE_C_COMPILER=/path/to/gcc6.2/bin/gcc. Build with specific (Intel) compilers from PATH based on GCC not in PATH. >>> cmake -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gcc-name=${GCC5}/bin/gcc"" \; -DCMAKE_CXX_FLAGS=""-gcc-name=${GCC5}/bin/gcc -gxx-name=${GCC5}/bin/g++"". Build with specific (Intel) compilers from PATH based on GCC not in PATH and also building Fortran Add-Ons. >>> cmake -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_Fortran_COMPILER=ifort \; -DCMAKE_C_FLAGS=""-gcc-name=${GCC5}/bin/gcc"" \; -DCMAKE_CXX_FLAGS=""-gcc-name=${GCC5}/bin/gcc -gxx-name=${GCC5}/bin/g++"" \; -DCMAKE_Fortran_FLAGS=""-gcc-name=${GCC5}/bin/",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:37829,Modifiability,variab,variables,37829,"API Classic compilers work fine, as do OneAPI Clang icpx compilers. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS. How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew¶; The easiest compiler to obtain is clang which is a drop-in replacement; for gcc and g++. Just install XCode. Some old versions; of XCode can’t handle some of the advanced C++ language features, but this; is a software not hardware limitation. Checks for version compliance; performed at build-time. Note that this “AppleClang” will not be compatible; with conda Mac packages using C++11, nor can it make use of OpenMP directives.; Another route to obtaining clang compilers without the above limitations; is through conda.; # Install Clang 4.0.1 into a non-primary conda environment; >>> conda create -n clang401 clangxx_osx-64 clang_osx-64 llvm-openmp intel-openmp. # To Build, activate environment (prepends PATH and defines environment variables CLANG, CLANGXX, HOST, etc):; >>> conda activate clang401; >>> echo ${CLANGXX}; /path/to/miniconda/envs/clang401/bin/x86_64-apple-darwin13.4.0-clang++; >>> echo ${HOST}; x86_64-apple-darwin13.4.0. # build with Clang; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=${CLANG} \; -DCMAKE_CXX_COMPILER=${CLANGXX} \; -DCMAKE_CXX_FLAGS=""-stdlib=libc++"" \; -DOpenMP_CXX_FLAG=""-fopenmp=libiomp5"". # build with Intel; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-clang-name=${CLANG}"" \; -DCMAKE_CXX_FLAGS=""-clang-name=${CLANG} -clangxx-name=${CLANGXX} -stdlib=libc++ -I${CONDA_PREFIX}/include/c++/v1"". # Configure and build. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS¶; # See if GCC too old (in this case, yes); >>> gcc --version; gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-4). Even if you’re not using GCC as a compiler, your Intel compiler seeks; gcc to generate code compatible with your current GCC version. If your; GCC is too old (like above), you can up",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:39241,Modifiability,variab,variables,39241,"_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-clang-name=${CLANG}"" \; -DCMAKE_CXX_FLAGS=""-clang-name=${CLANG} -clangxx-name=${CLANGXX} -stdlib=libc++ -I${CONDA_PREFIX}/include/c++/v1"". # Configure and build. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS¶; # See if GCC too old (in this case, yes); >>> gcc --version; gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-4). Even if you’re not using GCC as a compiler, your Intel compiler seeks; gcc to generate code compatible with your current GCC version. If your; GCC is too old (like above), you can update your system GCC through your; package manager or install an acceptable version elsewhere on your; system. The latter route, tested on Linux with Intel compilers, is below.; # Install GCC 7.2 into a non-primary conda environment; >>> conda create -n gcc72 gxx_linux-64 gcc_linux-64. # To Build, either:. # (A) activate environment (prepends PATH and defines environment variables CC, CXX, HOST, etc); >>> conda activate gcc72; >>> echo ${CXX}; /path/to/miniconda/envs/gcc72/bin/x86_64-conda_cos6-linux-gnu-g++; >>> echo ${HOST}; x86_64-conda_cos6-linux-gnu. # build with GNU; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=${CC} \; -DCMAKE_CXX_COMPILER=${CXX} \. # build with Intel; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${HOST}-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${HOST}-"" \. # (B) tell CMake to tell the compiler which GCC to use; >>> GCC7=/path/to/miniconda/envs/gcc72; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; ...; # if Fortran active ...; -DCMAKE_Fortran_COMPILER=ifort \; -DCMAKE_Fortran_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \. # Configure and build. # To Run:; >>> export LD_LIBRARY_PATH=${GCC7}/lib:$LD_LIBRARY_PATH. How to configure a Psi4",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:40285,Modifiability,config,configure,40285,"conda_cos6-linux-gnu-g++; >>> echo ${HOST}; x86_64-conda_cos6-linux-gnu. # build with GNU; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=${CC} \; -DCMAKE_CXX_COMPILER=${CXX} \. # build with Intel; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${HOST}-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${HOST}-"" \. # (B) tell CMake to tell the compiler which GCC to use; >>> GCC7=/path/to/miniconda/envs/gcc72; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; ...; # if Fortran active ...; -DCMAKE_Fortran_COMPILER=ifort \; -DCMAKE_Fortran_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \. # Configure and build. # To Run:; >>> export LD_LIBRARY_PATH=${GCC7}/lib:$LD_LIBRARY_PATH. How to configure a Psi4 build on Cray¶; Cray systems strongly prefer to build static libraries, but PSI4; needs to be dynamic to function as a Python module. Courtesy of @misha; at the forum and various supercomputer guides, building PSI4 on; Cray requires setting environment variables before running cmake.; CRAYPE_LINK_TYPE=dynamic CRAY_ADD_RPATH=yes cmake ... CRAYPE_LINK_TYPE¶; Set to allow PSI4 to build as shared library on Cray supercomputers. CRAY_ADD_RPATH¶; Set to true to allow PSI4 to build on Cray supercomputers. How to configure Fortran compilers for building Psi4¶; Role and Dependencies. Role — In PSI4, a Fortran compiler in unneeded for core; features but may be required for add-ons.; Downstream Dependencies. PSI4 (\(\Leftarrow\) optional) Fortran Compiler; dkh, gdma, PCMSolver \(\Leftarrow\) Fortran Compiler. CMake Variables. CMAKE_Fortran_COMPILER — CMake variable to specify name or full path to Fortran compiler.; CMAKE_Fortran_FLAGS — CMake variable to specify any additional custom compiler flags for Fortran source. Examples. Build with detected c",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:40555,Modifiability,variab,variables,40555,"X_COMPILER=${CXX} \. # build with Intel; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${HOST}-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${HOST}-"" \. # (B) tell CMake to tell the compiler which GCC to use; >>> GCC7=/path/to/miniconda/envs/gcc72; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; ...; # if Fortran active ...; -DCMAKE_Fortran_COMPILER=ifort \; -DCMAKE_Fortran_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \. # Configure and build. # To Run:; >>> export LD_LIBRARY_PATH=${GCC7}/lib:$LD_LIBRARY_PATH. How to configure a Psi4 build on Cray¶; Cray systems strongly prefer to build static libraries, but PSI4; needs to be dynamic to function as a Python module. Courtesy of @misha; at the forum and various supercomputer guides, building PSI4 on; Cray requires setting environment variables before running cmake.; CRAYPE_LINK_TYPE=dynamic CRAY_ADD_RPATH=yes cmake ... CRAYPE_LINK_TYPE¶; Set to allow PSI4 to build as shared library on Cray supercomputers. CRAY_ADD_RPATH¶; Set to true to allow PSI4 to build on Cray supercomputers. How to configure Fortran compilers for building Psi4¶; Role and Dependencies. Role — In PSI4, a Fortran compiler in unneeded for core; features but may be required for add-ons.; Downstream Dependencies. PSI4 (\(\Leftarrow\) optional) Fortran Compiler; dkh, gdma, PCMSolver \(\Leftarrow\) Fortran Compiler. CMake Variables. CMAKE_Fortran_COMPILER — CMake variable to specify name or full path to Fortran compiler.; CMAKE_Fortran_FLAGS — CMake variable to specify any additional custom compiler flags for Fortran source. Examples. Build with detected compiler from PATH. >>> cmake. Build with specific (Intel) compiler from PATH. >>> cmake -DCMAKE_Fortran_COMPILER=ifort. What Fortran compilers are approved",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:40813,Modifiability,config,configure,40813,"E_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; ...; # if Fortran active ...; -DCMAKE_Fortran_COMPILER=ifort \; -DCMAKE_Fortran_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \. # Configure and build. # To Run:; >>> export LD_LIBRARY_PATH=${GCC7}/lib:$LD_LIBRARY_PATH. How to configure a Psi4 build on Cray¶; Cray systems strongly prefer to build static libraries, but PSI4; needs to be dynamic to function as a Python module. Courtesy of @misha; at the forum and various supercomputer guides, building PSI4 on; Cray requires setting environment variables before running cmake.; CRAYPE_LINK_TYPE=dynamic CRAY_ADD_RPATH=yes cmake ... CRAYPE_LINK_TYPE¶; Set to allow PSI4 to build as shared library on Cray supercomputers. CRAY_ADD_RPATH¶; Set to true to allow PSI4 to build on Cray supercomputers. How to configure Fortran compilers for building Psi4¶; Role and Dependencies. Role — In PSI4, a Fortran compiler in unneeded for core; features but may be required for add-ons.; Downstream Dependencies. PSI4 (\(\Leftarrow\) optional) Fortran Compiler; dkh, gdma, PCMSolver \(\Leftarrow\) Fortran Compiler. CMake Variables. CMAKE_Fortran_COMPILER — CMake variable to specify name or full path to Fortran compiler.; CMAKE_Fortran_FLAGS — CMake variable to specify any additional custom compiler flags for Fortran source. Examples. Build with detected compiler from PATH. >>> cmake. Build with specific (Intel) compiler from PATH. >>> cmake -DCMAKE_Fortran_COMPILER=ifort. What Fortran compilers are approved¶; On Linux and Mac, the following work nicely. GNU: gfortran; Intel: ifort. Packages to install for specific OS or package managers:. Ubuntu gfortran; conda gfortran_linux-64 or gfortran_osx-64 to get gfortran. How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew¶; Xcode does not provide a Fortran compiler.",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:41160,Modifiability,variab,variable,41160,"inux-gnu-"" \. # Configure and build. # To Run:; >>> export LD_LIBRARY_PATH=${GCC7}/lib:$LD_LIBRARY_PATH. How to configure a Psi4 build on Cray¶; Cray systems strongly prefer to build static libraries, but PSI4; needs to be dynamic to function as a Python module. Courtesy of @misha; at the forum and various supercomputer guides, building PSI4 on; Cray requires setting environment variables before running cmake.; CRAYPE_LINK_TYPE=dynamic CRAY_ADD_RPATH=yes cmake ... CRAYPE_LINK_TYPE¶; Set to allow PSI4 to build as shared library on Cray supercomputers. CRAY_ADD_RPATH¶; Set to true to allow PSI4 to build on Cray supercomputers. How to configure Fortran compilers for building Psi4¶; Role and Dependencies. Role — In PSI4, a Fortran compiler in unneeded for core; features but may be required for add-ons.; Downstream Dependencies. PSI4 (\(\Leftarrow\) optional) Fortran Compiler; dkh, gdma, PCMSolver \(\Leftarrow\) Fortran Compiler. CMake Variables. CMAKE_Fortran_COMPILER — CMake variable to specify name or full path to Fortran compiler.; CMAKE_Fortran_FLAGS — CMake variable to specify any additional custom compiler flags for Fortran source. Examples. Build with detected compiler from PATH. >>> cmake. Build with specific (Intel) compiler from PATH. >>> cmake -DCMAKE_Fortran_COMPILER=ifort. What Fortran compilers are approved¶; On Linux and Mac, the following work nicely. GNU: gfortran; Intel: ifort. Packages to install for specific OS or package managers:. Ubuntu gfortran; conda gfortran_linux-64 or gfortran_osx-64 to get gfortran. How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew¶; Xcode does not provide a Fortran compiler. A way to get one is to download; the gfortran_osx-64 conda package. This provides; gfortran compilers for Mac. The version is 4.8.5, which is quite old,; but the Fortran compiler will work. How to configure BLAS/LAPACK for building Psi4¶; Role and Dependencies. Role — In PSI4, BLAS and LAPACK control much of the speed; and eff",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:41248,Modifiability,variab,variable,41248,"_PATH. How to configure a Psi4 build on Cray¶; Cray systems strongly prefer to build static libraries, but PSI4; needs to be dynamic to function as a Python module. Courtesy of @misha; at the forum and various supercomputer guides, building PSI4 on; Cray requires setting environment variables before running cmake.; CRAYPE_LINK_TYPE=dynamic CRAY_ADD_RPATH=yes cmake ... CRAYPE_LINK_TYPE¶; Set to allow PSI4 to build as shared library on Cray supercomputers. CRAY_ADD_RPATH¶; Set to true to allow PSI4 to build on Cray supercomputers. How to configure Fortran compilers for building Psi4¶; Role and Dependencies. Role — In PSI4, a Fortran compiler in unneeded for core; features but may be required for add-ons.; Downstream Dependencies. PSI4 (\(\Leftarrow\) optional) Fortran Compiler; dkh, gdma, PCMSolver \(\Leftarrow\) Fortran Compiler. CMake Variables. CMAKE_Fortran_COMPILER — CMake variable to specify name or full path to Fortran compiler.; CMAKE_Fortran_FLAGS — CMake variable to specify any additional custom compiler flags for Fortran source. Examples. Build with detected compiler from PATH. >>> cmake. Build with specific (Intel) compiler from PATH. >>> cmake -DCMAKE_Fortran_COMPILER=ifort. What Fortran compilers are approved¶; On Linux and Mac, the following work nicely. GNU: gfortran; Intel: ifort. Packages to install for specific OS or package managers:. Ubuntu gfortran; conda gfortran_linux-64 or gfortran_osx-64 to get gfortran. How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew¶; Xcode does not provide a Fortran compiler. A way to get one is to download; the gfortran_osx-64 conda package. This provides; gfortran compilers for Mac. The version is 4.8.5, which is quite old,; but the Fortran compiler will work. How to configure BLAS/LAPACK for building Psi4¶; Role and Dependencies. Role — In PSI4, BLAS and LAPACK control much of the speed; and efficiency of the code since computational chemistry is essentially; linear algebra on molecular syst",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:42042,Modifiability,config,configure,42042,"CMSolver \(\Leftarrow\) Fortran Compiler. CMake Variables. CMAKE_Fortran_COMPILER — CMake variable to specify name or full path to Fortran compiler.; CMAKE_Fortran_FLAGS — CMake variable to specify any additional custom compiler flags for Fortran source. Examples. Build with detected compiler from PATH. >>> cmake. Build with specific (Intel) compiler from PATH. >>> cmake -DCMAKE_Fortran_COMPILER=ifort. What Fortran compilers are approved¶; On Linux and Mac, the following work nicely. GNU: gfortran; Intel: ifort. Packages to install for specific OS or package managers:. Ubuntu gfortran; conda gfortran_linux-64 or gfortran_osx-64 to get gfortran. How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew¶; Xcode does not provide a Fortran compiler. A way to get one is to download; the gfortran_osx-64 conda package. This provides; gfortran compilers for Mac. The version is 4.8.5, which is quite old,; but the Fortran compiler will work. How to configure BLAS/LAPACK for building Psi4¶; Role and Dependencies. Role — In PSI4, BLAS and LAPACK control much of the speed; and efficiency of the code since computational chemistry is essentially; linear algebra on molecular systems.; Downstream Dependencies — PSI4 \(\Leftarrow\) LAPACK Libraries. CMake Variables. BLAS_TYPE — CMake variable to specify which BLAS libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; LAPACK_TYPE — CMake variable to specify which LAPACK libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; LAPACK_LIBRARIES — CMake variable to specify BLAS/LAPACK libraries explicitly, bypassing math detection. Should be “;”-separated list of full paths.; LAPACK_INCLUDE_DIRS — CMake variable to specify BLAS/LAPACK header location explicitly, bypassing math detection. Only needed for MKL.; OpenMP_LIBRARY_DIRS — CMake variable to specify OpenMP library (iomp5/gomp/omp) directories explicitly. Should be “;”-separated list of full directory paths. Usually the solution",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:42376,Modifiability,variab,variable,42376,"piler from PATH. >>> cmake -DCMAKE_Fortran_COMPILER=ifort. What Fortran compilers are approved¶; On Linux and Mac, the following work nicely. GNU: gfortran; Intel: ifort. Packages to install for specific OS or package managers:. Ubuntu gfortran; conda gfortran_linux-64 or gfortran_osx-64 to get gfortran. How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew¶; Xcode does not provide a Fortran compiler. A way to get one is to download; the gfortran_osx-64 conda package. This provides; gfortran compilers for Mac. The version is 4.8.5, which is quite old,; but the Fortran compiler will work. How to configure BLAS/LAPACK for building Psi4¶; Role and Dependencies. Role — In PSI4, BLAS and LAPACK control much of the speed; and efficiency of the code since computational chemistry is essentially; linear algebra on molecular systems.; Downstream Dependencies — PSI4 \(\Leftarrow\) LAPACK Libraries. CMake Variables. BLAS_TYPE — CMake variable to specify which BLAS libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; LAPACK_TYPE — CMake variable to specify which LAPACK libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; LAPACK_LIBRARIES — CMake variable to specify BLAS/LAPACK libraries explicitly, bypassing math detection. Should be “;”-separated list of full paths.; LAPACK_INCLUDE_DIRS — CMake variable to specify BLAS/LAPACK header location explicitly, bypassing math detection. Only needed for MKL.; OpenMP_LIBRARY_DIRS — CMake variable to specify OpenMP library (iomp5/gomp/omp) directories explicitly. Should be “;”-separated list of full directory paths. Usually the solution to error Could NOT find MathOpenMP. MKL_ROOT¶; Environment variable set by Intel compilervars scripts. Sufficient to trigger math detection of MKL at this location. MATH_ROOT¶; Environment variable to specify root directory in which BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib64/libblas.so and ${MATH_ROOT}/lib64/liblapack.so)",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:42500,Modifiability,variab,variable,42500,"wing work nicely. GNU: gfortran; Intel: ifort. Packages to install for specific OS or package managers:. Ubuntu gfortran; conda gfortran_linux-64 or gfortran_osx-64 to get gfortran. How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew¶; Xcode does not provide a Fortran compiler. A way to get one is to download; the gfortran_osx-64 conda package. This provides; gfortran compilers for Mac. The version is 4.8.5, which is quite old,; but the Fortran compiler will work. How to configure BLAS/LAPACK for building Psi4¶; Role and Dependencies. Role — In PSI4, BLAS and LAPACK control much of the speed; and efficiency of the code since computational chemistry is essentially; linear algebra on molecular systems.; Downstream Dependencies — PSI4 \(\Leftarrow\) LAPACK Libraries. CMake Variables. BLAS_TYPE — CMake variable to specify which BLAS libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; LAPACK_TYPE — CMake variable to specify which LAPACK libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; LAPACK_LIBRARIES — CMake variable to specify BLAS/LAPACK libraries explicitly, bypassing math detection. Should be “;”-separated list of full paths.; LAPACK_INCLUDE_DIRS — CMake variable to specify BLAS/LAPACK header location explicitly, bypassing math detection. Only needed for MKL.; OpenMP_LIBRARY_DIRS — CMake variable to specify OpenMP library (iomp5/gomp/omp) directories explicitly. Should be “;”-separated list of full directory paths. Usually the solution to error Could NOT find MathOpenMP. MKL_ROOT¶; Environment variable set by Intel compilervars scripts. Sufficient to trigger math detection of MKL at this location. MATH_ROOT¶; Environment variable to specify root directory in which BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib64/libblas.so and ${MATH_ROOT}/lib64/liblapack.so). Examples. Build with any LAPACK in standard location. >>> cmake. Build with native Accelerate LAPACK on Mac (MKL not also",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:42631,Modifiability,variab,variable,42631,"tran; conda gfortran_linux-64 or gfortran_osx-64 to get gfortran. How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew¶; Xcode does not provide a Fortran compiler. A way to get one is to download; the gfortran_osx-64 conda package. This provides; gfortran compilers for Mac. The version is 4.8.5, which is quite old,; but the Fortran compiler will work. How to configure BLAS/LAPACK for building Psi4¶; Role and Dependencies. Role — In PSI4, BLAS and LAPACK control much of the speed; and efficiency of the code since computational chemistry is essentially; linear algebra on molecular systems.; Downstream Dependencies — PSI4 \(\Leftarrow\) LAPACK Libraries. CMake Variables. BLAS_TYPE — CMake variable to specify which BLAS libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; LAPACK_TYPE — CMake variable to specify which LAPACK libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; LAPACK_LIBRARIES — CMake variable to specify BLAS/LAPACK libraries explicitly, bypassing math detection. Should be “;”-separated list of full paths.; LAPACK_INCLUDE_DIRS — CMake variable to specify BLAS/LAPACK header location explicitly, bypassing math detection. Only needed for MKL.; OpenMP_LIBRARY_DIRS — CMake variable to specify OpenMP library (iomp5/gomp/omp) directories explicitly. Should be “;”-separated list of full directory paths. Usually the solution to error Could NOT find MathOpenMP. MKL_ROOT¶; Environment variable set by Intel compilervars scripts. Sufficient to trigger math detection of MKL at this location. MATH_ROOT¶; Environment variable to specify root directory in which BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib64/libblas.so and ${MATH_ROOT}/lib64/liblapack.so). Examples. Build with any LAPACK in standard location. >>> cmake. Build with native Accelerate LAPACK on Mac (MKL not also present).; If NumPy not using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. >>> cmake. Bui",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:42784,Modifiability,variab,variable,42784,"s not provide a Fortran compiler. A way to get one is to download; the gfortran_osx-64 conda package. This provides; gfortran compilers for Mac. The version is 4.8.5, which is quite old,; but the Fortran compiler will work. How to configure BLAS/LAPACK for building Psi4¶; Role and Dependencies. Role — In PSI4, BLAS and LAPACK control much of the speed; and efficiency of the code since computational chemistry is essentially; linear algebra on molecular systems.; Downstream Dependencies — PSI4 \(\Leftarrow\) LAPACK Libraries. CMake Variables. BLAS_TYPE — CMake variable to specify which BLAS libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; LAPACK_TYPE — CMake variable to specify which LAPACK libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; LAPACK_LIBRARIES — CMake variable to specify BLAS/LAPACK libraries explicitly, bypassing math detection. Should be “;”-separated list of full paths.; LAPACK_INCLUDE_DIRS — CMake variable to specify BLAS/LAPACK header location explicitly, bypassing math detection. Only needed for MKL.; OpenMP_LIBRARY_DIRS — CMake variable to specify OpenMP library (iomp5/gomp/omp) directories explicitly. Should be “;”-separated list of full directory paths. Usually the solution to error Could NOT find MathOpenMP. MKL_ROOT¶; Environment variable set by Intel compilervars scripts. Sufficient to trigger math detection of MKL at this location. MATH_ROOT¶; Environment variable to specify root directory in which BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib64/libblas.so and ${MATH_ROOT}/lib64/liblapack.so). Examples. Build with any LAPACK in standard location. >>> cmake. Build with native Accelerate LAPACK on Mac (MKL not also present).; If NumPy not using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. >>> cmake. Build with native Accelerate LAPACK on Mac (MKL also present); If NumPy not using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. >>> c",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:42920,Modifiability,variab,variable,42920,"lers for Mac. The version is 4.8.5, which is quite old,; but the Fortran compiler will work. How to configure BLAS/LAPACK for building Psi4¶; Role and Dependencies. Role — In PSI4, BLAS and LAPACK control much of the speed; and efficiency of the code since computational chemistry is essentially; linear algebra on molecular systems.; Downstream Dependencies — PSI4 \(\Leftarrow\) LAPACK Libraries. CMake Variables. BLAS_TYPE — CMake variable to specify which BLAS libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; LAPACK_TYPE — CMake variable to specify which LAPACK libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; LAPACK_LIBRARIES — CMake variable to specify BLAS/LAPACK libraries explicitly, bypassing math detection. Should be “;”-separated list of full paths.; LAPACK_INCLUDE_DIRS — CMake variable to specify BLAS/LAPACK header location explicitly, bypassing math detection. Only needed for MKL.; OpenMP_LIBRARY_DIRS — CMake variable to specify OpenMP library (iomp5/gomp/omp) directories explicitly. Should be “;”-separated list of full directory paths. Usually the solution to error Could NOT find MathOpenMP. MKL_ROOT¶; Environment variable set by Intel compilervars scripts. Sufficient to trigger math detection of MKL at this location. MATH_ROOT¶; Environment variable to specify root directory in which BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib64/libblas.so and ${MATH_ROOT}/lib64/liblapack.so). Examples. Build with any LAPACK in standard location. >>> cmake. Build with native Accelerate LAPACK on Mac (MKL not also present).; If NumPy not using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. >>> cmake. Build with native Accelerate LAPACK on Mac (MKL also present); If NumPy not using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. >>> cmake -DBLAS_TYPE=SYSTEM_NATIVE -DLAPACK_TYPE=SYSTEM_NATIVE. Build with Intel MKL. >>> source /path/to/intel/vers/linux/mkl/bin/mklv",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:43130,Modifiability,variab,variable,43130,"control much of the speed; and efficiency of the code since computational chemistry is essentially; linear algebra on molecular systems.; Downstream Dependencies — PSI4 \(\Leftarrow\) LAPACK Libraries. CMake Variables. BLAS_TYPE — CMake variable to specify which BLAS libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; LAPACK_TYPE — CMake variable to specify which LAPACK libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; LAPACK_LIBRARIES — CMake variable to specify BLAS/LAPACK libraries explicitly, bypassing math detection. Should be “;”-separated list of full paths.; LAPACK_INCLUDE_DIRS — CMake variable to specify BLAS/LAPACK header location explicitly, bypassing math detection. Only needed for MKL.; OpenMP_LIBRARY_DIRS — CMake variable to specify OpenMP library (iomp5/gomp/omp) directories explicitly. Should be “;”-separated list of full directory paths. Usually the solution to error Could NOT find MathOpenMP. MKL_ROOT¶; Environment variable set by Intel compilervars scripts. Sufficient to trigger math detection of MKL at this location. MATH_ROOT¶; Environment variable to specify root directory in which BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib64/libblas.so and ${MATH_ROOT}/lib64/liblapack.so). Examples. Build with any LAPACK in standard location. >>> cmake. Build with native Accelerate LAPACK on Mac (MKL not also present).; If NumPy not using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. >>> cmake. Build with native Accelerate LAPACK on Mac (MKL also present); If NumPy not using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. >>> cmake -DBLAS_TYPE=SYSTEM_NATIVE -DLAPACK_TYPE=SYSTEM_NATIVE. Build with Intel MKL. >>> source /path/to/intel/vers/linux/mkl/bin/mklvars.sh intel64 # adjust sh/csh and arch as needed; >>> cmake. >>> MATH_ROOT=/path/to/intel/vers/linux/mkl/ cmake. Build with Intel MKL from conda (install mkl-devel package from defaults channel). ",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:43260,Modifiability,variab,variable,43260,"endencies — PSI4 \(\Leftarrow\) LAPACK Libraries. CMake Variables. BLAS_TYPE — CMake variable to specify which BLAS libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; LAPACK_TYPE — CMake variable to specify which LAPACK libraries to look for among MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE.; LAPACK_LIBRARIES — CMake variable to specify BLAS/LAPACK libraries explicitly, bypassing math detection. Should be “;”-separated list of full paths.; LAPACK_INCLUDE_DIRS — CMake variable to specify BLAS/LAPACK header location explicitly, bypassing math detection. Only needed for MKL.; OpenMP_LIBRARY_DIRS — CMake variable to specify OpenMP library (iomp5/gomp/omp) directories explicitly. Should be “;”-separated list of full directory paths. Usually the solution to error Could NOT find MathOpenMP. MKL_ROOT¶; Environment variable set by Intel compilervars scripts. Sufficient to trigger math detection of MKL at this location. MATH_ROOT¶; Environment variable to specify root directory in which BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib64/libblas.so and ${MATH_ROOT}/lib64/liblapack.so). Examples. Build with any LAPACK in standard location. >>> cmake. Build with native Accelerate LAPACK on Mac (MKL not also present).; If NumPy not using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. >>> cmake. Build with native Accelerate LAPACK on Mac (MKL also present); If NumPy not using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. >>> cmake -DBLAS_TYPE=SYSTEM_NATIVE -DLAPACK_TYPE=SYSTEM_NATIVE. Build with Intel MKL. >>> source /path/to/intel/vers/linux/mkl/bin/mklvars.sh intel64 # adjust sh/csh and arch as needed; >>> cmake. >>> MATH_ROOT=/path/to/intel/vers/linux/mkl/ cmake. Build with Intel MKL from conda (install mkl-devel package from defaults channel). >>> cmake -DLAPACK_LIBRARIES=""${CONDA_PREFIX}/lib/libmkl_rt.so"" -DLAPACK_INCLUDE_DIRS=""${CONDA_PREFIX}/include"". OpenBLAS - see note below. >>> MATH_ROO",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:47390,Modifiability,variab,variables,47390,"nalysis.; Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391.; ACML libraries are known to work with PSI4 v1.1 at ACML 6. Because of how link loaders work, at runtime, the BLAS of PSI4; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if PSI4; and NumPy BLAS don’t match down to the library name (that is,; libmkl_rt, libmkl_core.so, libmkl_core.a are not; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for gory discussions.; Choose your NumPy and PSI4 compile conditions to use the same; BLAS distribution.; The BLAS/LAPACK detected for PSI4 are also linked into any; Add-Ons (e.g., libefp) that require them, rather than relying on; those packages’ native math detection.; The separation between BLAS and LAPACK seen in detection printing; and CMake variables is purely formal. In practice, they get run; together and linked as ${LAPACK_LIBRARIES} ${BLAS_LIBRARIES}.; Sometimes the CMake’s library search capabilites falter at SONAMEs; (e.g., libblas.so.3 vs. libblas.so), extensions (static; vs. dynamic), or suffixes (e.g., libacml_mp.so vs.; libacml.so). The developers would be interested in hearing; of such problems to expand the math detection capabilities. The; immediate solution, however, is to form symlinks between the; library names that exist and the names expected. Consult file; psi4/cmake/math/MathLibs.cmake for the library patterns being; sought.; The BLAS/LAPACK interface is standardized, so only libraries, not; headers, need to be detected. The exception is MKL, where the mkl.h; header defines additional functionality; it must be located to use; BLAS threading. How to configure Python for building Psi4¶; Role and Dependencies. Role — In PSI4, Python allows the core compiled C++ code to; be flexib",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:48234,Modifiability,config,configure,48234,"n relying on; those packages’ native math detection.; The separation between BLAS and LAPACK seen in detection printing; and CMake variables is purely formal. In practice, they get run; together and linked as ${LAPACK_LIBRARIES} ${BLAS_LIBRARIES}.; Sometimes the CMake’s library search capabilites falter at SONAMEs; (e.g., libblas.so.3 vs. libblas.so), extensions (static; vs. dynamic), or suffixes (e.g., libacml_mp.so vs.; libacml.so). The developers would be interested in hearing; of such problems to expand the math detection capabilities. The; immediate solution, however, is to form symlinks between the; library names that exist and the names expected. Consult file; psi4/cmake/math/MathLibs.cmake for the library patterns being; sought.; The BLAS/LAPACK interface is standardized, so only libraries, not; headers, need to be detected. The exception is MKL, where the mkl.h; header defines additional functionality; it must be located to use; BLAS threading. How to configure Python for building Psi4¶; Role and Dependencies. Role — In PSI4, Python allows the core compiled C++ code to; be flexibly accessed for manipulation and extension in an interpreted; language.; Downstream Dependencies — PSI4 \(\Leftarrow\) Python Interpreter. CMake Variables; Note that in v1.4, PSI4 switched from Numpy-written CMake Python; detection to new CMake-written CMake Python detection. Usually only; Python_EXECUTABLE is now needed to hint Python’s location. See; https://cmake.org/cmake/help/latest/module/FindPython.html for full; guidance. Python_EXECUTABLE — specify name or full path to Python interpreter.; Python_LIBRARY — specify path to Python library.; Python_INCLUDE_DIR — specify directory of Python headers. Contains Python.h. Examples. Build with detected Python from PATH. >>> cmake. Build with specific Python. >>> cmake -DPython_EXECUTABLE=/path/to/interp/python3.9. Build with full Python specification to root directory ${PFXC}. >>> cmake -DPython_EXECUTABLE=""${PFXC}/bin/python"" \; -DP",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:51991,Modifiability,variab,variable,51991,"kers.; >>> cat ~/.vimrc; set hlsearch; map <F7> :/\(<<<<<<<\\|=======\\|>>>>>>>\)<CR>. How to handle “runtime library may be hidden” when building with Anaconda Python¶; When building against Ana/Miniconda python (e.g., cmake; -DPython_EXECUTABLE=/path/to/conda/bin/python), the warning below often; appears. It is harmless, proceed.; CMake Warning at src/bin/psi4/CMakeLists.txt:58 (add_executable):; Cannot generate a safe runtime search path for target psi4 because files in; some directories may conflict with libraries in implicit directories:. runtime library [libm.so.6] in /usr/lib64 may be hidden by files in:; /theoryfs2/common/software/anaconda/lib. Some of these libraries may not be found correctly. How to set up the scratch directory¶; The scratch directory is where Psi4 stores potentially large files during; computation. It should thus be on a local, fast disk to minimize any; computational inefficiencies caused by I/O. The scratch directory is; commonly set up through the PSI_SCRATCH environment variable:; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. See also the more general scratch documentation. How do I retain specific Psi4 scratch files¶; You can set up a specific path for PSI4 scratch file and keep them; for later use through the psi4_io handler. How to use Psi4 within a PBS queue¶; You will usually need to set up a PBS job script that is setting all; necessary environment variables, making sure the scratch directories are; set up, and invoking the executable. An example PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. How to update and rebuild Psi4¶; Obtain code updates as appropriate from Binary Installer,; Clone fr",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:52653,Modifiability,variab,variables,52653,". Some of these libraries may not be found correctly. How to set up the scratch directory¶; The scratch directory is where Psi4 stores potentially large files during; computation. It should thus be on a local, fast disk to minimize any; computational inefficiencies caused by I/O. The scratch directory is; commonly set up through the PSI_SCRATCH environment variable:; # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. See also the more general scratch documentation. How do I retain specific Psi4 scratch files¶; You can set up a specific path for PSI4 scratch file and keep them; for later use through the psi4_io handler. How to use Psi4 within a PBS queue¶; You will usually need to set up a PBS job script that is setting all; necessary environment variables, making sure the scratch directories are; set up, and invoking the executable. An example PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. How to update and rebuild Psi4¶; Obtain code updates as appropriate from Binary Installer,; Clone from GitHub Repository, or Fork from GitHub Repository. Move into; objdir and reissue make or cmake --build ., whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke cmake to update; objdir based on changes to the PSI4 repository.; Upon switching conda environments, though, one should; make a new objdir since there are many full paths baked into; objdir/CMakeCache.txt. How to run a minute’s worth of tests¶; When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful.; >>> ctest -L smoke -j`getc",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:56642,Modifiability,config,configure,56642,"hen ctest reports that some (or all) tests have failed, look in your; build directory for file; objdir/Testing/Temporary/LastTest.log. It may have a; .tmp extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake’s testing; output, as well as everything that was printed to the screen. How to test a Psi4 installation¶; ctest requires a connection to source files and cmake; machinery and so can only be performed from objdir; (staged installation). To test an installed PSI4 (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of “smoke” tests is; generally sufficient to verify an installation. From the executable; # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. From the library (PSI4 must be detectable as a Python; module. See setup at How to configure paths for PsiAPI; if needed.); # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". From pytest directly. If package pytest-xdist is installed, can run in parallel.; # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below. PASSED in green is good; (means test ran correctly); SKIPPED in yellow is good (means that; not all software required for test is available); XPASS or XFAIL; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (e.g., multiple cores); to run correctly); FAILED in red is bad.; test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:59688,Modifiability,config,configured,59688,"epository in the Psi4 build¶; For each Add-On, PSI4 pulls source from a specific online Git; repository and a specific tag/branch/commit in it. This ensures success; of the PSI4 build, reproducibility of the runtime results, and; freedom for continued upstream development. Sometimes, you’re the one; doing that development, and you need the CMake superbuild to pull source; from a local path rather than the approved codeset.; Find the CMakeLists.txt governing the target Add-On in; psi4/external and make changes analogous to the below:; #GIT_REPOSITORY https://github.com/jturney/ambit; #GIT_TAG 1.0; DOWNLOAD_COMMAND """"; SOURCE_DIR ""/path/to/ambit-directclone"". If you’re changing the PSI4 repo codebase between compiles, there’s; nothing more to do as CMake will handle the code rebuild deps for you.; If you’re changing the local Add-On repo codebase between compiles,; CMake does not know when libaddon.[a|so|dylib] needs rebuilding. It; is recommended that the PSI4 build be initially configured with; -DBUILD_SHARED_LIBS=ON (easier to notice changes). And to trigger; Add-On library rebuild, rm -rf {objdir}/external/upstream/addon/; and rm -rf {objdir}/stage/share/cmake/AddOn. This should; re-clone the Add-On, rebuild and install it, rebuild any parts of; PSI4 that interface to it, and relink the main core.so.; If you’re modifying the Add-On’s file or directory structure, be; smart and rm all traces of it within {objdir}/stage/,; especially any *.pyc files.; Alternatively and preferentially to the above, you can instead build and install the; Add-On library yourself, external to the PSI4 repository. This; is especially useful if you want to avoid full recompiles of the; Add-On at each change to the Add-On’s source. Build the Add-On; library dynamically (-DBUILD_SHARED_LIBS=ON) and mind any; “Psi4 wants” in the Add-On’s top-level CMakeLists.txt. Install the; Add-On and note the full path to AddOnConfig.cmake. Pass; the path containing that file to PSI4‘s CMake as; -DAddon_DI",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:60706,Modifiability,config,config,60706,"ed with; -DBUILD_SHARED_LIBS=ON (easier to notice changes). And to trigger; Add-On library rebuild, rm -rf {objdir}/external/upstream/addon/; and rm -rf {objdir}/stage/share/cmake/AddOn. This should; re-clone the Add-On, rebuild and install it, rebuild any parts of; PSI4 that interface to it, and relink the main core.so.; If you’re modifying the Add-On’s file or directory structure, be; smart and rm all traces of it within {objdir}/stage/,; especially any *.pyc files.; Alternatively and preferentially to the above, you can instead build and install the; Add-On library yourself, external to the PSI4 repository. This; is especially useful if you want to avoid full recompiles of the; Add-On at each change to the Add-On’s source. Build the Add-On; library dynamically (-DBUILD_SHARED_LIBS=ON) and mind any; “Psi4 wants” in the Add-On’s top-level CMakeLists.txt. Install the; Add-On and note the full path to AddOnConfig.cmake. Pass; the path containing that file to PSI4‘s CMake as; -DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON; and build PSI4. The main core.so should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete core.so and remake; as needed. How to use logging in Psi4¶; A log file is generated alongside the output file and has extension; .log. Selected key information is sent to it. The log file contents; are provisional and haphazard, so don’t start relying upon them. It is; tentatively envisioned that log files will have much of the same results as output; files but more as structured data than narrative, nicely formatted data.; In some cases where external calls are involved, the most detailed; information may only be collectable in the log file. It is; worthwhile to check the log file if expected results are missing from; the usual output file. If the log file is empty, the logging level may; be set too low.; To change the logging level to DEBUG from the ",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:62440,Modifiability,config,configure,62440,"ssors have been added; so that the executable can show where the module is, and the module; can show where the executable is. > /path/to/psi4/install/bin/psi4 --module; /path/to/psi4/install/lib//; > python -c ""import psi4;print(psi4.executable)""; /path/to/psi4/install/bin/psi4. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building ",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:62785,Modifiability,config,configure,62785,"ssors have been added; so that the executable can show where the module is, and the module; can show where the executable is. > /path/to/psi4/install/bin/psi4 --module; /path/to/psi4/install/lib//; > python -c ""import psi4;print(psi4.executable)""; /path/to/psi4/install/bin/psi4. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building ",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:62918,Modifiability,config,configuration,62918,"ssors have been added; so that the executable can show where the module is, and the module; can show where the executable is. > /path/to/psi4/install/bin/psi4 --module; /path/to/psi4/install/lib//; > python -c ""import psi4;print(psi4.executable)""; /path/to/psi4/install/bin/psi4. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building ",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:63095,Modifiability,config,configuration,63095,"ssors have been added; so that the executable can show where the module is, and the module; can show where the executable is. > /path/to/psi4/install/bin/psi4 --module; /path/to/psi4/install/lib//; > python -c ""import psi4;print(psi4.executable)""; /path/to/psi4/install/bin/psi4. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building ",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:63320,Modifiability,config,configure,63320,"ssors have been added; so that the executable can show where the module is, and the module; can show where the executable is. > /path/to/psi4/install/bin/psi4 --module; /path/to/psi4/install/lib//; > python -c ""import psi4;print(psi4.executable)""; /path/to/psi4/install/bin/psi4. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building ",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:63580,Modifiability,config,configure,63580,"ssors have been added; so that the executable can show where the module is, and the module; can show where the executable is. > /path/to/psi4/install/bin/psi4 --module; /path/to/psi4/install/lib//; > python -c ""import psi4;print(psi4.executable)""; /path/to/psi4/install/bin/psi4. table of contents. Compiling and Installing from Source; Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to get high angular momentum integrals from conda; How to see what build configuration options are available; How to install elsewhere than /usr/local/psi4; How to compile for debugging; How to choose the compilation directory, {objdir}; How to save configuration settings for a future compilation; What is the directory layout of the installed or staged Psi4; How to run Psi4 as executable after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building ",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:63843,Modifiability,config,configure,63843,"after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build; How to use logging in Psi4; How to find the Psi4 module from the executable and vice versa. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Installation and Runtime Configuration; Compiling and Installing from Source. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
https://psicode.org/psi4manual/master/build_planning.html:63882,Modifiability,config,configure,63882,"after compilation; How to solve ModuleNotFoundError: No module named 'psi4'; How to configure paths for PsiAPI; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; Why not to set PSIDATADIR; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to configure a Psi4 build on Cray; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; How to configure BLAS/LAPACK for building Psi4; How to configure Python for building Psi4; What Python is Psi4 running; How to fix “undefined symbol: _Py_FalseStruct”; How to use gdb and lldb with Psi4; How to see the actual compiling commands (or errors) with cmake; How to highlight git merge conflicts in vi; How to handle “runtime library may be hidden” when building with Anaconda Python; How to set up the scratch directory; How do I retain specific Psi4 scratch files; How to use Psi4 within a PBS queue; How to update and rebuild Psi4; How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation; How to refer to Psi4; How to get a Psi4 logo file; How to use a local Add-On repository in the Psi4 build; How to use logging in Psi4; How to find the Psi4 module from the executable and vice versa. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.10a1.dev61;  · . PSI4. Installation and Runtime Configuration; Compiling and Installing from Source. © Copyright 2007-2024, The Psi4 Project.; Last updated on Thursday, 07 November 2024 08:57AM.; Created using Sphinx 7.4.7.; . ",MatchSource.WIKI,psi4manual/master/build_planning.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/master/build_planning.html
