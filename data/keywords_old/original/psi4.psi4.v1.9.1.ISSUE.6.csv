id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/psi4/psi4/issues/2199:210,Energy Efficiency,energy,energy,210,"This calculation fails in Psi4 1.3.2; ```; molecule {; Ne; }. my_pbe = {; ""name"": ""my pbe"",; ""x_functionals"": {""GGA_X_PBE"": {}},; ""c_functionals"": {""GGA_C_PBE"": {}}; }. set basis pcseg-2; set basis_guess true; energy('scf', dft_functional=my_pbe); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2199
https://github.com/psi4/psi4/issues/2201:80,Integrability,depend,dependencies,80,"There have been reports of X2C not being well-behaved in the presence of linear dependencies. Calling on @fevangelista or @susilehtola to give details. Quoting Francesco from Slack:. > I think it is still unclear to me if the general solution is to a) implement an algorithms that eliminates lin. dependencies consistently in both the small and large components of the modified Dirac equation, or even simpler b) define auxiliary basis functions that are linearly independent. Right now X2C solves the Dirac equation in a decontracted computational basis, so when you go up to QZ or higher basis sets you can easily run into linear dependency issues and the code does not handle them correctly.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2201
https://github.com/psi4/psi4/issues/2201:297,Integrability,depend,dependencies,297,"There have been reports of X2C not being well-behaved in the presence of linear dependencies. Calling on @fevangelista or @susilehtola to give details. Quoting Francesco from Slack:. > I think it is still unclear to me if the general solution is to a) implement an algorithms that eliminates lin. dependencies consistently in both the small and large components of the modified Dirac equation, or even simpler b) define auxiliary basis functions that are linearly independent. Right now X2C solves the Dirac equation in a decontracted computational basis, so when you go up to QZ or higher basis sets you can easily run into linear dependency issues and the code does not handle them correctly.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2201
https://github.com/psi4/psi4/issues/2201:632,Integrability,depend,dependency,632,"There have been reports of X2C not being well-behaved in the presence of linear dependencies. Calling on @fevangelista or @susilehtola to give details. Quoting Francesco from Slack:. > I think it is still unclear to me if the general solution is to a) implement an algorithms that eliminates lin. dependencies consistently in both the small and large components of the modified Dirac equation, or even simpler b) define auxiliary basis functions that are linearly independent. Right now X2C solves the Dirac equation in a decontracted computational basis, so when you go up to QZ or higher basis sets you can easily run into linear dependency issues and the code does not handle them correctly.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2201
https://github.com/psi4/psi4/issues/2201:402,Usability,simpl,simpler,402,"There have been reports of X2C not being well-behaved in the presence of linear dependencies. Calling on @fevangelista or @susilehtola to give details. Quoting Francesco from Slack:. > I think it is still unclear to me if the general solution is to a) implement an algorithms that eliminates lin. dependencies consistently in both the small and large components of the modified Dirac equation, or even simpler b) define auxiliary basis functions that are linearly independent. Right now X2C solves the Dirac equation in a decontracted computational basis, so when you go up to QZ or higher basis sets you can easily run into linear dependency issues and the code does not handle them correctly.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2201
https://github.com/psi4/psi4/issues/2203:56,Availability,error,error-wavefunction-unable-to-obtain-mo-coefficients,56,"A recent [forum issue](http://forum.psicode.org/t/fatal-error-wavefunction-unable-to-obtain-mo-coefficients/2204/14) about obtaining dipoles has been complicated by the question of what the name of the variable to call them is. For example:. ```; wfn = psi4.properties(""scf"", properties=['dipole'], return_wfn=True)[1]; prop_dipole = wfn.variable(""SCF DIPOLE""). wfn = energy(""scf"", return_wfn=True)[1]; psi4.oeprop(wfn, ""DIPOLE""); oeprop_dipole = wfn.variable(""DIPOLE""); ```. These two methods of obtaining the dipole save it to the wavefunction under different names. Is there some way to make this more standardized?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2203
https://github.com/psi4/psi4/issues/2203:368,Energy Efficiency,energy,energy,368,"A recent [forum issue](http://forum.psicode.org/t/fatal-error-wavefunction-unable-to-obtain-mo-coefficients/2204/14) about obtaining dipoles has been complicated by the question of what the name of the variable to call them is. For example:. ```; wfn = psi4.properties(""scf"", properties=['dipole'], return_wfn=True)[1]; prop_dipole = wfn.variable(""SCF DIPOLE""). wfn = energy(""scf"", return_wfn=True)[1]; psi4.oeprop(wfn, ""DIPOLE""); oeprop_dipole = wfn.variable(""DIPOLE""); ```. These two methods of obtaining the dipole save it to the wavefunction under different names. Is there some way to make this more standardized?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2203
https://github.com/psi4/psi4/issues/2203:202,Modifiability,variab,variable,202,"A recent [forum issue](http://forum.psicode.org/t/fatal-error-wavefunction-unable-to-obtain-mo-coefficients/2204/14) about obtaining dipoles has been complicated by the question of what the name of the variable to call them is. For example:. ```; wfn = psi4.properties(""scf"", properties=['dipole'], return_wfn=True)[1]; prop_dipole = wfn.variable(""SCF DIPOLE""). wfn = energy(""scf"", return_wfn=True)[1]; psi4.oeprop(wfn, ""DIPOLE""); oeprop_dipole = wfn.variable(""DIPOLE""); ```. These two methods of obtaining the dipole save it to the wavefunction under different names. Is there some way to make this more standardized?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2203
https://github.com/psi4/psi4/issues/2203:338,Modifiability,variab,variable,338,"A recent [forum issue](http://forum.psicode.org/t/fatal-error-wavefunction-unable-to-obtain-mo-coefficients/2204/14) about obtaining dipoles has been complicated by the question of what the name of the variable to call them is. For example:. ```; wfn = psi4.properties(""scf"", properties=['dipole'], return_wfn=True)[1]; prop_dipole = wfn.variable(""SCF DIPOLE""). wfn = energy(""scf"", return_wfn=True)[1]; psi4.oeprop(wfn, ""DIPOLE""); oeprop_dipole = wfn.variable(""DIPOLE""); ```. These two methods of obtaining the dipole save it to the wavefunction under different names. Is there some way to make this more standardized?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2203
https://github.com/psi4/psi4/issues/2203:451,Modifiability,variab,variable,451,"A recent [forum issue](http://forum.psicode.org/t/fatal-error-wavefunction-unable-to-obtain-mo-coefficients/2204/14) about obtaining dipoles has been complicated by the question of what the name of the variable to call them is. For example:. ```; wfn = psi4.properties(""scf"", properties=['dipole'], return_wfn=True)[1]; prop_dipole = wfn.variable(""SCF DIPOLE""). wfn = energy(""scf"", return_wfn=True)[1]; psi4.oeprop(wfn, ""DIPOLE""); oeprop_dipole = wfn.variable(""DIPOLE""); ```. These two methods of obtaining the dipole save it to the wavefunction under different names. Is there some way to make this more standardized?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2203
https://github.com/psi4/psi4/issues/2204:62,Availability,error,error-wavefunction-unable-to-obtain-mo-coefficients,62,"Carried forward from [forum](http://forum.psicode.org/t/fatal-error-wavefunction-unable-to-obtain-mo-coefficients/2204/12). Even with SOSCF, I'm not able to converge MgF at 3 Angstroms. Several of the iterations display non-monotonic decrease of the residual, sometimes increasing after PCG iterations. This is surprising but I don't think mathematically inpossible, if the MO Hessian isn't positive semi-definite, in which case, CG methods fail. If that was all, we should look into alternate SOSCF methods. But even when convergence is monotonic, one sees an energy improvement on the order of 1e-4 hartrees, and negligible drop in the residual. What's going wrong here? I have a memory that the SOSCF step isn't being taken correctly (by exponentiation), so that's worth looking into. Probably a weekend project for me...",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2204
https://github.com/psi4/psi4/issues/2204:561,Energy Efficiency,energy,energy,561,"Carried forward from [forum](http://forum.psicode.org/t/fatal-error-wavefunction-unable-to-obtain-mo-coefficients/2204/12). Even with SOSCF, I'm not able to converge MgF at 3 Angstroms. Several of the iterations display non-monotonic decrease of the residual, sometimes increasing after PCG iterations. This is surprising but I don't think mathematically inpossible, if the MO Hessian isn't positive semi-definite, in which case, CG methods fail. If that was all, we should look into alternate SOSCF methods. But even when convergence is monotonic, one sees an energy improvement on the order of 1e-4 hartrees, and negligible drop in the residual. What's going wrong here? I have a memory that the SOSCF step isn't being taken correctly (by exponentiation), so that's worth looking into. Probably a weekend project for me...",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2204
https://github.com/psi4/psi4/pull/2205:16,Deployability,Update,Updates,16,"## Description; Updates the docs with any undocumented new features in 1.4. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] #1491 (ATM); - [x] #842 (UHF Hess); - [x] #1803 (E(30)ind bug fix); - [x] #2056 (MBIS volumes); - [x] #2081 (SAPT-D); - [x] #2127 (MBIS volume ratios). - [x] #1934 (cct3 plugin); - [x] #1661 (mp2-d gradients). I still have #1721 (Libint2 and shell screening), #1723 (QCSchema Interface), and #1728 (QCSchema Wavefunction Quantities) as being undocumented or incompletely documented. Let me know if I'm wrong here, and any suggestions (or volunteers) on how to complete them are welcome. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2205
https://github.com/psi4/psi4/pull/2205:459,Integrability,Interface,Interface,459,"## Description; Updates the docs with any undocumented new features in 1.4. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] #1491 (ATM); - [x] #842 (UHF Hess); - [x] #1803 (E(30)ind bug fix); - [x] #2056 (MBIS volumes); - [x] #2081 (SAPT-D); - [x] #2127 (MBIS volume ratios). - [x] #1934 (cct3 plugin); - [x] #1661 (mp2-d gradients). I still have #1721 (Libint2 and shell screening), #1723 (QCSchema Interface), and #1728 (QCSchema Wavefunction Quantities) as being undocumented or incompletely documented. Let me know if I'm wrong here, and any suggestions (or volunteers) on how to complete them are welcome. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2205
https://github.com/psi4/psi4/pull/2205:353,Modifiability,plugin,plugin,353,"## Description; Updates the docs with any undocumented new features in 1.4. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] #1491 (ATM); - [x] #842 (UHF Hess); - [x] #1803 (E(30)ind bug fix); - [x] #2056 (MBIS volumes); - [x] #2081 (SAPT-D); - [x] #2127 (MBIS volume ratios). - [x] #1934 (cct3 plugin); - [x] #1661 (mp2-d gradients). I still have #1721 (Libint2 and shell screening), #1723 (QCSchema Interface), and #1728 (QCSchema Wavefunction Quantities) as being undocumented or incompletely documented. Let me know if I'm wrong here, and any suggestions (or volunteers) on how to complete them are welcome. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2205
https://github.com/psi4/psi4/pull/2205:42,Usability,undo,undocumented,42,"## Description; Updates the docs with any undocumented new features in 1.4. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] #1491 (ATM); - [x] #842 (UHF Hess); - [x] #1803 (E(30)ind bug fix); - [x] #2056 (MBIS volumes); - [x] #2081 (SAPT-D); - [x] #2127 (MBIS volume ratios). - [x] #1934 (cct3 plugin); - [x] #1661 (mp2-d gradients). I still have #1721 (Libint2 and shell screening), #1723 (QCSchema Interface), and #1728 (QCSchema Wavefunction Quantities) as being undocumented or incompletely documented. Let me know if I'm wrong here, and any suggestions (or volunteers) on how to complete them are welcome. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2205
https://github.com/psi4/psi4/pull/2205:525,Usability,undo,undocumented,525,"## Description; Updates the docs with any undocumented new features in 1.4. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] #1491 (ATM); - [x] #842 (UHF Hess); - [x] #1803 (E(30)ind bug fix); - [x] #2056 (MBIS volumes); - [x] #2081 (SAPT-D); - [x] #2127 (MBIS volume ratios). - [x] #1934 (cct3 plugin); - [x] #1661 (mp2-d gradients). I still have #1721 (Libint2 and shell screening), #1723 (QCSchema Interface), and #1728 (QCSchema Wavefunction Quantities) as being undocumented or incompletely documented. Let me know if I'm wrong here, and any suggestions (or volunteers) on how to complete them are welcome. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2205
https://github.com/psi4/psi4/issues/2206:1541,Deployability,update,updated,1541,"Hello,. I'm a developer at Schrodinger working on our QM engine, Jaguar. Recently I implemented wB97X-D3 and was using PSI4 to check my results. Interestingly, I found discrepancies in our SCF energies (difference of 0.003 Ha on a methane molecule), but the dispersion corrections matched to 1e-6. . After some investigation, I believe PSI4's wB97X-D3 functional is using the wrong parameters for the functional (the dispersion correction seems fine). . If you look in the output file, you can see . > ==> DFT Potential <==; >; > => Composite Functional: WB97X-D3ZERO <= ; >; > wB97X-d3zero Hyb-GGA Exchange-Correlation Functional; >; > J.-D. Chai and M. Head-Gordon, J. Chem. Phys. 128, 084106 (2008); >; > ....; > => Exchange-Correlation Functionals <=; >; > 1.0000 wB97X range-separated functional; >; > => Exact (HF) Exchange <=; >; > 0.8423 HF,LR [omega = 0.3000]; > 0.1577 HF . The HF exchange and omega printouts indicate that you are using wB97X parameters in the functional. But note that wB97X and wB97X-D3 differ in their functional parameters (for instance in wB97X-D3, omega=0.25. Other parameters differ as well. See Chai et al, dx.doi.org/10.1021/ct300715s, Table 1 for the full list). I did some testing by substituting wB97X parameters into Jaguar's wB97X-D3 call. Indeed, Jaguar then returns matching SCF energies with PSI4's wB97X-D3. I was comparing to PSI4 version: Psi4 1.4a2.dev723, Git: Rev {master} fb499f4. If you guys have fixed this in a newer version of PSI4, then great! If not, perhaps the parameters could be updated to match the paper? Of course, if I'm mistaken please let me know as well. Cheers,; Alan Chien",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2206
https://github.com/psi4/psi4/issues/2206:1212,Testability,test,testing,1212,"Hello,. I'm a developer at Schrodinger working on our QM engine, Jaguar. Recently I implemented wB97X-D3 and was using PSI4 to check my results. Interestingly, I found discrepancies in our SCF energies (difference of 0.003 Ha on a methane molecule), but the dispersion corrections matched to 1e-6. . After some investigation, I believe PSI4's wB97X-D3 functional is using the wrong parameters for the functional (the dispersion correction seems fine). . If you look in the output file, you can see . > ==> DFT Potential <==; >; > => Composite Functional: WB97X-D3ZERO <= ; >; > wB97X-d3zero Hyb-GGA Exchange-Correlation Functional; >; > J.-D. Chai and M. Head-Gordon, J. Chem. Phys. 128, 084106 (2008); >; > ....; > => Exchange-Correlation Functionals <=; >; > 1.0000 wB97X range-separated functional; >; > => Exact (HF) Exchange <=; >; > 0.8423 HF,LR [omega = 0.3000]; > 0.1577 HF . The HF exchange and omega printouts indicate that you are using wB97X parameters in the functional. But note that wB97X and wB97X-D3 differ in their functional parameters (for instance in wB97X-D3, omega=0.25. Other parameters differ as well. See Chai et al, dx.doi.org/10.1021/ct300715s, Table 1 for the full list). I did some testing by substituting wB97X parameters into Jaguar's wB97X-D3 call. Indeed, Jaguar then returns matching SCF energies with PSI4's wB97X-D3. I was comparing to PSI4 version: Psi4 1.4a2.dev723, Git: Rev {master} fb499f4. If you guys have fixed this in a newer version of PSI4, then great! If not, perhaps the parameters could be updated to match the paper? Of course, if I'm mistaken please let me know as well. Cheers,; Alan Chien",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2206
https://github.com/psi4/psi4/pull/2207:100,Testability,test,tests,100,"## Description; Fixed wB97X-D3 to use the correct libxc functional, added KMLYP, and added/modified tests for both. Fixes #2206. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2207
https://github.com/psi4/psi4/pull/2207:149,Testability,Test,Tests,149,"## Description; Fixed wB97X-D3 to use the correct libxc functional, added KMLYP, and added/modified tests for both. Fixes #2206. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2207
https://github.com/psi4/psi4/pull/2207:223,Testability,test,tests,223,"## Description; Fixed wB97X-D3 to use the correct libxc functional, added KMLYP, and added/modified tests for both. Fixes #2206. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2207
https://github.com/psi4/psi4/pull/2207:314,Testability,test,tests,314,"## Description; Fixed wB97X-D3 to use the correct libxc functional, added KMLYP, and added/modified tests for both. Fixes #2206. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2207
https://github.com/psi4/psi4/issues/2208:139,Availability,error,error,139,This simple run fails to converge in Psi4 1.3.2; ```; molecule {; pubchem:methimazole; }. set basis pcseg-0; optimize('wb97x-d'); ```; The error is; ```. Back-transformation to cartesian coordinates...; The INTCO_EXCEPTion handler:; TORS::compute_val: unable to compute torsion value; Dynamic level is 0.; exc.g_really_quit() is 0. **** Optimization has failed! (in 1 steps) ****; --------------------------; OPTKING Finished Execution ; --------------------------; Removing binary optimization data file.; Cleaning optimization helper files. PsiException: Could not converge geometry optimization in 0 iterations.; ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2208
https://github.com/psi4/psi4/issues/2208:109,Performance,optimiz,optimize,109,This simple run fails to converge in Psi4 1.3.2; ```; molecule {; pubchem:methimazole; }. set basis pcseg-0; optimize('wb97x-d'); ```; The error is; ```. Back-transformation to cartesian coordinates...; The INTCO_EXCEPTion handler:; TORS::compute_val: unable to compute torsion value; Dynamic level is 0.; exc.g_really_quit() is 0. **** Optimization has failed! (in 1 steps) ****; --------------------------; OPTKING Finished Execution ; --------------------------; Removing binary optimization data file.; Cleaning optimization helper files. PsiException: Could not converge geometry optimization in 0 iterations.; ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2208
https://github.com/psi4/psi4/issues/2208:337,Performance,Optimiz,Optimization,337,This simple run fails to converge in Psi4 1.3.2; ```; molecule {; pubchem:methimazole; }. set basis pcseg-0; optimize('wb97x-d'); ```; The error is; ```. Back-transformation to cartesian coordinates...; The INTCO_EXCEPTion handler:; TORS::compute_val: unable to compute torsion value; Dynamic level is 0.; exc.g_really_quit() is 0. **** Optimization has failed! (in 1 steps) ****; --------------------------; OPTKING Finished Execution ; --------------------------; Removing binary optimization data file.; Cleaning optimization helper files. PsiException: Could not converge geometry optimization in 0 iterations.; ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2208
https://github.com/psi4/psi4/issues/2208:482,Performance,optimiz,optimization,482,This simple run fails to converge in Psi4 1.3.2; ```; molecule {; pubchem:methimazole; }. set basis pcseg-0; optimize('wb97x-d'); ```; The error is; ```. Back-transformation to cartesian coordinates...; The INTCO_EXCEPTion handler:; TORS::compute_val: unable to compute torsion value; Dynamic level is 0.; exc.g_really_quit() is 0. **** Optimization has failed! (in 1 steps) ****; --------------------------; OPTKING Finished Execution ; --------------------------; Removing binary optimization data file.; Cleaning optimization helper files. PsiException: Could not converge geometry optimization in 0 iterations.; ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2208
https://github.com/psi4/psi4/issues/2208:516,Performance,optimiz,optimization,516,This simple run fails to converge in Psi4 1.3.2; ```; molecule {; pubchem:methimazole; }. set basis pcseg-0; optimize('wb97x-d'); ```; The error is; ```. Back-transformation to cartesian coordinates...; The INTCO_EXCEPTion handler:; TORS::compute_val: unable to compute torsion value; Dynamic level is 0.; exc.g_really_quit() is 0. **** Optimization has failed! (in 1 steps) ****; --------------------------; OPTKING Finished Execution ; --------------------------; Removing binary optimization data file.; Cleaning optimization helper files. PsiException: Could not converge geometry optimization in 0 iterations.; ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2208
https://github.com/psi4/psi4/issues/2208:585,Performance,optimiz,optimization,585,This simple run fails to converge in Psi4 1.3.2; ```; molecule {; pubchem:methimazole; }. set basis pcseg-0; optimize('wb97x-d'); ```; The error is; ```. Back-transformation to cartesian coordinates...; The INTCO_EXCEPTion handler:; TORS::compute_val: unable to compute torsion value; Dynamic level is 0.; exc.g_really_quit() is 0. **** Optimization has failed! (in 1 steps) ****; --------------------------; OPTKING Finished Execution ; --------------------------; Removing binary optimization data file.; Cleaning optimization helper files. PsiException: Could not converge geometry optimization in 0 iterations.; ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2208
https://github.com/psi4/psi4/issues/2208:5,Usability,simpl,simple,5,This simple run fails to converge in Psi4 1.3.2; ```; molecule {; pubchem:methimazole; }. set basis pcseg-0; optimize('wb97x-d'); ```; The error is; ```. Back-transformation to cartesian coordinates...; The INTCO_EXCEPTion handler:; TORS::compute_val: unable to compute torsion value; Dynamic level is 0.; exc.g_really_quit() is 0. **** Optimization has failed! (in 1 steps) ****; --------------------------; OPTKING Finished Execution ; --------------------------; Removing binary optimization data file.; Cleaning optimization helper files. PsiException: Could not converge geometry optimization in 0 iterations.; ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2208
https://github.com/psi4/psi4/issues/2209:409,Deployability,configurat,configurations,409,"The PBE/STO-3G calculation on Ni(CO)3 does not converge.; ```; memory 8 gb. molecule {; Ni -0.593245 2.410696 -0.537392; C 0.947231 2.245835 0.358715; C -0.875896 1.446101 -2.018123; C -1.856239 3.533688 0.051349; O -1.061878 0.818754 -2.971879; O 1.943046 2.139891 0.937442; O -2.673940 4.257626 0.432247; }. set basis STO-3G; energy('pbe'); ```; DIIS apparently gets stuck alternating between two different configurations, which is shown in the oscillating energy. I think this should be a relatively simple system for DFT; still, the default accelerator is unable to handle it.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2209
https://github.com/psi4/psi4/issues/2209:328,Energy Efficiency,energy,energy,328,"The PBE/STO-3G calculation on Ni(CO)3 does not converge.; ```; memory 8 gb. molecule {; Ni -0.593245 2.410696 -0.537392; C 0.947231 2.245835 0.358715; C -0.875896 1.446101 -2.018123; C -1.856239 3.533688 0.051349; O -1.061878 0.818754 -2.971879; O 1.943046 2.139891 0.937442; O -2.673940 4.257626 0.432247; }. set basis STO-3G; energy('pbe'); ```; DIIS apparently gets stuck alternating between two different configurations, which is shown in the oscillating energy. I think this should be a relatively simple system for DFT; still, the default accelerator is unable to handle it.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2209
https://github.com/psi4/psi4/issues/2209:459,Energy Efficiency,energy,energy,459,"The PBE/STO-3G calculation on Ni(CO)3 does not converge.; ```; memory 8 gb. molecule {; Ni -0.593245 2.410696 -0.537392; C 0.947231 2.245835 0.358715; C -0.875896 1.446101 -2.018123; C -1.856239 3.533688 0.051349; O -1.061878 0.818754 -2.971879; O 1.943046 2.139891 0.937442; O -2.673940 4.257626 0.432247; }. set basis STO-3G; energy('pbe'); ```; DIIS apparently gets stuck alternating between two different configurations, which is shown in the oscillating energy. I think this should be a relatively simple system for DFT; still, the default accelerator is unable to handle it.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2209
https://github.com/psi4/psi4/issues/2209:409,Modifiability,config,configurations,409,"The PBE/STO-3G calculation on Ni(CO)3 does not converge.; ```; memory 8 gb. molecule {; Ni -0.593245 2.410696 -0.537392; C 0.947231 2.245835 0.358715; C -0.875896 1.446101 -2.018123; C -1.856239 3.533688 0.051349; O -1.061878 0.818754 -2.971879; O 1.943046 2.139891 0.937442; O -2.673940 4.257626 0.432247; }. set basis STO-3G; energy('pbe'); ```; DIIS apparently gets stuck alternating between two different configurations, which is shown in the oscillating energy. I think this should be a relatively simple system for DFT; still, the default accelerator is unable to handle it.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2209
https://github.com/psi4/psi4/issues/2209:503,Usability,simpl,simple,503,"The PBE/STO-3G calculation on Ni(CO)3 does not converge.; ```; memory 8 gb. molecule {; Ni -0.593245 2.410696 -0.537392; C 0.947231 2.245835 0.358715; C -0.875896 1.446101 -2.018123; C -1.856239 3.533688 0.051349; O -1.061878 0.818754 -2.971879; O 1.943046 2.139891 0.937442; O -2.673940 4.257626 0.432247; }. set basis STO-3G; energy('pbe'); ```; DIIS apparently gets stuck alternating between two different configurations, which is shown in the oscillating energy. I think this should be a relatively simple system for DFT; still, the default accelerator is unable to handle it.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2209
https://github.com/psi4/psi4/pull/2210:171,Deployability,update,updated,171,"## Description; Currently, the phi_ao function returns the value of the basis functions at a point. However, this ONLY works for cartesian and not spherical basis sets. I updated the code to make this change. This is important to the development of seminumerical methods, like chain-of-spheres exchange. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Code is tested in my developmental chain-of-spheres exchange branch; - [x] Made an explicit test testing the validity of my bug fix. ## Questions; - [x] Will this impact existing functions that use the phi_ao call?. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2210
https://github.com/psi4/psi4/pull/2210:419,Testability,test,tested,419,"## Description; Currently, the phi_ao function returns the value of the basis functions at a point. However, this ONLY works for cartesian and not spherical basis sets. I updated the code to make this change. This is important to the development of seminumerical methods, like chain-of-spheres exchange. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Code is tested in my developmental chain-of-spheres exchange branch; - [x] Made an explicit test testing the validity of my bug fix. ## Questions; - [x] Will this impact existing functions that use the phi_ao call?. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2210
https://github.com/psi4/psi4/pull/2210:503,Testability,test,test,503,"## Description; Currently, the phi_ao function returns the value of the basis functions at a point. However, this ONLY works for cartesian and not spherical basis sets. I updated the code to make this change. This is important to the development of seminumerical methods, like chain-of-spheres exchange. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Code is tested in my developmental chain-of-spheres exchange branch; - [x] Made an explicit test testing the validity of my bug fix. ## Questions; - [x] Will this impact existing functions that use the phi_ao call?. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2210
https://github.com/psi4/psi4/pull/2210:508,Testability,test,testing,508,"## Description; Currently, the phi_ao function returns the value of the basis functions at a point. However, this ONLY works for cartesian and not spherical basis sets. I updated the code to make this change. This is important to the development of seminumerical methods, like chain-of-spheres exchange. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Code is tested in my developmental chain-of-spheres exchange branch; - [x] Made an explicit test testing the validity of my bug fix. ## Questions; - [x] Will this impact existing functions that use the phi_ao call?. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2210
https://github.com/psi4/psi4/issues/2211:703,Availability,error,error,703,"Setup: Install Psi4 rc1 for Linux with python 3.9 via the installer from https://psicode.org/installs/v14rc1/. Result: This installation appears to work fine for most molecules, but then has an issue with systems with linear dependencies, specifically when running the in-core DF algorithm. The provided file, `psi4_issue.py`, when run with sufficient memory to run in-core (~40 GB), gives an energy that is low by more than 2 Hartree (should be -1145.943, but gives -1148.711). With scf_type DF and less RAM (thus causing the disk algorithm to run), the energy is correct. Setting s_tolerance to 1e-4 also fixes the problem, at the cost of a little accuracy loss (5e-4 Hartree). I have reproduced this error on several computers, both CentOS and Ubuntu. The next version, psi4 rc2, does not show this problem. It would be nice to know whether this was deliberately fixed, or might still be around. `psi4_issue.py`: https://drive.google.com/file/d/1RTSVVfmXwJNpS4CHtvMYOTBU63J8Z85j/view?usp=sharing",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2211
https://github.com/psi4/psi4/issues/2211:7,Deployability,Install,Install,7,"Setup: Install Psi4 rc1 for Linux with python 3.9 via the installer from https://psicode.org/installs/v14rc1/. Result: This installation appears to work fine for most molecules, but then has an issue with systems with linear dependencies, specifically when running the in-core DF algorithm. The provided file, `psi4_issue.py`, when run with sufficient memory to run in-core (~40 GB), gives an energy that is low by more than 2 Hartree (should be -1145.943, but gives -1148.711). With scf_type DF and less RAM (thus causing the disk algorithm to run), the energy is correct. Setting s_tolerance to 1e-4 also fixes the problem, at the cost of a little accuracy loss (5e-4 Hartree). I have reproduced this error on several computers, both CentOS and Ubuntu. The next version, psi4 rc2, does not show this problem. It would be nice to know whether this was deliberately fixed, or might still be around. `psi4_issue.py`: https://drive.google.com/file/d/1RTSVVfmXwJNpS4CHtvMYOTBU63J8Z85j/view?usp=sharing",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2211
https://github.com/psi4/psi4/issues/2211:58,Deployability,install,installer,58,"Setup: Install Psi4 rc1 for Linux with python 3.9 via the installer from https://psicode.org/installs/v14rc1/. Result: This installation appears to work fine for most molecules, but then has an issue with systems with linear dependencies, specifically when running the in-core DF algorithm. The provided file, `psi4_issue.py`, when run with sufficient memory to run in-core (~40 GB), gives an energy that is low by more than 2 Hartree (should be -1145.943, but gives -1148.711). With scf_type DF and less RAM (thus causing the disk algorithm to run), the energy is correct. Setting s_tolerance to 1e-4 also fixes the problem, at the cost of a little accuracy loss (5e-4 Hartree). I have reproduced this error on several computers, both CentOS and Ubuntu. The next version, psi4 rc2, does not show this problem. It would be nice to know whether this was deliberately fixed, or might still be around. `psi4_issue.py`: https://drive.google.com/file/d/1RTSVVfmXwJNpS4CHtvMYOTBU63J8Z85j/view?usp=sharing",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2211
https://github.com/psi4/psi4/issues/2211:93,Deployability,install,installs,93,"Setup: Install Psi4 rc1 for Linux with python 3.9 via the installer from https://psicode.org/installs/v14rc1/. Result: This installation appears to work fine for most molecules, but then has an issue with systems with linear dependencies, specifically when running the in-core DF algorithm. The provided file, `psi4_issue.py`, when run with sufficient memory to run in-core (~40 GB), gives an energy that is low by more than 2 Hartree (should be -1145.943, but gives -1148.711). With scf_type DF and less RAM (thus causing the disk algorithm to run), the energy is correct. Setting s_tolerance to 1e-4 also fixes the problem, at the cost of a little accuracy loss (5e-4 Hartree). I have reproduced this error on several computers, both CentOS and Ubuntu. The next version, psi4 rc2, does not show this problem. It would be nice to know whether this was deliberately fixed, or might still be around. `psi4_issue.py`: https://drive.google.com/file/d/1RTSVVfmXwJNpS4CHtvMYOTBU63J8Z85j/view?usp=sharing",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2211
https://github.com/psi4/psi4/issues/2211:124,Deployability,install,installation,124,"Setup: Install Psi4 rc1 for Linux with python 3.9 via the installer from https://psicode.org/installs/v14rc1/. Result: This installation appears to work fine for most molecules, but then has an issue with systems with linear dependencies, specifically when running the in-core DF algorithm. The provided file, `psi4_issue.py`, when run with sufficient memory to run in-core (~40 GB), gives an energy that is low by more than 2 Hartree (should be -1145.943, but gives -1148.711). With scf_type DF and less RAM (thus causing the disk algorithm to run), the energy is correct. Setting s_tolerance to 1e-4 also fixes the problem, at the cost of a little accuracy loss (5e-4 Hartree). I have reproduced this error on several computers, both CentOS and Ubuntu. The next version, psi4 rc2, does not show this problem. It would be nice to know whether this was deliberately fixed, or might still be around. `psi4_issue.py`: https://drive.google.com/file/d/1RTSVVfmXwJNpS4CHtvMYOTBU63J8Z85j/view?usp=sharing",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2211
https://github.com/psi4/psi4/issues/2211:393,Energy Efficiency,energy,energy,393,"Setup: Install Psi4 rc1 for Linux with python 3.9 via the installer from https://psicode.org/installs/v14rc1/. Result: This installation appears to work fine for most molecules, but then has an issue with systems with linear dependencies, specifically when running the in-core DF algorithm. The provided file, `psi4_issue.py`, when run with sufficient memory to run in-core (~40 GB), gives an energy that is low by more than 2 Hartree (should be -1145.943, but gives -1148.711). With scf_type DF and less RAM (thus causing the disk algorithm to run), the energy is correct. Setting s_tolerance to 1e-4 also fixes the problem, at the cost of a little accuracy loss (5e-4 Hartree). I have reproduced this error on several computers, both CentOS and Ubuntu. The next version, psi4 rc2, does not show this problem. It would be nice to know whether this was deliberately fixed, or might still be around. `psi4_issue.py`: https://drive.google.com/file/d/1RTSVVfmXwJNpS4CHtvMYOTBU63J8Z85j/view?usp=sharing",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2211
https://github.com/psi4/psi4/issues/2211:555,Energy Efficiency,energy,energy,555,"Setup: Install Psi4 rc1 for Linux with python 3.9 via the installer from https://psicode.org/installs/v14rc1/. Result: This installation appears to work fine for most molecules, but then has an issue with systems with linear dependencies, specifically when running the in-core DF algorithm. The provided file, `psi4_issue.py`, when run with sufficient memory to run in-core (~40 GB), gives an energy that is low by more than 2 Hartree (should be -1145.943, but gives -1148.711). With scf_type DF and less RAM (thus causing the disk algorithm to run), the energy is correct. Setting s_tolerance to 1e-4 also fixes the problem, at the cost of a little accuracy loss (5e-4 Hartree). I have reproduced this error on several computers, both CentOS and Ubuntu. The next version, psi4 rc2, does not show this problem. It would be nice to know whether this was deliberately fixed, or might still be around. `psi4_issue.py`: https://drive.google.com/file/d/1RTSVVfmXwJNpS4CHtvMYOTBU63J8Z85j/view?usp=sharing",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2211
https://github.com/psi4/psi4/issues/2211:225,Integrability,depend,dependencies,225,"Setup: Install Psi4 rc1 for Linux with python 3.9 via the installer from https://psicode.org/installs/v14rc1/. Result: This installation appears to work fine for most molecules, but then has an issue with systems with linear dependencies, specifically when running the in-core DF algorithm. The provided file, `psi4_issue.py`, when run with sufficient memory to run in-core (~40 GB), gives an energy that is low by more than 2 Hartree (should be -1145.943, but gives -1148.711). With scf_type DF and less RAM (thus causing the disk algorithm to run), the energy is correct. Setting s_tolerance to 1e-4 also fixes the problem, at the cost of a little accuracy loss (5e-4 Hartree). I have reproduced this error on several computers, both CentOS and Ubuntu. The next version, psi4 rc2, does not show this problem. It would be nice to know whether this was deliberately fixed, or might still be around. `psi4_issue.py`: https://drive.google.com/file/d/1RTSVVfmXwJNpS4CHtvMYOTBU63J8Z85j/view?usp=sharing",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2211
https://github.com/psi4/psi4/issues/2212:369,Availability,failure,failure,369,"As discussed in #2204, Psi's current second-order SCF technology is the straightforward Newton-Raphson approach. This is prone to fail in cases where the MO hessian has a small, negative eigenvalue near the minimum, and it would be good if we had a modified second-order method that could handle this. As a test case, this eigenstructure problem causes the convergence failure of. ```; molecule {; 0 2; Mg; F 1 3.0; }. set reference uhf ; set soscf true ; set soscf_print true ; set soscf_max_iter 10; set stability_analysis follow. energy('hf/cc-pvdz'); ```. as confirmed by running the system with the Psi4Numpy SOSCF code. @susilehtola suggested a level shift as a possible fix, but I'm open to alternatives.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2212
https://github.com/psi4/psi4/issues/2212:533,Energy Efficiency,energy,energy,533,"As discussed in #2204, Psi's current second-order SCF technology is the straightforward Newton-Raphson approach. This is prone to fail in cases where the MO hessian has a small, negative eigenvalue near the minimum, and it would be good if we had a modified second-order method that could handle this. As a test case, this eigenstructure problem causes the convergence failure of. ```; molecule {; 0 2; Mg; F 1 3.0; }. set reference uhf ; set soscf true ; set soscf_print true ; set soscf_max_iter 10; set stability_analysis follow. energy('hf/cc-pvdz'); ```. as confirmed by running the system with the Psi4Numpy SOSCF code. @susilehtola suggested a level shift as a possible fix, but I'm open to alternatives.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2212
https://github.com/psi4/psi4/issues/2212:307,Testability,test,test,307,"As discussed in #2204, Psi's current second-order SCF technology is the straightforward Newton-Raphson approach. This is prone to fail in cases where the MO hessian has a small, negative eigenvalue near the minimum, and it would be good if we had a modified second-order method that could handle this. As a test case, this eigenstructure problem causes the convergence failure of. ```; molecule {; 0 2; Mg; F 1 3.0; }. set reference uhf ; set soscf true ; set soscf_print true ; set soscf_max_iter 10; set stability_analysis follow. energy('hf/cc-pvdz'); ```. as confirmed by running the system with the Psi4Numpy SOSCF code. @susilehtola suggested a level shift as a possible fix, but I'm open to alternatives.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2212
https://github.com/psi4/psi4/issues/2213:1065,Energy Efficiency,energy,energy,1065,"Here's another example of a hard geometry optimization problem. Psi4 1.3.2 crashes/segfaults; @psi-rking's pyoptking also gives up.; ```; import optking; memory 8 gb. molecule {; Mn -1.19858918223104 -0.08207133498850 -0.13371354096607; N -0.41561138019044 1.27599387849124 0.21223826269367; O 0.14600552164730 2.25554129585451 0.46379448621401; C -2.77325495017405 0.77903635981534 -0.46993705135304; C -0.09036086226268 -0.50949483218465 -1.52013938052672; O 0.61690491558852 -0.75191770614607 -2.38035917189752; O -3.74228303591446 1.34350620162321 -0.67446015379883; C -2.08944770913093 -1.62303880517967 -0.52670173551821; C -0.89694974294004 -0.80918135325017 1.51325120318508; O -2.64631747328247 -2.58917480422090 -0.77666675977250; O -0.69173610111097 -1.23796889981931 2.54918384173987; }. set basis STO-3G; set geom_maxiter 250. # Use a (75,302) quadrature grid; set dft_radial_points 75; set dft_spherical_points 302. # Psi4 has problems converging the first SCF with PBE so we initialize; # with Hartree-Fock orbitals; set df_basis_scf def2-svp-jkfit; energy('scf'); set df_basis_scf def2-svp-jfit; set guess read. optimize('pbe') # Crashes in psi4 1.3.2; #optking.optimize_psi4('pbe') # Also crashes; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2213
https://github.com/psi4/psi4/issues/2213:42,Performance,optimiz,optimization,42,"Here's another example of a hard geometry optimization problem. Psi4 1.3.2 crashes/segfaults; @psi-rking's pyoptking also gives up.; ```; import optking; memory 8 gb. molecule {; Mn -1.19858918223104 -0.08207133498850 -0.13371354096607; N -0.41561138019044 1.27599387849124 0.21223826269367; O 0.14600552164730 2.25554129585451 0.46379448621401; C -2.77325495017405 0.77903635981534 -0.46993705135304; C -0.09036086226268 -0.50949483218465 -1.52013938052672; O 0.61690491558852 -0.75191770614607 -2.38035917189752; O -3.74228303591446 1.34350620162321 -0.67446015379883; C -2.08944770913093 -1.62303880517967 -0.52670173551821; C -0.89694974294004 -0.80918135325017 1.51325120318508; O -2.64631747328247 -2.58917480422090 -0.77666675977250; O -0.69173610111097 -1.23796889981931 2.54918384173987; }. set basis STO-3G; set geom_maxiter 250. # Use a (75,302) quadrature grid; set dft_radial_points 75; set dft_spherical_points 302. # Psi4 has problems converging the first SCF with PBE so we initialize; # with Hartree-Fock orbitals; set df_basis_scf def2-svp-jkfit; energy('scf'); set df_basis_scf def2-svp-jfit; set guess read. optimize('pbe') # Crashes in psi4 1.3.2; #optking.optimize_psi4('pbe') # Also crashes; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2213
https://github.com/psi4/psi4/issues/2213:1128,Performance,optimiz,optimize,1128,"Here's another example of a hard geometry optimization problem. Psi4 1.3.2 crashes/segfaults; @psi-rking's pyoptking also gives up.; ```; import optking; memory 8 gb. molecule {; Mn -1.19858918223104 -0.08207133498850 -0.13371354096607; N -0.41561138019044 1.27599387849124 0.21223826269367; O 0.14600552164730 2.25554129585451 0.46379448621401; C -2.77325495017405 0.77903635981534 -0.46993705135304; C -0.09036086226268 -0.50949483218465 -1.52013938052672; O 0.61690491558852 -0.75191770614607 -2.38035917189752; O -3.74228303591446 1.34350620162321 -0.67446015379883; C -2.08944770913093 -1.62303880517967 -0.52670173551821; C -0.89694974294004 -0.80918135325017 1.51325120318508; O -2.64631747328247 -2.58917480422090 -0.77666675977250; O -0.69173610111097 -1.23796889981931 2.54918384173987; }. set basis STO-3G; set geom_maxiter 250. # Use a (75,302) quadrature grid; set dft_radial_points 75; set dft_spherical_points 302. # Psi4 has problems converging the first SCF with PBE so we initialize; # with Hartree-Fock orbitals; set df_basis_scf def2-svp-jkfit; energy('scf'); set df_basis_scf def2-svp-jfit; set guess read. optimize('pbe') # Crashes in psi4 1.3.2; #optking.optimize_psi4('pbe') # Also crashes; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2213
https://github.com/psi4/psi4/issues/2214:293,Energy Efficiency,energy,energy,293,"Geometric direct minimization (GDM) has been described in [Mol. Phys. 100, 1713 (2002)](https://doi.org/10.1080/00268970110103642) for RHF and UHF, as well as [J. Theor. Comput. Chem. 1, 255 (2002)](https://doi.org/10.1142/S0219633602000233) for ROHF. The idea is to simply minimize the total energy with respect to orbital rotations, employing an approximate preconditioner obtained by block-diagonalization of the molecular orbital Fock matrix. The approach is pretty straightforward, and implementing it would go a long way to solving #888. Its implementation would also be feasible for a new Psi4 developer.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2214
https://github.com/psi4/psi4/issues/2214:267,Usability,simpl,simply,267,"Geometric direct minimization (GDM) has been described in [Mol. Phys. 100, 1713 (2002)](https://doi.org/10.1080/00268970110103642) for RHF and UHF, as well as [J. Theor. Comput. Chem. 1, 255 (2002)](https://doi.org/10.1142/S0219633602000233) for ROHF. The idea is to simply minimize the total energy with respect to orbital rotations, employing an approximate preconditioner obtained by block-diagonalization of the molecular orbital Fock matrix. The approach is pretty straightforward, and implementing it would go a long way to solving #888. Its implementation would also be feasible for a new Psi4 developer.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2214
https://github.com/psi4/psi4/issues/2215:673,Energy Efficiency,energy,energy,673,"The `dfocc` module has had problems converging MOs tightly. My experience with orbital optimization tells me the problem can be cured by coupling the DIIS iterations for orbital steps and amplitude steps, as is done in the `dct` module and in the `occ` module. There should be an option (I'd suggest making this the default option) to couple the DIIS steps, so examples like the following converge:. ```; molecule {; 1 2; units bohr; O 0.000000000000 0.000000000000 -0.143225816552; H 0.000000000000 1.638036840407 1.136548822547; H 0.000000000000 -1.638036840407 1.136548822547; }. set reference uhf ; set basis sto-3g; set MAX_MOGRAD_CONVERGENCE 8; set e_convergence 10. energy('omp2'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2215
https://github.com/psi4/psi4/issues/2215:137,Modifiability,coupling,coupling,137,"The `dfocc` module has had problems converging MOs tightly. My experience with orbital optimization tells me the problem can be cured by coupling the DIIS iterations for orbital steps and amplitude steps, as is done in the `dct` module and in the `occ` module. There should be an option (I'd suggest making this the default option) to couple the DIIS steps, so examples like the following converge:. ```; molecule {; 1 2; units bohr; O 0.000000000000 0.000000000000 -0.143225816552; H 0.000000000000 1.638036840407 1.136548822547; H 0.000000000000 -1.638036840407 1.136548822547; }. set reference uhf ; set basis sto-3g; set MAX_MOGRAD_CONVERGENCE 8; set e_convergence 10. energy('omp2'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2215
https://github.com/psi4/psi4/issues/2215:87,Performance,optimiz,optimization,87,"The `dfocc` module has had problems converging MOs tightly. My experience with orbital optimization tells me the problem can be cured by coupling the DIIS iterations for orbital steps and amplitude steps, as is done in the `dct` module and in the `occ` module. There should be an option (I'd suggest making this the default option) to couple the DIIS steps, so examples like the following converge:. ```; molecule {; 1 2; units bohr; O 0.000000000000 0.000000000000 -0.143225816552; H 0.000000000000 1.638036840407 1.136548822547; H 0.000000000000 -1.638036840407 1.136548822547; }. set reference uhf ; set basis sto-3g; set MAX_MOGRAD_CONVERGENCE 8; set e_convergence 10. energy('omp2'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2215
https://github.com/psi4/psi4/issues/2216:467,Availability,error,error,467,"A [long-requested feature](http://forum.psicode.org/t/scf-level-shift/938): implement level shifts in Psi4. This is an even simpler to implement than [GDM](#2214). What is needed is to edit the `form_C()` functions in RHF, UHF, and ROHF by replacing e.g.; ```; diagonalize_F(F_, C_, epsilon_);; ```; with the diagonalization of an effective Fock matrix `Feff = F + shift S*Cvirt*Cvirt.T*S` where `shift` is the level shift (should be `0.5` by default), when the DIIS error is larger than the set threshold. This would also make the SCF solver smarter, see #888.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2216
https://github.com/psi4/psi4/issues/2216:124,Usability,simpl,simpler,124,"A [long-requested feature](http://forum.psicode.org/t/scf-level-shift/938): implement level shifts in Psi4. This is an even simpler to implement than [GDM](#2214). What is needed is to edit the `form_C()` functions in RHF, UHF, and ROHF by replacing e.g.; ```; diagonalize_F(F_, C_, epsilon_);; ```; with the diagonalization of an effective Fock matrix `Feff = F + shift S*Cvirt*Cvirt.T*S` where `shift` is the level shift (should be `0.5` by default), when the DIIS error is larger than the set threshold. This would also make the SCF solver smarter, see #888.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2216
https://github.com/psi4/psi4/issues/2217:1009,Availability,error,error,1009,"I was looking at the DIIS code to determine whether it properly handles the case of linear dependencies. For instance, the UHF code is; ```; if (initialized_diis_manager_ == false) {; diis_manager_ = std::make_shared<DIISManager>(max_diis_vectors, ""HF DIIS vector"", DIISManager::LargestError,; DIISManager::OnDisk);; diis_manager_->set_error_vector_size(2, DIISEntry::Matrix, gradient_a.get(), DIISEntry::Matrix,; gradient_b.get());; diis_manager_->set_vector_size(2, DIISEntry::Matrix, Fa_.get(), DIISEntry::Matrix, Fb_.get());; initialized_diis_manager_ = true;; }. diis_manager_->add_entry(4, gradient_a.get(), gradient_b.get(), Fa_.get(), Fb_.get());; ```; whereas extrapolation is handled by; ```; bool UHF::diis() { return diis_manager_->extrapolate(2, Fa_.get(), Fb_.get()); }; ```; To me, this looks like the code does **not** project linearly dependent eigenvectors out. This might certainly explain many SCF convergence problems seen with Psi4, in which the energy apparently converges but the DIIS error stagnates to a large value. Note that the fix was already in Pulay's original paper. In [Chem. Phys. Lett. 73, 393 (1980)](https://doi.org/10.1016/0009-2614(80)80396-4) he writes; > An even better choice is the use of Fock matrix elements transformed to an orthonormal basis, such as `S^-1/2 F S^-1/2` where `S` is the overlap matrix. This takes into account that a charge shift from a basis function to another is less important physically if the two functions overlap strongly. Obviously, `S^-1/2` is the orthogonalizing matrix `X`; alternatively, the molecular orbital coefficients `C` can also be used.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2217
https://github.com/psi4/psi4/issues/2217:968,Energy Efficiency,energy,energy,968,"I was looking at the DIIS code to determine whether it properly handles the case of linear dependencies. For instance, the UHF code is; ```; if (initialized_diis_manager_ == false) {; diis_manager_ = std::make_shared<DIISManager>(max_diis_vectors, ""HF DIIS vector"", DIISManager::LargestError,; DIISManager::OnDisk);; diis_manager_->set_error_vector_size(2, DIISEntry::Matrix, gradient_a.get(), DIISEntry::Matrix,; gradient_b.get());; diis_manager_->set_vector_size(2, DIISEntry::Matrix, Fa_.get(), DIISEntry::Matrix, Fb_.get());; initialized_diis_manager_ = true;; }. diis_manager_->add_entry(4, gradient_a.get(), gradient_b.get(), Fa_.get(), Fb_.get());; ```; whereas extrapolation is handled by; ```; bool UHF::diis() { return diis_manager_->extrapolate(2, Fa_.get(), Fb_.get()); }; ```; To me, this looks like the code does **not** project linearly dependent eigenvectors out. This might certainly explain many SCF convergence problems seen with Psi4, in which the energy apparently converges but the DIIS error stagnates to a large value. Note that the fix was already in Pulay's original paper. In [Chem. Phys. Lett. 73, 393 (1980)](https://doi.org/10.1016/0009-2614(80)80396-4) he writes; > An even better choice is the use of Fock matrix elements transformed to an orthonormal basis, such as `S^-1/2 F S^-1/2` where `S` is the overlap matrix. This takes into account that a charge shift from a basis function to another is less important physically if the two functions overlap strongly. Obviously, `S^-1/2` is the orthogonalizing matrix `X`; alternatively, the molecular orbital coefficients `C` can also be used.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2217
https://github.com/psi4/psi4/issues/2217:1381,Energy Efficiency,charge,charge,1381,"I was looking at the DIIS code to determine whether it properly handles the case of linear dependencies. For instance, the UHF code is; ```; if (initialized_diis_manager_ == false) {; diis_manager_ = std::make_shared<DIISManager>(max_diis_vectors, ""HF DIIS vector"", DIISManager::LargestError,; DIISManager::OnDisk);; diis_manager_->set_error_vector_size(2, DIISEntry::Matrix, gradient_a.get(), DIISEntry::Matrix,; gradient_b.get());; diis_manager_->set_vector_size(2, DIISEntry::Matrix, Fa_.get(), DIISEntry::Matrix, Fb_.get());; initialized_diis_manager_ = true;; }. diis_manager_->add_entry(4, gradient_a.get(), gradient_b.get(), Fa_.get(), Fb_.get());; ```; whereas extrapolation is handled by; ```; bool UHF::diis() { return diis_manager_->extrapolate(2, Fa_.get(), Fb_.get()); }; ```; To me, this looks like the code does **not** project linearly dependent eigenvectors out. This might certainly explain many SCF convergence problems seen with Psi4, in which the energy apparently converges but the DIIS error stagnates to a large value. Note that the fix was already in Pulay's original paper. In [Chem. Phys. Lett. 73, 393 (1980)](https://doi.org/10.1016/0009-2614(80)80396-4) he writes; > An even better choice is the use of Fock matrix elements transformed to an orthonormal basis, such as `S^-1/2 F S^-1/2` where `S` is the overlap matrix. This takes into account that a charge shift from a basis function to another is less important physically if the two functions overlap strongly. Obviously, `S^-1/2` is the orthogonalizing matrix `X`; alternatively, the molecular orbital coefficients `C` can also be used.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2217
https://github.com/psi4/psi4/issues/2217:91,Integrability,depend,dependencies,91,"I was looking at the DIIS code to determine whether it properly handles the case of linear dependencies. For instance, the UHF code is; ```; if (initialized_diis_manager_ == false) {; diis_manager_ = std::make_shared<DIISManager>(max_diis_vectors, ""HF DIIS vector"", DIISManager::LargestError,; DIISManager::OnDisk);; diis_manager_->set_error_vector_size(2, DIISEntry::Matrix, gradient_a.get(), DIISEntry::Matrix,; gradient_b.get());; diis_manager_->set_vector_size(2, DIISEntry::Matrix, Fa_.get(), DIISEntry::Matrix, Fb_.get());; initialized_diis_manager_ = true;; }. diis_manager_->add_entry(4, gradient_a.get(), gradient_b.get(), Fa_.get(), Fb_.get());; ```; whereas extrapolation is handled by; ```; bool UHF::diis() { return diis_manager_->extrapolate(2, Fa_.get(), Fb_.get()); }; ```; To me, this looks like the code does **not** project linearly dependent eigenvectors out. This might certainly explain many SCF convergence problems seen with Psi4, in which the energy apparently converges but the DIIS error stagnates to a large value. Note that the fix was already in Pulay's original paper. In [Chem. Phys. Lett. 73, 393 (1980)](https://doi.org/10.1016/0009-2614(80)80396-4) he writes; > An even better choice is the use of Fock matrix elements transformed to an orthonormal basis, such as `S^-1/2 F S^-1/2` where `S` is the overlap matrix. This takes into account that a charge shift from a basis function to another is less important physically if the two functions overlap strongly. Obviously, `S^-1/2` is the orthogonalizing matrix `X`; alternatively, the molecular orbital coefficients `C` can also be used.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2217
https://github.com/psi4/psi4/issues/2217:852,Integrability,depend,dependent,852,"I was looking at the DIIS code to determine whether it properly handles the case of linear dependencies. For instance, the UHF code is; ```; if (initialized_diis_manager_ == false) {; diis_manager_ = std::make_shared<DIISManager>(max_diis_vectors, ""HF DIIS vector"", DIISManager::LargestError,; DIISManager::OnDisk);; diis_manager_->set_error_vector_size(2, DIISEntry::Matrix, gradient_a.get(), DIISEntry::Matrix,; gradient_b.get());; diis_manager_->set_vector_size(2, DIISEntry::Matrix, Fa_.get(), DIISEntry::Matrix, Fb_.get());; initialized_diis_manager_ = true;; }. diis_manager_->add_entry(4, gradient_a.get(), gradient_b.get(), Fa_.get(), Fb_.get());; ```; whereas extrapolation is handled by; ```; bool UHF::diis() { return diis_manager_->extrapolate(2, Fa_.get(), Fb_.get()); }; ```; To me, this looks like the code does **not** project linearly dependent eigenvectors out. This might certainly explain many SCF convergence problems seen with Psi4, in which the energy apparently converges but the DIIS error stagnates to a large value. Note that the fix was already in Pulay's original paper. In [Chem. Phys. Lett. 73, 393 (1980)](https://doi.org/10.1016/0009-2614(80)80396-4) he writes; > An even better choice is the use of Fock matrix elements transformed to an orthonormal basis, such as `S^-1/2 F S^-1/2` where `S` is the overlap matrix. This takes into account that a charge shift from a basis function to another is less important physically if the two functions overlap strongly. Obviously, `S^-1/2` is the orthogonalizing matrix `X`; alternatively, the molecular orbital coefficients `C` can also be used.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2217
https://github.com/psi4/psi4/pull/2218:242,Energy Efficiency,energy,energy,242,"## Description; This is a simple aesthetic cleanup to make the printout more systematic. If I define the xc functional inline as e.g.; ```; my_dft = {; ""name"": ""my lda"",; ""x_functionals"": {""lda_x"": {}},; ""c_functionals"": {""lda_c_pw"": {}}; }; energy('scf', dft_functional=my_dft); ```; the capitalization is inconsistent in the output; ```; => Exchange Functionals <=. 1.0000 XC_lda_x. => Correlation Functionals <=. 1.0000 XC_lda_c_pw; ```; ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2218
https://github.com/psi4/psi4/pull/2218:625,Testability,Test,Tests,625,"## Description; This is a simple aesthetic cleanup to make the printout more systematic. If I define the xc functional inline as e.g.; ```; my_dft = {; ""name"": ""my lda"",; ""x_functionals"": {""lda_x"": {}},; ""c_functionals"": {""lda_c_pw"": {}}; }; energy('scf', dft_functional=my_dft); ```; the capitalization is inconsistent in the output; ```; => Exchange Functionals <=. 1.0000 XC_lda_x. => Correlation Functionals <=. 1.0000 XC_lda_c_pw; ```; ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2218
https://github.com/psi4/psi4/pull/2218:699,Testability,test,tests,699,"## Description; This is a simple aesthetic cleanup to make the printout more systematic. If I define the xc functional inline as e.g.; ```; my_dft = {; ""name"": ""my lda"",; ""x_functionals"": {""lda_x"": {}},; ""c_functionals"": {""lda_c_pw"": {}}; }; energy('scf', dft_functional=my_dft); ```; the capitalization is inconsistent in the output; ```; => Exchange Functionals <=. 1.0000 XC_lda_x. => Correlation Functionals <=. 1.0000 XC_lda_c_pw; ```; ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2218
https://github.com/psi4/psi4/pull/2218:790,Testability,test,tests,790,"## Description; This is a simple aesthetic cleanup to make the printout more systematic. If I define the xc functional inline as e.g.; ```; my_dft = {; ""name"": ""my lda"",; ""x_functionals"": {""lda_x"": {}},; ""c_functionals"": {""lda_c_pw"": {}}; }; energy('scf', dft_functional=my_dft); ```; the capitalization is inconsistent in the output; ```; => Exchange Functionals <=. 1.0000 XC_lda_x. => Correlation Functionals <=. 1.0000 XC_lda_c_pw; ```; ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2218
https://github.com/psi4/psi4/pull/2218:26,Usability,simpl,simple,26,"## Description; This is a simple aesthetic cleanup to make the printout more systematic. If I define the xc functional inline as e.g.; ```; my_dft = {; ""name"": ""my lda"",; ""x_functionals"": {""lda_x"": {}},; ""c_functionals"": {""lda_c_pw"": {}}; }; energy('scf', dft_functional=my_dft); ```; the capitalization is inconsistent in the output; ```; => Exchange Functionals <=. 1.0000 XC_lda_x. => Correlation Functionals <=. 1.0000 XC_lda_c_pw; ```; ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2218
https://github.com/psi4/psi4/issues/2219:803,Availability,ping,ping,803,"Consider the following simple input file:; ```; molecule {; O; H 1 1.0 ; H 1 1.0 2 104.5; }. set basis cc-pvdz. prop('mp2', properties=[""multipole(4)""]); prop('ccsd', properties=[""multipole(4)""]); ```. The MP2 property computation runs fine, but the CCSD property computation does not, as Psi complains that `The following properties are not currently supported: ['MULTIPOLE(4)']`. . This is almost certainly the result of bad logic in `procrouting/proc.py:run_cc_property`. It looks like `run_cc_property` has a _lot_ of custom logic, so it's not surprising that something was missed. This should be added to the allowed list of CC properties, and the logic should be simplified if at all possible. It's not a good sign when methods can't agree about what properties Psi supports. Obligatory @bgpeyton ping.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2219
https://github.com/psi4/psi4/issues/2219:427,Testability,log,logic,427,"Consider the following simple input file:; ```; molecule {; O; H 1 1.0 ; H 1 1.0 2 104.5; }. set basis cc-pvdz. prop('mp2', properties=[""multipole(4)""]); prop('ccsd', properties=[""multipole(4)""]); ```. The MP2 property computation runs fine, but the CCSD property computation does not, as Psi complains that `The following properties are not currently supported: ['MULTIPOLE(4)']`. . This is almost certainly the result of bad logic in `procrouting/proc.py:run_cc_property`. It looks like `run_cc_property` has a _lot_ of custom logic, so it's not surprising that something was missed. This should be added to the allowed list of CC properties, and the logic should be simplified if at all possible. It's not a good sign when methods can't agree about what properties Psi supports. Obligatory @bgpeyton ping.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2219
https://github.com/psi4/psi4/issues/2219:529,Testability,log,logic,529,"Consider the following simple input file:; ```; molecule {; O; H 1 1.0 ; H 1 1.0 2 104.5; }. set basis cc-pvdz. prop('mp2', properties=[""multipole(4)""]); prop('ccsd', properties=[""multipole(4)""]); ```. The MP2 property computation runs fine, but the CCSD property computation does not, as Psi complains that `The following properties are not currently supported: ['MULTIPOLE(4)']`. . This is almost certainly the result of bad logic in `procrouting/proc.py:run_cc_property`. It looks like `run_cc_property` has a _lot_ of custom logic, so it's not surprising that something was missed. This should be added to the allowed list of CC properties, and the logic should be simplified if at all possible. It's not a good sign when methods can't agree about what properties Psi supports. Obligatory @bgpeyton ping.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2219
https://github.com/psi4/psi4/issues/2219:653,Testability,log,logic,653,"Consider the following simple input file:; ```; molecule {; O; H 1 1.0 ; H 1 1.0 2 104.5; }. set basis cc-pvdz. prop('mp2', properties=[""multipole(4)""]); prop('ccsd', properties=[""multipole(4)""]); ```. The MP2 property computation runs fine, but the CCSD property computation does not, as Psi complains that `The following properties are not currently supported: ['MULTIPOLE(4)']`. . This is almost certainly the result of bad logic in `procrouting/proc.py:run_cc_property`. It looks like `run_cc_property` has a _lot_ of custom logic, so it's not surprising that something was missed. This should be added to the allowed list of CC properties, and the logic should be simplified if at all possible. It's not a good sign when methods can't agree about what properties Psi supports. Obligatory @bgpeyton ping.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2219
https://github.com/psi4/psi4/issues/2219:23,Usability,simpl,simple,23,"Consider the following simple input file:; ```; molecule {; O; H 1 1.0 ; H 1 1.0 2 104.5; }. set basis cc-pvdz. prop('mp2', properties=[""multipole(4)""]); prop('ccsd', properties=[""multipole(4)""]); ```. The MP2 property computation runs fine, but the CCSD property computation does not, as Psi complains that `The following properties are not currently supported: ['MULTIPOLE(4)']`. . This is almost certainly the result of bad logic in `procrouting/proc.py:run_cc_property`. It looks like `run_cc_property` has a _lot_ of custom logic, so it's not surprising that something was missed. This should be added to the allowed list of CC properties, and the logic should be simplified if at all possible. It's not a good sign when methods can't agree about what properties Psi supports. Obligatory @bgpeyton ping.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2219
https://github.com/psi4/psi4/issues/2219:669,Usability,simpl,simplified,669,"Consider the following simple input file:; ```; molecule {; O; H 1 1.0 ; H 1 1.0 2 104.5; }. set basis cc-pvdz. prop('mp2', properties=[""multipole(4)""]); prop('ccsd', properties=[""multipole(4)""]); ```. The MP2 property computation runs fine, but the CCSD property computation does not, as Psi complains that `The following properties are not currently supported: ['MULTIPOLE(4)']`. . This is almost certainly the result of bad logic in `procrouting/proc.py:run_cc_property`. It looks like `run_cc_property` has a _lot_ of custom logic, so it's not surprising that something was missed. This should be added to the allowed list of CC properties, and the logic should be simplified if at all possible. It's not a good sign when methods can't agree about what properties Psi supports. Obligatory @bgpeyton ping.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2219
https://github.com/psi4/psi4/issues/2220:309,Deployability,upgrade,upgrade,309,"Given recent experience with #2192 and #2193, it would be good to include a threaded run of quicktests as part of the automatically running test suite. Unfortunately, it's not clear to me if this is _possible_. According to Holger, ""Azure offers only paid parallel jobs by default, but one can request a free upgrade. GHA gives 2-core machines but not sure if one can run things in parallel."" If not possible, we should come up with a protocol for making sure parallel test suite is checked semi-regularly.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2220
https://github.com/psi4/psi4/issues/2220:435,Integrability,protocol,protocol,435,"Given recent experience with #2192 and #2193, it would be good to include a threaded run of quicktests as part of the automatically running test suite. Unfortunately, it's not clear to me if this is _possible_. According to Holger, ""Azure offers only paid parallel jobs by default, but one can request a free upgrade. GHA gives 2-core machines but not sure if one can run things in parallel."" If not possible, we should come up with a protocol for making sure parallel test suite is checked semi-regularly.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2220
https://github.com/psi4/psi4/issues/2220:140,Testability,test,test,140,"Given recent experience with #2192 and #2193, it would be good to include a threaded run of quicktests as part of the automatically running test suite. Unfortunately, it's not clear to me if this is _possible_. According to Holger, ""Azure offers only paid parallel jobs by default, but one can request a free upgrade. GHA gives 2-core machines but not sure if one can run things in parallel."" If not possible, we should come up with a protocol for making sure parallel test suite is checked semi-regularly.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2220
https://github.com/psi4/psi4/issues/2220:469,Testability,test,test,469,"Given recent experience with #2192 and #2193, it would be good to include a threaded run of quicktests as part of the automatically running test suite. Unfortunately, it's not clear to me if this is _possible_. According to Holger, ""Azure offers only paid parallel jobs by default, but one can request a free upgrade. GHA gives 2-core machines but not sure if one can run things in parallel."" If not possible, we should come up with a protocol for making sure parallel test suite is checked semi-regularly.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2220
https://github.com/psi4/psi4/issues/2220:176,Usability,clear,clear,176,"Given recent experience with #2192 and #2193, it would be good to include a threaded run of quicktests as part of the automatically running test suite. Unfortunately, it's not clear to me if this is _possible_. According to Holger, ""Azure offers only paid parallel jobs by default, but one can request a free upgrade. GHA gives 2-core machines but not sure if one can run things in parallel."" If not possible, we should come up with a protocol for making sure parallel test suite is checked semi-regularly.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2220
https://github.com/psi4/psi4/pull/2221:643,Deployability,update,updated,643,"## Description; This PR reverts the behaviour of standard `bsse_type='cp'` calculations to calculate all fragments (monomers) in the full (dimer) basis only. The PR also fixes printing interaction energies disguised as total energies in those tables. When a calculation is requested with `bsse_type='cp', return_total_data=True`, an `bsse_type=['cp', 'nocp']` is automatically performed and the total energies are calculated & returned. With `bsse_type=['cp','nocp']` (and `return_total_data` unspecified or `False`), the total energies are calculated, but the interaction energies are returned. The PR fixes #1691 . ## Checklist; - [x] Tests updated; - [x] `ctest -L nbody` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2221
https://github.com/psi4/psi4/pull/2221:377,Performance,perform,performed,377,"## Description; This PR reverts the behaviour of standard `bsse_type='cp'` calculations to calculate all fragments (monomers) in the full (dimer) basis only. The PR also fixes printing interaction energies disguised as total energies in those tables. When a calculation is requested with `bsse_type='cp', return_total_data=True`, an `bsse_type=['cp', 'nocp']` is automatically performed and the total energies are calculated & returned. With `bsse_type=['cp','nocp']` (and `return_total_data` unspecified or `False`), the total energies are calculated, but the interaction energies are returned. The PR fixes #1691 . ## Checklist; - [x] Tests updated; - [x] `ctest -L nbody` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2221
https://github.com/psi4/psi4/pull/2221:637,Testability,Test,Tests,637,"## Description; This PR reverts the behaviour of standard `bsse_type='cp'` calculations to calculate all fragments (monomers) in the full (dimer) basis only. The PR also fixes printing interaction energies disguised as total energies in those tables. When a calculation is requested with `bsse_type='cp', return_total_data=True`, an `bsse_type=['cp', 'nocp']` is automatically performed and the total energies are calculated & returned. With `bsse_type=['cp','nocp']` (and `return_total_data` unspecified or `False`), the total energies are calculated, but the interaction energies are returned. The PR fixes #1691 . ## Checklist; - [x] Tests updated; - [x] `ctest -L nbody` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2221
https://github.com/psi4/psi4/pull/2222:409,Integrability,interface,interface,409,"This PR fixes a part of #2012, where requesting to freeze n-th fixed previous shell (using `set freeze_core -n` syntax) would happily carry on, even if an ECP present on a certain atom would substitute more electrons than in the n-th shell. This means the example in #2012 using `freeze_core -2` now throws an exception. The issue of ""smart freezing"" of electrons of alkali metals and a further revamp of the interface (per-atom or per-element spec.) is for a different PR. ## Questions; - [x] Do I need to add a test?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2222
https://github.com/psi4/psi4/pull/2222:513,Testability,test,test,513,"This PR fixes a part of #2012, where requesting to freeze n-th fixed previous shell (using `set freeze_core -n` syntax) would happily carry on, even if an ECP present on a certain atom would substitute more electrons than in the n-th shell. This means the example in #2012 using `freeze_core -2` now throws an exception. The issue of ""smart freezing"" of electrons of alkali metals and a further revamp of the interface (per-atom or per-element spec.) is for a different PR. ## Questions; - [x] Do I need to add a test?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2222
https://github.com/psi4/psi4/pull/2222:540,Testability,Test,Tests,540,"This PR fixes a part of #2012, where requesting to freeze n-th fixed previous shell (using `set freeze_core -n` syntax) would happily carry on, even if an ECP present on a certain atom would substitute more electrons than in the n-th shell. This means the example in #2012 using `freeze_core -2` now throws an exception. The issue of ""smart freezing"" of electrons of alkali metals and a further revamp of the interface (per-atom or per-element spec.) is for a different PR. ## Questions; - [x] Do I need to add a test?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2222
https://github.com/psi4/psi4/pull/2222:614,Testability,test,tests,614,"This PR fixes a part of #2012, where requesting to freeze n-th fixed previous shell (using `set freeze_core -n` syntax) would happily carry on, even if an ECP present on a certain atom would substitute more electrons than in the n-th shell. This means the example in #2012 using `freeze_core -2` now throws an exception. The issue of ""smart freezing"" of electrons of alkali metals and a further revamp of the interface (per-atom or per-element spec.) is for a different PR. ## Questions; - [x] Do I need to add a test?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2222
https://github.com/psi4/psi4/pull/2222:705,Testability,test,tests,705,"This PR fixes a part of #2012, where requesting to freeze n-th fixed previous shell (using `set freeze_core -n` syntax) would happily carry on, even if an ECP present on a certain atom would substitute more electrons than in the n-th shell. This means the example in #2012 using `freeze_core -2` now throws an exception. The issue of ""smart freezing"" of electrons of alkali metals and a further revamp of the interface (per-atom or per-element spec.) is for a different PR. ## Questions; - [x] Do I need to add a test?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2222
https://github.com/psi4/psi4/issues/2223:849,Availability,avail,available,849,"With apologies for the vague title, there are some issues with the `compute_gradient` function. They're connected, so it's best to have a single topic for these:. 1. Not all modules that support gradients support the `compute_gradient` API. `dct` and Rob's `dfmp2` do, but most other modules don't. We learned in #2200 that RHF wavefunctions don't, though `SCFDeriv` and `Dispersion` ""wavefunctions"" seem to. (See `scfgrad` and `libdisp`, respectively.); 2. The `compute_gradient` calls coming out of `dct` and `dfmp2` don't even work without crashing! Minimal not-working example:; ```; molecule {; O; H 1 1.0 ; H 1 1.0 2 104.5; }. wfn = energy('mp2/sto-6g', return_wfn=True)[1] # Can switch ""mp2"" to ""dct"" and get a similar crash; wfn.compute_gradient(); ```; 3. Computing a derivative _reliably_ requires assumptions about what intermediates are available and what the Hamiltonian is. For example, we need to know that the file of ""T"" amplitudes is the same as that optimized during the energy computation, and that the energy was computed without relativistic corrections. We currently store whether the relativistic global is _currently_ enabled, but not whether relatvistic terms were added during the compute step. I'm open to alternatives, but I favor taking `compute_gradient` out of the API entirely. It's not consistently in the API, it doesn't get simple cases right when it's there, and the assumptions required by such a code don't make it a good candidate for being in the API in the first place.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2223
https://github.com/psi4/psi4/issues/2223:639,Energy Efficiency,energy,energy,639,"With apologies for the vague title, there are some issues with the `compute_gradient` function. They're connected, so it's best to have a single topic for these:. 1. Not all modules that support gradients support the `compute_gradient` API. `dct` and Rob's `dfmp2` do, but most other modules don't. We learned in #2200 that RHF wavefunctions don't, though `SCFDeriv` and `Dispersion` ""wavefunctions"" seem to. (See `scfgrad` and `libdisp`, respectively.); 2. The `compute_gradient` calls coming out of `dct` and `dfmp2` don't even work without crashing! Minimal not-working example:; ```; molecule {; O; H 1 1.0 ; H 1 1.0 2 104.5; }. wfn = energy('mp2/sto-6g', return_wfn=True)[1] # Can switch ""mp2"" to ""dct"" and get a similar crash; wfn.compute_gradient(); ```; 3. Computing a derivative _reliably_ requires assumptions about what intermediates are available and what the Hamiltonian is. For example, we need to know that the file of ""T"" amplitudes is the same as that optimized during the energy computation, and that the energy was computed without relativistic corrections. We currently store whether the relativistic global is _currently_ enabled, but not whether relatvistic terms were added during the compute step. I'm open to alternatives, but I favor taking `compute_gradient` out of the API entirely. It's not consistently in the API, it doesn't get simple cases right when it's there, and the assumptions required by such a code don't make it a good candidate for being in the API in the first place.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2223
https://github.com/psi4/psi4/issues/2223:990,Energy Efficiency,energy,energy,990,"With apologies for the vague title, there are some issues with the `compute_gradient` function. They're connected, so it's best to have a single topic for these:. 1. Not all modules that support gradients support the `compute_gradient` API. `dct` and Rob's `dfmp2` do, but most other modules don't. We learned in #2200 that RHF wavefunctions don't, though `SCFDeriv` and `Dispersion` ""wavefunctions"" seem to. (See `scfgrad` and `libdisp`, respectively.); 2. The `compute_gradient` calls coming out of `dct` and `dfmp2` don't even work without crashing! Minimal not-working example:; ```; molecule {; O; H 1 1.0 ; H 1 1.0 2 104.5; }. wfn = energy('mp2/sto-6g', return_wfn=True)[1] # Can switch ""mp2"" to ""dct"" and get a similar crash; wfn.compute_gradient(); ```; 3. Computing a derivative _reliably_ requires assumptions about what intermediates are available and what the Hamiltonian is. For example, we need to know that the file of ""T"" amplitudes is the same as that optimized during the energy computation, and that the energy was computed without relativistic corrections. We currently store whether the relativistic global is _currently_ enabled, but not whether relatvistic terms were added during the compute step. I'm open to alternatives, but I favor taking `compute_gradient` out of the API entirely. It's not consistently in the API, it doesn't get simple cases right when it's there, and the assumptions required by such a code don't make it a good candidate for being in the API in the first place.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2223
https://github.com/psi4/psi4/issues/2223:1023,Energy Efficiency,energy,energy,1023,"With apologies for the vague title, there are some issues with the `compute_gradient` function. They're connected, so it's best to have a single topic for these:. 1. Not all modules that support gradients support the `compute_gradient` API. `dct` and Rob's `dfmp2` do, but most other modules don't. We learned in #2200 that RHF wavefunctions don't, though `SCFDeriv` and `Dispersion` ""wavefunctions"" seem to. (See `scfgrad` and `libdisp`, respectively.); 2. The `compute_gradient` calls coming out of `dct` and `dfmp2` don't even work without crashing! Minimal not-working example:; ```; molecule {; O; H 1 1.0 ; H 1 1.0 2 104.5; }. wfn = energy('mp2/sto-6g', return_wfn=True)[1] # Can switch ""mp2"" to ""dct"" and get a similar crash; wfn.compute_gradient(); ```; 3. Computing a derivative _reliably_ requires assumptions about what intermediates are available and what the Hamiltonian is. For example, we need to know that the file of ""T"" amplitudes is the same as that optimized during the energy computation, and that the energy was computed without relativistic corrections. We currently store whether the relativistic global is _currently_ enabled, but not whether relatvistic terms were added during the compute step. I'm open to alternatives, but I favor taking `compute_gradient` out of the API entirely. It's not consistently in the API, it doesn't get simple cases right when it's there, and the assumptions required by such a code don't make it a good candidate for being in the API in the first place.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2223
https://github.com/psi4/psi4/issues/2223:969,Performance,optimiz,optimized,969,"With apologies for the vague title, there are some issues with the `compute_gradient` function. They're connected, so it's best to have a single topic for these:. 1. Not all modules that support gradients support the `compute_gradient` API. `dct` and Rob's `dfmp2` do, but most other modules don't. We learned in #2200 that RHF wavefunctions don't, though `SCFDeriv` and `Dispersion` ""wavefunctions"" seem to. (See `scfgrad` and `libdisp`, respectively.); 2. The `compute_gradient` calls coming out of `dct` and `dfmp2` don't even work without crashing! Minimal not-working example:; ```; molecule {; O; H 1 1.0 ; H 1 1.0 2 104.5; }. wfn = energy('mp2/sto-6g', return_wfn=True)[1] # Can switch ""mp2"" to ""dct"" and get a similar crash; wfn.compute_gradient(); ```; 3. Computing a derivative _reliably_ requires assumptions about what intermediates are available and what the Hamiltonian is. For example, we need to know that the file of ""T"" amplitudes is the same as that optimized during the energy computation, and that the energy was computed without relativistic corrections. We currently store whether the relativistic global is _currently_ enabled, but not whether relatvistic terms were added during the compute step. I'm open to alternatives, but I favor taking `compute_gradient` out of the API entirely. It's not consistently in the API, it doesn't get simple cases right when it's there, and the assumptions required by such a code don't make it a good candidate for being in the API in the first place.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2223
https://github.com/psi4/psi4/issues/2223:302,Usability,learn,learned,302,"With apologies for the vague title, there are some issues with the `compute_gradient` function. They're connected, so it's best to have a single topic for these:. 1. Not all modules that support gradients support the `compute_gradient` API. `dct` and Rob's `dfmp2` do, but most other modules don't. We learned in #2200 that RHF wavefunctions don't, though `SCFDeriv` and `Dispersion` ""wavefunctions"" seem to. (See `scfgrad` and `libdisp`, respectively.); 2. The `compute_gradient` calls coming out of `dct` and `dfmp2` don't even work without crashing! Minimal not-working example:; ```; molecule {; O; H 1 1.0 ; H 1 1.0 2 104.5; }. wfn = energy('mp2/sto-6g', return_wfn=True)[1] # Can switch ""mp2"" to ""dct"" and get a similar crash; wfn.compute_gradient(); ```; 3. Computing a derivative _reliably_ requires assumptions about what intermediates are available and what the Hamiltonian is. For example, we need to know that the file of ""T"" amplitudes is the same as that optimized during the energy computation, and that the energy was computed without relativistic corrections. We currently store whether the relativistic global is _currently_ enabled, but not whether relatvistic terms were added during the compute step. I'm open to alternatives, but I favor taking `compute_gradient` out of the API entirely. It's not consistently in the API, it doesn't get simple cases right when it's there, and the assumptions required by such a code don't make it a good candidate for being in the API in the first place.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2223
https://github.com/psi4/psi4/issues/2223:1360,Usability,simpl,simple,1360,"With apologies for the vague title, there are some issues with the `compute_gradient` function. They're connected, so it's best to have a single topic for these:. 1. Not all modules that support gradients support the `compute_gradient` API. `dct` and Rob's `dfmp2` do, but most other modules don't. We learned in #2200 that RHF wavefunctions don't, though `SCFDeriv` and `Dispersion` ""wavefunctions"" seem to. (See `scfgrad` and `libdisp`, respectively.); 2. The `compute_gradient` calls coming out of `dct` and `dfmp2` don't even work without crashing! Minimal not-working example:; ```; molecule {; O; H 1 1.0 ; H 1 1.0 2 104.5; }. wfn = energy('mp2/sto-6g', return_wfn=True)[1] # Can switch ""mp2"" to ""dct"" and get a similar crash; wfn.compute_gradient(); ```; 3. Computing a derivative _reliably_ requires assumptions about what intermediates are available and what the Hamiltonian is. For example, we need to know that the file of ""T"" amplitudes is the same as that optimized during the energy computation, and that the energy was computed without relativistic corrections. We currently store whether the relativistic global is _currently_ enabled, but not whether relatvistic terms were added during the compute step. I'm open to alternatives, but I favor taking `compute_gradient` out of the API entirely. It's not consistently in the API, it doesn't get simple cases right when it's there, and the assumptions required by such a code don't make it a good candidate for being in the API in the first place.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2223
https://github.com/psi4/psi4/issues/2224:138,Availability,error,error,138,"A recent [forum report](http://forum.psicode.org/t/deleting-scratch-files-before-a-computation-finishes/2206) has a user encountering the error message ""PSIOManager cannot get a mirror file handle"". Liberal use of `psi.core.clean` isn't fixing anything, and Holger and I can't figure out what the error message means. We need to figure out what the message means, how the user should respond, and put that into the error message.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2224
https://github.com/psi4/psi4/issues/2224:297,Availability,error,error,297,"A recent [forum report](http://forum.psicode.org/t/deleting-scratch-files-before-a-computation-finishes/2206) has a user encountering the error message ""PSIOManager cannot get a mirror file handle"". Liberal use of `psi.core.clean` isn't fixing anything, and Holger and I can't figure out what the error message means. We need to figure out what the message means, how the user should respond, and put that into the error message.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2224
https://github.com/psi4/psi4/issues/2224:415,Availability,error,error,415,"A recent [forum report](http://forum.psicode.org/t/deleting-scratch-files-before-a-computation-finishes/2206) has a user encountering the error message ""PSIOManager cannot get a mirror file handle"". Liberal use of `psi.core.clean` isn't fixing anything, and Holger and I can't figure out what the error message means. We need to figure out what the message means, how the user should respond, and put that into the error message.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2224
https://github.com/psi4/psi4/issues/2224:144,Integrability,message,message,144,"A recent [forum report](http://forum.psicode.org/t/deleting-scratch-files-before-a-computation-finishes/2206) has a user encountering the error message ""PSIOManager cannot get a mirror file handle"". Liberal use of `psi.core.clean` isn't fixing anything, and Holger and I can't figure out what the error message means. We need to figure out what the message means, how the user should respond, and put that into the error message.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2224
https://github.com/psi4/psi4/issues/2224:303,Integrability,message,message,303,"A recent [forum report](http://forum.psicode.org/t/deleting-scratch-files-before-a-computation-finishes/2206) has a user encountering the error message ""PSIOManager cannot get a mirror file handle"". Liberal use of `psi.core.clean` isn't fixing anything, and Holger and I can't figure out what the error message means. We need to figure out what the message means, how the user should respond, and put that into the error message.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2224
https://github.com/psi4/psi4/issues/2224:349,Integrability,message,message,349,"A recent [forum report](http://forum.psicode.org/t/deleting-scratch-files-before-a-computation-finishes/2206) has a user encountering the error message ""PSIOManager cannot get a mirror file handle"". Liberal use of `psi.core.clean` isn't fixing anything, and Holger and I can't figure out what the error message means. We need to figure out what the message means, how the user should respond, and put that into the error message.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2224
https://github.com/psi4/psi4/issues/2224:421,Integrability,message,message,421,"A recent [forum report](http://forum.psicode.org/t/deleting-scratch-files-before-a-computation-finishes/2206) has a user encountering the error message ""PSIOManager cannot get a mirror file handle"". Liberal use of `psi.core.clean` isn't fixing anything, and Holger and I can't figure out what the error message means. We need to figure out what the message means, how the user should respond, and put that into the error message.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2224
https://github.com/psi4/psi4/pull/2225:611,Availability,down,down,611,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This PR implements level shifts. Closes #2216. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Level shifts in restricted methods; - [x] Level shifts in unrestricted methods; - [x] Level shifts in constrained unrestricted methods; - [x] Level shifts in restricted open shell methods. ## Questions; - [ ] Should the level shift be turned on by default? Since Psi4 does not have EDIIS/ADIIS, it will often fail to reach the convergence radius of DIIS. Level shifts may slow down convergence somewhat, but if they're turned off at large residual gradient (e.g. 1e-2) then the slowdown should be negligible in most cases. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2225
https://github.com/psi4/psi4/pull/2225:777,Testability,Test,Tests,777,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This PR implements level shifts. Closes #2216. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Level shifts in restricted methods; - [x] Level shifts in unrestricted methods; - [x] Level shifts in constrained unrestricted methods; - [x] Level shifts in restricted open shell methods. ## Questions; - [ ] Should the level shift be turned on by default? Since Psi4 does not have EDIIS/ADIIS, it will often fail to reach the convergence radius of DIIS. Level shifts may slow down convergence somewhat, but if they're turned off at large residual gradient (e.g. 1e-2) then the slowdown should be negligible in most cases. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2225
https://github.com/psi4/psi4/pull/2225:851,Testability,test,tests,851,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This PR implements level shifts. Closes #2216. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Level shifts in restricted methods; - [x] Level shifts in unrestricted methods; - [x] Level shifts in constrained unrestricted methods; - [x] Level shifts in restricted open shell methods. ## Questions; - [ ] Should the level shift be turned on by default? Since Psi4 does not have EDIIS/ADIIS, it will often fail to reach the convergence radius of DIIS. Level shifts may slow down convergence somewhat, but if they're turned off at large residual gradient (e.g. 1e-2) then the slowdown should be negligible in most cases. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2225
https://github.com/psi4/psi4/pull/2225:942,Testability,test,tests,942,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This PR implements level shifts. Closes #2216. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Level shifts in restricted methods; - [x] Level shifts in unrestricted methods; - [x] Level shifts in constrained unrestricted methods; - [x] Level shifts in restricted open shell methods. ## Questions; - [ ] Should the level shift be turned on by default? Since Psi4 does not have EDIIS/ADIIS, it will often fail to reach the convergence radius of DIIS. Level shifts may slow down convergence somewhat, but if they're turned off at large residual gradient (e.g. 1e-2) then the slowdown should be negligible in most cases. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2225
https://github.com/psi4/psi4/pull/2227:573,Testability,Test,Tests,573,"## Description; Now that I have set up a conda environment, I was able to check whether #2218 fixed the issue of the capitalization of the xc functional keywords. It did not. This merge solves the issue:; ```. => Exchange Functionals <=. 1.0000 XC_LDA_X. => Correlation Functionals <=. 1.0000 XC_LDA_C_PW. => LibXC Density Thresholds <==. XC_LDA_C_PW: 1.00E-15 ; XC_LDA_X: 1.00E-15 ; ```. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2227
https://github.com/psi4/psi4/pull/2227:647,Testability,test,tests,647,"## Description; Now that I have set up a conda environment, I was able to check whether #2218 fixed the issue of the capitalization of the xc functional keywords. It did not. This merge solves the issue:; ```. => Exchange Functionals <=. 1.0000 XC_LDA_X. => Correlation Functionals <=. 1.0000 XC_LDA_C_PW. => LibXC Density Thresholds <==. XC_LDA_C_PW: 1.00E-15 ; XC_LDA_X: 1.00E-15 ; ```. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2227
https://github.com/psi4/psi4/pull/2227:738,Testability,test,tests,738,"## Description; Now that I have set up a conda environment, I was able to check whether #2218 fixed the issue of the capitalization of the xc functional keywords. It did not. This merge solves the issue:; ```. => Exchange Functionals <=. 1.0000 XC_LDA_X. => Correlation Functionals <=. 1.0000 XC_LDA_C_PW. => LibXC Density Thresholds <==. XC_LDA_C_PW: 1.00E-15 ; XC_LDA_X: 1.00E-15 ; ```. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2227
https://github.com/psi4/psi4/issues/2228:109,Availability,error,error,109,"When running psi4 under windows (version 1.4rc3.dev1, installed via conda) from within qiskit, the following error occurs:. ```; File ""C:\Users\user\Anaconda3\envs\qiskit-0-27-psi4-jupyter\Scripts\psi4-script.py"", line 336, in <module>; exec(content). File ""<string>"", line 31; SyntaxError: (unicode error) 'unicodeescape' codec can't decode bytes in position 2-3: truncated \UXXXXXXXX escape. Printing out the relevant lines from the Psithon --> Python processed input file:. !----------------------------------------------------------------------------------!; ! !; ! (unicode error) 'unicodeescape' codec can't decode bytes in position 2-3: !; ! truncated \UXXXXXXXX escape !; ! !; !----------------------------------------------------------------------------------!; ```; I could track down the error to be raised from here:; https://github.com/psi4/psi4/blob/56738543906df86f94f2ee69b518d699b4a1ecd9/psi4/run_psi4.py#L333; when trying to execute 'content'.; The 'content' variable contains single backslashes in the windows path string (e.g. `'C:\Users'` instead of the correct `r'C:\Users'` or 'C:\\Users'`) which is responsible for the error.; I was able to fix the error via inserting; ```python; import platform; if platform.system() == ""Windows"":; content = content.replace(""'C:"", ""r'C:"").replace('""C:', 'r""C:'); ```; directly before aforementioned exec command.; That's quite a quick-and-dirty fix and I think it should be solved somewhere in the method called in; https://github.com/psi4/psi4/blob/56738543906df86f94f2ee69b518d699b4a1ecd9/psi4/run_psi4.py#L315; though I don't know how/where exactly to avoid unwanted side effects. Here's the whole traceback:; ```; ---------------------------------------------------------------------------; QiskitNatureError Traceback (most recent call last); <ipython-input-8-4cd496b3ad7e> in <module>; ----> 1 res = ucc_gsc.solve(es_problem); 2 ; 3 print(res). ~\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\algorithms\groun",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2228
https://github.com/psi4/psi4/issues/2228:300,Availability,error,error,300,"When running psi4 under windows (version 1.4rc3.dev1, installed via conda) from within qiskit, the following error occurs:. ```; File ""C:\Users\user\Anaconda3\envs\qiskit-0-27-psi4-jupyter\Scripts\psi4-script.py"", line 336, in <module>; exec(content). File ""<string>"", line 31; SyntaxError: (unicode error) 'unicodeescape' codec can't decode bytes in position 2-3: truncated \UXXXXXXXX escape. Printing out the relevant lines from the Psithon --> Python processed input file:. !----------------------------------------------------------------------------------!; ! !; ! (unicode error) 'unicodeescape' codec can't decode bytes in position 2-3: !; ! truncated \UXXXXXXXX escape !; ! !; !----------------------------------------------------------------------------------!; ```; I could track down the error to be raised from here:; https://github.com/psi4/psi4/blob/56738543906df86f94f2ee69b518d699b4a1ecd9/psi4/run_psi4.py#L333; when trying to execute 'content'.; The 'content' variable contains single backslashes in the windows path string (e.g. `'C:\Users'` instead of the correct `r'C:\Users'` or 'C:\\Users'`) which is responsible for the error.; I was able to fix the error via inserting; ```python; import platform; if platform.system() == ""Windows"":; content = content.replace(""'C:"", ""r'C:"").replace('""C:', 'r""C:'); ```; directly before aforementioned exec command.; That's quite a quick-and-dirty fix and I think it should be solved somewhere in the method called in; https://github.com/psi4/psi4/blob/56738543906df86f94f2ee69b518d699b4a1ecd9/psi4/run_psi4.py#L315; though I don't know how/where exactly to avoid unwanted side effects. Here's the whole traceback:; ```; ---------------------------------------------------------------------------; QiskitNatureError Traceback (most recent call last); <ipython-input-8-4cd496b3ad7e> in <module>; ----> 1 res = ucc_gsc.solve(es_problem); 2 ; 3 print(res). ~\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\algorithms\groun",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2228
https://github.com/psi4/psi4/issues/2228:579,Availability,error,error,579,"When running psi4 under windows (version 1.4rc3.dev1, installed via conda) from within qiskit, the following error occurs:. ```; File ""C:\Users\user\Anaconda3\envs\qiskit-0-27-psi4-jupyter\Scripts\psi4-script.py"", line 336, in <module>; exec(content). File ""<string>"", line 31; SyntaxError: (unicode error) 'unicodeescape' codec can't decode bytes in position 2-3: truncated \UXXXXXXXX escape. Printing out the relevant lines from the Psithon --> Python processed input file:. !----------------------------------------------------------------------------------!; ! !; ! (unicode error) 'unicodeescape' codec can't decode bytes in position 2-3: !; ! truncated \UXXXXXXXX escape !; ! !; !----------------------------------------------------------------------------------!; ```; I could track down the error to be raised from here:; https://github.com/psi4/psi4/blob/56738543906df86f94f2ee69b518d699b4a1ecd9/psi4/run_psi4.py#L333; when trying to execute 'content'.; The 'content' variable contains single backslashes in the windows path string (e.g. `'C:\Users'` instead of the correct `r'C:\Users'` or 'C:\\Users'`) which is responsible for the error.; I was able to fix the error via inserting; ```python; import platform; if platform.system() == ""Windows"":; content = content.replace(""'C:"", ""r'C:"").replace('""C:', 'r""C:'); ```; directly before aforementioned exec command.; That's quite a quick-and-dirty fix and I think it should be solved somewhere in the method called in; https://github.com/psi4/psi4/blob/56738543906df86f94f2ee69b518d699b4a1ecd9/psi4/run_psi4.py#L315; though I don't know how/where exactly to avoid unwanted side effects. Here's the whole traceback:; ```; ---------------------------------------------------------------------------; QiskitNatureError Traceback (most recent call last); <ipython-input-8-4cd496b3ad7e> in <module>; ----> 1 res = ucc_gsc.solve(es_problem); 2 ; 3 print(res). ~\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\algorithms\groun",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2228
https://github.com/psi4/psi4/issues/2228:790,Availability,down,down,790,"When running psi4 under windows (version 1.4rc3.dev1, installed via conda) from within qiskit, the following error occurs:. ```; File ""C:\Users\user\Anaconda3\envs\qiskit-0-27-psi4-jupyter\Scripts\psi4-script.py"", line 336, in <module>; exec(content). File ""<string>"", line 31; SyntaxError: (unicode error) 'unicodeescape' codec can't decode bytes in position 2-3: truncated \UXXXXXXXX escape. Printing out the relevant lines from the Psithon --> Python processed input file:. !----------------------------------------------------------------------------------!; ! !; ! (unicode error) 'unicodeescape' codec can't decode bytes in position 2-3: !; ! truncated \UXXXXXXXX escape !; ! !; !----------------------------------------------------------------------------------!; ```; I could track down the error to be raised from here:; https://github.com/psi4/psi4/blob/56738543906df86f94f2ee69b518d699b4a1ecd9/psi4/run_psi4.py#L333; when trying to execute 'content'.; The 'content' variable contains single backslashes in the windows path string (e.g. `'C:\Users'` instead of the correct `r'C:\Users'` or 'C:\\Users'`) which is responsible for the error.; I was able to fix the error via inserting; ```python; import platform; if platform.system() == ""Windows"":; content = content.replace(""'C:"", ""r'C:"").replace('""C:', 'r""C:'); ```; directly before aforementioned exec command.; That's quite a quick-and-dirty fix and I think it should be solved somewhere in the method called in; https://github.com/psi4/psi4/blob/56738543906df86f94f2ee69b518d699b4a1ecd9/psi4/run_psi4.py#L315; though I don't know how/where exactly to avoid unwanted side effects. Here's the whole traceback:; ```; ---------------------------------------------------------------------------; QiskitNatureError Traceback (most recent call last); <ipython-input-8-4cd496b3ad7e> in <module>; ----> 1 res = ucc_gsc.solve(es_problem); 2 ; 3 print(res). ~\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\algorithms\groun",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2228
https://github.com/psi4/psi4/issues/2228:799,Availability,error,error,799,"When running psi4 under windows (version 1.4rc3.dev1, installed via conda) from within qiskit, the following error occurs:. ```; File ""C:\Users\user\Anaconda3\envs\qiskit-0-27-psi4-jupyter\Scripts\psi4-script.py"", line 336, in <module>; exec(content). File ""<string>"", line 31; SyntaxError: (unicode error) 'unicodeescape' codec can't decode bytes in position 2-3: truncated \UXXXXXXXX escape. Printing out the relevant lines from the Psithon --> Python processed input file:. !----------------------------------------------------------------------------------!; ! !; ! (unicode error) 'unicodeescape' codec can't decode bytes in position 2-3: !; ! truncated \UXXXXXXXX escape !; ! !; !----------------------------------------------------------------------------------!; ```; I could track down the error to be raised from here:; https://github.com/psi4/psi4/blob/56738543906df86f94f2ee69b518d699b4a1ecd9/psi4/run_psi4.py#L333; when trying to execute 'content'.; The 'content' variable contains single backslashes in the windows path string (e.g. `'C:\Users'` instead of the correct `r'C:\Users'` or 'C:\\Users'`) which is responsible for the error.; I was able to fix the error via inserting; ```python; import platform; if platform.system() == ""Windows"":; content = content.replace(""'C:"", ""r'C:"").replace('""C:', 'r""C:'); ```; directly before aforementioned exec command.; That's quite a quick-and-dirty fix and I think it should be solved somewhere in the method called in; https://github.com/psi4/psi4/blob/56738543906df86f94f2ee69b518d699b4a1ecd9/psi4/run_psi4.py#L315; though I don't know how/where exactly to avoid unwanted side effects. Here's the whole traceback:; ```; ---------------------------------------------------------------------------; QiskitNatureError Traceback (most recent call last); <ipython-input-8-4cd496b3ad7e> in <module>; ----> 1 res = ucc_gsc.solve(es_problem); 2 ; 3 print(res). ~\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\algorithms\groun",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2228
https://github.com/psi4/psi4/issues/2228:1143,Availability,error,error,1143,"e following error occurs:. ```; File ""C:\Users\user\Anaconda3\envs\qiskit-0-27-psi4-jupyter\Scripts\psi4-script.py"", line 336, in <module>; exec(content). File ""<string>"", line 31; SyntaxError: (unicode error) 'unicodeescape' codec can't decode bytes in position 2-3: truncated \UXXXXXXXX escape. Printing out the relevant lines from the Psithon --> Python processed input file:. !----------------------------------------------------------------------------------!; ! !; ! (unicode error) 'unicodeescape' codec can't decode bytes in position 2-3: !; ! truncated \UXXXXXXXX escape !; ! !; !----------------------------------------------------------------------------------!; ```; I could track down the error to be raised from here:; https://github.com/psi4/psi4/blob/56738543906df86f94f2ee69b518d699b4a1ecd9/psi4/run_psi4.py#L333; when trying to execute 'content'.; The 'content' variable contains single backslashes in the windows path string (e.g. `'C:\Users'` instead of the correct `r'C:\Users'` or 'C:\\Users'`) which is responsible for the error.; I was able to fix the error via inserting; ```python; import platform; if platform.system() == ""Windows"":; content = content.replace(""'C:"", ""r'C:"").replace('""C:', 'r""C:'); ```; directly before aforementioned exec command.; That's quite a quick-and-dirty fix and I think it should be solved somewhere in the method called in; https://github.com/psi4/psi4/blob/56738543906df86f94f2ee69b518d699b4a1ecd9/psi4/run_psi4.py#L315; though I don't know how/where exactly to avoid unwanted side effects. Here's the whole traceback:; ```; ---------------------------------------------------------------------------; QiskitNatureError Traceback (most recent call last); <ipython-input-8-4cd496b3ad7e> in <module>; ----> 1 res = ucc_gsc.solve(es_problem); 2 ; 3 print(res). ~\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\algorithms\ground_state_solvers\ground_state_eigensolver.py in solve(self, problem, aux_operators); 80 # note tha",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2228
https://github.com/psi4/psi4/issues/2228:1173,Availability,error,error,1173,"ripts\psi4-script.py"", line 336, in <module>; exec(content). File ""<string>"", line 31; SyntaxError: (unicode error) 'unicodeescape' codec can't decode bytes in position 2-3: truncated \UXXXXXXXX escape. Printing out the relevant lines from the Psithon --> Python processed input file:. !----------------------------------------------------------------------------------!; ! !; ! (unicode error) 'unicodeescape' codec can't decode bytes in position 2-3: !; ! truncated \UXXXXXXXX escape !; ! !; !----------------------------------------------------------------------------------!; ```; I could track down the error to be raised from here:; https://github.com/psi4/psi4/blob/56738543906df86f94f2ee69b518d699b4a1ecd9/psi4/run_psi4.py#L333; when trying to execute 'content'.; The 'content' variable contains single backslashes in the windows path string (e.g. `'C:\Users'` instead of the correct `r'C:\Users'` or 'C:\\Users'`) which is responsible for the error.; I was able to fix the error via inserting; ```python; import platform; if platform.system() == ""Windows"":; content = content.replace(""'C:"", ""r'C:"").replace('""C:', 'r""C:'); ```; directly before aforementioned exec command.; That's quite a quick-and-dirty fix and I think it should be solved somewhere in the method called in; https://github.com/psi4/psi4/blob/56738543906df86f94f2ee69b518d699b4a1ecd9/psi4/run_psi4.py#L315; though I don't know how/where exactly to avoid unwanted side effects. Here's the whole traceback:; ```; ---------------------------------------------------------------------------; QiskitNatureError Traceback (most recent call last); <ipython-input-8-4cd496b3ad7e> in <module>; ----> 1 res = ucc_gsc.solve(es_problem); 2 ; 3 print(res). ~\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\algorithms\ground_state_solvers\ground_state_eigensolver.py in solve(self, problem, aux_operators); 80 # note that ``aux_ops`` contains not only the transformed ``aux_operators`` passed by the; 81 # user but",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2228
https://github.com/psi4/psi4/issues/2228:2532,Availability,avail,available,2532,"94f2ee69b518d699b4a1ecd9/psi4/run_psi4.py#L315; though I don't know how/where exactly to avoid unwanted side effects. Here's the whole traceback:; ```; ---------------------------------------------------------------------------; QiskitNatureError Traceback (most recent call last); <ipython-input-8-4cd496b3ad7e> in <module>; ----> 1 res = ucc_gsc.solve(es_problem); 2 ; 3 print(res). ~\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\algorithms\ground_state_solvers\ground_state_eigensolver.py in solve(self, problem, aux_operators); 80 # note that ``aux_ops`` contains not only the transformed ``aux_operators`` passed by the; 81 # user but also additional ones from the transformation; ---> 82 second_q_ops = problem.second_q_ops(); 83 ; 84 main_operator = self._qubit_converter.convert(. ~\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\problems\second_quantization\electronic\electronic_structure_problem.py in second_q_ops(self); 62 operator, and (if available) x, y, z dipole operators.; 63 """"""; ---> 64 self._molecule_data = cast(QMolecule, self.driver.run()); 65 self._molecule_data_transformed = cast(QMolecule, self._transform(self._molecule_data)); 66 . ~\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\drivers\psi4d\psi4driver.py in run(self); 131 os.close(file_fd); 132 try:; --> 133 PSI4Driver._run_psi4(input_file, output_file); 134 if logger.isEnabledFor(logging.DEBUG):; 135 with open(output_file, 'r') as file:. ~\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\drivers\psi4d\psi4driver.py in _run_psi4(input_file, output_file); 186 logger.error(lines[i]); 187 errmsg += lines[i] + ""\n""; --> 188 raise QiskitNatureError('{} process return code {}\n{}'.format(; 189 PSI4, process.returncode, errmsg)). QiskitNatureError: 'psi4 process return code 1\nTraceback (most recent call last):\n File ""C:\\Users\\user\\Anaconda3\\envs\\qiskit-0-27-psi4-jupyter\\Scripts\\psi4-script.py"", line 3",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2228
https://github.com/psi4/psi4/issues/2228:3183,Availability,error,error,3183,"x_ops`` contains not only the transformed ``aux_operators`` passed by the; 81 # user but also additional ones from the transformation; ---> 82 second_q_ops = problem.second_q_ops(); 83 ; 84 main_operator = self._qubit_converter.convert(. ~\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\problems\second_quantization\electronic\electronic_structure_problem.py in second_q_ops(self); 62 operator, and (if available) x, y, z dipole operators.; 63 """"""; ---> 64 self._molecule_data = cast(QMolecule, self.driver.run()); 65 self._molecule_data_transformed = cast(QMolecule, self._transform(self._molecule_data)); 66 . ~\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\drivers\psi4d\psi4driver.py in run(self); 131 os.close(file_fd); 132 try:; --> 133 PSI4Driver._run_psi4(input_file, output_file); 134 if logger.isEnabledFor(logging.DEBUG):; 135 with open(output_file, 'r') as file:. ~\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\drivers\psi4d\psi4driver.py in _run_psi4(input_file, output_file); 186 logger.error(lines[i]); 187 errmsg += lines[i] + ""\n""; --> 188 raise QiskitNatureError('{} process return code {}\n{}'.format(; 189 PSI4, process.returncode, errmsg)). QiskitNatureError: 'psi4 process return code 1\nTraceback (most recent call last):\n File ""C:\\Users\\user\\Anaconda3\\envs\\qiskit-0-27-psi4-jupyter\\Scripts\\psi4-script.py"", line 336, in <module>\n exec(content)\n\n File ""<string>"", line 31\nSyntaxError: (unicode error) \'unicodeescape\' codec can\'t decode bytes in position 2-3: truncated \\UXXXXXXXX escape\n\nPrinting out the relevant lines from the Psithon --> Python processed input file:\n\n\n!----------------------------------------------------------------------------------!\n! !\n! (unicode error) \'unicodeescape\' codec can\'t decode bytes in position 2-3: !\n! truncated \\UXXXXXXXX escape !\n! !\n!----------------------------------------------------------------------------------!\n\n'; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2228
https://github.com/psi4/psi4/issues/2228:3611,Availability,error,error,3611,"x_ops`` contains not only the transformed ``aux_operators`` passed by the; 81 # user but also additional ones from the transformation; ---> 82 second_q_ops = problem.second_q_ops(); 83 ; 84 main_operator = self._qubit_converter.convert(. ~\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\problems\second_quantization\electronic\electronic_structure_problem.py in second_q_ops(self); 62 operator, and (if available) x, y, z dipole operators.; 63 """"""; ---> 64 self._molecule_data = cast(QMolecule, self.driver.run()); 65 self._molecule_data_transformed = cast(QMolecule, self._transform(self._molecule_data)); 66 . ~\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\drivers\psi4d\psi4driver.py in run(self); 131 os.close(file_fd); 132 try:; --> 133 PSI4Driver._run_psi4(input_file, output_file); 134 if logger.isEnabledFor(logging.DEBUG):; 135 with open(output_file, 'r') as file:. ~\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\drivers\psi4d\psi4driver.py in _run_psi4(input_file, output_file); 186 logger.error(lines[i]); 187 errmsg += lines[i] + ""\n""; --> 188 raise QiskitNatureError('{} process return code {}\n{}'.format(; 189 PSI4, process.returncode, errmsg)). QiskitNatureError: 'psi4 process return code 1\nTraceback (most recent call last):\n File ""C:\\Users\\user\\Anaconda3\\envs\\qiskit-0-27-psi4-jupyter\\Scripts\\psi4-script.py"", line 336, in <module>\n exec(content)\n\n File ""<string>"", line 31\nSyntaxError: (unicode error) \'unicodeescape\' codec can\'t decode bytes in position 2-3: truncated \\UXXXXXXXX escape\n\nPrinting out the relevant lines from the Psithon --> Python processed input file:\n\n\n!----------------------------------------------------------------------------------!\n! !\n! (unicode error) \'unicodeescape\' codec can\'t decode bytes in position 2-3: !\n! truncated \\UXXXXXXXX escape !\n! !\n!----------------------------------------------------------------------------------!\n\n'; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2228
https://github.com/psi4/psi4/issues/2228:3900,Availability,error,error,3900,"x_ops`` contains not only the transformed ``aux_operators`` passed by the; 81 # user but also additional ones from the transformation; ---> 82 second_q_ops = problem.second_q_ops(); 83 ; 84 main_operator = self._qubit_converter.convert(. ~\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\problems\second_quantization\electronic\electronic_structure_problem.py in second_q_ops(self); 62 operator, and (if available) x, y, z dipole operators.; 63 """"""; ---> 64 self._molecule_data = cast(QMolecule, self.driver.run()); 65 self._molecule_data_transformed = cast(QMolecule, self._transform(self._molecule_data)); 66 . ~\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\drivers\psi4d\psi4driver.py in run(self); 131 os.close(file_fd); 132 try:; --> 133 PSI4Driver._run_psi4(input_file, output_file); 134 if logger.isEnabledFor(logging.DEBUG):; 135 with open(output_file, 'r') as file:. ~\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\drivers\psi4d\psi4driver.py in _run_psi4(input_file, output_file); 186 logger.error(lines[i]); 187 errmsg += lines[i] + ""\n""; --> 188 raise QiskitNatureError('{} process return code {}\n{}'.format(; 189 PSI4, process.returncode, errmsg)). QiskitNatureError: 'psi4 process return code 1\nTraceback (most recent call last):\n File ""C:\\Users\\user\\Anaconda3\\envs\\qiskit-0-27-psi4-jupyter\\Scripts\\psi4-script.py"", line 336, in <module>\n exec(content)\n\n File ""<string>"", line 31\nSyntaxError: (unicode error) \'unicodeescape\' codec can\'t decode bytes in position 2-3: truncated \\UXXXXXXXX escape\n\nPrinting out the relevant lines from the Psithon --> Python processed input file:\n\n\n!----------------------------------------------------------------------------------!\n! !\n! (unicode error) \'unicodeescape\' codec can\'t decode bytes in position 2-3: !\n! truncated \\UXXXXXXXX escape !\n! !\n!----------------------------------------------------------------------------------!\n\n'; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2228
https://github.com/psi4/psi4/issues/2228:54,Deployability,install,installed,54,"When running psi4 under windows (version 1.4rc3.dev1, installed via conda) from within qiskit, the following error occurs:. ```; File ""C:\Users\user\Anaconda3\envs\qiskit-0-27-psi4-jupyter\Scripts\psi4-script.py"", line 336, in <module>; exec(content). File ""<string>"", line 31; SyntaxError: (unicode error) 'unicodeescape' codec can't decode bytes in position 2-3: truncated \UXXXXXXXX escape. Printing out the relevant lines from the Psithon --> Python processed input file:. !----------------------------------------------------------------------------------!; ! !; ! (unicode error) 'unicodeescape' codec can't decode bytes in position 2-3: !; ! truncated \UXXXXXXXX escape !; ! !; !----------------------------------------------------------------------------------!; ```; I could track down the error to be raised from here:; https://github.com/psi4/psi4/blob/56738543906df86f94f2ee69b518d699b4a1ecd9/psi4/run_psi4.py#L333; when trying to execute 'content'.; The 'content' variable contains single backslashes in the windows path string (e.g. `'C:\Users'` instead of the correct `r'C:\Users'` or 'C:\\Users'`) which is responsible for the error.; I was able to fix the error via inserting; ```python; import platform; if platform.system() == ""Windows"":; content = content.replace(""'C:"", ""r'C:"").replace('""C:', 'r""C:'); ```; directly before aforementioned exec command.; That's quite a quick-and-dirty fix and I think it should be solved somewhere in the method called in; https://github.com/psi4/psi4/blob/56738543906df86f94f2ee69b518d699b4a1ecd9/psi4/run_psi4.py#L315; though I don't know how/where exactly to avoid unwanted side effects. Here's the whole traceback:; ```; ---------------------------------------------------------------------------; QiskitNatureError Traceback (most recent call last); <ipython-input-8-4cd496b3ad7e> in <module>; ----> 1 res = ucc_gsc.solve(es_problem); 2 ; 3 print(res). ~\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\algorithms\groun",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2228
https://github.com/psi4/psi4/issues/2228:977,Modifiability,variab,variable,977,"en running psi4 under windows (version 1.4rc3.dev1, installed via conda) from within qiskit, the following error occurs:. ```; File ""C:\Users\user\Anaconda3\envs\qiskit-0-27-psi4-jupyter\Scripts\psi4-script.py"", line 336, in <module>; exec(content). File ""<string>"", line 31; SyntaxError: (unicode error) 'unicodeescape' codec can't decode bytes in position 2-3: truncated \UXXXXXXXX escape. Printing out the relevant lines from the Psithon --> Python processed input file:. !----------------------------------------------------------------------------------!; ! !; ! (unicode error) 'unicodeescape' codec can't decode bytes in position 2-3: !; ! truncated \UXXXXXXXX escape !; ! !; !----------------------------------------------------------------------------------!; ```; I could track down the error to be raised from here:; https://github.com/psi4/psi4/blob/56738543906df86f94f2ee69b518d699b4a1ecd9/psi4/run_psi4.py#L333; when trying to execute 'content'.; The 'content' variable contains single backslashes in the windows path string (e.g. `'C:\Users'` instead of the correct `r'C:\Users'` or 'C:\\Users'`) which is responsible for the error.; I was able to fix the error via inserting; ```python; import platform; if platform.system() == ""Windows"":; content = content.replace(""'C:"", ""r'C:"").replace('""C:', 'r""C:'); ```; directly before aforementioned exec command.; That's quite a quick-and-dirty fix and I think it should be solved somewhere in the method called in; https://github.com/psi4/psi4/blob/56738543906df86f94f2ee69b518d699b4a1ecd9/psi4/run_psi4.py#L315; though I don't know how/where exactly to avoid unwanted side effects. Here's the whole traceback:; ```; ---------------------------------------------------------------------------; QiskitNatureError Traceback (most recent call last); <ipython-input-8-4cd496b3ad7e> in <module>; ----> 1 res = ucc_gsc.solve(es_problem); 2 ; 3 print(res). ~\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\algorithms\ground_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2228
https://github.com/psi4/psi4/issues/2228:1615,Safety,avoid,avoid,1615,"dec can't decode bytes in position 2-3: !; ! truncated \UXXXXXXXX escape !; ! !; !----------------------------------------------------------------------------------!; ```; I could track down the error to be raised from here:; https://github.com/psi4/psi4/blob/56738543906df86f94f2ee69b518d699b4a1ecd9/psi4/run_psi4.py#L333; when trying to execute 'content'.; The 'content' variable contains single backslashes in the windows path string (e.g. `'C:\Users'` instead of the correct `r'C:\Users'` or 'C:\\Users'`) which is responsible for the error.; I was able to fix the error via inserting; ```python; import platform; if platform.system() == ""Windows"":; content = content.replace(""'C:"", ""r'C:"").replace('""C:', 'r""C:'); ```; directly before aforementioned exec command.; That's quite a quick-and-dirty fix and I think it should be solved somewhere in the method called in; https://github.com/psi4/psi4/blob/56738543906df86f94f2ee69b518d699b4a1ecd9/psi4/run_psi4.py#L315; though I don't know how/where exactly to avoid unwanted side effects. Here's the whole traceback:; ```; ---------------------------------------------------------------------------; QiskitNatureError Traceback (most recent call last); <ipython-input-8-4cd496b3ad7e> in <module>; ----> 1 res = ucc_gsc.solve(es_problem); 2 ; 3 print(res). ~\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\algorithms\ground_state_solvers\ground_state_eigensolver.py in solve(self, problem, aux_operators); 80 # note that ``aux_ops`` contains not only the transformed ``aux_operators`` passed by the; 81 # user but also additional ones from the transformation; ---> 82 second_q_ops = problem.second_q_ops(); 83 ; 84 main_operator = self._qubit_converter.convert(. ~\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\problems\second_quantization\electronic\electronic_structure_problem.py in second_q_ops(self); 62 operator, and (if available) x, y, z dipole operators.; 63 """"""; ---> 64 self._molecule_dat",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2228
https://github.com/psi4/psi4/issues/2228:2952,Testability,log,logger,2952,"-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\algorithms\ground_state_solvers\ground_state_eigensolver.py in solve(self, problem, aux_operators); 80 # note that ``aux_ops`` contains not only the transformed ``aux_operators`` passed by the; 81 # user but also additional ones from the transformation; ---> 82 second_q_ops = problem.second_q_ops(); 83 ; 84 main_operator = self._qubit_converter.convert(. ~\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\problems\second_quantization\electronic\electronic_structure_problem.py in second_q_ops(self); 62 operator, and (if available) x, y, z dipole operators.; 63 """"""; ---> 64 self._molecule_data = cast(QMolecule, self.driver.run()); 65 self._molecule_data_transformed = cast(QMolecule, self._transform(self._molecule_data)); 66 . ~\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\drivers\psi4d\psi4driver.py in run(self); 131 os.close(file_fd); 132 try:; --> 133 PSI4Driver._run_psi4(input_file, output_file); 134 if logger.isEnabledFor(logging.DEBUG):; 135 with open(output_file, 'r') as file:. ~\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\drivers\psi4d\psi4driver.py in _run_psi4(input_file, output_file); 186 logger.error(lines[i]); 187 errmsg += lines[i] + ""\n""; --> 188 raise QiskitNatureError('{} process return code {}\n{}'.format(; 189 PSI4, process.returncode, errmsg)). QiskitNatureError: 'psi4 process return code 1\nTraceback (most recent call last):\n File ""C:\\Users\\user\\Anaconda3\\envs\\qiskit-0-27-psi4-jupyter\\Scripts\\psi4-script.py"", line 336, in <module>\n exec(content)\n\n File ""<string>"", line 31\nSyntaxError: (unicode error) \'unicodeescape\' codec can\'t decode bytes in position 2-3: truncated \\UXXXXXXXX escape\n\nPrinting out the relevant lines from the Psithon --> Python processed input file:\n\n\n!----------------------------------------------------------------------------------!\n! !\n! (unicode error) \'unicodeescape\' codec can",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2228
https://github.com/psi4/psi4/issues/2228:2972,Testability,log,logging,2972,"s\qiskit_nature\algorithms\ground_state_solvers\ground_state_eigensolver.py in solve(self, problem, aux_operators); 80 # note that ``aux_ops`` contains not only the transformed ``aux_operators`` passed by the; 81 # user but also additional ones from the transformation; ---> 82 second_q_ops = problem.second_q_ops(); 83 ; 84 main_operator = self._qubit_converter.convert(. ~\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\problems\second_quantization\electronic\electronic_structure_problem.py in second_q_ops(self); 62 operator, and (if available) x, y, z dipole operators.; 63 """"""; ---> 64 self._molecule_data = cast(QMolecule, self.driver.run()); 65 self._molecule_data_transformed = cast(QMolecule, self._transform(self._molecule_data)); 66 . ~\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\drivers\psi4d\psi4driver.py in run(self); 131 os.close(file_fd); 132 try:; --> 133 PSI4Driver._run_psi4(input_file, output_file); 134 if logger.isEnabledFor(logging.DEBUG):; 135 with open(output_file, 'r') as file:. ~\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\drivers\psi4d\psi4driver.py in _run_psi4(input_file, output_file); 186 logger.error(lines[i]); 187 errmsg += lines[i] + ""\n""; --> 188 raise QiskitNatureError('{} process return code {}\n{}'.format(; 189 PSI4, process.returncode, errmsg)). QiskitNatureError: 'psi4 process return code 1\nTraceback (most recent call last):\n File ""C:\\Users\\user\\Anaconda3\\envs\\qiskit-0-27-psi4-jupyter\\Scripts\\psi4-script.py"", line 336, in <module>\n exec(content)\n\n File ""<string>"", line 31\nSyntaxError: (unicode error) \'unicodeescape\' codec can\'t decode bytes in position 2-3: truncated \\UXXXXXXXX escape\n\nPrinting out the relevant lines from the Psithon --> Python processed input file:\n\n\n!----------------------------------------------------------------------------------!\n! !\n! (unicode error) \'unicodeescape\' codec can\'t decode bytes in position 2-3: !\",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2228
https://github.com/psi4/psi4/issues/2228:3176,Testability,log,logger,3176,"x_ops`` contains not only the transformed ``aux_operators`` passed by the; 81 # user but also additional ones from the transformation; ---> 82 second_q_ops = problem.second_q_ops(); 83 ; 84 main_operator = self._qubit_converter.convert(. ~\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\problems\second_quantization\electronic\electronic_structure_problem.py in second_q_ops(self); 62 operator, and (if available) x, y, z dipole operators.; 63 """"""; ---> 64 self._molecule_data = cast(QMolecule, self.driver.run()); 65 self._molecule_data_transformed = cast(QMolecule, self._transform(self._molecule_data)); 66 . ~\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\drivers\psi4d\psi4driver.py in run(self); 131 os.close(file_fd); 132 try:; --> 133 PSI4Driver._run_psi4(input_file, output_file); 134 if logger.isEnabledFor(logging.DEBUG):; 135 with open(output_file, 'r') as file:. ~\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\drivers\psi4d\psi4driver.py in _run_psi4(input_file, output_file); 186 logger.error(lines[i]); 187 errmsg += lines[i] + ""\n""; --> 188 raise QiskitNatureError('{} process return code {}\n{}'.format(; 189 PSI4, process.returncode, errmsg)). QiskitNatureError: 'psi4 process return code 1\nTraceback (most recent call last):\n File ""C:\\Users\\user\\Anaconda3\\envs\\qiskit-0-27-psi4-jupyter\\Scripts\\psi4-script.py"", line 336, in <module>\n exec(content)\n\n File ""<string>"", line 31\nSyntaxError: (unicode error) \'unicodeescape\' codec can\'t decode bytes in position 2-3: truncated \\UXXXXXXXX escape\n\nPrinting out the relevant lines from the Psithon --> Python processed input file:\n\n\n!----------------------------------------------------------------------------------!\n! !\n! (unicode error) \'unicodeescape\' codec can\'t decode bytes in position 2-3: !\n! truncated \\UXXXXXXXX escape !\n! !\n!----------------------------------------------------------------------------------!\n\n'; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2228
https://github.com/psi4/psi4/issues/2228:376,Usability,UX,UXXXXXXXX,376,"When running psi4 under windows (version 1.4rc3.dev1, installed via conda) from within qiskit, the following error occurs:. ```; File ""C:\Users\user\Anaconda3\envs\qiskit-0-27-psi4-jupyter\Scripts\psi4-script.py"", line 336, in <module>; exec(content). File ""<string>"", line 31; SyntaxError: (unicode error) 'unicodeescape' codec can't decode bytes in position 2-3: truncated \UXXXXXXXX escape. Printing out the relevant lines from the Psithon --> Python processed input file:. !----------------------------------------------------------------------------------!; ! !; ! (unicode error) 'unicodeescape' codec can't decode bytes in position 2-3: !; ! truncated \UXXXXXXXX escape !; ! !; !----------------------------------------------------------------------------------!; ```; I could track down the error to be raised from here:; https://github.com/psi4/psi4/blob/56738543906df86f94f2ee69b518d699b4a1ecd9/psi4/run_psi4.py#L333; when trying to execute 'content'.; The 'content' variable contains single backslashes in the windows path string (e.g. `'C:\Users'` instead of the correct `r'C:\Users'` or 'C:\\Users'`) which is responsible for the error.; I was able to fix the error via inserting; ```python; import platform; if platform.system() == ""Windows"":; content = content.replace(""'C:"", ""r'C:"").replace('""C:', 'r""C:'); ```; directly before aforementioned exec command.; That's quite a quick-and-dirty fix and I think it should be solved somewhere in the method called in; https://github.com/psi4/psi4/blob/56738543906df86f94f2ee69b518d699b4a1ecd9/psi4/run_psi4.py#L315; though I don't know how/where exactly to avoid unwanted side effects. Here's the whole traceback:; ```; ---------------------------------------------------------------------------; QiskitNatureError Traceback (most recent call last); <ipython-input-8-4cd496b3ad7e> in <module>; ----> 1 res = ucc_gsc.solve(es_problem); 2 ; 3 print(res). ~\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\algorithms\groun",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2228
https://github.com/psi4/psi4/issues/2228:660,Usability,UX,UXXXXXXXX,660,"When running psi4 under windows (version 1.4rc3.dev1, installed via conda) from within qiskit, the following error occurs:. ```; File ""C:\Users\user\Anaconda3\envs\qiskit-0-27-psi4-jupyter\Scripts\psi4-script.py"", line 336, in <module>; exec(content). File ""<string>"", line 31; SyntaxError: (unicode error) 'unicodeescape' codec can't decode bytes in position 2-3: truncated \UXXXXXXXX escape. Printing out the relevant lines from the Psithon --> Python processed input file:. !----------------------------------------------------------------------------------!; ! !; ! (unicode error) 'unicodeescape' codec can't decode bytes in position 2-3: !; ! truncated \UXXXXXXXX escape !; ! !; !----------------------------------------------------------------------------------!; ```; I could track down the error to be raised from here:; https://github.com/psi4/psi4/blob/56738543906df86f94f2ee69b518d699b4a1ecd9/psi4/run_psi4.py#L333; when trying to execute 'content'.; The 'content' variable contains single backslashes in the windows path string (e.g. `'C:\Users'` instead of the correct `r'C:\Users'` or 'C:\\Users'`) which is responsible for the error.; I was able to fix the error via inserting; ```python; import platform; if platform.system() == ""Windows"":; content = content.replace(""'C:"", ""r'C:"").replace('""C:', 'r""C:'); ```; directly before aforementioned exec command.; That's quite a quick-and-dirty fix and I think it should be solved somewhere in the method called in; https://github.com/psi4/psi4/blob/56738543906df86f94f2ee69b518d699b4a1ecd9/psi4/run_psi4.py#L315; though I don't know how/where exactly to avoid unwanted side effects. Here's the whole traceback:; ```; ---------------------------------------------------------------------------; QiskitNatureError Traceback (most recent call last); <ipython-input-8-4cd496b3ad7e> in <module>; ----> 1 res = ucc_gsc.solve(es_problem); 2 ; 3 print(res). ~\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\algorithms\groun",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2228
https://github.com/psi4/psi4/issues/2228:3691,Usability,UX,UXXXXXXXX,3691,"x_ops`` contains not only the transformed ``aux_operators`` passed by the; 81 # user but also additional ones from the transformation; ---> 82 second_q_ops = problem.second_q_ops(); 83 ; 84 main_operator = self._qubit_converter.convert(. ~\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\problems\second_quantization\electronic\electronic_structure_problem.py in second_q_ops(self); 62 operator, and (if available) x, y, z dipole operators.; 63 """"""; ---> 64 self._molecule_data = cast(QMolecule, self.driver.run()); 65 self._molecule_data_transformed = cast(QMolecule, self._transform(self._molecule_data)); 66 . ~\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\drivers\psi4d\psi4driver.py in run(self); 131 os.close(file_fd); 132 try:; --> 133 PSI4Driver._run_psi4(input_file, output_file); 134 if logger.isEnabledFor(logging.DEBUG):; 135 with open(output_file, 'r') as file:. ~\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\drivers\psi4d\psi4driver.py in _run_psi4(input_file, output_file); 186 logger.error(lines[i]); 187 errmsg += lines[i] + ""\n""; --> 188 raise QiskitNatureError('{} process return code {}\n{}'.format(; 189 PSI4, process.returncode, errmsg)). QiskitNatureError: 'psi4 process return code 1\nTraceback (most recent call last):\n File ""C:\\Users\\user\\Anaconda3\\envs\\qiskit-0-27-psi4-jupyter\\Scripts\\psi4-script.py"", line 336, in <module>\n exec(content)\n\n File ""<string>"", line 31\nSyntaxError: (unicode error) \'unicodeescape\' codec can\'t decode bytes in position 2-3: truncated \\UXXXXXXXX escape\n\nPrinting out the relevant lines from the Psithon --> Python processed input file:\n\n\n!----------------------------------------------------------------------------------!\n! !\n! (unicode error) \'unicodeescape\' codec can\'t decode bytes in position 2-3: !\n! truncated \\UXXXXXXXX escape !\n! !\n!----------------------------------------------------------------------------------!\n\n'; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2228
https://github.com/psi4/psi4/issues/2228:3985,Usability,UX,UXXXXXXXX,3985,"x_ops`` contains not only the transformed ``aux_operators`` passed by the; 81 # user but also additional ones from the transformation; ---> 82 second_q_ops = problem.second_q_ops(); 83 ; 84 main_operator = self._qubit_converter.convert(. ~\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\problems\second_quantization\electronic\electronic_structure_problem.py in second_q_ops(self); 62 operator, and (if available) x, y, z dipole operators.; 63 """"""; ---> 64 self._molecule_data = cast(QMolecule, self.driver.run()); 65 self._molecule_data_transformed = cast(QMolecule, self._transform(self._molecule_data)); 66 . ~\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\drivers\psi4d\psi4driver.py in run(self); 131 os.close(file_fd); 132 try:; --> 133 PSI4Driver._run_psi4(input_file, output_file); 134 if logger.isEnabledFor(logging.DEBUG):; 135 with open(output_file, 'r') as file:. ~\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\qiskit_nature\drivers\psi4d\psi4driver.py in _run_psi4(input_file, output_file); 186 logger.error(lines[i]); 187 errmsg += lines[i] + ""\n""; --> 188 raise QiskitNatureError('{} process return code {}\n{}'.format(; 189 PSI4, process.returncode, errmsg)). QiskitNatureError: 'psi4 process return code 1\nTraceback (most recent call last):\n File ""C:\\Users\\user\\Anaconda3\\envs\\qiskit-0-27-psi4-jupyter\\Scripts\\psi4-script.py"", line 336, in <module>\n exec(content)\n\n File ""<string>"", line 31\nSyntaxError: (unicode error) \'unicodeescape\' codec can\'t decode bytes in position 2-3: truncated \\UXXXXXXXX escape\n\nPrinting out the relevant lines from the Psithon --> Python processed input file:\n\n\n!----------------------------------------------------------------------------------!\n! !\n! (unicode error) \'unicodeescape\' codec can\'t decode bytes in position 2-3: !\n! truncated \\UXXXXXXXX escape !\n! !\n!----------------------------------------------------------------------------------!\n\n'; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2228
https://github.com/psi4/psi4/pull/2229:88,Testability,test,test,88,"## Description; Moved old Molden writer to Python, fixed normalization issue, and added test cases. ## Todos. ## Questions. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2229
https://github.com/psi4/psi4/pull/2229:144,Testability,Test,Tests,144,"## Description; Moved old Molden writer to Python, fixed normalization issue, and added test cases. ## Todos. ## Questions. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2229
https://github.com/psi4/psi4/pull/2229:218,Testability,test,tests,218,"## Description; Moved old Molden writer to Python, fixed normalization issue, and added test cases. ## Todos. ## Questions. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2229
https://github.com/psi4/psi4/pull/2229:309,Testability,test,tests,309,"## Description; Moved old Molden writer to Python, fixed normalization issue, and added test cases. ## Todos. ## Questions. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2229
https://github.com/psi4/psi4/pull/2230:328,Testability,Test,Tests,328,## Description; <!-- Provide a brief description of the PR's purpose here. -->; Includes all the STO-nG basis sets from the Basis Set Exchange. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2230
https://github.com/psi4/psi4/pull/2230:402,Testability,test,tests,402,## Description; <!-- Provide a brief description of the PR's purpose here. -->; Includes all the STO-nG basis sets from the Basis Set Exchange. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2230
https://github.com/psi4/psi4/pull/2230:493,Testability,test,tests,493,## Description; <!-- Provide a brief description of the PR's purpose here. -->; Includes all the STO-nG basis sets from the Basis Set Exchange. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2230
https://github.com/psi4/psi4/issues/2231:457,Availability,error,errors,457,"The `dct` module does not seem to like linear dependencies. Example 1:; ```; molecule { ; o ; h 1 1.0 ; h 1 1.0 2 104.5; }. set {; basis 'aug-cc-pvtz'; s_tolerance 1e-3; }. energy('dct'); ```. The computation runs to completion and gives energies that are at least _plausible_. But the output file is littered with; ```; There was a problem correcting the MO phases.; If this does not converge, try ALGORITHM=TWOSTEP; ```; and `stderr` receives several MKL errors. Example 2:; ```; molecule { ; o ; h 1 1.0 ; h 1 1.0 2 104.5; }. set {; basis 'aug-cc-pvtz'; dct_type df; s_tolerance 1e-3; }. energy('dct'); ```. Using the DF code triggers a segfault. There may well be more examples I haven't found yet as I venture into other parts of the module. Either way, I'm going to be fixing this.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2231
https://github.com/psi4/psi4/issues/2231:173,Energy Efficiency,energy,energy,173,"The `dct` module does not seem to like linear dependencies. Example 1:; ```; molecule { ; o ; h 1 1.0 ; h 1 1.0 2 104.5; }. set {; basis 'aug-cc-pvtz'; s_tolerance 1e-3; }. energy('dct'); ```. The computation runs to completion and gives energies that are at least _plausible_. But the output file is littered with; ```; There was a problem correcting the MO phases.; If this does not converge, try ALGORITHM=TWOSTEP; ```; and `stderr` receives several MKL errors. Example 2:; ```; molecule { ; o ; h 1 1.0 ; h 1 1.0 2 104.5; }. set {; basis 'aug-cc-pvtz'; dct_type df; s_tolerance 1e-3; }. energy('dct'); ```. Using the DF code triggers a segfault. There may well be more examples I haven't found yet as I venture into other parts of the module. Either way, I'm going to be fixing this.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2231
https://github.com/psi4/psi4/issues/2231:591,Energy Efficiency,energy,energy,591,"The `dct` module does not seem to like linear dependencies. Example 1:; ```; molecule { ; o ; h 1 1.0 ; h 1 1.0 2 104.5; }. set {; basis 'aug-cc-pvtz'; s_tolerance 1e-3; }. energy('dct'); ```. The computation runs to completion and gives energies that are at least _plausible_. But the output file is littered with; ```; There was a problem correcting the MO phases.; If this does not converge, try ALGORITHM=TWOSTEP; ```; and `stderr` receives several MKL errors. Example 2:; ```; molecule { ; o ; h 1 1.0 ; h 1 1.0 2 104.5; }. set {; basis 'aug-cc-pvtz'; dct_type df; s_tolerance 1e-3; }. energy('dct'); ```. Using the DF code triggers a segfault. There may well be more examples I haven't found yet as I venture into other parts of the module. Either way, I'm going to be fixing this.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2231
https://github.com/psi4/psi4/issues/2231:46,Integrability,depend,dependencies,46,"The `dct` module does not seem to like linear dependencies. Example 1:; ```; molecule { ; o ; h 1 1.0 ; h 1 1.0 2 104.5; }. set {; basis 'aug-cc-pvtz'; s_tolerance 1e-3; }. energy('dct'); ```. The computation runs to completion and gives energies that are at least _plausible_. But the output file is littered with; ```; There was a problem correcting the MO phases.; If this does not converge, try ALGORITHM=TWOSTEP; ```; and `stderr` receives several MKL errors. Example 2:; ```; molecule { ; o ; h 1 1.0 ; h 1 1.0 2 104.5; }. set {; basis 'aug-cc-pvtz'; dct_type df; s_tolerance 1e-3; }. energy('dct'); ```. Using the DF code triggers a segfault. There may well be more examples I haven't found yet as I venture into other parts of the module. Either way, I'm going to be fixing this.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2231
https://github.com/psi4/psi4/pull/2232:60,Availability,error,errors,60,"## Description; This PR fixes Example 1 of #2231, some GEMM errors in the DCT module in the presence of linear dependencies. There's more debugging to do, but this is a perfectly good standalone bugfix. I also refactored the offending function. Less code duplication, less gratuitous pointers, and eliminated an offset. This PR is anodyne, so getting this in for 1.4 would be appreciated. ## Checklist; - [x] No tests to add? The old code completed successfully because there was a back-up algorithm when the one that was acting up errored out.; - [x] `ctest -R dct` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2232
https://github.com/psi4/psi4/pull/2232:532,Availability,error,errored,532,"## Description; This PR fixes Example 1 of #2231, some GEMM errors in the DCT module in the presence of linear dependencies. There's more debugging to do, but this is a perfectly good standalone bugfix. I also refactored the offending function. Less code duplication, less gratuitous pointers, and eliminated an offset. This PR is anodyne, so getting this in for 1.4 would be appreciated. ## Checklist; - [x] No tests to add? The old code completed successfully because there was a back-up algorithm when the one that was acting up errored out.; - [x] `ctest -R dct` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2232
https://github.com/psi4/psi4/pull/2232:111,Integrability,depend,dependencies,111,"## Description; This PR fixes Example 1 of #2231, some GEMM errors in the DCT module in the presence of linear dependencies. There's more debugging to do, but this is a perfectly good standalone bugfix. I also refactored the offending function. Less code duplication, less gratuitous pointers, and eliminated an offset. This PR is anodyne, so getting this in for 1.4 would be appreciated. ## Checklist; - [x] No tests to add? The old code completed successfully because there was a back-up algorithm when the one that was acting up errored out.; - [x] `ctest -R dct` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2232
https://github.com/psi4/psi4/pull/2232:210,Modifiability,refactor,refactored,210,"## Description; This PR fixes Example 1 of #2231, some GEMM errors in the DCT module in the presence of linear dependencies. There's more debugging to do, but this is a perfectly good standalone bugfix. I also refactored the offending function. Less code duplication, less gratuitous pointers, and eliminated an offset. This PR is anodyne, so getting this in for 1.4 would be appreciated. ## Checklist; - [x] No tests to add? The old code completed successfully because there was a back-up algorithm when the one that was acting up errored out.; - [x] `ctest -R dct` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2232
https://github.com/psi4/psi4/pull/2232:412,Testability,test,tests,412,"## Description; This PR fixes Example 1 of #2231, some GEMM errors in the DCT module in the presence of linear dependencies. There's more debugging to do, but this is a perfectly good standalone bugfix. I also refactored the offending function. Less code duplication, less gratuitous pointers, and eliminated an offset. This PR is anodyne, so getting this in for 1.4 would be appreciated. ## Checklist; - [x] No tests to add? The old code completed successfully because there was a back-up algorithm when the one that was acting up errored out.; - [x] `ctest -R dct` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2232
https://github.com/psi4/psi4/pull/2233:100,Integrability,depend,dependencies,100,"## Description; This fixes Example 2 of #2231. DF-DCT no longer segfaults in the presence of linear dependencies. Even with this merged in, #2231 should stay open until I've had a chance to do some more thorough testing of the module. This is, once again, a stand-alone bugfix. ## Questions; - [x] Test case added! ~~It would be good for me to write a test case for everything I check as part of #2231. Should this live in ctests or pytests? I'm not clear on test best practices at this point in Psi development, since we want to mover over to pytests eventually. Even then, _right now_ is a bad time to write the test since #2232 will change the reference output.~~. ## Checklist; - [x] `ctest -R dct` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2233
https://github.com/psi4/psi4/pull/2233:212,Testability,test,testing,212,"## Description; This fixes Example 2 of #2231. DF-DCT no longer segfaults in the presence of linear dependencies. Even with this merged in, #2231 should stay open until I've had a chance to do some more thorough testing of the module. This is, once again, a stand-alone bugfix. ## Questions; - [x] Test case added! ~~It would be good for me to write a test case for everything I check as part of #2231. Should this live in ctests or pytests? I'm not clear on test best practices at this point in Psi development, since we want to mover over to pytests eventually. Even then, _right now_ is a bad time to write the test since #2232 will change the reference output.~~. ## Checklist; - [x] `ctest -R dct` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2233
https://github.com/psi4/psi4/pull/2233:298,Testability,Test,Test,298,"## Description; This fixes Example 2 of #2231. DF-DCT no longer segfaults in the presence of linear dependencies. Even with this merged in, #2231 should stay open until I've had a chance to do some more thorough testing of the module. This is, once again, a stand-alone bugfix. ## Questions; - [x] Test case added! ~~It would be good for me to write a test case for everything I check as part of #2231. Should this live in ctests or pytests? I'm not clear on test best practices at this point in Psi development, since we want to mover over to pytests eventually. Even then, _right now_ is a bad time to write the test since #2232 will change the reference output.~~. ## Checklist; - [x] `ctest -R dct` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2233
https://github.com/psi4/psi4/pull/2233:352,Testability,test,test,352,"## Description; This fixes Example 2 of #2231. DF-DCT no longer segfaults in the presence of linear dependencies. Even with this merged in, #2231 should stay open until I've had a chance to do some more thorough testing of the module. This is, once again, a stand-alone bugfix. ## Questions; - [x] Test case added! ~~It would be good for me to write a test case for everything I check as part of #2231. Should this live in ctests or pytests? I'm not clear on test best practices at this point in Psi development, since we want to mover over to pytests eventually. Even then, _right now_ is a bad time to write the test since #2232 will change the reference output.~~. ## Checklist; - [x] `ctest -R dct` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2233
https://github.com/psi4/psi4/pull/2233:459,Testability,test,test,459,"## Description; This fixes Example 2 of #2231. DF-DCT no longer segfaults in the presence of linear dependencies. Even with this merged in, #2231 should stay open until I've had a chance to do some more thorough testing of the module. This is, once again, a stand-alone bugfix. ## Questions; - [x] Test case added! ~~It would be good for me to write a test case for everything I check as part of #2231. Should this live in ctests or pytests? I'm not clear on test best practices at this point in Psi development, since we want to mover over to pytests eventually. Even then, _right now_ is a bad time to write the test since #2232 will change the reference output.~~. ## Checklist; - [x] `ctest -R dct` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2233
https://github.com/psi4/psi4/pull/2233:614,Testability,test,test,614,"## Description; This fixes Example 2 of #2231. DF-DCT no longer segfaults in the presence of linear dependencies. Even with this merged in, #2231 should stay open until I've had a chance to do some more thorough testing of the module. This is, once again, a stand-alone bugfix. ## Questions; - [x] Test case added! ~~It would be good for me to write a test case for everything I check as part of #2231. Should this live in ctests or pytests? I'm not clear on test best practices at this point in Psi development, since we want to mover over to pytests eventually. Even then, _right now_ is a bad time to write the test since #2232 will change the reference output.~~. ## Checklist; - [x] `ctest -R dct` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2233
https://github.com/psi4/psi4/pull/2233:450,Usability,clear,clear,450,"## Description; This fixes Example 2 of #2231. DF-DCT no longer segfaults in the presence of linear dependencies. Even with this merged in, #2231 should stay open until I've had a chance to do some more thorough testing of the module. This is, once again, a stand-alone bugfix. ## Questions; - [x] Test case added! ~~It would be good for me to write a test case for everything I check as part of #2231. Should this live in ctests or pytests? I'm not clear on test best practices at this point in Psi development, since we want to mover over to pytests eventually. Even then, _right now_ is a bad time to write the test since #2232 will change the reference output.~~. ## Checklist; - [x] `ctest -R dct` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2233
https://github.com/psi4/psi4/issues/2234:63,Availability,failure,failures,63,"While running the tests for #2230, I encountered the following failures; - large-atoms is trying to run analytical ECP gradietns; - min-atoms fails in `KeyError: 'psi4.core.variable: Requested variable CURRENT ENERGY was not set!\n'`; - pywrap-freq-e-sowreap fails in `NameError: name 'get_frequencies' is not defined`; - pywrap-freq-g-sowreap fails in `NameError: name 'get_frequencies' is not defined`",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2234
https://github.com/psi4/psi4/issues/2234:210,Energy Efficiency,ENERGY,ENERGY,210,"While running the tests for #2230, I encountered the following failures; - large-atoms is trying to run analytical ECP gradietns; - min-atoms fails in `KeyError: 'psi4.core.variable: Requested variable CURRENT ENERGY was not set!\n'`; - pywrap-freq-e-sowreap fails in `NameError: name 'get_frequencies' is not defined`; - pywrap-freq-g-sowreap fails in `NameError: name 'get_frequencies' is not defined`",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2234
https://github.com/psi4/psi4/issues/2234:173,Modifiability,variab,variable,173,"While running the tests for #2230, I encountered the following failures; - large-atoms is trying to run analytical ECP gradietns; - min-atoms fails in `KeyError: 'psi4.core.variable: Requested variable CURRENT ENERGY was not set!\n'`; - pywrap-freq-e-sowreap fails in `NameError: name 'get_frequencies' is not defined`; - pywrap-freq-g-sowreap fails in `NameError: name 'get_frequencies' is not defined`",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2234
https://github.com/psi4/psi4/issues/2234:193,Modifiability,variab,variable,193,"While running the tests for #2230, I encountered the following failures; - large-atoms is trying to run analytical ECP gradietns; - min-atoms fails in `KeyError: 'psi4.core.variable: Requested variable CURRENT ENERGY was not set!\n'`; - pywrap-freq-e-sowreap fails in `NameError: name 'get_frequencies' is not defined`; - pywrap-freq-g-sowreap fails in `NameError: name 'get_frequencies' is not defined`",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2234
https://github.com/psi4/psi4/issues/2234:18,Testability,test,tests,18,"While running the tests for #2230, I encountered the following failures; - large-atoms is trying to run analytical ECP gradietns; - min-atoms fails in `KeyError: 'psi4.core.variable: Requested variable CURRENT ENERGY was not set!\n'`; - pywrap-freq-e-sowreap fails in `NameError: name 'get_frequencies' is not defined`; - pywrap-freq-g-sowreap fails in `NameError: name 'get_frequencies' is not defined`",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2234
https://github.com/psi4/psi4/issues/2235:588,Availability,Ping,Pinging,588,"There have been reports of troubled SCF optimizations from within @fevangelista's group. As an attempt to put these to rest, I'll be implementing [EDIIS](https://aip.scitation.org/doi/pdf/10.1063/1.1470195) and making DIIS + EDIIS the default. DIIS + EDIIS is a standard SCF convergence technique, used to great effect by a certain code I'm not going to name. Welcome to 2021, Psi4. Due to potential merge conflicts with #2225, that PR should come in first. Because [this week is the target for 1.4](https://github.com/psi4/psi4/pull/2154#issuecomment-870728272), this is slated for 1.5. Pinging @jturney and @susilehtola as other interested parties.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2235
https://github.com/psi4/psi4/issues/2235:40,Performance,optimiz,optimizations,40,"There have been reports of troubled SCF optimizations from within @fevangelista's group. As an attempt to put these to rest, I'll be implementing [EDIIS](https://aip.scitation.org/doi/pdf/10.1063/1.1470195) and making DIIS + EDIIS the default. DIIS + EDIIS is a standard SCF convergence technique, used to great effect by a certain code I'm not going to name. Welcome to 2021, Psi4. Due to potential merge conflicts with #2225, that PR should come in first. Because [this week is the target for 1.4](https://github.com/psi4/psi4/pull/2154#issuecomment-870728272), this is slated for 1.5. Pinging @jturney and @susilehtola as other interested parties.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2235
https://github.com/psi4/psi4/issues/2236:18,Availability,down,downloaded,18,"OS: Windows 10. I downloaded the psi4 installation executable and ran the commands from the manual as described. >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. psi4 is unrecognizable after installation, but I added the directory to my path. . rerunning psi4 -- test gives following error:. `C:\Users\erikc>psi4 --test; Traceback (most recent call last):; File ""C:\Users\erikc\psi4conda\lib\site-packages\psi4\__init__.py"", line 55, in <module>; from . import core; ImportError: DLL load failed while importing core: The specified module could not be found. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""C:\Users\erikc\psi4conda\Scripts\psi4-script.py"", line 182, in <module>; import psi4 # isort:skip; File ""C:\Users\erikc\psi4conda\lib\site-packages\psi4\__init__.py"", line 60, in <module>; raise ImportError(""{0}"".format(err)); ImportError: DLL load failed while importing core: The specified module could not be found.`",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236
https://github.com/psi4/psi4/issues/2236:386,Availability,error,error,386,"OS: Windows 10. I downloaded the psi4 installation executable and ran the commands from the manual as described. >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. psi4 is unrecognizable after installation, but I added the directory to my path. . rerunning psi4 -- test gives following error:. `C:\Users\erikc>psi4 --test; Traceback (most recent call last):; File ""C:\Users\erikc\psi4conda\lib\site-packages\psi4\__init__.py"", line 55, in <module>; from . import core; ImportError: DLL load failed while importing core: The specified module could not be found. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""C:\Users\erikc\psi4conda\Scripts\psi4-script.py"", line 182, in <module>; import psi4 # isort:skip; File ""C:\Users\erikc\psi4conda\lib\site-packages\psi4\__init__.py"", line 60, in <module>; raise ImportError(""{0}"".format(err)); ImportError: DLL load failed while importing core: The specified module could not be found.`",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236
https://github.com/psi4/psi4/issues/2236:38,Deployability,install,installation,38,"OS: Windows 10. I downloaded the psi4 installation executable and ran the commands from the manual as described. >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. psi4 is unrecognizable after installation, but I added the directory to my path. . rerunning psi4 -- test gives following error:. `C:\Users\erikc>psi4 --test; Traceback (most recent call last):; File ""C:\Users\erikc\psi4conda\lib\site-packages\psi4\__init__.py"", line 55, in <module>; from . import core; ImportError: DLL load failed while importing core: The specified module could not be found. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""C:\Users\erikc\psi4conda\Scripts\psi4-script.py"", line 182, in <module>; import psi4 # isort:skip; File ""C:\Users\erikc\psi4conda\lib\site-packages\psi4\__init__.py"", line 60, in <module>; raise ImportError(""{0}"".format(err)); ImportError: DLL load failed while importing core: The specified module could not be found.`",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236
https://github.com/psi4/psi4/issues/2236:174,Deployability,Install,InstallationType,174,"OS: Windows 10. I downloaded the psi4 installation executable and ran the commands from the manual as described. >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. psi4 is unrecognizable after installation, but I added the directory to my path. . rerunning psi4 -- test gives following error:. `C:\Users\erikc>psi4 --test; Traceback (most recent call last):; File ""C:\Users\erikc\psi4conda\lib\site-packages\psi4\__init__.py"", line 55, in <module>; from . import core; ImportError: DLL load failed while importing core: The specified module could not be found. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""C:\Users\erikc\psi4conda\Scripts\psi4-script.py"", line 182, in <module>; import psi4 # isort:skip; File ""C:\Users\erikc\psi4conda\lib\site-packages\psi4\__init__.py"", line 60, in <module>; raise ImportError(""{0}"".format(err)); ImportError: DLL load failed while importing core: The specified module could not be found.`",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236
https://github.com/psi4/psi4/issues/2236:293,Deployability,install,installation,293,"OS: Windows 10. I downloaded the psi4 installation executable and ran the commands from the manual as described. >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. psi4 is unrecognizable after installation, but I added the directory to my path. . rerunning psi4 -- test gives following error:. `C:\Users\erikc>psi4 --test; Traceback (most recent call last):; File ""C:\Users\erikc\psi4conda\lib\site-packages\psi4\__init__.py"", line 55, in <module>; from . import core; ImportError: DLL load failed while importing core: The specified module could not be found. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""C:\Users\erikc\psi4conda\Scripts\psi4-script.py"", line 182, in <module>; import psi4 # isort:skip; File ""C:\Users\erikc\psi4conda\lib\site-packages\psi4\__init__.py"", line 60, in <module>; raise ImportError(""{0}"".format(err)); ImportError: DLL load failed while importing core: The specified module could not be found.`",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236
https://github.com/psi4/psi4/issues/2236:586,Performance,load,load,586,"OS: Windows 10. I downloaded the psi4 installation executable and ran the commands from the manual as described. >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. psi4 is unrecognizable after installation, but I added the directory to my path. . rerunning psi4 -- test gives following error:. `C:\Users\erikc>psi4 --test; Traceback (most recent call last):; File ""C:\Users\erikc\psi4conda\lib\site-packages\psi4\__init__.py"", line 55, in <module>; from . import core; ImportError: DLL load failed while importing core: The specified module could not be found. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""C:\Users\erikc\psi4conda\Scripts\psi4-script.py"", line 182, in <module>; import psi4 # isort:skip; File ""C:\Users\erikc\psi4conda\lib\site-packages\psi4\__init__.py"", line 60, in <module>; raise ImportError(""{0}"".format(err)); ImportError: DLL load failed while importing core: The specified module could not be found.`",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236
https://github.com/psi4/psi4/issues/2236:1016,Performance,load,load,1016,"OS: Windows 10. I downloaded the psi4 installation executable and ran the commands from the manual as described. >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. psi4 is unrecognizable after installation, but I added the directory to my path. . rerunning psi4 -- test gives following error:. `C:\Users\erikc>psi4 --test; Traceback (most recent call last):; File ""C:\Users\erikc\psi4conda\lib\site-packages\psi4\__init__.py"", line 55, in <module>; from . import core; ImportError: DLL load failed while importing core: The specified module could not be found. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""C:\Users\erikc\psi4conda\Scripts\psi4-script.py"", line 182, in <module>; import psi4 # isort:skip; File ""C:\Users\erikc\psi4conda\lib\site-packages\psi4\__init__.py"", line 60, in <module>; raise ImportError(""{0}"".format(err)); ImportError: DLL load failed while importing core: The specified module could not be found.`",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236
https://github.com/psi4/psi4/issues/2236:258,Testability,test,test,258,"OS: Windows 10. I downloaded the psi4 installation executable and ran the commands from the manual as described. >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. psi4 is unrecognizable after installation, but I added the directory to my path. . rerunning psi4 -- test gives following error:. `C:\Users\erikc>psi4 --test; Traceback (most recent call last):; File ""C:\Users\erikc\psi4conda\lib\site-packages\psi4\__init__.py"", line 55, in <module>; from . import core; ImportError: DLL load failed while importing core: The specified module could not be found. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""C:\Users\erikc\psi4conda\Scripts\psi4-script.py"", line 182, in <module>; import psi4 # isort:skip; File ""C:\Users\erikc\psi4conda\lib\site-packages\psi4\__init__.py"", line 60, in <module>; raise ImportError(""{0}"".format(err)); ImportError: DLL load failed while importing core: The specified module could not be found.`",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236
https://github.com/psi4/psi4/issues/2236:365,Testability,test,test,365,"OS: Windows 10. I downloaded the psi4 installation executable and ran the commands from the manual as described. >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. psi4 is unrecognizable after installation, but I added the directory to my path. . rerunning psi4 -- test gives following error:. `C:\Users\erikc>psi4 --test; Traceback (most recent call last):; File ""C:\Users\erikc\psi4conda\lib\site-packages\psi4\__init__.py"", line 55, in <module>; from . import core; ImportError: DLL load failed while importing core: The specified module could not be found. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""C:\Users\erikc\psi4conda\Scripts\psi4-script.py"", line 182, in <module>; import psi4 # isort:skip; File ""C:\Users\erikc\psi4conda\lib\site-packages\psi4\__init__.py"", line 60, in <module>; raise ImportError(""{0}"".format(err)); ImportError: DLL load failed while importing core: The specified module could not be found.`",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236
https://github.com/psi4/psi4/issues/2236:417,Testability,test,test,417,"OS: Windows 10. I downloaded the psi4 installation executable and ran the commands from the manual as described. >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. psi4 is unrecognizable after installation, but I added the directory to my path. . rerunning psi4 -- test gives following error:. `C:\Users\erikc>psi4 --test; Traceback (most recent call last):; File ""C:\Users\erikc\psi4conda\lib\site-packages\psi4\__init__.py"", line 55, in <module>; from . import core; ImportError: DLL load failed while importing core: The specified module could not be found. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""C:\Users\erikc\psi4conda\Scripts\psi4-script.py"", line 182, in <module>; import psi4 # isort:skip; File ""C:\Users\erikc\psi4conda\lib\site-packages\psi4\__init__.py"", line 60, in <module>; raise ImportError(""{0}"".format(err)); ImportError: DLL load failed while importing core: The specified module could not be found.`",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2236
https://github.com/psi4/psi4/pull/2237:405,Testability,Test,Tests,405,## Description; <!-- Provide a brief description of the PR's purpose here. -->; Looks like there was a mistake in the added note on damping in #2225 that wasn't caught by the CI; this PR rectifies the referenced keyword. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2237
https://github.com/psi4/psi4/pull/2237:479,Testability,test,tests,479,## Description; <!-- Provide a brief description of the PR's purpose here. -->; Looks like there was a mistake in the added note on damping in #2225 that wasn't caught by the CI; this PR rectifies the referenced keyword. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2237
https://github.com/psi4/psi4/pull/2237:570,Testability,test,tests,570,## Description; <!-- Provide a brief description of the PR's purpose here. -->; Looks like there was a mistake in the added note on damping in #2225 that wasn't caught by the CI; this PR rectifies the referenced keyword. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2237
https://github.com/psi4/psi4/issues/2238:438,Energy Efficiency,energy,energy,438,"Hi,; I am using the psi4/label/dev build from anaconda, and I noticed that the molden file produced by the following snippet does not write the [7F] line indicating spherical harmonic F-type basis functions to the molden file. [5D] and [9G] are there, so I'm assuming this isn't intentional. ```; import psi4. mol = psi4.geometry(""""""; N 0.0000000000 0.0000000000 0.548756750; N 0.0000000000 0.0000000000 -0.548756750; """"""). E, wfn = psi4.energy('scf/aug-cc-pvtz', return_wfn=True); psi4.molden(wfn, 'n2.molden'); ```; I'm not sure if this has been fixed elsewhere, but I didn't find it reported on here so I thought I would share. I have attached the molden file as well. [n2.molden.txt](https://github.com/psi4/psi4/files/6773734/n2.molden.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2238
https://github.com/psi4/psi4/issues/2239:411,Deployability,install,install,411,"Hi,. we were recently reviving a PSI4 plugin that was used with an older version of PSI4. Now, we wanted to adapt it to the current development version and realized that the AOIntegralsIterator is hidden (?) in the library. Our fix was to add PSI_API to the class definition in `src/psi4/libmints/integral.h` . . However, for us, it would be easier if it would be accessible by default (mainly to use the conda install and avoid compilation every time). Is there a specific reason, why that class is excluded or hidden in the library? If no, we would be very grateful, if a developer would add it to the header file. . Thank you!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2239
https://github.com/psi4/psi4/issues/2239:108,Energy Efficiency,adapt,adapt,108,"Hi,. we were recently reviving a PSI4 plugin that was used with an older version of PSI4. Now, we wanted to adapt it to the current development version and realized that the AOIntegralsIterator is hidden (?) in the library. Our fix was to add PSI_API to the class definition in `src/psi4/libmints/integral.h` . . However, for us, it would be easier if it would be accessible by default (mainly to use the conda install and avoid compilation every time). Is there a specific reason, why that class is excluded or hidden in the library? If no, we would be very grateful, if a developer would add it to the header file. . Thank you!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2239
https://github.com/psi4/psi4/issues/2239:38,Modifiability,plugin,plugin,38,"Hi,. we were recently reviving a PSI4 plugin that was used with an older version of PSI4. Now, we wanted to adapt it to the current development version and realized that the AOIntegralsIterator is hidden (?) in the library. Our fix was to add PSI_API to the class definition in `src/psi4/libmints/integral.h` . . However, for us, it would be easier if it would be accessible by default (mainly to use the conda install and avoid compilation every time). Is there a specific reason, why that class is excluded or hidden in the library? If no, we would be very grateful, if a developer would add it to the header file. . Thank you!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2239
https://github.com/psi4/psi4/issues/2239:108,Modifiability,adapt,adapt,108,"Hi,. we were recently reviving a PSI4 plugin that was used with an older version of PSI4. Now, we wanted to adapt it to the current development version and realized that the AOIntegralsIterator is hidden (?) in the library. Our fix was to add PSI_API to the class definition in `src/psi4/libmints/integral.h` . . However, for us, it would be easier if it would be accessible by default (mainly to use the conda install and avoid compilation every time). Is there a specific reason, why that class is excluded or hidden in the library? If no, we would be very grateful, if a developer would add it to the header file. . Thank you!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2239
https://github.com/psi4/psi4/issues/2239:423,Safety,avoid,avoid,423,"Hi,. we were recently reviving a PSI4 plugin that was used with an older version of PSI4. Now, we wanted to adapt it to the current development version and realized that the AOIntegralsIterator is hidden (?) in the library. Our fix was to add PSI_API to the class definition in `src/psi4/libmints/integral.h` . . However, for us, it would be easier if it would be accessible by default (mainly to use the conda install and avoid compilation every time). Is there a specific reason, why that class is excluded or hidden in the library? If no, we would be very grateful, if a developer would add it to the header file. . Thank you!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2239
https://github.com/psi4/psi4/issues/2239:364,Security,access,accessible,364,"Hi,. we were recently reviving a PSI4 plugin that was used with an older version of PSI4. Now, we wanted to adapt it to the current development version and realized that the AOIntegralsIterator is hidden (?) in the library. Our fix was to add PSI_API to the class definition in `src/psi4/libmints/integral.h` . . However, for us, it would be easier if it would be accessible by default (mainly to use the conda install and avoid compilation every time). Is there a specific reason, why that class is excluded or hidden in the library? If no, we would be very grateful, if a developer would add it to the header file. . Thank you!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2239
https://github.com/psi4/psi4/pull/2241:202,Testability,Test,Tests,202,"## Description; Wavefunction wasn't returning correct energies for this method. Also, reconsolidating method name from `ccsd(at)` to `a-ccsd(t)`. This is the same as Lambda-ccsd(t). ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2241
https://github.com/psi4/psi4/pull/2241:276,Testability,test,tests,276,"## Description; Wavefunction wasn't returning correct energies for this method. Also, reconsolidating method name from `ccsd(at)` to `a-ccsd(t)`. This is the same as Lambda-ccsd(t). ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2241
https://github.com/psi4/psi4/pull/2241:367,Testability,test,tests,367,"## Description; Wavefunction wasn't returning correct energies for this method. Also, reconsolidating method name from `ccsd(at)` to `a-ccsd(t)`. This is the same as Lambda-ccsd(t). ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2241
https://github.com/psi4/psi4/issues/2242:1356,Availability,error,error,1356,"Using 080dba6, this input, which doesn't produce any wavefunction data,; ```python; import json. import numpy as np. import psi4; import qcelemental as qcel. bohr2ang = qcel.constants.bohr2angstroms. geometry = (; np.asarray(; [; 0.0,; 0.0,; -0.1294769411935893,; 0.0,; -1.494187339479985,; 1.0274465079245698,; 0.0,; 1.494187339479985,; 1.0274465079245698,; ]; ); / bohr2ang; ). json_input = {; ""schema_name"": ""qc_schema_input"",; ""schema_version"": 1,; ""molecule"": {; ""geometry"": geometry.tolist(),; ""symbols"": [""O"", ""H"", ""H""],; },; ""driver"": ""gradient"",; ""model"": {""method"": ""ccsd"", ""basis"": ""def2-tzvp""},; ""keywords"": {""scf_type"": ""direct"", ""df_scf_guess"": ""false""},; }. ret = psi4.schema_wrapper.run_qcschema(json_input). stub = ""water_ccsd_gradient_psi4""; with open(f""{stub}.qcschema.out"", ""w"") as handle:; handle.write(ret.json()); ```; validated with `qcschema.validate` produces; ```; Traceback (most recent call last):; File ""./qcschema_validate.py"", line 17, in <module>; qcschema.validate(data=json.loads(p.read_text()), schema_type=args.schema_type); File ""/home/eric/development/json/MolSSI_QC_JSON_Schema/qcschema/validate.py"", line 16, in validate; jsonschema.validate(data, schema); File ""/home/eric/.pyenv/versions/miniconda3-4.7.12/envs/cclib_berquist_37/lib/python3.7/site-packages/jsonschema/validators.py"", line 934, in validate; raise error; jsonschema.exceptions.ValidationError: None is not of type 'object'. Failed validating 'type' in schema['properties']['wavefunction']:; ...; On instance['wavefunction']:; None; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2242
https://github.com/psi4/psi4/issues/2242:1009,Performance,load,loads,1009,"Using 080dba6, this input, which doesn't produce any wavefunction data,; ```python; import json. import numpy as np. import psi4; import qcelemental as qcel. bohr2ang = qcel.constants.bohr2angstroms. geometry = (; np.asarray(; [; 0.0,; 0.0,; -0.1294769411935893,; 0.0,; -1.494187339479985,; 1.0274465079245698,; 0.0,; 1.494187339479985,; 1.0274465079245698,; ]; ); / bohr2ang; ). json_input = {; ""schema_name"": ""qc_schema_input"",; ""schema_version"": 1,; ""molecule"": {; ""geometry"": geometry.tolist(),; ""symbols"": [""O"", ""H"", ""H""],; },; ""driver"": ""gradient"",; ""model"": {""method"": ""ccsd"", ""basis"": ""def2-tzvp""},; ""keywords"": {""scf_type"": ""direct"", ""df_scf_guess"": ""false""},; }. ret = psi4.schema_wrapper.run_qcschema(json_input). stub = ""water_ccsd_gradient_psi4""; with open(f""{stub}.qcschema.out"", ""w"") as handle:; handle.write(ret.json()); ```; validated with `qcschema.validate` produces; ```; Traceback (most recent call last):; File ""./qcschema_validate.py"", line 17, in <module>; qcschema.validate(data=json.loads(p.read_text()), schema_type=args.schema_type); File ""/home/eric/development/json/MolSSI_QC_JSON_Schema/qcschema/validate.py"", line 16, in validate; jsonschema.validate(data, schema); File ""/home/eric/.pyenv/versions/miniconda3-4.7.12/envs/cclib_berquist_37/lib/python3.7/site-packages/jsonschema/validators.py"", line 934, in validate; raise error; jsonschema.exceptions.ValidationError: None is not of type 'object'. Failed validating 'type' in schema['properties']['wavefunction']:; ...; On instance['wavefunction']:; None; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2242
https://github.com/psi4/psi4/issues/2242:842,Security,validat,validated,842,"Using 080dba6, this input, which doesn't produce any wavefunction data,; ```python; import json. import numpy as np. import psi4; import qcelemental as qcel. bohr2ang = qcel.constants.bohr2angstroms. geometry = (; np.asarray(; [; 0.0,; 0.0,; -0.1294769411935893,; 0.0,; -1.494187339479985,; 1.0274465079245698,; 0.0,; 1.494187339479985,; 1.0274465079245698,; ]; ); / bohr2ang; ). json_input = {; ""schema_name"": ""qc_schema_input"",; ""schema_version"": 1,; ""molecule"": {; ""geometry"": geometry.tolist(),; ""symbols"": [""O"", ""H"", ""H""],; },; ""driver"": ""gradient"",; ""model"": {""method"": ""ccsd"", ""basis"": ""def2-tzvp""},; ""keywords"": {""scf_type"": ""direct"", ""df_scf_guess"": ""false""},; }. ret = psi4.schema_wrapper.run_qcschema(json_input). stub = ""water_ccsd_gradient_psi4""; with open(f""{stub}.qcschema.out"", ""w"") as handle:; handle.write(ret.json()); ```; validated with `qcschema.validate` produces; ```; Traceback (most recent call last):; File ""./qcschema_validate.py"", line 17, in <module>; qcschema.validate(data=json.loads(p.read_text()), schema_type=args.schema_type); File ""/home/eric/development/json/MolSSI_QC_JSON_Schema/qcschema/validate.py"", line 16, in validate; jsonschema.validate(data, schema); File ""/home/eric/.pyenv/versions/miniconda3-4.7.12/envs/cclib_berquist_37/lib/python3.7/site-packages/jsonschema/validators.py"", line 934, in validate; raise error; jsonschema.exceptions.ValidationError: None is not of type 'object'. Failed validating 'type' in schema['properties']['wavefunction']:; ...; On instance['wavefunction']:; None; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2242
https://github.com/psi4/psi4/issues/2242:867,Security,validat,validate,867,"Using 080dba6, this input, which doesn't produce any wavefunction data,; ```python; import json. import numpy as np. import psi4; import qcelemental as qcel. bohr2ang = qcel.constants.bohr2angstroms. geometry = (; np.asarray(; [; 0.0,; 0.0,; -0.1294769411935893,; 0.0,; -1.494187339479985,; 1.0274465079245698,; 0.0,; 1.494187339479985,; 1.0274465079245698,; ]; ); / bohr2ang; ). json_input = {; ""schema_name"": ""qc_schema_input"",; ""schema_version"": 1,; ""molecule"": {; ""geometry"": geometry.tolist(),; ""symbols"": [""O"", ""H"", ""H""],; },; ""driver"": ""gradient"",; ""model"": {""method"": ""ccsd"", ""basis"": ""def2-tzvp""},; ""keywords"": {""scf_type"": ""direct"", ""df_scf_guess"": ""false""},; }. ret = psi4.schema_wrapper.run_qcschema(json_input). stub = ""water_ccsd_gradient_psi4""; with open(f""{stub}.qcschema.out"", ""w"") as handle:; handle.write(ret.json()); ```; validated with `qcschema.validate` produces; ```; Traceback (most recent call last):; File ""./qcschema_validate.py"", line 17, in <module>; qcschema.validate(data=json.loads(p.read_text()), schema_type=args.schema_type); File ""/home/eric/development/json/MolSSI_QC_JSON_Schema/qcschema/validate.py"", line 16, in validate; jsonschema.validate(data, schema); File ""/home/eric/.pyenv/versions/miniconda3-4.7.12/envs/cclib_berquist_37/lib/python3.7/site-packages/jsonschema/validators.py"", line 934, in validate; raise error; jsonschema.exceptions.ValidationError: None is not of type 'object'. Failed validating 'type' in schema['properties']['wavefunction']:; ...; On instance['wavefunction']:; None; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2242
https://github.com/psi4/psi4/issues/2242:990,Security,validat,validate,990,"Using 080dba6, this input, which doesn't produce any wavefunction data,; ```python; import json. import numpy as np. import psi4; import qcelemental as qcel. bohr2ang = qcel.constants.bohr2angstroms. geometry = (; np.asarray(; [; 0.0,; 0.0,; -0.1294769411935893,; 0.0,; -1.494187339479985,; 1.0274465079245698,; 0.0,; 1.494187339479985,; 1.0274465079245698,; ]; ); / bohr2ang; ). json_input = {; ""schema_name"": ""qc_schema_input"",; ""schema_version"": 1,; ""molecule"": {; ""geometry"": geometry.tolist(),; ""symbols"": [""O"", ""H"", ""H""],; },; ""driver"": ""gradient"",; ""model"": {""method"": ""ccsd"", ""basis"": ""def2-tzvp""},; ""keywords"": {""scf_type"": ""direct"", ""df_scf_guess"": ""false""},; }. ret = psi4.schema_wrapper.run_qcschema(json_input). stub = ""water_ccsd_gradient_psi4""; with open(f""{stub}.qcschema.out"", ""w"") as handle:; handle.write(ret.json()); ```; validated with `qcschema.validate` produces; ```; Traceback (most recent call last):; File ""./qcschema_validate.py"", line 17, in <module>; qcschema.validate(data=json.loads(p.read_text()), schema_type=args.schema_type); File ""/home/eric/development/json/MolSSI_QC_JSON_Schema/qcschema/validate.py"", line 16, in validate; jsonschema.validate(data, schema); File ""/home/eric/.pyenv/versions/miniconda3-4.7.12/envs/cclib_berquist_37/lib/python3.7/site-packages/jsonschema/validators.py"", line 934, in validate; raise error; jsonschema.exceptions.ValidationError: None is not of type 'object'. Failed validating 'type' in schema['properties']['wavefunction']:; ...; On instance['wavefunction']:; None; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2242
https://github.com/psi4/psi4/issues/2242:1127,Security,validat,validate,1127,"Using 080dba6, this input, which doesn't produce any wavefunction data,; ```python; import json. import numpy as np. import psi4; import qcelemental as qcel. bohr2ang = qcel.constants.bohr2angstroms. geometry = (; np.asarray(; [; 0.0,; 0.0,; -0.1294769411935893,; 0.0,; -1.494187339479985,; 1.0274465079245698,; 0.0,; 1.494187339479985,; 1.0274465079245698,; ]; ); / bohr2ang; ). json_input = {; ""schema_name"": ""qc_schema_input"",; ""schema_version"": 1,; ""molecule"": {; ""geometry"": geometry.tolist(),; ""symbols"": [""O"", ""H"", ""H""],; },; ""driver"": ""gradient"",; ""model"": {""method"": ""ccsd"", ""basis"": ""def2-tzvp""},; ""keywords"": {""scf_type"": ""direct"", ""df_scf_guess"": ""false""},; }. ret = psi4.schema_wrapper.run_qcschema(json_input). stub = ""water_ccsd_gradient_psi4""; with open(f""{stub}.qcschema.out"", ""w"") as handle:; handle.write(ret.json()); ```; validated with `qcschema.validate` produces; ```; Traceback (most recent call last):; File ""./qcschema_validate.py"", line 17, in <module>; qcschema.validate(data=json.loads(p.read_text()), schema_type=args.schema_type); File ""/home/eric/development/json/MolSSI_QC_JSON_Schema/qcschema/validate.py"", line 16, in validate; jsonschema.validate(data, schema); File ""/home/eric/.pyenv/versions/miniconda3-4.7.12/envs/cclib_berquist_37/lib/python3.7/site-packages/jsonschema/validators.py"", line 934, in validate; raise error; jsonschema.exceptions.ValidationError: None is not of type 'object'. Failed validating 'type' in schema['properties']['wavefunction']:; ...; On instance['wavefunction']:; None; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2242
https://github.com/psi4/psi4/issues/2242:1153,Security,validat,validate,1153,"Using 080dba6, this input, which doesn't produce any wavefunction data,; ```python; import json. import numpy as np. import psi4; import qcelemental as qcel. bohr2ang = qcel.constants.bohr2angstroms. geometry = (; np.asarray(; [; 0.0,; 0.0,; -0.1294769411935893,; 0.0,; -1.494187339479985,; 1.0274465079245698,; 0.0,; 1.494187339479985,; 1.0274465079245698,; ]; ); / bohr2ang; ). json_input = {; ""schema_name"": ""qc_schema_input"",; ""schema_version"": 1,; ""molecule"": {; ""geometry"": geometry.tolist(),; ""symbols"": [""O"", ""H"", ""H""],; },; ""driver"": ""gradient"",; ""model"": {""method"": ""ccsd"", ""basis"": ""def2-tzvp""},; ""keywords"": {""scf_type"": ""direct"", ""df_scf_guess"": ""false""},; }. ret = psi4.schema_wrapper.run_qcschema(json_input). stub = ""water_ccsd_gradient_psi4""; with open(f""{stub}.qcschema.out"", ""w"") as handle:; handle.write(ret.json()); ```; validated with `qcschema.validate` produces; ```; Traceback (most recent call last):; File ""./qcschema_validate.py"", line 17, in <module>; qcschema.validate(data=json.loads(p.read_text()), schema_type=args.schema_type); File ""/home/eric/development/json/MolSSI_QC_JSON_Schema/qcschema/validate.py"", line 16, in validate; jsonschema.validate(data, schema); File ""/home/eric/.pyenv/versions/miniconda3-4.7.12/envs/cclib_berquist_37/lib/python3.7/site-packages/jsonschema/validators.py"", line 934, in validate; raise error; jsonschema.exceptions.ValidationError: None is not of type 'object'. Failed validating 'type' in schema['properties']['wavefunction']:; ...; On instance['wavefunction']:; None; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2242
https://github.com/psi4/psi4/issues/2242:1174,Security,validat,validate,1174,"Using 080dba6, this input, which doesn't produce any wavefunction data,; ```python; import json. import numpy as np. import psi4; import qcelemental as qcel. bohr2ang = qcel.constants.bohr2angstroms. geometry = (; np.asarray(; [; 0.0,; 0.0,; -0.1294769411935893,; 0.0,; -1.494187339479985,; 1.0274465079245698,; 0.0,; 1.494187339479985,; 1.0274465079245698,; ]; ); / bohr2ang; ). json_input = {; ""schema_name"": ""qc_schema_input"",; ""schema_version"": 1,; ""molecule"": {; ""geometry"": geometry.tolist(),; ""symbols"": [""O"", ""H"", ""H""],; },; ""driver"": ""gradient"",; ""model"": {""method"": ""ccsd"", ""basis"": ""def2-tzvp""},; ""keywords"": {""scf_type"": ""direct"", ""df_scf_guess"": ""false""},; }. ret = psi4.schema_wrapper.run_qcschema(json_input). stub = ""water_ccsd_gradient_psi4""; with open(f""{stub}.qcschema.out"", ""w"") as handle:; handle.write(ret.json()); ```; validated with `qcschema.validate` produces; ```; Traceback (most recent call last):; File ""./qcschema_validate.py"", line 17, in <module>; qcschema.validate(data=json.loads(p.read_text()), schema_type=args.schema_type); File ""/home/eric/development/json/MolSSI_QC_JSON_Schema/qcschema/validate.py"", line 16, in validate; jsonschema.validate(data, schema); File ""/home/eric/.pyenv/versions/miniconda3-4.7.12/envs/cclib_berquist_37/lib/python3.7/site-packages/jsonschema/validators.py"", line 934, in validate; raise error; jsonschema.exceptions.ValidationError: None is not of type 'object'. Failed validating 'type' in schema['properties']['wavefunction']:; ...; On instance['wavefunction']:; None; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2242
https://github.com/psi4/psi4/issues/2242:1311,Security,validat,validators,1311,"Using 080dba6, this input, which doesn't produce any wavefunction data,; ```python; import json. import numpy as np. import psi4; import qcelemental as qcel. bohr2ang = qcel.constants.bohr2angstroms. geometry = (; np.asarray(; [; 0.0,; 0.0,; -0.1294769411935893,; 0.0,; -1.494187339479985,; 1.0274465079245698,; 0.0,; 1.494187339479985,; 1.0274465079245698,; ]; ); / bohr2ang; ). json_input = {; ""schema_name"": ""qc_schema_input"",; ""schema_version"": 1,; ""molecule"": {; ""geometry"": geometry.tolist(),; ""symbols"": [""O"", ""H"", ""H""],; },; ""driver"": ""gradient"",; ""model"": {""method"": ""ccsd"", ""basis"": ""def2-tzvp""},; ""keywords"": {""scf_type"": ""direct"", ""df_scf_guess"": ""false""},; }. ret = psi4.schema_wrapper.run_qcschema(json_input). stub = ""water_ccsd_gradient_psi4""; with open(f""{stub}.qcschema.out"", ""w"") as handle:; handle.write(ret.json()); ```; validated with `qcschema.validate` produces; ```; Traceback (most recent call last):; File ""./qcschema_validate.py"", line 17, in <module>; qcschema.validate(data=json.loads(p.read_text()), schema_type=args.schema_type); File ""/home/eric/development/json/MolSSI_QC_JSON_Schema/qcschema/validate.py"", line 16, in validate; jsonschema.validate(data, schema); File ""/home/eric/.pyenv/versions/miniconda3-4.7.12/envs/cclib_berquist_37/lib/python3.7/site-packages/jsonschema/validators.py"", line 934, in validate; raise error; jsonschema.exceptions.ValidationError: None is not of type 'object'. Failed validating 'type' in schema['properties']['wavefunction']:; ...; On instance['wavefunction']:; None; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2242
https://github.com/psi4/psi4/issues/2242:1340,Security,validat,validate,1340,"Using 080dba6, this input, which doesn't produce any wavefunction data,; ```python; import json. import numpy as np. import psi4; import qcelemental as qcel. bohr2ang = qcel.constants.bohr2angstroms. geometry = (; np.asarray(; [; 0.0,; 0.0,; -0.1294769411935893,; 0.0,; -1.494187339479985,; 1.0274465079245698,; 0.0,; 1.494187339479985,; 1.0274465079245698,; ]; ); / bohr2ang; ). json_input = {; ""schema_name"": ""qc_schema_input"",; ""schema_version"": 1,; ""molecule"": {; ""geometry"": geometry.tolist(),; ""symbols"": [""O"", ""H"", ""H""],; },; ""driver"": ""gradient"",; ""model"": {""method"": ""ccsd"", ""basis"": ""def2-tzvp""},; ""keywords"": {""scf_type"": ""direct"", ""df_scf_guess"": ""false""},; }. ret = psi4.schema_wrapper.run_qcschema(json_input). stub = ""water_ccsd_gradient_psi4""; with open(f""{stub}.qcschema.out"", ""w"") as handle:; handle.write(ret.json()); ```; validated with `qcschema.validate` produces; ```; Traceback (most recent call last):; File ""./qcschema_validate.py"", line 17, in <module>; qcschema.validate(data=json.loads(p.read_text()), schema_type=args.schema_type); File ""/home/eric/development/json/MolSSI_QC_JSON_Schema/qcschema/validate.py"", line 16, in validate; jsonschema.validate(data, schema); File ""/home/eric/.pyenv/versions/miniconda3-4.7.12/envs/cclib_berquist_37/lib/python3.7/site-packages/jsonschema/validators.py"", line 934, in validate; raise error; jsonschema.exceptions.ValidationError: None is not of type 'object'. Failed validating 'type' in schema['properties']['wavefunction']:; ...; On instance['wavefunction']:; None; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2242
https://github.com/psi4/psi4/issues/2242:1385,Security,Validat,ValidationError,1385,"Using 080dba6, this input, which doesn't produce any wavefunction data,; ```python; import json. import numpy as np. import psi4; import qcelemental as qcel. bohr2ang = qcel.constants.bohr2angstroms. geometry = (; np.asarray(; [; 0.0,; 0.0,; -0.1294769411935893,; 0.0,; -1.494187339479985,; 1.0274465079245698,; 0.0,; 1.494187339479985,; 1.0274465079245698,; ]; ); / bohr2ang; ). json_input = {; ""schema_name"": ""qc_schema_input"",; ""schema_version"": 1,; ""molecule"": {; ""geometry"": geometry.tolist(),; ""symbols"": [""O"", ""H"", ""H""],; },; ""driver"": ""gradient"",; ""model"": {""method"": ""ccsd"", ""basis"": ""def2-tzvp""},; ""keywords"": {""scf_type"": ""direct"", ""df_scf_guess"": ""false""},; }. ret = psi4.schema_wrapper.run_qcschema(json_input). stub = ""water_ccsd_gradient_psi4""; with open(f""{stub}.qcschema.out"", ""w"") as handle:; handle.write(ret.json()); ```; validated with `qcschema.validate` produces; ```; Traceback (most recent call last):; File ""./qcschema_validate.py"", line 17, in <module>; qcschema.validate(data=json.loads(p.read_text()), schema_type=args.schema_type); File ""/home/eric/development/json/MolSSI_QC_JSON_Schema/qcschema/validate.py"", line 16, in validate; jsonschema.validate(data, schema); File ""/home/eric/.pyenv/versions/miniconda3-4.7.12/envs/cclib_berquist_37/lib/python3.7/site-packages/jsonschema/validators.py"", line 934, in validate; raise error; jsonschema.exceptions.ValidationError: None is not of type 'object'. Failed validating 'type' in schema['properties']['wavefunction']:; ...; On instance['wavefunction']:; None; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2242
https://github.com/psi4/psi4/issues/2242:1439,Security,validat,validating,1439,"Using 080dba6, this input, which doesn't produce any wavefunction data,; ```python; import json. import numpy as np. import psi4; import qcelemental as qcel. bohr2ang = qcel.constants.bohr2angstroms. geometry = (; np.asarray(; [; 0.0,; 0.0,; -0.1294769411935893,; 0.0,; -1.494187339479985,; 1.0274465079245698,; 0.0,; 1.494187339479985,; 1.0274465079245698,; ]; ); / bohr2ang; ). json_input = {; ""schema_name"": ""qc_schema_input"",; ""schema_version"": 1,; ""molecule"": {; ""geometry"": geometry.tolist(),; ""symbols"": [""O"", ""H"", ""H""],; },; ""driver"": ""gradient"",; ""model"": {""method"": ""ccsd"", ""basis"": ""def2-tzvp""},; ""keywords"": {""scf_type"": ""direct"", ""df_scf_guess"": ""false""},; }. ret = psi4.schema_wrapper.run_qcschema(json_input). stub = ""water_ccsd_gradient_psi4""; with open(f""{stub}.qcschema.out"", ""w"") as handle:; handle.write(ret.json()); ```; validated with `qcschema.validate` produces; ```; Traceback (most recent call last):; File ""./qcschema_validate.py"", line 17, in <module>; qcschema.validate(data=json.loads(p.read_text()), schema_type=args.schema_type); File ""/home/eric/development/json/MolSSI_QC_JSON_Schema/qcschema/validate.py"", line 16, in validate; jsonschema.validate(data, schema); File ""/home/eric/.pyenv/versions/miniconda3-4.7.12/envs/cclib_berquist_37/lib/python3.7/site-packages/jsonschema/validators.py"", line 934, in validate; raise error; jsonschema.exceptions.ValidationError: None is not of type 'object'. Failed validating 'type' in schema['properties']['wavefunction']:; ...; On instance['wavefunction']:; None; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2242
https://github.com/psi4/psi4/issues/2242:725,Testability,stub,stub,725,"Using 080dba6, this input, which doesn't produce any wavefunction data,; ```python; import json. import numpy as np. import psi4; import qcelemental as qcel. bohr2ang = qcel.constants.bohr2angstroms. geometry = (; np.asarray(; [; 0.0,; 0.0,; -0.1294769411935893,; 0.0,; -1.494187339479985,; 1.0274465079245698,; 0.0,; 1.494187339479985,; 1.0274465079245698,; ]; ); / bohr2ang; ). json_input = {; ""schema_name"": ""qc_schema_input"",; ""schema_version"": 1,; ""molecule"": {; ""geometry"": geometry.tolist(),; ""symbols"": [""O"", ""H"", ""H""],; },; ""driver"": ""gradient"",; ""model"": {""method"": ""ccsd"", ""basis"": ""def2-tzvp""},; ""keywords"": {""scf_type"": ""direct"", ""df_scf_guess"": ""false""},; }. ret = psi4.schema_wrapper.run_qcschema(json_input). stub = ""water_ccsd_gradient_psi4""; with open(f""{stub}.qcschema.out"", ""w"") as handle:; handle.write(ret.json()); ```; validated with `qcschema.validate` produces; ```; Traceback (most recent call last):; File ""./qcschema_validate.py"", line 17, in <module>; qcschema.validate(data=json.loads(p.read_text()), schema_type=args.schema_type); File ""/home/eric/development/json/MolSSI_QC_JSON_Schema/qcschema/validate.py"", line 16, in validate; jsonschema.validate(data, schema); File ""/home/eric/.pyenv/versions/miniconda3-4.7.12/envs/cclib_berquist_37/lib/python3.7/site-packages/jsonschema/validators.py"", line 934, in validate; raise error; jsonschema.exceptions.ValidationError: None is not of type 'object'. Failed validating 'type' in schema['properties']['wavefunction']:; ...; On instance['wavefunction']:; None; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2242
https://github.com/psi4/psi4/issues/2242:773,Testability,stub,stub,773,"Using 080dba6, this input, which doesn't produce any wavefunction data,; ```python; import json. import numpy as np. import psi4; import qcelemental as qcel. bohr2ang = qcel.constants.bohr2angstroms. geometry = (; np.asarray(; [; 0.0,; 0.0,; -0.1294769411935893,; 0.0,; -1.494187339479985,; 1.0274465079245698,; 0.0,; 1.494187339479985,; 1.0274465079245698,; ]; ); / bohr2ang; ). json_input = {; ""schema_name"": ""qc_schema_input"",; ""schema_version"": 1,; ""molecule"": {; ""geometry"": geometry.tolist(),; ""symbols"": [""O"", ""H"", ""H""],; },; ""driver"": ""gradient"",; ""model"": {""method"": ""ccsd"", ""basis"": ""def2-tzvp""},; ""keywords"": {""scf_type"": ""direct"", ""df_scf_guess"": ""false""},; }. ret = psi4.schema_wrapper.run_qcschema(json_input). stub = ""water_ccsd_gradient_psi4""; with open(f""{stub}.qcschema.out"", ""w"") as handle:; handle.write(ret.json()); ```; validated with `qcschema.validate` produces; ```; Traceback (most recent call last):; File ""./qcschema_validate.py"", line 17, in <module>; qcschema.validate(data=json.loads(p.read_text()), schema_type=args.schema_type); File ""/home/eric/development/json/MolSSI_QC_JSON_Schema/qcschema/validate.py"", line 16, in validate; jsonschema.validate(data, schema); File ""/home/eric/.pyenv/versions/miniconda3-4.7.12/envs/cclib_berquist_37/lib/python3.7/site-packages/jsonschema/validators.py"", line 934, in validate; raise error; jsonschema.exceptions.ValidationError: None is not of type 'object'. Failed validating 'type' in schema['properties']['wavefunction']:; ...; On instance['wavefunction']:; None; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2242
https://github.com/psi4/psi4/issues/2243:125,Availability,Error,Error,125,"```; molecule {; units bohr; H; H 1 2.7; }. set scf_type pk. energy('fci/sto-6g'); ```. Above input file crashes with `Fatal Error: CIWavefunction: Iterations did not converge!` and lots of ""NAN"" in the output file.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2243
https://github.com/psi4/psi4/issues/2243:61,Energy Efficiency,energy,energy,61,"```; molecule {; units bohr; H; H 1 2.7; }. set scf_type pk. energy('fci/sto-6g'); ```. Above input file crashes with `Fatal Error: CIWavefunction: Iterations did not converge!` and lots of ""NAN"" in the output file.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2243
https://github.com/psi4/psi4/issues/2244:103,Energy Efficiency,charge,charges,103,"Hello, ; I am using Psi4 to perform QM/MM simulations, but I failed to find the gradient for the point charges.; So is there any way to get the gradient of point charges in QM/MM calculations? ; Thanks in advance",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2244
https://github.com/psi4/psi4/issues/2244:162,Energy Efficiency,charge,charges,162,"Hello, ; I am using Psi4 to perform QM/MM simulations, but I failed to find the gradient for the point charges.; So is there any way to get the gradient of point charges in QM/MM calculations? ; Thanks in advance",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2244
https://github.com/psi4/psi4/issues/2244:28,Performance,perform,perform,28,"Hello, ; I am using Psi4 to perform QM/MM simulations, but I failed to find the gradient for the point charges.; So is there any way to get the gradient of point charges in QM/MM calculations? ; Thanks in advance",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2244
https://github.com/psi4/psi4/pull/2245:25,Availability,error,error,25,## Description; Fixes an error in `detci` printing. This one is so obscure that it can easily come in for 1.5. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2245
https://github.com/psi4/psi4/pull/2246:205,Deployability,patch,patch,205,## Description; Fedora switched to the use of [FlexiBLAS](https://www.mpi-magdeburg.mpg.de/projects/flexiblas) in Fedora 33 as a unified interface to various BLAS/LAPACK implementations. This PR ports the patch by Björn Esser from Fedora to Psi4 per Fedora's guidelines of contributing any patches back upstream. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2246
https://github.com/psi4/psi4/pull/2246:290,Deployability,patch,patches,290,## Description; Fedora switched to the use of [FlexiBLAS](https://www.mpi-magdeburg.mpg.de/projects/flexiblas) in Fedora 33 as a unified interface to various BLAS/LAPACK implementations. This PR ports the patch by Björn Esser from Fedora to Psi4 per Fedora's guidelines of contributing any patches back upstream. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2246
https://github.com/psi4/psi4/pull/2246:137,Integrability,interface,interface,137,## Description; Fedora switched to the use of [FlexiBLAS](https://www.mpi-magdeburg.mpg.de/projects/flexiblas) in Fedora 33 as a unified interface to various BLAS/LAPACK implementations. This PR ports the patch by Björn Esser from Fedora to Psi4 per Fedora's guidelines of contributing any patches back upstream. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2246
https://github.com/psi4/psi4/pull/2246:497,Testability,Test,Tests,497,## Description; Fedora switched to the use of [FlexiBLAS](https://www.mpi-magdeburg.mpg.de/projects/flexiblas) in Fedora 33 as a unified interface to various BLAS/LAPACK implementations. This PR ports the patch by Björn Esser from Fedora to Psi4 per Fedora's guidelines of contributing any patches back upstream. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2246
https://github.com/psi4/psi4/pull/2246:571,Testability,test,tests,571,## Description; Fedora switched to the use of [FlexiBLAS](https://www.mpi-magdeburg.mpg.de/projects/flexiblas) in Fedora 33 as a unified interface to various BLAS/LAPACK implementations. This PR ports the patch by Björn Esser from Fedora to Psi4 per Fedora's guidelines of contributing any patches back upstream. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2246
https://github.com/psi4/psi4/pull/2246:662,Testability,test,tests,662,## Description; Fedora switched to the use of [FlexiBLAS](https://www.mpi-magdeburg.mpg.de/projects/flexiblas) in Fedora 33 as a unified interface to various BLAS/LAPACK implementations. This PR ports the patch by Björn Esser from Fedora to Psi4 per Fedora's guidelines of contributing any patches back upstream. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2246
https://github.com/psi4/psi4/pull/2246:259,Usability,guid,guidelines,259,## Description; Fedora switched to the use of [FlexiBLAS](https://www.mpi-magdeburg.mpg.de/projects/flexiblas) in Fedora 33 as a unified interface to various BLAS/LAPACK implementations. This PR ports the patch by Björn Esser from Fedora to Psi4 per Fedora's guidelines of contributing any patches back upstream. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2246
https://github.com/psi4/psi4/pull/2247:338,Modifiability,variab,variable,338,"## Description; This PR moves the printing of the SCF pre-iteration header from `scf_iterate` (where we had to check the number of iterations to know if we needed to print) to the SCF initializer (where no checks are needed). This can and should wait until 1.5. This is part of a larger project to remove overloading of the `iterations_` variable in HF, needed to get MOM properly working. ## Questions; - [ ] Do we need to regenerate samples for this? The printing should be exactly the same except in pathological corner cases involving SOSCF instabilities at less than two iterations. ## Checklist; - [x] quick tests pass. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2247
https://github.com/psi4/psi4/pull/2247:614,Testability,test,tests,614,"## Description; This PR moves the printing of the SCF pre-iteration header from `scf_iterate` (where we had to check the number of iterations to know if we needed to print) to the SCF initializer (where no checks are needed). This can and should wait until 1.5. This is part of a larger project to remove overloading of the `iterations_` variable in HF, needed to get MOM properly working. ## Questions; - [ ] Do we need to regenerate samples for this? The printing should be exactly the same except in pathological corner cases involving SOSCF instabilities at less than two iterations. ## Checklist; - [x] quick tests pass. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2247
https://github.com/psi4/psi4/pull/2248:135,Usability,simpl,simplifies,135,"## Description; While looking over the Cholesky decomposition in `dfmp2` so I can steal it for `dct`, I noticed that the relevant code simplifies in 2021. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2248
https://github.com/psi4/psi4/pull/2250:88,Integrability,wrap,wrapper,88,"## Description; This PR introduces a new `DFTensor` class to DCT. This is a lightweight wrapper over Matrix which I use to get some extra dimension information, as well as to store the DF contraction functions which were previously cluttering DCT's wavefunction object. Accordingly, many objects which were previously a `Matrix` have been specialized to a `DFTensor`. This also allows more careful input validation for the functions of `DFTensor`, but my primary motivation is for **code organization for the sake of a future PR**. Although there's a large LoC change, most of this is just moving code around and the bare minimum changes needed to make the code compile. **Reviewers, the thing to look at is the header files.**. Also of note: `Matrix bQpqA_mo_;` was never actually used and is thus removed. That should be decent memory savings. Do **not** merge until 1.5. It is far too late in the game for PRs of this scope. ## Checklist; - [x] DCT test passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2250
https://github.com/psi4/psi4/pull/2250:188,Integrability,contract,contraction,188,"## Description; This PR introduces a new `DFTensor` class to DCT. This is a lightweight wrapper over Matrix which I use to get some extra dimension information, as well as to store the DF contraction functions which were previously cluttering DCT's wavefunction object. Accordingly, many objects which were previously a `Matrix` have been specialized to a `DFTensor`. This also allows more careful input validation for the functions of `DFTensor`, but my primary motivation is for **code organization for the sake of a future PR**. Although there's a large LoC change, most of this is just moving code around and the bare minimum changes needed to make the code compile. **Reviewers, the thing to look at is the header files.**. Also of note: `Matrix bQpqA_mo_;` was never actually used and is thus removed. That should be decent memory savings. Do **not** merge until 1.5. It is far too late in the game for PRs of this scope. ## Checklist; - [x] DCT test passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2250
https://github.com/psi4/psi4/pull/2250:404,Security,validat,validation,404,"## Description; This PR introduces a new `DFTensor` class to DCT. This is a lightweight wrapper over Matrix which I use to get some extra dimension information, as well as to store the DF contraction functions which were previously cluttering DCT's wavefunction object. Accordingly, many objects which were previously a `Matrix` have been specialized to a `DFTensor`. This also allows more careful input validation for the functions of `DFTensor`, but my primary motivation is for **code organization for the sake of a future PR**. Although there's a large LoC change, most of this is just moving code around and the bare minimum changes needed to make the code compile. **Reviewers, the thing to look at is the header files.**. Also of note: `Matrix bQpqA_mo_;` was never actually used and is thus removed. That should be decent memory savings. Do **not** merge until 1.5. It is far too late in the game for PRs of this scope. ## Checklist; - [x] DCT test passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2250
https://github.com/psi4/psi4/pull/2250:952,Testability,test,test,952,"## Description; This PR introduces a new `DFTensor` class to DCT. This is a lightweight wrapper over Matrix which I use to get some extra dimension information, as well as to store the DF contraction functions which were previously cluttering DCT's wavefunction object. Accordingly, many objects which were previously a `Matrix` have been specialized to a `DFTensor`. This also allows more careful input validation for the functions of `DFTensor`, but my primary motivation is for **code organization for the sake of a future PR**. Although there's a large LoC change, most of this is just moving code around and the bare minimum changes needed to make the code compile. **Reviewers, the thing to look at is the header files.**. Also of note: `Matrix bQpqA_mo_;` was never actually used and is thus removed. That should be decent memory savings. Do **not** merge until 1.5. It is far too late in the game for PRs of this scope. ## Checklist; - [x] DCT test passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2250
https://github.com/psi4/psi4/pull/2251:89,Deployability,update,updates,89,"## Description; This PR fixes a bug accidentally introduced in #2190 that prevented docs updates. 1.4 please - a new release had better have docs that actually work. ## Questions; - [x] Some ""sections"" have a section line like the one I change in this PR, others don't. Local sphinx has a light blue color for the ones with the section line, dark blue for the ones without it. For standardization, should we just remove all of these...?. ## Checklist; - [x] Sphinx appeased, locally. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2251
https://github.com/psi4/psi4/pull/2251:117,Deployability,release,release,117,"## Description; This PR fixes a bug accidentally introduced in #2190 that prevented docs updates. 1.4 please - a new release had better have docs that actually work. ## Questions; - [x] Some ""sections"" have a section line like the one I change in this PR, others don't. Local sphinx has a light blue color for the ones with the section line, dark blue for the ones without it. For standardization, should we just remove all of these...?. ## Checklist; - [x] Sphinx appeased, locally. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2251
https://github.com/psi4/psi4/pull/2252:119,Testability,test,test-case,119,## Description; follow up on the #2154 since in the heat it got merged before I was done with it. ## Todos; - [x] adds test-case for O24; - [x] cleans up the `TAGL` . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2252
https://github.com/psi4/psi4/pull/2252:187,Testability,Test,Tests,187,## Description; follow up on the #2154 since in the heat it got merged before I was done with it. ## Todos; - [x] adds test-case for O24; - [x] cleans up the `TAGL` . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2252
https://github.com/psi4/psi4/pull/2252:261,Testability,test,tests,261,## Description; follow up on the #2154 since in the heat it got merged before I was done with it. ## Todos; - [x] adds test-case for O24; - [x] cleans up the `TAGL` . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2252
https://github.com/psi4/psi4/pull/2252:352,Testability,test,tests,352,## Description; follow up on the #2154 since in the heat it got merged before I was done with it. ## Todos; - [x] adds test-case for O24; - [x] cleans up the `TAGL` . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2252
https://github.com/psi4/psi4/issues/2253:141,Energy Efficiency,energy,energy,141,"I just made a fool of myself on the GAMESS-US forum by thinking there was a basis set issue in a calculation, since I couldn't reproduce the energy with Psi4. The problem is the following: if I input a wrong format, e.g.; ```; H 0; S 3 1.0; 1 3.386500000000E+01 2.549380000000E-02; 2 5.094790000000E+00 1.903730000000E-01; 3 1.158790000000E+00 8.521610000000E-01; S 1 1.0; 1 3.258400000000E-01 1.000000000000E+00; S 1 1.0; 1 1.027410000000E-01 1.000000000000E+00; P 1 1.0; 1 1.500000000000E+00 1.000000000000E+00; P 1 1.0; 1 3.750000000000E-01 1.000000000000E+00; ****; ```; this flies through Psi4; it does not check whether the basis set format is correct. Obviously, here it is not since there is an additional enumeration in every entry.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2253
https://github.com/psi4/psi4/pull/2254:343,Safety,detect,detected,343,## Description; <!-- Provide a brief description of the PR's purpose here. -->; Psi4 isn't checking that basis sets are given in a sensible format at the moment. This pull fixes the issue somewhat. Closes #2253 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Corrupt basis sets are detected instead of used. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2254
https://github.com/psi4/psi4/pull/2254:420,Testability,Test,Tests,420,## Description; <!-- Provide a brief description of the PR's purpose here. -->; Psi4 isn't checking that basis sets are given in a sensible format at the moment. This pull fixes the issue somewhat. Closes #2253 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Corrupt basis sets are detected instead of used. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2254
https://github.com/psi4/psi4/pull/2254:494,Testability,test,tests,494,## Description; <!-- Provide a brief description of the PR's purpose here. -->; Psi4 isn't checking that basis sets are given in a sensible format at the moment. This pull fixes the issue somewhat. Closes #2253 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Corrupt basis sets are detected instead of used. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2254
https://github.com/psi4/psi4/pull/2254:585,Testability,test,tests,585,## Description; <!-- Provide a brief description of the PR's purpose here. -->; Psi4 isn't checking that basis sets are given in a sensible format at the moment. This pull fixes the issue somewhat. Closes #2253 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Corrupt basis sets are detected instead of used. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2254
https://github.com/psi4/psi4/pull/2255:264,Testability,Test,Tests,264,## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2255
https://github.com/psi4/psi4/pull/2255:338,Testability,test,tests,338,## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2255
https://github.com/psi4/psi4/pull/2255:429,Testability,test,tests,429,## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2255
https://github.com/psi4/psi4/pull/2257:393,Testability,test,tests,393,"## Description; As a preliminary PR to giving DMRG a wavefunction, this PR changes many function signatures in DMRG to either not take a wavefunction, use a const reference to a wavefunction when the wavefunction doesn't change, and use a const reference to a Matrix when the Matrix doesn't change. This PR is 100% cleanup and should probably be saved until 1.5. ## Checklist; - [x] `chemps2` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge **squash**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2257
https://github.com/psi4/psi4/issues/2258:113,Energy Efficiency,energy,energy-and-mcscf-root-,113,"Carrying forward from [forum report](http://forum.psicode.org/t/slight-mismatching-of-casscf-between-total-mcscf-energy-and-mcscf-root-0-energy/1693). `detci` reports a different `MCSCF Root 0 Energy` than its `Total MCSCF Energy`. This is possibly the same root issue as #2119, but debugging is needed to confirm.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2258
https://github.com/psi4/psi4/issues/2258:137,Energy Efficiency,energy,energy,137,"Carrying forward from [forum report](http://forum.psicode.org/t/slight-mismatching-of-casscf-between-total-mcscf-energy-and-mcscf-root-0-energy/1693). `detci` reports a different `MCSCF Root 0 Energy` than its `Total MCSCF Energy`. This is possibly the same root issue as #2119, but debugging is needed to confirm.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2258
https://github.com/psi4/psi4/issues/2258:193,Energy Efficiency,Energy,Energy,193,"Carrying forward from [forum report](http://forum.psicode.org/t/slight-mismatching-of-casscf-between-total-mcscf-energy-and-mcscf-root-0-energy/1693). `detci` reports a different `MCSCF Root 0 Energy` than its `Total MCSCF Energy`. This is possibly the same root issue as #2119, but debugging is needed to confirm.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2258
https://github.com/psi4/psi4/issues/2258:223,Energy Efficiency,Energy,Energy,223,"Carrying forward from [forum report](http://forum.psicode.org/t/slight-mismatching-of-casscf-between-total-mcscf-energy-and-mcscf-root-0-energy/1693). `detci` reports a different `MCSCF Root 0 Energy` than its `Total MCSCF Energy`. This is possibly the same root issue as #2119, but debugging is needed to confirm.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2258
https://github.com/psi4/psi4/pull/2259:366,Availability,redundant,redundant,366,"## Description; Fix the mismatch issue on Github (#2258) and on the forum [http://forum.psicode.org/t/slight-mismatching-of-casscf-between-total-mcscf-energy-and-mcscf-root-0-energy/1693/4](http://forum.psicode.org/t/slight-mismatching-of-casscf-between-total-mcscf-energy-and-mcscf-root-0-energy/1693/4).; A more efficient way to obtain the CI coefficients after a redundant orbital rotation would be a direct transformation without solving the CI again, see [https://doi.org/10.1063/1.479573](https://doi.org/10.1063/1.479573). There might be two related issue:; - `H0block_` in DETCI keeps filling up during the MCSCF macro iteration. This will lead to repeated entries during the MCSCF iterations and sometimes lead to uncertain numerical behavior.; - The `""DFILE""` CI guess for the CI after orbital canonicalization is directly related to this issue. Using this guess leads to very slow convergence for the CI. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2259
https://github.com/psi4/psi4/pull/2259:151,Energy Efficiency,energy,energy-and-mcscf-root-,151,"## Description; Fix the mismatch issue on Github (#2258) and on the forum [http://forum.psicode.org/t/slight-mismatching-of-casscf-between-total-mcscf-energy-and-mcscf-root-0-energy/1693/4](http://forum.psicode.org/t/slight-mismatching-of-casscf-between-total-mcscf-energy-and-mcscf-root-0-energy/1693/4).; A more efficient way to obtain the CI coefficients after a redundant orbital rotation would be a direct transformation without solving the CI again, see [https://doi.org/10.1063/1.479573](https://doi.org/10.1063/1.479573). There might be two related issue:; - `H0block_` in DETCI keeps filling up during the MCSCF macro iteration. This will lead to repeated entries during the MCSCF iterations and sometimes lead to uncertain numerical behavior.; - The `""DFILE""` CI guess for the CI after orbital canonicalization is directly related to this issue. Using this guess leads to very slow convergence for the CI. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2259
https://github.com/psi4/psi4/pull/2259:175,Energy Efficiency,energy,energy,175,"## Description; Fix the mismatch issue on Github (#2258) and on the forum [http://forum.psicode.org/t/slight-mismatching-of-casscf-between-total-mcscf-energy-and-mcscf-root-0-energy/1693/4](http://forum.psicode.org/t/slight-mismatching-of-casscf-between-total-mcscf-energy-and-mcscf-root-0-energy/1693/4).; A more efficient way to obtain the CI coefficients after a redundant orbital rotation would be a direct transformation without solving the CI again, see [https://doi.org/10.1063/1.479573](https://doi.org/10.1063/1.479573). There might be two related issue:; - `H0block_` in DETCI keeps filling up during the MCSCF macro iteration. This will lead to repeated entries during the MCSCF iterations and sometimes lead to uncertain numerical behavior.; - The `""DFILE""` CI guess for the CI after orbital canonicalization is directly related to this issue. Using this guess leads to very slow convergence for the CI. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2259
https://github.com/psi4/psi4/pull/2259:266,Energy Efficiency,energy,energy-and-mcscf-root-,266,"## Description; Fix the mismatch issue on Github (#2258) and on the forum [http://forum.psicode.org/t/slight-mismatching-of-casscf-between-total-mcscf-energy-and-mcscf-root-0-energy/1693/4](http://forum.psicode.org/t/slight-mismatching-of-casscf-between-total-mcscf-energy-and-mcscf-root-0-energy/1693/4).; A more efficient way to obtain the CI coefficients after a redundant orbital rotation would be a direct transformation without solving the CI again, see [https://doi.org/10.1063/1.479573](https://doi.org/10.1063/1.479573). There might be two related issue:; - `H0block_` in DETCI keeps filling up during the MCSCF macro iteration. This will lead to repeated entries during the MCSCF iterations and sometimes lead to uncertain numerical behavior.; - The `""DFILE""` CI guess for the CI after orbital canonicalization is directly related to this issue. Using this guess leads to very slow convergence for the CI. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2259
https://github.com/psi4/psi4/pull/2259:290,Energy Efficiency,energy,energy,290,"## Description; Fix the mismatch issue on Github (#2258) and on the forum [http://forum.psicode.org/t/slight-mismatching-of-casscf-between-total-mcscf-energy-and-mcscf-root-0-energy/1693/4](http://forum.psicode.org/t/slight-mismatching-of-casscf-between-total-mcscf-energy-and-mcscf-root-0-energy/1693/4).; A more efficient way to obtain the CI coefficients after a redundant orbital rotation would be a direct transformation without solving the CI again, see [https://doi.org/10.1063/1.479573](https://doi.org/10.1063/1.479573). There might be two related issue:; - `H0block_` in DETCI keeps filling up during the MCSCF macro iteration. This will lead to repeated entries during the MCSCF iterations and sometimes lead to uncertain numerical behavior.; - The `""DFILE""` CI guess for the CI after orbital canonicalization is directly related to this issue. Using this guess leads to very slow convergence for the CI. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2259
https://github.com/psi4/psi4/pull/2259:314,Energy Efficiency,efficient,efficient,314,"## Description; Fix the mismatch issue on Github (#2258) and on the forum [http://forum.psicode.org/t/slight-mismatching-of-casscf-between-total-mcscf-energy-and-mcscf-root-0-energy/1693/4](http://forum.psicode.org/t/slight-mismatching-of-casscf-between-total-mcscf-energy-and-mcscf-root-0-energy/1693/4).; A more efficient way to obtain the CI coefficients after a redundant orbital rotation would be a direct transformation without solving the CI again, see [https://doi.org/10.1063/1.479573](https://doi.org/10.1063/1.479573). There might be two related issue:; - `H0block_` in DETCI keeps filling up during the MCSCF macro iteration. This will lead to repeated entries during the MCSCF iterations and sometimes lead to uncertain numerical behavior.; - The `""DFILE""` CI guess for the CI after orbital canonicalization is directly related to this issue. Using this guess leads to very slow convergence for the CI. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2259
https://github.com/psi4/psi4/pull/2259:366,Safety,redund,redundant,366,"## Description; Fix the mismatch issue on Github (#2258) and on the forum [http://forum.psicode.org/t/slight-mismatching-of-casscf-between-total-mcscf-energy-and-mcscf-root-0-energy/1693/4](http://forum.psicode.org/t/slight-mismatching-of-casscf-between-total-mcscf-energy-and-mcscf-root-0-energy/1693/4).; A more efficient way to obtain the CI coefficients after a redundant orbital rotation would be a direct transformation without solving the CI again, see [https://doi.org/10.1063/1.479573](https://doi.org/10.1063/1.479573). There might be two related issue:; - `H0block_` in DETCI keeps filling up during the MCSCF macro iteration. This will lead to repeated entries during the MCSCF iterations and sometimes lead to uncertain numerical behavior.; - The `""DFILE""` CI guess for the CI after orbital canonicalization is directly related to this issue. Using this guess leads to very slow convergence for the CI. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2259
https://github.com/psi4/psi4/pull/2259:936,Testability,Test,Tests,936,"## Description; Fix the mismatch issue on Github (#2258) and on the forum [http://forum.psicode.org/t/slight-mismatching-of-casscf-between-total-mcscf-energy-and-mcscf-root-0-energy/1693/4](http://forum.psicode.org/t/slight-mismatching-of-casscf-between-total-mcscf-energy-and-mcscf-root-0-energy/1693/4).; A more efficient way to obtain the CI coefficients after a redundant orbital rotation would be a direct transformation without solving the CI again, see [https://doi.org/10.1063/1.479573](https://doi.org/10.1063/1.479573). There might be two related issue:; - `H0block_` in DETCI keeps filling up during the MCSCF macro iteration. This will lead to repeated entries during the MCSCF iterations and sometimes lead to uncertain numerical behavior.; - The `""DFILE""` CI guess for the CI after orbital canonicalization is directly related to this issue. Using this guess leads to very slow convergence for the CI. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2259
https://github.com/psi4/psi4/pull/2259:1010,Testability,test,tests,1010,"## Description; Fix the mismatch issue on Github (#2258) and on the forum [http://forum.psicode.org/t/slight-mismatching-of-casscf-between-total-mcscf-energy-and-mcscf-root-0-energy/1693/4](http://forum.psicode.org/t/slight-mismatching-of-casscf-between-total-mcscf-energy-and-mcscf-root-0-energy/1693/4).; A more efficient way to obtain the CI coefficients after a redundant orbital rotation would be a direct transformation without solving the CI again, see [https://doi.org/10.1063/1.479573](https://doi.org/10.1063/1.479573). There might be two related issue:; - `H0block_` in DETCI keeps filling up during the MCSCF macro iteration. This will lead to repeated entries during the MCSCF iterations and sometimes lead to uncertain numerical behavior.; - The `""DFILE""` CI guess for the CI after orbital canonicalization is directly related to this issue. Using this guess leads to very slow convergence for the CI. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2259
https://github.com/psi4/psi4/pull/2259:1101,Testability,test,tests,1101,"## Description; Fix the mismatch issue on Github (#2258) and on the forum [http://forum.psicode.org/t/slight-mismatching-of-casscf-between-total-mcscf-energy-and-mcscf-root-0-energy/1693/4](http://forum.psicode.org/t/slight-mismatching-of-casscf-between-total-mcscf-energy-and-mcscf-root-0-energy/1693/4).; A more efficient way to obtain the CI coefficients after a redundant orbital rotation would be a direct transformation without solving the CI again, see [https://doi.org/10.1063/1.479573](https://doi.org/10.1063/1.479573). There might be two related issue:; - `H0block_` in DETCI keeps filling up during the MCSCF macro iteration. This will lead to repeated entries during the MCSCF iterations and sometimes lead to uncertain numerical behavior.; - The `""DFILE""` CI guess for the CI after orbital canonicalization is directly related to this issue. Using this guess leads to very slow convergence for the CI. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2259
https://github.com/psi4/psi4/issues/2261:66,Availability,error,error-in-psio-wt-toclen,66,"The following input file from [forums](http://forum.psicode.org/t/error-in-psio-wt-toclen/2234/5) gives a PSIO error `Error in PSIO_WT_TOCLEN()!` in up-to-date master. Reported said they could also reproduce with CCSD, but I haven't tried this myself. Setting `cachelevel 0` was a workaround, but not one that should be necessary. ```memory 5 gb. molecule = {; 0 2; Cl; O 1 R1; O 2 R2 1 A; R1=2.03230554; R2=1.20810395; A=115.36876732. }. set {; reference rohf; basis aug-cc-pwcvqz; print_MOs true; print 2; scf_type pk; guess sad; freeze_core -2; }. energy(‘bccd’); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261
https://github.com/psi4/psi4/issues/2261:111,Availability,error,error,111,"The following input file from [forums](http://forum.psicode.org/t/error-in-psio-wt-toclen/2234/5) gives a PSIO error `Error in PSIO_WT_TOCLEN()!` in up-to-date master. Reported said they could also reproduce with CCSD, but I haven't tried this myself. Setting `cachelevel 0` was a workaround, but not one that should be necessary. ```memory 5 gb. molecule = {; 0 2; Cl; O 1 R1; O 2 R2 1 A; R1=2.03230554; R2=1.20810395; A=115.36876732. }. set {; reference rohf; basis aug-cc-pwcvqz; print_MOs true; print 2; scf_type pk; guess sad; freeze_core -2; }. energy(‘bccd’); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261
https://github.com/psi4/psi4/issues/2261:118,Availability,Error,Error,118,"The following input file from [forums](http://forum.psicode.org/t/error-in-psio-wt-toclen/2234/5) gives a PSIO error `Error in PSIO_WT_TOCLEN()!` in up-to-date master. Reported said they could also reproduce with CCSD, but I haven't tried this myself. Setting `cachelevel 0` was a workaround, but not one that should be necessary. ```memory 5 gb. molecule = {; 0 2; Cl; O 1 R1; O 2 R2 1 A; R1=2.03230554; R2=1.20810395; A=115.36876732. }. set {; reference rohf; basis aug-cc-pwcvqz; print_MOs true; print 2; scf_type pk; guess sad; freeze_core -2; }. energy(‘bccd’); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261
https://github.com/psi4/psi4/issues/2261:551,Energy Efficiency,energy,energy,551,"The following input file from [forums](http://forum.psicode.org/t/error-in-psio-wt-toclen/2234/5) gives a PSIO error `Error in PSIO_WT_TOCLEN()!` in up-to-date master. Reported said they could also reproduce with CCSD, but I haven't tried this myself. Setting `cachelevel 0` was a workaround, but not one that should be necessary. ```memory 5 gb. molecule = {; 0 2; Cl; O 1 R1; O 2 R2 1 A; R1=2.03230554; R2=1.20810395; A=115.36876732. }. set {; reference rohf; basis aug-cc-pwcvqz; print_MOs true; print 2; scf_type pk; guess sad; freeze_core -2; }. energy(‘bccd’); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261
https://github.com/psi4/psi4/issues/2261:261,Performance,cache,cachelevel,261,"The following input file from [forums](http://forum.psicode.org/t/error-in-psio-wt-toclen/2234/5) gives a PSIO error `Error in PSIO_WT_TOCLEN()!` in up-to-date master. Reported said they could also reproduce with CCSD, but I haven't tried this myself. Setting `cachelevel 0` was a workaround, but not one that should be necessary. ```memory 5 gb. molecule = {; 0 2; Cl; O 1 R1; O 2 R2 1 A; R1=2.03230554; R2=1.20810395; A=115.36876732. }. set {; reference rohf; basis aug-cc-pwcvqz; print_MOs true; print 2; scf_type pk; guess sad; freeze_core -2; }. energy(‘bccd’); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2261
https://github.com/psi4/psi4/pull/2262:294,Modifiability,enhance,enhancement,294,## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] #2210 revealed that an early test case had fallen prey to `phi_ao`'s Cartesian-only usefulness; - [x] mild enhancement to `diff_gbs` utility script so it can compare out-of-order basis sets; - [x] bump a few dep from-source-build versions. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2262
https://github.com/psi4/psi4/pull/2262:216,Testability,test,test,216,## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] #2210 revealed that an early test case had fallen prey to `phi_ao`'s Cartesian-only usefulness; - [x] mild enhancement to `diff_gbs` utility script so it can compare out-of-order basis sets; - [x] bump a few dep from-source-build versions. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2262
https://github.com/psi4/psi4/pull/2263:64,Deployability,install,install,64,"## Description; w/o this, tests run fine in place but fail upon install. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2263
https://github.com/psi4/psi4/pull/2263:26,Testability,test,tests,26,"## Description; w/o this, tests run fine in place but fail upon install. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2263
https://github.com/psi4/psi4/pull/2264:26,Testability,test,tests,26,## Description; OH molden tests were getting tripped up in conda packages on B1 vs. B2. Specifying `c2vz` and playing with convergence didn't help. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2264
https://github.com/psi4/psi4/pull/2264:168,Testability,Test,Tests,168,## Description; OH molden tests were getting tripped up in conda packages on B1 vs. B2. Specifying `c2vz` and playing with convergence didn't help. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2264
https://github.com/psi4/psi4/pull/2264:242,Testability,test,tests,242,## Description; OH molden tests were getting tripped up in conda packages on B1 vs. B2. Specifying `c2vz` and playing with convergence didn't help. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2264
https://github.com/psi4/psi4/pull/2264:333,Testability,test,tests,333,## Description; OH molden tests were getting tripped up in conda packages on B1 vs. B2. Specifying `c2vz` and playing with convergence didn't help. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2264
https://github.com/psi4/psi4/issues/2265:69,Availability,error,error-radical-anion,69,"First reported [on forums](http://forum.psicode.org/t/polarizability-error-radical-anion/2240). The following MWE crashes:; ```; molecule {; O; H 1 1.0; H 1 1.0 2 104.5; }. set reference uhf. psi4.properties(""scf/cc-pVDZ"", properties=[""DIPOLE_POLARIZABILITIES""]); ```. Errors are. ```; Fatal Error: UHF::onel_Hx expect incoming vector to alternate A/B; ```. and. ```; !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: UHF::onel_Hx expect incoming vector to alternate A/B !; ! Error occurred in file: !; ! /Users/jonathonmisiewicz/psi4/psi4/src/psi4/libscf_solver/uhf.cc on line: !; ! 744 !; ! The most recent 5 function calls were: !; ! !; !----------------------------------------------------------------------------------!; ```. It looks like an easy case of arguments not being passed correctly.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2265
https://github.com/psi4/psi4/issues/2265:269,Availability,Error,Errors,269,"First reported [on forums](http://forum.psicode.org/t/polarizability-error-radical-anion/2240). The following MWE crashes:; ```; molecule {; O; H 1 1.0; H 1 1.0 2 104.5; }. set reference uhf. psi4.properties(""scf/cc-pVDZ"", properties=[""DIPOLE_POLARIZABILITIES""]); ```. Errors are. ```; Fatal Error: UHF::onel_Hx expect incoming vector to alternate A/B; ```. and. ```; !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: UHF::onel_Hx expect incoming vector to alternate A/B !; ! Error occurred in file: !; ! /Users/jonathonmisiewicz/psi4/psi4/src/psi4/libscf_solver/uhf.cc on line: !; ! 744 !; ! The most recent 5 function calls were: !; ! !; !----------------------------------------------------------------------------------!; ```. It looks like an easy case of arguments not being passed correctly.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2265
https://github.com/psi4/psi4/issues/2265:292,Availability,Error,Error,292,"First reported [on forums](http://forum.psicode.org/t/polarizability-error-radical-anion/2240). The following MWE crashes:; ```; molecule {; O; H 1 1.0; H 1 1.0 2 104.5; }. set reference uhf. psi4.properties(""scf/cc-pVDZ"", properties=[""DIPOLE_POLARIZABILITIES""]); ```. Errors are. ```; Fatal Error: UHF::onel_Hx expect incoming vector to alternate A/B; ```. and. ```; !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: UHF::onel_Hx expect incoming vector to alternate A/B !; ! Error occurred in file: !; ! /Users/jonathonmisiewicz/psi4/psi4/src/psi4/libscf_solver/uhf.cc on line: !; ! 744 !; ! The most recent 5 function calls were: !; ! !; !----------------------------------------------------------------------------------!; ```. It looks like an easy case of arguments not being passed correctly.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2265
https://github.com/psi4/psi4/issues/2265:467,Availability,Error,Error,467,"First reported [on forums](http://forum.psicode.org/t/polarizability-error-radical-anion/2240). The following MWE crashes:; ```; molecule {; O; H 1 1.0; H 1 1.0 2 104.5; }. set reference uhf. psi4.properties(""scf/cc-pVDZ"", properties=[""DIPOLE_POLARIZABILITIES""]); ```. Errors are. ```; Fatal Error: UHF::onel_Hx expect incoming vector to alternate A/B; ```. and. ```; !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: UHF::onel_Hx expect incoming vector to alternate A/B !; ! Error occurred in file: !; ! /Users/jonathonmisiewicz/psi4/psi4/src/psi4/libscf_solver/uhf.cc on line: !; ! 744 !; ! The most recent 5 function calls were: !; ! !; !----------------------------------------------------------------------------------!; ```. It looks like an easy case of arguments not being passed correctly.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2265
https://github.com/psi4/psi4/issues/2265:532,Availability,Error,Error,532,"First reported [on forums](http://forum.psicode.org/t/polarizability-error-radical-anion/2240). The following MWE crashes:; ```; molecule {; O; H 1 1.0; H 1 1.0 2 104.5; }. set reference uhf. psi4.properties(""scf/cc-pVDZ"", properties=[""DIPOLE_POLARIZABILITIES""]); ```. Errors are. ```; Fatal Error: UHF::onel_Hx expect incoming vector to alternate A/B; ```. and. ```; !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: UHF::onel_Hx expect incoming vector to alternate A/B !; ! Error occurred in file: !; ! /Users/jonathonmisiewicz/psi4/psi4/src/psi4/libscf_solver/uhf.cc on line: !; ! 744 !; ! The most recent 5 function calls were: !; ! !; !----------------------------------------------------------------------------------!; ```. It looks like an easy case of arguments not being passed correctly.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2265
https://github.com/psi4/psi4/issues/2265:348,Deployability,A/B,A/B,348,"First reported [on forums](http://forum.psicode.org/t/polarizability-error-radical-anion/2240). The following MWE crashes:; ```; molecule {; O; H 1 1.0; H 1 1.0 2 104.5; }. set reference uhf. psi4.properties(""scf/cc-pVDZ"", properties=[""DIPOLE_POLARIZABILITIES""]); ```. Errors are. ```; Fatal Error: UHF::onel_Hx expect incoming vector to alternate A/B; ```. and. ```; !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: UHF::onel_Hx expect incoming vector to alternate A/B !; ! Error occurred in file: !; ! /Users/jonathonmisiewicz/psi4/psi4/src/psi4/libscf_solver/uhf.cc on line: !; ! 744 !; ! The most recent 5 function calls were: !; ! !; !----------------------------------------------------------------------------------!; ```. It looks like an easy case of arguments not being passed correctly.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2265
https://github.com/psi4/psi4/issues/2265:523,Deployability,A/B,A/B,523,"First reported [on forums](http://forum.psicode.org/t/polarizability-error-radical-anion/2240). The following MWE crashes:; ```; molecule {; O; H 1 1.0; H 1 1.0 2 104.5; }. set reference uhf. psi4.properties(""scf/cc-pVDZ"", properties=[""DIPOLE_POLARIZABILITIES""]); ```. Errors are. ```; Fatal Error: UHF::onel_Hx expect incoming vector to alternate A/B; ```. and. ```; !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: UHF::onel_Hx expect incoming vector to alternate A/B !; ! Error occurred in file: !; ! /Users/jonathonmisiewicz/psi4/psi4/src/psi4/libscf_solver/uhf.cc on line: !; ! 744 !; ! The most recent 5 function calls were: !; ! !; !----------------------------------------------------------------------------------!; ```. It looks like an easy case of arguments not being passed correctly.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2265
https://github.com/psi4/psi4/pull/2266:532,Testability,Test,Tests,532,"## Description; Fixes #2265.; This is a first attempt to make the feature work in `cpscf_linear_response`, but the code is a bit ugly and needs to be cleaned up...; ~~I'm also not 100% sure why/where correct pre-factors/signs need to be added 🤯 😄~~. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] UHF linear response properties; - [x] removed user-provided vectors from `cpscf_linear_response`. ## Questions; - [x] How should user vectors be handled?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2266
https://github.com/psi4/psi4/pull/2266:606,Testability,test,tests,606,"## Description; Fixes #2265.; This is a first attempt to make the feature work in `cpscf_linear_response`, but the code is a bit ugly and needs to be cleaned up...; ~~I'm also not 100% sure why/where correct pre-factors/signs need to be added 🤯 😄~~. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] UHF linear response properties; - [x] removed user-provided vectors from `cpscf_linear_response`. ## Questions; - [x] How should user vectors be handled?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2266
https://github.com/psi4/psi4/pull/2266:697,Testability,test,tests,697,"## Description; Fixes #2265.; This is a first attempt to make the feature work in `cpscf_linear_response`, but the code is a bit ugly and needs to be cleaned up...; ~~I'm also not 100% sure why/where correct pre-factors/signs need to be added 🤯 😄~~. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] UHF linear response properties; - [x] removed user-provided vectors from `cpscf_linear_response`. ## Questions; - [x] How should user vectors be handled?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2266
https://github.com/psi4/psi4/issues/2267:1041,Modifiability,plugin,plugin,1041,"ich @fevangelista brought up at the conference call yesterday. The SCF code as currently structured does not allow for custom SCF subclasses. The first problem is that the acceptable SCF solutions are hardcoded [here](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L1183-L1194). This is easily surmountable:. ```; diff --git a/psi4/driver/procrouting/proc.py b/psi4/driver/procrouting/proc.py; index d03fd6d54..f895a1a92 100644; --- a/psi4/driver/procrouting/proc.py; +++ b/psi4/driver/procrouting/proc.py; @@ -1182,16 +1182,15 @@ def scf_wavefunction_factory(name, ref_wfn, reference, **kwargs):; ; # Build the wavefunction; core.prepare_options_for_module(""SCF""); - if reference in [""RHF"", ""RKS""]:; - wfn = core.RHF(ref_wfn, superfunc); - elif reference == ""ROHF"":; - wfn = core.ROHF(ref_wfn, superfunc); - elif reference in [""UHF"", ""UKS""]:; - wfn = core.UHF(ref_wfn, superfunc); - elif reference == ""CUHF"":; - wfn = core.CUHF(ref_wfn, superfunc); - else:; +; + # By setting core.name_of_SCF_method, a plugin dev can register an SCF subclass.; + wfn_aliases = {""RKS"": ""RHF"", ""UKS"": ""UHF""}; + constructor_name = wfn_aliases.get(reference, reference); + try:; + wfn_constructor = getattr(core, constructor_name); + except AttributeError:; raise ValidationError(""SCF: Unknown reference (%s) when building the Wavefunction."" % reference); + wfn = wfn_constructor(ref_wfn, superfunc); ; if _disp_functor and _disp_functor.engine != 'nl':; wfn._disp_functor = _disp_functor; ```. However, the acceptable references are also hardcoded [here](https://github.com/psi4/psi4/blob/master/psi4/src/read_options.cc#L1293). I'm not sure how to remedy this one. I would like to see how the code worked pre-inversion, to know why this wasn't a problem then. This will probably require a lot of digging in Forte's historical source. From my brief looking at it, at least some of the code that did the hookup is now missing. I can't delve into this further until I clear some other projects.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2267
https://github.com/psi4/psi4/issues/2267:1282,Security,Validat,ValidationError,1282,"ich @fevangelista brought up at the conference call yesterday. The SCF code as currently structured does not allow for custom SCF subclasses. The first problem is that the acceptable SCF solutions are hardcoded [here](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L1183-L1194). This is easily surmountable:. ```; diff --git a/psi4/driver/procrouting/proc.py b/psi4/driver/procrouting/proc.py; index d03fd6d54..f895a1a92 100644; --- a/psi4/driver/procrouting/proc.py; +++ b/psi4/driver/procrouting/proc.py; @@ -1182,16 +1182,15 @@ def scf_wavefunction_factory(name, ref_wfn, reference, **kwargs):; ; # Build the wavefunction; core.prepare_options_for_module(""SCF""); - if reference in [""RHF"", ""RKS""]:; - wfn = core.RHF(ref_wfn, superfunc); - elif reference == ""ROHF"":; - wfn = core.ROHF(ref_wfn, superfunc); - elif reference in [""UHF"", ""UKS""]:; - wfn = core.UHF(ref_wfn, superfunc); - elif reference == ""CUHF"":; - wfn = core.CUHF(ref_wfn, superfunc); - else:; +; + # By setting core.name_of_SCF_method, a plugin dev can register an SCF subclass.; + wfn_aliases = {""RKS"": ""RHF"", ""UKS"": ""UHF""}; + constructor_name = wfn_aliases.get(reference, reference); + try:; + wfn_constructor = getattr(core, constructor_name); + except AttributeError:; raise ValidationError(""SCF: Unknown reference (%s) when building the Wavefunction."" % reference); + wfn = wfn_constructor(ref_wfn, superfunc); ; if _disp_functor and _disp_functor.engine != 'nl':; wfn._disp_functor = _disp_functor; ```. However, the acceptable references are also hardcoded [here](https://github.com/psi4/psi4/blob/master/psi4/src/read_options.cc#L1293). I'm not sure how to remedy this one. I would like to see how the code worked pre-inversion, to know why this wasn't a problem then. This will probably require a lot of digging in Forte's historical source. From my brief looking at it, at least some of the code that did the hookup is now missing. I can't delve into this further until I clear some other projects.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2267
https://github.com/psi4/psi4/issues/2267:1985,Usability,clear,clear,1985,"ich @fevangelista brought up at the conference call yesterday. The SCF code as currently structured does not allow for custom SCF subclasses. The first problem is that the acceptable SCF solutions are hardcoded [here](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L1183-L1194). This is easily surmountable:. ```; diff --git a/psi4/driver/procrouting/proc.py b/psi4/driver/procrouting/proc.py; index d03fd6d54..f895a1a92 100644; --- a/psi4/driver/procrouting/proc.py; +++ b/psi4/driver/procrouting/proc.py; @@ -1182,16 +1182,15 @@ def scf_wavefunction_factory(name, ref_wfn, reference, **kwargs):; ; # Build the wavefunction; core.prepare_options_for_module(""SCF""); - if reference in [""RHF"", ""RKS""]:; - wfn = core.RHF(ref_wfn, superfunc); - elif reference == ""ROHF"":; - wfn = core.ROHF(ref_wfn, superfunc); - elif reference in [""UHF"", ""UKS""]:; - wfn = core.UHF(ref_wfn, superfunc); - elif reference == ""CUHF"":; - wfn = core.CUHF(ref_wfn, superfunc); - else:; +; + # By setting core.name_of_SCF_method, a plugin dev can register an SCF subclass.; + wfn_aliases = {""RKS"": ""RHF"", ""UKS"": ""UHF""}; + constructor_name = wfn_aliases.get(reference, reference); + try:; + wfn_constructor = getattr(core, constructor_name); + except AttributeError:; raise ValidationError(""SCF: Unknown reference (%s) when building the Wavefunction."" % reference); + wfn = wfn_constructor(ref_wfn, superfunc); ; if _disp_functor and _disp_functor.engine != 'nl':; wfn._disp_functor = _disp_functor; ```. However, the acceptable references are also hardcoded [here](https://github.com/psi4/psi4/blob/master/psi4/src/read_options.cc#L1293). I'm not sure how to remedy this one. I would like to see how the code worked pre-inversion, to know why this wasn't a problem then. This will probably require a lot of digging in Forte's historical source. From my brief looking at it, at least some of the code that did the hookup is now missing. I can't delve into this further until I clear some other projects.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2267
https://github.com/psi4/psi4/pull/2270:357,Energy Efficiency,reduce,reduce,357,"## Description; Closes #1692 and adds some of those examples as test cases. The heart of the PR is that MOM no longer sets the iteration number to 0, which would triggered logic resetting some wavefunction variables. ## Todos; - [x] Fixes a bug where MOM could clear all electrons. ## Questions; - [x] The new tests take about 20 seconds. Do you want me to reduce the basis set size, to speed this up?. ## Checklist; - [x] Tests added for newly working features; - [x] `scf` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2270
https://github.com/psi4/psi4/pull/2270:206,Modifiability,variab,variables,206,"## Description; Closes #1692 and adds some of those examples as test cases. The heart of the PR is that MOM no longer sets the iteration number to 0, which would triggered logic resetting some wavefunction variables. ## Todos; - [x] Fixes a bug where MOM could clear all electrons. ## Questions; - [x] The new tests take about 20 seconds. Do you want me to reduce the basis set size, to speed this up?. ## Checklist; - [x] Tests added for newly working features; - [x] `scf` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2270
https://github.com/psi4/psi4/pull/2270:64,Testability,test,test,64,"## Description; Closes #1692 and adds some of those examples as test cases. The heart of the PR is that MOM no longer sets the iteration number to 0, which would triggered logic resetting some wavefunction variables. ## Todos; - [x] Fixes a bug where MOM could clear all electrons. ## Questions; - [x] The new tests take about 20 seconds. Do you want me to reduce the basis set size, to speed this up?. ## Checklist; - [x] Tests added for newly working features; - [x] `scf` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2270
https://github.com/psi4/psi4/pull/2270:172,Testability,log,logic,172,"## Description; Closes #1692 and adds some of those examples as test cases. The heart of the PR is that MOM no longer sets the iteration number to 0, which would triggered logic resetting some wavefunction variables. ## Todos; - [x] Fixes a bug where MOM could clear all electrons. ## Questions; - [x] The new tests take about 20 seconds. Do you want me to reduce the basis set size, to speed this up?. ## Checklist; - [x] Tests added for newly working features; - [x] `scf` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2270
https://github.com/psi4/psi4/pull/2270:310,Testability,test,tests,310,"## Description; Closes #1692 and adds some of those examples as test cases. The heart of the PR is that MOM no longer sets the iteration number to 0, which would triggered logic resetting some wavefunction variables. ## Todos; - [x] Fixes a bug where MOM could clear all electrons. ## Questions; - [x] The new tests take about 20 seconds. Do you want me to reduce the basis set size, to speed this up?. ## Checklist; - [x] Tests added for newly working features; - [x] `scf` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2270
https://github.com/psi4/psi4/pull/2270:423,Testability,Test,Tests,423,"## Description; Closes #1692 and adds some of those examples as test cases. The heart of the PR is that MOM no longer sets the iteration number to 0, which would triggered logic resetting some wavefunction variables. ## Todos; - [x] Fixes a bug where MOM could clear all electrons. ## Questions; - [x] The new tests take about 20 seconds. Do you want me to reduce the basis set size, to speed this up?. ## Checklist; - [x] Tests added for newly working features; - [x] `scf` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2270
https://github.com/psi4/psi4/pull/2270:475,Testability,test,tests,475,"## Description; Closes #1692 and adds some of those examples as test cases. The heart of the PR is that MOM no longer sets the iteration number to 0, which would triggered logic resetting some wavefunction variables. ## Todos; - [x] Fixes a bug where MOM could clear all electrons. ## Questions; - [x] The new tests take about 20 seconds. Do you want me to reduce the basis set size, to speed this up?. ## Checklist; - [x] Tests added for newly working features; - [x] `scf` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2270
https://github.com/psi4/psi4/pull/2270:261,Usability,clear,clear,261,"## Description; Closes #1692 and adds some of those examples as test cases. The heart of the PR is that MOM no longer sets the iteration number to 0, which would triggered logic resetting some wavefunction variables. ## Todos; - [x] Fixes a bug where MOM could clear all electrons. ## Questions; - [x] The new tests take about 20 seconds. Do you want me to reduce the basis set size, to speed this up?. ## Checklist; - [x] Tests added for newly working features; - [x] `scf` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2270
https://github.com/psi4/psi4/pull/2271:220,Energy Efficiency,charge,charged,220,"## Description; In very rare cases, the number of frozen core orbitals in computing the dMP2 correction in SAPT was inconsistent between the dimer and monomer calculations. I only encountered this when one monomer was a charged alkali metal. For example, when computing the dMP2 correction for Na-H20, `freeze_core true` results in one frozen orbital each for Na and H2O in the separate monomer computations, but six frozen orbitals in the dimer computation. Separately, these values make sense, but in this context they result in a meaningless dMP2 value. . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [X] Set # frozen core for dimer as sum of monomer # frozen core. ## Checklist; - [X] Tests added for any new features; - [X] Add a warning in the manual. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2271
https://github.com/psi4/psi4/pull/2271:747,Testability,Test,Tests,747,"## Description; In very rare cases, the number of frozen core orbitals in computing the dMP2 correction in SAPT was inconsistent between the dimer and monomer calculations. I only encountered this when one monomer was a charged alkali metal. For example, when computing the dMP2 correction for Na-H20, `freeze_core true` results in one frozen orbital each for Na and H2O in the separate monomer computations, but six frozen orbitals in the dimer computation. Separately, these values make sense, but in this context they result in a meaningless dMP2 value. . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [X] Set # frozen core for dimer as sum of monomer # frozen core. ## Checklist; - [X] Tests added for any new features; - [X] Add a warning in the manual. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2271
https://github.com/psi4/psi4/issues/2272:126,Availability,error,error,126,"Using psi4-1.4rc1, I was able to compute `MBIS_CHARGES` via QCEngine however after PR #2127 this now fails with the following error message. While this definitely needs fixing I think it might also be nice to have the option to turn off this feature and only calculate the ratio if passed as an scf property?; ```; RuntimeError: ; Fatal Error: Wavefunction::scalar_variable: Requested variable MBIS FREE ATOM O VOLUME was not set!; Error occurred in file: /Users/github/builds/conda-builds/psi4-multiout_1628080613326/work/psi4/src/psi4/libmints/wavefunction.cc on line: 1335; ```. MWE ; ```python; import qcelemental as qcel; from qcelemental.models import molecule; import qcengine as qcng. mol = qcel.models.Molecule.from_data(""""""; O 0.0 0.000 -0.129; H 0.0 -1.494 1.027; H 0.0 1.494 1.027; """"""). # build the mbis task; model = qcel.models.AtomicInput(; molecule=mol,; driver=""energy"",; model={""method"": ""SCF"", ""basis"": ""sto-3g""},; keywords={""scf_properties"": [""MBIS_CHARGES""]}; ). result = qcng.compute(model, ""psi4""). print(result.dict()); ```; versions; psi4-1.4+9485035 ; qcengine-0.19.0; qcelemental -0.21.0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2272
https://github.com/psi4/psi4/issues/2272:337,Availability,Error,Error,337,"Using psi4-1.4rc1, I was able to compute `MBIS_CHARGES` via QCEngine however after PR #2127 this now fails with the following error message. While this definitely needs fixing I think it might also be nice to have the option to turn off this feature and only calculate the ratio if passed as an scf property?; ```; RuntimeError: ; Fatal Error: Wavefunction::scalar_variable: Requested variable MBIS FREE ATOM O VOLUME was not set!; Error occurred in file: /Users/github/builds/conda-builds/psi4-multiout_1628080613326/work/psi4/src/psi4/libmints/wavefunction.cc on line: 1335; ```. MWE ; ```python; import qcelemental as qcel; from qcelemental.models import molecule; import qcengine as qcng. mol = qcel.models.Molecule.from_data(""""""; O 0.0 0.000 -0.129; H 0.0 -1.494 1.027; H 0.0 1.494 1.027; """"""). # build the mbis task; model = qcel.models.AtomicInput(; molecule=mol,; driver=""energy"",; model={""method"": ""SCF"", ""basis"": ""sto-3g""},; keywords={""scf_properties"": [""MBIS_CHARGES""]}; ). result = qcng.compute(model, ""psi4""). print(result.dict()); ```; versions; psi4-1.4+9485035 ; qcengine-0.19.0; qcelemental -0.21.0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2272
https://github.com/psi4/psi4/issues/2272:432,Availability,Error,Error,432,"Using psi4-1.4rc1, I was able to compute `MBIS_CHARGES` via QCEngine however after PR #2127 this now fails with the following error message. While this definitely needs fixing I think it might also be nice to have the option to turn off this feature and only calculate the ratio if passed as an scf property?; ```; RuntimeError: ; Fatal Error: Wavefunction::scalar_variable: Requested variable MBIS FREE ATOM O VOLUME was not set!; Error occurred in file: /Users/github/builds/conda-builds/psi4-multiout_1628080613326/work/psi4/src/psi4/libmints/wavefunction.cc on line: 1335; ```. MWE ; ```python; import qcelemental as qcel; from qcelemental.models import molecule; import qcengine as qcng. mol = qcel.models.Molecule.from_data(""""""; O 0.0 0.000 -0.129; H 0.0 -1.494 1.027; H 0.0 1.494 1.027; """"""). # build the mbis task; model = qcel.models.AtomicInput(; molecule=mol,; driver=""energy"",; model={""method"": ""SCF"", ""basis"": ""sto-3g""},; keywords={""scf_properties"": [""MBIS_CHARGES""]}; ). result = qcng.compute(model, ""psi4""). print(result.dict()); ```; versions; psi4-1.4+9485035 ; qcengine-0.19.0; qcelemental -0.21.0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2272
https://github.com/psi4/psi4/issues/2272:880,Energy Efficiency,energy,energy,880,"Using psi4-1.4rc1, I was able to compute `MBIS_CHARGES` via QCEngine however after PR #2127 this now fails with the following error message. While this definitely needs fixing I think it might also be nice to have the option to turn off this feature and only calculate the ratio if passed as an scf property?; ```; RuntimeError: ; Fatal Error: Wavefunction::scalar_variable: Requested variable MBIS FREE ATOM O VOLUME was not set!; Error occurred in file: /Users/github/builds/conda-builds/psi4-multiout_1628080613326/work/psi4/src/psi4/libmints/wavefunction.cc on line: 1335; ```. MWE ; ```python; import qcelemental as qcel; from qcelemental.models import molecule; import qcengine as qcng. mol = qcel.models.Molecule.from_data(""""""; O 0.0 0.000 -0.129; H 0.0 -1.494 1.027; H 0.0 1.494 1.027; """"""). # build the mbis task; model = qcel.models.AtomicInput(; molecule=mol,; driver=""energy"",; model={""method"": ""SCF"", ""basis"": ""sto-3g""},; keywords={""scf_properties"": [""MBIS_CHARGES""]}; ). result = qcng.compute(model, ""psi4""). print(result.dict()); ```; versions; psi4-1.4+9485035 ; qcengine-0.19.0; qcelemental -0.21.0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2272
https://github.com/psi4/psi4/issues/2272:132,Integrability,message,message,132,"Using psi4-1.4rc1, I was able to compute `MBIS_CHARGES` via QCEngine however after PR #2127 this now fails with the following error message. While this definitely needs fixing I think it might also be nice to have the option to turn off this feature and only calculate the ratio if passed as an scf property?; ```; RuntimeError: ; Fatal Error: Wavefunction::scalar_variable: Requested variable MBIS FREE ATOM O VOLUME was not set!; Error occurred in file: /Users/github/builds/conda-builds/psi4-multiout_1628080613326/work/psi4/src/psi4/libmints/wavefunction.cc on line: 1335; ```. MWE ; ```python; import qcelemental as qcel; from qcelemental.models import molecule; import qcengine as qcng. mol = qcel.models.Molecule.from_data(""""""; O 0.0 0.000 -0.129; H 0.0 -1.494 1.027; H 0.0 1.494 1.027; """"""). # build the mbis task; model = qcel.models.AtomicInput(; molecule=mol,; driver=""energy"",; model={""method"": ""SCF"", ""basis"": ""sto-3g""},; keywords={""scf_properties"": [""MBIS_CHARGES""]}; ). result = qcng.compute(model, ""psi4""). print(result.dict()); ```; versions; psi4-1.4+9485035 ; qcengine-0.19.0; qcelemental -0.21.0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2272
https://github.com/psi4/psi4/issues/2272:385,Modifiability,variab,variable,385,"Using psi4-1.4rc1, I was able to compute `MBIS_CHARGES` via QCEngine however after PR #2127 this now fails with the following error message. While this definitely needs fixing I think it might also be nice to have the option to turn off this feature and only calculate the ratio if passed as an scf property?; ```; RuntimeError: ; Fatal Error: Wavefunction::scalar_variable: Requested variable MBIS FREE ATOM O VOLUME was not set!; Error occurred in file: /Users/github/builds/conda-builds/psi4-multiout_1628080613326/work/psi4/src/psi4/libmints/wavefunction.cc on line: 1335; ```. MWE ; ```python; import qcelemental as qcel; from qcelemental.models import molecule; import qcengine as qcng. mol = qcel.models.Molecule.from_data(""""""; O 0.0 0.000 -0.129; H 0.0 -1.494 1.027; H 0.0 1.494 1.027; """"""). # build the mbis task; model = qcel.models.AtomicInput(; molecule=mol,; driver=""energy"",; model={""method"": ""SCF"", ""basis"": ""sto-3g""},; keywords={""scf_properties"": [""MBIS_CHARGES""]}; ). result = qcng.compute(model, ""psi4""). print(result.dict()); ```; versions; psi4-1.4+9485035 ; qcengine-0.19.0; qcelemental -0.21.0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2272
https://github.com/psi4/psi4/pull/2273:539,Availability,avail,available,539,"## Description; This is a start to addressing #2272 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `MBIS_CHARGES` and `MBIS_VOLUME_RATIOS` are now separate oeprop tasks to the user but still reusing code.; - [ ] `oeprop(wfn, ""MBIS_VOLUME_RATIOS"")` should be fine (indep oeprop fn), but `set scf_properties mbis_volume_ratios; energy(""scf"")` will still fail as #2272 reported because those are `OEProp` class instantiations called from proc.py, and the free atom volumes aren't available. The oeprop.cc code could exit gracefully when free atom volumes aren't available, but having different properties lists for the two calling routes isn't good.; - [ ] so why not add the loc from oeprop() to `OEProp`s in proc.py so that atom volumes are available? nice thought, but the fn that produces them itself calls oeprop() and energy() and descends into endless recursion. I haven't sought the logic that makes this all work together.; - [ ] add tests. probably some of the existing ones will break for only calling one mbis property but checking volrat. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2273
https://github.com/psi4/psi4/pull/2273:621,Availability,avail,available,621,"## Description; This is a start to addressing #2272 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `MBIS_CHARGES` and `MBIS_VOLUME_RATIOS` are now separate oeprop tasks to the user but still reusing code.; - [ ] `oeprop(wfn, ""MBIS_VOLUME_RATIOS"")` should be fine (indep oeprop fn), but `set scf_properties mbis_volume_ratios; energy(""scf"")` will still fail as #2272 reported because those are `OEProp` class instantiations called from proc.py, and the free atom volumes aren't available. The oeprop.cc code could exit gracefully when free atom volumes aren't available, but having different properties lists for the two calling routes isn't good.; - [ ] so why not add the loc from oeprop() to `OEProp`s in proc.py so that atom volumes are available? nice thought, but the fn that produces them itself calls oeprop() and energy() and descends into endless recursion. I haven't sought the logic that makes this all work together.; - [ ] add tests. probably some of the existing ones will break for only calling one mbis property but checking volrat. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2273
https://github.com/psi4/psi4/pull/2273:802,Availability,avail,available,802,"## Description; This is a start to addressing #2272 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `MBIS_CHARGES` and `MBIS_VOLUME_RATIOS` are now separate oeprop tasks to the user but still reusing code.; - [ ] `oeprop(wfn, ""MBIS_VOLUME_RATIOS"")` should be fine (indep oeprop fn), but `set scf_properties mbis_volume_ratios; energy(""scf"")` will still fail as #2272 reported because those are `OEProp` class instantiations called from proc.py, and the free atom volumes aren't available. The oeprop.cc code could exit gracefully when free atom volumes aren't available, but having different properties lists for the two calling routes isn't good.; - [ ] so why not add the loc from oeprop() to `OEProp`s in proc.py so that atom volumes are available? nice thought, but the fn that produces them itself calls oeprop() and energy() and descends into endless recursion. I haven't sought the logic that makes this all work together.; - [ ] add tests. probably some of the existing ones will break for only calling one mbis property but checking volrat. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2273
https://github.com/psi4/psi4/pull/2273:388,Energy Efficiency,energy,energy,388,"## Description; This is a start to addressing #2272 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `MBIS_CHARGES` and `MBIS_VOLUME_RATIOS` are now separate oeprop tasks to the user but still reusing code.; - [ ] `oeprop(wfn, ""MBIS_VOLUME_RATIOS"")` should be fine (indep oeprop fn), but `set scf_properties mbis_volume_ratios; energy(""scf"")` will still fail as #2272 reported because those are `OEProp` class instantiations called from proc.py, and the free atom volumes aren't available. The oeprop.cc code could exit gracefully when free atom volumes aren't available, but having different properties lists for the two calling routes isn't good.; - [ ] so why not add the loc from oeprop() to `OEProp`s in proc.py so that atom volumes are available? nice thought, but the fn that produces them itself calls oeprop() and energy() and descends into endless recursion. I haven't sought the logic that makes this all work together.; - [ ] add tests. probably some of the existing ones will break for only calling one mbis property but checking volrat. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2273
https://github.com/psi4/psi4/pull/2273:883,Energy Efficiency,energy,energy,883,"## Description; This is a start to addressing #2272 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `MBIS_CHARGES` and `MBIS_VOLUME_RATIOS` are now separate oeprop tasks to the user but still reusing code.; - [ ] `oeprop(wfn, ""MBIS_VOLUME_RATIOS"")` should be fine (indep oeprop fn), but `set scf_properties mbis_volume_ratios; energy(""scf"")` will still fail as #2272 reported because those are `OEProp` class instantiations called from proc.py, and the free atom volumes aren't available. The oeprop.cc code could exit gracefully when free atom volumes aren't available, but having different properties lists for the two calling routes isn't good.; - [ ] so why not add the loc from oeprop() to `OEProp`s in proc.py so that atom volumes are available? nice thought, but the fn that produces them itself calls oeprop() and energy() and descends into endless recursion. I haven't sought the logic that makes this all work together.; - [ ] add tests. probably some of the existing ones will break for only calling one mbis property but checking volrat. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2273
https://github.com/psi4/psi4/pull/2273:690,Integrability,rout,routes,690,"## Description; This is a start to addressing #2272 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `MBIS_CHARGES` and `MBIS_VOLUME_RATIOS` are now separate oeprop tasks to the user but still reusing code.; - [ ] `oeprop(wfn, ""MBIS_VOLUME_RATIOS"")` should be fine (indep oeprop fn), but `set scf_properties mbis_volume_ratios; energy(""scf"")` will still fail as #2272 reported because those are `OEProp` class instantiations called from proc.py, and the free atom volumes aren't available. The oeprop.cc code could exit gracefully when free atom volumes aren't available, but having different properties lists for the two calling routes isn't good.; - [ ] so why not add the loc from oeprop() to `OEProp`s in proc.py so that atom volumes are available? nice thought, but the fn that produces them itself calls oeprop() and energy() and descends into endless recursion. I haven't sought the logic that makes this all work together.; - [ ] add tests. probably some of the existing ones will break for only calling one mbis property but checking volrat. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2273
https://github.com/psi4/psi4/pull/2273:950,Testability,log,logic,950,"## Description; This is a start to addressing #2272 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `MBIS_CHARGES` and `MBIS_VOLUME_RATIOS` are now separate oeprop tasks to the user but still reusing code.; - [ ] `oeprop(wfn, ""MBIS_VOLUME_RATIOS"")` should be fine (indep oeprop fn), but `set scf_properties mbis_volume_ratios; energy(""scf"")` will still fail as #2272 reported because those are `OEProp` class instantiations called from proc.py, and the free atom volumes aren't available. The oeprop.cc code could exit gracefully when free atom volumes aren't available, but having different properties lists for the two calling routes isn't good.; - [ ] so why not add the loc from oeprop() to `OEProp`s in proc.py so that atom volumes are available? nice thought, but the fn that produces them itself calls oeprop() and energy() and descends into endless recursion. I haven't sought the logic that makes this all work together.; - [ ] add tests. probably some of the existing ones will break for only calling one mbis property but checking volrat. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2273
https://github.com/psi4/psi4/pull/2273:1002,Testability,test,tests,1002,"## Description; This is a start to addressing #2272 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `MBIS_CHARGES` and `MBIS_VOLUME_RATIOS` are now separate oeprop tasks to the user but still reusing code.; - [ ] `oeprop(wfn, ""MBIS_VOLUME_RATIOS"")` should be fine (indep oeprop fn), but `set scf_properties mbis_volume_ratios; energy(""scf"")` will still fail as #2272 reported because those are `OEProp` class instantiations called from proc.py, and the free atom volumes aren't available. The oeprop.cc code could exit gracefully when free atom volumes aren't available, but having different properties lists for the two calling routes isn't good.; - [ ] so why not add the loc from oeprop() to `OEProp`s in proc.py so that atom volumes are available? nice thought, but the fn that produces them itself calls oeprop() and energy() and descends into endless recursion. I haven't sought the logic that makes this all work together.; - [ ] add tests. probably some of the existing ones will break for only calling one mbis property but checking volrat. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2273
https://github.com/psi4/psi4/pull/2273:1131,Testability,Test,Tests,1131,"## Description; This is a start to addressing #2272 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `MBIS_CHARGES` and `MBIS_VOLUME_RATIOS` are now separate oeprop tasks to the user but still reusing code.; - [ ] `oeprop(wfn, ""MBIS_VOLUME_RATIOS"")` should be fine (indep oeprop fn), but `set scf_properties mbis_volume_ratios; energy(""scf"")` will still fail as #2272 reported because those are `OEProp` class instantiations called from proc.py, and the free atom volumes aren't available. The oeprop.cc code could exit gracefully when free atom volumes aren't available, but having different properties lists for the two calling routes isn't good.; - [ ] so why not add the loc from oeprop() to `OEProp`s in proc.py so that atom volumes are available? nice thought, but the fn that produces them itself calls oeprop() and energy() and descends into endless recursion. I haven't sought the logic that makes this all work together.; - [ ] add tests. probably some of the existing ones will break for only calling one mbis property but checking volrat. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2273
https://github.com/psi4/psi4/pull/2273:1205,Testability,test,tests,1205,"## Description; This is a start to addressing #2272 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `MBIS_CHARGES` and `MBIS_VOLUME_RATIOS` are now separate oeprop tasks to the user but still reusing code.; - [ ] `oeprop(wfn, ""MBIS_VOLUME_RATIOS"")` should be fine (indep oeprop fn), but `set scf_properties mbis_volume_ratios; energy(""scf"")` will still fail as #2272 reported because those are `OEProp` class instantiations called from proc.py, and the free atom volumes aren't available. The oeprop.cc code could exit gracefully when free atom volumes aren't available, but having different properties lists for the two calling routes isn't good.; - [ ] so why not add the loc from oeprop() to `OEProp`s in proc.py so that atom volumes are available? nice thought, but the fn that produces them itself calls oeprop() and energy() and descends into endless recursion. I haven't sought the logic that makes this all work together.; - [ ] add tests. probably some of the existing ones will break for only calling one mbis property but checking volrat. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2273
https://github.com/psi4/psi4/pull/2273:1296,Testability,test,tests,1296,"## Description; This is a start to addressing #2272 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `MBIS_CHARGES` and `MBIS_VOLUME_RATIOS` are now separate oeprop tasks to the user but still reusing code.; - [ ] `oeprop(wfn, ""MBIS_VOLUME_RATIOS"")` should be fine (indep oeprop fn), but `set scf_properties mbis_volume_ratios; energy(""scf"")` will still fail as #2272 reported because those are `OEProp` class instantiations called from proc.py, and the free atom volumes aren't available. The oeprop.cc code could exit gracefully when free atom volumes aren't available, but having different properties lists for the two calling routes isn't good.; - [ ] so why not add the loc from oeprop() to `OEProp`s in proc.py so that atom volumes are available? nice thought, but the fn that produces them itself calls oeprop() and energy() and descends into endless recursion. I haven't sought the logic that makes this all work together.; - [ ] add tests. probably some of the existing ones will break for only calling one mbis property but checking volrat. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2273
https://github.com/psi4/psi4/issues/2275:450,Energy Efficiency,energy,energy,450,"I was having a problem with DF-CCSD(T) calculations. The issue was that the CC density was not present in the fchk file. Only the SCF density was printed out. My input file looks like this:; ; ```; memory 55 GB. molecule water {; 0 1; O 0.000000 0.119325 0.000000; H 0.763133 -0.477420 0.000000; H -0.763133 -0.477177 0.000000. symmetry c1; no_com; no_reorient; }. set {; basis aug-cc-pVTZ; scf_type df; cc_type df; }. set_num_threads(6). #e, wfn1 = energy('ccsd(t)', return_wfn=True,); grad, wfn = gradient('ccsd(t)', return_wfn=True). fchk_writer = psi4.FCHKWriter(wfn); fchk_writer.write('water.fchk'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2275
https://github.com/psi4/psi4/issues/2276:263,Integrability,interface,interface,263,"Carried forward from [forum topic](http://forum.psicode.org/t/computing-dipole-moment-from-ccsd-t/2252). After the `dfocc` re-sync, `dfocc` should be connected to properties. The hard electronic structure part of CCSD(T) dipoles is already done, so let's get the interface right. Do **NOT** start on this issue until after the re-sync.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2276
https://github.com/psi4/psi4/pull/2277:591,Deployability,Update,Update,591,"## Description; The fcidump.py file writes out 2e integrals by calling fcidump_helper.cc, in the `%28.20E%4d%4d%4d%4d` (cpp) format, and in fcidump.py the additional 1- and 0- electron integrals are written in the `{:29.20E} {:4d} {:4d} {:4d} {:4d}` (Python) format. The whitespace in between the Python format string causes the 1/0e integrals fields to be 1 wider than the 2e integrals, causing problems in reading the file. E.g. in Fortran the 2e integrals can be read normally by `READ(*,'(1X,G28.20E2,4I4)') Z,I,J,K,L`, but will fail to read the 1/0e integrals properly. ## Todos; - [x] Update fcidump.py; - [x] Update fcidump test outputs . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2277
https://github.com/psi4/psi4/pull/2277:616,Deployability,Update,Update,616,"## Description; The fcidump.py file writes out 2e integrals by calling fcidump_helper.cc, in the `%28.20E%4d%4d%4d%4d` (cpp) format, and in fcidump.py the additional 1- and 0- electron integrals are written in the `{:29.20E} {:4d} {:4d} {:4d} {:4d}` (Python) format. The whitespace in between the Python format string causes the 1/0e integrals fields to be 1 wider than the 2e integrals, causing problems in reading the file. E.g. in Fortran the 2e integrals can be read normally by `READ(*,'(1X,G28.20E2,4I4)') Z,I,J,K,L`, but will fail to read the 1/0e integrals properly. ## Todos; - [x] Update fcidump.py; - [x] Update fcidump test outputs . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2277
https://github.com/psi4/psi4/pull/2277:631,Testability,test,test,631,"## Description; The fcidump.py file writes out 2e integrals by calling fcidump_helper.cc, in the `%28.20E%4d%4d%4d%4d` (cpp) format, and in fcidump.py the additional 1- and 0- electron integrals are written in the `{:29.20E} {:4d} {:4d} {:4d} {:4d}` (Python) format. The whitespace in between the Python format string causes the 1/0e integrals fields to be 1 wider than the 2e integrals, causing problems in reading the file. E.g. in Fortran the 2e integrals can be read normally by `READ(*,'(1X,G28.20E2,4I4)') Z,I,J,K,L`, but will fail to read the 1/0e integrals properly. ## Todos; - [x] Update fcidump.py; - [x] Update fcidump test outputs . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2277
https://github.com/psi4/psi4/pull/2277:666,Testability,Test,Tests,666,"## Description; The fcidump.py file writes out 2e integrals by calling fcidump_helper.cc, in the `%28.20E%4d%4d%4d%4d` (cpp) format, and in fcidump.py the additional 1- and 0- electron integrals are written in the `{:29.20E} {:4d} {:4d} {:4d} {:4d}` (Python) format. The whitespace in between the Python format string causes the 1/0e integrals fields to be 1 wider than the 2e integrals, causing problems in reading the file. E.g. in Fortran the 2e integrals can be read normally by `READ(*,'(1X,G28.20E2,4I4)') Z,I,J,K,L`, but will fail to read the 1/0e integrals properly. ## Todos; - [x] Update fcidump.py; - [x] Update fcidump test outputs . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2277
https://github.com/psi4/psi4/pull/2277:740,Testability,test,tests,740,"## Description; The fcidump.py file writes out 2e integrals by calling fcidump_helper.cc, in the `%28.20E%4d%4d%4d%4d` (cpp) format, and in fcidump.py the additional 1- and 0- electron integrals are written in the `{:29.20E} {:4d} {:4d} {:4d} {:4d}` (Python) format. The whitespace in between the Python format string causes the 1/0e integrals fields to be 1 wider than the 2e integrals, causing problems in reading the file. E.g. in Fortran the 2e integrals can be read normally by `READ(*,'(1X,G28.20E2,4I4)') Z,I,J,K,L`, but will fail to read the 1/0e integrals properly. ## Todos; - [x] Update fcidump.py; - [x] Update fcidump test outputs . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2277
https://github.com/psi4/psi4/pull/2277:831,Testability,test,tests,831,"## Description; The fcidump.py file writes out 2e integrals by calling fcidump_helper.cc, in the `%28.20E%4d%4d%4d%4d` (cpp) format, and in fcidump.py the additional 1- and 0- electron integrals are written in the `{:29.20E} {:4d} {:4d} {:4d} {:4d}` (Python) format. The whitespace in between the Python format string causes the 1/0e integrals fields to be 1 wider than the 2e integrals, causing problems in reading the file. E.g. in Fortran the 2e integrals can be read normally by `READ(*,'(1X,G28.20E2,4I4)') Z,I,J,K,L`, but will fail to read the 1/0e integrals properly. ## Todos; - [x] Update fcidump.py; - [x] Update fcidump test outputs . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2277
https://github.com/psi4/psi4/issues/2279:626,Availability,error,error,626,"I am seeing large differences in wB97X-D3BJ energy between 1.4.0 and 1.3.2, and between different 1.4.0 installations. It seems that installing 1.4.0 with `-c anaconda` can cause the differences between 1.4.0 installations, possibly because it replaces the default linear algebra libraries with MKL versions. Such an installation runs 50% faster, but also gives wrong energies in some situations, sometimes by more than a Hartree. I've only seen the problem with clusters and large basis sets, which suggests it's a numerical issue. I've tested PBE, M06-2X, and wB97X-D3BJ, and so far it only appears in wB97X-D3BJ. Also, the error goes away if less RAM is provided (say, 10 GB instead of 32 GB). This suggests it may be related to the new ability of Psi4 1.4.0 to do in-core omega integrals (https://github.com/psi4/psi4/pull/1749). Working env: `conda create --name psi4_v1.4.0 python=3.8 psi4 psi4-rt -c psi4 -y`. Broken env: `conda create --name psi4_v1.4.0_mkl python=3.8 psi4 psi4-rt -c psi4 -c anaconda -y`. Example script: https://drive.google.com/file/d/1c0wZO47h9ooRXQMzTW9eETLWozo4MT_O/view?usp=sharing. To reproduce: install psi4 via conda with `-c anaconda` as shown, activate the env, then run the provided script `python psi4_1.4.0_omega_issue.py`. The energy should be approximately -1965.2319, but will instead give something like -1963.3023.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2279
https://github.com/psi4/psi4/issues/2279:104,Deployability,install,installations,104,"I am seeing large differences in wB97X-D3BJ energy between 1.4.0 and 1.3.2, and between different 1.4.0 installations. It seems that installing 1.4.0 with `-c anaconda` can cause the differences between 1.4.0 installations, possibly because it replaces the default linear algebra libraries with MKL versions. Such an installation runs 50% faster, but also gives wrong energies in some situations, sometimes by more than a Hartree. I've only seen the problem with clusters and large basis sets, which suggests it's a numerical issue. I've tested PBE, M06-2X, and wB97X-D3BJ, and so far it only appears in wB97X-D3BJ. Also, the error goes away if less RAM is provided (say, 10 GB instead of 32 GB). This suggests it may be related to the new ability of Psi4 1.4.0 to do in-core omega integrals (https://github.com/psi4/psi4/pull/1749). Working env: `conda create --name psi4_v1.4.0 python=3.8 psi4 psi4-rt -c psi4 -y`. Broken env: `conda create --name psi4_v1.4.0_mkl python=3.8 psi4 psi4-rt -c psi4 -c anaconda -y`. Example script: https://drive.google.com/file/d/1c0wZO47h9ooRXQMzTW9eETLWozo4MT_O/view?usp=sharing. To reproduce: install psi4 via conda with `-c anaconda` as shown, activate the env, then run the provided script `python psi4_1.4.0_omega_issue.py`. The energy should be approximately -1965.2319, but will instead give something like -1963.3023.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2279
https://github.com/psi4/psi4/issues/2279:133,Deployability,install,installing,133,"I am seeing large differences in wB97X-D3BJ energy between 1.4.0 and 1.3.2, and between different 1.4.0 installations. It seems that installing 1.4.0 with `-c anaconda` can cause the differences between 1.4.0 installations, possibly because it replaces the default linear algebra libraries with MKL versions. Such an installation runs 50% faster, but also gives wrong energies in some situations, sometimes by more than a Hartree. I've only seen the problem with clusters and large basis sets, which suggests it's a numerical issue. I've tested PBE, M06-2X, and wB97X-D3BJ, and so far it only appears in wB97X-D3BJ. Also, the error goes away if less RAM is provided (say, 10 GB instead of 32 GB). This suggests it may be related to the new ability of Psi4 1.4.0 to do in-core omega integrals (https://github.com/psi4/psi4/pull/1749). Working env: `conda create --name psi4_v1.4.0 python=3.8 psi4 psi4-rt -c psi4 -y`. Broken env: `conda create --name psi4_v1.4.0_mkl python=3.8 psi4 psi4-rt -c psi4 -c anaconda -y`. Example script: https://drive.google.com/file/d/1c0wZO47h9ooRXQMzTW9eETLWozo4MT_O/view?usp=sharing. To reproduce: install psi4 via conda with `-c anaconda` as shown, activate the env, then run the provided script `python psi4_1.4.0_omega_issue.py`. The energy should be approximately -1965.2319, but will instead give something like -1963.3023.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2279
https://github.com/psi4/psi4/issues/2279:209,Deployability,install,installations,209,"I am seeing large differences in wB97X-D3BJ energy between 1.4.0 and 1.3.2, and between different 1.4.0 installations. It seems that installing 1.4.0 with `-c anaconda` can cause the differences between 1.4.0 installations, possibly because it replaces the default linear algebra libraries with MKL versions. Such an installation runs 50% faster, but also gives wrong energies in some situations, sometimes by more than a Hartree. I've only seen the problem with clusters and large basis sets, which suggests it's a numerical issue. I've tested PBE, M06-2X, and wB97X-D3BJ, and so far it only appears in wB97X-D3BJ. Also, the error goes away if less RAM is provided (say, 10 GB instead of 32 GB). This suggests it may be related to the new ability of Psi4 1.4.0 to do in-core omega integrals (https://github.com/psi4/psi4/pull/1749). Working env: `conda create --name psi4_v1.4.0 python=3.8 psi4 psi4-rt -c psi4 -y`. Broken env: `conda create --name psi4_v1.4.0_mkl python=3.8 psi4 psi4-rt -c psi4 -c anaconda -y`. Example script: https://drive.google.com/file/d/1c0wZO47h9ooRXQMzTW9eETLWozo4MT_O/view?usp=sharing. To reproduce: install psi4 via conda with `-c anaconda` as shown, activate the env, then run the provided script `python psi4_1.4.0_omega_issue.py`. The energy should be approximately -1965.2319, but will instead give something like -1963.3023.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2279
https://github.com/psi4/psi4/issues/2279:317,Deployability,install,installation,317,"I am seeing large differences in wB97X-D3BJ energy between 1.4.0 and 1.3.2, and between different 1.4.0 installations. It seems that installing 1.4.0 with `-c anaconda` can cause the differences between 1.4.0 installations, possibly because it replaces the default linear algebra libraries with MKL versions. Such an installation runs 50% faster, but also gives wrong energies in some situations, sometimes by more than a Hartree. I've only seen the problem with clusters and large basis sets, which suggests it's a numerical issue. I've tested PBE, M06-2X, and wB97X-D3BJ, and so far it only appears in wB97X-D3BJ. Also, the error goes away if less RAM is provided (say, 10 GB instead of 32 GB). This suggests it may be related to the new ability of Psi4 1.4.0 to do in-core omega integrals (https://github.com/psi4/psi4/pull/1749). Working env: `conda create --name psi4_v1.4.0 python=3.8 psi4 psi4-rt -c psi4 -y`. Broken env: `conda create --name psi4_v1.4.0_mkl python=3.8 psi4 psi4-rt -c psi4 -c anaconda -y`. Example script: https://drive.google.com/file/d/1c0wZO47h9ooRXQMzTW9eETLWozo4MT_O/view?usp=sharing. To reproduce: install psi4 via conda with `-c anaconda` as shown, activate the env, then run the provided script `python psi4_1.4.0_omega_issue.py`. The energy should be approximately -1965.2319, but will instead give something like -1963.3023.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2279
https://github.com/psi4/psi4/issues/2279:1129,Deployability,install,install,1129,"I am seeing large differences in wB97X-D3BJ energy between 1.4.0 and 1.3.2, and between different 1.4.0 installations. It seems that installing 1.4.0 with `-c anaconda` can cause the differences between 1.4.0 installations, possibly because it replaces the default linear algebra libraries with MKL versions. Such an installation runs 50% faster, but also gives wrong energies in some situations, sometimes by more than a Hartree. I've only seen the problem with clusters and large basis sets, which suggests it's a numerical issue. I've tested PBE, M06-2X, and wB97X-D3BJ, and so far it only appears in wB97X-D3BJ. Also, the error goes away if less RAM is provided (say, 10 GB instead of 32 GB). This suggests it may be related to the new ability of Psi4 1.4.0 to do in-core omega integrals (https://github.com/psi4/psi4/pull/1749). Working env: `conda create --name psi4_v1.4.0 python=3.8 psi4 psi4-rt -c psi4 -y`. Broken env: `conda create --name psi4_v1.4.0_mkl python=3.8 psi4 psi4-rt -c psi4 -c anaconda -y`. Example script: https://drive.google.com/file/d/1c0wZO47h9ooRXQMzTW9eETLWozo4MT_O/view?usp=sharing. To reproduce: install psi4 via conda with `-c anaconda` as shown, activate the env, then run the provided script `python psi4_1.4.0_omega_issue.py`. The energy should be approximately -1965.2319, but will instead give something like -1963.3023.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2279
https://github.com/psi4/psi4/issues/2279:44,Energy Efficiency,energy,energy,44,"I am seeing large differences in wB97X-D3BJ energy between 1.4.0 and 1.3.2, and between different 1.4.0 installations. It seems that installing 1.4.0 with `-c anaconda` can cause the differences between 1.4.0 installations, possibly because it replaces the default linear algebra libraries with MKL versions. Such an installation runs 50% faster, but also gives wrong energies in some situations, sometimes by more than a Hartree. I've only seen the problem with clusters and large basis sets, which suggests it's a numerical issue. I've tested PBE, M06-2X, and wB97X-D3BJ, and so far it only appears in wB97X-D3BJ. Also, the error goes away if less RAM is provided (say, 10 GB instead of 32 GB). This suggests it may be related to the new ability of Psi4 1.4.0 to do in-core omega integrals (https://github.com/psi4/psi4/pull/1749). Working env: `conda create --name psi4_v1.4.0 python=3.8 psi4 psi4-rt -c psi4 -y`. Broken env: `conda create --name psi4_v1.4.0_mkl python=3.8 psi4 psi4-rt -c psi4 -c anaconda -y`. Example script: https://drive.google.com/file/d/1c0wZO47h9ooRXQMzTW9eETLWozo4MT_O/view?usp=sharing. To reproduce: install psi4 via conda with `-c anaconda` as shown, activate the env, then run the provided script `python psi4_1.4.0_omega_issue.py`. The energy should be approximately -1965.2319, but will instead give something like -1963.3023.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2279
https://github.com/psi4/psi4/issues/2279:1268,Energy Efficiency,energy,energy,1268,"I am seeing large differences in wB97X-D3BJ energy between 1.4.0 and 1.3.2, and between different 1.4.0 installations. It seems that installing 1.4.0 with `-c anaconda` can cause the differences between 1.4.0 installations, possibly because it replaces the default linear algebra libraries with MKL versions. Such an installation runs 50% faster, but also gives wrong energies in some situations, sometimes by more than a Hartree. I've only seen the problem with clusters and large basis sets, which suggests it's a numerical issue. I've tested PBE, M06-2X, and wB97X-D3BJ, and so far it only appears in wB97X-D3BJ. Also, the error goes away if less RAM is provided (say, 10 GB instead of 32 GB). This suggests it may be related to the new ability of Psi4 1.4.0 to do in-core omega integrals (https://github.com/psi4/psi4/pull/1749). Working env: `conda create --name psi4_v1.4.0 python=3.8 psi4 psi4-rt -c psi4 -y`. Broken env: `conda create --name psi4_v1.4.0_mkl python=3.8 psi4 psi4-rt -c psi4 -c anaconda -y`. Example script: https://drive.google.com/file/d/1c0wZO47h9ooRXQMzTW9eETLWozo4MT_O/view?usp=sharing. To reproduce: install psi4 via conda with `-c anaconda` as shown, activate the env, then run the provided script `python psi4_1.4.0_omega_issue.py`. The energy should be approximately -1965.2319, but will instead give something like -1963.3023.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2279
https://github.com/psi4/psi4/issues/2279:538,Testability,test,tested,538,"I am seeing large differences in wB97X-D3BJ energy between 1.4.0 and 1.3.2, and between different 1.4.0 installations. It seems that installing 1.4.0 with `-c anaconda` can cause the differences between 1.4.0 installations, possibly because it replaces the default linear algebra libraries with MKL versions. Such an installation runs 50% faster, but also gives wrong energies in some situations, sometimes by more than a Hartree. I've only seen the problem with clusters and large basis sets, which suggests it's a numerical issue. I've tested PBE, M06-2X, and wB97X-D3BJ, and so far it only appears in wB97X-D3BJ. Also, the error goes away if less RAM is provided (say, 10 GB instead of 32 GB). This suggests it may be related to the new ability of Psi4 1.4.0 to do in-core omega integrals (https://github.com/psi4/psi4/pull/1749). Working env: `conda create --name psi4_v1.4.0 python=3.8 psi4 psi4-rt -c psi4 -y`. Broken env: `conda create --name psi4_v1.4.0_mkl python=3.8 psi4 psi4-rt -c psi4 -c anaconda -y`. Example script: https://drive.google.com/file/d/1c0wZO47h9ooRXQMzTW9eETLWozo4MT_O/view?usp=sharing. To reproduce: install psi4 via conda with `-c anaconda` as shown, activate the env, then run the provided script `python psi4_1.4.0_omega_issue.py`. The energy should be approximately -1965.2319, but will instead give something like -1963.3023.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2279
https://github.com/psi4/psi4/pull/2280:56,Availability,error,error,56,"## Description; Closes #1673. This PR fixes an indexing error causing the wrong orbitals to be scaled during fractional occupation, when there are multiple irreps. Now that the SCF module has its correctness errors fixed, I can get to some convergence improvements. ## Todos; - [x] Fixed a bug causing incorrect energies during fractional occupation for systems with point group symmetry. ## Checklist; - [x] Tests added for any newly working features; - [x] frac tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2280
https://github.com/psi4/psi4/pull/2280:208,Availability,error,errors,208,"## Description; Closes #1673. This PR fixes an indexing error causing the wrong orbitals to be scaled during fractional occupation, when there are multiple irreps. Now that the SCF module has its correctness errors fixed, I can get to some convergence improvements. ## Todos; - [x] Fixed a bug causing incorrect energies during fractional occupation for systems with point group symmetry. ## Checklist; - [x] Tests added for any newly working features; - [x] frac tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2280
https://github.com/psi4/psi4/pull/2280:409,Testability,Test,Tests,409,"## Description; Closes #1673. This PR fixes an indexing error causing the wrong orbitals to be scaled during fractional occupation, when there are multiple irreps. Now that the SCF module has its correctness errors fixed, I can get to some convergence improvements. ## Todos; - [x] Fixed a bug causing incorrect energies during fractional occupation for systems with point group symmetry. ## Checklist; - [x] Tests added for any newly working features; - [x] frac tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2280
https://github.com/psi4/psi4/pull/2280:464,Testability,test,tests,464,"## Description; Closes #1673. This PR fixes an indexing error causing the wrong orbitals to be scaled during fractional occupation, when there are multiple irreps. Now that the SCF module has its correctness errors fixed, I can get to some convergence improvements. ## Todos; - [x] Fixed a bug causing incorrect energies during fractional occupation for systems with point group symmetry. ## Checklist; - [x] Tests added for any newly working features; - [x] frac tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2280
https://github.com/psi4/psi4/issues/2281:157,Availability,error,error,157,"I follow the f-sapt example in https://psicode.org/psi4manual/master/fisapt.html#i-sapt-a-representative-example.; When I run the fsapt.py, it reported such error:; Traceback (most recent call last):; File ""fsapt.py"", line 1048, in <module>; stuff = compute_fsapt(dirname, False); File ""fsapt.py"", line 888, in compute_fsapt; order2 = extract_order2_fsapt(osapt, total_ws['A'], total_ws['B'], frags); File ""fsapt.py"", line 496, in extract_order2_fsapt; val = np.einsum('i,ij,j', valueA, value, valueB); File ""<__array_function__ internals>"", line 6, in einsum; File ""/pubhome/zchen02/miniconda3/envs/psi4/lib/python3.7/site-packages/numpy/core/einsumfunc.py"", line 1361, in einsum; return c_einsum(*operands, **kwargs); ValueError: operands could not be broadcast together with remapped shapes [original->remapped]: (52,)->(52,newaxis) (51,51)->(51,51) (52,)->(52) ; So I wonder is this a bug in program or somthing other?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2281
https://github.com/psi4/psi4/issues/2282:646,Deployability,update,update,646,"The following input file crashes; ```; molecule {; F; F 1 1.4613; }. set freeze_core true; set basis cc-pvdz; set detci ex_level 5 . energy('ci'); ```. Traceback:; ```; Traceback (most recent call last):; File ""/opt/psi/4/master/bin/psi4"", line 331, in <module>; exec(content); File ""<string>"", line 28, in <module>; File ""/opt/psi/4/master/lib/psi4/driver/driver.py"", line 570, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/opt/psi/4/master/lib/psi4/driver/procrouting/proc.py"", line 3600, in run_detci; level = kwargs['level']. KeyError: 'level'; ```. If this isn't intended usage, we need to update docs.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2282
https://github.com/psi4/psi4/issues/2282:133,Energy Efficiency,energy,energy,133,"The following input file crashes; ```; molecule {; F; F 1 1.4613; }. set freeze_core true; set basis cc-pvdz; set detci ex_level 5 . energy('ci'); ```. Traceback:; ```; Traceback (most recent call last):; File ""/opt/psi/4/master/bin/psi4"", line 331, in <module>; exec(content); File ""<string>"", line 28, in <module>; File ""/opt/psi/4/master/lib/psi4/driver/driver.py"", line 570, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/opt/psi/4/master/lib/psi4/driver/procrouting/proc.py"", line 3600, in run_detci; level = kwargs['level']. KeyError: 'level'; ```. If this isn't intended usage, we need to update docs.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2282
https://github.com/psi4/psi4/issues/2282:382,Energy Efficiency,energy,energy,382,"The following input file crashes; ```; molecule {; F; F 1 1.4613; }. set freeze_core true; set basis cc-pvdz; set detci ex_level 5 . energy('ci'); ```. Traceback:; ```; Traceback (most recent call last):; File ""/opt/psi/4/master/bin/psi4"", line 331, in <module>; exec(content); File ""<string>"", line 28, in <module>; File ""/opt/psi/4/master/lib/psi4/driver/driver.py"", line 570, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/opt/psi/4/master/lib/psi4/driver/procrouting/proc.py"", line 3600, in run_detci; level = kwargs['level']. KeyError: 'level'; ```. If this isn't intended usage, we need to update docs.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2282
https://github.com/psi4/psi4/issues/2282:408,Energy Efficiency,energy,energy,408,"The following input file crashes; ```; molecule {; F; F 1 1.4613; }. set freeze_core true; set basis cc-pvdz; set detci ex_level 5 . energy('ci'); ```. Traceback:; ```; Traceback (most recent call last):; File ""/opt/psi/4/master/bin/psi4"", line 331, in <module>; exec(content); File ""<string>"", line 28, in <module>; File ""/opt/psi/4/master/lib/psi4/driver/driver.py"", line 570, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/opt/psi/4/master/lib/psi4/driver/procrouting/proc.py"", line 3600, in run_detci; level = kwargs['level']. KeyError: 'level'; ```. If this isn't intended usage, we need to update docs.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2282
https://github.com/psi4/psi4/pull/2283:241,Testability,Test,Tests,241,## Description; This addresses at least one of the problems (see details below) associated with #2279. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Fix #2279. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2283
https://github.com/psi4/psi4/pull/2283:315,Testability,test,tests,315,## Description; This addresses at least one of the problems (see details below) associated with #2279. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Fix #2279. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2283
https://github.com/psi4/psi4/pull/2283:406,Testability,test,tests,406,## Description; This addresses at least one of the problems (see details below) associated with #2279. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Fix #2279. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2283
https://github.com/psi4/psi4/issues/2284:24,Testability,test,tests,24,"Discovered when running tests for a future PR. #2280 broke the `frac-traverse` test. It tried to set a fractional occupation of 0, which that test expressly disallowed. I'll need to figure out why `frac_traverse` needs it and decide what the appropriate remedy is.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2284
https://github.com/psi4/psi4/issues/2284:79,Testability,test,test,79,"Discovered when running tests for a future PR. #2280 broke the `frac-traverse` test. It tried to set a fractional occupation of 0, which that test expressly disallowed. I'll need to figure out why `frac_traverse` needs it and decide what the appropriate remedy is.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2284
https://github.com/psi4/psi4/issues/2284:142,Testability,test,test,142,"Discovered when running tests for a future PR. #2280 broke the `frac-traverse` test. It tried to set a fractional occupation of 0, which that test expressly disallowed. I'll need to figure out why `frac_traverse` needs it and decide what the appropriate remedy is.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2284
https://github.com/psi4/psi4/pull/2285:111,Testability,test,tests,111,"## Description; Cleans a function I came across when working on some SCF improvements. ## Checklist; - [x] All tests pass except `frac-traverse` (see 2284, unrelated to this PR). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2285
https://github.com/psi4/psi4/issues/2286:207,Availability,avail,available,207,"I was wondering about the status of computing gradients for VV10. I see this was planned for inclusion in #1233, but got put off until a later PR. I can't find any record that it was ever implemented. Is it available now? If not, are there any plans to implement it?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2286
https://github.com/psi4/psi4/issues/2287:79,Availability,down,downloaded,79,"I'm trying to optimize the geometry of ethylammonium cation using psi4. I have downloaded the latest version and an optimization of a smaller molecule ran with no trouble. This one fails with the error; qcelemental.exceptions.MoleculeFormatError: Unprocessable Molecule remanents under [psi4, xyz, xyz+, psi4+]:; The complete output file is attached. I don't understand the error message. Can anyone explain it to me, please?. Anthony Stone. [ethylammonium.txt](https://github.com/psi4/psi4/files/7090210/ethylammonium.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2287
https://github.com/psi4/psi4/issues/2287:196,Availability,error,error,196,"I'm trying to optimize the geometry of ethylammonium cation using psi4. I have downloaded the latest version and an optimization of a smaller molecule ran with no trouble. This one fails with the error; qcelemental.exceptions.MoleculeFormatError: Unprocessable Molecule remanents under [psi4, xyz, xyz+, psi4+]:; The complete output file is attached. I don't understand the error message. Can anyone explain it to me, please?. Anthony Stone. [ethylammonium.txt](https://github.com/psi4/psi4/files/7090210/ethylammonium.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2287
https://github.com/psi4/psi4/issues/2287:374,Availability,error,error,374,"I'm trying to optimize the geometry of ethylammonium cation using psi4. I have downloaded the latest version and an optimization of a smaller molecule ran with no trouble. This one fails with the error; qcelemental.exceptions.MoleculeFormatError: Unprocessable Molecule remanents under [psi4, xyz, xyz+, psi4+]:; The complete output file is attached. I don't understand the error message. Can anyone explain it to me, please?. Anthony Stone. [ethylammonium.txt](https://github.com/psi4/psi4/files/7090210/ethylammonium.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2287
https://github.com/psi4/psi4/issues/2287:380,Integrability,message,message,380,"I'm trying to optimize the geometry of ethylammonium cation using psi4. I have downloaded the latest version and an optimization of a smaller molecule ran with no trouble. This one fails with the error; qcelemental.exceptions.MoleculeFormatError: Unprocessable Molecule remanents under [psi4, xyz, xyz+, psi4+]:; The complete output file is attached. I don't understand the error message. Can anyone explain it to me, please?. Anthony Stone. [ethylammonium.txt](https://github.com/psi4/psi4/files/7090210/ethylammonium.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2287
https://github.com/psi4/psi4/issues/2287:14,Performance,optimiz,optimize,14,"I'm trying to optimize the geometry of ethylammonium cation using psi4. I have downloaded the latest version and an optimization of a smaller molecule ran with no trouble. This one fails with the error; qcelemental.exceptions.MoleculeFormatError: Unprocessable Molecule remanents under [psi4, xyz, xyz+, psi4+]:; The complete output file is attached. I don't understand the error message. Can anyone explain it to me, please?. Anthony Stone. [ethylammonium.txt](https://github.com/psi4/psi4/files/7090210/ethylammonium.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2287
https://github.com/psi4/psi4/issues/2287:116,Performance,optimiz,optimization,116,"I'm trying to optimize the geometry of ethylammonium cation using psi4. I have downloaded the latest version and an optimization of a smaller molecule ran with no trouble. This one fails with the error; qcelemental.exceptions.MoleculeFormatError: Unprocessable Molecule remanents under [psi4, xyz, xyz+, psi4+]:; The complete output file is attached. I don't understand the error message. Can anyone explain it to me, please?. Anthony Stone. [ethylammonium.txt](https://github.com/psi4/psi4/files/7090210/ethylammonium.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2287
https://github.com/psi4/psi4/issues/2288:70,Availability,error,error,70,"Hi,. Thanks for this great open source program!. We got an unexpected error when running a calculation on a water cluster recently. It seems to give a segmentation fault immediately before the start of the SCF iterations. I've attached the input and output files and the output to screen. We have run some smaller water clusters where the error does not occur. [input.txt](https://github.com/psi4/psi4/files/7097168/input.txt); [output.txt](https://github.com/psi4/psi4/files/7097170/output.txt); [output_to_screen.txt](https://github.com/psi4/psi4/files/7097171/output_to_screen.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2288
https://github.com/psi4/psi4/issues/2288:164,Availability,fault,fault,164,"Hi,. Thanks for this great open source program!. We got an unexpected error when running a calculation on a water cluster recently. It seems to give a segmentation fault immediately before the start of the SCF iterations. I've attached the input and output files and the output to screen. We have run some smaller water clusters where the error does not occur. [input.txt](https://github.com/psi4/psi4/files/7097168/input.txt); [output.txt](https://github.com/psi4/psi4/files/7097170/output.txt); [output_to_screen.txt](https://github.com/psi4/psi4/files/7097171/output_to_screen.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2288
https://github.com/psi4/psi4/issues/2288:339,Availability,error,error,339,"Hi,. Thanks for this great open source program!. We got an unexpected error when running a calculation on a water cluster recently. It seems to give a segmentation fault immediately before the start of the SCF iterations. I've attached the input and output files and the output to screen. We have run some smaller water clusters where the error does not occur. [input.txt](https://github.com/psi4/psi4/files/7097168/input.txt); [output.txt](https://github.com/psi4/psi4/files/7097170/output.txt); [output_to_screen.txt](https://github.com/psi4/psi4/files/7097171/output_to_screen.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2288
https://github.com/psi4/psi4/issues/2289:13,Testability,test,test,13,"We have zero test coverage on `frac.py::nuke_frac`, which allowed this to be inadvertently broken by #2280.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2289
https://github.com/psi4/psi4/pull/2290:1357,Testability,test,test,1357,"## Short Description; This PR reverts part of #2280 and restores the ability of `frac` to handle zero occupation number. At the cost of storing extra C matrices, this fixes a pre-#2280 bug in the handling of zero occupation number. Closes #2284. ## Long Description; The `frac` code is designed to allow SCF with fractional occupation numbers. Physically, this is an ensemble of Slater determinants, where the probabilities of a given orbital being occupied are uncorrelated. This is implemented by changing the C matrix from meaning ""thing that contains orbitals"" to ""thing that produces the density"", and incorporating the occupation numbers into the definition of the C matrix by multiplying by the occupation numbers. These are divided out after SCF to restore the original meaning of C. Now, in the case of zero occupation number, multiplying by zero cannot be inverted, so the pre-#2280 code just left the orbitals. This is nonsense behavior, and #2280 banned the case of zero occupation number: the orbital should never have been included in `frac` in the first place if your use case was to describe a single ensemble. What I didn't realize was that there were legitimate use cases for this: if you had multiple ensembles and wanted to track what happens as the occupation number of one goes to zero. This is used by `frac_traverse`, so I broke the test. This slipped through the cracks because the test wasn't labeled as a frac test. This PR allows frac to treat zero occupation number, and it corrects the previous pathological handling of the C matrix with zero occupation number by changing how we generate the restored C matrix: instead of inverting multiplication, we store the matrix where we never multiplied obitals by occupation numbers in the first place. This change keeps the symmetry fixes of #2280. ## Checklist; - [x] frac tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2290
https://github.com/psi4/psi4/pull/2290:1407,Testability,test,test,1407,"## Short Description; This PR reverts part of #2280 and restores the ability of `frac` to handle zero occupation number. At the cost of storing extra C matrices, this fixes a pre-#2280 bug in the handling of zero occupation number. Closes #2284. ## Long Description; The `frac` code is designed to allow SCF with fractional occupation numbers. Physically, this is an ensemble of Slater determinants, where the probabilities of a given orbital being occupied are uncorrelated. This is implemented by changing the C matrix from meaning ""thing that contains orbitals"" to ""thing that produces the density"", and incorporating the occupation numbers into the definition of the C matrix by multiplying by the occupation numbers. These are divided out after SCF to restore the original meaning of C. Now, in the case of zero occupation number, multiplying by zero cannot be inverted, so the pre-#2280 code just left the orbitals. This is nonsense behavior, and #2280 banned the case of zero occupation number: the orbital should never have been included in `frac` in the first place if your use case was to describe a single ensemble. What I didn't realize was that there were legitimate use cases for this: if you had multiple ensembles and wanted to track what happens as the occupation number of one goes to zero. This is used by `frac_traverse`, so I broke the test. This slipped through the cracks because the test wasn't labeled as a frac test. This PR allows frac to treat zero occupation number, and it corrects the previous pathological handling of the C matrix with zero occupation number by changing how we generate the restored C matrix: instead of inverting multiplication, we store the matrix where we never multiplied obitals by occupation numbers in the first place. This change keeps the symmetry fixes of #2280. ## Checklist; - [x] frac tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2290
https://github.com/psi4/psi4/pull/2290:1437,Testability,test,test,1437,"## Short Description; This PR reverts part of #2280 and restores the ability of `frac` to handle zero occupation number. At the cost of storing extra C matrices, this fixes a pre-#2280 bug in the handling of zero occupation number. Closes #2284. ## Long Description; The `frac` code is designed to allow SCF with fractional occupation numbers. Physically, this is an ensemble of Slater determinants, where the probabilities of a given orbital being occupied are uncorrelated. This is implemented by changing the C matrix from meaning ""thing that contains orbitals"" to ""thing that produces the density"", and incorporating the occupation numbers into the definition of the C matrix by multiplying by the occupation numbers. These are divided out after SCF to restore the original meaning of C. Now, in the case of zero occupation number, multiplying by zero cannot be inverted, so the pre-#2280 code just left the orbitals. This is nonsense behavior, and #2280 banned the case of zero occupation number: the orbital should never have been included in `frac` in the first place if your use case was to describe a single ensemble. What I didn't realize was that there were legitimate use cases for this: if you had multiple ensembles and wanted to track what happens as the occupation number of one goes to zero. This is used by `frac_traverse`, so I broke the test. This slipped through the cracks because the test wasn't labeled as a frac test. This PR allows frac to treat zero occupation number, and it corrects the previous pathological handling of the C matrix with zero occupation number by changing how we generate the restored C matrix: instead of inverting multiplication, we store the matrix where we never multiplied obitals by occupation numbers in the first place. This change keeps the symmetry fixes of #2280. ## Checklist; - [x] frac tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2290
https://github.com/psi4/psi4/pull/2290:1847,Testability,test,tests,1847,"## Short Description; This PR reverts part of #2280 and restores the ability of `frac` to handle zero occupation number. At the cost of storing extra C matrices, this fixes a pre-#2280 bug in the handling of zero occupation number. Closes #2284. ## Long Description; The `frac` code is designed to allow SCF with fractional occupation numbers. Physically, this is an ensemble of Slater determinants, where the probabilities of a given orbital being occupied are uncorrelated. This is implemented by changing the C matrix from meaning ""thing that contains orbitals"" to ""thing that produces the density"", and incorporating the occupation numbers into the definition of the C matrix by multiplying by the occupation numbers. These are divided out after SCF to restore the original meaning of C. Now, in the case of zero occupation number, multiplying by zero cannot be inverted, so the pre-#2280 code just left the orbitals. This is nonsense behavior, and #2280 banned the case of zero occupation number: the orbital should never have been included in `frac` in the first place if your use case was to describe a single ensemble. What I didn't realize was that there were legitimate use cases for this: if you had multiple ensembles and wanted to track what happens as the occupation number of one goes to zero. This is used by `frac_traverse`, so I broke the test. This slipped through the cracks because the test wasn't labeled as a frac test. This PR allows frac to treat zero occupation number, and it corrects the previous pathological handling of the C matrix with zero occupation number by changing how we generate the restored C matrix: instead of inverting multiplication, we store the matrix where we never multiplied obitals by occupation numbers in the first place. This change keeps the symmetry fixes of #2280. ## Checklist; - [x] frac tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2290
https://github.com/psi4/psi4/issues/2291:306,Availability,error,error,306,"As the title stated, I want to perform fsapt calculation on a system that contains iodine atoms. At the begining I used the aug-cc-tzvp but it didn't contain the parameter for iodine.So I use the basis set def2-tzvp which contains the parameter for iodine. But when I run the calculation, it sent out such error message:; ```; Traceback (most recent call last):; File ""/pubhome/zchen02/miniconda3/envs/psi4/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 141, in <module>; File ""/pubhome/zchen02/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/pubhome/zchen02/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/procrouting/proc.py"", line 3631, in run_fisapt; core.get_global_option(""MINAO_BASIS"")); File ""/pubhome/zchen02/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/p4util/python_helpers.py"", line 80, in _pybuild_basis; mol.to_dict(), key, resolved_target, fitrole, other, return_dict=True, return_atomlist=return_atomlist); File ""/pubhome/zchen02/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/qcdb/libmintsbasisset.py"", line 679, in pyconstruct; verbose=verbose); File ""/pubhome/zchen02/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/qcdb/libmintsbasisset.py"", line 897, in construct; (at + 1, key, text2)). psi4.driver.qcdb.exceptions.BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 106 for key BASIS among:; Shell Entries: ['I']; Basis Sets: [('CC-PVTZ-MINAO', 'CC-PVTZ-MINAO', None)]; ```; Is there any method to solve this problem?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2291
https://github.com/psi4/psi4/issues/2291:606,Energy Efficiency,energy,energy,606,"As the title stated, I want to perform fsapt calculation on a system that contains iodine atoms. At the begining I used the aug-cc-tzvp but it didn't contain the parameter for iodine.So I use the basis set def2-tzvp which contains the parameter for iodine. But when I run the calculation, it sent out such error message:; ```; Traceback (most recent call last):; File ""/pubhome/zchen02/miniconda3/envs/psi4/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 141, in <module>; File ""/pubhome/zchen02/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/pubhome/zchen02/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/procrouting/proc.py"", line 3631, in run_fisapt; core.get_global_option(""MINAO_BASIS"")); File ""/pubhome/zchen02/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/p4util/python_helpers.py"", line 80, in _pybuild_basis; mol.to_dict(), key, resolved_target, fitrole, other, return_dict=True, return_atomlist=return_atomlist); File ""/pubhome/zchen02/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/qcdb/libmintsbasisset.py"", line 679, in pyconstruct; verbose=verbose); File ""/pubhome/zchen02/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/qcdb/libmintsbasisset.py"", line 897, in construct; (at + 1, key, text2)). psi4.driver.qcdb.exceptions.BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 106 for key BASIS among:; Shell Entries: ['I']; Basis Sets: [('CC-PVTZ-MINAO', 'CC-PVTZ-MINAO', None)]; ```; Is there any method to solve this problem?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2291
https://github.com/psi4/psi4/issues/2291:632,Energy Efficiency,energy,energy,632,"As the title stated, I want to perform fsapt calculation on a system that contains iodine atoms. At the begining I used the aug-cc-tzvp but it didn't contain the parameter for iodine.So I use the basis set def2-tzvp which contains the parameter for iodine. But when I run the calculation, it sent out such error message:; ```; Traceback (most recent call last):; File ""/pubhome/zchen02/miniconda3/envs/psi4/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 141, in <module>; File ""/pubhome/zchen02/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/pubhome/zchen02/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/procrouting/proc.py"", line 3631, in run_fisapt; core.get_global_option(""MINAO_BASIS"")); File ""/pubhome/zchen02/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/p4util/python_helpers.py"", line 80, in _pybuild_basis; mol.to_dict(), key, resolved_target, fitrole, other, return_dict=True, return_atomlist=return_atomlist); File ""/pubhome/zchen02/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/qcdb/libmintsbasisset.py"", line 679, in pyconstruct; verbose=verbose); File ""/pubhome/zchen02/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/qcdb/libmintsbasisset.py"", line 897, in construct; (at + 1, key, text2)). psi4.driver.qcdb.exceptions.BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 106 for key BASIS among:; Shell Entries: ['I']; Basis Sets: [('CC-PVTZ-MINAO', 'CC-PVTZ-MINAO', None)]; ```; Is there any method to solve this problem?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2291
https://github.com/psi4/psi4/issues/2291:312,Integrability,message,message,312,"As the title stated, I want to perform fsapt calculation on a system that contains iodine atoms. At the begining I used the aug-cc-tzvp but it didn't contain the parameter for iodine.So I use the basis set def2-tzvp which contains the parameter for iodine. But when I run the calculation, it sent out such error message:; ```; Traceback (most recent call last):; File ""/pubhome/zchen02/miniconda3/envs/psi4/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 141, in <module>; File ""/pubhome/zchen02/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/pubhome/zchen02/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/procrouting/proc.py"", line 3631, in run_fisapt; core.get_global_option(""MINAO_BASIS"")); File ""/pubhome/zchen02/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/p4util/python_helpers.py"", line 80, in _pybuild_basis; mol.to_dict(), key, resolved_target, fitrole, other, return_dict=True, return_atomlist=return_atomlist); File ""/pubhome/zchen02/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/qcdb/libmintsbasisset.py"", line 679, in pyconstruct; verbose=verbose); File ""/pubhome/zchen02/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/qcdb/libmintsbasisset.py"", line 897, in construct; (at + 1, key, text2)). psi4.driver.qcdb.exceptions.BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 106 for key BASIS among:; Shell Entries: ['I']; Basis Sets: [('CC-PVTZ-MINAO', 'CC-PVTZ-MINAO', None)]; ```; Is there any method to solve this problem?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2291
https://github.com/psi4/psi4/issues/2291:31,Performance,perform,perform,31,"As the title stated, I want to perform fsapt calculation on a system that contains iodine atoms. At the begining I used the aug-cc-tzvp but it didn't contain the parameter for iodine.So I use the basis set def2-tzvp which contains the parameter for iodine. But when I run the calculation, it sent out such error message:; ```; Traceback (most recent call last):; File ""/pubhome/zchen02/miniconda3/envs/psi4/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 141, in <module>; File ""/pubhome/zchen02/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/pubhome/zchen02/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/procrouting/proc.py"", line 3631, in run_fisapt; core.get_global_option(""MINAO_BASIS"")); File ""/pubhome/zchen02/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/p4util/python_helpers.py"", line 80, in _pybuild_basis; mol.to_dict(), key, resolved_target, fitrole, other, return_dict=True, return_atomlist=return_atomlist); File ""/pubhome/zchen02/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/qcdb/libmintsbasisset.py"", line 679, in pyconstruct; verbose=verbose); File ""/pubhome/zchen02/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/qcdb/libmintsbasisset.py"", line 897, in construct; (at + 1, key, text2)). psi4.driver.qcdb.exceptions.BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 106 for key BASIS among:; Shell Entries: ['I']; Basis Sets: [('CC-PVTZ-MINAO', 'CC-PVTZ-MINAO', None)]; ```; Is there any method to solve this problem?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2291
https://github.com/psi4/psi4/pull/2292:509,Testability,Test,Tests,509,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; the Windows conda package isn't working for some computers. A report (http://forum.psicode.org/t/how-to-run-psi4-on-windows-10/2174/16) is that compiling with AVX _does_ work. The current situation should be building with AVX2 (https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L145) and @kcpearce reports that the conda pkg still fails on his computer with AVX2 instructions, but this is worth a shot. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2292
https://github.com/psi4/psi4/pull/2292:583,Testability,test,tests,583,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; the Windows conda package isn't working for some computers. A report (http://forum.psicode.org/t/how-to-run-psi4-on-windows-10/2174/16) is that compiling with AVX _does_ work. The current situation should be building with AVX2 (https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L145) and @kcpearce reports that the conda pkg still fails on his computer with AVX2 instructions, but this is worth a shot. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2292
https://github.com/psi4/psi4/pull/2292:674,Testability,test,tests,674,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; the Windows conda package isn't working for some computers. A report (http://forum.psicode.org/t/how-to-run-psi4-on-windows-10/2174/16) is that compiling with AVX _does_ work. The current situation should be building with AVX2 (https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L145) and @kcpearce reports that the conda pkg still fails on his computer with AVX2 instructions, but this is worth a shot. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2292
https://github.com/psi4/psi4/pull/2293:299,Deployability,UPDATE,UPDATE,299,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; ~Ignore this for now. This is so I can get a build snapshot.~ It might well fail tests b/c needs qcel and qcng snapshots. Full tests is clean locally. Changes for the most part are RTG except for two lines noted below. UPDATE: go ahead and review, please. I'll take out the 2 improper lines noted below before merge. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] report FD G & H more fully in core and wfn vars; - [x] add MP2 Hessian testing to stdsuite; - [x] I guess the a-ccsd(t) docs changes didn't make it into #2241 ?; - [x] some cfour interface expansions that are really only useful for internal debugging. use the regex harvesting from qcng, not here; - [x] this bit https://github.com/psi4/psi4/compare/master...loriab:sept21qcdb?expand=1#diff-3abbb4f37a59cc2e6cfbff3f4cb73b312dfd94044a19f38b00bf7ae140db13e7R540-R541 needs removing before actual merge is considered. proper way to handle would be if the select_ccsd_gradient was smart enough to say ""can't do"" to FC gradients, so it'd fall back to FD by ene. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2293
https://github.com/psi4/psi4/pull/2293:683,Integrability,interface,interface,683,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; ~Ignore this for now. This is so I can get a build snapshot.~ It might well fail tests b/c needs qcel and qcng snapshots. Full tests is clean locally. Changes for the most part are RTG except for two lines noted below. UPDATE: go ahead and review, please. I'll take out the 2 improper lines noted below before merge. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] report FD G & H more fully in core and wfn vars; - [x] add MP2 Hessian testing to stdsuite; - [x] I guess the a-ccsd(t) docs changes didn't make it into #2241 ?; - [x] some cfour interface expansions that are really only useful for internal debugging. use the regex harvesting from qcng, not here; - [x] this bit https://github.com/psi4/psi4/compare/master...loriab:sept21qcdb?expand=1#diff-3abbb4f37a59cc2e6cfbff3f4cb73b312dfd94044a19f38b00bf7ae140db13e7R540-R541 needs removing before actual merge is considered. proper way to handle would be if the select_ccsd_gradient was smart enough to say ""can't do"" to FC gradients, so it'd fall back to FD by ene. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2293
https://github.com/psi4/psi4/pull/2293:161,Testability,test,tests,161,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; ~Ignore this for now. This is so I can get a build snapshot.~ It might well fail tests b/c needs qcel and qcng snapshots. Full tests is clean locally. Changes for the most part are RTG except for two lines noted below. UPDATE: go ahead and review, please. I'll take out the 2 improper lines noted below before merge. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] report FD G & H more fully in core and wfn vars; - [x] add MP2 Hessian testing to stdsuite; - [x] I guess the a-ccsd(t) docs changes didn't make it into #2241 ?; - [x] some cfour interface expansions that are really only useful for internal debugging. use the regex harvesting from qcng, not here; - [x] this bit https://github.com/psi4/psi4/compare/master...loriab:sept21qcdb?expand=1#diff-3abbb4f37a59cc2e6cfbff3f4cb73b312dfd94044a19f38b00bf7ae140db13e7R540-R541 needs removing before actual merge is considered. proper way to handle would be if the select_ccsd_gradient was smart enough to say ""can't do"" to FC gradients, so it'd fall back to FD by ene. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2293
https://github.com/psi4/psi4/pull/2293:207,Testability,test,tests,207,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; ~Ignore this for now. This is so I can get a build snapshot.~ It might well fail tests b/c needs qcel and qcng snapshots. Full tests is clean locally. Changes for the most part are RTG except for two lines noted below. UPDATE: go ahead and review, please. I'll take out the 2 improper lines noted below before merge. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] report FD G & H more fully in core and wfn vars; - [x] add MP2 Hessian testing to stdsuite; - [x] I guess the a-ccsd(t) docs changes didn't make it into #2241 ?; - [x] some cfour interface expansions that are really only useful for internal debugging. use the regex harvesting from qcng, not here; - [x] this bit https://github.com/psi4/psi4/compare/master...loriab:sept21qcdb?expand=1#diff-3abbb4f37a59cc2e6cfbff3f4cb73b312dfd94044a19f38b00bf7ae140db13e7R540-R541 needs removing before actual merge is considered. proper way to handle would be if the select_ccsd_gradient was smart enough to say ""can't do"" to FC gradients, so it'd fall back to FD by ene. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2293
https://github.com/psi4/psi4/pull/2293:575,Testability,test,testing,575,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; ~Ignore this for now. This is so I can get a build snapshot.~ It might well fail tests b/c needs qcel and qcng snapshots. Full tests is clean locally. Changes for the most part are RTG except for two lines noted below. UPDATE: go ahead and review, please. I'll take out the 2 improper lines noted below before merge. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] report FD G & H more fully in core and wfn vars; - [x] add MP2 Hessian testing to stdsuite; - [x] I guess the a-ccsd(t) docs changes didn't make it into #2241 ?; - [x] some cfour interface expansions that are really only useful for internal debugging. use the regex harvesting from qcng, not here; - [x] this bit https://github.com/psi4/psi4/compare/master...loriab:sept21qcdb?expand=1#diff-3abbb4f37a59cc2e6cfbff3f4cb73b312dfd94044a19f38b00bf7ae140db13e7R540-R541 needs removing before actual merge is considered. proper way to handle would be if the select_ccsd_gradient was smart enough to say ""can't do"" to FC gradients, so it'd fall back to FD by ene. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2293
https://github.com/psi4/psi4/pull/2293:1181,Testability,Test,Tests,1181,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; ~Ignore this for now. This is so I can get a build snapshot.~ It might well fail tests b/c needs qcel and qcng snapshots. Full tests is clean locally. Changes for the most part are RTG except for two lines noted below. UPDATE: go ahead and review, please. I'll take out the 2 improper lines noted below before merge. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] report FD G & H more fully in core and wfn vars; - [x] add MP2 Hessian testing to stdsuite; - [x] I guess the a-ccsd(t) docs changes didn't make it into #2241 ?; - [x] some cfour interface expansions that are really only useful for internal debugging. use the regex harvesting from qcng, not here; - [x] this bit https://github.com/psi4/psi4/compare/master...loriab:sept21qcdb?expand=1#diff-3abbb4f37a59cc2e6cfbff3f4cb73b312dfd94044a19f38b00bf7ae140db13e7R540-R541 needs removing before actual merge is considered. proper way to handle would be if the select_ccsd_gradient was smart enough to say ""can't do"" to FC gradients, so it'd fall back to FD by ene. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2293
https://github.com/psi4/psi4/pull/2293:1255,Testability,test,tests,1255,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; ~Ignore this for now. This is so I can get a build snapshot.~ It might well fail tests b/c needs qcel and qcng snapshots. Full tests is clean locally. Changes for the most part are RTG except for two lines noted below. UPDATE: go ahead and review, please. I'll take out the 2 improper lines noted below before merge. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] report FD G & H more fully in core and wfn vars; - [x] add MP2 Hessian testing to stdsuite; - [x] I guess the a-ccsd(t) docs changes didn't make it into #2241 ?; - [x] some cfour interface expansions that are really only useful for internal debugging. use the regex harvesting from qcng, not here; - [x] this bit https://github.com/psi4/psi4/compare/master...loriab:sept21qcdb?expand=1#diff-3abbb4f37a59cc2e6cfbff3f4cb73b312dfd94044a19f38b00bf7ae140db13e7R540-R541 needs removing before actual merge is considered. proper way to handle would be if the select_ccsd_gradient was smart enough to say ""can't do"" to FC gradients, so it'd fall back to FD by ene. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2293
https://github.com/psi4/psi4/pull/2293:1346,Testability,test,tests,1346,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; ~Ignore this for now. This is so I can get a build snapshot.~ It might well fail tests b/c needs qcel and qcng snapshots. Full tests is clean locally. Changes for the most part are RTG except for two lines noted below. UPDATE: go ahead and review, please. I'll take out the 2 improper lines noted below before merge. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] report FD G & H more fully in core and wfn vars; - [x] add MP2 Hessian testing to stdsuite; - [x] I guess the a-ccsd(t) docs changes didn't make it into #2241 ?; - [x] some cfour interface expansions that are really only useful for internal debugging. use the regex harvesting from qcng, not here; - [x] this bit https://github.com/psi4/psi4/compare/master...loriab:sept21qcdb?expand=1#diff-3abbb4f37a59cc2e6cfbff3f4cb73b312dfd94044a19f38b00bf7ae140db13e7R540-R541 needs removing before actual merge is considered. proper way to handle would be if the select_ccsd_gradient was smart enough to say ""can't do"" to FC gradients, so it'd fall back to FD by ene. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2293
https://github.com/psi4/psi4/issues/2295:704,Energy Efficiency,energy,energy,704,"For some reason, `detci` is silently ignoring when the user supplies `num_frozen_uocc`. While [there are keywords that arrive it](https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html#term-FROZEN_UOCC-GLOBALS), they shouldn't be present here. Minimal Not-Working Example:. ```; import psi4; psi4.set_memory('500 MB'); be2 = psi4.geometry(""""""; 0 1; Be 0.000000 0.000000 -1.200000; Be 0.000000 0.000000 1.200000; symmetry d2h ; """"""); psi4.set_options({'basis' : 'sto-3g',; 'scf_type' : 'pk',; 'reference' : 'rhf',; 'e_convergence' : 1e-12,; 'd_convergence' : 1e-12,; 'num_frozen_docc' : 2,; 'num_frozen_uocc' : 3; }) ; psi4.core.set_output_file('output.dat', False); p4_Escf, p4_wfn = psi4.energy('SCF', return_wfn=True); fci_e, fci_wfn = psi4.energy('FCI', return_wfn=True); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2295
https://github.com/psi4/psi4/issues/2295:758,Energy Efficiency,energy,energy,758,"For some reason, `detci` is silently ignoring when the user supplies `num_frozen_uocc`. While [there are keywords that arrive it](https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html#term-FROZEN_UOCC-GLOBALS), they shouldn't be present here. Minimal Not-Working Example:. ```; import psi4; psi4.set_memory('500 MB'); be2 = psi4.geometry(""""""; 0 1; Be 0.000000 0.000000 -1.200000; Be 0.000000 0.000000 1.200000; symmetry d2h ; """"""); psi4.set_options({'basis' : 'sto-3g',; 'scf_type' : 'pk',; 'reference' : 'rhf',; 'e_convergence' : 1e-12,; 'd_convergence' : 1e-12,; 'num_frozen_docc' : 2,; 'num_frozen_uocc' : 3; }) ; psi4.core.set_output_file('output.dat', False); p4_Escf, p4_wfn = psi4.energy('SCF', return_wfn=True); fci_e, fci_wfn = psi4.energy('FCI', return_wfn=True); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2295
https://github.com/psi4/psi4/issues/2297:209,Performance,optimiz,optimization,209,"I run Psi4 version 1.4 and Python 3.8 on Ubuntu 20.04.1. I wanted to calculate termochemistry properties and found that running the following:; ```; frequency(""scf""); frequency(""hf""); ```; somehow broke after optimization has completed. Although I redirected stderr to log file, there is nothing. I only receive one word in polish meaning obliterated or annihilated (in the terminal not log file). It also seems that running; ```; frequency(""mp2""); ```; resulted in displacements. . I openend a thread at [Psi forum](http://forum.psicode.org/t/optimization-complete-obliterated-annihilated/2301) regarding the issue. There is my input file. I created the issue because the returning information that I received lacks any information why does the calculation fail.; Thanks in advance for handling the problem.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2297
https://github.com/psi4/psi4/issues/2297:544,Performance,optimiz,optimization-complete-obliterated-annihilated,544,"I run Psi4 version 1.4 and Python 3.8 on Ubuntu 20.04.1. I wanted to calculate termochemistry properties and found that running the following:; ```; frequency(""scf""); frequency(""hf""); ```; somehow broke after optimization has completed. Although I redirected stderr to log file, there is nothing. I only receive one word in polish meaning obliterated or annihilated (in the terminal not log file). It also seems that running; ```; frequency(""mp2""); ```; resulted in displacements. . I openend a thread at [Psi forum](http://forum.psicode.org/t/optimization-complete-obliterated-annihilated/2301) regarding the issue. There is my input file. I created the issue because the returning information that I received lacks any information why does the calculation fail.; Thanks in advance for handling the problem.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2297
https://github.com/psi4/psi4/issues/2297:269,Testability,log,log,269,"I run Psi4 version 1.4 and Python 3.8 on Ubuntu 20.04.1. I wanted to calculate termochemistry properties and found that running the following:; ```; frequency(""scf""); frequency(""hf""); ```; somehow broke after optimization has completed. Although I redirected stderr to log file, there is nothing. I only receive one word in polish meaning obliterated or annihilated (in the terminal not log file). It also seems that running; ```; frequency(""mp2""); ```; resulted in displacements. . I openend a thread at [Psi forum](http://forum.psicode.org/t/optimization-complete-obliterated-annihilated/2301) regarding the issue. There is my input file. I created the issue because the returning information that I received lacks any information why does the calculation fail.; Thanks in advance for handling the problem.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2297
https://github.com/psi4/psi4/issues/2297:387,Testability,log,log,387,"I run Psi4 version 1.4 and Python 3.8 on Ubuntu 20.04.1. I wanted to calculate termochemistry properties and found that running the following:; ```; frequency(""scf""); frequency(""hf""); ```; somehow broke after optimization has completed. Although I redirected stderr to log file, there is nothing. I only receive one word in polish meaning obliterated or annihilated (in the terminal not log file). It also seems that running; ```; frequency(""mp2""); ```; resulted in displacements. . I openend a thread at [Psi forum](http://forum.psicode.org/t/optimization-complete-obliterated-annihilated/2301) regarding the issue. There is my input file. I created the issue because the returning information that I received lacks any information why does the calculation fail.; Thanks in advance for handling the problem.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2297
https://github.com/psi4/psi4/pull/2298:1464,Modifiability,plugin,plugins,1464,"r. There are multiple things going on:; - For pybinding, it was convenient to convert the enums in `libdiis` to _strongly typed enums_. This means the enums have their own scope, which changes how other functions had to call them. Every change in occ, dfocc, dct, fisapt, and libdiis is _solely_ due to this. This occupies commit one.; - Many other functions had to be pybound. In particular, it was necessary to convert `diis_manager` into a property. Old code would call `HF.diis_manager()`, but now they call `HF.diis_manager_`. We're not bothering to deprecate the old way of calling it. I'm not aware if there's a way to still support the old syntax. It might work if we change the property name to `diis_manager`? I haven't tested this.; - It is not possible to pybind a variadic, so I had to pybind every `set_error_vector_size` and `set_vector_size` and `add_entry` type combination that Python might use. Sad, but necessary. And with that done, all four of the `compute_orbital_gradient` functions could finally be moved to the Python layer. `compute_orbital_gradient` is kept as a virtual function, C++ side, to signal that Psi expects such a function to exist. My tests indicate that if the function is defined C++ side, it still works, so this won't break any SCF subclasses defined in plugins. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] _Lots_ of pybind-ing involving DIIS; - [x] Alert! `HF.diis_manager()` has changed to `HF.diis_manager_`; - [x] `HF.compute_orbital_gradient` moved to the Python layer. C-side `compute_orbital_gradient` is still supported, but not used by the core Psi. ## Questions; - [ ] Who is responsible for updating the Great DFOCC Branch with the `libdiis` API change?; - [ ] How do we feel about the new functions I Pybind-ed over? Anything amiss?. ## Checklist; - [x] `ctest -L scf` passes. ## Status; - [x] Ready for review; - [ ] Let's discuss the two questions before merging this in, please.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2298
https://github.com/psi4/psi4/pull/2298:896,Testability,test,tested,896,"## Description; In preparation for some PRs adding EDIIS and ADIIS to Psi, this PR moves the `compute_orbital_gradient` functions, which call DIIS, to the Python layer. There are multiple things going on:; - For pybinding, it was convenient to convert the enums in `libdiis` to _strongly typed enums_. This means the enums have their own scope, which changes how other functions had to call them. Every change in occ, dfocc, dct, fisapt, and libdiis is _solely_ due to this. This occupies commit one.; - Many other functions had to be pybound. In particular, it was necessary to convert `diis_manager` into a property. Old code would call `HF.diis_manager()`, but now they call `HF.diis_manager_`. We're not bothering to deprecate the old way of calling it. I'm not aware if there's a way to still support the old syntax. It might work if we change the property name to `diis_manager`? I haven't tested this.; - It is not possible to pybind a variadic, so I had to pybind every `set_error_vector_size` and `set_vector_size` and `add_entry` type combination that Python might use. Sad, but necessary. And with that done, all four of the `compute_orbital_gradient` functions could finally be moved to the Python layer. `compute_orbital_gradient` is kept as a virtual function, C++ side, to signal that Psi expects such a function to exist. My tests indicate that if the function is defined C++ side, it still works, so this won't break any SCF subclasses defined in plugins. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] _Lots_ of pybind-ing involving DIIS; - [x] Alert! `HF.diis_manager()` has changed to `HF.diis_manager_`; - [x] `HF.compute_orbital_gradient` moved to the Python layer. C-side `compute_orbital_gradient` is still supported, but not used by the core Psi. ## Questions; - [ ] Who is responsible for updating the Great DFOCC Branch with the `libdiis` API change?; - [ ] How do we feel about the new functions I Pybind-ed over?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2298
https://github.com/psi4/psi4/pull/2298:1341,Testability,test,tests,1341,"r. There are multiple things going on:; - For pybinding, it was convenient to convert the enums in `libdiis` to _strongly typed enums_. This means the enums have their own scope, which changes how other functions had to call them. Every change in occ, dfocc, dct, fisapt, and libdiis is _solely_ due to this. This occupies commit one.; - Many other functions had to be pybound. In particular, it was necessary to convert `diis_manager` into a property. Old code would call `HF.diis_manager()`, but now they call `HF.diis_manager_`. We're not bothering to deprecate the old way of calling it. I'm not aware if there's a way to still support the old syntax. It might work if we change the property name to `diis_manager`? I haven't tested this.; - It is not possible to pybind a variadic, so I had to pybind every `set_error_vector_size` and `set_vector_size` and `add_entry` type combination that Python might use. Sad, but necessary. And with that done, all four of the `compute_orbital_gradient` functions could finally be moved to the Python layer. `compute_orbital_gradient` is kept as a virtual function, C++ side, to signal that Psi expects such a function to exist. My tests indicate that if the function is defined C++ side, it still works, so this won't break any SCF subclasses defined in plugins. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] _Lots_ of pybind-ing involving DIIS; - [x] Alert! `HF.diis_manager()` has changed to `HF.diis_manager_`; - [x] `HF.compute_orbital_gradient` moved to the Python layer. C-side `compute_orbital_gradient` is still supported, but not used by the core Psi. ## Questions; - [ ] Who is responsible for updating the Great DFOCC Branch with the `libdiis` API change?; - [ ] How do we feel about the new functions I Pybind-ed over? Anything amiss?. ## Checklist; - [x] `ctest -L scf` passes. ## Status; - [x] Ready for review; - [ ] Let's discuss the two questions before merging this in, please.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2298
https://github.com/psi4/psi4/issues/2299:422,Availability,avail,available,422,"The MBIS regression reported in #2272 was fixed via #2273, but there's still a few items to tackle. This part needn't be backported. - [ ] oeprop(wfn, ""MBIS_VOLUME_RATIOS"") should be fine (indep oeprop fn), but set scf_properties mbis_volume_ratios; energy(""scf"") will still fail as MBIS fails via QCEngine #2272 reported because those are OEProp class instantiations called from proc.py, and the free atom volumes aren't available. The oeprop.cc code could exit gracefully when free atom volumes aren't available, but having different properties lists for the two calling routes isn't good.; - [ ] so why not add the loc from oeprop() to OEProps in proc.py so that atom volumes are available? nice thought, but the fn that produces them itself calls oeprop() and energy() and descends into endless recursion. I haven't sought the logic that makes this all work together.; - [ ] add tests.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2299
https://github.com/psi4/psi4/issues/2299:504,Availability,avail,available,504,"The MBIS regression reported in #2272 was fixed via #2273, but there's still a few items to tackle. This part needn't be backported. - [ ] oeprop(wfn, ""MBIS_VOLUME_RATIOS"") should be fine (indep oeprop fn), but set scf_properties mbis_volume_ratios; energy(""scf"") will still fail as MBIS fails via QCEngine #2272 reported because those are OEProp class instantiations called from proc.py, and the free atom volumes aren't available. The oeprop.cc code could exit gracefully when free atom volumes aren't available, but having different properties lists for the two calling routes isn't good.; - [ ] so why not add the loc from oeprop() to OEProps in proc.py so that atom volumes are available? nice thought, but the fn that produces them itself calls oeprop() and energy() and descends into endless recursion. I haven't sought the logic that makes this all work together.; - [ ] add tests.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2299
https://github.com/psi4/psi4/issues/2299:683,Availability,avail,available,683,"The MBIS regression reported in #2272 was fixed via #2273, but there's still a few items to tackle. This part needn't be backported. - [ ] oeprop(wfn, ""MBIS_VOLUME_RATIOS"") should be fine (indep oeprop fn), but set scf_properties mbis_volume_ratios; energy(""scf"") will still fail as MBIS fails via QCEngine #2272 reported because those are OEProp class instantiations called from proc.py, and the free atom volumes aren't available. The oeprop.cc code could exit gracefully when free atom volumes aren't available, but having different properties lists for the two calling routes isn't good.; - [ ] so why not add the loc from oeprop() to OEProps in proc.py so that atom volumes are available? nice thought, but the fn that produces them itself calls oeprop() and energy() and descends into endless recursion. I haven't sought the logic that makes this all work together.; - [ ] add tests.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2299
https://github.com/psi4/psi4/issues/2299:250,Energy Efficiency,energy,energy,250,"The MBIS regression reported in #2272 was fixed via #2273, but there's still a few items to tackle. This part needn't be backported. - [ ] oeprop(wfn, ""MBIS_VOLUME_RATIOS"") should be fine (indep oeprop fn), but set scf_properties mbis_volume_ratios; energy(""scf"") will still fail as MBIS fails via QCEngine #2272 reported because those are OEProp class instantiations called from proc.py, and the free atom volumes aren't available. The oeprop.cc code could exit gracefully when free atom volumes aren't available, but having different properties lists for the two calling routes isn't good.; - [ ] so why not add the loc from oeprop() to OEProps in proc.py so that atom volumes are available? nice thought, but the fn that produces them itself calls oeprop() and energy() and descends into endless recursion. I haven't sought the logic that makes this all work together.; - [ ] add tests.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2299
https://github.com/psi4/psi4/issues/2299:764,Energy Efficiency,energy,energy,764,"The MBIS regression reported in #2272 was fixed via #2273, but there's still a few items to tackle. This part needn't be backported. - [ ] oeprop(wfn, ""MBIS_VOLUME_RATIOS"") should be fine (indep oeprop fn), but set scf_properties mbis_volume_ratios; energy(""scf"") will still fail as MBIS fails via QCEngine #2272 reported because those are OEProp class instantiations called from proc.py, and the free atom volumes aren't available. The oeprop.cc code could exit gracefully when free atom volumes aren't available, but having different properties lists for the two calling routes isn't good.; - [ ] so why not add the loc from oeprop() to OEProps in proc.py so that atom volumes are available? nice thought, but the fn that produces them itself calls oeprop() and energy() and descends into endless recursion. I haven't sought the logic that makes this all work together.; - [ ] add tests.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2299
https://github.com/psi4/psi4/issues/2299:573,Integrability,rout,routes,573,"The MBIS regression reported in #2272 was fixed via #2273, but there's still a few items to tackle. This part needn't be backported. - [ ] oeprop(wfn, ""MBIS_VOLUME_RATIOS"") should be fine (indep oeprop fn), but set scf_properties mbis_volume_ratios; energy(""scf"") will still fail as MBIS fails via QCEngine #2272 reported because those are OEProp class instantiations called from proc.py, and the free atom volumes aren't available. The oeprop.cc code could exit gracefully when free atom volumes aren't available, but having different properties lists for the two calling routes isn't good.; - [ ] so why not add the loc from oeprop() to OEProps in proc.py so that atom volumes are available? nice thought, but the fn that produces them itself calls oeprop() and energy() and descends into endless recursion. I haven't sought the logic that makes this all work together.; - [ ] add tests.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2299
https://github.com/psi4/psi4/issues/2299:831,Testability,log,logic,831,"The MBIS regression reported in #2272 was fixed via #2273, but there's still a few items to tackle. This part needn't be backported. - [ ] oeprop(wfn, ""MBIS_VOLUME_RATIOS"") should be fine (indep oeprop fn), but set scf_properties mbis_volume_ratios; energy(""scf"") will still fail as MBIS fails via QCEngine #2272 reported because those are OEProp class instantiations called from proc.py, and the free atom volumes aren't available. The oeprop.cc code could exit gracefully when free atom volumes aren't available, but having different properties lists for the two calling routes isn't good.; - [ ] so why not add the loc from oeprop() to OEProps in proc.py so that atom volumes are available? nice thought, but the fn that produces them itself calls oeprop() and energy() and descends into endless recursion. I haven't sought the logic that makes this all work together.; - [ ] add tests.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2299
https://github.com/psi4/psi4/issues/2299:883,Testability,test,tests,883,"The MBIS regression reported in #2272 was fixed via #2273, but there's still a few items to tackle. This part needn't be backported. - [ ] oeprop(wfn, ""MBIS_VOLUME_RATIOS"") should be fine (indep oeprop fn), but set scf_properties mbis_volume_ratios; energy(""scf"") will still fail as MBIS fails via QCEngine #2272 reported because those are OEProp class instantiations called from proc.py, and the free atom volumes aren't available. The oeprop.cc code could exit gracefully when free atom volumes aren't available, but having different properties lists for the two calling routes isn't good.; - [ ] so why not add the loc from oeprop() to OEProps in proc.py so that atom volumes are available? nice thought, but the fn that produces them itself calls oeprop() and energy() and descends into endless recursion. I haven't sought the logic that makes this all work together.; - [ ] add tests.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2299
https://github.com/psi4/psi4/issues/2300:2195,Availability,avail,available,2195,"long run (for us and presumably other users) if we can get conda packaging for the Psi4 stack moved over to `conda-forge` - something we'd be happy to take a role in. * **Would this be useful for Psi4 developers and/or users?** I have personally had good experiences with migrations, both as a developer/maintainer and user. Getting everything on one channel (and using `conda-forge`'s existing automation) should help with dependency resolution/compatibility and in principle should also make build processes smoother. It would unblock some production issues with our software and be generally valuable for us - but we absolutely don't want to make life harder on for Psi4 developers/maintainers.; * **What technical blockers exist?** In the past we have gotten over some large hurdles (migrating OpenMM included contributing a recipe for CUDA toolkits) and more tedious blockers (migrating the OpenFF stack involved contributing something like 10-20 separate packages, piece by piece). `conda-forge` has [some tooling](https://conda-forge.org/docs/maintainer/knowledge_base.html#using-cmake) built around CMake, including MKL and some number of compilers. (Sorry - I'm not really an expert in packaging compiled code so I can't say much more about this - others may chime in!). But I don't know if there are insurmountable blockers to this process, or if that's been explored recently.; * **What can we do to help?** We have a significant amount of person-time available to contribute from people with experience contributing and maintaining packages on `conda-forge`. If needed, we are likely able to pull in further resources to get support from people with vastly more conda-related expertise than myself, including `conda-forge` core team members. . I presume this has been discussed in the past, but I could not find a stub issue nor [earlier attempts](https://github.com/conda-forge/staged-recipes/pulls?q=is%3Apr+is%3Aclosed+psi4) at doing this. cc: @SimonBoothroyd @dotsdl @j-wags @jthorton",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300
https://github.com/psi4/psi4/issues/2300:426,Deployability,deploy,deployment,426,"Hi Psi4 developers,. I'd like to open discussion on making Psi4 packages on `conda-forge`. We at OpenFF have some projects that make heavy use of Psi4 and that we'd like to roll out to production alongside a pretty length list of other packages. Unfortunately, one or of our other dependencies is a somewhat monolithic and tangled web of FORTRAN and legacy code that regularly produces conflicts on macOS and sometimes causes deployment issues on Linux. (Others may have more comments on other deployment issues). We've been able to [resolve this](https://github.com/psi4/psi4/issues/2024) in the past, and we've also filled up the packaging channel on Slack on more than a few occasions. However, it may be more sustainable in the long run (for us and presumably other users) if we can get conda packaging for the Psi4 stack moved over to `conda-forge` - something we'd be happy to take a role in. * **Would this be useful for Psi4 developers and/or users?** I have personally had good experiences with migrations, both as a developer/maintainer and user. Getting everything on one channel (and using `conda-forge`'s existing automation) should help with dependency resolution/compatibility and in principle should also make build processes smoother. It would unblock some production issues with our software and be generally valuable for us - but we absolutely don't want to make life harder on for Psi4 developers/maintainers.; * **What technical blockers exist?** In the past we have gotten over some large hurdles (migrating OpenMM included contributing a recipe for CUDA toolkits) and more tedious blockers (migrating the OpenFF stack involved contributing something like 10-20 separate packages, piece by piece). `conda-forge` has [some tooling](https://conda-forge.org/docs/maintainer/knowledge_base.html#using-cmake) built around CMake, including MKL and some number of compilers. (Sorry - I'm not really an expert in packaging compiled code so I can't say much more about this - others may c",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300
https://github.com/psi4/psi4/issues/2300:494,Deployability,deploy,deployment,494,"Hi Psi4 developers,. I'd like to open discussion on making Psi4 packages on `conda-forge`. We at OpenFF have some projects that make heavy use of Psi4 and that we'd like to roll out to production alongside a pretty length list of other packages. Unfortunately, one or of our other dependencies is a somewhat monolithic and tangled web of FORTRAN and legacy code that regularly produces conflicts on macOS and sometimes causes deployment issues on Linux. (Others may have more comments on other deployment issues). We've been able to [resolve this](https://github.com/psi4/psi4/issues/2024) in the past, and we've also filled up the packaging channel on Slack on more than a few occasions. However, it may be more sustainable in the long run (for us and presumably other users) if we can get conda packaging for the Psi4 stack moved over to `conda-forge` - something we'd be happy to take a role in. * **Would this be useful for Psi4 developers and/or users?** I have personally had good experiences with migrations, both as a developer/maintainer and user. Getting everything on one channel (and using `conda-forge`'s existing automation) should help with dependency resolution/compatibility and in principle should also make build processes smoother. It would unblock some production issues with our software and be generally valuable for us - but we absolutely don't want to make life harder on for Psi4 developers/maintainers.; * **What technical blockers exist?** In the past we have gotten over some large hurdles (migrating OpenMM included contributing a recipe for CUDA toolkits) and more tedious blockers (migrating the OpenFF stack involved contributing something like 10-20 separate packages, piece by piece). `conda-forge` has [some tooling](https://conda-forge.org/docs/maintainer/knowledge_base.html#using-cmake) built around CMake, including MKL and some number of compilers. (Sorry - I'm not really an expert in packaging compiled code so I can't say much more about this - others may c",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300
https://github.com/psi4/psi4/issues/2300:713,Energy Efficiency,sustainab,sustainable,713,"Hi Psi4 developers,. I'd like to open discussion on making Psi4 packages on `conda-forge`. We at OpenFF have some projects that make heavy use of Psi4 and that we'd like to roll out to production alongside a pretty length list of other packages. Unfortunately, one or of our other dependencies is a somewhat monolithic and tangled web of FORTRAN and legacy code that regularly produces conflicts on macOS and sometimes causes deployment issues on Linux. (Others may have more comments on other deployment issues). We've been able to [resolve this](https://github.com/psi4/psi4/issues/2024) in the past, and we've also filled up the packaging channel on Slack on more than a few occasions. However, it may be more sustainable in the long run (for us and presumably other users) if we can get conda packaging for the Psi4 stack moved over to `conda-forge` - something we'd be happy to take a role in. * **Would this be useful for Psi4 developers and/or users?** I have personally had good experiences with migrations, both as a developer/maintainer and user. Getting everything on one channel (and using `conda-forge`'s existing automation) should help with dependency resolution/compatibility and in principle should also make build processes smoother. It would unblock some production issues with our software and be generally valuable for us - but we absolutely don't want to make life harder on for Psi4 developers/maintainers.; * **What technical blockers exist?** In the past we have gotten over some large hurdles (migrating OpenMM included contributing a recipe for CUDA toolkits) and more tedious blockers (migrating the OpenFF stack involved contributing something like 10-20 separate packages, piece by piece). `conda-forge` has [some tooling](https://conda-forge.org/docs/maintainer/knowledge_base.html#using-cmake) built around CMake, including MKL and some number of compilers. (Sorry - I'm not really an expert in packaging compiled code so I can't say much more about this - others may c",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300
https://github.com/psi4/psi4/issues/2300:281,Integrability,depend,dependencies,281,"Hi Psi4 developers,. I'd like to open discussion on making Psi4 packages on `conda-forge`. We at OpenFF have some projects that make heavy use of Psi4 and that we'd like to roll out to production alongside a pretty length list of other packages. Unfortunately, one or of our other dependencies is a somewhat monolithic and tangled web of FORTRAN and legacy code that regularly produces conflicts on macOS and sometimes causes deployment issues on Linux. (Others may have more comments on other deployment issues). We've been able to [resolve this](https://github.com/psi4/psi4/issues/2024) in the past, and we've also filled up the packaging channel on Slack on more than a few occasions. However, it may be more sustainable in the long run (for us and presumably other users) if we can get conda packaging for the Psi4 stack moved over to `conda-forge` - something we'd be happy to take a role in. * **Would this be useful for Psi4 developers and/or users?** I have personally had good experiences with migrations, both as a developer/maintainer and user. Getting everything on one channel (and using `conda-forge`'s existing automation) should help with dependency resolution/compatibility and in principle should also make build processes smoother. It would unblock some production issues with our software and be generally valuable for us - but we absolutely don't want to make life harder on for Psi4 developers/maintainers.; * **What technical blockers exist?** In the past we have gotten over some large hurdles (migrating OpenMM included contributing a recipe for CUDA toolkits) and more tedious blockers (migrating the OpenFF stack involved contributing something like 10-20 separate packages, piece by piece). `conda-forge` has [some tooling](https://conda-forge.org/docs/maintainer/knowledge_base.html#using-cmake) built around CMake, including MKL and some number of compilers. (Sorry - I'm not really an expert in packaging compiled code so I can't say much more about this - others may c",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300
https://github.com/psi4/psi4/issues/2300:1156,Integrability,depend,dependency,1156,"d that we'd like to roll out to production alongside a pretty length list of other packages. Unfortunately, one or of our other dependencies is a somewhat monolithic and tangled web of FORTRAN and legacy code that regularly produces conflicts on macOS and sometimes causes deployment issues on Linux. (Others may have more comments on other deployment issues). We've been able to [resolve this](https://github.com/psi4/psi4/issues/2024) in the past, and we've also filled up the packaging channel on Slack on more than a few occasions. However, it may be more sustainable in the long run (for us and presumably other users) if we can get conda packaging for the Psi4 stack moved over to `conda-forge` - something we'd be happy to take a role in. * **Would this be useful for Psi4 developers and/or users?** I have personally had good experiences with migrations, both as a developer/maintainer and user. Getting everything on one channel (and using `conda-forge`'s existing automation) should help with dependency resolution/compatibility and in principle should also make build processes smoother. It would unblock some production issues with our software and be generally valuable for us - but we absolutely don't want to make life harder on for Psi4 developers/maintainers.; * **What technical blockers exist?** In the past we have gotten over some large hurdles (migrating OpenMM included contributing a recipe for CUDA toolkits) and more tedious blockers (migrating the OpenFF stack involved contributing something like 10-20 separate packages, piece by piece). `conda-forge` has [some tooling](https://conda-forge.org/docs/maintainer/knowledge_base.html#using-cmake) built around CMake, including MKL and some number of compilers. (Sorry - I'm not really an expert in packaging compiled code so I can't say much more about this - others may chime in!). But I don't know if there are insurmountable blockers to this process, or if that's been explored recently.; * **What can we do to help?** We ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300
https://github.com/psi4/psi4/issues/2300:2558,Testability,stub,stub,2558,"long run (for us and presumably other users) if we can get conda packaging for the Psi4 stack moved over to `conda-forge` - something we'd be happy to take a role in. * **Would this be useful for Psi4 developers and/or users?** I have personally had good experiences with migrations, both as a developer/maintainer and user. Getting everything on one channel (and using `conda-forge`'s existing automation) should help with dependency resolution/compatibility and in principle should also make build processes smoother. It would unblock some production issues with our software and be generally valuable for us - but we absolutely don't want to make life harder on for Psi4 developers/maintainers.; * **What technical blockers exist?** In the past we have gotten over some large hurdles (migrating OpenMM included contributing a recipe for CUDA toolkits) and more tedious blockers (migrating the OpenFF stack involved contributing something like 10-20 separate packages, piece by piece). `conda-forge` has [some tooling](https://conda-forge.org/docs/maintainer/knowledge_base.html#using-cmake) built around CMake, including MKL and some number of compilers. (Sorry - I'm not really an expert in packaging compiled code so I can't say much more about this - others may chime in!). But I don't know if there are insurmountable blockers to this process, or if that's been explored recently.; * **What can we do to help?** We have a significant amount of person-time available to contribute from people with experience contributing and maintaining packages on `conda-forge`. If needed, we are likely able to pull in further resources to get support from people with vastly more conda-related expertise than myself, including `conda-forge` core team members. . I presume this has been discussed in the past, but I could not find a stub issue nor [earlier attempts](https://github.com/conda-forge/staged-recipes/pulls?q=is%3Apr+is%3Aclosed+psi4) at doing this. cc: @SimonBoothroyd @dotsdl @j-wags @jthorton",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2300
https://github.com/psi4/psi4/pull/2301:264,Testability,Test,Tests,264,## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2301
https://github.com/psi4/psi4/pull/2301:338,Testability,test,tests,338,## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2301
https://github.com/psi4/psi4/pull/2301:429,Testability,test,tests,429,## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2301
https://github.com/psi4/psi4/pull/2302:1280,Availability,ping,ping,1280,"## Description; This PR closes #2120. The user-side problem is that when there are linear dependencies in the molecule, `fnocc` reports uncontrolled energies, iteration-by-iteration. The mechanism for this is as follows:. * `run_fnocc` requests an SCF computation. `nmopi_ < nsopi_` due to linear dependencies.; * `fnocc` is incompatible with point group symmetry, so calls `c1_deep_copy` to transform the solution to a c1 solution. For concreteness, we'll assume RHF, although all HF subclasses have the same problem.; * `RHF::c1_deep_copy` calls `Wavefunction::c1_deep_copy`. The resulting wavefunction has `nmo_` equal to `nmopi_.sum()` of the previous wavefunction, as desired.; * `RHF::c1_deep_copy` calls the RHF constructor on the new wavefunction, which calls to `HF::common_init`, which initializes `nmopi_ = nsopi_`, under assumption that the subsequent SCF will call `form_Shalf`, which is _actually_ responsible for first eliminating linear dependencies and then determining `nmopi_`.; * There is no subsequent SCF, so `nmopi_ = nsopi_` at the time `fnocc` begins.; * Garbage In, Garbage Out. `fnocc` is given a garbage wavefunction and gives garbage energies. The remedy here is to no longer have `common_init` put suspect information on the wavefunction. Obligatory ping to @edeprince3. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `c1_deep_copy` no longer leads to a wrong `nmopi_` in case of linear dependency. This fixes problems with linear dependencies observed in the `fnocc` module. ## Questions; - [ ] What does this PR mean for #1545? Holger confirmed the bug there was symmetry related, and the system does have a linear dependency... It's probably worth re-investigating after this gets merged in. ## Checklist; - [x] Tests added for any newly working features; - [x] `ctest -j4` is 490/490. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2302
https://github.com/psi4/psi4/pull/2302:90,Integrability,depend,dependencies,90,"## Description; This PR closes #2120. The user-side problem is that when there are linear dependencies in the molecule, `fnocc` reports uncontrolled energies, iteration-by-iteration. The mechanism for this is as follows:. * `run_fnocc` requests an SCF computation. `nmopi_ < nsopi_` due to linear dependencies.; * `fnocc` is incompatible with point group symmetry, so calls `c1_deep_copy` to transform the solution to a c1 solution. For concreteness, we'll assume RHF, although all HF subclasses have the same problem.; * `RHF::c1_deep_copy` calls `Wavefunction::c1_deep_copy`. The resulting wavefunction has `nmo_` equal to `nmopi_.sum()` of the previous wavefunction, as desired.; * `RHF::c1_deep_copy` calls the RHF constructor on the new wavefunction, which calls to `HF::common_init`, which initializes `nmopi_ = nsopi_`, under assumption that the subsequent SCF will call `form_Shalf`, which is _actually_ responsible for first eliminating linear dependencies and then determining `nmopi_`.; * There is no subsequent SCF, so `nmopi_ = nsopi_` at the time `fnocc` begins.; * Garbage In, Garbage Out. `fnocc` is given a garbage wavefunction and gives garbage energies. The remedy here is to no longer have `common_init` put suspect information on the wavefunction. Obligatory ping to @edeprince3. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `c1_deep_copy` no longer leads to a wrong `nmopi_` in case of linear dependency. This fixes problems with linear dependencies observed in the `fnocc` module. ## Questions; - [ ] What does this PR mean for #1545? Holger confirmed the bug there was symmetry related, and the system does have a linear dependency... It's probably worth re-investigating after this gets merged in. ## Checklist; - [x] Tests added for any newly working features; - [x] `ctest -j4` is 490/490. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2302
https://github.com/psi4/psi4/pull/2302:297,Integrability,depend,dependencies,297,"## Description; This PR closes #2120. The user-side problem is that when there are linear dependencies in the molecule, `fnocc` reports uncontrolled energies, iteration-by-iteration. The mechanism for this is as follows:. * `run_fnocc` requests an SCF computation. `nmopi_ < nsopi_` due to linear dependencies.; * `fnocc` is incompatible with point group symmetry, so calls `c1_deep_copy` to transform the solution to a c1 solution. For concreteness, we'll assume RHF, although all HF subclasses have the same problem.; * `RHF::c1_deep_copy` calls `Wavefunction::c1_deep_copy`. The resulting wavefunction has `nmo_` equal to `nmopi_.sum()` of the previous wavefunction, as desired.; * `RHF::c1_deep_copy` calls the RHF constructor on the new wavefunction, which calls to `HF::common_init`, which initializes `nmopi_ = nsopi_`, under assumption that the subsequent SCF will call `form_Shalf`, which is _actually_ responsible for first eliminating linear dependencies and then determining `nmopi_`.; * There is no subsequent SCF, so `nmopi_ = nsopi_` at the time `fnocc` begins.; * Garbage In, Garbage Out. `fnocc` is given a garbage wavefunction and gives garbage energies. The remedy here is to no longer have `common_init` put suspect information on the wavefunction. Obligatory ping to @edeprince3. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `c1_deep_copy` no longer leads to a wrong `nmopi_` in case of linear dependency. This fixes problems with linear dependencies observed in the `fnocc` module. ## Questions; - [ ] What does this PR mean for #1545? Holger confirmed the bug there was symmetry related, and the system does have a linear dependency... It's probably worth re-investigating after this gets merged in. ## Checklist; - [x] Tests added for any newly working features; - [x] `ctest -j4` is 490/490. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2302
https://github.com/psi4/psi4/pull/2302:953,Integrability,depend,dependencies,953,"## Description; This PR closes #2120. The user-side problem is that when there are linear dependencies in the molecule, `fnocc` reports uncontrolled energies, iteration-by-iteration. The mechanism for this is as follows:. * `run_fnocc` requests an SCF computation. `nmopi_ < nsopi_` due to linear dependencies.; * `fnocc` is incompatible with point group symmetry, so calls `c1_deep_copy` to transform the solution to a c1 solution. For concreteness, we'll assume RHF, although all HF subclasses have the same problem.; * `RHF::c1_deep_copy` calls `Wavefunction::c1_deep_copy`. The resulting wavefunction has `nmo_` equal to `nmopi_.sum()` of the previous wavefunction, as desired.; * `RHF::c1_deep_copy` calls the RHF constructor on the new wavefunction, which calls to `HF::common_init`, which initializes `nmopi_ = nsopi_`, under assumption that the subsequent SCF will call `form_Shalf`, which is _actually_ responsible for first eliminating linear dependencies and then determining `nmopi_`.; * There is no subsequent SCF, so `nmopi_ = nsopi_` at the time `fnocc` begins.; * Garbage In, Garbage Out. `fnocc` is given a garbage wavefunction and gives garbage energies. The remedy here is to no longer have `common_init` put suspect information on the wavefunction. Obligatory ping to @edeprince3. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `c1_deep_copy` no longer leads to a wrong `nmopi_` in case of linear dependency. This fixes problems with linear dependencies observed in the `fnocc` module. ## Questions; - [ ] What does this PR mean for #1545? Holger confirmed the bug there was symmetry related, and the system does have a linear dependency... It's probably worth re-investigating after this gets merged in. ## Checklist; - [x] Tests added for any newly working features; - [x] `ctest -j4` is 490/490. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2302
https://github.com/psi4/psi4/pull/2302:1477,Integrability,depend,dependency,1477,"## Description; This PR closes #2120. The user-side problem is that when there are linear dependencies in the molecule, `fnocc` reports uncontrolled energies, iteration-by-iteration. The mechanism for this is as follows:. * `run_fnocc` requests an SCF computation. `nmopi_ < nsopi_` due to linear dependencies.; * `fnocc` is incompatible with point group symmetry, so calls `c1_deep_copy` to transform the solution to a c1 solution. For concreteness, we'll assume RHF, although all HF subclasses have the same problem.; * `RHF::c1_deep_copy` calls `Wavefunction::c1_deep_copy`. The resulting wavefunction has `nmo_` equal to `nmopi_.sum()` of the previous wavefunction, as desired.; * `RHF::c1_deep_copy` calls the RHF constructor on the new wavefunction, which calls to `HF::common_init`, which initializes `nmopi_ = nsopi_`, under assumption that the subsequent SCF will call `form_Shalf`, which is _actually_ responsible for first eliminating linear dependencies and then determining `nmopi_`.; * There is no subsequent SCF, so `nmopi_ = nsopi_` at the time `fnocc` begins.; * Garbage In, Garbage Out. `fnocc` is given a garbage wavefunction and gives garbage energies. The remedy here is to no longer have `common_init` put suspect information on the wavefunction. Obligatory ping to @edeprince3. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `c1_deep_copy` no longer leads to a wrong `nmopi_` in case of linear dependency. This fixes problems with linear dependencies observed in the `fnocc` module. ## Questions; - [ ] What does this PR mean for #1545? Holger confirmed the bug there was symmetry related, and the system does have a linear dependency... It's probably worth re-investigating after this gets merged in. ## Checklist; - [x] Tests added for any newly working features; - [x] `ctest -j4` is 490/490. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2302
https://github.com/psi4/psi4/pull/2302:1521,Integrability,depend,dependencies,1521,"## Description; This PR closes #2120. The user-side problem is that when there are linear dependencies in the molecule, `fnocc` reports uncontrolled energies, iteration-by-iteration. The mechanism for this is as follows:. * `run_fnocc` requests an SCF computation. `nmopi_ < nsopi_` due to linear dependencies.; * `fnocc` is incompatible with point group symmetry, so calls `c1_deep_copy` to transform the solution to a c1 solution. For concreteness, we'll assume RHF, although all HF subclasses have the same problem.; * `RHF::c1_deep_copy` calls `Wavefunction::c1_deep_copy`. The resulting wavefunction has `nmo_` equal to `nmopi_.sum()` of the previous wavefunction, as desired.; * `RHF::c1_deep_copy` calls the RHF constructor on the new wavefunction, which calls to `HF::common_init`, which initializes `nmopi_ = nsopi_`, under assumption that the subsequent SCF will call `form_Shalf`, which is _actually_ responsible for first eliminating linear dependencies and then determining `nmopi_`.; * There is no subsequent SCF, so `nmopi_ = nsopi_` at the time `fnocc` begins.; * Garbage In, Garbage Out. `fnocc` is given a garbage wavefunction and gives garbage energies. The remedy here is to no longer have `common_init` put suspect information on the wavefunction. Obligatory ping to @edeprince3. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `c1_deep_copy` no longer leads to a wrong `nmopi_` in case of linear dependency. This fixes problems with linear dependencies observed in the `fnocc` module. ## Questions; - [ ] What does this PR mean for #1545? Holger confirmed the bug there was symmetry related, and the system does have a linear dependency... It's probably worth re-investigating after this gets merged in. ## Checklist; - [x] Tests added for any newly working features; - [x] `ctest -j4` is 490/490. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2302
https://github.com/psi4/psi4/pull/2302:1707,Integrability,depend,dependency,1707,"## Description; This PR closes #2120. The user-side problem is that when there are linear dependencies in the molecule, `fnocc` reports uncontrolled energies, iteration-by-iteration. The mechanism for this is as follows:. * `run_fnocc` requests an SCF computation. `nmopi_ < nsopi_` due to linear dependencies.; * `fnocc` is incompatible with point group symmetry, so calls `c1_deep_copy` to transform the solution to a c1 solution. For concreteness, we'll assume RHF, although all HF subclasses have the same problem.; * `RHF::c1_deep_copy` calls `Wavefunction::c1_deep_copy`. The resulting wavefunction has `nmo_` equal to `nmopi_.sum()` of the previous wavefunction, as desired.; * `RHF::c1_deep_copy` calls the RHF constructor on the new wavefunction, which calls to `HF::common_init`, which initializes `nmopi_ = nsopi_`, under assumption that the subsequent SCF will call `form_Shalf`, which is _actually_ responsible for first eliminating linear dependencies and then determining `nmopi_`.; * There is no subsequent SCF, so `nmopi_ = nsopi_` at the time `fnocc` begins.; * Garbage In, Garbage Out. `fnocc` is given a garbage wavefunction and gives garbage energies. The remedy here is to no longer have `common_init` put suspect information on the wavefunction. Obligatory ping to @edeprince3. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `c1_deep_copy` no longer leads to a wrong `nmopi_` in case of linear dependency. This fixes problems with linear dependencies observed in the `fnocc` module. ## Questions; - [ ] What does this PR mean for #1545? Holger confirmed the bug there was symmetry related, and the system does have a linear dependency... It's probably worth re-investigating after this gets merged in. ## Checklist; - [x] Tests added for any newly working features; - [x] `ctest -j4` is 490/490. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2302
https://github.com/psi4/psi4/pull/2302:1805,Testability,Test,Tests,1805,"## Description; This PR closes #2120. The user-side problem is that when there are linear dependencies in the molecule, `fnocc` reports uncontrolled energies, iteration-by-iteration. The mechanism for this is as follows:. * `run_fnocc` requests an SCF computation. `nmopi_ < nsopi_` due to linear dependencies.; * `fnocc` is incompatible with point group symmetry, so calls `c1_deep_copy` to transform the solution to a c1 solution. For concreteness, we'll assume RHF, although all HF subclasses have the same problem.; * `RHF::c1_deep_copy` calls `Wavefunction::c1_deep_copy`. The resulting wavefunction has `nmo_` equal to `nmopi_.sum()` of the previous wavefunction, as desired.; * `RHF::c1_deep_copy` calls the RHF constructor on the new wavefunction, which calls to `HF::common_init`, which initializes `nmopi_ = nsopi_`, under assumption that the subsequent SCF will call `form_Shalf`, which is _actually_ responsible for first eliminating linear dependencies and then determining `nmopi_`.; * There is no subsequent SCF, so `nmopi_ = nsopi_` at the time `fnocc` begins.; * Garbage In, Garbage Out. `fnocc` is given a garbage wavefunction and gives garbage energies. The remedy here is to no longer have `common_init` put suspect information on the wavefunction. Obligatory ping to @edeprince3. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `c1_deep_copy` no longer leads to a wrong `nmopi_` in case of linear dependency. This fixes problems with linear dependencies observed in the `fnocc` module. ## Questions; - [ ] What does this PR mean for #1545? Holger confirmed the bug there was symmetry related, and the system does have a linear dependency... It's probably worth re-investigating after this gets merged in. ## Checklist; - [x] Tests added for any newly working features; - [x] `ctest -j4` is 490/490. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2302
https://github.com/psi4/psi4/issues/2303:391,Availability,down,down,391,"following up on issues unresolved in #2293. split issue as needed; - [ ] remove all internal cfour files; - [ ] remove cfour from read_options; - [ ] kill off or otherwise address sole `using(""qcdb"")` test case; - [ ] implement atol_ and rtol_e/g/h from qcng into psi4 stdsuite runner; - [ ] check `hessian(""HF/basis"")` properly get a `HF TOTAL HESSIAN` qcvar; - [ ] in cc.rst table, settle down to two symbols meaning NYI and not-applicable-to-method, rather than the ""N"", ""---"", ""n/a"" mixture at present.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2303
https://github.com/psi4/psi4/issues/2303:201,Testability,test,test,201,"following up on issues unresolved in #2293. split issue as needed; - [ ] remove all internal cfour files; - [ ] remove cfour from read_options; - [ ] kill off or otherwise address sole `using(""qcdb"")` test case; - [ ] implement atol_ and rtol_e/g/h from qcng into psi4 stdsuite runner; - [ ] check `hessian(""HF/basis"")` properly get a `HF TOTAL HESSIAN` qcvar; - [ ] in cc.rst table, settle down to two symbols meaning NYI and not-applicable-to-method, rather than the ""N"", ""---"", ""n/a"" mixture at present.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2303
https://github.com/psi4/psi4/issues/2304:536,Availability,error,errors,536,"Hi all,. I have been benchmarking energy calculations of various organic small-molecule dimers in Psi4. These dimers have minimum monomer separations (closest intermolecular contact) up to 15 Å. To determine which method produces interaction energies closest to coupled cluster results, I have graphed the partial crystal lattice energy contributions (a scaled sum of the dimer interaction energies) for subsets of dimers with monomer separations between (n, n+1). Odd behavior arose when analyzing results of benzene. PBEh-3c returned errors _much_ larger than any other method. To investigate these results, PBE, PBEh, and PBEh-3c were run in ORCA (5.0.1) and Psi4 (1.4rc3). Results are shown below. Methods denoted with an asterisk are those which use a fine grid (total points = 6340328). Methods without an asterisk used the default grid (Psi4 total points = 253270; ORCA total points = 56510). ![subplot-8](https://user-images.githubusercontent.com/87093097/134976005-f5bf7501-27d2-40c0-b033-06b33126f8dc.png). The graph shows that while PBE generally agrees in Psi4 and ORCA, PBEh and PBEh-3c disagree when comparing the two software packages and default grid points are used. When Psi4 uses a fine grid, the results align more-so with ORCA -- and the coupled cluster results. Two individual dimers have been chosen to highlight the differences in interaction energies:. | Benzene Dimer | Min. Monomer Separation (Å) | Interaction Energy (kJ/mol) | Software | Spherical Points | Radial Points | Total Points |; |---|---|---|---|---|---|---|; | 2mer-0+1 | 2.544 | -6.01017169 | ORCA | 194 | OptM3 with GC (2021) | 56510 |; | | | -6.09347943 | Psi4 | 302 | 75 | 253270 |; | | | -6.06158176 | Psi4 | 5810 | 99 | 6340328 |; | 2mer-0+77 | 11.016 | -0.03777130 | ORCA | 194 | OptM3 with GC (2021) | 56510 |; | | | -0.09279455 | Psi4 | 302 | 75 | 253270 |; | | | -0.03957357 | Psi4 | 5810 | 99 | 6340328 |. To me, this seems to be a systematic issue with Psi4 calculating interaction energies with PBE",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2304
https://github.com/psi4/psi4/issues/2304:34,Energy Efficiency,energy,energy,34,"Hi all,. I have been benchmarking energy calculations of various organic small-molecule dimers in Psi4. These dimers have minimum monomer separations (closest intermolecular contact) up to 15 Å. To determine which method produces interaction energies closest to coupled cluster results, I have graphed the partial crystal lattice energy contributions (a scaled sum of the dimer interaction energies) for subsets of dimers with monomer separations between (n, n+1). Odd behavior arose when analyzing results of benzene. PBEh-3c returned errors _much_ larger than any other method. To investigate these results, PBE, PBEh, and PBEh-3c were run in ORCA (5.0.1) and Psi4 (1.4rc3). Results are shown below. Methods denoted with an asterisk are those which use a fine grid (total points = 6340328). Methods without an asterisk used the default grid (Psi4 total points = 253270; ORCA total points = 56510). ![subplot-8](https://user-images.githubusercontent.com/87093097/134976005-f5bf7501-27d2-40c0-b033-06b33126f8dc.png). The graph shows that while PBE generally agrees in Psi4 and ORCA, PBEh and PBEh-3c disagree when comparing the two software packages and default grid points are used. When Psi4 uses a fine grid, the results align more-so with ORCA -- and the coupled cluster results. Two individual dimers have been chosen to highlight the differences in interaction energies:. | Benzene Dimer | Min. Monomer Separation (Å) | Interaction Energy (kJ/mol) | Software | Spherical Points | Radial Points | Total Points |; |---|---|---|---|---|---|---|; | 2mer-0+1 | 2.544 | -6.01017169 | ORCA | 194 | OptM3 with GC (2021) | 56510 |; | | | -6.09347943 | Psi4 | 302 | 75 | 253270 |; | | | -6.06158176 | Psi4 | 5810 | 99 | 6340328 |; | 2mer-0+77 | 11.016 | -0.03777130 | ORCA | 194 | OptM3 with GC (2021) | 56510 |; | | | -0.09279455 | Psi4 | 302 | 75 | 253270 |; | | | -0.03957357 | Psi4 | 5810 | 99 | 6340328 |. To me, this seems to be a systematic issue with Psi4 calculating interaction energies with PBE",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2304
https://github.com/psi4/psi4/issues/2304:330,Energy Efficiency,energy,energy,330,"Hi all,. I have been benchmarking energy calculations of various organic small-molecule dimers in Psi4. These dimers have minimum monomer separations (closest intermolecular contact) up to 15 Å. To determine which method produces interaction energies closest to coupled cluster results, I have graphed the partial crystal lattice energy contributions (a scaled sum of the dimer interaction energies) for subsets of dimers with monomer separations between (n, n+1). Odd behavior arose when analyzing results of benzene. PBEh-3c returned errors _much_ larger than any other method. To investigate these results, PBE, PBEh, and PBEh-3c were run in ORCA (5.0.1) and Psi4 (1.4rc3). Results are shown below. Methods denoted with an asterisk are those which use a fine grid (total points = 6340328). Methods without an asterisk used the default grid (Psi4 total points = 253270; ORCA total points = 56510). ![subplot-8](https://user-images.githubusercontent.com/87093097/134976005-f5bf7501-27d2-40c0-b033-06b33126f8dc.png). The graph shows that while PBE generally agrees in Psi4 and ORCA, PBEh and PBEh-3c disagree when comparing the two software packages and default grid points are used. When Psi4 uses a fine grid, the results align more-so with ORCA -- and the coupled cluster results. Two individual dimers have been chosen to highlight the differences in interaction energies:. | Benzene Dimer | Min. Monomer Separation (Å) | Interaction Energy (kJ/mol) | Software | Spherical Points | Radial Points | Total Points |; |---|---|---|---|---|---|---|; | 2mer-0+1 | 2.544 | -6.01017169 | ORCA | 194 | OptM3 with GC (2021) | 56510 |; | | | -6.09347943 | Psi4 | 302 | 75 | 253270 |; | | | -6.06158176 | Psi4 | 5810 | 99 | 6340328 |; | 2mer-0+77 | 11.016 | -0.03777130 | ORCA | 194 | OptM3 with GC (2021) | 56510 |; | | | -0.09279455 | Psi4 | 302 | 75 | 253270 |; | | | -0.03957357 | Psi4 | 5810 | 99 | 6340328 |. To me, this seems to be a systematic issue with Psi4 calculating interaction energies with PBE",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2304
https://github.com/psi4/psi4/issues/2304:1438,Energy Efficiency,Energy,Energy,1438," dimers in Psi4. These dimers have minimum monomer separations (closest intermolecular contact) up to 15 Å. To determine which method produces interaction energies closest to coupled cluster results, I have graphed the partial crystal lattice energy contributions (a scaled sum of the dimer interaction energies) for subsets of dimers with monomer separations between (n, n+1). Odd behavior arose when analyzing results of benzene. PBEh-3c returned errors _much_ larger than any other method. To investigate these results, PBE, PBEh, and PBEh-3c were run in ORCA (5.0.1) and Psi4 (1.4rc3). Results are shown below. Methods denoted with an asterisk are those which use a fine grid (total points = 6340328). Methods without an asterisk used the default grid (Psi4 total points = 253270; ORCA total points = 56510). ![subplot-8](https://user-images.githubusercontent.com/87093097/134976005-f5bf7501-27d2-40c0-b033-06b33126f8dc.png). The graph shows that while PBE generally agrees in Psi4 and ORCA, PBEh and PBEh-3c disagree when comparing the two software packages and default grid points are used. When Psi4 uses a fine grid, the results align more-so with ORCA -- and the coupled cluster results. Two individual dimers have been chosen to highlight the differences in interaction energies:. | Benzene Dimer | Min. Monomer Separation (Å) | Interaction Energy (kJ/mol) | Software | Spherical Points | Radial Points | Total Points |; |---|---|---|---|---|---|---|; | 2mer-0+1 | 2.544 | -6.01017169 | ORCA | 194 | OptM3 with GC (2021) | 56510 |; | | | -6.09347943 | Psi4 | 302 | 75 | 253270 |; | | | -6.06158176 | Psi4 | 5810 | 99 | 6340328 |; | 2mer-0+77 | 11.016 | -0.03777130 | ORCA | 194 | OptM3 with GC (2021) | 56510 |; | | | -0.09279455 | Psi4 | 302 | 75 | 253270 |; | | | -0.03957357 | Psi4 | 5810 | 99 | 6340328 |. To me, this seems to be a systematic issue with Psi4 calculating interaction energies with PBEh / PBEh-3c. Does anyone know of a reason why this might be occurring? . Thanks y'all!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2304
https://github.com/psi4/psi4/issues/2304:21,Testability,benchmark,benchmarking,21,"Hi all,. I have been benchmarking energy calculations of various organic small-molecule dimers in Psi4. These dimers have minimum monomer separations (closest intermolecular contact) up to 15 Å. To determine which method produces interaction energies closest to coupled cluster results, I have graphed the partial crystal lattice energy contributions (a scaled sum of the dimer interaction energies) for subsets of dimers with monomer separations between (n, n+1). Odd behavior arose when analyzing results of benzene. PBEh-3c returned errors _much_ larger than any other method. To investigate these results, PBE, PBEh, and PBEh-3c were run in ORCA (5.0.1) and Psi4 (1.4rc3). Results are shown below. Methods denoted with an asterisk are those which use a fine grid (total points = 6340328). Methods without an asterisk used the default grid (Psi4 total points = 253270; ORCA total points = 56510). ![subplot-8](https://user-images.githubusercontent.com/87093097/134976005-f5bf7501-27d2-40c0-b033-06b33126f8dc.png). The graph shows that while PBE generally agrees in Psi4 and ORCA, PBEh and PBEh-3c disagree when comparing the two software packages and default grid points are used. When Psi4 uses a fine grid, the results align more-so with ORCA -- and the coupled cluster results. Two individual dimers have been chosen to highlight the differences in interaction energies:. | Benzene Dimer | Min. Monomer Separation (Å) | Interaction Energy (kJ/mol) | Software | Spherical Points | Radial Points | Total Points |; |---|---|---|---|---|---|---|; | 2mer-0+1 | 2.544 | -6.01017169 | ORCA | 194 | OptM3 with GC (2021) | 56510 |; | | | -6.09347943 | Psi4 | 302 | 75 | 253270 |; | | | -6.06158176 | Psi4 | 5810 | 99 | 6340328 |; | 2mer-0+77 | 11.016 | -0.03777130 | ORCA | 194 | OptM3 with GC (2021) | 56510 |; | | | -0.09279455 | Psi4 | 302 | 75 | 253270 |; | | | -0.03957357 | Psi4 | 5810 | 99 | 6340328 |. To me, this seems to be a systematic issue with Psi4 calculating interaction energies with PBE",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2304
https://github.com/psi4/psi4/issues/2305:119,Energy Efficiency,energy,energy,119,"The following input file fails:; ```; set {; reference rhf ; basis cc-pVDZ; scf_type pk; freeze_core true; }. _, wfn = energy('mp2',return_wfn = True); energy('mrccsd', ref_wfn=wfn); ```. The problem is that `run_mrcc` expects [the ""CURRENT SCF ENERGY""](https://github.com/psi4/psi4/blob/2d33c3f83bee2d2b87b7a9ee4eb0c5d230b65403/psi4/driver/procrouting/proc.py#L4572) variable to be set in core, which was wiped [as soon as the energy call ran](https://github.com/psi4/psi4/blob/2d33c3f83bee2d2b87b7a9ee4eb0c5d230b65403/psi4/driver/driver.py#L546). @loriab, is there any reason _not_ to grab this variable from the incoming wavefunction?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2305
https://github.com/psi4/psi4/issues/2305:152,Energy Efficiency,energy,energy,152,"The following input file fails:; ```; set {; reference rhf ; basis cc-pVDZ; scf_type pk; freeze_core true; }. _, wfn = energy('mp2',return_wfn = True); energy('mrccsd', ref_wfn=wfn); ```. The problem is that `run_mrcc` expects [the ""CURRENT SCF ENERGY""](https://github.com/psi4/psi4/blob/2d33c3f83bee2d2b87b7a9ee4eb0c5d230b65403/psi4/driver/procrouting/proc.py#L4572) variable to be set in core, which was wiped [as soon as the energy call ran](https://github.com/psi4/psi4/blob/2d33c3f83bee2d2b87b7a9ee4eb0c5d230b65403/psi4/driver/driver.py#L546). @loriab, is there any reason _not_ to grab this variable from the incoming wavefunction?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2305
https://github.com/psi4/psi4/issues/2305:245,Energy Efficiency,ENERGY,ENERGY,245,"The following input file fails:; ```; set {; reference rhf ; basis cc-pVDZ; scf_type pk; freeze_core true; }. _, wfn = energy('mp2',return_wfn = True); energy('mrccsd', ref_wfn=wfn); ```. The problem is that `run_mrcc` expects [the ""CURRENT SCF ENERGY""](https://github.com/psi4/psi4/blob/2d33c3f83bee2d2b87b7a9ee4eb0c5d230b65403/psi4/driver/procrouting/proc.py#L4572) variable to be set in core, which was wiped [as soon as the energy call ran](https://github.com/psi4/psi4/blob/2d33c3f83bee2d2b87b7a9ee4eb0c5d230b65403/psi4/driver/driver.py#L546). @loriab, is there any reason _not_ to grab this variable from the incoming wavefunction?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2305
https://github.com/psi4/psi4/issues/2305:428,Energy Efficiency,energy,energy,428,"The following input file fails:; ```; set {; reference rhf ; basis cc-pVDZ; scf_type pk; freeze_core true; }. _, wfn = energy('mp2',return_wfn = True); energy('mrccsd', ref_wfn=wfn); ```. The problem is that `run_mrcc` expects [the ""CURRENT SCF ENERGY""](https://github.com/psi4/psi4/blob/2d33c3f83bee2d2b87b7a9ee4eb0c5d230b65403/psi4/driver/procrouting/proc.py#L4572) variable to be set in core, which was wiped [as soon as the energy call ran](https://github.com/psi4/psi4/blob/2d33c3f83bee2d2b87b7a9ee4eb0c5d230b65403/psi4/driver/driver.py#L546). @loriab, is there any reason _not_ to grab this variable from the incoming wavefunction?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2305
https://github.com/psi4/psi4/issues/2305:368,Modifiability,variab,variable,368,"The following input file fails:; ```; set {; reference rhf ; basis cc-pVDZ; scf_type pk; freeze_core true; }. _, wfn = energy('mp2',return_wfn = True); energy('mrccsd', ref_wfn=wfn); ```. The problem is that `run_mrcc` expects [the ""CURRENT SCF ENERGY""](https://github.com/psi4/psi4/blob/2d33c3f83bee2d2b87b7a9ee4eb0c5d230b65403/psi4/driver/procrouting/proc.py#L4572) variable to be set in core, which was wiped [as soon as the energy call ran](https://github.com/psi4/psi4/blob/2d33c3f83bee2d2b87b7a9ee4eb0c5d230b65403/psi4/driver/driver.py#L546). @loriab, is there any reason _not_ to grab this variable from the incoming wavefunction?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2305
https://github.com/psi4/psi4/issues/2305:597,Modifiability,variab,variable,597,"The following input file fails:; ```; set {; reference rhf ; basis cc-pVDZ; scf_type pk; freeze_core true; }. _, wfn = energy('mp2',return_wfn = True); energy('mrccsd', ref_wfn=wfn); ```. The problem is that `run_mrcc` expects [the ""CURRENT SCF ENERGY""](https://github.com/psi4/psi4/blob/2d33c3f83bee2d2b87b7a9ee4eb0c5d230b65403/psi4/driver/procrouting/proc.py#L4572) variable to be set in core, which was wiped [as soon as the energy call ran](https://github.com/psi4/psi4/blob/2d33c3f83bee2d2b87b7a9ee4eb0c5d230b65403/psi4/driver/driver.py#L546). @loriab, is there any reason _not_ to grab this variable from the incoming wavefunction?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2305
https://github.com/psi4/psi4/issues/2307:777,Testability,assert,assert,777,"Hi Psi4 developers,. The QCSchema method of input to Psi4 is super convenient and plays well with standard I/O packagers like QCEngine, but it only allows the computation of a limited number of properties:. https://github.com/psi4/psi4/blob/9163cbd08865d26129cfbaf5c302fc14f870f30f/psi4/driver/schema_wrapper.py#L69-L71. It would be really convenient to compute other oeprops as well, especially GRID_ESP, using the schema framework. Would it be possible / desirable to have this in Psi4? . **Example use**. ```python; model = qcelemental.models.AtomicInput(; molecule=mol,; driver=""properties"",; model={""method"": ""SCF"", ""basis"": ""sto-3g"", properties=[""GRID_ESP"", ""GRID_FIELD""]},; keywords={""scf_type"": ""df"",; ""grid"": my_mol_grid}; ). result = qcengine.compute(model, ""psi4""). assert result.properties.grid_esp is not None; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2307
https://github.com/psi4/psi4/issues/2308:189,Energy Efficiency,energy,energy,189,"For some reason, the following script raises a segfault:. ```; molecule {; O; H 1 1.0 ; H 1 1.0 2 104.5; }. set {; reference rohf; basis cc-pVDZ; scf_type pk; freeze_core true; }. _, wfn = energy('bccd(t)',return_wfn = True); energy('mrccsdt', ref_wfn=wfn); ```. It runs fine when I use RHF Brueckner or ROHF SCF, so it's the ROHF Brueckner combination that's guilty.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2308
https://github.com/psi4/psi4/issues/2308:226,Energy Efficiency,energy,energy,226,"For some reason, the following script raises a segfault:. ```; molecule {; O; H 1 1.0 ; H 1 1.0 2 104.5; }. set {; reference rohf; basis cc-pVDZ; scf_type pk; freeze_core true; }. _, wfn = energy('bccd(t)',return_wfn = True); energy('mrccsdt', ref_wfn=wfn); ```. It runs fine when I use RHF Brueckner or ROHF SCF, so it's the ROHF Brueckner combination that's guilty.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2308
https://github.com/psi4/psi4/issues/2309:237,Energy Efficiency,energy,energy,237,"Running the following input; ```; molecule {; symmetry c2v; 0 1; N; N 1 1.50; }. set basis cc-pCVDZ; set reference rohf. set restricted_docc [2, 0, 0, 0]; set ras1 [0, 0, 0, 0]; set ras2 [4, 0, 2, 2]; set ras3 [0, 0, 0, 0]; E, cas_wfn = energy('rasscf', return_wfn = True). set restricted_docc [0, 0, 0, 0]; set ras1 [2, 0, 0, 0]; set ras2 [4, 0, 2, 2]; set ras3 [4, 0, 2, 2]; E, ras_wfn = energy('detci', ref_wfn = cas_wfn, return_wfn = True); ```; results in a successful run but; ```; $ psi4 NN_1.50.in ; free(): invalid size; Aborted (core dumped); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2309
https://github.com/psi4/psi4/issues/2309:390,Energy Efficiency,energy,energy,390,"Running the following input; ```; molecule {; symmetry c2v; 0 1; N; N 1 1.50; }. set basis cc-pCVDZ; set reference rohf. set restricted_docc [2, 0, 0, 0]; set ras1 [0, 0, 0, 0]; set ras2 [4, 0, 2, 2]; set ras3 [0, 0, 0, 0]; E, cas_wfn = energy('rasscf', return_wfn = True). set restricted_docc [0, 0, 0, 0]; set ras1 [2, 0, 0, 0]; set ras2 [4, 0, 2, 2]; set ras3 [4, 0, 2, 2]; E, ras_wfn = energy('detci', ref_wfn = cas_wfn, return_wfn = True); ```; results in a successful run but; ```; $ psi4 NN_1.50.in ; free(): invalid size; Aborted (core dumped); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2309
https://github.com/psi4/psi4/issues/2309:530,Safety,Abort,Aborted,530,"Running the following input; ```; molecule {; symmetry c2v; 0 1; N; N 1 1.50; }. set basis cc-pCVDZ; set reference rohf. set restricted_docc [2, 0, 0, 0]; set ras1 [0, 0, 0, 0]; set ras2 [4, 0, 2, 2]; set ras3 [0, 0, 0, 0]; E, cas_wfn = energy('rasscf', return_wfn = True). set restricted_docc [0, 0, 0, 0]; set ras1 [2, 0, 0, 0]; set ras2 [4, 0, 2, 2]; set ras3 [4, 0, 2, 2]; E, ras_wfn = energy('detci', ref_wfn = cas_wfn, return_wfn = True); ```; results in a successful run but; ```; $ psi4 NN_1.50.in ; free(): invalid size; Aborted (core dumped); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2309
https://github.com/psi4/psi4/issues/2310:613,Availability,reliab,reliable,613,"The following input segfaults:. ```; memory 16GB; molecule{; 0 2; C -1.309749745 1.180176173 -0.025170341; O -0.725300438 2.155147669 0.452713346; C -2.816719340 1.155998649 -0.110605975; H -3.220628949 1.262541455 0.893082386; H -3.209427538 0.248634016 -0.561900090; H -3.143158132 2.016595633 -0.688893115. units angstrom; symmetry c1; }. set{; basis def2-svp; reference uhf; DFCC False; Freeze_core True; CACHELEVEL 0; scf_type direct; print 2; }; set_num_threads(32). properties('ccsd',properties=['polarizability']); ```. I've been able to reproduce this on a serial run. My initial `lldb` run isn't giving reliable information, because it's confusing the various `MOInfo` objects defined in different `cc` modules.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2310
https://github.com/psi4/psi4/issues/2310:409,Performance,CACHE,CACHELEVEL,409,"The following input segfaults:. ```; memory 16GB; molecule{; 0 2; C -1.309749745 1.180176173 -0.025170341; O -0.725300438 2.155147669 0.452713346; C -2.816719340 1.155998649 -0.110605975; H -3.220628949 1.262541455 0.893082386; H -3.209427538 0.248634016 -0.561900090; H -3.143158132 2.016595633 -0.688893115. units angstrom; symmetry c1; }. set{; basis def2-svp; reference uhf; DFCC False; Freeze_core True; CACHELEVEL 0; scf_type direct; print 2; }; set_num_threads(32). properties('ccsd',properties=['polarizability']); ```. I've been able to reproduce this on a serial run. My initial `lldb` run isn't giving reliable information, because it's confusing the various `MOInfo` objects defined in different `cc` modules.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2310
https://github.com/psi4/psi4/pull/2311:1311,Availability,error,errors,1311,"## Description; This code is an implementation of the CFMM Method (C.A. White et. al 1994) for linear-scaling building of the J matrix, used in HF, DFT, and SAPT. Reference Paper: https://www.sciencedirect.com/science/article/pii/0009261494011281. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Implements a Low Scaling J matrix build that is competitive with traditional DirectJK J matrix build, giving a complementing linear scaling algorithm to Linear Exchange (LinK).; - [x] Implements a new and more efficient multipoles library in Psi4 (in libfmm as multipoles_helper). ## Questions; - [ ] Do we need to make a new JK class to handle new methods like CFMM and LinK? (Like LinearJK : public JK). ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge. ## Data; (Comparing the J build in CFMM (Waterclusters, 6-31G*) to a traditional DirectJK build of the J and K matrices); ![Comparative CFMM Watercluster Results 10-02-2021](https://user-images.githubusercontent.com/60559795/135762894-9a9eb837-731e-4f12-92d7-932b4918c602.png). (Looking at the CFMM errors over system size (using multipole order 10, only considering systems that converge within 8 iterations); ![CFMM Errors (New CFMM Code)](https://user-images.githubusercontent.com/60559795/135762954-e672f7cb-e818-439a-b2bf-3d84dc1aaa7e.png). (Looking how the CFMM total J time compares to the total wall time [No LinK is used]); (NOTE: The near field calculations take up a majority of the J build time, as multipoles are relatively free); ![CFMM Watercluster Results 10-02-2021](https://user-images.githubusercontent.com/60559795/135762959-71ec2078-79bc-48d8-b418-5689f1045e48.png)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2311
https://github.com/psi4/psi4/pull/2311:1430,Availability,Error,Errors,1430,"## Description; This code is an implementation of the CFMM Method (C.A. White et. al 1994) for linear-scaling building of the J matrix, used in HF, DFT, and SAPT. Reference Paper: https://www.sciencedirect.com/science/article/pii/0009261494011281. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Implements a Low Scaling J matrix build that is competitive with traditional DirectJK J matrix build, giving a complementing linear scaling algorithm to Linear Exchange (LinK).; - [x] Implements a new and more efficient multipoles library in Psi4 (in libfmm as multipoles_helper). ## Questions; - [ ] Do we need to make a new JK class to handle new methods like CFMM and LinK? (Like LinearJK : public JK). ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge. ## Data; (Comparing the J build in CFMM (Waterclusters, 6-31G*) to a traditional DirectJK build of the J and K matrices); ![Comparative CFMM Watercluster Results 10-02-2021](https://user-images.githubusercontent.com/60559795/135762894-9a9eb837-731e-4f12-92d7-932b4918c602.png). (Looking at the CFMM errors over system size (using multipole order 10, only considering systems that converge within 8 iterations); ![CFMM Errors (New CFMM Code)](https://user-images.githubusercontent.com/60559795/135762954-e672f7cb-e818-439a-b2bf-3d84dc1aaa7e.png). (Looking how the CFMM total J time compares to the total wall time [No LinK is used]); (NOTE: The near field calculations take up a majority of the J build time, as multipoles are relatively free); ![CFMM Watercluster Results 10-02-2021](https://user-images.githubusercontent.com/60559795/135762959-71ec2078-79bc-48d8-b418-5689f1045e48.png)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2311
https://github.com/psi4/psi4/pull/2311:565,Energy Efficiency,efficient,efficient,565,"## Description; This code is an implementation of the CFMM Method (C.A. White et. al 1994) for linear-scaling building of the J matrix, used in HF, DFT, and SAPT. Reference Paper: https://www.sciencedirect.com/science/article/pii/0009261494011281. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Implements a Low Scaling J matrix build that is competitive with traditional DirectJK J matrix build, giving a complementing linear scaling algorithm to Linear Exchange (LinK).; - [x] Implements a new and more efficient multipoles library in Psi4 (in libfmm as multipoles_helper). ## Questions; - [ ] Do we need to make a new JK class to handle new methods like CFMM and LinK? (Like LinearJK : public JK). ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge. ## Data; (Comparing the J build in CFMM (Waterclusters, 6-31G*) to a traditional DirectJK build of the J and K matrices); ![Comparative CFMM Watercluster Results 10-02-2021](https://user-images.githubusercontent.com/60559795/135762894-9a9eb837-731e-4f12-92d7-932b4918c602.png). (Looking at the CFMM errors over system size (using multipole order 10, only considering systems that converge within 8 iterations); ![CFMM Errors (New CFMM Code)](https://user-images.githubusercontent.com/60559795/135762954-e672f7cb-e818-439a-b2bf-3d84dc1aaa7e.png). (Looking how the CFMM total J time compares to the total wall time [No LinK is used]); (NOTE: The near field calculations take up a majority of the J build time, as multipoles are relatively free); ![CFMM Watercluster Results 10-02-2021](https://user-images.githubusercontent.com/60559795/135762959-71ec2078-79bc-48d8-b418-5689f1045e48.png)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2311
https://github.com/psi4/psi4/pull/2311:781,Testability,Test,Tests,781,"## Description; This code is an implementation of the CFMM Method (C.A. White et. al 1994) for linear-scaling building of the J matrix, used in HF, DFT, and SAPT. Reference Paper: https://www.sciencedirect.com/science/article/pii/0009261494011281. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Implements a Low Scaling J matrix build that is competitive with traditional DirectJK J matrix build, giving a complementing linear scaling algorithm to Linear Exchange (LinK).; - [x] Implements a new and more efficient multipoles library in Psi4 (in libfmm as multipoles_helper). ## Questions; - [ ] Do we need to make a new JK class to handle new methods like CFMM and LinK? (Like LinearJK : public JK). ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge. ## Data; (Comparing the J build in CFMM (Waterclusters, 6-31G*) to a traditional DirectJK build of the J and K matrices); ![Comparative CFMM Watercluster Results 10-02-2021](https://user-images.githubusercontent.com/60559795/135762894-9a9eb837-731e-4f12-92d7-932b4918c602.png). (Looking at the CFMM errors over system size (using multipole order 10, only considering systems that converge within 8 iterations); ![CFMM Errors (New CFMM Code)](https://user-images.githubusercontent.com/60559795/135762954-e672f7cb-e818-439a-b2bf-3d84dc1aaa7e.png). (Looking how the CFMM total J time compares to the total wall time [No LinK is used]); (NOTE: The near field calculations take up a majority of the J build time, as multipoles are relatively free); ![CFMM Watercluster Results 10-02-2021](https://user-images.githubusercontent.com/60559795/135762959-71ec2078-79bc-48d8-b418-5689f1045e48.png)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2311
https://github.com/psi4/psi4/pull/2311:855,Testability,test,tests,855,"## Description; This code is an implementation of the CFMM Method (C.A. White et. al 1994) for linear-scaling building of the J matrix, used in HF, DFT, and SAPT. Reference Paper: https://www.sciencedirect.com/science/article/pii/0009261494011281. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Implements a Low Scaling J matrix build that is competitive with traditional DirectJK J matrix build, giving a complementing linear scaling algorithm to Linear Exchange (LinK).; - [x] Implements a new and more efficient multipoles library in Psi4 (in libfmm as multipoles_helper). ## Questions; - [ ] Do we need to make a new JK class to handle new methods like CFMM and LinK? (Like LinearJK : public JK). ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge. ## Data; (Comparing the J build in CFMM (Waterclusters, 6-31G*) to a traditional DirectJK build of the J and K matrices); ![Comparative CFMM Watercluster Results 10-02-2021](https://user-images.githubusercontent.com/60559795/135762894-9a9eb837-731e-4f12-92d7-932b4918c602.png). (Looking at the CFMM errors over system size (using multipole order 10, only considering systems that converge within 8 iterations); ![CFMM Errors (New CFMM Code)](https://user-images.githubusercontent.com/60559795/135762954-e672f7cb-e818-439a-b2bf-3d84dc1aaa7e.png). (Looking how the CFMM total J time compares to the total wall time [No LinK is used]); (NOTE: The near field calculations take up a majority of the J build time, as multipoles are relatively free); ![CFMM Watercluster Results 10-02-2021](https://user-images.githubusercontent.com/60559795/135762959-71ec2078-79bc-48d8-b418-5689f1045e48.png)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2311
https://github.com/psi4/psi4/pull/2311:946,Testability,test,tests,946,"## Description; This code is an implementation of the CFMM Method (C.A. White et. al 1994) for linear-scaling building of the J matrix, used in HF, DFT, and SAPT. Reference Paper: https://www.sciencedirect.com/science/article/pii/0009261494011281. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Implements a Low Scaling J matrix build that is competitive with traditional DirectJK J matrix build, giving a complementing linear scaling algorithm to Linear Exchange (LinK).; - [x] Implements a new and more efficient multipoles library in Psi4 (in libfmm as multipoles_helper). ## Questions; - [ ] Do we need to make a new JK class to handle new methods like CFMM and LinK? (Like LinearJK : public JK). ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge. ## Data; (Comparing the J build in CFMM (Waterclusters, 6-31G*) to a traditional DirectJK build of the J and K matrices); ![Comparative CFMM Watercluster Results 10-02-2021](https://user-images.githubusercontent.com/60559795/135762894-9a9eb837-731e-4f12-92d7-932b4918c602.png). (Looking at the CFMM errors over system size (using multipole order 10, only considering systems that converge within 8 iterations); ![CFMM Errors (New CFMM Code)](https://user-images.githubusercontent.com/60559795/135762954-e672f7cb-e818-439a-b2bf-3d84dc1aaa7e.png). (Looking how the CFMM total J time compares to the total wall time [No LinK is used]); (NOTE: The near field calculations take up a majority of the J build time, as multipoles are relatively free); ![CFMM Watercluster Results 10-02-2021](https://user-images.githubusercontent.com/60559795/135762959-71ec2078-79bc-48d8-b418-5689f1045e48.png)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2311
https://github.com/psi4/psi4/pull/2312:101,Testability,test,test,101,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; time to fix the full test suite again. these will help, though more PRs may be needed. ## Status; - [x] Ready for review; - [x] Ready for merge SQUASH",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2312
https://github.com/psi4/psi4/pull/2313:436,Deployability,Update,Update,436,"## Description; Fixes the DLPNO docs (PR #2093). I can now build the docs locally, ~~although I still get the following warnings:~~; ```; /theoryfs2/ds/glick/gits/psi4/objdir/doc/sphinxman/source/dlpnomp2.rst:90: WARNING: Undefined substitution referenced: ""dlpno__pno_convergence"".; /theoryfs2/ds/glick/gits/psi4/objdir/doc/sphinxman/source/dlpnomp2.rst:207: WARNING: Undefined substitution referenced: ""dlpno__pno_convergence"".; ```; Update: Warnings are fixed thanks to a suggestion from Lori. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2313
https://github.com/psi4/psi4/pull/2314:2043,Availability,avail,available,2043," SAPT levels. The E(30)ind correction needs to be calculated beforehand, both for subtracting its value from the total (ind+ex-ind) calculated here, and for generating the third-order induction amplitudes that are reused here. However, unlike most of the stuff in `libsapt_solver`, the code is AO-based and the two-electron integrals enter only via generalized J/K matrices. Therefore, I had to export some additional AO quantities in `libsapt_solver/sapt.h` and I don't know if I did this in an optimal way.; - [x] Note to self: frozen core still needs to be checked. ## Design (Big-Picture) Questions - input from @CDSherrill @dgasmith @loriab and others will be highly beneficial!; - [ ] The three new(ish) beyond-S^2 corrections, E(20)exch-ind, E(20)exch-disp, and E(30)exch-ind cannot be currently calculated by a single SAPT call: the first two require `energy('sapt(dft)')` and the last one `energy('sapt2+3')`. That's quite unfortunate and we need a better workflow, possibly by making the non-S^2 E(20)exch-ind,resp and E(20)exch-disp available as part of `energy('sapt0')`.; - [ ] What should go into aggregate SAPT energy values, S^2 or non-S^2? I made the code pick the non-S^2 value of E(30)exch-ind,resp if available, but I'd be happy to revert it back to picking E(30)exch-ind,resp(S^2). At present, I don't think the non-S^2 values of E(20)exch-ind,resp and E(20)exch-disp are ever included in total SAPT numbers, maybe they should?; - [ ] Finally, the option names such as `do_ind30_exch_sinf` are somewhat unfortunate because they propagate the misconception that you include effects all the way to S^infinity. In reality, the largest power of overlap integral S you ever need is min(NelA,NelB) - after that, you run out of electrons to exchange between A and B. **Nonapproximated**, **Nonexpanded**, and **beyond-S^2** are all formally more correct names than S^infinity. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http:",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2314
https://github.com/psi4/psi4/pull/2314:2220,Availability,avail,available,2220,"ed here, and for generating the third-order induction amplitudes that are reused here. However, unlike most of the stuff in `libsapt_solver`, the code is AO-based and the two-electron integrals enter only via generalized J/K matrices. Therefore, I had to export some additional AO quantities in `libsapt_solver/sapt.h` and I don't know if I did this in an optimal way.; - [x] Note to self: frozen core still needs to be checked. ## Design (Big-Picture) Questions - input from @CDSherrill @dgasmith @loriab and others will be highly beneficial!; - [ ] The three new(ish) beyond-S^2 corrections, E(20)exch-ind, E(20)exch-disp, and E(30)exch-ind cannot be currently calculated by a single SAPT call: the first two require `energy('sapt(dft)')` and the last one `energy('sapt2+3')`. That's quite unfortunate and we need a better workflow, possibly by making the non-S^2 E(20)exch-ind,resp and E(20)exch-disp available as part of `energy('sapt0')`.; - [ ] What should go into aggregate SAPT energy values, S^2 or non-S^2? I made the code pick the non-S^2 value of E(30)exch-ind,resp if available, but I'd be happy to revert it back to picking E(30)exch-ind,resp(S^2). At present, I don't think the non-S^2 values of E(20)exch-ind,resp and E(20)exch-disp are ever included in total SAPT numbers, maybe they should?; - [ ] Finally, the option names such as `do_ind30_exch_sinf` are somewhat unfortunate because they propagate the misconception that you include effects all the way to S^infinity. In reality, the largest power of overlap integral S you ever need is min(NelA,NelB) - after that, you run out of electrons to exchange between A and B. **Nonapproximated**, **Nonexpanded**, and **beyond-S^2** are all formally more correct names than S^infinity. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2314
https://github.com/psi4/psi4/pull/2314:648,Energy Efficiency,energy,energy,648,"## Description; Adds an initial implementation of the E(30)exch-ind SAPT correction without the single exchange (S^2) approximation, introduced in https://doi.org/10.1063/5.0035050. Original Psi4NumPy implementation by Jonathan Waldrop (@jwaldrop107), ported to C++ by Konrad Patkowski. . The resulting numbers for a bunch of tests match the SI of the above paper and the calculation takes a tiny fraction of the total SAPT2+3 time. E(30)exch-ind,resp is approximated by scaling unrelaxed E(30)exch-ind in the same way as before and is also printed. ## Usage; The nonapproximated E(30)exch-ind and E(30)exch-ind,resp numbers will be calculated by `energy('sapt2+3')` if `do_ind30_exch_sinf` is set to `True`. . ## Technical Questions and Unresolved Issues; - [x] There's certainly room for code cleanup.; - [x] I think `libsapt_solver` is the most logical home for this code and `energy('sapt2+3')` its most logical invocation - after all, this correction forms a part of SAPT2+3 only, not the lower SAPT levels. The E(30)ind correction needs to be calculated beforehand, both for subtracting its value from the total (ind+ex-ind) calculated here, and for generating the third-order induction amplitudes that are reused here. However, unlike most of the stuff in `libsapt_solver`, the code is AO-based and the two-electron integrals enter only via generalized J/K matrices. Therefore, I had to export some additional AO quantities in `libsapt_solver/sapt.h` and I don't know if I did this in an optimal way.; - [x] Note to self: frozen core still needs to be checked. ## Design (Big-Picture) Questions - input from @CDSherrill @dgasmith @loriab and others will be highly beneficial!; - [ ] The three new(ish) beyond-S^2 corrections, E(20)exch-ind, E(20)exch-disp, and E(30)exch-ind cannot be currently calculated by a single SAPT call: the first two require `energy('sapt(dft)')` and the last one `energy('sapt2+3')`. That's quite unfortunate and we need a better workflow, possibly by making the non-",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2314
https://github.com/psi4/psi4/pull/2314:880,Energy Efficiency,energy,energy,880,"## Description; Adds an initial implementation of the E(30)exch-ind SAPT correction without the single exchange (S^2) approximation, introduced in https://doi.org/10.1063/5.0035050. Original Psi4NumPy implementation by Jonathan Waldrop (@jwaldrop107), ported to C++ by Konrad Patkowski. . The resulting numbers for a bunch of tests match the SI of the above paper and the calculation takes a tiny fraction of the total SAPT2+3 time. E(30)exch-ind,resp is approximated by scaling unrelaxed E(30)exch-ind in the same way as before and is also printed. ## Usage; The nonapproximated E(30)exch-ind and E(30)exch-ind,resp numbers will be calculated by `energy('sapt2+3')` if `do_ind30_exch_sinf` is set to `True`. . ## Technical Questions and Unresolved Issues; - [x] There's certainly room for code cleanup.; - [x] I think `libsapt_solver` is the most logical home for this code and `energy('sapt2+3')` its most logical invocation - after all, this correction forms a part of SAPT2+3 only, not the lower SAPT levels. The E(30)ind correction needs to be calculated beforehand, both for subtracting its value from the total (ind+ex-ind) calculated here, and for generating the third-order induction amplitudes that are reused here. However, unlike most of the stuff in `libsapt_solver`, the code is AO-based and the two-electron integrals enter only via generalized J/K matrices. Therefore, I had to export some additional AO quantities in `libsapt_solver/sapt.h` and I don't know if I did this in an optimal way.; - [x] Note to self: frozen core still needs to be checked. ## Design (Big-Picture) Questions - input from @CDSherrill @dgasmith @loriab and others will be highly beneficial!; - [ ] The three new(ish) beyond-S^2 corrections, E(20)exch-ind, E(20)exch-disp, and E(30)exch-ind cannot be currently calculated by a single SAPT call: the first two require `energy('sapt(dft)')` and the last one `energy('sapt2+3')`. That's quite unfortunate and we need a better workflow, possibly by making the non-",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2314
https://github.com/psi4/psi4/pull/2314:1859,Energy Efficiency,energy,energy,1859,"solved Issues; - [x] There's certainly room for code cleanup.; - [x] I think `libsapt_solver` is the most logical home for this code and `energy('sapt2+3')` its most logical invocation - after all, this correction forms a part of SAPT2+3 only, not the lower SAPT levels. The E(30)ind correction needs to be calculated beforehand, both for subtracting its value from the total (ind+ex-ind) calculated here, and for generating the third-order induction amplitudes that are reused here. However, unlike most of the stuff in `libsapt_solver`, the code is AO-based and the two-electron integrals enter only via generalized J/K matrices. Therefore, I had to export some additional AO quantities in `libsapt_solver/sapt.h` and I don't know if I did this in an optimal way.; - [x] Note to self: frozen core still needs to be checked. ## Design (Big-Picture) Questions - input from @CDSherrill @dgasmith @loriab and others will be highly beneficial!; - [ ] The three new(ish) beyond-S^2 corrections, E(20)exch-ind, E(20)exch-disp, and E(30)exch-ind cannot be currently calculated by a single SAPT call: the first two require `energy('sapt(dft)')` and the last one `energy('sapt2+3')`. That's quite unfortunate and we need a better workflow, possibly by making the non-S^2 E(20)exch-ind,resp and E(20)exch-disp available as part of `energy('sapt0')`.; - [ ] What should go into aggregate SAPT energy values, S^2 or non-S^2? I made the code pick the non-S^2 value of E(30)exch-ind,resp if available, but I'd be happy to revert it back to picking E(30)exch-ind,resp(S^2). At present, I don't think the non-S^2 values of E(20)exch-ind,resp and E(20)exch-disp are ever included in total SAPT numbers, maybe they should?; - [ ] Finally, the option names such as `do_ind30_exch_sinf` are somewhat unfortunate because they propagate the misconception that you include effects all the way to S^infinity. In reality, the largest power of overlap integral S you ever need is min(NelA,NelB) - after that, you run out of e",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2314
https://github.com/psi4/psi4/pull/2314:1898,Energy Efficiency,energy,energy,1898,"solved Issues; - [x] There's certainly room for code cleanup.; - [x] I think `libsapt_solver` is the most logical home for this code and `energy('sapt2+3')` its most logical invocation - after all, this correction forms a part of SAPT2+3 only, not the lower SAPT levels. The E(30)ind correction needs to be calculated beforehand, both for subtracting its value from the total (ind+ex-ind) calculated here, and for generating the third-order induction amplitudes that are reused here. However, unlike most of the stuff in `libsapt_solver`, the code is AO-based and the two-electron integrals enter only via generalized J/K matrices. Therefore, I had to export some additional AO quantities in `libsapt_solver/sapt.h` and I don't know if I did this in an optimal way.; - [x] Note to self: frozen core still needs to be checked. ## Design (Big-Picture) Questions - input from @CDSherrill @dgasmith @loriab and others will be highly beneficial!; - [ ] The three new(ish) beyond-S^2 corrections, E(20)exch-ind, E(20)exch-disp, and E(30)exch-ind cannot be currently calculated by a single SAPT call: the first two require `energy('sapt(dft)')` and the last one `energy('sapt2+3')`. That's quite unfortunate and we need a better workflow, possibly by making the non-S^2 E(20)exch-ind,resp and E(20)exch-disp available as part of `energy('sapt0')`.; - [ ] What should go into aggregate SAPT energy values, S^2 or non-S^2? I made the code pick the non-S^2 value of E(30)exch-ind,resp if available, but I'd be happy to revert it back to picking E(30)exch-ind,resp(S^2). At present, I don't think the non-S^2 values of E(20)exch-ind,resp and E(20)exch-disp are ever included in total SAPT numbers, maybe they should?; - [ ] Finally, the option names such as `do_ind30_exch_sinf` are somewhat unfortunate because they propagate the misconception that you include effects all the way to S^infinity. In reality, the largest power of overlap integral S you ever need is min(NelA,NelB) - after that, you run out of e",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2314
https://github.com/psi4/psi4/pull/2314:2065,Energy Efficiency,energy,energy,2065," SAPT levels. The E(30)ind correction needs to be calculated beforehand, both for subtracting its value from the total (ind+ex-ind) calculated here, and for generating the third-order induction amplitudes that are reused here. However, unlike most of the stuff in `libsapt_solver`, the code is AO-based and the two-electron integrals enter only via generalized J/K matrices. Therefore, I had to export some additional AO quantities in `libsapt_solver/sapt.h` and I don't know if I did this in an optimal way.; - [x] Note to self: frozen core still needs to be checked. ## Design (Big-Picture) Questions - input from @CDSherrill @dgasmith @loriab and others will be highly beneficial!; - [ ] The three new(ish) beyond-S^2 corrections, E(20)exch-ind, E(20)exch-disp, and E(30)exch-ind cannot be currently calculated by a single SAPT call: the first two require `energy('sapt(dft)')` and the last one `energy('sapt2+3')`. That's quite unfortunate and we need a better workflow, possibly by making the non-S^2 E(20)exch-ind,resp and E(20)exch-disp available as part of `energy('sapt0')`.; - [ ] What should go into aggregate SAPT energy values, S^2 or non-S^2? I made the code pick the non-S^2 value of E(30)exch-ind,resp if available, but I'd be happy to revert it back to picking E(30)exch-ind,resp(S^2). At present, I don't think the non-S^2 values of E(20)exch-ind,resp and E(20)exch-disp are ever included in total SAPT numbers, maybe they should?; - [ ] Finally, the option names such as `do_ind30_exch_sinf` are somewhat unfortunate because they propagate the misconception that you include effects all the way to S^infinity. In reality, the largest power of overlap integral S you ever need is min(NelA,NelB) - after that, you run out of electrons to exchange between A and B. **Nonapproximated**, **Nonexpanded**, and **beyond-S^2** are all formally more correct names than S^infinity. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http:",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2314
https://github.com/psi4/psi4/pull/2314:2125,Energy Efficiency,energy,energy,2125,"ed here, and for generating the third-order induction amplitudes that are reused here. However, unlike most of the stuff in `libsapt_solver`, the code is AO-based and the two-electron integrals enter only via generalized J/K matrices. Therefore, I had to export some additional AO quantities in `libsapt_solver/sapt.h` and I don't know if I did this in an optimal way.; - [x] Note to self: frozen core still needs to be checked. ## Design (Big-Picture) Questions - input from @CDSherrill @dgasmith @loriab and others will be highly beneficial!; - [ ] The three new(ish) beyond-S^2 corrections, E(20)exch-ind, E(20)exch-disp, and E(30)exch-ind cannot be currently calculated by a single SAPT call: the first two require `energy('sapt(dft)')` and the last one `energy('sapt2+3')`. That's quite unfortunate and we need a better workflow, possibly by making the non-S^2 E(20)exch-ind,resp and E(20)exch-disp available as part of `energy('sapt0')`.; - [ ] What should go into aggregate SAPT energy values, S^2 or non-S^2? I made the code pick the non-S^2 value of E(30)exch-ind,resp if available, but I'd be happy to revert it back to picking E(30)exch-ind,resp(S^2). At present, I don't think the non-S^2 values of E(20)exch-ind,resp and E(20)exch-disp are ever included in total SAPT numbers, maybe they should?; - [ ] Finally, the option names such as `do_ind30_exch_sinf` are somewhat unfortunate because they propagate the misconception that you include effects all the way to S^infinity. In reality, the largest power of overlap integral S you ever need is min(NelA,NelB) - after that, you run out of electrons to exchange between A and B. **Nonapproximated**, **Nonexpanded**, and **beyond-S^2** are all formally more correct names than S^infinity. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2314
https://github.com/psi4/psi4/pull/2314:2652,Energy Efficiency,power,power,2652,"ed here, and for generating the third-order induction amplitudes that are reused here. However, unlike most of the stuff in `libsapt_solver`, the code is AO-based and the two-electron integrals enter only via generalized J/K matrices. Therefore, I had to export some additional AO quantities in `libsapt_solver/sapt.h` and I don't know if I did this in an optimal way.; - [x] Note to self: frozen core still needs to be checked. ## Design (Big-Picture) Questions - input from @CDSherrill @dgasmith @loriab and others will be highly beneficial!; - [ ] The three new(ish) beyond-S^2 corrections, E(20)exch-ind, E(20)exch-disp, and E(30)exch-ind cannot be currently calculated by a single SAPT call: the first two require `energy('sapt(dft)')` and the last one `energy('sapt2+3')`. That's quite unfortunate and we need a better workflow, possibly by making the non-S^2 E(20)exch-ind,resp and E(20)exch-disp available as part of `energy('sapt0')`.; - [ ] What should go into aggregate SAPT energy values, S^2 or non-S^2? I made the code pick the non-S^2 value of E(30)exch-ind,resp if available, but I'd be happy to revert it back to picking E(30)exch-ind,resp(S^2). At present, I don't think the non-S^2 values of E(20)exch-ind,resp and E(20)exch-disp are ever included in total SAPT numbers, maybe they should?; - [ ] Finally, the option names such as `do_ind30_exch_sinf` are somewhat unfortunate because they propagate the misconception that you include effects all the way to S^infinity. In reality, the largest power of overlap integral S you ever need is min(NelA,NelB) - after that, you run out of electrons to exchange between A and B. **Nonapproximated**, **Nonexpanded**, and **beyond-S^2** are all formally more correct names than S^infinity. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2314
https://github.com/psi4/psi4/pull/2314:326,Testability,test,tests,326,"## Description; Adds an initial implementation of the E(30)exch-ind SAPT correction without the single exchange (S^2) approximation, introduced in https://doi.org/10.1063/5.0035050. Original Psi4NumPy implementation by Jonathan Waldrop (@jwaldrop107), ported to C++ by Konrad Patkowski. . The resulting numbers for a bunch of tests match the SI of the above paper and the calculation takes a tiny fraction of the total SAPT2+3 time. E(30)exch-ind,resp is approximated by scaling unrelaxed E(30)exch-ind in the same way as before and is also printed. ## Usage; The nonapproximated E(30)exch-ind and E(30)exch-ind,resp numbers will be calculated by `energy('sapt2+3')` if `do_ind30_exch_sinf` is set to `True`. . ## Technical Questions and Unresolved Issues; - [x] There's certainly room for code cleanup.; - [x] I think `libsapt_solver` is the most logical home for this code and `energy('sapt2+3')` its most logical invocation - after all, this correction forms a part of SAPT2+3 only, not the lower SAPT levels. The E(30)ind correction needs to be calculated beforehand, both for subtracting its value from the total (ind+ex-ind) calculated here, and for generating the third-order induction amplitudes that are reused here. However, unlike most of the stuff in `libsapt_solver`, the code is AO-based and the two-electron integrals enter only via generalized J/K matrices. Therefore, I had to export some additional AO quantities in `libsapt_solver/sapt.h` and I don't know if I did this in an optimal way.; - [x] Note to self: frozen core still needs to be checked. ## Design (Big-Picture) Questions - input from @CDSherrill @dgasmith @loriab and others will be highly beneficial!; - [ ] The three new(ish) beyond-S^2 corrections, E(20)exch-ind, E(20)exch-disp, and E(30)exch-ind cannot be currently calculated by a single SAPT call: the first two require `energy('sapt(dft)')` and the last one `energy('sapt2+3')`. That's quite unfortunate and we need a better workflow, possibly by making the non-",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2314
https://github.com/psi4/psi4/pull/2314:848,Testability,log,logical,848,"## Description; Adds an initial implementation of the E(30)exch-ind SAPT correction without the single exchange (S^2) approximation, introduced in https://doi.org/10.1063/5.0035050. Original Psi4NumPy implementation by Jonathan Waldrop (@jwaldrop107), ported to C++ by Konrad Patkowski. . The resulting numbers for a bunch of tests match the SI of the above paper and the calculation takes a tiny fraction of the total SAPT2+3 time. E(30)exch-ind,resp is approximated by scaling unrelaxed E(30)exch-ind in the same way as before and is also printed. ## Usage; The nonapproximated E(30)exch-ind and E(30)exch-ind,resp numbers will be calculated by `energy('sapt2+3')` if `do_ind30_exch_sinf` is set to `True`. . ## Technical Questions and Unresolved Issues; - [x] There's certainly room for code cleanup.; - [x] I think `libsapt_solver` is the most logical home for this code and `energy('sapt2+3')` its most logical invocation - after all, this correction forms a part of SAPT2+3 only, not the lower SAPT levels. The E(30)ind correction needs to be calculated beforehand, both for subtracting its value from the total (ind+ex-ind) calculated here, and for generating the third-order induction amplitudes that are reused here. However, unlike most of the stuff in `libsapt_solver`, the code is AO-based and the two-electron integrals enter only via generalized J/K matrices. Therefore, I had to export some additional AO quantities in `libsapt_solver/sapt.h` and I don't know if I did this in an optimal way.; - [x] Note to self: frozen core still needs to be checked. ## Design (Big-Picture) Questions - input from @CDSherrill @dgasmith @loriab and others will be highly beneficial!; - [ ] The three new(ish) beyond-S^2 corrections, E(20)exch-ind, E(20)exch-disp, and E(30)exch-ind cannot be currently calculated by a single SAPT call: the first two require `energy('sapt(dft)')` and the last one `energy('sapt2+3')`. That's quite unfortunate and we need a better workflow, possibly by making the non-",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2314
https://github.com/psi4/psi4/pull/2314:908,Testability,log,logical,908,"## Description; Adds an initial implementation of the E(30)exch-ind SAPT correction without the single exchange (S^2) approximation, introduced in https://doi.org/10.1063/5.0035050. Original Psi4NumPy implementation by Jonathan Waldrop (@jwaldrop107), ported to C++ by Konrad Patkowski. . The resulting numbers for a bunch of tests match the SI of the above paper and the calculation takes a tiny fraction of the total SAPT2+3 time. E(30)exch-ind,resp is approximated by scaling unrelaxed E(30)exch-ind in the same way as before and is also printed. ## Usage; The nonapproximated E(30)exch-ind and E(30)exch-ind,resp numbers will be calculated by `energy('sapt2+3')` if `do_ind30_exch_sinf` is set to `True`. . ## Technical Questions and Unresolved Issues; - [x] There's certainly room for code cleanup.; - [x] I think `libsapt_solver` is the most logical home for this code and `energy('sapt2+3')` its most logical invocation - after all, this correction forms a part of SAPT2+3 only, not the lower SAPT levels. The E(30)ind correction needs to be calculated beforehand, both for subtracting its value from the total (ind+ex-ind) calculated here, and for generating the third-order induction amplitudes that are reused here. However, unlike most of the stuff in `libsapt_solver`, the code is AO-based and the two-electron integrals enter only via generalized J/K matrices. Therefore, I had to export some additional AO quantities in `libsapt_solver/sapt.h` and I don't know if I did this in an optimal way.; - [x] Note to self: frozen core still needs to be checked. ## Design (Big-Picture) Questions - input from @CDSherrill @dgasmith @loriab and others will be highly beneficial!; - [ ] The three new(ish) beyond-S^2 corrections, E(20)exch-ind, E(20)exch-disp, and E(30)exch-ind cannot be currently calculated by a single SAPT call: the first two require `energy('sapt(dft)')` and the last one `energy('sapt2+3')`. That's quite unfortunate and we need a better workflow, possibly by making the non-",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2314
https://github.com/psi4/psi4/pull/2314:2910,Testability,Test,Tests,2910,"ed here, and for generating the third-order induction amplitudes that are reused here. However, unlike most of the stuff in `libsapt_solver`, the code is AO-based and the two-electron integrals enter only via generalized J/K matrices. Therefore, I had to export some additional AO quantities in `libsapt_solver/sapt.h` and I don't know if I did this in an optimal way.; - [x] Note to self: frozen core still needs to be checked. ## Design (Big-Picture) Questions - input from @CDSherrill @dgasmith @loriab and others will be highly beneficial!; - [ ] The three new(ish) beyond-S^2 corrections, E(20)exch-ind, E(20)exch-disp, and E(30)exch-ind cannot be currently calculated by a single SAPT call: the first two require `energy('sapt(dft)')` and the last one `energy('sapt2+3')`. That's quite unfortunate and we need a better workflow, possibly by making the non-S^2 E(20)exch-ind,resp and E(20)exch-disp available as part of `energy('sapt0')`.; - [ ] What should go into aggregate SAPT energy values, S^2 or non-S^2? I made the code pick the non-S^2 value of E(30)exch-ind,resp if available, but I'd be happy to revert it back to picking E(30)exch-ind,resp(S^2). At present, I don't think the non-S^2 values of E(20)exch-ind,resp and E(20)exch-disp are ever included in total SAPT numbers, maybe they should?; - [ ] Finally, the option names such as `do_ind30_exch_sinf` are somewhat unfortunate because they propagate the misconception that you include effects all the way to S^infinity. In reality, the largest power of overlap integral S you ever need is min(NelA,NelB) - after that, you run out of electrons to exchange between A and B. **Nonapproximated**, **Nonexpanded**, and **beyond-S^2** are all formally more correct names than S^infinity. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2314
https://github.com/psi4/psi4/pull/2314:2984,Testability,test,tests,2984,"ed here, and for generating the third-order induction amplitudes that are reused here. However, unlike most of the stuff in `libsapt_solver`, the code is AO-based and the two-electron integrals enter only via generalized J/K matrices. Therefore, I had to export some additional AO quantities in `libsapt_solver/sapt.h` and I don't know if I did this in an optimal way.; - [x] Note to self: frozen core still needs to be checked. ## Design (Big-Picture) Questions - input from @CDSherrill @dgasmith @loriab and others will be highly beneficial!; - [ ] The three new(ish) beyond-S^2 corrections, E(20)exch-ind, E(20)exch-disp, and E(30)exch-ind cannot be currently calculated by a single SAPT call: the first two require `energy('sapt(dft)')` and the last one `energy('sapt2+3')`. That's quite unfortunate and we need a better workflow, possibly by making the non-S^2 E(20)exch-ind,resp and E(20)exch-disp available as part of `energy('sapt0')`.; - [ ] What should go into aggregate SAPT energy values, S^2 or non-S^2? I made the code pick the non-S^2 value of E(30)exch-ind,resp if available, but I'd be happy to revert it back to picking E(30)exch-ind,resp(S^2). At present, I don't think the non-S^2 values of E(20)exch-ind,resp and E(20)exch-disp are ever included in total SAPT numbers, maybe they should?; - [ ] Finally, the option names such as `do_ind30_exch_sinf` are somewhat unfortunate because they propagate the misconception that you include effects all the way to S^infinity. In reality, the largest power of overlap integral S you ever need is min(NelA,NelB) - after that, you run out of electrons to exchange between A and B. **Nonapproximated**, **Nonexpanded**, and **beyond-S^2** are all formally more correct names than S^infinity. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2314
https://github.com/psi4/psi4/pull/2314:3075,Testability,test,tests,3075,"ed here, and for generating the third-order induction amplitudes that are reused here. However, unlike most of the stuff in `libsapt_solver`, the code is AO-based and the two-electron integrals enter only via generalized J/K matrices. Therefore, I had to export some additional AO quantities in `libsapt_solver/sapt.h` and I don't know if I did this in an optimal way.; - [x] Note to self: frozen core still needs to be checked. ## Design (Big-Picture) Questions - input from @CDSherrill @dgasmith @loriab and others will be highly beneficial!; - [ ] The three new(ish) beyond-S^2 corrections, E(20)exch-ind, E(20)exch-disp, and E(30)exch-ind cannot be currently calculated by a single SAPT call: the first two require `energy('sapt(dft)')` and the last one `energy('sapt2+3')`. That's quite unfortunate and we need a better workflow, possibly by making the non-S^2 E(20)exch-ind,resp and E(20)exch-disp available as part of `energy('sapt0')`.; - [ ] What should go into aggregate SAPT energy values, S^2 or non-S^2? I made the code pick the non-S^2 value of E(30)exch-ind,resp if available, but I'd be happy to revert it back to picking E(30)exch-ind,resp(S^2). At present, I don't think the non-S^2 values of E(20)exch-ind,resp and E(20)exch-disp are ever included in total SAPT numbers, maybe they should?; - [ ] Finally, the option names such as `do_ind30_exch_sinf` are somewhat unfortunate because they propagate the misconception that you include effects all the way to S^infinity. In reality, the largest power of overlap integral S you ever need is min(NelA,NelB) - after that, you run out of electrons to exchange between A and B. **Nonapproximated**, **Nonexpanded**, and **beyond-S^2** are all formally more correct names than S^infinity. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2314
https://github.com/psi4/psi4/issues/2317:124,Energy Efficiency,energy,energy,124,"I noticed that the code for the nonapproximated E(20)exch-disp saves its final result in `variable('sapt exch-disp20(s^inf) energy')` as it should, but never actually prints the result to the output file. For example, when I run the test in `tests/sapt-exch-disp-inf`, the comparison of values with the reference passes, but I never learn from the output what the actual result is. The simple fix is to change the do_print option to True [when the nonapproximated E(20)exch-disp code is called.](https://github.com/psi4/psi4/blob/3d2403c43e2cf8df699ff6e382a4ae2e3a0a5faa/psi4/driver/procrouting/sapt/sapt_mp2_terms.py#L282). I can make this fix myself - look out for a simple PR.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2317
https://github.com/psi4/psi4/issues/2317:90,Modifiability,variab,variable,90,"I noticed that the code for the nonapproximated E(20)exch-disp saves its final result in `variable('sapt exch-disp20(s^inf) energy')` as it should, but never actually prints the result to the output file. For example, when I run the test in `tests/sapt-exch-disp-inf`, the comparison of values with the reference passes, but I never learn from the output what the actual result is. The simple fix is to change the do_print option to True [when the nonapproximated E(20)exch-disp code is called.](https://github.com/psi4/psi4/blob/3d2403c43e2cf8df699ff6e382a4ae2e3a0a5faa/psi4/driver/procrouting/sapt/sapt_mp2_terms.py#L282). I can make this fix myself - look out for a simple PR.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2317
https://github.com/psi4/psi4/issues/2317:233,Testability,test,test,233,"I noticed that the code for the nonapproximated E(20)exch-disp saves its final result in `variable('sapt exch-disp20(s^inf) energy')` as it should, but never actually prints the result to the output file. For example, when I run the test in `tests/sapt-exch-disp-inf`, the comparison of values with the reference passes, but I never learn from the output what the actual result is. The simple fix is to change the do_print option to True [when the nonapproximated E(20)exch-disp code is called.](https://github.com/psi4/psi4/blob/3d2403c43e2cf8df699ff6e382a4ae2e3a0a5faa/psi4/driver/procrouting/sapt/sapt_mp2_terms.py#L282). I can make this fix myself - look out for a simple PR.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2317
https://github.com/psi4/psi4/issues/2317:242,Testability,test,tests,242,"I noticed that the code for the nonapproximated E(20)exch-disp saves its final result in `variable('sapt exch-disp20(s^inf) energy')` as it should, but never actually prints the result to the output file. For example, when I run the test in `tests/sapt-exch-disp-inf`, the comparison of values with the reference passes, but I never learn from the output what the actual result is. The simple fix is to change the do_print option to True [when the nonapproximated E(20)exch-disp code is called.](https://github.com/psi4/psi4/blob/3d2403c43e2cf8df699ff6e382a4ae2e3a0a5faa/psi4/driver/procrouting/sapt/sapt_mp2_terms.py#L282). I can make this fix myself - look out for a simple PR.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2317
https://github.com/psi4/psi4/issues/2317:333,Usability,learn,learn,333,"I noticed that the code for the nonapproximated E(20)exch-disp saves its final result in `variable('sapt exch-disp20(s^inf) energy')` as it should, but never actually prints the result to the output file. For example, when I run the test in `tests/sapt-exch-disp-inf`, the comparison of values with the reference passes, but I never learn from the output what the actual result is. The simple fix is to change the do_print option to True [when the nonapproximated E(20)exch-disp code is called.](https://github.com/psi4/psi4/blob/3d2403c43e2cf8df699ff6e382a4ae2e3a0a5faa/psi4/driver/procrouting/sapt/sapt_mp2_terms.py#L282). I can make this fix myself - look out for a simple PR.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2317
https://github.com/psi4/psi4/issues/2317:386,Usability,simpl,simple,386,"I noticed that the code for the nonapproximated E(20)exch-disp saves its final result in `variable('sapt exch-disp20(s^inf) energy')` as it should, but never actually prints the result to the output file. For example, when I run the test in `tests/sapt-exch-disp-inf`, the comparison of values with the reference passes, but I never learn from the output what the actual result is. The simple fix is to change the do_print option to True [when the nonapproximated E(20)exch-disp code is called.](https://github.com/psi4/psi4/blob/3d2403c43e2cf8df699ff6e382a4ae2e3a0a5faa/psi4/driver/procrouting/sapt/sapt_mp2_terms.py#L282). I can make this fix myself - look out for a simple PR.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2317
https://github.com/psi4/psi4/issues/2317:669,Usability,simpl,simple,669,"I noticed that the code for the nonapproximated E(20)exch-disp saves its final result in `variable('sapt exch-disp20(s^inf) energy')` as it should, but never actually prints the result to the output file. For example, when I run the test in `tests/sapt-exch-disp-inf`, the comparison of values with the reference passes, but I never learn from the output what the actual result is. The simple fix is to change the do_print option to True [when the nonapproximated E(20)exch-disp code is called.](https://github.com/psi4/psi4/blob/3d2403c43e2cf8df699ff6e382a4ae2e3a0a5faa/psi4/driver/procrouting/sapt/sapt_mp2_terms.py#L282). I can make this fix myself - look out for a simple PR.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2317
https://github.com/psi4/psi4/pull/2318:185,Energy Efficiency,energy,energy,185,## Description; <!-- Provide a brief description of the PR's purpose here. -->; Simple print option change to ensure printing of the final result for the nonapproximated E(20)exch-disp energy. Fixes #2317. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2318
https://github.com/psi4/psi4/pull/2318:226,Testability,Test,Tests,226,## Description; <!-- Provide a brief description of the PR's purpose here. -->; Simple print option change to ensure printing of the final result for the nonapproximated E(20)exch-disp energy. Fixes #2317. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2318
https://github.com/psi4/psi4/pull/2318:300,Testability,test,tests,300,## Description; <!-- Provide a brief description of the PR's purpose here. -->; Simple print option change to ensure printing of the final result for the nonapproximated E(20)exch-disp energy. Fixes #2317. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2318
https://github.com/psi4/psi4/pull/2318:391,Testability,test,tests,391,## Description; <!-- Provide a brief description of the PR's purpose here. -->; Simple print option change to ensure printing of the final result for the nonapproximated E(20)exch-disp energy. Fixes #2317. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2318
https://github.com/psi4/psi4/pull/2318:80,Usability,Simpl,Simple,80,## Description; <!-- Provide a brief description of the PR's purpose here. -->; Simple print option change to ensure printing of the final result for the nonapproximated E(20)exch-disp energy. Fixes #2317. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2318
https://github.com/psi4/psi4/pull/2319:121,Modifiability,variab,variables,121,"## Description; This is another minor cleanup PR that I saw was possible while working on a larger project. Three `temp` variables were previously saved to the wavefunction but only needed to be called by one or two functions. Those are better suited to be function variables than class variables, and this PR makes them so. ## Questions; - [x] Fewer class variables means less memory, but re-allocating these matrices every iteration could cause a timing hit. Is this a problem? ~~I expect the time cost to be negligible in comparison with the cost of the BLAS operations, but if anybody believes otherwise, better to say so now.~~ **Negligible in comparison to diagonalization time.**. ## Checklist; - [x] `ctest -L ^scf` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2319
https://github.com/psi4/psi4/pull/2319:266,Modifiability,variab,variables,266,"## Description; This is another minor cleanup PR that I saw was possible while working on a larger project. Three `temp` variables were previously saved to the wavefunction but only needed to be called by one or two functions. Those are better suited to be function variables than class variables, and this PR makes them so. ## Questions; - [x] Fewer class variables means less memory, but re-allocating these matrices every iteration could cause a timing hit. Is this a problem? ~~I expect the time cost to be negligible in comparison with the cost of the BLAS operations, but if anybody believes otherwise, better to say so now.~~ **Negligible in comparison to diagonalization time.**. ## Checklist; - [x] `ctest -L ^scf` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2319
https://github.com/psi4/psi4/pull/2319:287,Modifiability,variab,variables,287,"## Description; This is another minor cleanup PR that I saw was possible while working on a larger project. Three `temp` variables were previously saved to the wavefunction but only needed to be called by one or two functions. Those are better suited to be function variables than class variables, and this PR makes them so. ## Questions; - [x] Fewer class variables means less memory, but re-allocating these matrices every iteration could cause a timing hit. Is this a problem? ~~I expect the time cost to be negligible in comparison with the cost of the BLAS operations, but if anybody believes otherwise, better to say so now.~~ **Negligible in comparison to diagonalization time.**. ## Checklist; - [x] `ctest -L ^scf` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2319
https://github.com/psi4/psi4/pull/2319:357,Modifiability,variab,variables,357,"## Description; This is another minor cleanup PR that I saw was possible while working on a larger project. Three `temp` variables were previously saved to the wavefunction but only needed to be called by one or two functions. Those are better suited to be function variables than class variables, and this PR makes them so. ## Questions; - [x] Fewer class variables means less memory, but re-allocating these matrices every iteration could cause a timing hit. Is this a problem? ~~I expect the time cost to be negligible in comparison with the cost of the BLAS operations, but if anybody believes otherwise, better to say so now.~~ **Negligible in comparison to diagonalization time.**. ## Checklist; - [x] `ctest -L ^scf` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2319
https://github.com/psi4/psi4/pull/2320:324,Deployability,update,updated,324,"## Description; Will close #2235 by implementing ADIIS and EDIIS. I'm submitting this in a draft state to get second opinions on what I have so far. _Unfortunately_, due to issues with the Francesco group cluster, I can't do deep Vtune profiling, so it may be some time before I can proceed to the next step. I'll keep devs updated. RHF and UHF EDIIS/ADIIS are working great, but not so much for ROHF. Disappointing, but not surprising. The EDIIS and ADIIS functionals don't account for the effective Fock matrix of ROHF theory. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] RHF/UHF implementation; - [x] Code cleanup; - [x] Documentation; - [x] Write tests. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2320
https://github.com/psi4/psi4/pull/2320:713,Testability,test,tests,713,"## Description; Will close #2235 by implementing ADIIS and EDIIS. I'm submitting this in a draft state to get second opinions on what I have so far. _Unfortunately_, due to issues with the Francesco group cluster, I can't do deep Vtune profiling, so it may be some time before I can proceed to the next step. I'll keep devs updated. RHF and UHF EDIIS/ADIIS are working great, but not so much for ROHF. Disappointing, but not surprising. The EDIIS and ADIIS functionals don't account for the effective Fock matrix of ROHF theory. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] RHF/UHF implementation; - [x] Code cleanup; - [x] Documentation; - [x] Write tests. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2320
https://github.com/psi4/psi4/pull/2320:740,Testability,Test,Tests,740,"## Description; Will close #2235 by implementing ADIIS and EDIIS. I'm submitting this in a draft state to get second opinions on what I have so far. _Unfortunately_, due to issues with the Francesco group cluster, I can't do deep Vtune profiling, so it may be some time before I can proceed to the next step. I'll keep devs updated. RHF and UHF EDIIS/ADIIS are working great, but not so much for ROHF. Disappointing, but not surprising. The EDIIS and ADIIS functionals don't account for the effective Fock matrix of ROHF theory. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] RHF/UHF implementation; - [x] Code cleanup; - [x] Documentation; - [x] Write tests. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2320
https://github.com/psi4/psi4/pull/2320:814,Testability,test,tests,814,"## Description; Will close #2235 by implementing ADIIS and EDIIS. I'm submitting this in a draft state to get second opinions on what I have so far. _Unfortunately_, due to issues with the Francesco group cluster, I can't do deep Vtune profiling, so it may be some time before I can proceed to the next step. I'll keep devs updated. RHF and UHF EDIIS/ADIIS are working great, but not so much for ROHF. Disappointing, but not surprising. The EDIIS and ADIIS functionals don't account for the effective Fock matrix of ROHF theory. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] RHF/UHF implementation; - [x] Code cleanup; - [x] Documentation; - [x] Write tests. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2320
https://github.com/psi4/psi4/pull/2320:905,Testability,test,tests,905,"## Description; Will close #2235 by implementing ADIIS and EDIIS. I'm submitting this in a draft state to get second opinions on what I have so far. _Unfortunately_, due to issues with the Francesco group cluster, I can't do deep Vtune profiling, so it may be some time before I can proceed to the next step. I'll keep devs updated. RHF and UHF EDIIS/ADIIS are working great, but not so much for ROHF. Disappointing, but not surprising. The EDIIS and ADIIS functionals don't account for the effective Fock matrix of ROHF theory. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] RHF/UHF implementation; - [x] Code cleanup; - [x] Documentation; - [x] Write tests. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2320
https://github.com/psi4/psi4/pull/2322:44,Integrability,depend,dependent,44,"## Description; If we're going to check SCF-dependent quantities to 1e-9, let's converge our SCF that tightly. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2322
https://github.com/psi4/psi4/pull/2323:31,Energy Efficiency,energy,energy,31,"## Description; `json-schema-1-energy` no longer cares how many iterations SCF took, as long as the number is sane. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2323
https://github.com/psi4/psi4/pull/2325:381,Testability,test,tests,381,"## Description; This PR gets rid of all `new` and `delete` calls within `libdiis`, replacing them with `std::unique_ptr` and `std::vector`. . Per [recommendations](https://herbsutter.com/2013/06/05/gotw-91-solution-smart-pointer-parameters/), I use a `std::unique_ptr` to signify the caller (of the `DIISEntry` constructor) loses ownership of the object. ## Checklist; - [x] Quick tests still pass. ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2325
https://github.com/psi4/psi4/pull/2328:29,Integrability,wrap,wrapper,29,"## Description; The QCSchema wrapper was lacking the capability to save the t-amplitudes and the one-electron density matrix, so this was added. ## Todos; This will add the ability to save the t-amplitudes using the new ""tamps"" driver. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2328
https://github.com/psi4/psi4/pull/2328:256,Testability,Test,Tests,256,"## Description; The QCSchema wrapper was lacking the capability to save the t-amplitudes and the one-electron density matrix, so this was added. ## Todos; This will add the ability to save the t-amplitudes using the new ""tamps"" driver. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2328
https://github.com/psi4/psi4/pull/2328:330,Testability,test,tests,330,"## Description; The QCSchema wrapper was lacking the capability to save the t-amplitudes and the one-electron density matrix, so this was added. ## Todos; This will add the ability to save the t-amplitudes using the new ""tamps"" driver. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2328
https://github.com/psi4/psi4/pull/2328:421,Testability,test,tests,421,"## Description; The QCSchema wrapper was lacking the capability to save the t-amplitudes and the one-electron density matrix, so this was added. ## Todos; This will add the ability to save the t-amplitudes using the new ""tamps"" driver. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2328
https://github.com/psi4/psi4/issues/2329:18,Deployability,install,installed,18,"Hello, i recently installed the psi4 package using the conda prompt (Im using miniconda) with this code:; `conda create -n p4env psi4 python=3.8 -c psi4 -c conda-forge`; I configurated the paths, adding the ones given by `psi4 --psiapi`, but when importing the package in Jupyter Notebook I still have issues. It seems like the `import psi4` works, but when pressing tab after `psi4.` there are no suggestions, but with `psi4._` I get only seven suggestions (`__doc__`, `__file__`,`__loader__`, ...). So, when trying `psi4.set_memory(int(5e8))`, I get `AttributeError: module 'psi4' has no attribute 'set_memory'`. Thanks for any suggestions (Im new to psi4 and just recently started using Python, and GitHub).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2329
https://github.com/psi4/psi4/issues/2329:172,Deployability,configurat,configurated,172,"Hello, i recently installed the psi4 package using the conda prompt (Im using miniconda) with this code:; `conda create -n p4env psi4 python=3.8 -c psi4 -c conda-forge`; I configurated the paths, adding the ones given by `psi4 --psiapi`, but when importing the package in Jupyter Notebook I still have issues. It seems like the `import psi4` works, but when pressing tab after `psi4.` there are no suggestions, but with `psi4._` I get only seven suggestions (`__doc__`, `__file__`,`__loader__`, ...). So, when trying `psi4.set_memory(int(5e8))`, I get `AttributeError: module 'psi4' has no attribute 'set_memory'`. Thanks for any suggestions (Im new to psi4 and just recently started using Python, and GitHub).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2329
https://github.com/psi4/psi4/issues/2329:172,Modifiability,config,configurated,172,"Hello, i recently installed the psi4 package using the conda prompt (Im using miniconda) with this code:; `conda create -n p4env psi4 python=3.8 -c psi4 -c conda-forge`; I configurated the paths, adding the ones given by `psi4 --psiapi`, but when importing the package in Jupyter Notebook I still have issues. It seems like the `import psi4` works, but when pressing tab after `psi4.` there are no suggestions, but with `psi4._` I get only seven suggestions (`__doc__`, `__file__`,`__loader__`, ...). So, when trying `psi4.set_memory(int(5e8))`, I get `AttributeError: module 'psi4' has no attribute 'set_memory'`. Thanks for any suggestions (Im new to psi4 and just recently started using Python, and GitHub).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2329
https://github.com/psi4/psi4/issues/2330:367,Energy Efficiency,charge,charge,367,"This is a follow-up to #1608 (fisapt + external potentials). There might be something wrong when the molecule is specified in bohr. I'm not sure, so I thought I'd query @alenaizan and @CDSherrill about how suspicious the below makes you, and how likely you would have been to catch this in the testing process. First things, the `ExternalPotential.charges_` (holding charge and position) stores positions in the units of the molecule. For consistency for functions on the class, it translates the internal data to bohr before computing. This printing label https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/extern.cc#L70 is wrong (for positions; ok for charges). These comments suggest this might not have been clear in the earlier PR https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/extern.cc#L414-L416 and might have ramifications here https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fisapt/fisapt.cc#L730-L735 . When I rewrite the fsapt-ext-abc test case so that the molecule and charges are again consistent in Bohr (below), the overall passes but the fragments don't. Also below is the fsapt.dat differences. Again, I can well believe that I'm doing something wrong or that the `fsapt.py` machinery has some built-in unit assumptions, but I'm glad of any input or we-checked-that information. The reason it's coming up now is that DDD ""fixes"" this peculiarity of `ExternalPotential` and _only_ stores the charge positions in Bohr. ```; memory 1 GB. # water prism: https://science.sciencemag.org/content/sci/suppl/2012/05/16/336.6083.897.DC1/Perez_SM.pdf; # Table S43. #mol = psi4.core.Molecule.from_arrays(; # elez=[1, 8, 1, 1, 8, 1, 1, 8, 1],; # fragment_separators=[3, 6],; # fix_com=True,; # fix_orientation=True,; # fix_symmetry='c1',; # geom=np.array([; # 0.0290, -1.1199, -1.5243,; # 0.9481, -1.3990, -1.3587,; # 1.4371, -0.5588, -1.3099,; # 1.0088, -1.5240, 0.5086,; # 1.0209, -1.1732, 1.4270,; # 1.5864, -0.3901, 1.3101,; # -1.0231, 1.6243, -0.8743,; #",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:667,Energy Efficiency,charge,charges,667,"This is a follow-up to #1608 (fisapt + external potentials). There might be something wrong when the molecule is specified in bohr. I'm not sure, so I thought I'd query @alenaizan and @CDSherrill about how suspicious the below makes you, and how likely you would have been to catch this in the testing process. First things, the `ExternalPotential.charges_` (holding charge and position) stores positions in the units of the molecule. For consistency for functions on the class, it translates the internal data to bohr before computing. This printing label https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/extern.cc#L70 is wrong (for positions; ok for charges). These comments suggest this might not have been clear in the earlier PR https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/extern.cc#L414-L416 and might have ramifications here https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fisapt/fisapt.cc#L730-L735 . When I rewrite the fsapt-ext-abc test case so that the molecule and charges are again consistent in Bohr (below), the overall passes but the fragments don't. Also below is the fsapt.dat differences. Again, I can well believe that I'm doing something wrong or that the `fsapt.py` machinery has some built-in unit assumptions, but I'm glad of any input or we-checked-that information. The reason it's coming up now is that DDD ""fixes"" this peculiarity of `ExternalPotential` and _only_ stores the charge positions in Bohr. ```; memory 1 GB. # water prism: https://science.sciencemag.org/content/sci/suppl/2012/05/16/336.6083.897.DC1/Perez_SM.pdf; # Table S43. #mol = psi4.core.Molecule.from_arrays(; # elez=[1, 8, 1, 1, 8, 1, 1, 8, 1],; # fragment_separators=[3, 6],; # fix_com=True,; # fix_orientation=True,; # fix_symmetry='c1',; # geom=np.array([; # 0.0290, -1.1199, -1.5243,; # 0.9481, -1.3990, -1.3587,; # 1.4371, -0.5588, -1.3099,; # 1.0088, -1.5240, 0.5086,; # 1.0209, -1.1732, 1.4270,; # 1.5864, -0.3901, 1.3101,; # -1.0231, 1.6243, -0.8743,; #",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:1019,Energy Efficiency,charge,charges,1019,"(fisapt + external potentials). There might be something wrong when the molecule is specified in bohr. I'm not sure, so I thought I'd query @alenaizan and @CDSherrill about how suspicious the below makes you, and how likely you would have been to catch this in the testing process. First things, the `ExternalPotential.charges_` (holding charge and position) stores positions in the units of the molecule. For consistency for functions on the class, it translates the internal data to bohr before computing. This printing label https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/extern.cc#L70 is wrong (for positions; ok for charges). These comments suggest this might not have been clear in the earlier PR https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/extern.cc#L414-L416 and might have ramifications here https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fisapt/fisapt.cc#L730-L735 . When I rewrite the fsapt-ext-abc test case so that the molecule and charges are again consistent in Bohr (below), the overall passes but the fragments don't. Also below is the fsapt.dat differences. Again, I can well believe that I'm doing something wrong or that the `fsapt.py` machinery has some built-in unit assumptions, but I'm glad of any input or we-checked-that information. The reason it's coming up now is that DDD ""fixes"" this peculiarity of `ExternalPotential` and _only_ stores the charge positions in Bohr. ```; memory 1 GB. # water prism: https://science.sciencemag.org/content/sci/suppl/2012/05/16/336.6083.897.DC1/Perez_SM.pdf; # Table S43. #mol = psi4.core.Molecule.from_arrays(; # elez=[1, 8, 1, 1, 8, 1, 1, 8, 1],; # fragment_separators=[3, 6],; # fix_com=True,; # fix_orientation=True,; # fix_symmetry='c1',; # geom=np.array([; # 0.0290, -1.1199, -1.5243,; # 0.9481, -1.3990, -1.3587,; # 1.4371, -0.5588, -1.3099,; # 1.0088, -1.5240, 0.5086,; # 1.0209, -1.1732, 1.4270,; # 1.5864, -0.3901, 1.3101,; # -1.0231, 1.6243, -0.8743,; # -0.5806, 2.0297, -0.1111,; ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:1446,Energy Efficiency,charge,charge,1446,"ns in the units of the molecule. For consistency for functions on the class, it translates the internal data to bohr before computing. This printing label https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/extern.cc#L70 is wrong (for positions; ok for charges). These comments suggest this might not have been clear in the earlier PR https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/extern.cc#L414-L416 and might have ramifications here https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fisapt/fisapt.cc#L730-L735 . When I rewrite the fsapt-ext-abc test case so that the molecule and charges are again consistent in Bohr (below), the overall passes but the fragments don't. Also below is the fsapt.dat differences. Again, I can well believe that I'm doing something wrong or that the `fsapt.py` machinery has some built-in unit assumptions, but I'm glad of any input or we-checked-that information. The reason it's coming up now is that DDD ""fixes"" this peculiarity of `ExternalPotential` and _only_ stores the charge positions in Bohr. ```; memory 1 GB. # water prism: https://science.sciencemag.org/content/sci/suppl/2012/05/16/336.6083.897.DC1/Perez_SM.pdf; # Table S43. #mol = psi4.core.Molecule.from_arrays(; # elez=[1, 8, 1, 1, 8, 1, 1, 8, 1],; # fragment_separators=[3, 6],; # fix_com=True,; # fix_orientation=True,; # fix_symmetry='c1',; # geom=np.array([; # 0.0290, -1.1199, -1.5243,; # 0.9481, -1.3990, -1.3587,; # 1.4371, -0.5588, -1.3099,; # 1.0088, -1.5240, 0.5086,; # 1.0209, -1.1732, 1.4270,; # 1.5864, -0.3901, 1.3101,; # -1.0231, 1.6243, -0.8743,; # -0.5806, 2.0297, -0.1111,; # -0.9480, 1.5096, 0.6281])/psi_bohr2angstroms,; # units=""Bohr""); #activate(mol). # above and below equivalent. molecule mol {; units au; H 0.054802057638 -2.116304287900 -2.880509533035; O 1.791649339547 -2.643726849516 -2.567570886660; H 2.715725414895 -1.055978958906 -2.475352251737; --; H 1.906355715362 -2.879942615198 0.961114707408; O 1.929221401480 -2.217026690387",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:4023,Energy Efficiency,energy,energy,4023,"stroms). Chrgfield_B = QMMM(); Chrgfield_B.extern.addCharge( 0.417, -2.5628 / psi_bohr2angstroms, -0.8269 / psi_bohr2angstroms, -1.6696 / psi_bohr2angstroms); Chrgfield_B.extern.addCharge(-0.834, -1.7899 / psi_bohr2angstroms, -0.4027 / psi_bohr2angstroms, -1.2768 / psi_bohr2angstroms); Chrgfield_B.extern.addCharge( 0.417, -1.8988 / psi_bohr2angstroms, -0.4993 / psi_bohr2angstroms, -0.3072 / psi_bohr2angstroms). Chrgfield_C = QMMM(); Chrgfield_C.extern.addCharge( 0.417, 1.1270 / psi_bohr2angstroms, 1.5527 / psi_bohr2angstroms, -0.1658 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge(-0.834, 1.9896 / psi_bohr2angstroms, 1.0738 / psi_bohr2angstroms, -0.1673 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge( 0.417, 2.6619 / psi_bohr2angstroms, 1.7546 / psi_bohr2angstroms, -0.2910 / psi_bohr2angstroms). external_potentials = {; 'A': Chrgfield_A,; 'B': Chrgfield_B,; 'C': Chrgfield_C,; }. set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; }. energy('fisapt0', external_potentials=external_potentials). keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 74.2330370461897, #TEST; 'Eelst' : -0.04919037863747235, #TEST; 'Eexch' : 0.018239207303845935, #TEST; 'Eind' : -0.007969545823122322, #TEST; 'Edisp' : -0.002794948165605119, #TEST; 'Etot' : -0.04171566532235386, #TEST; }. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST. import os; import sys; import subprocess. os.chdir('fsapt'); with open('fA.dat', 'w') as fA: fA.write(""w1 1 2 3""); with open('fB.dat', 'w') as fB: fB.write(""w3 4 5 6""); subprocess.run([sys.executable, os.path.join('..', 'fsapt.py')], check=True). fEnergies = {}; fkeys = [",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:4491,Energy Efficiency,ENERGY,ENERGY,4491,"psi_bohr2angstroms, -0.1658 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge(-0.834, 1.9896 / psi_bohr2angstroms, 1.0738 / psi_bohr2angstroms, -0.1673 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge( 0.417, 2.6619 / psi_bohr2angstroms, 1.7546 / psi_bohr2angstroms, -0.2910 / psi_bohr2angstroms). external_potentials = {; 'A': Chrgfield_A,; 'B': Chrgfield_B,; 'C': Chrgfield_C,; }. set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; }. energy('fisapt0', external_potentials=external_potentials). keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 74.2330370461897, #TEST; 'Eelst' : -0.04919037863747235, #TEST; 'Eexch' : 0.018239207303845935, #TEST; 'Eind' : -0.007969545823122322, #TEST; 'Edisp' : -0.002794948165605119, #TEST; 'Etot' : -0.04171566532235386, #TEST; }. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST. import os; import sys; import subprocess. os.chdir('fsapt'); with open('fA.dat', 'w') as fA: fA.write(""w1 1 2 3""); with open('fB.dat', 'w') as fB: fB.write(""w3 4 5 6""); subprocess.run([sys.executable, os.path.join('..', 'fsapt.py')], check=True). fEnergies = {}; fkeys = ['fEelst', 'fEexch', 'fEindAB', 'fEindBA', 'fEdisp', 'fEedisp', 'fEtot'] #TEST. with open('fsapt.dat', 'r') as fsapt: #TEST; Energies = [float(x) for x in fsapt.readlines()[-2].split()[2:]] #TEST. for pair in zip(fkeys,Energies): #TEST; fEnergies[pair[0]] = pair[1] #TEST. fEref = { #TEST; 'fEelst' : -30.867, #TEST; 'fEexch' : 11.445, #TEST; 'fEindAB': -3.138, #TEST; 'fEindBA': -1.863, #TEST; 'fEdisp' : -1.754, #TEST; 'fEedisp': 0.000, #TEST; 'fEtot' : -26.177} #TEST. for key in fkeys: #TEST; compare_values(fE",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:4538,Energy Efficiency,ENERGY,ENERGY,4538,"psi_bohr2angstroms, -0.1658 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge(-0.834, 1.9896 / psi_bohr2angstroms, 1.0738 / psi_bohr2angstroms, -0.1673 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge( 0.417, 2.6619 / psi_bohr2angstroms, 1.7546 / psi_bohr2angstroms, -0.2910 / psi_bohr2angstroms). external_potentials = {; 'A': Chrgfield_A,; 'B': Chrgfield_B,; 'C': Chrgfield_C,; }. set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; }. energy('fisapt0', external_potentials=external_potentials). keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 74.2330370461897, #TEST; 'Eelst' : -0.04919037863747235, #TEST; 'Eexch' : 0.018239207303845935, #TEST; 'Eind' : -0.007969545823122322, #TEST; 'Edisp' : -0.002794948165605119, #TEST; 'Etot' : -0.04171566532235386, #TEST; }. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST. import os; import sys; import subprocess. os.chdir('fsapt'); with open('fA.dat', 'w') as fA: fA.write(""w1 1 2 3""); with open('fB.dat', 'w') as fB: fB.write(""w3 4 5 6""); subprocess.run([sys.executable, os.path.join('..', 'fsapt.py')], check=True). fEnergies = {}; fkeys = ['fEelst', 'fEexch', 'fEindAB', 'fEindBA', 'fEdisp', 'fEedisp', 'fEtot'] #TEST. with open('fsapt.dat', 'r') as fsapt: #TEST; Energies = [float(x) for x in fsapt.readlines()[-2].split()[2:]] #TEST. for pair in zip(fkeys,Energies): #TEST; fEnergies[pair[0]] = pair[1] #TEST. fEref = { #TEST; 'fEelst' : -30.867, #TEST; 'fEexch' : 11.445, #TEST; 'fEindAB': -3.138, #TEST; 'fEindBA': -1.863, #TEST; 'fEdisp' : -1.754, #TEST; 'fEedisp': 0.000, #TEST; 'fEtot' : -26.177} #TEST. for key in fkeys: #TEST; compare_values(fE",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:4583,Energy Efficiency,ENERGY,ENERGY,4583,"psi_bohr2angstroms, -0.1658 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge(-0.834, 1.9896 / psi_bohr2angstroms, 1.0738 / psi_bohr2angstroms, -0.1673 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge( 0.417, 2.6619 / psi_bohr2angstroms, 1.7546 / psi_bohr2angstroms, -0.2910 / psi_bohr2angstroms). external_potentials = {; 'A': Chrgfield_A,; 'B': Chrgfield_B,; 'C': Chrgfield_C,; }. set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; }. energy('fisapt0', external_potentials=external_potentials). keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 74.2330370461897, #TEST; 'Eelst' : -0.04919037863747235, #TEST; 'Eexch' : 0.018239207303845935, #TEST; 'Eind' : -0.007969545823122322, #TEST; 'Edisp' : -0.002794948165605119, #TEST; 'Etot' : -0.04171566532235386, #TEST; }. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST. import os; import sys; import subprocess. os.chdir('fsapt'); with open('fA.dat', 'w') as fA: fA.write(""w1 1 2 3""); with open('fB.dat', 'w') as fB: fB.write(""w3 4 5 6""); subprocess.run([sys.executable, os.path.join('..', 'fsapt.py')], check=True). fEnergies = {}; fkeys = ['fEelst', 'fEexch', 'fEindAB', 'fEindBA', 'fEdisp', 'fEedisp', 'fEtot'] #TEST. with open('fsapt.dat', 'r') as fsapt: #TEST; Energies = [float(x) for x in fsapt.readlines()[-2].split()[2:]] #TEST. for pair in zip(fkeys,Energies): #TEST; fEnergies[pair[0]] = pair[1] #TEST. fEref = { #TEST; 'fEelst' : -30.867, #TEST; 'fEexch' : 11.445, #TEST; 'fEindAB': -3.138, #TEST; 'fEindBA': -1.863, #TEST; 'fEdisp' : -1.754, #TEST; 'fEedisp': 0.000, #TEST; 'fEtot' : -26.177} #TEST. for key in fkeys: #TEST; compare_values(fE",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:4630,Energy Efficiency,ENERGY,ENERGY,4630,"psi_bohr2angstroms, -0.1658 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge(-0.834, 1.9896 / psi_bohr2angstroms, 1.0738 / psi_bohr2angstroms, -0.1673 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge( 0.417, 2.6619 / psi_bohr2angstroms, 1.7546 / psi_bohr2angstroms, -0.2910 / psi_bohr2angstroms). external_potentials = {; 'A': Chrgfield_A,; 'B': Chrgfield_B,; 'C': Chrgfield_C,; }. set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; }. energy('fisapt0', external_potentials=external_potentials). keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 74.2330370461897, #TEST; 'Eelst' : -0.04919037863747235, #TEST; 'Eexch' : 0.018239207303845935, #TEST; 'Eind' : -0.007969545823122322, #TEST; 'Edisp' : -0.002794948165605119, #TEST; 'Etot' : -0.04171566532235386, #TEST; }. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST. import os; import sys; import subprocess. os.chdir('fsapt'); with open('fA.dat', 'w') as fA: fA.write(""w1 1 2 3""); with open('fB.dat', 'w') as fB: fB.write(""w3 4 5 6""); subprocess.run([sys.executable, os.path.join('..', 'fsapt.py')], check=True). fEnergies = {}; fkeys = ['fEelst', 'fEexch', 'fEindAB', 'fEindBA', 'fEdisp', 'fEedisp', 'fEtot'] #TEST. with open('fsapt.dat', 'r') as fsapt: #TEST; Energies = [float(x) for x in fsapt.readlines()[-2].split()[2:]] #TEST. for pair in zip(fkeys,Energies): #TEST; fEnergies[pair[0]] = pair[1] #TEST. fEref = { #TEST; 'fEelst' : -30.867, #TEST; 'fEexch' : 11.445, #TEST; 'fEindAB': -3.138, #TEST; 'fEindBA': -1.863, #TEST; 'fEdisp' : -1.754, #TEST; 'fEedisp': 0.000, #TEST; 'fEtot' : -26.177} #TEST. for key in fkeys: #TEST; compare_values(fE",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:4678,Energy Efficiency,ENERGY,ENERGY,4678,"psi_bohr2angstroms, -0.1658 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge(-0.834, 1.9896 / psi_bohr2angstroms, 1.0738 / psi_bohr2angstroms, -0.1673 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge( 0.417, 2.6619 / psi_bohr2angstroms, 1.7546 / psi_bohr2angstroms, -0.2910 / psi_bohr2angstroms). external_potentials = {; 'A': Chrgfield_A,; 'B': Chrgfield_B,; 'C': Chrgfield_C,; }. set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; }. energy('fisapt0', external_potentials=external_potentials). keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 74.2330370461897, #TEST; 'Eelst' : -0.04919037863747235, #TEST; 'Eexch' : 0.018239207303845935, #TEST; 'Eind' : -0.007969545823122322, #TEST; 'Edisp' : -0.002794948165605119, #TEST; 'Etot' : -0.04171566532235386, #TEST; }. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST. import os; import sys; import subprocess. os.chdir('fsapt'); with open('fA.dat', 'w') as fA: fA.write(""w1 1 2 3""); with open('fB.dat', 'w') as fB: fB.write(""w3 4 5 6""); subprocess.run([sys.executable, os.path.join('..', 'fsapt.py')], check=True). fEnergies = {}; fkeys = ['fEelst', 'fEexch', 'fEindAB', 'fEindBA', 'fEdisp', 'fEedisp', 'fEtot'] #TEST. with open('fsapt.dat', 'r') as fsapt: #TEST; Energies = [float(x) for x in fsapt.readlines()[-2].split()[2:]] #TEST. for pair in zip(fkeys,Energies): #TEST; fEnergies[pair[0]] = pair[1] #TEST. fEref = { #TEST; 'fEelst' : -30.867, #TEST; 'fEexch' : 11.445, #TEST; 'fEindAB': -3.138, #TEST; 'fEindBA': -1.863, #TEST; 'fEdisp' : -1.754, #TEST; 'fEedisp': 0.000, #TEST; 'fEtot' : -26.177} #TEST. for key in fkeys: #TEST; compare_values(fE",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:7408,Energy Efficiency,Charge,Charge,7408," recent call last):; File ""/psi/gits/hrw-l2/objdir39b/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 101, in <module>; File ""/psi/gits/hrw-l2/objdir39b/stage/lib/psi4/driver/qcdb/testing.py"", line 104, in _mergedapis_compare_values; return qcel.testing.compare_values(expected, computed, **kwargs); File ""/psi/gits/QCElemental/qcelemental/testing.py"", line 178, in compare_values; return return_handler(allclose, label, message, return_message, quiet); File ""/psi/gits/hrw-l2/objdir39b/stage/lib/psi4/driver/p4util/testing.py"", line 189, in _psi4_true_raise_handler; raise TestComparisonError(message). psi4.driver.p4util.exceptions.TestComparisonError: 	fEelst: computed value (-58.7150) does not match (-30.8670) to atol=0.01 by difference (-27.8480). ```. ```; (py39b) psilocaluser@bash:psinet:/psi/gits/hrw-l2/objdir39b: (sept21qcdb_rb1) diff -bwy -W 200 tests/fsapt-ext-abc/fsapt/fsapt.dat tests/fsapt-ext-abc-au/fsapt/fsapt.dat ; ==> F-ISAPT: Links by Charge <==									 ==> F-ISAPT: Links by Charge <==. => Full Analysis <=											 => Full Analysis <=. Frag1 Frag2 Elst Exch IndAB IndBA Disp EDisp Total 			Frag1 Frag2 Elst Exch IndAB IndBA Disp EDisp Total ; w1 w3 -8.745 11.445 -2.245 -0.663 -1.754 0.000 -1.961 			w1 w3 -8.745 11.445 -2.245 -0.663 -1.754 0.000 -1.961 ; w1 Extern-B -6.448 0.000 -0.893 0.000 0.000 0.000 -7.342 		 |	w1 Extern-B 59.651 0.000 -0.893 0.000 0.000 0.000 58.757 ; Extern-A w3 -9.800 0.000 0.000 -1.200 0.000 0.000 -11.000 		 |	Extern-A w3 -103.747 0.000 0.000 -1.200 0.000 0.000 -104.947 ; Extern-A Extern-B -5.874 0.000 0.000 0.000 0.000 0.000 -5.874 			Extern-A Extern-B -5.874 0.000 0.000 0.000 0.000 0.000 -5.874 ; w1 All -15.193 11.445 -3.138 -0.663 -1.754 0.000 -9.303 		 |	w1 All 50.906 11.445 -3.138 -0.663 -1.754 0.000 56.796 ; Extern-A All -15.674 0.000 0.000 -1.200 0.000 0.000 -16.874 		 |	Extern-A All -109.621 0.000 0.000 -1.200 0.000 0.000 -110.821 ; All w3 -18.545 11.445 -2.245 -1.863 -1.754 0.000 -12.961 		 |	Al",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:7450,Energy Efficiency,Charge,Charge,7450," recent call last):; File ""/psi/gits/hrw-l2/objdir39b/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 101, in <module>; File ""/psi/gits/hrw-l2/objdir39b/stage/lib/psi4/driver/qcdb/testing.py"", line 104, in _mergedapis_compare_values; return qcel.testing.compare_values(expected, computed, **kwargs); File ""/psi/gits/QCElemental/qcelemental/testing.py"", line 178, in compare_values; return return_handler(allclose, label, message, return_message, quiet); File ""/psi/gits/hrw-l2/objdir39b/stage/lib/psi4/driver/p4util/testing.py"", line 189, in _psi4_true_raise_handler; raise TestComparisonError(message). psi4.driver.p4util.exceptions.TestComparisonError: 	fEelst: computed value (-58.7150) does not match (-30.8670) to atol=0.01 by difference (-27.8480). ```. ```; (py39b) psilocaluser@bash:psinet:/psi/gits/hrw-l2/objdir39b: (sept21qcdb_rb1) diff -bwy -W 200 tests/fsapt-ext-abc/fsapt/fsapt.dat tests/fsapt-ext-abc-au/fsapt/fsapt.dat ; ==> F-ISAPT: Links by Charge <==									 ==> F-ISAPT: Links by Charge <==. => Full Analysis <=											 => Full Analysis <=. Frag1 Frag2 Elst Exch IndAB IndBA Disp EDisp Total 			Frag1 Frag2 Elst Exch IndAB IndBA Disp EDisp Total ; w1 w3 -8.745 11.445 -2.245 -0.663 -1.754 0.000 -1.961 			w1 w3 -8.745 11.445 -2.245 -0.663 -1.754 0.000 -1.961 ; w1 Extern-B -6.448 0.000 -0.893 0.000 0.000 0.000 -7.342 		 |	w1 Extern-B 59.651 0.000 -0.893 0.000 0.000 0.000 58.757 ; Extern-A w3 -9.800 0.000 0.000 -1.200 0.000 0.000 -11.000 		 |	Extern-A w3 -103.747 0.000 0.000 -1.200 0.000 0.000 -104.947 ; Extern-A Extern-B -5.874 0.000 0.000 0.000 0.000 0.000 -5.874 			Extern-A Extern-B -5.874 0.000 0.000 0.000 0.000 0.000 -5.874 ; w1 All -15.193 11.445 -3.138 -0.663 -1.754 0.000 -9.303 		 |	w1 All 50.906 11.445 -3.138 -0.663 -1.754 0.000 56.796 ; Extern-A All -15.674 0.000 0.000 -1.200 0.000 0.000 -16.874 		 |	Extern-A All -109.621 0.000 0.000 -1.200 0.000 0.000 -110.821 ; All w3 -18.545 11.445 -2.245 -1.863 -1.754 0.000 -12.961 		 |	Al",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:8731,Energy Efficiency,Reduce,Reduced,8731,000 -0.893 0.000 0.000 0.000 -7.342 		 |	w1 Extern-B 59.651 0.000 -0.893 0.000 0.000 0.000 58.757 ; Extern-A w3 -9.800 0.000 0.000 -1.200 0.000 0.000 -11.000 		 |	Extern-A w3 -103.747 0.000 0.000 -1.200 0.000 0.000 -104.947 ; Extern-A Extern-B -5.874 0.000 0.000 0.000 0.000 0.000 -5.874 			Extern-A Extern-B -5.874 0.000 0.000 0.000 0.000 0.000 -5.874 ; w1 All -15.193 11.445 -3.138 -0.663 -1.754 0.000 -9.303 		 |	w1 All 50.906 11.445 -3.138 -0.663 -1.754 0.000 56.796 ; Extern-A All -15.674 0.000 0.000 -1.200 0.000 0.000 -16.874 		 |	Extern-A All -109.621 0.000 0.000 -1.200 0.000 0.000 -110.821 ; All w3 -18.545 11.445 -2.245 -1.863 -1.754 0.000 -12.961 		 |	All w3 -112.492 11.445 -2.245 -1.863 -1.754 0.000 -106.908 ; All Extern-B -12.322 0.000 -0.893 0.000 0.000 0.000 -13.216 		 |	All Extern-B 53.777 0.000 -0.893 0.000 0.000 0.000 52.883 ; All All -30.867 11.445 -3.138 -1.863 -1.754 0.000 -26.177 		 |	All All -58.715 11.445 -3.138 -1.863 -1.754 0.000 -54.025 . => Reduced Analysis <=										 => Reduced Analysis <=. Frag1 Frag2 Elst Exch IndAB IndBA Disp EDisp Total 			Frag1 Frag2 Elst Exch IndAB IndBA Disp EDisp Total ; w1 w3 -8.745 11.445 -2.245 -0.663 -1.754 0.000 -1.961 			w1 w3 -8.745 11.445 -2.245 -0.663 -1.754 0.000 -1.961 ; w1 Extern-B -6.448 0.000 -0.893 0.000 0.000 0.000 -7.342 		 |	w1 Extern-B 59.651 0.000 -0.893 0.000 0.000 0.000 58.757 ; Extern-A w3 -9.800 0.000 0.000 -1.200 0.000 0.000 -11.000 		 |	Extern-A w3 -103.747 0.000 0.000 -1.200 0.000 0.000 -104.947 ; Extern-A Extern-B -5.874 0.000 0.000 0.000 0.000 0.000 -5.874 			Extern-A Extern-B -5.874 0.000 0.000 0.000 0.000 0.000 -5.874 ; w1 All -15.193 11.445 -3.138 -0.663 -1.754 0.000 -9.303 		 |	w1 All 50.906 11.445 -3.138 -0.663 -1.754 0.000 56.796 ; Extern-A All -15.674 0.000 0.000 -1.200 0.000 0.000 -16.874 		 |	Extern-A All -109.621 0.000 0.000 -1.200 0.000 0.000 -110.821 ; All w3 -18.545 11.445 -2.245 -1.863 -1.754 0.000 -12.961 		 |	All w3 -112.492 11.445 -2.245 -1.863 -1.754 0.000 -106.908 ; All E,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:8764,Energy Efficiency,Reduce,Reduced,8764,000 -0.893 0.000 0.000 0.000 -7.342 		 |	w1 Extern-B 59.651 0.000 -0.893 0.000 0.000 0.000 58.757 ; Extern-A w3 -9.800 0.000 0.000 -1.200 0.000 0.000 -11.000 		 |	Extern-A w3 -103.747 0.000 0.000 -1.200 0.000 0.000 -104.947 ; Extern-A Extern-B -5.874 0.000 0.000 0.000 0.000 0.000 -5.874 			Extern-A Extern-B -5.874 0.000 0.000 0.000 0.000 0.000 -5.874 ; w1 All -15.193 11.445 -3.138 -0.663 -1.754 0.000 -9.303 		 |	w1 All 50.906 11.445 -3.138 -0.663 -1.754 0.000 56.796 ; Extern-A All -15.674 0.000 0.000 -1.200 0.000 0.000 -16.874 		 |	Extern-A All -109.621 0.000 0.000 -1.200 0.000 0.000 -110.821 ; All w3 -18.545 11.445 -2.245 -1.863 -1.754 0.000 -12.961 		 |	All w3 -112.492 11.445 -2.245 -1.863 -1.754 0.000 -106.908 ; All Extern-B -12.322 0.000 -0.893 0.000 0.000 0.000 -13.216 		 |	All Extern-B 53.777 0.000 -0.893 0.000 0.000 0.000 52.883 ; All All -30.867 11.445 -3.138 -1.863 -1.754 0.000 -26.177 		 |	All All -58.715 11.445 -3.138 -1.863 -1.754 0.000 -54.025 . => Reduced Analysis <=										 => Reduced Analysis <=. Frag1 Frag2 Elst Exch IndAB IndBA Disp EDisp Total 			Frag1 Frag2 Elst Exch IndAB IndBA Disp EDisp Total ; w1 w3 -8.745 11.445 -2.245 -0.663 -1.754 0.000 -1.961 			w1 w3 -8.745 11.445 -2.245 -0.663 -1.754 0.000 -1.961 ; w1 Extern-B -6.448 0.000 -0.893 0.000 0.000 0.000 -7.342 		 |	w1 Extern-B 59.651 0.000 -0.893 0.000 0.000 0.000 58.757 ; Extern-A w3 -9.800 0.000 0.000 -1.200 0.000 0.000 -11.000 		 |	Extern-A w3 -103.747 0.000 0.000 -1.200 0.000 0.000 -104.947 ; Extern-A Extern-B -5.874 0.000 0.000 0.000 0.000 0.000 -5.874 			Extern-A Extern-B -5.874 0.000 0.000 0.000 0.000 0.000 -5.874 ; w1 All -15.193 11.445 -3.138 -0.663 -1.754 0.000 -9.303 		 |	w1 All 50.906 11.445 -3.138 -0.663 -1.754 0.000 56.796 ; Extern-A All -15.674 0.000 0.000 -1.200 0.000 0.000 -16.874 		 |	Extern-A All -109.621 0.000 0.000 -1.200 0.000 0.000 -110.821 ; All w3 -18.545 11.445 -2.245 -1.863 -1.754 0.000 -12.961 		 |	All w3 -112.492 11.445 -2.245 -1.863 -1.754 0.000 -106.908 ; All E,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:11337,Energy Efficiency,Reduce,Reduced,11337,000 -0.893 0.000 0.000 0.000 -7.342 		 |	w1 Extern-B 59.651 0.000 -0.893 0.000 0.000 0.000 58.757 ; Extern-A w3 -9.800 0.000 0.000 -1.200 0.000 0.000 -11.000 		 |	Extern-A w3 -103.747 0.000 0.000 -1.200 0.000 0.000 -104.947 ; Extern-A Extern-B -5.874 0.000 0.000 0.000 0.000 0.000 -5.874 			Extern-A Extern-B -5.874 0.000 0.000 0.000 0.000 0.000 -5.874 ; w1 All -15.193 11.445 -3.138 -0.663 -1.754 0.000 -9.303 		 |	w1 All 50.906 11.445 -3.138 -0.663 -1.754 0.000 56.796 ; Extern-A All -15.674 0.000 0.000 -1.200 0.000 0.000 -16.874 		 |	Extern-A All -109.621 0.000 0.000 -1.200 0.000 0.000 -110.821 ; All w3 -18.545 11.445 -2.245 -1.863 -1.754 0.000 -12.961 		 |	All w3 -112.492 11.445 -2.245 -1.863 -1.754 0.000 -106.908 ; All Extern-B -12.322 0.000 -0.893 0.000 0.000 0.000 -13.216 		 |	All Extern-B 53.777 0.000 -0.893 0.000 0.000 0.000 52.883 ; All All -30.867 11.445 -3.138 -1.863 -1.754 0.000 -26.177 		 |	All All -58.715 11.445 -3.138 -1.863 -1.754 0.000 -54.025 . => Reduced Analysis <=										 => Reduced Analysis <=. Frag1 Frag2 Elst Exch IndAB IndBA Disp EDisp Total 			Frag1 Frag2 Elst Exch IndAB IndBA Disp EDisp Total ; w1 w3 -8.745 11.445 -2.245 -0.663 -1.754 0.000 -1.961 			w1 w3 -8.745 11.445 -2.245 -0.663 -1.754 0.000 -1.961 ; w1 Extern-B -6.448 0.000 -0.893 0.000 0.000 0.000 -7.342 		 |	w1 Extern-B 59.651 0.000 -0.893 0.000 0.000 0.000 58.757 ; Extern-A w3 -9.800 0.000 0.000 -1.200 0.000 0.000 -11.000 		 |	Extern-A w3 -103.747 0.000 0.000 -1.200 0.000 0.000 -104.947 ; Extern-A Extern-B -5.874 0.000 0.000 0.000 0.000 0.000 -5.874 			Extern-A Extern-B -5.874 0.000 0.000 0.000 0.000 0.000 -5.874 ; w1 All -15.193 11.445 -3.138 -0.663 -1.754 0.000 -9.303 		 |	w1 All 50.906 11.445 -3.138 -0.663 -1.754 0.000 56.796 ; Extern-A All -15.674 0.000 0.000 -1.200 0.000 0.000 -16.874 		 |	Extern-A All -109.621 0.000 0.000 -1.200 0.000 0.000 -110.821 ; All w3 -18.545 11.445 -2.245 -1.863 -1.754 0.000 -12.961 		 |	All w3 -112.492 11.445 -2.245 -1.863 -1.754 0.000 -106.908 ; All E,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:11370,Energy Efficiency,Reduce,Reduced,11370,000 -0.893 0.000 0.000 0.000 -7.342 		 |	w1 Extern-B 59.651 0.000 -0.893 0.000 0.000 0.000 58.757 ; Extern-A w3 -9.800 0.000 0.000 -1.200 0.000 0.000 -11.000 		 |	Extern-A w3 -103.747 0.000 0.000 -1.200 0.000 0.000 -104.947 ; Extern-A Extern-B -5.874 0.000 0.000 0.000 0.000 0.000 -5.874 			Extern-A Extern-B -5.874 0.000 0.000 0.000 0.000 0.000 -5.874 ; w1 All -15.193 11.445 -3.138 -0.663 -1.754 0.000 -9.303 		 |	w1 All 50.906 11.445 -3.138 -0.663 -1.754 0.000 56.796 ; Extern-A All -15.674 0.000 0.000 -1.200 0.000 0.000 -16.874 		 |	Extern-A All -109.621 0.000 0.000 -1.200 0.000 0.000 -110.821 ; All w3 -18.545 11.445 -2.245 -1.863 -1.754 0.000 -12.961 		 |	All w3 -112.492 11.445 -2.245 -1.863 -1.754 0.000 -106.908 ; All Extern-B -12.322 0.000 -0.893 0.000 0.000 0.000 -13.216 		 |	All Extern-B 53.777 0.000 -0.893 0.000 0.000 0.000 52.883 ; All All -30.867 11.445 -3.138 -1.863 -1.754 0.000 -26.177 		 |	All All -58.715 11.445 -3.138 -1.863 -1.754 0.000 -54.025 . => Reduced Analysis <=										 => Reduced Analysis <=. Frag1 Frag2 Elst Exch IndAB IndBA Disp EDisp Total 			Frag1 Frag2 Elst Exch IndAB IndBA Disp EDisp Total ; w1 w3 -8.745 11.445 -2.245 -0.663 -1.754 0.000 -1.961 			w1 w3 -8.745 11.445 -2.245 -0.663 -1.754 0.000 -1.961 ; w1 Extern-B -6.448 0.000 -0.893 0.000 0.000 0.000 -7.342 		 |	w1 Extern-B 59.651 0.000 -0.893 0.000 0.000 0.000 58.757 ; Extern-A w3 -9.800 0.000 0.000 -1.200 0.000 0.000 -11.000 		 |	Extern-A w3 -103.747 0.000 0.000 -1.200 0.000 0.000 -104.947 ; Extern-A Extern-B -5.874 0.000 0.000 0.000 0.000 0.000 -5.874 			Extern-A Extern-B -5.874 0.000 0.000 0.000 0.000 0.000 -5.874 ; w1 All -15.193 11.445 -3.138 -0.663 -1.754 0.000 -9.303 		 |	w1 All 50.906 11.445 -3.138 -0.663 -1.754 0.000 56.796 ; Extern-A All -15.674 0.000 0.000 -1.200 0.000 0.000 -16.874 		 |	Extern-A All -109.621 0.000 0.000 -1.200 0.000 0.000 -110.821 ; All w3 -18.545 11.445 -2.245 -1.863 -1.754 0.000 -12.961 		 |	All w3 -112.492 11.445 -2.245 -1.863 -1.754 0.000 -106.908 ; All E,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:6870,Integrability,message,message,6870,"..........................................PASSED; Eexch.................................................................................PASSED; Eind..................................................................................PASSED; Edisp.................................................................................PASSED; Etot..................................................................................PASSED; fEelst................................................................................FAILED; Traceback (most recent call last):; File ""/psi/gits/hrw-l2/objdir39b/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 101, in <module>; File ""/psi/gits/hrw-l2/objdir39b/stage/lib/psi4/driver/qcdb/testing.py"", line 104, in _mergedapis_compare_values; return qcel.testing.compare_values(expected, computed, **kwargs); File ""/psi/gits/QCElemental/qcelemental/testing.py"", line 178, in compare_values; return return_handler(allclose, label, message, return_message, quiet); File ""/psi/gits/hrw-l2/objdir39b/stage/lib/psi4/driver/p4util/testing.py"", line 189, in _psi4_true_raise_handler; raise TestComparisonError(message). psi4.driver.p4util.exceptions.TestComparisonError: 	fEelst: computed value (-58.7150) does not match (-30.8670) to atol=0.01 by difference (-27.8480). ```. ```; (py39b) psilocaluser@bash:psinet:/psi/gits/hrw-l2/objdir39b: (sept21qcdb_rb1) diff -bwy -W 200 tests/fsapt-ext-abc/fsapt/fsapt.dat tests/fsapt-ext-abc-au/fsapt/fsapt.dat ; ==> F-ISAPT: Links by Charge <==									 ==> F-ISAPT: Links by Charge <==. => Full Analysis <=											 => Full Analysis <=. Frag1 Frag2 Elst Exch IndAB IndBA Disp EDisp Total 			Frag1 Frag2 Elst Exch IndAB IndBA Disp EDisp Total ; w1 w3 -8.745 11.445 -2.245 -0.663 -1.754 0.000 -1.961 			w1 w3 -8.745 11.445 -2.245 -0.663 -1.754 0.000 -1.961 ; w1 Extern-B -6.448 0.000 -0.893 0.000 0.000 0.000 -7.342 		 |	w1 Extern-B 59.651 0.000 -0.893 0.000 0.000 0.000 58.757 ; Extern-A w3 -9.800 0.000 0.000",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:7043,Integrability,message,message,7043,".........PASSED; Eind..................................................................................PASSED; Edisp.................................................................................PASSED; Etot..................................................................................PASSED; fEelst................................................................................FAILED; Traceback (most recent call last):; File ""/psi/gits/hrw-l2/objdir39b/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 101, in <module>; File ""/psi/gits/hrw-l2/objdir39b/stage/lib/psi4/driver/qcdb/testing.py"", line 104, in _mergedapis_compare_values; return qcel.testing.compare_values(expected, computed, **kwargs); File ""/psi/gits/QCElemental/qcelemental/testing.py"", line 178, in compare_values; return return_handler(allclose, label, message, return_message, quiet); File ""/psi/gits/hrw-l2/objdir39b/stage/lib/psi4/driver/p4util/testing.py"", line 189, in _psi4_true_raise_handler; raise TestComparisonError(message). psi4.driver.p4util.exceptions.TestComparisonError: 	fEelst: computed value (-58.7150) does not match (-30.8670) to atol=0.01 by difference (-27.8480). ```. ```; (py39b) psilocaluser@bash:psinet:/psi/gits/hrw-l2/objdir39b: (sept21qcdb_rb1) diff -bwy -W 200 tests/fsapt-ext-abc/fsapt/fsapt.dat tests/fsapt-ext-abc-au/fsapt/fsapt.dat ; ==> F-ISAPT: Links by Charge <==									 ==> F-ISAPT: Links by Charge <==. => Full Analysis <=											 => Full Analysis <=. Frag1 Frag2 Elst Exch IndAB IndBA Disp EDisp Total 			Frag1 Frag2 Elst Exch IndAB IndBA Disp EDisp Total ; w1 w3 -8.745 11.445 -2.245 -0.663 -1.754 0.000 -1.961 			w1 w3 -8.745 11.445 -2.245 -0.663 -1.754 0.000 -1.961 ; w1 Extern-B -6.448 0.000 -0.893 0.000 0.000 0.000 -7.342 		 |	w1 Extern-B 59.651 0.000 -0.893 0.000 0.000 0.000 58.757 ; Extern-A w3 -9.800 0.000 0.000 -1.200 0.000 0.000 -11.000 		 |	Extern-A w3 -103.747 0.000 0.000 -1.200 0.000 0.000 -104.947 ; Extern-A Extern-B -5.874 0.000 0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:958,Modifiability,rewrite,rewrite,958,"(fisapt + external potentials). There might be something wrong when the molecule is specified in bohr. I'm not sure, so I thought I'd query @alenaizan and @CDSherrill about how suspicious the below makes you, and how likely you would have been to catch this in the testing process. First things, the `ExternalPotential.charges_` (holding charge and position) stores positions in the units of the molecule. For consistency for functions on the class, it translates the internal data to bohr before computing. This printing label https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/extern.cc#L70 is wrong (for positions; ok for charges). These comments suggest this might not have been clear in the earlier PR https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/extern.cc#L414-L416 and might have ramifications here https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fisapt/fisapt.cc#L730-L735 . When I rewrite the fsapt-ext-abc test case so that the molecule and charges are again consistent in Bohr (below), the overall passes but the fragments don't. Also below is the fsapt.dat differences. Again, I can well believe that I'm doing something wrong or that the `fsapt.py` machinery has some built-in unit assumptions, but I'm glad of any input or we-checked-that information. The reason it's coming up now is that DDD ""fixes"" this peculiarity of `ExternalPotential` and _only_ stores the charge positions in Bohr. ```; memory 1 GB. # water prism: https://science.sciencemag.org/content/sci/suppl/2012/05/16/336.6083.897.DC1/Perez_SM.pdf; # Table S43. #mol = psi4.core.Molecule.from_arrays(; # elez=[1, 8, 1, 1, 8, 1, 1, 8, 1],; # fragment_separators=[3, 6],; # fix_com=True,; # fix_orientation=True,; # fix_symmetry='c1',; # geom=np.array([; # 0.0290, -1.1199, -1.5243,; # 0.9481, -1.3990, -1.3587,; # 1.4371, -0.5588, -1.3099,; # 1.0088, -1.5240, 0.5086,; # 1.0209, -1.1732, 1.4270,; # 1.5864, -0.3901, 1.3101,; # -1.0231, 1.6243, -0.8743,; # -0.5806, 2.0297, -0.1111,; ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:4471,Modifiability,variab,variable,4471,"psi_bohr2angstroms, -0.1658 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge(-0.834, 1.9896 / psi_bohr2angstroms, 1.0738 / psi_bohr2angstroms, -0.1673 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge( 0.417, 2.6619 / psi_bohr2angstroms, 1.7546 / psi_bohr2angstroms, -0.2910 / psi_bohr2angstroms). external_potentials = {; 'A': Chrgfield_A,; 'B': Chrgfield_B,; 'C': Chrgfield_C,; }. set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; }. energy('fisapt0', external_potentials=external_potentials). keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 74.2330370461897, #TEST; 'Eelst' : -0.04919037863747235, #TEST; 'Eexch' : 0.018239207303845935, #TEST; 'Eind' : -0.007969545823122322, #TEST; 'Edisp' : -0.002794948165605119, #TEST; 'Etot' : -0.04171566532235386, #TEST; }. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST. import os; import sys; import subprocess. os.chdir('fsapt'); with open('fA.dat', 'w') as fA: fA.write(""w1 1 2 3""); with open('fB.dat', 'w') as fB: fB.write(""w3 4 5 6""); subprocess.run([sys.executable, os.path.join('..', 'fsapt.py')], check=True). fEnergies = {}; fkeys = ['fEelst', 'fEexch', 'fEindAB', 'fEindBA', 'fEdisp', 'fEedisp', 'fEtot'] #TEST. with open('fsapt.dat', 'r') as fsapt: #TEST; Energies = [float(x) for x in fsapt.readlines()[-2].split()[2:]] #TEST. for pair in zip(fkeys,Energies): #TEST; fEnergies[pair[0]] = pair[1] #TEST. fEref = { #TEST; 'fEelst' : -30.867, #TEST; 'fEexch' : 11.445, #TEST; 'fEindAB': -3.138, #TEST; 'fEindBA': -1.863, #TEST; 'fEdisp' : -1.754, #TEST; 'fEedisp': 0.000, #TEST; 'fEtot' : -26.177} #TEST. for key in fkeys: #TEST; compare_values(fE",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:4518,Modifiability,variab,variable,4518,"psi_bohr2angstroms, -0.1658 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge(-0.834, 1.9896 / psi_bohr2angstroms, 1.0738 / psi_bohr2angstroms, -0.1673 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge( 0.417, 2.6619 / psi_bohr2angstroms, 1.7546 / psi_bohr2angstroms, -0.2910 / psi_bohr2angstroms). external_potentials = {; 'A': Chrgfield_A,; 'B': Chrgfield_B,; 'C': Chrgfield_C,; }. set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; }. energy('fisapt0', external_potentials=external_potentials). keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 74.2330370461897, #TEST; 'Eelst' : -0.04919037863747235, #TEST; 'Eexch' : 0.018239207303845935, #TEST; 'Eind' : -0.007969545823122322, #TEST; 'Edisp' : -0.002794948165605119, #TEST; 'Etot' : -0.04171566532235386, #TEST; }. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST. import os; import sys; import subprocess. os.chdir('fsapt'); with open('fA.dat', 'w') as fA: fA.write(""w1 1 2 3""); with open('fB.dat', 'w') as fB: fB.write(""w3 4 5 6""); subprocess.run([sys.executable, os.path.join('..', 'fsapt.py')], check=True). fEnergies = {}; fkeys = ['fEelst', 'fEexch', 'fEindAB', 'fEindBA', 'fEdisp', 'fEedisp', 'fEtot'] #TEST. with open('fsapt.dat', 'r') as fsapt: #TEST; Energies = [float(x) for x in fsapt.readlines()[-2].split()[2:]] #TEST. for pair in zip(fkeys,Energies): #TEST; fEnergies[pair[0]] = pair[1] #TEST. fEref = { #TEST; 'fEelst' : -30.867, #TEST; 'fEexch' : 11.445, #TEST; 'fEindAB': -3.138, #TEST; 'fEindBA': -1.863, #TEST; 'fEdisp' : -1.754, #TEST; 'fEedisp': 0.000, #TEST; 'fEtot' : -26.177} #TEST. for key in fkeys: #TEST; compare_values(fE",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:4564,Modifiability,variab,variable,4564,"psi_bohr2angstroms, -0.1658 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge(-0.834, 1.9896 / psi_bohr2angstroms, 1.0738 / psi_bohr2angstroms, -0.1673 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge( 0.417, 2.6619 / psi_bohr2angstroms, 1.7546 / psi_bohr2angstroms, -0.2910 / psi_bohr2angstroms). external_potentials = {; 'A': Chrgfield_A,; 'B': Chrgfield_B,; 'C': Chrgfield_C,; }. set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; }. energy('fisapt0', external_potentials=external_potentials). keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 74.2330370461897, #TEST; 'Eelst' : -0.04919037863747235, #TEST; 'Eexch' : 0.018239207303845935, #TEST; 'Eind' : -0.007969545823122322, #TEST; 'Edisp' : -0.002794948165605119, #TEST; 'Etot' : -0.04171566532235386, #TEST; }. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST. import os; import sys; import subprocess. os.chdir('fsapt'); with open('fA.dat', 'w') as fA: fA.write(""w1 1 2 3""); with open('fB.dat', 'w') as fB: fB.write(""w3 4 5 6""); subprocess.run([sys.executable, os.path.join('..', 'fsapt.py')], check=True). fEnergies = {}; fkeys = ['fEelst', 'fEexch', 'fEindAB', 'fEindBA', 'fEdisp', 'fEedisp', 'fEtot'] #TEST. with open('fsapt.dat', 'r') as fsapt: #TEST; Energies = [float(x) for x in fsapt.readlines()[-2].split()[2:]] #TEST. for pair in zip(fkeys,Energies): #TEST; fEnergies[pair[0]] = pair[1] #TEST. fEref = { #TEST; 'fEelst' : -30.867, #TEST; 'fEexch' : 11.445, #TEST; 'fEindAB': -3.138, #TEST; 'fEindBA': -1.863, #TEST; 'fEdisp' : -1.754, #TEST; 'fEedisp': 0.000, #TEST; 'fEtot' : -26.177} #TEST. for key in fkeys: #TEST; compare_values(fE",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:4610,Modifiability,variab,variable,4610,"psi_bohr2angstroms, -0.1658 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge(-0.834, 1.9896 / psi_bohr2angstroms, 1.0738 / psi_bohr2angstroms, -0.1673 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge( 0.417, 2.6619 / psi_bohr2angstroms, 1.7546 / psi_bohr2angstroms, -0.2910 / psi_bohr2angstroms). external_potentials = {; 'A': Chrgfield_A,; 'B': Chrgfield_B,; 'C': Chrgfield_C,; }. set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; }. energy('fisapt0', external_potentials=external_potentials). keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 74.2330370461897, #TEST; 'Eelst' : -0.04919037863747235, #TEST; 'Eexch' : 0.018239207303845935, #TEST; 'Eind' : -0.007969545823122322, #TEST; 'Edisp' : -0.002794948165605119, #TEST; 'Etot' : -0.04171566532235386, #TEST; }. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST. import os; import sys; import subprocess. os.chdir('fsapt'); with open('fA.dat', 'w') as fA: fA.write(""w1 1 2 3""); with open('fB.dat', 'w') as fB: fB.write(""w3 4 5 6""); subprocess.run([sys.executable, os.path.join('..', 'fsapt.py')], check=True). fEnergies = {}; fkeys = ['fEelst', 'fEexch', 'fEindAB', 'fEindBA', 'fEdisp', 'fEedisp', 'fEtot'] #TEST. with open('fsapt.dat', 'r') as fsapt: #TEST; Energies = [float(x) for x in fsapt.readlines()[-2].split()[2:]] #TEST. for pair in zip(fkeys,Energies): #TEST; fEnergies[pair[0]] = pair[1] #TEST. fEref = { #TEST; 'fEelst' : -30.867, #TEST; 'fEexch' : 11.445, #TEST; 'fEindAB': -3.138, #TEST; 'fEindBA': -1.863, #TEST; 'fEdisp' : -1.754, #TEST; 'fEedisp': 0.000, #TEST; 'fEtot' : -26.177} #TEST. for key in fkeys: #TEST; compare_values(fE",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:4656,Modifiability,variab,variable,4656,"psi_bohr2angstroms, -0.1658 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge(-0.834, 1.9896 / psi_bohr2angstroms, 1.0738 / psi_bohr2angstroms, -0.1673 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge( 0.417, 2.6619 / psi_bohr2angstroms, 1.7546 / psi_bohr2angstroms, -0.2910 / psi_bohr2angstroms). external_potentials = {; 'A': Chrgfield_A,; 'B': Chrgfield_B,; 'C': Chrgfield_C,; }. set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; }. energy('fisapt0', external_potentials=external_potentials). keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 74.2330370461897, #TEST; 'Eelst' : -0.04919037863747235, #TEST; 'Eexch' : 0.018239207303845935, #TEST; 'Eind' : -0.007969545823122322, #TEST; 'Edisp' : -0.002794948165605119, #TEST; 'Etot' : -0.04171566532235386, #TEST; }. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST. import os; import sys; import subprocess. os.chdir('fsapt'); with open('fA.dat', 'w') as fA: fA.write(""w1 1 2 3""); with open('fB.dat', 'w') as fB: fB.write(""w3 4 5 6""); subprocess.run([sys.executable, os.path.join('..', 'fsapt.py')], check=True). fEnergies = {}; fkeys = ['fEelst', 'fEexch', 'fEindAB', 'fEindBA', 'fEdisp', 'fEedisp', 'fEtot'] #TEST. with open('fsapt.dat', 'r') as fsapt: #TEST; Energies = [float(x) for x in fsapt.readlines()[-2].split()[2:]] #TEST. for pair in zip(fkeys,Energies): #TEST; fEnergies[pair[0]] = pair[1] #TEST. fEref = { #TEST; 'fEelst' : -30.867, #TEST; 'fEexch' : 11.445, #TEST; 'fEindAB': -3.138, #TEST; 'fEindBA': -1.863, #TEST; 'fEdisp' : -1.754, #TEST; 'fEedisp': 0.000, #TEST; 'fEtot' : -26.177} #TEST. for key in fkeys: #TEST; compare_values(fE",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:294,Testability,test,testing,294,"This is a follow-up to #1608 (fisapt + external potentials). There might be something wrong when the molecule is specified in bohr. I'm not sure, so I thought I'd query @alenaizan and @CDSherrill about how suspicious the below makes you, and how likely you would have been to catch this in the testing process. First things, the `ExternalPotential.charges_` (holding charge and position) stores positions in the units of the molecule. For consistency for functions on the class, it translates the internal data to bohr before computing. This printing label https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/extern.cc#L70 is wrong (for positions; ok for charges). These comments suggest this might not have been clear in the earlier PR https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/extern.cc#L414-L416 and might have ramifications here https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fisapt/fisapt.cc#L730-L735 . When I rewrite the fsapt-ext-abc test case so that the molecule and charges are again consistent in Bohr (below), the overall passes but the fragments don't. Also below is the fsapt.dat differences. Again, I can well believe that I'm doing something wrong or that the `fsapt.py` machinery has some built-in unit assumptions, but I'm glad of any input or we-checked-that information. The reason it's coming up now is that DDD ""fixes"" this peculiarity of `ExternalPotential` and _only_ stores the charge positions in Bohr. ```; memory 1 GB. # water prism: https://science.sciencemag.org/content/sci/suppl/2012/05/16/336.6083.897.DC1/Perez_SM.pdf; # Table S43. #mol = psi4.core.Molecule.from_arrays(; # elez=[1, 8, 1, 1, 8, 1, 1, 8, 1],; # fragment_separators=[3, 6],; # fix_com=True,; # fix_orientation=True,; # fix_symmetry='c1',; # geom=np.array([; # 0.0290, -1.1199, -1.5243,; # 0.9481, -1.3990, -1.3587,; # 1.4371, -0.5588, -1.3099,; # 1.0088, -1.5240, 0.5086,; # 1.0209, -1.1732, 1.4270,; # 1.5864, -0.3901, 1.3101,; # -1.0231, 1.6243, -0.8743,; #",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:984,Testability,test,test,984,"(fisapt + external potentials). There might be something wrong when the molecule is specified in bohr. I'm not sure, so I thought I'd query @alenaizan and @CDSherrill about how suspicious the below makes you, and how likely you would have been to catch this in the testing process. First things, the `ExternalPotential.charges_` (holding charge and position) stores positions in the units of the molecule. For consistency for functions on the class, it translates the internal data to bohr before computing. This printing label https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/extern.cc#L70 is wrong (for positions; ok for charges). These comments suggest this might not have been clear in the earlier PR https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/extern.cc#L414-L416 and might have ramifications here https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fisapt/fisapt.cc#L730-L735 . When I rewrite the fsapt-ext-abc test case so that the molecule and charges are again consistent in Bohr (below), the overall passes but the fragments don't. Also below is the fsapt.dat differences. Again, I can well believe that I'm doing something wrong or that the `fsapt.py` machinery has some built-in unit assumptions, but I'm glad of any input or we-checked-that information. The reason it's coming up now is that DDD ""fixes"" this peculiarity of `ExternalPotential` and _only_ stores the charge positions in Bohr. ```; memory 1 GB. # water prism: https://science.sciencemag.org/content/sci/suppl/2012/05/16/336.6083.897.DC1/Perez_SM.pdf; # Table S43. #mol = psi4.core.Molecule.from_arrays(; # elez=[1, 8, 1, 1, 8, 1, 1, 8, 1],; # fragment_separators=[3, 6],; # fix_com=True,; # fix_orientation=True,; # fix_symmetry='c1',; # geom=np.array([; # 0.0290, -1.1199, -1.5243,; # 0.9481, -1.3990, -1.3587,; # 1.4371, -0.5588, -1.3099,; # 1.0088, -1.5240, 0.5086,; # 1.0209, -1.1732, 1.4270,; # 1.5864, -0.3901, 1.3101,; # -1.0231, 1.6243, -0.8743,; # -0.5806, 2.0297, -0.1111,; ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:4143,Testability,TEST,TEST,4143,"417, -2.5628 / psi_bohr2angstroms, -0.8269 / psi_bohr2angstroms, -1.6696 / psi_bohr2angstroms); Chrgfield_B.extern.addCharge(-0.834, -1.7899 / psi_bohr2angstroms, -0.4027 / psi_bohr2angstroms, -1.2768 / psi_bohr2angstroms); Chrgfield_B.extern.addCharge( 0.417, -1.8988 / psi_bohr2angstroms, -0.4993 / psi_bohr2angstroms, -0.3072 / psi_bohr2angstroms). Chrgfield_C = QMMM(); Chrgfield_C.extern.addCharge( 0.417, 1.1270 / psi_bohr2angstroms, 1.5527 / psi_bohr2angstroms, -0.1658 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge(-0.834, 1.9896 / psi_bohr2angstroms, 1.0738 / psi_bohr2angstroms, -0.1673 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge( 0.417, 2.6619 / psi_bohr2angstroms, 1.7546 / psi_bohr2angstroms, -0.2910 / psi_bohr2angstroms). external_potentials = {; 'A': Chrgfield_A,; 'B': Chrgfield_B,; 'C': Chrgfield_C,; }. set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; }. energy('fisapt0', external_potentials=external_potentials). keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 74.2330370461897, #TEST; 'Eelst' : -0.04919037863747235, #TEST; 'Eexch' : 0.018239207303845935, #TEST; 'Eind' : -0.007969545823122322, #TEST; 'Edisp' : -0.002794948165605119, #TEST; 'Etot' : -0.04171566532235386, #TEST; }. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST. import os; import sys; import subprocess. os.chdir('fsapt'); with open('fA.dat', 'w') as fA: fA.write(""w1 1 2 3""); with open('fB.dat', 'w') as fB: fB.write(""w3 4 5 6""); subprocess.run([sys.executable, os.path.join('..', 'fsapt.py')], check=True). fEnergies = {}; fkeys = ['fEelst', 'fEexch', 'fEindAB', 'fEindBA', 'fEdisp', 'fEedisp', ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:4159,Testability,TEST,TEST,4159,"i_bohr2angstroms, -1.6696 / psi_bohr2angstroms); Chrgfield_B.extern.addCharge(-0.834, -1.7899 / psi_bohr2angstroms, -0.4027 / psi_bohr2angstroms, -1.2768 / psi_bohr2angstroms); Chrgfield_B.extern.addCharge( 0.417, -1.8988 / psi_bohr2angstroms, -0.4993 / psi_bohr2angstroms, -0.3072 / psi_bohr2angstroms). Chrgfield_C = QMMM(); Chrgfield_C.extern.addCharge( 0.417, 1.1270 / psi_bohr2angstroms, 1.5527 / psi_bohr2angstroms, -0.1658 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge(-0.834, 1.9896 / psi_bohr2angstroms, 1.0738 / psi_bohr2angstroms, -0.1673 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge( 0.417, 2.6619 / psi_bohr2angstroms, 1.7546 / psi_bohr2angstroms, -0.2910 / psi_bohr2angstroms). external_potentials = {; 'A': Chrgfield_A,; 'B': Chrgfield_B,; 'C': Chrgfield_C,; }. set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; }. energy('fisapt0', external_potentials=external_potentials). keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 74.2330370461897, #TEST; 'Eelst' : -0.04919037863747235, #TEST; 'Eexch' : 0.018239207303845935, #TEST; 'Eind' : -0.007969545823122322, #TEST; 'Edisp' : -0.002794948165605119, #TEST; 'Etot' : -0.04171566532235386, #TEST; }. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST. import os; import sys; import subprocess. os.chdir('fsapt'); with open('fA.dat', 'w') as fA: fA.write(""w1 1 2 3""); with open('fB.dat', 'w') as fB: fB.write(""w3 4 5 6""); subprocess.run([sys.executable, os.path.join('..', 'fsapt.py')], check=True). fEnergies = {}; fkeys = ['fEelst', 'fEexch', 'fEindAB', 'fEindBA', 'fEdisp', 'fEedisp', 'fEtot'] #TEST. with open('fsapt.dat', 'r') as f",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:4193,Testability,TEST,TEST,4193,"bohr2angstroms); Chrgfield_B.extern.addCharge(-0.834, -1.7899 / psi_bohr2angstroms, -0.4027 / psi_bohr2angstroms, -1.2768 / psi_bohr2angstroms); Chrgfield_B.extern.addCharge( 0.417, -1.8988 / psi_bohr2angstroms, -0.4993 / psi_bohr2angstroms, -0.3072 / psi_bohr2angstroms). Chrgfield_C = QMMM(); Chrgfield_C.extern.addCharge( 0.417, 1.1270 / psi_bohr2angstroms, 1.5527 / psi_bohr2angstroms, -0.1658 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge(-0.834, 1.9896 / psi_bohr2angstroms, 1.0738 / psi_bohr2angstroms, -0.1673 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge( 0.417, 2.6619 / psi_bohr2angstroms, 1.7546 / psi_bohr2angstroms, -0.2910 / psi_bohr2angstroms). external_potentials = {; 'A': Chrgfield_A,; 'B': Chrgfield_B,; 'C': Chrgfield_C,; }. set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; }. energy('fisapt0', external_potentials=external_potentials). keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 74.2330370461897, #TEST; 'Eelst' : -0.04919037863747235, #TEST; 'Eexch' : 0.018239207303845935, #TEST; 'Eind' : -0.007969545823122322, #TEST; 'Edisp' : -0.002794948165605119, #TEST; 'Etot' : -0.04171566532235386, #TEST; }. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST. import os; import sys; import subprocess. os.chdir('fsapt'); with open('fA.dat', 'w') as fA: fA.write(""w1 1 2 3""); with open('fB.dat', 'w') as fB: fB.write(""w3 4 5 6""); subprocess.run([sys.executable, os.path.join('..', 'fsapt.py')], check=True). fEnergies = {}; fkeys = ['fEelst', 'fEexch', 'fEindAB', 'fEindBA', 'fEdisp', 'fEedisp', 'fEtot'] #TEST. with open('fsapt.dat', 'r') as fsapt: #TEST; Energies = [float(x",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:4232,Testability,TEST,TEST,4232,"ddCharge(-0.834, -1.7899 / psi_bohr2angstroms, -0.4027 / psi_bohr2angstroms, -1.2768 / psi_bohr2angstroms); Chrgfield_B.extern.addCharge( 0.417, -1.8988 / psi_bohr2angstroms, -0.4993 / psi_bohr2angstroms, -0.3072 / psi_bohr2angstroms). Chrgfield_C = QMMM(); Chrgfield_C.extern.addCharge( 0.417, 1.1270 / psi_bohr2angstroms, 1.5527 / psi_bohr2angstroms, -0.1658 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge(-0.834, 1.9896 / psi_bohr2angstroms, 1.0738 / psi_bohr2angstroms, -0.1673 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge( 0.417, 2.6619 / psi_bohr2angstroms, 1.7546 / psi_bohr2angstroms, -0.2910 / psi_bohr2angstroms). external_potentials = {; 'A': Chrgfield_A,; 'B': Chrgfield_B,; 'C': Chrgfield_C,; }. set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; }. energy('fisapt0', external_potentials=external_potentials). keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 74.2330370461897, #TEST; 'Eelst' : -0.04919037863747235, #TEST; 'Eexch' : 0.018239207303845935, #TEST; 'Eind' : -0.007969545823122322, #TEST; 'Edisp' : -0.002794948165605119, #TEST; 'Etot' : -0.04171566532235386, #TEST; }. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST. import os; import sys; import subprocess. os.chdir('fsapt'); with open('fA.dat', 'w') as fA: fA.write(""w1 1 2 3""); with open('fB.dat', 'w') as fB: fB.write(""w3 4 5 6""); subprocess.run([sys.executable, os.path.join('..', 'fsapt.py')], check=True). fEnergies = {}; fkeys = ['fEelst', 'fEexch', 'fEindAB', 'fEindBA', 'fEdisp', 'fEedisp', 'fEtot'] #TEST. with open('fsapt.dat', 'r') as fsapt: #TEST; Energies = [float(x) for x in fsapt.readlines()[-2].spl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:4271,Testability,TEST,TEST,4271,"gstroms, -0.4027 / psi_bohr2angstroms, -1.2768 / psi_bohr2angstroms); Chrgfield_B.extern.addCharge( 0.417, -1.8988 / psi_bohr2angstroms, -0.4993 / psi_bohr2angstroms, -0.3072 / psi_bohr2angstroms). Chrgfield_C = QMMM(); Chrgfield_C.extern.addCharge( 0.417, 1.1270 / psi_bohr2angstroms, 1.5527 / psi_bohr2angstroms, -0.1658 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge(-0.834, 1.9896 / psi_bohr2angstroms, 1.0738 / psi_bohr2angstroms, -0.1673 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge( 0.417, 2.6619 / psi_bohr2angstroms, 1.7546 / psi_bohr2angstroms, -0.2910 / psi_bohr2angstroms). external_potentials = {; 'A': Chrgfield_A,; 'B': Chrgfield_B,; 'C': Chrgfield_C,; }. set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; }. energy('fisapt0', external_potentials=external_potentials). keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 74.2330370461897, #TEST; 'Eelst' : -0.04919037863747235, #TEST; 'Eexch' : 0.018239207303845935, #TEST; 'Eind' : -0.007969545823122322, #TEST; 'Edisp' : -0.002794948165605119, #TEST; 'Etot' : -0.04171566532235386, #TEST; }. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST. import os; import sys; import subprocess. os.chdir('fsapt'); with open('fA.dat', 'w') as fA: fA.write(""w1 1 2 3""); with open('fB.dat', 'w') as fB: fB.write(""w3 4 5 6""); subprocess.run([sys.executable, os.path.join('..', 'fsapt.py')], check=True). fEnergies = {}; fkeys = ['fEelst', 'fEexch', 'fEindAB', 'fEindBA', 'fEdisp', 'fEedisp', 'fEtot'] #TEST. with open('fsapt.dat', 'r') as fsapt: #TEST; Energies = [float(x) for x in fsapt.readlines()[-2].split()[2:]] #TEST. for pair in zip(fkeys,",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:4310,Testability,TEST,TEST,4310,"1.2768 / psi_bohr2angstroms); Chrgfield_B.extern.addCharge( 0.417, -1.8988 / psi_bohr2angstroms, -0.4993 / psi_bohr2angstroms, -0.3072 / psi_bohr2angstroms). Chrgfield_C = QMMM(); Chrgfield_C.extern.addCharge( 0.417, 1.1270 / psi_bohr2angstroms, 1.5527 / psi_bohr2angstroms, -0.1658 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge(-0.834, 1.9896 / psi_bohr2angstroms, 1.0738 / psi_bohr2angstroms, -0.1673 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge( 0.417, 2.6619 / psi_bohr2angstroms, 1.7546 / psi_bohr2angstroms, -0.2910 / psi_bohr2angstroms). external_potentials = {; 'A': Chrgfield_A,; 'B': Chrgfield_B,; 'C': Chrgfield_C,; }. set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; }. energy('fisapt0', external_potentials=external_potentials). keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 74.2330370461897, #TEST; 'Eelst' : -0.04919037863747235, #TEST; 'Eexch' : 0.018239207303845935, #TEST; 'Eind' : -0.007969545823122322, #TEST; 'Edisp' : -0.002794948165605119, #TEST; 'Etot' : -0.04171566532235386, #TEST; }. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST. import os; import sys; import subprocess. os.chdir('fsapt'); with open('fA.dat', 'w') as fA: fA.write(""w1 1 2 3""); with open('fB.dat', 'w') as fB: fB.write(""w3 4 5 6""); subprocess.run([sys.executable, os.path.join('..', 'fsapt.py')], check=True). fEnergies = {}; fkeys = ['fEelst', 'fEexch', 'fEindAB', 'fEindBA', 'fEdisp', 'fEedisp', 'fEtot'] #TEST. with open('fsapt.dat', 'r') as fsapt: #TEST; Energies = [float(x) for x in fsapt.readlines()[-2].split()[2:]] #TEST. for pair in zip(fkeys,Energies): #TEST; fEnergies[pair[0]] = ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:4350,Testability,TEST,TEST,4350,"_B.extern.addCharge( 0.417, -1.8988 / psi_bohr2angstroms, -0.4993 / psi_bohr2angstroms, -0.3072 / psi_bohr2angstroms). Chrgfield_C = QMMM(); Chrgfield_C.extern.addCharge( 0.417, 1.1270 / psi_bohr2angstroms, 1.5527 / psi_bohr2angstroms, -0.1658 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge(-0.834, 1.9896 / psi_bohr2angstroms, 1.0738 / psi_bohr2angstroms, -0.1673 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge( 0.417, 2.6619 / psi_bohr2angstroms, 1.7546 / psi_bohr2angstroms, -0.2910 / psi_bohr2angstroms). external_potentials = {; 'A': Chrgfield_A,; 'B': Chrgfield_B,; 'C': Chrgfield_C,; }. set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; }. energy('fisapt0', external_potentials=external_potentials). keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 74.2330370461897, #TEST; 'Eelst' : -0.04919037863747235, #TEST; 'Eexch' : 0.018239207303845935, #TEST; 'Eind' : -0.007969545823122322, #TEST; 'Edisp' : -0.002794948165605119, #TEST; 'Etot' : -0.04171566532235386, #TEST; }. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST. import os; import sys; import subprocess. os.chdir('fsapt'); with open('fA.dat', 'w') as fA: fA.write(""w1 1 2 3""); with open('fB.dat', 'w') as fB: fB.write(""w3 4 5 6""); subprocess.run([sys.executable, os.path.join('..', 'fsapt.py')], check=True). fEnergies = {}; fkeys = ['fEelst', 'fEexch', 'fEindAB', 'fEindBA', 'fEdisp', 'fEedisp', 'fEtot'] #TEST. with open('fsapt.dat', 'r') as fsapt: #TEST; Energies = [float(x) for x in fsapt.readlines()[-2].split()[2:]] #TEST. for pair in zip(fkeys,Energies): #TEST; fEnergies[pair[0]] = pair[1] #TEST. fEref = { #TEST; 'fEelst'",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:4388,Testability,TEST,TEST,4388,"8 / psi_bohr2angstroms, -0.4993 / psi_bohr2angstroms, -0.3072 / psi_bohr2angstroms). Chrgfield_C = QMMM(); Chrgfield_C.extern.addCharge( 0.417, 1.1270 / psi_bohr2angstroms, 1.5527 / psi_bohr2angstroms, -0.1658 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge(-0.834, 1.9896 / psi_bohr2angstroms, 1.0738 / psi_bohr2angstroms, -0.1673 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge( 0.417, 2.6619 / psi_bohr2angstroms, 1.7546 / psi_bohr2angstroms, -0.2910 / psi_bohr2angstroms). external_potentials = {; 'A': Chrgfield_A,; 'B': Chrgfield_B,; 'C': Chrgfield_C,; }. set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; }. energy('fisapt0', external_potentials=external_potentials). keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 74.2330370461897, #TEST; 'Eelst' : -0.04919037863747235, #TEST; 'Eexch' : 0.018239207303845935, #TEST; 'Eind' : -0.007969545823122322, #TEST; 'Edisp' : -0.002794948165605119, #TEST; 'Etot' : -0.04171566532235386, #TEST; }. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST. import os; import sys; import subprocess. os.chdir('fsapt'); with open('fA.dat', 'w') as fA: fA.write(""w1 1 2 3""); with open('fB.dat', 'w') as fB: fB.write(""w3 4 5 6""); subprocess.run([sys.executable, os.path.join('..', 'fsapt.py')], check=True). fEnergies = {}; fkeys = ['fEelst', 'fEexch', 'fEindAB', 'fEindBA', 'fEdisp', 'fEedisp', 'fEtot'] #TEST. with open('fsapt.dat', 'r') as fsapt: #TEST; Energies = [float(x) for x in fsapt.readlines()[-2].split()[2:]] #TEST. for pair in zip(fkeys,Energies): #TEST; fEnergies[pair[0]] = pair[1] #TEST. fEref = { #TEST; 'fEelst' : -30.867, #TEST; 'fEexch' : 11.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:4407,Testability,TEST,TEST,4407,"93 / psi_bohr2angstroms, -0.3072 / psi_bohr2angstroms). Chrgfield_C = QMMM(); Chrgfield_C.extern.addCharge( 0.417, 1.1270 / psi_bohr2angstroms, 1.5527 / psi_bohr2angstroms, -0.1658 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge(-0.834, 1.9896 / psi_bohr2angstroms, 1.0738 / psi_bohr2angstroms, -0.1673 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge( 0.417, 2.6619 / psi_bohr2angstroms, 1.7546 / psi_bohr2angstroms, -0.2910 / psi_bohr2angstroms). external_potentials = {; 'A': Chrgfield_A,; 'B': Chrgfield_B,; 'C': Chrgfield_C,; }. set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; }. energy('fisapt0', external_potentials=external_potentials). keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 74.2330370461897, #TEST; 'Eelst' : -0.04919037863747235, #TEST; 'Eexch' : 0.018239207303845935, #TEST; 'Eind' : -0.007969545823122322, #TEST; 'Edisp' : -0.002794948165605119, #TEST; 'Etot' : -0.04171566532235386, #TEST; }. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST. import os; import sys; import subprocess. os.chdir('fsapt'); with open('fA.dat', 'w') as fA: fA.write(""w1 1 2 3""); with open('fB.dat', 'w') as fB: fB.write(""w3 4 5 6""); subprocess.run([sys.executable, os.path.join('..', 'fsapt.py')], check=True). fEnergies = {}; fkeys = ['fEelst', 'fEexch', 'fEindAB', 'fEindBA', 'fEdisp', 'fEedisp', 'fEtot'] #TEST. with open('fsapt.dat', 'r') as fsapt: #TEST; Energies = [float(x) for x in fsapt.readlines()[-2].split()[2:]] #TEST. for pair in zip(fkeys,Energies): #TEST; fEnergies[pair[0]] = pair[1] #TEST. fEref = { #TEST; 'fEelst' : -30.867, #TEST; 'fEexch' : 11.445, #TEST; 'fEindAB': -3.138",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:4455,Testability,TEST,TEST,4455,"psi_bohr2angstroms, -0.1658 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge(-0.834, 1.9896 / psi_bohr2angstroms, 1.0738 / psi_bohr2angstroms, -0.1673 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge( 0.417, 2.6619 / psi_bohr2angstroms, 1.7546 / psi_bohr2angstroms, -0.2910 / psi_bohr2angstroms). external_potentials = {; 'A': Chrgfield_A,; 'B': Chrgfield_B,; 'C': Chrgfield_C,; }. set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; }. energy('fisapt0', external_potentials=external_potentials). keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 74.2330370461897, #TEST; 'Eelst' : -0.04919037863747235, #TEST; 'Eexch' : 0.018239207303845935, #TEST; 'Eind' : -0.007969545823122322, #TEST; 'Edisp' : -0.002794948165605119, #TEST; 'Etot' : -0.04171566532235386, #TEST; }. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST. import os; import sys; import subprocess. os.chdir('fsapt'); with open('fA.dat', 'w') as fA: fA.write(""w1 1 2 3""); with open('fB.dat', 'w') as fB: fB.write(""w3 4 5 6""); subprocess.run([sys.executable, os.path.join('..', 'fsapt.py')], check=True). fEnergies = {}; fkeys = ['fEelst', 'fEexch', 'fEindAB', 'fEindBA', 'fEdisp', 'fEedisp', 'fEtot'] #TEST. with open('fsapt.dat', 'r') as fsapt: #TEST; Energies = [float(x) for x in fsapt.readlines()[-2].split()[2:]] #TEST. for pair in zip(fkeys,Energies): #TEST; fEnergies[pair[0]] = pair[1] #TEST. fEref = { #TEST; 'fEelst' : -30.867, #TEST; 'fEexch' : 11.445, #TEST; 'fEindAB': -3.138, #TEST; 'fEindBA': -1.863, #TEST; 'fEdisp' : -1.754, #TEST; 'fEedisp': 0.000, #TEST; 'fEtot' : -26.177} #TEST. for key in fkeys: #TEST; compare_values(fE",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:4502,Testability,TEST,TEST,4502,"psi_bohr2angstroms, -0.1658 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge(-0.834, 1.9896 / psi_bohr2angstroms, 1.0738 / psi_bohr2angstroms, -0.1673 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge( 0.417, 2.6619 / psi_bohr2angstroms, 1.7546 / psi_bohr2angstroms, -0.2910 / psi_bohr2angstroms). external_potentials = {; 'A': Chrgfield_A,; 'B': Chrgfield_B,; 'C': Chrgfield_C,; }. set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; }. energy('fisapt0', external_potentials=external_potentials). keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 74.2330370461897, #TEST; 'Eelst' : -0.04919037863747235, #TEST; 'Eexch' : 0.018239207303845935, #TEST; 'Eind' : -0.007969545823122322, #TEST; 'Edisp' : -0.002794948165605119, #TEST; 'Etot' : -0.04171566532235386, #TEST; }. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST. import os; import sys; import subprocess. os.chdir('fsapt'); with open('fA.dat', 'w') as fA: fA.write(""w1 1 2 3""); with open('fB.dat', 'w') as fB: fB.write(""w3 4 5 6""); subprocess.run([sys.executable, os.path.join('..', 'fsapt.py')], check=True). fEnergies = {}; fkeys = ['fEelst', 'fEexch', 'fEindAB', 'fEindBA', 'fEdisp', 'fEedisp', 'fEtot'] #TEST. with open('fsapt.dat', 'r') as fsapt: #TEST; Energies = [float(x) for x in fsapt.readlines()[-2].split()[2:]] #TEST. for pair in zip(fkeys,Energies): #TEST; fEnergies[pair[0]] = pair[1] #TEST. fEref = { #TEST; 'fEelst' : -30.867, #TEST; 'fEexch' : 11.445, #TEST; 'fEindAB': -3.138, #TEST; 'fEindBA': -1.863, #TEST; 'fEdisp' : -1.754, #TEST; 'fEedisp': 0.000, #TEST; 'fEtot' : -26.177} #TEST. for key in fkeys: #TEST; compare_values(fE",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:4549,Testability,TEST,TEST,4549,"psi_bohr2angstroms, -0.1658 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge(-0.834, 1.9896 / psi_bohr2angstroms, 1.0738 / psi_bohr2angstroms, -0.1673 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge( 0.417, 2.6619 / psi_bohr2angstroms, 1.7546 / psi_bohr2angstroms, -0.2910 / psi_bohr2angstroms). external_potentials = {; 'A': Chrgfield_A,; 'B': Chrgfield_B,; 'C': Chrgfield_C,; }. set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; }. energy('fisapt0', external_potentials=external_potentials). keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 74.2330370461897, #TEST; 'Eelst' : -0.04919037863747235, #TEST; 'Eexch' : 0.018239207303845935, #TEST; 'Eind' : -0.007969545823122322, #TEST; 'Edisp' : -0.002794948165605119, #TEST; 'Etot' : -0.04171566532235386, #TEST; }. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST. import os; import sys; import subprocess. os.chdir('fsapt'); with open('fA.dat', 'w') as fA: fA.write(""w1 1 2 3""); with open('fB.dat', 'w') as fB: fB.write(""w3 4 5 6""); subprocess.run([sys.executable, os.path.join('..', 'fsapt.py')], check=True). fEnergies = {}; fkeys = ['fEelst', 'fEexch', 'fEindAB', 'fEindBA', 'fEdisp', 'fEedisp', 'fEtot'] #TEST. with open('fsapt.dat', 'r') as fsapt: #TEST; Energies = [float(x) for x in fsapt.readlines()[-2].split()[2:]] #TEST. for pair in zip(fkeys,Energies): #TEST; fEnergies[pair[0]] = pair[1] #TEST. fEref = { #TEST; 'fEelst' : -30.867, #TEST; 'fEexch' : 11.445, #TEST; 'fEindAB': -3.138, #TEST; 'fEindBA': -1.863, #TEST; 'fEdisp' : -1.754, #TEST; 'fEedisp': 0.000, #TEST; 'fEtot' : -26.177} #TEST. for key in fkeys: #TEST; compare_values(fE",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:4594,Testability,TEST,TEST,4594,"psi_bohr2angstroms, -0.1658 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge(-0.834, 1.9896 / psi_bohr2angstroms, 1.0738 / psi_bohr2angstroms, -0.1673 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge( 0.417, 2.6619 / psi_bohr2angstroms, 1.7546 / psi_bohr2angstroms, -0.2910 / psi_bohr2angstroms). external_potentials = {; 'A': Chrgfield_A,; 'B': Chrgfield_B,; 'C': Chrgfield_C,; }. set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; }. energy('fisapt0', external_potentials=external_potentials). keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 74.2330370461897, #TEST; 'Eelst' : -0.04919037863747235, #TEST; 'Eexch' : 0.018239207303845935, #TEST; 'Eind' : -0.007969545823122322, #TEST; 'Edisp' : -0.002794948165605119, #TEST; 'Etot' : -0.04171566532235386, #TEST; }. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST. import os; import sys; import subprocess. os.chdir('fsapt'); with open('fA.dat', 'w') as fA: fA.write(""w1 1 2 3""); with open('fB.dat', 'w') as fB: fB.write(""w3 4 5 6""); subprocess.run([sys.executable, os.path.join('..', 'fsapt.py')], check=True). fEnergies = {}; fkeys = ['fEelst', 'fEexch', 'fEindAB', 'fEindBA', 'fEdisp', 'fEedisp', 'fEtot'] #TEST. with open('fsapt.dat', 'r') as fsapt: #TEST; Energies = [float(x) for x in fsapt.readlines()[-2].split()[2:]] #TEST. for pair in zip(fkeys,Energies): #TEST; fEnergies[pair[0]] = pair[1] #TEST. fEref = { #TEST; 'fEelst' : -30.867, #TEST; 'fEexch' : 11.445, #TEST; 'fEindAB': -3.138, #TEST; 'fEindBA': -1.863, #TEST; 'fEdisp' : -1.754, #TEST; 'fEedisp': 0.000, #TEST; 'fEtot' : -26.177} #TEST. for key in fkeys: #TEST; compare_values(fE",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:4641,Testability,TEST,TEST,4641,"psi_bohr2angstroms, -0.1658 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge(-0.834, 1.9896 / psi_bohr2angstroms, 1.0738 / psi_bohr2angstroms, -0.1673 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge( 0.417, 2.6619 / psi_bohr2angstroms, 1.7546 / psi_bohr2angstroms, -0.2910 / psi_bohr2angstroms). external_potentials = {; 'A': Chrgfield_A,; 'B': Chrgfield_B,; 'C': Chrgfield_C,; }. set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; }. energy('fisapt0', external_potentials=external_potentials). keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 74.2330370461897, #TEST; 'Eelst' : -0.04919037863747235, #TEST; 'Eexch' : 0.018239207303845935, #TEST; 'Eind' : -0.007969545823122322, #TEST; 'Edisp' : -0.002794948165605119, #TEST; 'Etot' : -0.04171566532235386, #TEST; }. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST. import os; import sys; import subprocess. os.chdir('fsapt'); with open('fA.dat', 'w') as fA: fA.write(""w1 1 2 3""); with open('fB.dat', 'w') as fB: fB.write(""w3 4 5 6""); subprocess.run([sys.executable, os.path.join('..', 'fsapt.py')], check=True). fEnergies = {}; fkeys = ['fEelst', 'fEexch', 'fEindAB', 'fEindBA', 'fEdisp', 'fEedisp', 'fEtot'] #TEST. with open('fsapt.dat', 'r') as fsapt: #TEST; Energies = [float(x) for x in fsapt.readlines()[-2].split()[2:]] #TEST. for pair in zip(fkeys,Energies): #TEST; fEnergies[pair[0]] = pair[1] #TEST. fEref = { #TEST; 'fEelst' : -30.867, #TEST; 'fEexch' : 11.445, #TEST; 'fEindAB': -3.138, #TEST; 'fEindBA': -1.863, #TEST; 'fEdisp' : -1.754, #TEST; 'fEedisp': 0.000, #TEST; 'fEtot' : -26.177} #TEST. for key in fkeys: #TEST; compare_values(fE",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:4689,Testability,TEST,TEST,4689,"psi_bohr2angstroms, -0.1658 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge(-0.834, 1.9896 / psi_bohr2angstroms, 1.0738 / psi_bohr2angstroms, -0.1673 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge( 0.417, 2.6619 / psi_bohr2angstroms, 1.7546 / psi_bohr2angstroms, -0.2910 / psi_bohr2angstroms). external_potentials = {; 'A': Chrgfield_A,; 'B': Chrgfield_B,; 'C': Chrgfield_C,; }. set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; }. energy('fisapt0', external_potentials=external_potentials). keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 74.2330370461897, #TEST; 'Eelst' : -0.04919037863747235, #TEST; 'Eexch' : 0.018239207303845935, #TEST; 'Eind' : -0.007969545823122322, #TEST; 'Edisp' : -0.002794948165605119, #TEST; 'Etot' : -0.04171566532235386, #TEST; }. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST. import os; import sys; import subprocess. os.chdir('fsapt'); with open('fA.dat', 'w') as fA: fA.write(""w1 1 2 3""); with open('fB.dat', 'w') as fB: fB.write(""w3 4 5 6""); subprocess.run([sys.executable, os.path.join('..', 'fsapt.py')], check=True). fEnergies = {}; fkeys = ['fEelst', 'fEexch', 'fEindAB', 'fEindBA', 'fEdisp', 'fEedisp', 'fEtot'] #TEST. with open('fsapt.dat', 'r') as fsapt: #TEST; Energies = [float(x) for x in fsapt.readlines()[-2].split()[2:]] #TEST. for pair in zip(fkeys,Energies): #TEST; fEnergies[pair[0]] = pair[1] #TEST. fEref = { #TEST; 'fEelst' : -30.867, #TEST; 'fEexch' : 11.445, #TEST; 'fEindAB': -3.138, #TEST; 'fEindBA': -1.863, #TEST; 'fEdisp' : -1.754, #TEST; 'fEedisp': 0.000, #TEST; 'fEtot' : -26.177} #TEST. for key in fkeys: #TEST; compare_values(fE",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:4698,Testability,TEST,TEST,4698,"psi_bohr2angstroms, -0.1658 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge(-0.834, 1.9896 / psi_bohr2angstroms, 1.0738 / psi_bohr2angstroms, -0.1673 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge( 0.417, 2.6619 / psi_bohr2angstroms, 1.7546 / psi_bohr2angstroms, -0.2910 / psi_bohr2angstroms). external_potentials = {; 'A': Chrgfield_A,; 'B': Chrgfield_B,; 'C': Chrgfield_C,; }. set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; }. energy('fisapt0', external_potentials=external_potentials). keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 74.2330370461897, #TEST; 'Eelst' : -0.04919037863747235, #TEST; 'Eexch' : 0.018239207303845935, #TEST; 'Eind' : -0.007969545823122322, #TEST; 'Edisp' : -0.002794948165605119, #TEST; 'Etot' : -0.04171566532235386, #TEST; }. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST. import os; import sys; import subprocess. os.chdir('fsapt'); with open('fA.dat', 'w') as fA: fA.write(""w1 1 2 3""); with open('fB.dat', 'w') as fB: fB.write(""w3 4 5 6""); subprocess.run([sys.executable, os.path.join('..', 'fsapt.py')], check=True). fEnergies = {}; fkeys = ['fEelst', 'fEexch', 'fEindAB', 'fEindBA', 'fEdisp', 'fEedisp', 'fEtot'] #TEST. with open('fsapt.dat', 'r') as fsapt: #TEST; Energies = [float(x) for x in fsapt.readlines()[-2].split()[2:]] #TEST. for pair in zip(fkeys,Energies): #TEST; fEnergies[pair[0]] = pair[1] #TEST. fEref = { #TEST; 'fEelst' : -30.867, #TEST; 'fEexch' : 11.445, #TEST; 'fEindAB': -3.138, #TEST; 'fEindBA': -1.863, #TEST; 'fEdisp' : -1.754, #TEST; 'fEedisp': 0.000, #TEST; 'fEtot' : -26.177} #TEST. for key in fkeys: #TEST; compare_values(fE",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:4722,Testability,TEST,TEST,4722,"Chrgfield_C.extern.addCharge( 0.417, 2.6619 / psi_bohr2angstroms, 1.7546 / psi_bohr2angstroms, -0.2910 / psi_bohr2angstroms). external_potentials = {; 'A': Chrgfield_A,; 'B': Chrgfield_B,; 'C': Chrgfield_C,; }. set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; }. energy('fisapt0', external_potentials=external_potentials). keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 74.2330370461897, #TEST; 'Eelst' : -0.04919037863747235, #TEST; 'Eexch' : 0.018239207303845935, #TEST; 'Eind' : -0.007969545823122322, #TEST; 'Edisp' : -0.002794948165605119, #TEST; 'Etot' : -0.04171566532235386, #TEST; }. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST. import os; import sys; import subprocess. os.chdir('fsapt'); with open('fA.dat', 'w') as fA: fA.write(""w1 1 2 3""); with open('fB.dat', 'w') as fB: fB.write(""w3 4 5 6""); subprocess.run([sys.executable, os.path.join('..', 'fsapt.py')], check=True). fEnergies = {}; fkeys = ['fEelst', 'fEexch', 'fEindAB', 'fEindBA', 'fEdisp', 'fEedisp', 'fEtot'] #TEST. with open('fsapt.dat', 'r') as fsapt: #TEST; Energies = [float(x) for x in fsapt.readlines()[-2].split()[2:]] #TEST. for pair in zip(fkeys,Energies): #TEST; fEnergies[pair[0]] = pair[1] #TEST. fEref = { #TEST; 'fEelst' : -30.867, #TEST; 'fEexch' : 11.445, #TEST; 'fEindAB': -3.138, #TEST; 'fEindBA': -1.863, #TEST; 'fEdisp' : -1.754, #TEST; 'fEedisp': 0.000, #TEST; 'fEtot' : -26.177} #TEST. for key in fkeys: #TEST; compare_values(fEref[key], fEnergies[key], 2, key) #TEST; ```. ```; (py39b) psilocaluser@bash:psinet:/psi/gits/hrw-l2/objdir39b: (sept21qcdb_rb1) stage/bin/psi4 ../tests/fsapt-ext-abc-au/input.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:4774,Testability,TEST,TEST,4774,"Chrgfield_C.extern.addCharge( 0.417, 2.6619 / psi_bohr2angstroms, 1.7546 / psi_bohr2angstroms, -0.2910 / psi_bohr2angstroms). external_potentials = {; 'A': Chrgfield_A,; 'B': Chrgfield_B,; 'C': Chrgfield_C,; }. set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; }. energy('fisapt0', external_potentials=external_potentials). keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 74.2330370461897, #TEST; 'Eelst' : -0.04919037863747235, #TEST; 'Eexch' : 0.018239207303845935, #TEST; 'Eind' : -0.007969545823122322, #TEST; 'Edisp' : -0.002794948165605119, #TEST; 'Etot' : -0.04171566532235386, #TEST; }. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST. import os; import sys; import subprocess. os.chdir('fsapt'); with open('fA.dat', 'w') as fA: fA.write(""w1 1 2 3""); with open('fB.dat', 'w') as fB: fB.write(""w3 4 5 6""); subprocess.run([sys.executable, os.path.join('..', 'fsapt.py')], check=True). fEnergies = {}; fkeys = ['fEelst', 'fEexch', 'fEindAB', 'fEindBA', 'fEdisp', 'fEedisp', 'fEtot'] #TEST. with open('fsapt.dat', 'r') as fsapt: #TEST; Energies = [float(x) for x in fsapt.readlines()[-2].split()[2:]] #TEST. for pair in zip(fkeys,Energies): #TEST; fEnergies[pair[0]] = pair[1] #TEST. fEref = { #TEST; 'fEelst' : -30.867, #TEST; 'fEexch' : 11.445, #TEST; 'fEindAB': -3.138, #TEST; 'fEindBA': -1.863, #TEST; 'fEdisp' : -1.754, #TEST; 'fEedisp': 0.000, #TEST; 'fEtot' : -26.177} #TEST. for key in fkeys: #TEST; compare_values(fEref[key], fEnergies[key], 2, key) #TEST; ```. ```; (py39b) psilocaluser@bash:psinet:/psi/gits/hrw-l2/objdir39b: (sept21qcdb_rb1) stage/bin/psi4 ../tests/fsapt-ext-abc-au/input.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:5125,Testability,TEST,TEST,5125,"ls). keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 74.2330370461897, #TEST; 'Eelst' : -0.04919037863747235, #TEST; 'Eexch' : 0.018239207303845935, #TEST; 'Eind' : -0.007969545823122322, #TEST; 'Edisp' : -0.002794948165605119, #TEST; 'Etot' : -0.04171566532235386, #TEST; }. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST. import os; import sys; import subprocess. os.chdir('fsapt'); with open('fA.dat', 'w') as fA: fA.write(""w1 1 2 3""); with open('fB.dat', 'w') as fB: fB.write(""w3 4 5 6""); subprocess.run([sys.executable, os.path.join('..', 'fsapt.py')], check=True). fEnergies = {}; fkeys = ['fEelst', 'fEexch', 'fEindAB', 'fEindBA', 'fEdisp', 'fEedisp', 'fEtot'] #TEST. with open('fsapt.dat', 'r') as fsapt: #TEST; Energies = [float(x) for x in fsapt.readlines()[-2].split()[2:]] #TEST. for pair in zip(fkeys,Energies): #TEST; fEnergies[pair[0]] = pair[1] #TEST. fEref = { #TEST; 'fEelst' : -30.867, #TEST; 'fEexch' : 11.445, #TEST; 'fEindAB': -3.138, #TEST; 'fEindBA': -1.863, #TEST; 'fEdisp' : -1.754, #TEST; 'fEedisp': 0.000, #TEST; 'fEtot' : -26.177} #TEST. for key in fkeys: #TEST; compare_values(fEref[key], fEnergies[key], 2, key) #TEST; ```. ```; (py39b) psilocaluser@bash:psinet:/psi/gits/hrw-l2/objdir39b: (sept21qcdb_rb1) stage/bin/psi4 ../tests/fsapt-ext-abc-au/input.dat ; Enuc..................................................................................PASSED; Eelst.................................................................................PASSED; Eexch.................................................................................PASSED; Eind.............................................",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:5170,Testability,TEST,TEST,5170,"0370461897, #TEST; 'Eelst' : -0.04919037863747235, #TEST; 'Eexch' : 0.018239207303845935, #TEST; 'Eind' : -0.007969545823122322, #TEST; 'Edisp' : -0.002794948165605119, #TEST; 'Etot' : -0.04171566532235386, #TEST; }. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST. import os; import sys; import subprocess. os.chdir('fsapt'); with open('fA.dat', 'w') as fA: fA.write(""w1 1 2 3""); with open('fB.dat', 'w') as fB: fB.write(""w3 4 5 6""); subprocess.run([sys.executable, os.path.join('..', 'fsapt.py')], check=True). fEnergies = {}; fkeys = ['fEelst', 'fEexch', 'fEindAB', 'fEindBA', 'fEdisp', 'fEedisp', 'fEtot'] #TEST. with open('fsapt.dat', 'r') as fsapt: #TEST; Energies = [float(x) for x in fsapt.readlines()[-2].split()[2:]] #TEST. for pair in zip(fkeys,Energies): #TEST; fEnergies[pair[0]] = pair[1] #TEST. fEref = { #TEST; 'fEelst' : -30.867, #TEST; 'fEexch' : 11.445, #TEST; 'fEindAB': -3.138, #TEST; 'fEindBA': -1.863, #TEST; 'fEdisp' : -1.754, #TEST; 'fEedisp': 0.000, #TEST; 'fEtot' : -26.177} #TEST. for key in fkeys: #TEST; compare_values(fEref[key], fEnergies[key], 2, key) #TEST; ```. ```; (py39b) psilocaluser@bash:psinet:/psi/gits/hrw-l2/objdir39b: (sept21qcdb_rb1) stage/bin/psi4 ../tests/fsapt-ext-abc-au/input.dat ; Enuc..................................................................................PASSED; Eelst.................................................................................PASSED; Eexch.................................................................................PASSED; Eind..................................................................................PASSED; Edisp....................................................",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:5242,Testability,TEST,TEST,5242," 'Eexch' : 0.018239207303845935, #TEST; 'Eind' : -0.007969545823122322, #TEST; 'Edisp' : -0.002794948165605119, #TEST; 'Etot' : -0.04171566532235386, #TEST; }. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST. import os; import sys; import subprocess. os.chdir('fsapt'); with open('fA.dat', 'w') as fA: fA.write(""w1 1 2 3""); with open('fB.dat', 'w') as fB: fB.write(""w3 4 5 6""); subprocess.run([sys.executable, os.path.join('..', 'fsapt.py')], check=True). fEnergies = {}; fkeys = ['fEelst', 'fEexch', 'fEindAB', 'fEindBA', 'fEdisp', 'fEedisp', 'fEtot'] #TEST. with open('fsapt.dat', 'r') as fsapt: #TEST; Energies = [float(x) for x in fsapt.readlines()[-2].split()[2:]] #TEST. for pair in zip(fkeys,Energies): #TEST; fEnergies[pair[0]] = pair[1] #TEST. fEref = { #TEST; 'fEelst' : -30.867, #TEST; 'fEexch' : 11.445, #TEST; 'fEindAB': -3.138, #TEST; 'fEindBA': -1.863, #TEST; 'fEdisp' : -1.754, #TEST; 'fEedisp': 0.000, #TEST; 'fEtot' : -26.177} #TEST. for key in fkeys: #TEST; compare_values(fEref[key], fEnergies[key], 2, key) #TEST; ```. ```; (py39b) psilocaluser@bash:psinet:/psi/gits/hrw-l2/objdir39b: (sept21qcdb_rb1) stage/bin/psi4 ../tests/fsapt-ext-abc-au/input.dat ; Enuc..................................................................................PASSED; Eelst.................................................................................PASSED; Eexch.................................................................................PASSED; Eind..................................................................................PASSED; Edisp.................................................................................PASSED; Etot.................",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:5282,Testability,TEST,TEST,5282," -0.007969545823122322, #TEST; 'Edisp' : -0.002794948165605119, #TEST; 'Etot' : -0.04171566532235386, #TEST; }. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST. import os; import sys; import subprocess. os.chdir('fsapt'); with open('fA.dat', 'w') as fA: fA.write(""w1 1 2 3""); with open('fB.dat', 'w') as fB: fB.write(""w3 4 5 6""); subprocess.run([sys.executable, os.path.join('..', 'fsapt.py')], check=True). fEnergies = {}; fkeys = ['fEelst', 'fEexch', 'fEindAB', 'fEindBA', 'fEdisp', 'fEedisp', 'fEtot'] #TEST. with open('fsapt.dat', 'r') as fsapt: #TEST; Energies = [float(x) for x in fsapt.readlines()[-2].split()[2:]] #TEST. for pair in zip(fkeys,Energies): #TEST; fEnergies[pair[0]] = pair[1] #TEST. fEref = { #TEST; 'fEelst' : -30.867, #TEST; 'fEexch' : 11.445, #TEST; 'fEindAB': -3.138, #TEST; 'fEindBA': -1.863, #TEST; 'fEdisp' : -1.754, #TEST; 'fEedisp': 0.000, #TEST; 'fEtot' : -26.177} #TEST. for key in fkeys: #TEST; compare_values(fEref[key], fEnergies[key], 2, key) #TEST; ```. ```; (py39b) psilocaluser@bash:psinet:/psi/gits/hrw-l2/objdir39b: (sept21qcdb_rb1) stage/bin/psi4 ../tests/fsapt-ext-abc-au/input.dat ; Enuc..................................................................................PASSED; Eelst.................................................................................PASSED; Eexch.................................................................................PASSED; Eind..................................................................................PASSED; Edisp.................................................................................PASSED; Etot................................................................",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:5318,Testability,TEST,TEST,5318," -0.007969545823122322, #TEST; 'Edisp' : -0.002794948165605119, #TEST; 'Etot' : -0.04171566532235386, #TEST; }. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST. import os; import sys; import subprocess. os.chdir('fsapt'); with open('fA.dat', 'w') as fA: fA.write(""w1 1 2 3""); with open('fB.dat', 'w') as fB: fB.write(""w3 4 5 6""); subprocess.run([sys.executable, os.path.join('..', 'fsapt.py')], check=True). fEnergies = {}; fkeys = ['fEelst', 'fEexch', 'fEindAB', 'fEindBA', 'fEdisp', 'fEedisp', 'fEtot'] #TEST. with open('fsapt.dat', 'r') as fsapt: #TEST; Energies = [float(x) for x in fsapt.readlines()[-2].split()[2:]] #TEST. for pair in zip(fkeys,Energies): #TEST; fEnergies[pair[0]] = pair[1] #TEST. fEref = { #TEST; 'fEelst' : -30.867, #TEST; 'fEexch' : 11.445, #TEST; 'fEindAB': -3.138, #TEST; 'fEindBA': -1.863, #TEST; 'fEdisp' : -1.754, #TEST; 'fEedisp': 0.000, #TEST; 'fEtot' : -26.177} #TEST. for key in fkeys: #TEST; compare_values(fEref[key], fEnergies[key], 2, key) #TEST; ```. ```; (py39b) psilocaluser@bash:psinet:/psi/gits/hrw-l2/objdir39b: (sept21qcdb_rb1) stage/bin/psi4 ../tests/fsapt-ext-abc-au/input.dat ; Enuc..................................................................................PASSED; Eelst.................................................................................PASSED; Eexch.................................................................................PASSED; Eind..................................................................................PASSED; Edisp.................................................................................PASSED; Etot................................................................",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:5335,Testability,TEST,TEST,5335,"65605119, #TEST; 'Etot' : -0.04171566532235386, #TEST; }. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST. import os; import sys; import subprocess. os.chdir('fsapt'); with open('fA.dat', 'w') as fA: fA.write(""w1 1 2 3""); with open('fB.dat', 'w') as fB: fB.write(""w3 4 5 6""); subprocess.run([sys.executable, os.path.join('..', 'fsapt.py')], check=True). fEnergies = {}; fkeys = ['fEelst', 'fEexch', 'fEindAB', 'fEindBA', 'fEdisp', 'fEedisp', 'fEtot'] #TEST. with open('fsapt.dat', 'r') as fsapt: #TEST; Energies = [float(x) for x in fsapt.readlines()[-2].split()[2:]] #TEST. for pair in zip(fkeys,Energies): #TEST; fEnergies[pair[0]] = pair[1] #TEST. fEref = { #TEST; 'fEelst' : -30.867, #TEST; 'fEexch' : 11.445, #TEST; 'fEindAB': -3.138, #TEST; 'fEindBA': -1.863, #TEST; 'fEdisp' : -1.754, #TEST; 'fEedisp': 0.000, #TEST; 'fEtot' : -26.177} #TEST. for key in fkeys: #TEST; compare_values(fEref[key], fEnergies[key], 2, key) #TEST; ```. ```; (py39b) psilocaluser@bash:psinet:/psi/gits/hrw-l2/objdir39b: (sept21qcdb_rb1) stage/bin/psi4 ../tests/fsapt-ext-abc-au/input.dat ; Enuc..................................................................................PASSED; Eelst.................................................................................PASSED; Eexch.................................................................................PASSED; Eind..................................................................................PASSED; Edisp.................................................................................PASSED; Etot..................................................................................PASSED; fEelst.......................",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:5362,Testability,TEST,TEST,5362,"4171566532235386, #TEST; }. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST. import os; import sys; import subprocess. os.chdir('fsapt'); with open('fA.dat', 'w') as fA: fA.write(""w1 1 2 3""); with open('fB.dat', 'w') as fB: fB.write(""w3 4 5 6""); subprocess.run([sys.executable, os.path.join('..', 'fsapt.py')], check=True). fEnergies = {}; fkeys = ['fEelst', 'fEexch', 'fEindAB', 'fEindBA', 'fEdisp', 'fEedisp', 'fEtot'] #TEST. with open('fsapt.dat', 'r') as fsapt: #TEST; Energies = [float(x) for x in fsapt.readlines()[-2].split()[2:]] #TEST. for pair in zip(fkeys,Energies): #TEST; fEnergies[pair[0]] = pair[1] #TEST. fEref = { #TEST; 'fEelst' : -30.867, #TEST; 'fEexch' : 11.445, #TEST; 'fEindAB': -3.138, #TEST; 'fEindBA': -1.863, #TEST; 'fEdisp' : -1.754, #TEST; 'fEedisp': 0.000, #TEST; 'fEtot' : -26.177} #TEST. for key in fkeys: #TEST; compare_values(fEref[key], fEnergies[key], 2, key) #TEST; ```. ```; (py39b) psilocaluser@bash:psinet:/psi/gits/hrw-l2/objdir39b: (sept21qcdb_rb1) stage/bin/psi4 ../tests/fsapt-ext-abc-au/input.dat ; Enuc..................................................................................PASSED; Eelst.................................................................................PASSED; Eexch.................................................................................PASSED; Eind..................................................................................PASSED; Edisp.................................................................................PASSED; Etot..................................................................................PASSED; fEelst....................................................",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:5388,Testability,TEST,TEST,5388,". Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST. import os; import sys; import subprocess. os.chdir('fsapt'); with open('fA.dat', 'w') as fA: fA.write(""w1 1 2 3""); with open('fB.dat', 'w') as fB: fB.write(""w3 4 5 6""); subprocess.run([sys.executable, os.path.join('..', 'fsapt.py')], check=True). fEnergies = {}; fkeys = ['fEelst', 'fEexch', 'fEindAB', 'fEindBA', 'fEdisp', 'fEedisp', 'fEtot'] #TEST. with open('fsapt.dat', 'r') as fsapt: #TEST; Energies = [float(x) for x in fsapt.readlines()[-2].split()[2:]] #TEST. for pair in zip(fkeys,Energies): #TEST; fEnergies[pair[0]] = pair[1] #TEST. fEref = { #TEST; 'fEelst' : -30.867, #TEST; 'fEexch' : 11.445, #TEST; 'fEindAB': -3.138, #TEST; 'fEindBA': -1.863, #TEST; 'fEdisp' : -1.754, #TEST; 'fEedisp': 0.000, #TEST; 'fEtot' : -26.177} #TEST. for key in fkeys: #TEST; compare_values(fEref[key], fEnergies[key], 2, key) #TEST; ```. ```; (py39b) psilocaluser@bash:psinet:/psi/gits/hrw-l2/objdir39b: (sept21qcdb_rb1) stage/bin/psi4 ../tests/fsapt-ext-abc-au/input.dat ; Enuc..................................................................................PASSED; Eelst.................................................................................PASSED; Eexch.................................................................................PASSED; Eind..................................................................................PASSED; Edisp.................................................................................PASSED; Etot..................................................................................PASSED; fEelst..............................................................................",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:5414,Testability,TEST,TEST,5414," mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST. import os; import sys; import subprocess. os.chdir('fsapt'); with open('fA.dat', 'w') as fA: fA.write(""w1 1 2 3""); with open('fB.dat', 'w') as fB: fB.write(""w3 4 5 6""); subprocess.run([sys.executable, os.path.join('..', 'fsapt.py')], check=True). fEnergies = {}; fkeys = ['fEelst', 'fEexch', 'fEindAB', 'fEindBA', 'fEdisp', 'fEedisp', 'fEtot'] #TEST. with open('fsapt.dat', 'r') as fsapt: #TEST; Energies = [float(x) for x in fsapt.readlines()[-2].split()[2:]] #TEST. for pair in zip(fkeys,Energies): #TEST; fEnergies[pair[0]] = pair[1] #TEST. fEref = { #TEST; 'fEelst' : -30.867, #TEST; 'fEexch' : 11.445, #TEST; 'fEindAB': -3.138, #TEST; 'fEindBA': -1.863, #TEST; 'fEdisp' : -1.754, #TEST; 'fEedisp': 0.000, #TEST; 'fEtot' : -26.177} #TEST. for key in fkeys: #TEST; compare_values(fEref[key], fEnergies[key], 2, key) #TEST; ```. ```; (py39b) psilocaluser@bash:psinet:/psi/gits/hrw-l2/objdir39b: (sept21qcdb_rb1) stage/bin/psi4 ../tests/fsapt-ext-abc-au/input.dat ; Enuc..................................................................................PASSED; Eelst.................................................................................PASSED; Eexch.................................................................................PASSED; Eind..................................................................................PASSED; Edisp.................................................................................PASSED; Etot..................................................................................PASSED; fEelst................................................................................FAILED; Traceback (most ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:5440,Testability,TEST,TEST,5440,"rgy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST. import os; import sys; import subprocess. os.chdir('fsapt'); with open('fA.dat', 'w') as fA: fA.write(""w1 1 2 3""); with open('fB.dat', 'w') as fB: fB.write(""w3 4 5 6""); subprocess.run([sys.executable, os.path.join('..', 'fsapt.py')], check=True). fEnergies = {}; fkeys = ['fEelst', 'fEexch', 'fEindAB', 'fEindBA', 'fEdisp', 'fEedisp', 'fEtot'] #TEST. with open('fsapt.dat', 'r') as fsapt: #TEST; Energies = [float(x) for x in fsapt.readlines()[-2].split()[2:]] #TEST. for pair in zip(fkeys,Energies): #TEST; fEnergies[pair[0]] = pair[1] #TEST. fEref = { #TEST; 'fEelst' : -30.867, #TEST; 'fEexch' : 11.445, #TEST; 'fEindAB': -3.138, #TEST; 'fEindBA': -1.863, #TEST; 'fEdisp' : -1.754, #TEST; 'fEedisp': 0.000, #TEST; 'fEtot' : -26.177} #TEST. for key in fkeys: #TEST; compare_values(fEref[key], fEnergies[key], 2, key) #TEST; ```. ```; (py39b) psilocaluser@bash:psinet:/psi/gits/hrw-l2/objdir39b: (sept21qcdb_rb1) stage/bin/psi4 ../tests/fsapt-ext-abc-au/input.dat ; Enuc..................................................................................PASSED; Eelst.................................................................................PASSED; Eexch.................................................................................PASSED; Eind..................................................................................PASSED; Edisp.................................................................................PASSED; Etot..................................................................................PASSED; fEelst................................................................................FAILED; Traceback (most recent call last):; File """,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:5466,Testability,TEST,TEST,5466,"ariable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST. import os; import sys; import subprocess. os.chdir('fsapt'); with open('fA.dat', 'w') as fA: fA.write(""w1 1 2 3""); with open('fB.dat', 'w') as fB: fB.write(""w3 4 5 6""); subprocess.run([sys.executable, os.path.join('..', 'fsapt.py')], check=True). fEnergies = {}; fkeys = ['fEelst', 'fEexch', 'fEindAB', 'fEindBA', 'fEdisp', 'fEedisp', 'fEtot'] #TEST. with open('fsapt.dat', 'r') as fsapt: #TEST; Energies = [float(x) for x in fsapt.readlines()[-2].split()[2:]] #TEST. for pair in zip(fkeys,Energies): #TEST; fEnergies[pair[0]] = pair[1] #TEST. fEref = { #TEST; 'fEelst' : -30.867, #TEST; 'fEexch' : 11.445, #TEST; 'fEindAB': -3.138, #TEST; 'fEindBA': -1.863, #TEST; 'fEdisp' : -1.754, #TEST; 'fEedisp': 0.000, #TEST; 'fEtot' : -26.177} #TEST. for key in fkeys: #TEST; compare_values(fEref[key], fEnergies[key], 2, key) #TEST; ```. ```; (py39b) psilocaluser@bash:psinet:/psi/gits/hrw-l2/objdir39b: (sept21qcdb_rb1) stage/bin/psi4 ../tests/fsapt-ext-abc-au/input.dat ; Enuc..................................................................................PASSED; Eelst.................................................................................PASSED; Eexch.................................................................................PASSED; Eind..................................................................................PASSED; Edisp.................................................................................PASSED; Etot..................................................................................PASSED; fEelst................................................................................FAILED; Traceback (most recent call last):; File ""/psi/gits/hrw-l2/objdir39b",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:5491,Testability,TEST,TEST,5491,"), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST. import os; import sys; import subprocess. os.chdir('fsapt'); with open('fA.dat', 'w') as fA: fA.write(""w1 1 2 3""); with open('fB.dat', 'w') as fB: fB.write(""w3 4 5 6""); subprocess.run([sys.executable, os.path.join('..', 'fsapt.py')], check=True). fEnergies = {}; fkeys = ['fEelst', 'fEexch', 'fEindAB', 'fEindBA', 'fEdisp', 'fEedisp', 'fEtot'] #TEST. with open('fsapt.dat', 'r') as fsapt: #TEST; Energies = [float(x) for x in fsapt.readlines()[-2].split()[2:]] #TEST. for pair in zip(fkeys,Energies): #TEST; fEnergies[pair[0]] = pair[1] #TEST. fEref = { #TEST; 'fEelst' : -30.867, #TEST; 'fEexch' : 11.445, #TEST; 'fEindAB': -3.138, #TEST; 'fEindBA': -1.863, #TEST; 'fEdisp' : -1.754, #TEST; 'fEedisp': 0.000, #TEST; 'fEtot' : -26.177} #TEST. for key in fkeys: #TEST; compare_values(fEref[key], fEnergies[key], 2, key) #TEST; ```. ```; (py39b) psilocaluser@bash:psinet:/psi/gits/hrw-l2/objdir39b: (sept21qcdb_rb1) stage/bin/psi4 ../tests/fsapt-ext-abc-au/input.dat ; Enuc..................................................................................PASSED; Eelst.................................................................................PASSED; Eexch.................................................................................PASSED; Eind..................................................................................PASSED; Edisp.................................................................................PASSED; Etot..................................................................................PASSED; fEelst................................................................................FAILED; Traceback (most recent call last):; File ""/psi/gits/hrw-l2/objdir39b/stage/bin/psi4"", line 33",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:5517,Testability,TEST,TEST,5517,": variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST. import os; import sys; import subprocess. os.chdir('fsapt'); with open('fA.dat', 'w') as fA: fA.write(""w1 1 2 3""); with open('fB.dat', 'w') as fB: fB.write(""w3 4 5 6""); subprocess.run([sys.executable, os.path.join('..', 'fsapt.py')], check=True). fEnergies = {}; fkeys = ['fEelst', 'fEexch', 'fEindAB', 'fEindBA', 'fEdisp', 'fEedisp', 'fEtot'] #TEST. with open('fsapt.dat', 'r') as fsapt: #TEST; Energies = [float(x) for x in fsapt.readlines()[-2].split()[2:]] #TEST. for pair in zip(fkeys,Energies): #TEST; fEnergies[pair[0]] = pair[1] #TEST. fEref = { #TEST; 'fEelst' : -30.867, #TEST; 'fEexch' : 11.445, #TEST; 'fEindAB': -3.138, #TEST; 'fEindBA': -1.863, #TEST; 'fEdisp' : -1.754, #TEST; 'fEedisp': 0.000, #TEST; 'fEtot' : -26.177} #TEST. for key in fkeys: #TEST; compare_values(fEref[key], fEnergies[key], 2, key) #TEST; ```. ```; (py39b) psilocaluser@bash:psinet:/psi/gits/hrw-l2/objdir39b: (sept21qcdb_rb1) stage/bin/psi4 ../tests/fsapt-ext-abc-au/input.dat ; Enuc..................................................................................PASSED; Eelst.................................................................................PASSED; Eexch.................................................................................PASSED; Eind..................................................................................PASSED; Edisp.................................................................................PASSED; Etot..................................................................................PASSED; fEelst................................................................................FAILED; Traceback (most recent call last):; File ""/psi/gits/hrw-l2/objdir39b/stage/bin/psi4"", line 333, in <module>; exe",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:5542,Testability,TEST,TEST,5542,"riable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST. import os; import sys; import subprocess. os.chdir('fsapt'); with open('fA.dat', 'w') as fA: fA.write(""w1 1 2 3""); with open('fB.dat', 'w') as fB: fB.write(""w3 4 5 6""); subprocess.run([sys.executable, os.path.join('..', 'fsapt.py')], check=True). fEnergies = {}; fkeys = ['fEelst', 'fEexch', 'fEindAB', 'fEindBA', 'fEdisp', 'fEedisp', 'fEtot'] #TEST. with open('fsapt.dat', 'r') as fsapt: #TEST; Energies = [float(x) for x in fsapt.readlines()[-2].split()[2:]] #TEST. for pair in zip(fkeys,Energies): #TEST; fEnergies[pair[0]] = pair[1] #TEST. fEref = { #TEST; 'fEelst' : -30.867, #TEST; 'fEexch' : 11.445, #TEST; 'fEindAB': -3.138, #TEST; 'fEindBA': -1.863, #TEST; 'fEdisp' : -1.754, #TEST; 'fEedisp': 0.000, #TEST; 'fEtot' : -26.177} #TEST. for key in fkeys: #TEST; compare_values(fEref[key], fEnergies[key], 2, key) #TEST; ```. ```; (py39b) psilocaluser@bash:psinet:/psi/gits/hrw-l2/objdir39b: (sept21qcdb_rb1) stage/bin/psi4 ../tests/fsapt-ext-abc-au/input.dat ; Enuc..................................................................................PASSED; Eelst.................................................................................PASSED; Eexch.................................................................................PASSED; Eind..................................................................................PASSED; Edisp.................................................................................PASSED; Etot..................................................................................PASSED; fEelst................................................................................FAILED; Traceback (most recent call last):; File ""/psi/gits/hrw-l2/objdir39b/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 101, in <module",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:5600,Testability,TEST,TEST,5600,"riable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST. import os; import sys; import subprocess. os.chdir('fsapt'); with open('fA.dat', 'w') as fA: fA.write(""w1 1 2 3""); with open('fB.dat', 'w') as fB: fB.write(""w3 4 5 6""); subprocess.run([sys.executable, os.path.join('..', 'fsapt.py')], check=True). fEnergies = {}; fkeys = ['fEelst', 'fEexch', 'fEindAB', 'fEindBA', 'fEdisp', 'fEedisp', 'fEtot'] #TEST. with open('fsapt.dat', 'r') as fsapt: #TEST; Energies = [float(x) for x in fsapt.readlines()[-2].split()[2:]] #TEST. for pair in zip(fkeys,Energies): #TEST; fEnergies[pair[0]] = pair[1] #TEST. fEref = { #TEST; 'fEelst' : -30.867, #TEST; 'fEexch' : 11.445, #TEST; 'fEindAB': -3.138, #TEST; 'fEindBA': -1.863, #TEST; 'fEdisp' : -1.754, #TEST; 'fEedisp': 0.000, #TEST; 'fEtot' : -26.177} #TEST. for key in fkeys: #TEST; compare_values(fEref[key], fEnergies[key], 2, key) #TEST; ```. ```; (py39b) psilocaluser@bash:psinet:/psi/gits/hrw-l2/objdir39b: (sept21qcdb_rb1) stage/bin/psi4 ../tests/fsapt-ext-abc-au/input.dat ; Enuc..................................................................................PASSED; Eelst.................................................................................PASSED; Eexch.................................................................................PASSED; Eind..................................................................................PASSED; Edisp.................................................................................PASSED; Etot..................................................................................PASSED; fEelst................................................................................FAILED; Traceback (most recent call last):; File ""/psi/gits/hrw-l2/objdir39b/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 101, in <module",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:5712,Testability,test,tests,5712,"; compare_values(Eref[key], Epsi[key], 6, key) #TEST. import os; import sys; import subprocess. os.chdir('fsapt'); with open('fA.dat', 'w') as fA: fA.write(""w1 1 2 3""); with open('fB.dat', 'w') as fB: fB.write(""w3 4 5 6""); subprocess.run([sys.executable, os.path.join('..', 'fsapt.py')], check=True). fEnergies = {}; fkeys = ['fEelst', 'fEexch', 'fEindAB', 'fEindBA', 'fEdisp', 'fEedisp', 'fEtot'] #TEST. with open('fsapt.dat', 'r') as fsapt: #TEST; Energies = [float(x) for x in fsapt.readlines()[-2].split()[2:]] #TEST. for pair in zip(fkeys,Energies): #TEST; fEnergies[pair[0]] = pair[1] #TEST. fEref = { #TEST; 'fEelst' : -30.867, #TEST; 'fEexch' : 11.445, #TEST; 'fEindAB': -3.138, #TEST; 'fEindBA': -1.863, #TEST; 'fEdisp' : -1.754, #TEST; 'fEedisp': 0.000, #TEST; 'fEtot' : -26.177} #TEST. for key in fkeys: #TEST; compare_values(fEref[key], fEnergies[key], 2, key) #TEST; ```. ```; (py39b) psilocaluser@bash:psinet:/psi/gits/hrw-l2/objdir39b: (sept21qcdb_rb1) stage/bin/psi4 ../tests/fsapt-ext-abc-au/input.dat ; Enuc..................................................................................PASSED; Eelst.................................................................................PASSED; Eexch.................................................................................PASSED; Eind..................................................................................PASSED; Edisp.................................................................................PASSED; Etot..................................................................................PASSED; fEelst................................................................................FAILED; Traceback (most recent call last):; File ""/psi/gits/hrw-l2/objdir39b/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 101, in <module>; File ""/psi/gits/hrw-l2/objdir39b/stage/lib/psi4/driver/qcdb/testing.py"", line 104, in _mergedapis_compare_values; return qcel.testing.compare_values(expected",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:6629,Testability,test,testing,6629,"TEST. for key in fkeys: #TEST; compare_values(fEref[key], fEnergies[key], 2, key) #TEST; ```. ```; (py39b) psilocaluser@bash:psinet:/psi/gits/hrw-l2/objdir39b: (sept21qcdb_rb1) stage/bin/psi4 ../tests/fsapt-ext-abc-au/input.dat ; Enuc..................................................................................PASSED; Eelst.................................................................................PASSED; Eexch.................................................................................PASSED; Eind..................................................................................PASSED; Edisp.................................................................................PASSED; Etot..................................................................................PASSED; fEelst................................................................................FAILED; Traceback (most recent call last):; File ""/psi/gits/hrw-l2/objdir39b/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 101, in <module>; File ""/psi/gits/hrw-l2/objdir39b/stage/lib/psi4/driver/qcdb/testing.py"", line 104, in _mergedapis_compare_values; return qcel.testing.compare_values(expected, computed, **kwargs); File ""/psi/gits/QCElemental/qcelemental/testing.py"", line 178, in compare_values; return return_handler(allclose, label, message, return_message, quiet); File ""/psi/gits/hrw-l2/objdir39b/stage/lib/psi4/driver/p4util/testing.py"", line 189, in _psi4_true_raise_handler; raise TestComparisonError(message). psi4.driver.p4util.exceptions.TestComparisonError: 	fEelst: computed value (-58.7150) does not match (-30.8670) to atol=0.01 by difference (-27.8480). ```. ```; (py39b) psilocaluser@bash:psinet:/psi/gits/hrw-l2/objdir39b: (sept21qcdb_rb1) diff -bwy -W 200 tests/fsapt-ext-abc/fsapt/fsapt.dat tests/fsapt-ext-abc-au/fsapt/fsapt.dat ; ==> F-ISAPT: Links by Charge <==									 ==> F-ISAPT: Links by Charge <==. => Full Analysis <=											 => Full Analysis <=. Fra",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:6695,Testability,test,testing,6695,"/bin/psi4 ../tests/fsapt-ext-abc-au/input.dat ; Enuc..................................................................................PASSED; Eelst.................................................................................PASSED; Eexch.................................................................................PASSED; Eind..................................................................................PASSED; Edisp.................................................................................PASSED; Etot..................................................................................PASSED; fEelst................................................................................FAILED; Traceback (most recent call last):; File ""/psi/gits/hrw-l2/objdir39b/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 101, in <module>; File ""/psi/gits/hrw-l2/objdir39b/stage/lib/psi4/driver/qcdb/testing.py"", line 104, in _mergedapis_compare_values; return qcel.testing.compare_values(expected, computed, **kwargs); File ""/psi/gits/QCElemental/qcelemental/testing.py"", line 178, in compare_values; return return_handler(allclose, label, message, return_message, quiet); File ""/psi/gits/hrw-l2/objdir39b/stage/lib/psi4/driver/p4util/testing.py"", line 189, in _psi4_true_raise_handler; raise TestComparisonError(message). psi4.driver.p4util.exceptions.TestComparisonError: 	fEelst: computed value (-58.7150) does not match (-30.8670) to atol=0.01 by difference (-27.8480). ```. ```; (py39b) psilocaluser@bash:psinet:/psi/gits/hrw-l2/objdir39b: (sept21qcdb_rb1) diff -bwy -W 200 tests/fsapt-ext-abc/fsapt/fsapt.dat tests/fsapt-ext-abc-au/fsapt/fsapt.dat ; ==> F-ISAPT: Links by Charge <==									 ==> F-ISAPT: Links by Charge <==. => Full Analysis <=											 => Full Analysis <=. Frag1 Frag2 Elst Exch IndAB IndBA Disp EDisp Total 			Frag1 Frag2 Elst Exch IndAB IndBA Disp EDisp Total ; w1 w3 -8.745 11.445 -2.245 -0.663 -1.754 0.000 -1.961 			w1 w3 -8.745 11.445 -",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:6789,Testability,test,testing,6789,"c..................................................................................PASSED; Eelst.................................................................................PASSED; Eexch.................................................................................PASSED; Eind..................................................................................PASSED; Edisp.................................................................................PASSED; Etot..................................................................................PASSED; fEelst................................................................................FAILED; Traceback (most recent call last):; File ""/psi/gits/hrw-l2/objdir39b/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 101, in <module>; File ""/psi/gits/hrw-l2/objdir39b/stage/lib/psi4/driver/qcdb/testing.py"", line 104, in _mergedapis_compare_values; return qcel.testing.compare_values(expected, computed, **kwargs); File ""/psi/gits/QCElemental/qcelemental/testing.py"", line 178, in compare_values; return return_handler(allclose, label, message, return_message, quiet); File ""/psi/gits/hrw-l2/objdir39b/stage/lib/psi4/driver/p4util/testing.py"", line 189, in _psi4_true_raise_handler; raise TestComparisonError(message). psi4.driver.p4util.exceptions.TestComparisonError: 	fEelst: computed value (-58.7150) does not match (-30.8670) to atol=0.01 by difference (-27.8480). ```. ```; (py39b) psilocaluser@bash:psinet:/psi/gits/hrw-l2/objdir39b: (sept21qcdb_rb1) diff -bwy -W 200 tests/fsapt-ext-abc/fsapt/fsapt.dat tests/fsapt-ext-abc-au/fsapt/fsapt.dat ; ==> F-ISAPT: Links by Charge <==									 ==> F-ISAPT: Links by Charge <==. => Full Analysis <=											 => Full Analysis <=. Frag1 Frag2 Elst Exch IndAB IndBA Disp EDisp Total 			Frag1 Frag2 Elst Exch IndAB IndBA Disp EDisp Total ; w1 w3 -8.745 11.445 -2.245 -0.663 -1.754 0.000 -1.961 			w1 w3 -8.745 11.445 -2.245 -0.663 -1.754 0.000 -1.961 ; w1 Extern-B -6.4",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:6965,Testability,test,testing,6965,"..........................................PASSED; Eexch.................................................................................PASSED; Eind..................................................................................PASSED; Edisp.................................................................................PASSED; Etot..................................................................................PASSED; fEelst................................................................................FAILED; Traceback (most recent call last):; File ""/psi/gits/hrw-l2/objdir39b/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 101, in <module>; File ""/psi/gits/hrw-l2/objdir39b/stage/lib/psi4/driver/qcdb/testing.py"", line 104, in _mergedapis_compare_values; return qcel.testing.compare_values(expected, computed, **kwargs); File ""/psi/gits/QCElemental/qcelemental/testing.py"", line 178, in compare_values; return return_handler(allclose, label, message, return_message, quiet); File ""/psi/gits/hrw-l2/objdir39b/stage/lib/psi4/driver/p4util/testing.py"", line 189, in _psi4_true_raise_handler; raise TestComparisonError(message). psi4.driver.p4util.exceptions.TestComparisonError: 	fEelst: computed value (-58.7150) does not match (-30.8670) to atol=0.01 by difference (-27.8480). ```. ```; (py39b) psilocaluser@bash:psinet:/psi/gits/hrw-l2/objdir39b: (sept21qcdb_rb1) diff -bwy -W 200 tests/fsapt-ext-abc/fsapt/fsapt.dat tests/fsapt-ext-abc-au/fsapt/fsapt.dat ; ==> F-ISAPT: Links by Charge <==									 ==> F-ISAPT: Links by Charge <==. => Full Analysis <=											 => Full Analysis <=. Frag1 Frag2 Elst Exch IndAB IndBA Disp EDisp Total 			Frag1 Frag2 Elst Exch IndAB IndBA Disp EDisp Total ; w1 w3 -8.745 11.445 -2.245 -0.663 -1.754 0.000 -1.961 			w1 w3 -8.745 11.445 -2.245 -0.663 -1.754 0.000 -1.961 ; w1 Extern-B -6.448 0.000 -0.893 0.000 0.000 0.000 -7.342 		 |	w1 Extern-B 59.651 0.000 -0.893 0.000 0.000 0.000 58.757 ; Extern-A w3 -9.800 0.000 0.000",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:7023,Testability,Test,TestComparisonError,7023,".........PASSED; Eind..................................................................................PASSED; Edisp.................................................................................PASSED; Etot..................................................................................PASSED; fEelst................................................................................FAILED; Traceback (most recent call last):; File ""/psi/gits/hrw-l2/objdir39b/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 101, in <module>; File ""/psi/gits/hrw-l2/objdir39b/stage/lib/psi4/driver/qcdb/testing.py"", line 104, in _mergedapis_compare_values; return qcel.testing.compare_values(expected, computed, **kwargs); File ""/psi/gits/QCElemental/qcelemental/testing.py"", line 178, in compare_values; return return_handler(allclose, label, message, return_message, quiet); File ""/psi/gits/hrw-l2/objdir39b/stage/lib/psi4/driver/p4util/testing.py"", line 189, in _psi4_true_raise_handler; raise TestComparisonError(message). psi4.driver.p4util.exceptions.TestComparisonError: 	fEelst: computed value (-58.7150) does not match (-30.8670) to atol=0.01 by difference (-27.8480). ```. ```; (py39b) psilocaluser@bash:psinet:/psi/gits/hrw-l2/objdir39b: (sept21qcdb_rb1) diff -bwy -W 200 tests/fsapt-ext-abc/fsapt/fsapt.dat tests/fsapt-ext-abc-au/fsapt/fsapt.dat ; ==> F-ISAPT: Links by Charge <==									 ==> F-ISAPT: Links by Charge <==. => Full Analysis <=											 => Full Analysis <=. Frag1 Frag2 Elst Exch IndAB IndBA Disp EDisp Total 			Frag1 Frag2 Elst Exch IndAB IndBA Disp EDisp Total ; w1 w3 -8.745 11.445 -2.245 -0.663 -1.754 0.000 -1.961 			w1 w3 -8.745 11.445 -2.245 -0.663 -1.754 0.000 -1.961 ; w1 Extern-B -6.448 0.000 -0.893 0.000 0.000 0.000 -7.342 		 |	w1 Extern-B 59.651 0.000 -0.893 0.000 0.000 0.000 58.757 ; Extern-A w3 -9.800 0.000 0.000 -1.200 0.000 0.000 -11.000 		 |	Extern-A w3 -103.747 0.000 0.000 -1.200 0.000 0.000 -104.947 ; Extern-A Extern-B -5.874 0.000 0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:7083,Testability,Test,TestComparisonError,7083,".......PASSED; Edisp.................................................................................PASSED; Etot..................................................................................PASSED; fEelst................................................................................FAILED; Traceback (most recent call last):; File ""/psi/gits/hrw-l2/objdir39b/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 101, in <module>; File ""/psi/gits/hrw-l2/objdir39b/stage/lib/psi4/driver/qcdb/testing.py"", line 104, in _mergedapis_compare_values; return qcel.testing.compare_values(expected, computed, **kwargs); File ""/psi/gits/QCElemental/qcelemental/testing.py"", line 178, in compare_values; return return_handler(allclose, label, message, return_message, quiet); File ""/psi/gits/hrw-l2/objdir39b/stage/lib/psi4/driver/p4util/testing.py"", line 189, in _psi4_true_raise_handler; raise TestComparisonError(message). psi4.driver.p4util.exceptions.TestComparisonError: 	fEelst: computed value (-58.7150) does not match (-30.8670) to atol=0.01 by difference (-27.8480). ```. ```; (py39b) psilocaluser@bash:psinet:/psi/gits/hrw-l2/objdir39b: (sept21qcdb_rb1) diff -bwy -W 200 tests/fsapt-ext-abc/fsapt/fsapt.dat tests/fsapt-ext-abc-au/fsapt/fsapt.dat ; ==> F-ISAPT: Links by Charge <==									 ==> F-ISAPT: Links by Charge <==. => Full Analysis <=											 => Full Analysis <=. Frag1 Frag2 Elst Exch IndAB IndBA Disp EDisp Total 			Frag1 Frag2 Elst Exch IndAB IndBA Disp EDisp Total ; w1 w3 -8.745 11.445 -2.245 -0.663 -1.754 0.000 -1.961 			w1 w3 -8.745 11.445 -2.245 -0.663 -1.754 0.000 -1.961 ; w1 Extern-B -6.448 0.000 -0.893 0.000 0.000 0.000 -7.342 		 |	w1 Extern-B 59.651 0.000 -0.893 0.000 0.000 0.000 58.757 ; Extern-A w3 -9.800 0.000 0.000 -1.200 0.000 0.000 -11.000 		 |	Extern-A w3 -103.747 0.000 0.000 -1.200 0.000 0.000 -104.947 ; Extern-A Extern-B -5.874 0.000 0.000 0.000 0.000 0.000 -5.874 			Extern-A Extern-B -5.874 0.000 0.000 0.000 0.000 0.000 -5.874 ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:7309,Testability,test,tests,7309,".............................PASSED; fEelst................................................................................FAILED; Traceback (most recent call last):; File ""/psi/gits/hrw-l2/objdir39b/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 101, in <module>; File ""/psi/gits/hrw-l2/objdir39b/stage/lib/psi4/driver/qcdb/testing.py"", line 104, in _mergedapis_compare_values; return qcel.testing.compare_values(expected, computed, **kwargs); File ""/psi/gits/QCElemental/qcelemental/testing.py"", line 178, in compare_values; return return_handler(allclose, label, message, return_message, quiet); File ""/psi/gits/hrw-l2/objdir39b/stage/lib/psi4/driver/p4util/testing.py"", line 189, in _psi4_true_raise_handler; raise TestComparisonError(message). psi4.driver.p4util.exceptions.TestComparisonError: 	fEelst: computed value (-58.7150) does not match (-30.8670) to atol=0.01 by difference (-27.8480). ```. ```; (py39b) psilocaluser@bash:psinet:/psi/gits/hrw-l2/objdir39b: (sept21qcdb_rb1) diff -bwy -W 200 tests/fsapt-ext-abc/fsapt/fsapt.dat tests/fsapt-ext-abc-au/fsapt/fsapt.dat ; ==> F-ISAPT: Links by Charge <==									 ==> F-ISAPT: Links by Charge <==. => Full Analysis <=											 => Full Analysis <=. Frag1 Frag2 Elst Exch IndAB IndBA Disp EDisp Total 			Frag1 Frag2 Elst Exch IndAB IndBA Disp EDisp Total ; w1 w3 -8.745 11.445 -2.245 -0.663 -1.754 0.000 -1.961 			w1 w3 -8.745 11.445 -2.245 -0.663 -1.754 0.000 -1.961 ; w1 Extern-B -6.448 0.000 -0.893 0.000 0.000 0.000 -7.342 		 |	w1 Extern-B 59.651 0.000 -0.893 0.000 0.000 0.000 58.757 ; Extern-A w3 -9.800 0.000 0.000 -1.200 0.000 0.000 -11.000 		 |	Extern-A w3 -103.747 0.000 0.000 -1.200 0.000 0.000 -104.947 ; Extern-A Extern-B -5.874 0.000 0.000 0.000 0.000 0.000 -5.874 			Extern-A Extern-B -5.874 0.000 0.000 0.000 0.000 0.000 -5.874 ; w1 All -15.193 11.445 -3.138 -0.663 -1.754 0.000 -9.303 		 |	w1 All 50.906 11.445 -3.138 -0.663 -1.754 0.000 56.796 ; Extern-A All -15.674 0.000 0.000 -1.200 0.000 0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:7345,Testability,test,tests,7345,".....................................FAILED; Traceback (most recent call last):; File ""/psi/gits/hrw-l2/objdir39b/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 101, in <module>; File ""/psi/gits/hrw-l2/objdir39b/stage/lib/psi4/driver/qcdb/testing.py"", line 104, in _mergedapis_compare_values; return qcel.testing.compare_values(expected, computed, **kwargs); File ""/psi/gits/QCElemental/qcelemental/testing.py"", line 178, in compare_values; return return_handler(allclose, label, message, return_message, quiet); File ""/psi/gits/hrw-l2/objdir39b/stage/lib/psi4/driver/p4util/testing.py"", line 189, in _psi4_true_raise_handler; raise TestComparisonError(message). psi4.driver.p4util.exceptions.TestComparisonError: 	fEelst: computed value (-58.7150) does not match (-30.8670) to atol=0.01 by difference (-27.8480). ```. ```; (py39b) psilocaluser@bash:psinet:/psi/gits/hrw-l2/objdir39b: (sept21qcdb_rb1) diff -bwy -W 200 tests/fsapt-ext-abc/fsapt/fsapt.dat tests/fsapt-ext-abc-au/fsapt/fsapt.dat ; ==> F-ISAPT: Links by Charge <==									 ==> F-ISAPT: Links by Charge <==. => Full Analysis <=											 => Full Analysis <=. Frag1 Frag2 Elst Exch IndAB IndBA Disp EDisp Total 			Frag1 Frag2 Elst Exch IndAB IndBA Disp EDisp Total ; w1 w3 -8.745 11.445 -2.245 -0.663 -1.754 0.000 -1.961 			w1 w3 -8.745 11.445 -2.245 -0.663 -1.754 0.000 -1.961 ; w1 Extern-B -6.448 0.000 -0.893 0.000 0.000 0.000 -7.342 		 |	w1 Extern-B 59.651 0.000 -0.893 0.000 0.000 0.000 58.757 ; Extern-A w3 -9.800 0.000 0.000 -1.200 0.000 0.000 -11.000 		 |	Extern-A w3 -103.747 0.000 0.000 -1.200 0.000 0.000 -104.947 ; Extern-A Extern-B -5.874 0.000 0.000 0.000 0.000 0.000 -5.874 			Extern-A Extern-B -5.874 0.000 0.000 0.000 0.000 0.000 -5.874 ; w1 All -15.193 11.445 -3.138 -0.663 -1.754 0.000 -9.303 		 |	w1 All 50.906 11.445 -3.138 -0.663 -1.754 0.000 56.796 ; Extern-A All -15.674 0.000 0.000 -1.200 0.000 0.000 -16.874 		 |	Extern-A All -109.621 0.000 0.000 -1.200 0.000 0.000 -110.821 ; All ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/issues/2330:725,Usability,clear,clear,725,"This is a follow-up to #1608 (fisapt + external potentials). There might be something wrong when the molecule is specified in bohr. I'm not sure, so I thought I'd query @alenaizan and @CDSherrill about how suspicious the below makes you, and how likely you would have been to catch this in the testing process. First things, the `ExternalPotential.charges_` (holding charge and position) stores positions in the units of the molecule. For consistency for functions on the class, it translates the internal data to bohr before computing. This printing label https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/extern.cc#L70 is wrong (for positions; ok for charges). These comments suggest this might not have been clear in the earlier PR https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/extern.cc#L414-L416 and might have ramifications here https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fisapt/fisapt.cc#L730-L735 . When I rewrite the fsapt-ext-abc test case so that the molecule and charges are again consistent in Bohr (below), the overall passes but the fragments don't. Also below is the fsapt.dat differences. Again, I can well believe that I'm doing something wrong or that the `fsapt.py` machinery has some built-in unit assumptions, but I'm glad of any input or we-checked-that information. The reason it's coming up now is that DDD ""fixes"" this peculiarity of `ExternalPotential` and _only_ stores the charge positions in Bohr. ```; memory 1 GB. # water prism: https://science.sciencemag.org/content/sci/suppl/2012/05/16/336.6083.897.DC1/Perez_SM.pdf; # Table S43. #mol = psi4.core.Molecule.from_arrays(; # elez=[1, 8, 1, 1, 8, 1, 1, 8, 1],; # fragment_separators=[3, 6],; # fix_com=True,; # fix_orientation=True,; # fix_symmetry='c1',; # geom=np.array([; # 0.0290, -1.1199, -1.5243,; # 0.9481, -1.3990, -1.3587,; # 1.4371, -0.5588, -1.3099,; # 1.0088, -1.5240, 0.5086,; # 1.0209, -1.1732, 1.4270,; # 1.5864, -0.3901, 1.3101,; # -1.0231, 1.6243, -0.8743,; #",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2330
https://github.com/psi4/psi4/pull/2331:44,Availability,error,error,44,## Description; Fix #2330. There was a unit error when the molecule is specified in Bohr. Now the fisapt-ext-abc test case and the modified script in #2330 give the same answer. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2331
https://github.com/psi4/psi4/pull/2331:113,Testability,test,test,113,## Description; Fix #2330. There was a unit error when the molecule is specified in Bohr. Now the fisapt-ext-abc test case and the modified script in #2330 give the same answer. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2331
https://github.com/psi4/psi4/pull/2331:229,Testability,Test,Tests,229,## Description; Fix #2330. There was a unit error when the molecule is specified in Bohr. Now the fisapt-ext-abc test case and the modified script in #2330 give the same answer. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2331
https://github.com/psi4/psi4/pull/2331:303,Testability,test,tests,303,## Description; Fix #2330. There was a unit error when the molecule is specified in Bohr. Now the fisapt-ext-abc test case and the modified script in #2330 give the same answer. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2331
https://github.com/psi4/psi4/pull/2331:394,Testability,test,tests,394,## Description; Fix #2330. There was a unit error when the molecule is specified in Bohr. Now the fisapt-ext-abc test case and the modified script in #2330 give the same answer. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2331
https://github.com/psi4/psi4/pull/2332:97,Testability,test,tests,97,## Description / Todos. Miscellanea I found during an independent PR. - [x] Added `fsapt` tag to tests; - [x] Cleanup in `fsapt` - more use of auto and specialized`libmints` functions. ## Checklist; - [x] `fsapt` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2332
https://github.com/psi4/psi4/pull/2332:213,Testability,test,tests,213,## Description / Todos. Miscellanea I found during an independent PR. - [x] Added `fsapt` tag to tests; - [x] Cleanup in `fsapt` - more use of auto and specialized`libmints` functions. ## Checklist; - [x] `fsapt` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2332
https://github.com/psi4/psi4/issues/2333:361,Availability,avail,available,361,"This is a short summary on how to get started with PSI4 and Apple Silicon; ---. Overview:. - Python/Package management options:; - osx-arm64 conda-forge environment: https://github.com/conda-forge/miniforge (untested, limited packages); - homebrew . - BLAS/LAPACK options: ; - Apple's Accelerate: very fast, no inherent threading. But thread-safe.; - OpenBLAS: available on conda-forge and homebrew. _No optimized kernels for M1_. Much slower than Accelerate Framework. (see https://github.com/xianyi/OpenBLAS/issues/2814); - ???; ---. ## homebrew:; requirred brew packages: `cmake eigen numpy`; for OpenMP: `libomp`; optional: `doxygen jupyterlab pytest gcc` (gcc to get a Fortran compiler); Note: numpy will come with a non-threading OpenBLAS library. ### psi4 python packages:; - `pip3 install pydantic pint py-cpuinfo psutil`. ### docs:; - pip3 install Sphinx nbsphinx python-graphviz sphinx-autodoc-typehints sphinx-automodapi ; - custom theme from `git clone https://github.com/psi4/sphinx-psi-theme.git` (`pip3 install .`); - dont get `sphinx-doc` from brew, it has python3.10 dependency. ### basic build with Accelerate Framework and homebrew python:; - `cmake -H. -Bobjdir -DPython_EXECUTABLE=/opt/homebrew/bin/python3 -DCMAKE_INSTALL_PREFIX=<custom>`; - `export CPLUS_INCLUDE_PATH=/opt/homebrew/include` (for libint2 to find a header); - If `libomp` is found correctly, OpenMP is enabled but only explicit C-side openmp sections are threaded AFAIK, not blas.; - builds everything from scratch and _wow it's fast!_. ### caveats; - Mismatch between numpy(=openblas) and psi4(=Accelerate) libraries.; ---; I may have missed a detail.. These notes will be updated over time.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2333
https://github.com/psi4/psi4/issues/2333:789,Deployability,install,install,789,"This is a short summary on how to get started with PSI4 and Apple Silicon; ---. Overview:. - Python/Package management options:; - osx-arm64 conda-forge environment: https://github.com/conda-forge/miniforge (untested, limited packages); - homebrew . - BLAS/LAPACK options: ; - Apple's Accelerate: very fast, no inherent threading. But thread-safe.; - OpenBLAS: available on conda-forge and homebrew. _No optimized kernels for M1_. Much slower than Accelerate Framework. (see https://github.com/xianyi/OpenBLAS/issues/2814); - ???; ---. ## homebrew:; requirred brew packages: `cmake eigen numpy`; for OpenMP: `libomp`; optional: `doxygen jupyterlab pytest gcc` (gcc to get a Fortran compiler); Note: numpy will come with a non-threading OpenBLAS library. ### psi4 python packages:; - `pip3 install pydantic pint py-cpuinfo psutil`. ### docs:; - pip3 install Sphinx nbsphinx python-graphviz sphinx-autodoc-typehints sphinx-automodapi ; - custom theme from `git clone https://github.com/psi4/sphinx-psi-theme.git` (`pip3 install .`); - dont get `sphinx-doc` from brew, it has python3.10 dependency. ### basic build with Accelerate Framework and homebrew python:; - `cmake -H. -Bobjdir -DPython_EXECUTABLE=/opt/homebrew/bin/python3 -DCMAKE_INSTALL_PREFIX=<custom>`; - `export CPLUS_INCLUDE_PATH=/opt/homebrew/include` (for libint2 to find a header); - If `libomp` is found correctly, OpenMP is enabled but only explicit C-side openmp sections are threaded AFAIK, not blas.; - builds everything from scratch and _wow it's fast!_. ### caveats; - Mismatch between numpy(=openblas) and psi4(=Accelerate) libraries.; ---; I may have missed a detail.. These notes will be updated over time.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2333
https://github.com/psi4/psi4/issues/2333:849,Deployability,install,install,849,"This is a short summary on how to get started with PSI4 and Apple Silicon; ---. Overview:. - Python/Package management options:; - osx-arm64 conda-forge environment: https://github.com/conda-forge/miniforge (untested, limited packages); - homebrew . - BLAS/LAPACK options: ; - Apple's Accelerate: very fast, no inherent threading. But thread-safe.; - OpenBLAS: available on conda-forge and homebrew. _No optimized kernels for M1_. Much slower than Accelerate Framework. (see https://github.com/xianyi/OpenBLAS/issues/2814); - ???; ---. ## homebrew:; requirred brew packages: `cmake eigen numpy`; for OpenMP: `libomp`; optional: `doxygen jupyterlab pytest gcc` (gcc to get a Fortran compiler); Note: numpy will come with a non-threading OpenBLAS library. ### psi4 python packages:; - `pip3 install pydantic pint py-cpuinfo psutil`. ### docs:; - pip3 install Sphinx nbsphinx python-graphviz sphinx-autodoc-typehints sphinx-automodapi ; - custom theme from `git clone https://github.com/psi4/sphinx-psi-theme.git` (`pip3 install .`); - dont get `sphinx-doc` from brew, it has python3.10 dependency. ### basic build with Accelerate Framework and homebrew python:; - `cmake -H. -Bobjdir -DPython_EXECUTABLE=/opt/homebrew/bin/python3 -DCMAKE_INSTALL_PREFIX=<custom>`; - `export CPLUS_INCLUDE_PATH=/opt/homebrew/include` (for libint2 to find a header); - If `libomp` is found correctly, OpenMP is enabled but only explicit C-side openmp sections are threaded AFAIK, not blas.; - builds everything from scratch and _wow it's fast!_. ### caveats; - Mismatch between numpy(=openblas) and psi4(=Accelerate) libraries.; ---; I may have missed a detail.. These notes will be updated over time.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2333
https://github.com/psi4/psi4/issues/2333:1018,Deployability,install,install,1018,"This is a short summary on how to get started with PSI4 and Apple Silicon; ---. Overview:. - Python/Package management options:; - osx-arm64 conda-forge environment: https://github.com/conda-forge/miniforge (untested, limited packages); - homebrew . - BLAS/LAPACK options: ; - Apple's Accelerate: very fast, no inherent threading. But thread-safe.; - OpenBLAS: available on conda-forge and homebrew. _No optimized kernels for M1_. Much slower than Accelerate Framework. (see https://github.com/xianyi/OpenBLAS/issues/2814); - ???; ---. ## homebrew:; requirred brew packages: `cmake eigen numpy`; for OpenMP: `libomp`; optional: `doxygen jupyterlab pytest gcc` (gcc to get a Fortran compiler); Note: numpy will come with a non-threading OpenBLAS library. ### psi4 python packages:; - `pip3 install pydantic pint py-cpuinfo psutil`. ### docs:; - pip3 install Sphinx nbsphinx python-graphviz sphinx-autodoc-typehints sphinx-automodapi ; - custom theme from `git clone https://github.com/psi4/sphinx-psi-theme.git` (`pip3 install .`); - dont get `sphinx-doc` from brew, it has python3.10 dependency. ### basic build with Accelerate Framework and homebrew python:; - `cmake -H. -Bobjdir -DPython_EXECUTABLE=/opt/homebrew/bin/python3 -DCMAKE_INSTALL_PREFIX=<custom>`; - `export CPLUS_INCLUDE_PATH=/opt/homebrew/include` (for libint2 to find a header); - If `libomp` is found correctly, OpenMP is enabled but only explicit C-side openmp sections are threaded AFAIK, not blas.; - builds everything from scratch and _wow it's fast!_. ### caveats; - Mismatch between numpy(=openblas) and psi4(=Accelerate) libraries.; ---; I may have missed a detail.. These notes will be updated over time.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2333
https://github.com/psi4/psi4/issues/2333:1662,Deployability,update,updated,1662,"This is a short summary on how to get started with PSI4 and Apple Silicon; ---. Overview:. - Python/Package management options:; - osx-arm64 conda-forge environment: https://github.com/conda-forge/miniforge (untested, limited packages); - homebrew . - BLAS/LAPACK options: ; - Apple's Accelerate: very fast, no inherent threading. But thread-safe.; - OpenBLAS: available on conda-forge and homebrew. _No optimized kernels for M1_. Much slower than Accelerate Framework. (see https://github.com/xianyi/OpenBLAS/issues/2814); - ???; ---. ## homebrew:; requirred brew packages: `cmake eigen numpy`; for OpenMP: `libomp`; optional: `doxygen jupyterlab pytest gcc` (gcc to get a Fortran compiler); Note: numpy will come with a non-threading OpenBLAS library. ### psi4 python packages:; - `pip3 install pydantic pint py-cpuinfo psutil`. ### docs:; - pip3 install Sphinx nbsphinx python-graphviz sphinx-autodoc-typehints sphinx-automodapi ; - custom theme from `git clone https://github.com/psi4/sphinx-psi-theme.git` (`pip3 install .`); - dont get `sphinx-doc` from brew, it has python3.10 dependency. ### basic build with Accelerate Framework and homebrew python:; - `cmake -H. -Bobjdir -DPython_EXECUTABLE=/opt/homebrew/bin/python3 -DCMAKE_INSTALL_PREFIX=<custom>`; - `export CPLUS_INCLUDE_PATH=/opt/homebrew/include` (for libint2 to find a header); - If `libomp` is found correctly, OpenMP is enabled but only explicit C-side openmp sections are threaded AFAIK, not blas.; - builds everything from scratch and _wow it's fast!_. ### caveats; - Mismatch between numpy(=openblas) and psi4(=Accelerate) libraries.; ---; I may have missed a detail.. These notes will be updated over time.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2333
https://github.com/psi4/psi4/issues/2333:1084,Integrability,depend,dependency,1084,"This is a short summary on how to get started with PSI4 and Apple Silicon; ---. Overview:. - Python/Package management options:; - osx-arm64 conda-forge environment: https://github.com/conda-forge/miniforge (untested, limited packages); - homebrew . - BLAS/LAPACK options: ; - Apple's Accelerate: very fast, no inherent threading. But thread-safe.; - OpenBLAS: available on conda-forge and homebrew. _No optimized kernels for M1_. Much slower than Accelerate Framework. (see https://github.com/xianyi/OpenBLAS/issues/2814); - ???; ---. ## homebrew:; requirred brew packages: `cmake eigen numpy`; for OpenMP: `libomp`; optional: `doxygen jupyterlab pytest gcc` (gcc to get a Fortran compiler); Note: numpy will come with a non-threading OpenBLAS library. ### psi4 python packages:; - `pip3 install pydantic pint py-cpuinfo psutil`. ### docs:; - pip3 install Sphinx nbsphinx python-graphviz sphinx-autodoc-typehints sphinx-automodapi ; - custom theme from `git clone https://github.com/psi4/sphinx-psi-theme.git` (`pip3 install .`); - dont get `sphinx-doc` from brew, it has python3.10 dependency. ### basic build with Accelerate Framework and homebrew python:; - `cmake -H. -Bobjdir -DPython_EXECUTABLE=/opt/homebrew/bin/python3 -DCMAKE_INSTALL_PREFIX=<custom>`; - `export CPLUS_INCLUDE_PATH=/opt/homebrew/include` (for libint2 to find a header); - If `libomp` is found correctly, OpenMP is enabled but only explicit C-side openmp sections are threaded AFAIK, not blas.; - builds everything from scratch and _wow it's fast!_. ### caveats; - Mismatch between numpy(=openblas) and psi4(=Accelerate) libraries.; ---; I may have missed a detail.. These notes will be updated over time.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2333
https://github.com/psi4/psi4/issues/2333:404,Performance,optimiz,optimized,404,"This is a short summary on how to get started with PSI4 and Apple Silicon; ---. Overview:. - Python/Package management options:; - osx-arm64 conda-forge environment: https://github.com/conda-forge/miniforge (untested, limited packages); - homebrew . - BLAS/LAPACK options: ; - Apple's Accelerate: very fast, no inherent threading. But thread-safe.; - OpenBLAS: available on conda-forge and homebrew. _No optimized kernels for M1_. Much slower than Accelerate Framework. (see https://github.com/xianyi/OpenBLAS/issues/2814); - ???; ---. ## homebrew:; requirred brew packages: `cmake eigen numpy`; for OpenMP: `libomp`; optional: `doxygen jupyterlab pytest gcc` (gcc to get a Fortran compiler); Note: numpy will come with a non-threading OpenBLAS library. ### psi4 python packages:; - `pip3 install pydantic pint py-cpuinfo psutil`. ### docs:; - pip3 install Sphinx nbsphinx python-graphviz sphinx-autodoc-typehints sphinx-automodapi ; - custom theme from `git clone https://github.com/psi4/sphinx-psi-theme.git` (`pip3 install .`); - dont get `sphinx-doc` from brew, it has python3.10 dependency. ### basic build with Accelerate Framework and homebrew python:; - `cmake -H. -Bobjdir -DPython_EXECUTABLE=/opt/homebrew/bin/python3 -DCMAKE_INSTALL_PREFIX=<custom>`; - `export CPLUS_INCLUDE_PATH=/opt/homebrew/include` (for libint2 to find a header); - If `libomp` is found correctly, OpenMP is enabled but only explicit C-side openmp sections are threaded AFAIK, not blas.; - builds everything from scratch and _wow it's fast!_. ### caveats; - Mismatch between numpy(=openblas) and psi4(=Accelerate) libraries.; ---; I may have missed a detail.. These notes will be updated over time.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2333
https://github.com/psi4/psi4/issues/2333:342,Safety,safe,safe,342,"This is a short summary on how to get started with PSI4 and Apple Silicon; ---. Overview:. - Python/Package management options:; - osx-arm64 conda-forge environment: https://github.com/conda-forge/miniforge (untested, limited packages); - homebrew . - BLAS/LAPACK options: ; - Apple's Accelerate: very fast, no inherent threading. But thread-safe.; - OpenBLAS: available on conda-forge and homebrew. _No optimized kernels for M1_. Much slower than Accelerate Framework. (see https://github.com/xianyi/OpenBLAS/issues/2814); - ???; ---. ## homebrew:; requirred brew packages: `cmake eigen numpy`; for OpenMP: `libomp`; optional: `doxygen jupyterlab pytest gcc` (gcc to get a Fortran compiler); Note: numpy will come with a non-threading OpenBLAS library. ### psi4 python packages:; - `pip3 install pydantic pint py-cpuinfo psutil`. ### docs:; - pip3 install Sphinx nbsphinx python-graphviz sphinx-autodoc-typehints sphinx-automodapi ; - custom theme from `git clone https://github.com/psi4/sphinx-psi-theme.git` (`pip3 install .`); - dont get `sphinx-doc` from brew, it has python3.10 dependency. ### basic build with Accelerate Framework and homebrew python:; - `cmake -H. -Bobjdir -DPython_EXECUTABLE=/opt/homebrew/bin/python3 -DCMAKE_INSTALL_PREFIX=<custom>`; - `export CPLUS_INCLUDE_PATH=/opt/homebrew/include` (for libint2 to find a header); - If `libomp` is found correctly, OpenMP is enabled but only explicit C-side openmp sections are threaded AFAIK, not blas.; - builds everything from scratch and _wow it's fast!_. ### caveats; - Mismatch between numpy(=openblas) and psi4(=Accelerate) libraries.; ---; I may have missed a detail.. These notes will be updated over time.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2333
https://github.com/psi4/psi4/pull/2334:95,Testability,test,tests,95,## Description; Get rid of some unused custom DIIS code that I found. ## Checklist; - [x] SAPT tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2334
https://github.com/psi4/psi4/issues/2335:518,Availability,error,error,518,"Consider the following input file:; ```; molecule = geometry(""""""; H; H 1 1.0 ; """"""). set basis sto-3g. wfn = energy('b3lyp', return_wfn=True)[1]; assert isinstance(wfn, core.RHF). c1_molecule = molecule.clone(); c1_molecule.reset_point_group('c1'); c1_molecule.fix_orientation(True); c1_molecule.fix_com(True); c1_molecule.update_geometry(); c1_basis = core.BasisSet.build(c1_molecule, ""ORBITAL"", core.get_global_option('BASIS'), quiet=True). new_wfn = wfn.c1_deep_copy(c1_basis); ```. The computation crashed with an error message about the functional being ""unpolarized for UV reference."" The problem is on [this line](https://github.com/psi4/psi4/blob/c57375a3f02b6b339e028516ea44c6911c2e9e22/psi4/src/psi4/libscf_solver/hf.cc#L271). The reference is RHF, not RKS, so the if-statement makes the wrong choice.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2335
https://github.com/psi4/psi4/issues/2335:109,Energy Efficiency,energy,energy,109,"Consider the following input file:; ```; molecule = geometry(""""""; H; H 1 1.0 ; """"""). set basis sto-3g. wfn = energy('b3lyp', return_wfn=True)[1]; assert isinstance(wfn, core.RHF). c1_molecule = molecule.clone(); c1_molecule.reset_point_group('c1'); c1_molecule.fix_orientation(True); c1_molecule.fix_com(True); c1_molecule.update_geometry(); c1_basis = core.BasisSet.build(c1_molecule, ""ORBITAL"", core.get_global_option('BASIS'), quiet=True). new_wfn = wfn.c1_deep_copy(c1_basis); ```. The computation crashed with an error message about the functional being ""unpolarized for UV reference."" The problem is on [this line](https://github.com/psi4/psi4/blob/c57375a3f02b6b339e028516ea44c6911c2e9e22/psi4/src/psi4/libscf_solver/hf.cc#L271). The reference is RHF, not RKS, so the if-statement makes the wrong choice.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2335
https://github.com/psi4/psi4/issues/2335:524,Integrability,message,message,524,"Consider the following input file:; ```; molecule = geometry(""""""; H; H 1 1.0 ; """"""). set basis sto-3g. wfn = energy('b3lyp', return_wfn=True)[1]; assert isinstance(wfn, core.RHF). c1_molecule = molecule.clone(); c1_molecule.reset_point_group('c1'); c1_molecule.fix_orientation(True); c1_molecule.fix_com(True); c1_molecule.update_geometry(); c1_basis = core.BasisSet.build(c1_molecule, ""ORBITAL"", core.get_global_option('BASIS'), quiet=True). new_wfn = wfn.c1_deep_copy(c1_basis); ```. The computation crashed with an error message about the functional being ""unpolarized for UV reference."" The problem is on [this line](https://github.com/psi4/psi4/blob/c57375a3f02b6b339e028516ea44c6911c2e9e22/psi4/src/psi4/libscf_solver/hf.cc#L271). The reference is RHF, not RKS, so the if-statement makes the wrong choice.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2335
https://github.com/psi4/psi4/issues/2335:146,Testability,assert,assert,146,"Consider the following input file:; ```; molecule = geometry(""""""; H; H 1 1.0 ; """"""). set basis sto-3g. wfn = energy('b3lyp', return_wfn=True)[1]; assert isinstance(wfn, core.RHF). c1_molecule = molecule.clone(); c1_molecule.reset_point_group('c1'); c1_molecule.fix_orientation(True); c1_molecule.fix_com(True); c1_molecule.update_geometry(); c1_basis = core.BasisSet.build(c1_molecule, ""ORBITAL"", core.get_global_option('BASIS'), quiet=True). new_wfn = wfn.c1_deep_copy(c1_basis); ```. The computation crashed with an error message about the functional being ""unpolarized for UV reference."" The problem is on [this line](https://github.com/psi4/psi4/blob/c57375a3f02b6b339e028516ea44c6911c2e9e22/psi4/src/psi4/libscf_solver/hf.cc#L271). The reference is RHF, not RKS, so the if-statement makes the wrong choice.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2335
https://github.com/psi4/psi4/pull/2336:231,Integrability,depend,depending,231,## Description; This PR introduces an atomic blocking scheme for quadrature grid points. All grid points in a `BlockOPoints` object belong to a singular parent atom.; Part 1 contains just the basic feature to get it our for people depending on it. Optimization for speed is yet to come. ### New options:; - `DFT_BLOCK_SCHEME = ATOMIC` (unique blocks of grid points for each atom); - `DFT_REMOVE_DISTANT_POINTS` (new flag for existing functionality). ### primary C++ feature:; - `grid->atomic_blocks()[N_ATOM][N_BLOCKS]` additionally to `grid->blocks()[N_BLOCKS]` # provides all grid points for an atom; - `block->parent_atom()` # atom the current block belongs to. ### fixes; - collocation size estimate in naive gridblocker was wrong.; - removes unused `index` vector. #### note; - Automated formatting of the files with `clang-format` made unrelated changes. ## Questions; - [ ] The ugly code [here](https://github.com/hokru/psi4/blob/atomic_grid1/psi4/src/psi4/libfock/cubature.cc#L4630-L4641) is because of an issue with the `BlockOPoints` [object](https://github.com/hokru/psi4/blob/atomic_grid1/psi4/src/psi4/libfock/cubature.h#L179). I'd like advice how to handle this better. ## Checklist; - [x] Tests added for any new features. ## Status; - [x] Ready for review; - [x] Ready for merge. ---. ## Usage. Normal loop structure; ```; for (size_t Q = 0; Q < grid_->blocks().size(); Q++) {; size_t parent_atom_ = grid_->blocks()[Q]->parent_atom();; .; .; .; }; ```. Looping over atoms and their blocks. ; ```; # openmp note: for best performance the atom and block loop could possibly; # be collapsed into a singular loop using `collapse(2)`; for (size_t i = 0; i < grids_.size(); i++) { # here size = number of atoms; for (size_t Q = 0; Q < grid_->atomic_blocks()[A].size(); Q++) {. // access a block; std::shared_ptr<BlockOPoints> block = grid_->atomic_blocks()[A][Q];; .; .; .; }; ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2336
https://github.com/psi4/psi4/pull/2336:248,Performance,Optimiz,Optimization,248,## Description; This PR introduces an atomic blocking scheme for quadrature grid points. All grid points in a `BlockOPoints` object belong to a singular parent atom.; Part 1 contains just the basic feature to get it our for people depending on it. Optimization for speed is yet to come. ### New options:; - `DFT_BLOCK_SCHEME = ATOMIC` (unique blocks of grid points for each atom); - `DFT_REMOVE_DISTANT_POINTS` (new flag for existing functionality). ### primary C++ feature:; - `grid->atomic_blocks()[N_ATOM][N_BLOCKS]` additionally to `grid->blocks()[N_BLOCKS]` # provides all grid points for an atom; - `block->parent_atom()` # atom the current block belongs to. ### fixes; - collocation size estimate in naive gridblocker was wrong.; - removes unused `index` vector. #### note; - Automated formatting of the files with `clang-format` made unrelated changes. ## Questions; - [ ] The ugly code [here](https://github.com/hokru/psi4/blob/atomic_grid1/psi4/src/psi4/libfock/cubature.cc#L4630-L4641) is because of an issue with the `BlockOPoints` [object](https://github.com/hokru/psi4/blob/atomic_grid1/psi4/src/psi4/libfock/cubature.h#L179). I'd like advice how to handle this better. ## Checklist; - [x] Tests added for any new features. ## Status; - [x] Ready for review; - [x] Ready for merge. ---. ## Usage. Normal loop structure; ```; for (size_t Q = 0; Q < grid_->blocks().size(); Q++) {; size_t parent_atom_ = grid_->blocks()[Q]->parent_atom();; .; .; .; }; ```. Looping over atoms and their blocks. ; ```; # openmp note: for best performance the atom and block loop could possibly; # be collapsed into a singular loop using `collapse(2)`; for (size_t i = 0; i < grids_.size(); i++) { # here size = number of atoms; for (size_t Q = 0; Q < grid_->atomic_blocks()[A].size(); Q++) {. // access a block; std::shared_ptr<BlockOPoints> block = grid_->atomic_blocks()[A][Q];; .; .; .; }; ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2336
https://github.com/psi4/psi4/pull/2336:1537,Performance,perform,performance,1537,## Description; This PR introduces an atomic blocking scheme for quadrature grid points. All grid points in a `BlockOPoints` object belong to a singular parent atom.; Part 1 contains just the basic feature to get it our for people depending on it. Optimization for speed is yet to come. ### New options:; - `DFT_BLOCK_SCHEME = ATOMIC` (unique blocks of grid points for each atom); - `DFT_REMOVE_DISTANT_POINTS` (new flag for existing functionality). ### primary C++ feature:; - `grid->atomic_blocks()[N_ATOM][N_BLOCKS]` additionally to `grid->blocks()[N_BLOCKS]` # provides all grid points for an atom; - `block->parent_atom()` # atom the current block belongs to. ### fixes; - collocation size estimate in naive gridblocker was wrong.; - removes unused `index` vector. #### note; - Automated formatting of the files with `clang-format` made unrelated changes. ## Questions; - [ ] The ugly code [here](https://github.com/hokru/psi4/blob/atomic_grid1/psi4/src/psi4/libfock/cubature.cc#L4630-L4641) is because of an issue with the `BlockOPoints` [object](https://github.com/hokru/psi4/blob/atomic_grid1/psi4/src/psi4/libfock/cubature.h#L179). I'd like advice how to handle this better. ## Checklist; - [x] Tests added for any new features. ## Status; - [x] Ready for review; - [x] Ready for merge. ---. ## Usage. Normal loop structure; ```; for (size_t Q = 0; Q < grid_->blocks().size(); Q++) {; size_t parent_atom_ = grid_->blocks()[Q]->parent_atom();; .; .; .; }; ```. Looping over atoms and their blocks. ; ```; # openmp note: for best performance the atom and block loop could possibly; # be collapsed into a singular loop using `collapse(2)`; for (size_t i = 0; i < grids_.size(); i++) { # here size = number of atoms; for (size_t Q = 0; Q < grid_->atomic_blocks()[A].size(); Q++) {. // access a block; std::shared_ptr<BlockOPoints> block = grid_->atomic_blocks()[A][Q];; .; .; .; }; ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2336
https://github.com/psi4/psi4/pull/2336:1790,Security,access,access,1790,## Description; This PR introduces an atomic blocking scheme for quadrature grid points. All grid points in a `BlockOPoints` object belong to a singular parent atom.; Part 1 contains just the basic feature to get it our for people depending on it. Optimization for speed is yet to come. ### New options:; - `DFT_BLOCK_SCHEME = ATOMIC` (unique blocks of grid points for each atom); - `DFT_REMOVE_DISTANT_POINTS` (new flag for existing functionality). ### primary C++ feature:; - `grid->atomic_blocks()[N_ATOM][N_BLOCKS]` additionally to `grid->blocks()[N_BLOCKS]` # provides all grid points for an atom; - `block->parent_atom()` # atom the current block belongs to. ### fixes; - collocation size estimate in naive gridblocker was wrong.; - removes unused `index` vector. #### note; - Automated formatting of the files with `clang-format` made unrelated changes. ## Questions; - [ ] The ugly code [here](https://github.com/hokru/psi4/blob/atomic_grid1/psi4/src/psi4/libfock/cubature.cc#L4630-L4641) is because of an issue with the `BlockOPoints` [object](https://github.com/hokru/psi4/blob/atomic_grid1/psi4/src/psi4/libfock/cubature.h#L179). I'd like advice how to handle this better. ## Checklist; - [x] Tests added for any new features. ## Status; - [x] Ready for review; - [x] Ready for merge. ---. ## Usage. Normal loop structure; ```; for (size_t Q = 0; Q < grid_->blocks().size(); Q++) {; size_t parent_atom_ = grid_->blocks()[Q]->parent_atom();; .; .; .; }; ```. Looping over atoms and their blocks. ; ```; # openmp note: for best performance the atom and block loop could possibly; # be collapsed into a singular loop using `collapse(2)`; for (size_t i = 0; i < grids_.size(); i++) { # here size = number of atoms; for (size_t Q = 0; Q < grid_->atomic_blocks()[A].size(); Q++) {. // access a block; std::shared_ptr<BlockOPoints> block = grid_->atomic_blocks()[A][Q];; .; .; .; }; ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2336
https://github.com/psi4/psi4/pull/2336:1204,Testability,Test,Tests,1204,## Description; This PR introduces an atomic blocking scheme for quadrature grid points. All grid points in a `BlockOPoints` object belong to a singular parent atom.; Part 1 contains just the basic feature to get it our for people depending on it. Optimization for speed is yet to come. ### New options:; - `DFT_BLOCK_SCHEME = ATOMIC` (unique blocks of grid points for each atom); - `DFT_REMOVE_DISTANT_POINTS` (new flag for existing functionality). ### primary C++ feature:; - `grid->atomic_blocks()[N_ATOM][N_BLOCKS]` additionally to `grid->blocks()[N_BLOCKS]` # provides all grid points for an atom; - `block->parent_atom()` # atom the current block belongs to. ### fixes; - collocation size estimate in naive gridblocker was wrong.; - removes unused `index` vector. #### note; - Automated formatting of the files with `clang-format` made unrelated changes. ## Questions; - [ ] The ugly code [here](https://github.com/hokru/psi4/blob/atomic_grid1/psi4/src/psi4/libfock/cubature.cc#L4630-L4641) is because of an issue with the `BlockOPoints` [object](https://github.com/hokru/psi4/blob/atomic_grid1/psi4/src/psi4/libfock/cubature.h#L179). I'd like advice how to handle this better. ## Checklist; - [x] Tests added for any new features. ## Status; - [x] Ready for review; - [x] Ready for merge. ---. ## Usage. Normal loop structure; ```; for (size_t Q = 0; Q < grid_->blocks().size(); Q++) {; size_t parent_atom_ = grid_->blocks()[Q]->parent_atom();; .; .; .; }; ```. Looping over atoms and their blocks. ; ```; # openmp note: for best performance the atom and block loop could possibly; # be collapsed into a singular loop using `collapse(2)`; for (size_t i = 0; i < grids_.size(); i++) { # here size = number of atoms; for (size_t Q = 0; Q < grid_->atomic_blocks()[A].size(); Q++) {. // access a block; std::shared_ptr<BlockOPoints> block = grid_->atomic_blocks()[A][Q];; .; .; .; }; ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2336
https://github.com/psi4/psi4/issues/2337:121,Safety,safe,safe,121,"`libsapt_solver` has many manual BLAS calls that could be written in a way that is both more transparent and more memory-safe by using the machinery of `libmints`. For example, [this fragment](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libsapt_solver/sapt.cc#L223-L230) of code is just a verbose way to do `linalg::triplet`. This is just one of _many_ examples throughout the module, and I recommend that our two SAPT-based groups invest the time to clean this module up.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2337
https://github.com/psi4/psi4/issues/2338:472,Deployability,configurat,configuration,472,"Hello, I have been trying to geometry optimize >100 dimer pairs of organic molecules. I have a 60% success rate. I am struggling with the 40% that fail. I have tried using second order convergence and level shifting. Below is an example of a citric acid dimer that fails to converge in 100 scf iterations. The systems all seem to follow the same trend. The first couple of iterations converge the wavefunction, but eventually the scf fails to converge. The starting dimer configuration is generated using a steepest descent MM energy minimization. I can provide the entire log file, or other files as well. On other runs I have tried using LEVEL_SHIFT, but it did not help. ```; molecule dimer {; C 999.407602 1002.751600 1001.828601; C 1000.887601 1002.788600 1001.459601; O 1001.420601 1002.207601 1000.537601; O 1001.632601 1003.490600 1002.306601; C 998.553602 1001.680601 1001.080601; C 997.058603 1001.817601 1001.472601; C 996.802603 1001.523601 1002.938600; O 996.673603 1002.368601 1003.793600; O 996.522603 1000.257601 1003.219600; C 999.058602 1000.222601 1001.385601; O 999.978601 999.942601 1002.133601; O 998.491602 999.266602 1000.641601; O 998.619602 1001.964601 999.673602; H 999.003602 1003.752600 1001.641601; H 999.352602 1002.590600 1002.911600; H 1002.505600 1003.321600 1001.914601; H 996.453603 1001.125601 1000.874601; H 996.697603 1002.829600 1001.259601; H 996.300603 1000.363601 1004.159600; H 999.068602 998.498602 1000.848601; H 999.237602 1001.315601 999.248602; --; C 1000.474601 997.570602 997.565602; C 999.917601 998.148602 996.273603; O 1000.520601 998.883602 995.519603; O 998.741602 997.650602 995.912603; C 1001.785601 998.271602 998.044602; C 1002.427600 997.524602 999.252602; C 1001.663601 997.719602 1000.554601; O 1000.490601 997.439602 1000.697601; O 1002.249601 998.561602 1001.401601; C 1001.507601 999.774602 998.424602; O 1000.400601 1000.275601 998.494602; O 1002.573600 1000.457601 998.849602; O 1002.730600 998.191602 996.966603; H 1000.645601 996.5",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2338
https://github.com/psi4/psi4/issues/2338:527,Energy Efficiency,energy,energy,527,"Hello, I have been trying to geometry optimize >100 dimer pairs of organic molecules. I have a 60% success rate. I am struggling with the 40% that fail. I have tried using second order convergence and level shifting. Below is an example of a citric acid dimer that fails to converge in 100 scf iterations. The systems all seem to follow the same trend. The first couple of iterations converge the wavefunction, but eventually the scf fails to converge. The starting dimer configuration is generated using a steepest descent MM energy minimization. I can provide the entire log file, or other files as well. On other runs I have tried using LEVEL_SHIFT, but it did not help. ```; molecule dimer {; C 999.407602 1002.751600 1001.828601; C 1000.887601 1002.788600 1001.459601; O 1001.420601 1002.207601 1000.537601; O 1001.632601 1003.490600 1002.306601; C 998.553602 1001.680601 1001.080601; C 997.058603 1001.817601 1001.472601; C 996.802603 1001.523601 1002.938600; O 996.673603 1002.368601 1003.793600; O 996.522603 1000.257601 1003.219600; C 999.058602 1000.222601 1001.385601; O 999.978601 999.942601 1002.133601; O 998.491602 999.266602 1000.641601; O 998.619602 1001.964601 999.673602; H 999.003602 1003.752600 1001.641601; H 999.352602 1002.590600 1002.911600; H 1002.505600 1003.321600 1001.914601; H 996.453603 1001.125601 1000.874601; H 996.697603 1002.829600 1001.259601; H 996.300603 1000.363601 1004.159600; H 999.068602 998.498602 1000.848601; H 999.237602 1001.315601 999.248602; --; C 1000.474601 997.570602 997.565602; C 999.917601 998.148602 996.273603; O 1000.520601 998.883602 995.519603; O 998.741602 997.650602 995.912603; C 1001.785601 998.271602 998.044602; C 1002.427600 997.524602 999.252602; C 1001.663601 997.719602 1000.554601; O 1000.490601 997.439602 1000.697601; O 1002.249601 998.561602 1001.401601; C 1001.507601 999.774602 998.424602; O 1000.400601 1000.275601 998.494602; O 1002.573600 1000.457601 998.849602; O 1002.730600 998.191602 996.966603; H 1000.645601 996.5",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2338
https://github.com/psi4/psi4/issues/2338:3040,Energy Efficiency,Energy,Energy,3040,"602; H 998.630602 998.128602 995.073603; H 1003.450600 997.893602 999.402602; H 1002.505600 996.451603 999.055602; H 1001.477601 998.875602 1001.920601; H 1002.138601 1001.212601 999.307602; H 1002.322601 998.665602 996.205603; units angstrom; }; memory 40 Gb. set {; basis def2-tzvp; maxiter 100; g_convergence gau; soscf true; soscf_max_iter 40; }; set_num_threads(20); E, wfn = optimize('B3LYP-D3', bsse_type='cp', return_wfn=True); fchk(wfn, 'citric_acid_bsse_cp.fchk'). def saveFile(name, string):; f=open(name, 'w'); f.write(string); f.close(). saveFile('citric_acid.optimized.dimer_geometry_bsse_cp.log', wfn.molecule().save_string_xyz_file()); ```. Here is the first iteration; ```; ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation information). -------------------------; Irrep Nso Nmo; -------------------------; A 451 451; -------------------------; Total 451 451; -------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter SAD: -759.49493403045983 -7.59495e+02 0.00000e+00; @DF-RKS iter 1: -759.57044795569880 -7.55139e-02 3.31257e-03 DIIS; @DF-RKS iter 2: -758.78767299108517 7.82775e-01 4.58393e-03 DIIS; @DF-RKS iter 3: -760.32534769892425 -1.53767e+00 9.55400e-04 SOKS, nmicro=7; @DF-RKS iter 4: -760.39557129980335 -7.02236e-02 4.93871e-05 SOKS, nmicro=8; @DF-RKS iter 5: -760.39613633741988 -5.65038e-04 7.21946e-07 SOKS, nmicro=8; @DF-RKS iter 6: -760.39613642852896 -9.11091e-08 1.76332e-09 SOKS, nmicro=8; @DF-RKS iter 7: -760.39613642852896 0.00000e+00 5.70403e-12 SOKS, nmicro=conv; Energy and wave function converged.; ```. and here is the final iteration that fails. ```; ==> Pre-Iterations <==. SCF Guess: Orbitals guess was supplied from a previous computation. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 902 902 50 50 50 0; ---------------------------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2338
https://github.com/psi4/psi4/issues/2338:3652,Energy Efficiency,Energy,Energy,3652,".log', wfn.molecule().save_string_xyz_file()); ```. Here is the first iteration; ```; ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation information). -------------------------; Irrep Nso Nmo; -------------------------; A 451 451; -------------------------; Total 451 451; -------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter SAD: -759.49493403045983 -7.59495e+02 0.00000e+00; @DF-RKS iter 1: -759.57044795569880 -7.55139e-02 3.31257e-03 DIIS; @DF-RKS iter 2: -758.78767299108517 7.82775e-01 4.58393e-03 DIIS; @DF-RKS iter 3: -760.32534769892425 -1.53767e+00 9.55400e-04 SOKS, nmicro=7; @DF-RKS iter 4: -760.39557129980335 -7.02236e-02 4.93871e-05 SOKS, nmicro=8; @DF-RKS iter 5: -760.39613633741988 -5.65038e-04 7.21946e-07 SOKS, nmicro=8; @DF-RKS iter 6: -760.39613642852896 -9.11091e-08 1.76332e-09 SOKS, nmicro=8; @DF-RKS iter 7: -760.39613642852896 0.00000e+00 5.70403e-12 SOKS, nmicro=conv; Energy and wave function converged.; ```. and here is the final iteration that fails. ```; ==> Pre-Iterations <==. SCF Guess: Orbitals guess was supplied from a previous computation. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 902 902 50 50 50 0; -------------------------------------------------------; Total 902 902 50 50 50 0; -------------------------------------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter 0: -756.64555164402248 -7.56646e+02 2.23119e-03; @DF-RKS iter 1: -756.44709462410424 1.98457e-01 2.61941e-03 DIIS; @DF-RKS iter 2: -696.79549781482638 5.96516e+01 8.79521e-03 DIIS; @DF-RKS iter 3: -757.70517729196388 -6.09097e+01 2.61678e-03 SOKS, nmicro=40; Did not take a SOSCF step, using normal convergence methods; @DF-RKS iter 4: -743.37798168217728 1.43272e+01 5.03487e-03 DIIS; Did not take a SOSCF step, using normal convergence",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2338
https://github.com/psi4/psi4/issues/2338:4177,Energy Efficiency,Energy,Energy,4177,"7e-03 DIIS; @DF-RKS iter 2: -758.78767299108517 7.82775e-01 4.58393e-03 DIIS; @DF-RKS iter 3: -760.32534769892425 -1.53767e+00 9.55400e-04 SOKS, nmicro=7; @DF-RKS iter 4: -760.39557129980335 -7.02236e-02 4.93871e-05 SOKS, nmicro=8; @DF-RKS iter 5: -760.39613633741988 -5.65038e-04 7.21946e-07 SOKS, nmicro=8; @DF-RKS iter 6: -760.39613642852896 -9.11091e-08 1.76332e-09 SOKS, nmicro=8; @DF-RKS iter 7: -760.39613642852896 0.00000e+00 5.70403e-12 SOKS, nmicro=conv; Energy and wave function converged.; ```. and here is the final iteration that fails. ```; ==> Pre-Iterations <==. SCF Guess: Orbitals guess was supplied from a previous computation. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 902 902 50 50 50 0; -------------------------------------------------------; Total 902 902 50 50 50 0; -------------------------------------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter 0: -756.64555164402248 -7.56646e+02 2.23119e-03; @DF-RKS iter 1: -756.44709462410424 1.98457e-01 2.61941e-03 DIIS; @DF-RKS iter 2: -696.79549781482638 5.96516e+01 8.79521e-03 DIIS; @DF-RKS iter 3: -757.70517729196388 -6.09097e+01 2.61678e-03 SOKS, nmicro=40; Did not take a SOSCF step, using normal convergence methods; @DF-RKS iter 4: -743.37798168217728 1.43272e+01 5.03487e-03 DIIS; Did not take a SOSCF step, using normal convergence methods; @DF-RKS iter 5: -756.65675968040807 -1.32788e+01 3.12016e-03 DIIS; @DF-RKS iter 6: -757.18710490514206 -5.30345e-01 2.04901e-03 SOKS, nmicro=40; @DF-RKS iter 7: -749.08851900767434 8.09859e+00 3.21116e-03 SOKS, nmicro=40; Did not take a SOSCF step, using normal convergence methods; @DF-RKS iter 8: -714.30385026747103 3.47847e+01 8.06060e-03 DIIS; @DF-RKS iter 9: -757.30477472616599 -4.30009e+01 2.00054e-03 SOKS, nmicro=40; @DF-RKS iter 10: -750.16020340117416 7.14457e+00 3.81913e-03 SOKS, nmicro=40; @DF-RKS iter 11: ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2338
https://github.com/psi4/psi4/issues/2338:472,Modifiability,config,configuration,472,"Hello, I have been trying to geometry optimize >100 dimer pairs of organic molecules. I have a 60% success rate. I am struggling with the 40% that fail. I have tried using second order convergence and level shifting. Below is an example of a citric acid dimer that fails to converge in 100 scf iterations. The systems all seem to follow the same trend. The first couple of iterations converge the wavefunction, but eventually the scf fails to converge. The starting dimer configuration is generated using a steepest descent MM energy minimization. I can provide the entire log file, or other files as well. On other runs I have tried using LEVEL_SHIFT, but it did not help. ```; molecule dimer {; C 999.407602 1002.751600 1001.828601; C 1000.887601 1002.788600 1001.459601; O 1001.420601 1002.207601 1000.537601; O 1001.632601 1003.490600 1002.306601; C 998.553602 1001.680601 1001.080601; C 997.058603 1001.817601 1001.472601; C 996.802603 1001.523601 1002.938600; O 996.673603 1002.368601 1003.793600; O 996.522603 1000.257601 1003.219600; C 999.058602 1000.222601 1001.385601; O 999.978601 999.942601 1002.133601; O 998.491602 999.266602 1000.641601; O 998.619602 1001.964601 999.673602; H 999.003602 1003.752600 1001.641601; H 999.352602 1002.590600 1002.911600; H 1002.505600 1003.321600 1001.914601; H 996.453603 1001.125601 1000.874601; H 996.697603 1002.829600 1001.259601; H 996.300603 1000.363601 1004.159600; H 999.068602 998.498602 1000.848601; H 999.237602 1001.315601 999.248602; --; C 1000.474601 997.570602 997.565602; C 999.917601 998.148602 996.273603; O 1000.520601 998.883602 995.519603; O 998.741602 997.650602 995.912603; C 1001.785601 998.271602 998.044602; C 1002.427600 997.524602 999.252602; C 1001.663601 997.719602 1000.554601; O 1000.490601 997.439602 1000.697601; O 1002.249601 998.561602 1001.401601; C 1001.507601 999.774602 998.424602; O 1000.400601 1000.275601 998.494602; O 1002.573600 1000.457601 998.849602; O 1002.730600 998.191602 996.966603; H 1000.645601 996.5",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2338
https://github.com/psi4/psi4/issues/2338:38,Performance,optimiz,optimize,38,"Hello, I have been trying to geometry optimize >100 dimer pairs of organic molecules. I have a 60% success rate. I am struggling with the 40% that fail. I have tried using second order convergence and level shifting. Below is an example of a citric acid dimer that fails to converge in 100 scf iterations. The systems all seem to follow the same trend. The first couple of iterations converge the wavefunction, but eventually the scf fails to converge. The starting dimer configuration is generated using a steepest descent MM energy minimization. I can provide the entire log file, or other files as well. On other runs I have tried using LEVEL_SHIFT, but it did not help. ```; molecule dimer {; C 999.407602 1002.751600 1001.828601; C 1000.887601 1002.788600 1001.459601; O 1001.420601 1002.207601 1000.537601; O 1001.632601 1003.490600 1002.306601; C 998.553602 1001.680601 1001.080601; C 997.058603 1001.817601 1001.472601; C 996.802603 1001.523601 1002.938600; O 996.673603 1002.368601 1003.793600; O 996.522603 1000.257601 1003.219600; C 999.058602 1000.222601 1001.385601; O 999.978601 999.942601 1002.133601; O 998.491602 999.266602 1000.641601; O 998.619602 1001.964601 999.673602; H 999.003602 1003.752600 1001.641601; H 999.352602 1002.590600 1002.911600; H 1002.505600 1003.321600 1001.914601; H 996.453603 1001.125601 1000.874601; H 996.697603 1002.829600 1001.259601; H 996.300603 1000.363601 1004.159600; H 999.068602 998.498602 1000.848601; H 999.237602 1001.315601 999.248602; --; C 1000.474601 997.570602 997.565602; C 999.917601 998.148602 996.273603; O 1000.520601 998.883602 995.519603; O 998.741602 997.650602 995.912603; C 1001.785601 998.271602 998.044602; C 1002.427600 997.524602 999.252602; C 1001.663601 997.719602 1000.554601; O 1000.490601 997.439602 1000.697601; O 1002.249601 998.561602 1001.401601; C 1001.507601 999.774602 998.424602; O 1000.400601 1000.275601 998.494602; O 1002.573600 1000.457601 998.849602; O 1002.730600 998.191602 996.966603; H 1000.645601 996.5",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2338
https://github.com/psi4/psi4/issues/2338:2431,Performance,optimiz,optimize,2431,"59600; H 999.068602 998.498602 1000.848601; H 999.237602 1001.315601 999.248602; --; C 1000.474601 997.570602 997.565602; C 999.917601 998.148602 996.273603; O 1000.520601 998.883602 995.519603; O 998.741602 997.650602 995.912603; C 1001.785601 998.271602 998.044602; C 1002.427600 997.524602 999.252602; C 1001.663601 997.719602 1000.554601; O 1000.490601 997.439602 1000.697601; O 1002.249601 998.561602 1001.401601; C 1001.507601 999.774602 998.424602; O 1000.400601 1000.275601 998.494602; O 1002.573600 1000.457601 998.849602; O 1002.730600 998.191602 996.966603; H 1000.645601 996.500603 997.405602; H 999.684602 997.657602 998.318602; H 998.630602 998.128602 995.073603; H 1003.450600 997.893602 999.402602; H 1002.505600 996.451603 999.055602; H 1001.477601 998.875602 1001.920601; H 1002.138601 1001.212601 999.307602; H 1002.322601 998.665602 996.205603; units angstrom; }; memory 40 Gb. set {; basis def2-tzvp; maxiter 100; g_convergence gau; soscf true; soscf_max_iter 40; }; set_num_threads(20); E, wfn = optimize('B3LYP-D3', bsse_type='cp', return_wfn=True); fchk(wfn, 'citric_acid_bsse_cp.fchk'). def saveFile(name, string):; f=open(name, 'w'); f.write(string); f.close(). saveFile('citric_acid.optimized.dimer_geometry_bsse_cp.log', wfn.molecule().save_string_xyz_file()); ```. Here is the first iteration; ```; ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation information). -------------------------; Irrep Nso Nmo; -------------------------; A 451 451; -------------------------; Total 451 451; -------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter SAD: -759.49493403045983 -7.59495e+02 0.00000e+00; @DF-RKS iter 1: -759.57044795569880 -7.55139e-02 3.31257e-03 DIIS; @DF-RKS iter 2: -758.78767299108517 7.82775e-01 4.58393e-03 DIIS; @DF-RKS iter 3: -760.32534769892425 -1.53767e+00 9.55400e-04 SOKS, nmicro=7; @DF-RKS iter 4: -760.39557129980335 -7.02236e-02 4.93871e-05 SOKS, nmicr",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2338
https://github.com/psi4/psi4/issues/2338:2623,Performance,optimiz,optimized,2623,"602 995.912603; C 1001.785601 998.271602 998.044602; C 1002.427600 997.524602 999.252602; C 1001.663601 997.719602 1000.554601; O 1000.490601 997.439602 1000.697601; O 1002.249601 998.561602 1001.401601; C 1001.507601 999.774602 998.424602; O 1000.400601 1000.275601 998.494602; O 1002.573600 1000.457601 998.849602; O 1002.730600 998.191602 996.966603; H 1000.645601 996.500603 997.405602; H 999.684602 997.657602 998.318602; H 998.630602 998.128602 995.073603; H 1003.450600 997.893602 999.402602; H 1002.505600 996.451603 999.055602; H 1001.477601 998.875602 1001.920601; H 1002.138601 1001.212601 999.307602; H 1002.322601 998.665602 996.205603; units angstrom; }; memory 40 Gb. set {; basis def2-tzvp; maxiter 100; g_convergence gau; soscf true; soscf_max_iter 40; }; set_num_threads(20); E, wfn = optimize('B3LYP-D3', bsse_type='cp', return_wfn=True); fchk(wfn, 'citric_acid_bsse_cp.fchk'). def saveFile(name, string):; f=open(name, 'w'); f.write(string); f.close(). saveFile('citric_acid.optimized.dimer_geometry_bsse_cp.log', wfn.molecule().save_string_xyz_file()); ```. Here is the first iteration; ```; ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation information). -------------------------; Irrep Nso Nmo; -------------------------; A 451 451; -------------------------; Total 451 451; -------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter SAD: -759.49493403045983 -7.59495e+02 0.00000e+00; @DF-RKS iter 1: -759.57044795569880 -7.55139e-02 3.31257e-03 DIIS; @DF-RKS iter 2: -758.78767299108517 7.82775e-01 4.58393e-03 DIIS; @DF-RKS iter 3: -760.32534769892425 -1.53767e+00 9.55400e-04 SOKS, nmicro=7; @DF-RKS iter 4: -760.39557129980335 -7.02236e-02 4.93871e-05 SOKS, nmicro=8; @DF-RKS iter 5: -760.39613633741988 -5.65038e-04 7.21946e-07 SOKS, nmicro=8; @DF-RKS iter 6: -760.39613642852896 -9.11091e-08 1.76332e-09 SOKS, nmicro=8; @DF-RKS iter 7: -760.39613642852896 0.00000e+00 5.70403",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2338
https://github.com/psi4/psi4/issues/2338:14758,Performance,optimiz,optimize,14758," -757.95743638517786 -9.76555e-01 1.78554e-03 DIIS; @DF-RKS iter 95: -759.85317643211795 -1.89574e+00 8.92026e-04 SOKS, nmicro=40; Did not take a SOSCF step, using normal convergence methods; @DF-RKS iter 96: -757.77254419159442 2.08063e+00 2.04014e-03 DIIS; @DF-RKS iter 97: -759.86786185265203 -2.09532e+00 8.71296e-04 SOKS, nmicro=40; Did not take a SOSCF step, using normal convergence methods; @DF-RKS iter 98: -756.63806624552649 3.22980e+00 2.28461e-03 DIIS; @DF-RKS iter 99: -759.79391928550524 -3.15585e+00 9.68819e-04 SOKS, nmicro=40; @DF-RKS iter 100: -758.45496753171210 1.33895e+00 1.31995e-03 SOKS, nmicro=40. PsiException: Could not converge SCF iterations in 100 iterations. Failed to converge.; Traceback (most recent call last):; File ""/apps/psi4conda/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 73, in <module>; File ""/apps/psi4conda/lib//python3.8/site-packages/psi4/driver/driver.py"", line 1339, in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/apps/psi4conda/lib//python3.8/site-packages/psi4/driver/driver.py"", line 677, in gradient; return driver_nbody.nbody_gufunc(gradient, name, ptype='gradient', **kwargs); File ""/apps/psi4conda/lib//python3.8/site-packages/psi4/driver/driver_nbody.py"", line 291, in nbody_gufunc; component_results = compute_nbody_components(func, method_string, metadata); File ""/apps/psi4conda/lib//python3.8/site-packages/psi4/driver/driver_nbody.py"", line 502, in compute_nbody_components; ptype_dict[pair], wfn = func(method_string, molecule=current_mol, return_wfn=True, **kwargs); File ""/apps/psi4conda/lib//python3.8/site-packages/psi4/driver/driver.py"", line 739, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/apps/psi4conda/lib//python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 2485, in run_scf_gradient; ref_wfn = run_scf(name, **kwargs); File ""/apps/psi4conda/lib//python3.8/site-packages/psi4/d",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2338
https://github.com/psi4/psi4/issues/2338:16968,Performance,optimiz,optimize,16968,"s); File ""/apps/psi4conda/lib//python3.8/site-packages/psi4/driver/driver.py"", line 739, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/apps/psi4conda/lib//python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 2485, in run_scf_gradient; ref_wfn = run_scf(name, **kwargs); File ""/apps/psi4conda/lib//python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 2390, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/apps/psi4conda/lib//python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1607, in scf_helper; e_scf = scf_wfn.compute_energy(); File ""/apps/psi4conda/lib//python3.8/site-packages/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 93, in scf_compute_energy; raise e; File ""/apps/psi4conda/lib//python3.8/site-packages/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 86, in scf_compute_energy; self.iterations(); File ""/apps/psi4conda/lib//python3.8/site-packages/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 473, in scf_iterate; raise SCFConvergenceError(""""""SCF iterations"""""", self.iteration_, self, Ediff, Dnorm). psi4.driver.p4util.exceptions.SCFConvergenceError: Could not converge SCF iterations in 100 iterations. Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""MAXITER"", 100); core.set_global_option(""G_CONVERGENCE"", ""gau""); core.set_global_option(""SOSCF"", ""true""); core.set_global_option(""SOSCF_MAX_ITER"", 40); set_num_threads(20); --> E, wfn = optimize('B3LYP-D3', bsse_type='cp', return_wfn=True); fchk(wfn, 'citric_acid_bsse_cp.fchk'); def saveFile(name, string):; f=open(name, 'w'); f.write(string); f.close(). !-------------------------------------------------------!; ! !; ! Could not converge SCF iterations in 100 iterations. !; ! !; !-------------------------------------------------------!. Psi4 stopped on: Tuesday, 26 October 2021 02:03PM; Psi4 wall time for execution: 3:28:16.19; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2338
https://github.com/psi4/psi4/issues/2338:573,Testability,log,log,573,"Hello, I have been trying to geometry optimize >100 dimer pairs of organic molecules. I have a 60% success rate. I am struggling with the 40% that fail. I have tried using second order convergence and level shifting. Below is an example of a citric acid dimer that fails to converge in 100 scf iterations. The systems all seem to follow the same trend. The first couple of iterations converge the wavefunction, but eventually the scf fails to converge. The starting dimer configuration is generated using a steepest descent MM energy minimization. I can provide the entire log file, or other files as well. On other runs I have tried using LEVEL_SHIFT, but it did not help. ```; molecule dimer {; C 999.407602 1002.751600 1001.828601; C 1000.887601 1002.788600 1001.459601; O 1001.420601 1002.207601 1000.537601; O 1001.632601 1003.490600 1002.306601; C 998.553602 1001.680601 1001.080601; C 997.058603 1001.817601 1001.472601; C 996.802603 1001.523601 1002.938600; O 996.673603 1002.368601 1003.793600; O 996.522603 1000.257601 1003.219600; C 999.058602 1000.222601 1001.385601; O 999.978601 999.942601 1002.133601; O 998.491602 999.266602 1000.641601; O 998.619602 1001.964601 999.673602; H 999.003602 1003.752600 1001.641601; H 999.352602 1002.590600 1002.911600; H 1002.505600 1003.321600 1001.914601; H 996.453603 1001.125601 1000.874601; H 996.697603 1002.829600 1001.259601; H 996.300603 1000.363601 1004.159600; H 999.068602 998.498602 1000.848601; H 999.237602 1001.315601 999.248602; --; C 1000.474601 997.570602 997.565602; C 999.917601 998.148602 996.273603; O 1000.520601 998.883602 995.519603; O 998.741602 997.650602 995.912603; C 1001.785601 998.271602 998.044602; C 1002.427600 997.524602 999.252602; C 1001.663601 997.719602 1000.554601; O 1000.490601 997.439602 1000.697601; O 1002.249601 998.561602 1001.401601; C 1001.507601 999.774602 998.424602; O 1000.400601 1000.275601 998.494602; O 1002.573600 1000.457601 998.849602; O 1002.730600 998.191602 996.966603; H 1000.645601 996.5",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2338
https://github.com/psi4/psi4/issues/2338:2656,Testability,log,log,2656,".271602 998.044602; C 1002.427600 997.524602 999.252602; C 1001.663601 997.719602 1000.554601; O 1000.490601 997.439602 1000.697601; O 1002.249601 998.561602 1001.401601; C 1001.507601 999.774602 998.424602; O 1000.400601 1000.275601 998.494602; O 1002.573600 1000.457601 998.849602; O 1002.730600 998.191602 996.966603; H 1000.645601 996.500603 997.405602; H 999.684602 997.657602 998.318602; H 998.630602 998.128602 995.073603; H 1003.450600 997.893602 999.402602; H 1002.505600 996.451603 999.055602; H 1001.477601 998.875602 1001.920601; H 1002.138601 1001.212601 999.307602; H 1002.322601 998.665602 996.205603; units angstrom; }; memory 40 Gb. set {; basis def2-tzvp; maxiter 100; g_convergence gau; soscf true; soscf_max_iter 40; }; set_num_threads(20); E, wfn = optimize('B3LYP-D3', bsse_type='cp', return_wfn=True); fchk(wfn, 'citric_acid_bsse_cp.fchk'). def saveFile(name, string):; f=open(name, 'w'); f.write(string); f.close(). saveFile('citric_acid.optimized.dimer_geometry_bsse_cp.log', wfn.molecule().save_string_xyz_file()); ```. Here is the first iteration; ```; ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation information). -------------------------; Irrep Nso Nmo; -------------------------; A 451 451; -------------------------; Total 451 451; -------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter SAD: -759.49493403045983 -7.59495e+02 0.00000e+00; @DF-RKS iter 1: -759.57044795569880 -7.55139e-02 3.31257e-03 DIIS; @DF-RKS iter 2: -758.78767299108517 7.82775e-01 4.58393e-03 DIIS; @DF-RKS iter 3: -760.32534769892425 -1.53767e+00 9.55400e-04 SOKS, nmicro=7; @DF-RKS iter 4: -760.39557129980335 -7.02236e-02 4.93871e-05 SOKS, nmicro=8; @DF-RKS iter 5: -760.39613633741988 -5.65038e-04 7.21946e-07 SOKS, nmicro=8; @DF-RKS iter 6: -760.39613642852896 -9.11091e-08 1.76332e-09 SOKS, nmicro=8; @DF-RKS iter 7: -760.39613642852896 0.00000e+00 5.70403e-12 SOKS, nmicro=conv; Energy an",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2338
https://github.com/psi4/psi4/issues/2339:31,Security,expose,exposed,31,"Recent forum interactions have exposed that even if the wavefunction class were documented, there's no page that tells users ""to find quantities, look on the wavefunction."" The importance of the wavefunction doesn't seem documented anywhere. This should be added to the Psi4 tutorial section, possibly as a new page on how to find quantities in Psi4.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2339
https://github.com/psi4/psi4/issues/2341:61,Integrability,interface,interface,61,"We've had a recent forum request to support `.wfx` files for interface to QTAIM programs. This seems like a relatively simple Python project, and a good one for a new developer. You can see the file format specification [here](http://aim.tkgristmill.com/wfxformat.html).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2341
https://github.com/psi4/psi4/issues/2341:119,Usability,simpl,simple,119,"We've had a recent forum request to support `.wfx` files for interface to QTAIM programs. This seems like a relatively simple Python project, and a good one for a new developer. You can see the file format specification [here](http://aim.tkgristmill.com/wfxformat.html).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2341
https://github.com/psi4/psi4/issues/2342:565,Energy Efficiency,energy,energy,565,"According to [the forums](http://forum.psicode.org/t/windows-anaconda-nightly-build-failing-on-sapt0-calculations/2353/4), the following simple input file raises `PSIO_ERROR: unit = 193, errval = 8` AKA trying to close file 193 when it's not even open:. ```; memory 4 GB. molecule water_dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561. units angstrom; no_reorient; symmetry c1; }. set basis jun-cc-pvdz. energy('sapt0'); ```. Possibly of importance is that the reporter supplied `-n 10` to the computation, so threading may be involved.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2342
https://github.com/psi4/psi4/issues/2342:137,Usability,simpl,simple,137,"According to [the forums](http://forum.psicode.org/t/windows-anaconda-nightly-build-failing-on-sapt0-calculations/2353/4), the following simple input file raises `PSIO_ERROR: unit = 193, errval = 8` AKA trying to close file 193 when it's not even open:. ```; memory 4 GB. molecule water_dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561. units angstrom; no_reorient; symmetry c1; }. set basis jun-cc-pvdz. energy('sapt0'); ```. Possibly of importance is that the reporter supplied `-n 10` to the computation, so threading may be involved.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2342
https://github.com/psi4/psi4/issues/2343:43,Availability,error,errors,43,"Continuation of #2012 . Users report large errors with the default frozen core settings because the ""core"" orbitals we freeze are at the energy of ""valence"" orbitals. (simply put). Valuable comments from other issue:; https://github.com/psi4/psi4/issues/2012#issuecomment-702870857; https://github.com/psi4/psi4/issues/2012#issuecomment-702811354. Possibly we want what `freeze_core -2` does for all alkali metals?; Same for the earth alkali?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2343
https://github.com/psi4/psi4/issues/2343:137,Energy Efficiency,energy,energy,137,"Continuation of #2012 . Users report large errors with the default frozen core settings because the ""core"" orbitals we freeze are at the energy of ""valence"" orbitals. (simply put). Valuable comments from other issue:; https://github.com/psi4/psi4/issues/2012#issuecomment-702870857; https://github.com/psi4/psi4/issues/2012#issuecomment-702811354. Possibly we want what `freeze_core -2` does for all alkali metals?; Same for the earth alkali?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2343
https://github.com/psi4/psi4/issues/2343:168,Usability,simpl,simply,168,"Continuation of #2012 . Users report large errors with the default frozen core settings because the ""core"" orbitals we freeze are at the energy of ""valence"" orbitals. (simply put). Valuable comments from other issue:; https://github.com/psi4/psi4/issues/2012#issuecomment-702870857; https://github.com/psi4/psi4/issues/2012#issuecomment-702811354. Possibly we want what `freeze_core -2` does for all alkali metals?; Same for the earth alkali?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2343
https://github.com/psi4/psi4/pull/2344:176,Safety,avoid,avoid,176,"## Description; This PR fixes a bug in the UHF gradients for systems with no beta electrons (1-electron systems).; On line 463 of `psi4/src/psi4/scfgrad/jk_grad.cc` I couldn't avoid skipping this operation because this buffer is read somewhere else (and it practically does not matter for 1-electron systems).; ```C++; // > Stripe < //; psio_->write(unit_b_, ""(A|ij)"", (char*)Aijp[0], sizeof(double) * np * nb * nb, next_Aijb, &next_Aijb);; ```; ## Todos; - [x] Fixes logic in `scf_grad` code. ## Checklist; - [x] Added a test of the UHF gradient for H2+.; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2344
https://github.com/psi4/psi4/pull/2344:468,Testability,log,logic,468,"## Description; This PR fixes a bug in the UHF gradients for systems with no beta electrons (1-electron systems).; On line 463 of `psi4/src/psi4/scfgrad/jk_grad.cc` I couldn't avoid skipping this operation because this buffer is read somewhere else (and it practically does not matter for 1-electron systems).; ```C++; // > Stripe < //; psio_->write(unit_b_, ""(A|ij)"", (char*)Aijp[0], sizeof(double) * np * nb * nb, next_Aijb, &next_Aijb);; ```; ## Todos; - [x] Fixes logic in `scf_grad` code. ## Checklist; - [x] Added a test of the UHF gradient for H2+.; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2344
https://github.com/psi4/psi4/pull/2344:522,Testability,test,test,522,"## Description; This PR fixes a bug in the UHF gradients for systems with no beta electrons (1-electron systems).; On line 463 of `psi4/src/psi4/scfgrad/jk_grad.cc` I couldn't avoid skipping this operation because this buffer is read somewhere else (and it practically does not matter for 1-electron systems).; ```C++; // > Stripe < //; psio_->write(unit_b_, ""(A|ij)"", (char*)Aijp[0], sizeof(double) * np * nb * nb, next_Aijb, &next_Aijb);; ```; ## Todos; - [x] Fixes logic in `scf_grad` code. ## Checklist; - [x] Added a test of the UHF gradient for H2+.; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2344
https://github.com/psi4/psi4/pull/2344:597,Testability,test,tests,597,"## Description; This PR fixes a bug in the UHF gradients for systems with no beta electrons (1-electron systems).; On line 463 of `psi4/src/psi4/scfgrad/jk_grad.cc` I couldn't avoid skipping this operation because this buffer is read somewhere else (and it practically does not matter for 1-electron systems).; ```C++; // > Stripe < //; psio_->write(unit_b_, ""(A|ij)"", (char*)Aijp[0], sizeof(double) * np * nb * nb, next_Aijb, &next_Aijb);; ```; ## Todos; - [x] Fixes logic in `scf_grad` code. ## Checklist; - [x] Added a test of the UHF gradient for H2+.; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2344
https://github.com/psi4/psi4/pull/2344:688,Testability,test,tests,688,"## Description; This PR fixes a bug in the UHF gradients for systems with no beta electrons (1-electron systems).; On line 463 of `psi4/src/psi4/scfgrad/jk_grad.cc` I couldn't avoid skipping this operation because this buffer is read somewhere else (and it practically does not matter for 1-electron systems).; ```C++; // > Stripe < //; psio_->write(unit_b_, ""(A|ij)"", (char*)Aijp[0], sizeof(double) * np * nb * nb, next_Aijb, &next_Aijb);; ```; ## Todos; - [x] Fixes logic in `scf_grad` code. ## Checklist; - [x] Added a test of the UHF gradient for H2+.; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2344
https://github.com/psi4/psi4/pull/2345:264,Modifiability,refactor,refactoring,264,"## Description; This PR removes several `new`, `delete`, `block_matrix`, and `free_block` calls in `cubeprop`. I was hoping to eliminate all such calls in order to use `cubeprop` as a test case to study memory management in Psi, but I can't finish the job without refactoring `BlockOPoints`, which is far outside the scope of the PR. ## Checklist; - [x] `cubeprop` tests still pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2345
https://github.com/psi4/psi4/pull/2345:184,Testability,test,test,184,"## Description; This PR removes several `new`, `delete`, `block_matrix`, and `free_block` calls in `cubeprop`. I was hoping to eliminate all such calls in order to use `cubeprop` as a test case to study memory management in Psi, but I can't finish the job without refactoring `BlockOPoints`, which is far outside the scope of the PR. ## Checklist; - [x] `cubeprop` tests still pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2345
https://github.com/psi4/psi4/pull/2345:365,Testability,test,tests,365,"## Description; This PR removes several `new`, `delete`, `block_matrix`, and `free_block` calls in `cubeprop`. I was hoping to eliminate all such calls in order to use `cubeprop` as a test case to study memory management in Psi, but I can't finish the job without refactoring `BlockOPoints`, which is far outside the scope of the PR. ## Checklist; - [x] `cubeprop` tests still pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2345
https://github.com/psi4/psi4/pull/2346:162,Availability,down,down,162,## Description; There's a memory leak _somewhere_ in the SCF code. This PR replaces some of the manual memory management with `new`/`delete` in `libmints` to cut down the number of places where it could be coming from. (I'd like to start from a zero-leak baseline for DIIS profiling.). I'll probably need to use `valgrind` to track this down further... ## Checklist; - [x] Quicktests pass. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2346
https://github.com/psi4/psi4/pull/2346:337,Availability,down,down,337,## Description; There's a memory leak _somewhere_ in the SCF code. This PR replaces some of the manual memory management with `new`/`delete` in `libmints` to cut down the number of places where it could be coming from. (I'd like to start from a zero-leak baseline for DIIS profiling.). I'll probably need to use `valgrind` to track this down further... ## Checklist; - [x] Quicktests pass. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2346
https://github.com/psi4/psi4/pull/2347:242,Availability,error,error,242,"## Description; First, this PR cleans up some manual memory management in `libscf_solver`, including a memory leak of an `nao`-by-`nso` matrix created once per call to the SCF code. During the course of fixing that, I uncovered a correctness error in `libmints`: the `dgemv` function was using rows rather than cols for an argument. The original choice was correct in Fortran-style indexing but not C-style indexing and disagreed with every other `C_DGEMV` call in Psi. It didn't cause any issues because `Vector::dgemv` is almost never used in Psi. The one other time I found it used was for a Hermitian matrix, which of course won't have problems. ## Questions; - [x] Jet, please double-check my claim of a bug in `libmints`. ## Checklist; - [x] Quick tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2347
https://github.com/psi4/psi4/pull/2347:754,Testability,test,tests,754,"## Description; First, this PR cleans up some manual memory management in `libscf_solver`, including a memory leak of an `nao`-by-`nso` matrix created once per call to the SCF code. During the course of fixing that, I uncovered a correctness error in `libmints`: the `dgemv` function was using rows rather than cols for an argument. The original choice was correct in Fortran-style indexing but not C-style indexing and disagreed with every other `C_DGEMV` call in Psi. It didn't cause any issues because `Vector::dgemv` is almost never used in Psi. The one other time I found it used was for a Hermitian matrix, which of course won't have problems. ## Questions; - [x] Jet, please double-check my claim of a bug in `libmints`. ## Checklist; - [x] Quick tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2347
https://github.com/psi4/psi4/pull/2348:187,Testability,test,tests,187,## Description; Removes over 4000 unused LoC that I don't think anybody knows how to maintain. DGAS said this was deprecated in favor of Python solvers anyways. ## Checklist; - [x] Quick tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2348
https://github.com/psi4/psi4/pull/2349:623,Energy Efficiency,reduce,reduces,623,"## Description; This PR fixes a memory leak that was occurring in the Python-side `qcdb` code. The code meant to modify a _class variable_ but was actually creating and modifying an _instance variable_. Initialization happened many more times than needed, and some memory was not being cleared upon object deletion. The only explanation I have for how this produced a memory leak is that having a class variable and an instance variable with the same name confused the Python garbage collector. I was able to confirm object creation and deletion was occurring roughly as expected. ## Checklist; - [x] Confirmed this change reduces the memory footprint for repeated SCF calls. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2349
https://github.com/psi4/psi4/pull/2349:403,Modifiability,variab,variable,403,"## Description; This PR fixes a memory leak that was occurring in the Python-side `qcdb` code. The code meant to modify a _class variable_ but was actually creating and modifying an _instance variable_. Initialization happened many more times than needed, and some memory was not being cleared upon object deletion. The only explanation I have for how this produced a memory leak is that having a class variable and an instance variable with the same name confused the Python garbage collector. I was able to confirm object creation and deletion was occurring roughly as expected. ## Checklist; - [x] Confirmed this change reduces the memory footprint for repeated SCF calls. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2349
https://github.com/psi4/psi4/pull/2349:428,Modifiability,variab,variable,428,"## Description; This PR fixes a memory leak that was occurring in the Python-side `qcdb` code. The code meant to modify a _class variable_ but was actually creating and modifying an _instance variable_. Initialization happened many more times than needed, and some memory was not being cleared upon object deletion. The only explanation I have for how this produced a memory leak is that having a class variable and an instance variable with the same name confused the Python garbage collector. I was able to confirm object creation and deletion was occurring roughly as expected. ## Checklist; - [x] Confirmed this change reduces the memory footprint for repeated SCF calls. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2349
https://github.com/psi4/psi4/pull/2349:286,Usability,clear,cleared,286,"## Description; This PR fixes a memory leak that was occurring in the Python-side `qcdb` code. The code meant to modify a _class variable_ but was actually creating and modifying an _instance variable_. Initialization happened many more times than needed, and some memory was not being cleared upon object deletion. The only explanation I have for how this produced a memory leak is that having a class variable and an instance variable with the same name confused the Python garbage collector. I was able to confirm object creation and deletion was occurring roughly as expected. ## Checklist; - [x] Confirmed this change reduces the memory footprint for repeated SCF calls. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2349
https://github.com/psi4/psi4/pull/2350:225,Deployability,release,released,225,"## Description; This PR fixes a memory leak which I inadvertently introduced myself when refactoring `libdiis`. What I was _trying_ to do was take heap memory and move it into the stack. You can't actually do that. So when I released my `std::vector` from the smart pointer and saved it to a class variable, the memory was _not_ cleared on object delete because it was still heap memory and not stack memory. _Mea culpa_. ## Checklist; - [x] Quick tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2350
https://github.com/psi4/psi4/pull/2350:89,Modifiability,refactor,refactoring,89,"## Description; This PR fixes a memory leak which I inadvertently introduced myself when refactoring `libdiis`. What I was _trying_ to do was take heap memory and move it into the stack. You can't actually do that. So when I released my `std::vector` from the smart pointer and saved it to a class variable, the memory was _not_ cleared on object delete because it was still heap memory and not stack memory. _Mea culpa_. ## Checklist; - [x] Quick tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2350
https://github.com/psi4/psi4/pull/2350:298,Modifiability,variab,variable,298,"## Description; This PR fixes a memory leak which I inadvertently introduced myself when refactoring `libdiis`. What I was _trying_ to do was take heap memory and move it into the stack. You can't actually do that. So when I released my `std::vector` from the smart pointer and saved it to a class variable, the memory was _not_ cleared on object delete because it was still heap memory and not stack memory. _Mea culpa_. ## Checklist; - [x] Quick tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2350
https://github.com/psi4/psi4/pull/2350:448,Testability,test,tests,448,"## Description; This PR fixes a memory leak which I inadvertently introduced myself when refactoring `libdiis`. What I was _trying_ to do was take heap memory and move it into the stack. You can't actually do that. So when I released my `std::vector` from the smart pointer and saved it to a class variable, the memory was _not_ cleared on object delete because it was still heap memory and not stack memory. _Mea culpa_. ## Checklist; - [x] Quick tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2350
https://github.com/psi4/psi4/pull/2350:329,Usability,clear,cleared,329,"## Description; This PR fixes a memory leak which I inadvertently introduced myself when refactoring `libdiis`. What I was _trying_ to do was take heap memory and move it into the stack. You can't actually do that. So when I released my `std::vector` from the smart pointer and saved it to a class variable, the memory was _not_ cleared on object delete because it was still heap memory and not stack memory. _Mea culpa_. ## Checklist; - [x] Quick tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2350
https://github.com/psi4/psi4/issues/2351:29,Energy Efficiency,energy,energy,29,"I used Psi4 to calculate the energy of molecules in Conformer Benchmark dataset ( https://github.com/ghutchis/conformer-benchmark/ 702 molecules, each molecule has about 10 conformations). I tried three versions of Psi4 respectively, including V1.3.2, V1.4 and V1.4.1, and then calculated the correlation between the results of the three versions. The results are shown in the following table. The consistency is not high, especially v1.4.1, which is greatly different from the other two versions. Why are the calculation results of different versions so different?. In addition, I also calculated the correlation between Psi4 results and Orca results (from Conformer benchmark), the correlation is not high, why?. ![image](https://user-images.githubusercontent.com/16797849/141259545-c20d1c6c-6fe1-44ec-a0de-1bb8980db327.png). my code:; ```Python; def run_psi4_calc(xyz_str, dtype='xyz', basis_set='WB97X-D/def2-SVP', reference='uks', max_iter=100):. psi4.set_options({; 'reference': reference,; 'maxiter': max_iter; }). mol = psi4.core.Molecule.from_string(xyz_str, dtype=dtype); energy = psi4.energy(basis_set, molecule=mol). return energy. # get molecular 3d coordinates from Conformer benchmark; xyz_str = get_xyz_str(). energy = run_psi4_calc(; xyz_str=xyz_str,; dtype='xyz+',; basis_set='WB97X-D/def2-SVP',; reference='uks',; max_iter=100; ); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2351
https://github.com/psi4/psi4/issues/2351:1082,Energy Efficiency,energy,energy,1082,"I used Psi4 to calculate the energy of molecules in Conformer Benchmark dataset ( https://github.com/ghutchis/conformer-benchmark/ 702 molecules, each molecule has about 10 conformations). I tried three versions of Psi4 respectively, including V1.3.2, V1.4 and V1.4.1, and then calculated the correlation between the results of the three versions. The results are shown in the following table. The consistency is not high, especially v1.4.1, which is greatly different from the other two versions. Why are the calculation results of different versions so different?. In addition, I also calculated the correlation between Psi4 results and Orca results (from Conformer benchmark), the correlation is not high, why?. ![image](https://user-images.githubusercontent.com/16797849/141259545-c20d1c6c-6fe1-44ec-a0de-1bb8980db327.png). my code:; ```Python; def run_psi4_calc(xyz_str, dtype='xyz', basis_set='WB97X-D/def2-SVP', reference='uks', max_iter=100):. psi4.set_options({; 'reference': reference,; 'maxiter': max_iter; }). mol = psi4.core.Molecule.from_string(xyz_str, dtype=dtype); energy = psi4.energy(basis_set, molecule=mol). return energy. # get molecular 3d coordinates from Conformer benchmark; xyz_str = get_xyz_str(). energy = run_psi4_calc(; xyz_str=xyz_str,; dtype='xyz+',; basis_set='WB97X-D/def2-SVP',; reference='uks',; max_iter=100; ); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2351
https://github.com/psi4/psi4/issues/2351:1096,Energy Efficiency,energy,energy,1096,"I used Psi4 to calculate the energy of molecules in Conformer Benchmark dataset ( https://github.com/ghutchis/conformer-benchmark/ 702 molecules, each molecule has about 10 conformations). I tried three versions of Psi4 respectively, including V1.3.2, V1.4 and V1.4.1, and then calculated the correlation between the results of the three versions. The results are shown in the following table. The consistency is not high, especially v1.4.1, which is greatly different from the other two versions. Why are the calculation results of different versions so different?. In addition, I also calculated the correlation between Psi4 results and Orca results (from Conformer benchmark), the correlation is not high, why?. ![image](https://user-images.githubusercontent.com/16797849/141259545-c20d1c6c-6fe1-44ec-a0de-1bb8980db327.png). my code:; ```Python; def run_psi4_calc(xyz_str, dtype='xyz', basis_set='WB97X-D/def2-SVP', reference='uks', max_iter=100):. psi4.set_options({; 'reference': reference,; 'maxiter': max_iter; }). mol = psi4.core.Molecule.from_string(xyz_str, dtype=dtype); energy = psi4.energy(basis_set, molecule=mol). return energy. # get molecular 3d coordinates from Conformer benchmark; xyz_str = get_xyz_str(). energy = run_psi4_calc(; xyz_str=xyz_str,; dtype='xyz+',; basis_set='WB97X-D/def2-SVP',; reference='uks',; max_iter=100; ); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2351
https://github.com/psi4/psi4/issues/2351:1136,Energy Efficiency,energy,energy,1136,"I used Psi4 to calculate the energy of molecules in Conformer Benchmark dataset ( https://github.com/ghutchis/conformer-benchmark/ 702 molecules, each molecule has about 10 conformations). I tried three versions of Psi4 respectively, including V1.3.2, V1.4 and V1.4.1, and then calculated the correlation between the results of the three versions. The results are shown in the following table. The consistency is not high, especially v1.4.1, which is greatly different from the other two versions. Why are the calculation results of different versions so different?. In addition, I also calculated the correlation between Psi4 results and Orca results (from Conformer benchmark), the correlation is not high, why?. ![image](https://user-images.githubusercontent.com/16797849/141259545-c20d1c6c-6fe1-44ec-a0de-1bb8980db327.png). my code:; ```Python; def run_psi4_calc(xyz_str, dtype='xyz', basis_set='WB97X-D/def2-SVP', reference='uks', max_iter=100):. psi4.set_options({; 'reference': reference,; 'maxiter': max_iter; }). mol = psi4.core.Molecule.from_string(xyz_str, dtype=dtype); energy = psi4.energy(basis_set, molecule=mol). return energy. # get molecular 3d coordinates from Conformer benchmark; xyz_str = get_xyz_str(). energy = run_psi4_calc(; xyz_str=xyz_str,; dtype='xyz+',; basis_set='WB97X-D/def2-SVP',; reference='uks',; max_iter=100; ); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2351
https://github.com/psi4/psi4/issues/2351:1226,Energy Efficiency,energy,energy,1226,"I used Psi4 to calculate the energy of molecules in Conformer Benchmark dataset ( https://github.com/ghutchis/conformer-benchmark/ 702 molecules, each molecule has about 10 conformations). I tried three versions of Psi4 respectively, including V1.3.2, V1.4 and V1.4.1, and then calculated the correlation between the results of the three versions. The results are shown in the following table. The consistency is not high, especially v1.4.1, which is greatly different from the other two versions. Why are the calculation results of different versions so different?. In addition, I also calculated the correlation between Psi4 results and Orca results (from Conformer benchmark), the correlation is not high, why?. ![image](https://user-images.githubusercontent.com/16797849/141259545-c20d1c6c-6fe1-44ec-a0de-1bb8980db327.png). my code:; ```Python; def run_psi4_calc(xyz_str, dtype='xyz', basis_set='WB97X-D/def2-SVP', reference='uks', max_iter=100):. psi4.set_options({; 'reference': reference,; 'maxiter': max_iter; }). mol = psi4.core.Molecule.from_string(xyz_str, dtype=dtype); energy = psi4.energy(basis_set, molecule=mol). return energy. # get molecular 3d coordinates from Conformer benchmark; xyz_str = get_xyz_str(). energy = run_psi4_calc(; xyz_str=xyz_str,; dtype='xyz+',; basis_set='WB97X-D/def2-SVP',; reference='uks',; max_iter=100; ); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2351
https://github.com/psi4/psi4/issues/2351:62,Testability,Benchmark,Benchmark,62,"I used Psi4 to calculate the energy of molecules in Conformer Benchmark dataset ( https://github.com/ghutchis/conformer-benchmark/ 702 molecules, each molecule has about 10 conformations). I tried three versions of Psi4 respectively, including V1.3.2, V1.4 and V1.4.1, and then calculated the correlation between the results of the three versions. The results are shown in the following table. The consistency is not high, especially v1.4.1, which is greatly different from the other two versions. Why are the calculation results of different versions so different?. In addition, I also calculated the correlation between Psi4 results and Orca results (from Conformer benchmark), the correlation is not high, why?. ![image](https://user-images.githubusercontent.com/16797849/141259545-c20d1c6c-6fe1-44ec-a0de-1bb8980db327.png). my code:; ```Python; def run_psi4_calc(xyz_str, dtype='xyz', basis_set='WB97X-D/def2-SVP', reference='uks', max_iter=100):. psi4.set_options({; 'reference': reference,; 'maxiter': max_iter; }). mol = psi4.core.Molecule.from_string(xyz_str, dtype=dtype); energy = psi4.energy(basis_set, molecule=mol). return energy. # get molecular 3d coordinates from Conformer benchmark; xyz_str = get_xyz_str(). energy = run_psi4_calc(; xyz_str=xyz_str,; dtype='xyz+',; basis_set='WB97X-D/def2-SVP',; reference='uks',; max_iter=100; ); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2351
https://github.com/psi4/psi4/issues/2351:120,Testability,benchmark,benchmark,120,"I used Psi4 to calculate the energy of molecules in Conformer Benchmark dataset ( https://github.com/ghutchis/conformer-benchmark/ 702 molecules, each molecule has about 10 conformations). I tried three versions of Psi4 respectively, including V1.3.2, V1.4 and V1.4.1, and then calculated the correlation between the results of the three versions. The results are shown in the following table. The consistency is not high, especially v1.4.1, which is greatly different from the other two versions. Why are the calculation results of different versions so different?. In addition, I also calculated the correlation between Psi4 results and Orca results (from Conformer benchmark), the correlation is not high, why?. ![image](https://user-images.githubusercontent.com/16797849/141259545-c20d1c6c-6fe1-44ec-a0de-1bb8980db327.png). my code:; ```Python; def run_psi4_calc(xyz_str, dtype='xyz', basis_set='WB97X-D/def2-SVP', reference='uks', max_iter=100):. psi4.set_options({; 'reference': reference,; 'maxiter': max_iter; }). mol = psi4.core.Molecule.from_string(xyz_str, dtype=dtype); energy = psi4.energy(basis_set, molecule=mol). return energy. # get molecular 3d coordinates from Conformer benchmark; xyz_str = get_xyz_str(). energy = run_psi4_calc(; xyz_str=xyz_str,; dtype='xyz+',; basis_set='WB97X-D/def2-SVP',; reference='uks',; max_iter=100; ); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2351
https://github.com/psi4/psi4/issues/2351:668,Testability,benchmark,benchmark,668,"I used Psi4 to calculate the energy of molecules in Conformer Benchmark dataset ( https://github.com/ghutchis/conformer-benchmark/ 702 molecules, each molecule has about 10 conformations). I tried three versions of Psi4 respectively, including V1.3.2, V1.4 and V1.4.1, and then calculated the correlation between the results of the three versions. The results are shown in the following table. The consistency is not high, especially v1.4.1, which is greatly different from the other two versions. Why are the calculation results of different versions so different?. In addition, I also calculated the correlation between Psi4 results and Orca results (from Conformer benchmark), the correlation is not high, why?. ![image](https://user-images.githubusercontent.com/16797849/141259545-c20d1c6c-6fe1-44ec-a0de-1bb8980db327.png). my code:; ```Python; def run_psi4_calc(xyz_str, dtype='xyz', basis_set='WB97X-D/def2-SVP', reference='uks', max_iter=100):. psi4.set_options({; 'reference': reference,; 'maxiter': max_iter; }). mol = psi4.core.Molecule.from_string(xyz_str, dtype=dtype); energy = psi4.energy(basis_set, molecule=mol). return energy. # get molecular 3d coordinates from Conformer benchmark; xyz_str = get_xyz_str(). energy = run_psi4_calc(; xyz_str=xyz_str,; dtype='xyz+',; basis_set='WB97X-D/def2-SVP',; reference='uks',; max_iter=100; ); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2351
https://github.com/psi4/psi4/issues/2351:1190,Testability,benchmark,benchmark,1190,"I used Psi4 to calculate the energy of molecules in Conformer Benchmark dataset ( https://github.com/ghutchis/conformer-benchmark/ 702 molecules, each molecule has about 10 conformations). I tried three versions of Psi4 respectively, including V1.3.2, V1.4 and V1.4.1, and then calculated the correlation between the results of the three versions. The results are shown in the following table. The consistency is not high, especially v1.4.1, which is greatly different from the other two versions. Why are the calculation results of different versions so different?. In addition, I also calculated the correlation between Psi4 results and Orca results (from Conformer benchmark), the correlation is not high, why?. ![image](https://user-images.githubusercontent.com/16797849/141259545-c20d1c6c-6fe1-44ec-a0de-1bb8980db327.png). my code:; ```Python; def run_psi4_calc(xyz_str, dtype='xyz', basis_set='WB97X-D/def2-SVP', reference='uks', max_iter=100):. psi4.set_options({; 'reference': reference,; 'maxiter': max_iter; }). mol = psi4.core.Molecule.from_string(xyz_str, dtype=dtype); energy = psi4.energy(basis_set, molecule=mol). return energy. # get molecular 3d coordinates from Conformer benchmark; xyz_str = get_xyz_str(). energy = run_psi4_calc(; xyz_str=xyz_str,; dtype='xyz+',; basis_set='WB97X-D/def2-SVP',; reference='uks',; max_iter=100; ); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2351
https://github.com/psi4/psi4/pull/2354:1132,Testability,Test,Test,1132,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; The aim of this pull request is twofold:; - it introduces our hybrid perturbative methods REMP (https://doi.org/10.1063/1.5086168) and OO-REMP (https://doi.org/10.1021/acs.jctc.1c00280) into the OCC and the DFOCC module; - It fixes #2215 by porting the coupled DIIS scheme from the OCC module to the DFOCC module; - Furthermore, a number of potential integer overflows in the DFOCC module are fixed which may lead to wrong memory demand estimates for large molecules. REMP is essentially a hybrid between MP and CEPA(0) rewritten as perturbation theory (https://doi.org/10.1016/j.cplett.2006.07.081). - Note: This PR also contains code pulled from @bozkaya 's fork. ## Sub-PR List. [LAB] This PR's content, including https://github.com/loriab/psi4/tree/dfocc2 by @bozkaya and @yavuzalagoz, will be added through the following sub-PRs:; * #2653 +12k/-1k; * #2663 +4k/-4k; * #2669 +2k/-1k; * #2670 +22k/-0k; * #2739 +20k/-2k. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Documentation; - [x] Test cases. ## Checklist; - [x] Tests added for any new features; - [ ] ~~[All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests)~~; - [ ] ~~Some tests fail locally but these are not related to any code touched in this PR~~; - [x] ~~The initial pull request broke DF-OMP2.5 and DF-OMP3. Will be fixed in a follow-up commit.~~ Fixed. ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2354
https://github.com/psi4/psi4/pull/2354:1164,Testability,Test,Tests,1164,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; The aim of this pull request is twofold:; - it introduces our hybrid perturbative methods REMP (https://doi.org/10.1063/1.5086168) and OO-REMP (https://doi.org/10.1021/acs.jctc.1c00280) into the OCC and the DFOCC module; - It fixes #2215 by porting the coupled DIIS scheme from the OCC module to the DFOCC module; - Furthermore, a number of potential integer overflows in the DFOCC module are fixed which may lead to wrong memory demand estimates for large molecules. REMP is essentially a hybrid between MP and CEPA(0) rewritten as perturbation theory (https://doi.org/10.1016/j.cplett.2006.07.081). - Note: This PR also contains code pulled from @bozkaya 's fork. ## Sub-PR List. [LAB] This PR's content, including https://github.com/loriab/psi4/tree/dfocc2 by @bozkaya and @yavuzalagoz, will be added through the following sub-PRs:; * #2653 +12k/-1k; * #2663 +4k/-4k; * #2669 +2k/-1k; * #2670 +22k/-0k; * #2739 +20k/-2k. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Documentation; - [x] Test cases. ## Checklist; - [x] Tests added for any new features; - [ ] ~~[All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests)~~; - [ ] ~~Some tests fail locally but these are not related to any code touched in this PR~~; - [x] ~~The initial pull request broke DF-OMP2.5 and DF-OMP3. Will be fixed in a follow-up commit.~~ Fixed. ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2354
https://github.com/psi4/psi4/pull/2354:1240,Testability,test,tests,1240,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; The aim of this pull request is twofold:; - it introduces our hybrid perturbative methods REMP (https://doi.org/10.1063/1.5086168) and OO-REMP (https://doi.org/10.1021/acs.jctc.1c00280) into the OCC and the DFOCC module; - It fixes #2215 by porting the coupled DIIS scheme from the OCC module to the DFOCC module; - Furthermore, a number of potential integer overflows in the DFOCC module are fixed which may lead to wrong memory demand estimates for large molecules. REMP is essentially a hybrid between MP and CEPA(0) rewritten as perturbation theory (https://doi.org/10.1016/j.cplett.2006.07.081). - Note: This PR also contains code pulled from @bozkaya 's fork. ## Sub-PR List. [LAB] This PR's content, including https://github.com/loriab/psi4/tree/dfocc2 by @bozkaya and @yavuzalagoz, will be added through the following sub-PRs:; * #2653 +12k/-1k; * #2663 +4k/-4k; * #2669 +2k/-1k; * #2670 +22k/-0k; * #2739 +20k/-2k. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Documentation; - [x] Test cases. ## Checklist; - [x] Tests added for any new features; - [ ] ~~[All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests)~~; - [ ] ~~Some tests fail locally but these are not related to any code touched in this PR~~; - [x] ~~The initial pull request broke DF-OMP2.5 and DF-OMP3. Will be fixed in a follow-up commit.~~ Fixed. ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2354
https://github.com/psi4/psi4/pull/2354:1331,Testability,test,tests,1331,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; The aim of this pull request is twofold:; - it introduces our hybrid perturbative methods REMP (https://doi.org/10.1063/1.5086168) and OO-REMP (https://doi.org/10.1021/acs.jctc.1c00280) into the OCC and the DFOCC module; - It fixes #2215 by porting the coupled DIIS scheme from the OCC module to the DFOCC module; - Furthermore, a number of potential integer overflows in the DFOCC module are fixed which may lead to wrong memory demand estimates for large molecules. REMP is essentially a hybrid between MP and CEPA(0) rewritten as perturbation theory (https://doi.org/10.1016/j.cplett.2006.07.081). - Note: This PR also contains code pulled from @bozkaya 's fork. ## Sub-PR List. [LAB] This PR's content, including https://github.com/loriab/psi4/tree/dfocc2 by @bozkaya and @yavuzalagoz, will be added through the following sub-PRs:; * #2653 +12k/-1k; * #2663 +4k/-4k; * #2669 +2k/-1k; * #2670 +22k/-0k; * #2739 +20k/-2k. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Documentation; - [x] Test cases. ## Checklist; - [x] Tests added for any new features; - [ ] ~~[All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests)~~; - [ ] ~~Some tests fail locally but these are not related to any code touched in this PR~~; - [x] ~~The initial pull request broke DF-OMP2.5 and DF-OMP3. Will be fixed in a follow-up commit.~~ Fixed. ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2354
https://github.com/psi4/psi4/pull/2354:1354,Testability,test,tests,1354,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; The aim of this pull request is twofold:; - it introduces our hybrid perturbative methods REMP (https://doi.org/10.1063/1.5086168) and OO-REMP (https://doi.org/10.1021/acs.jctc.1c00280) into the OCC and the DFOCC module; - It fixes #2215 by porting the coupled DIIS scheme from the OCC module to the DFOCC module; - Furthermore, a number of potential integer overflows in the DFOCC module are fixed which may lead to wrong memory demand estimates for large molecules. REMP is essentially a hybrid between MP and CEPA(0) rewritten as perturbation theory (https://doi.org/10.1016/j.cplett.2006.07.081). - Note: This PR also contains code pulled from @bozkaya 's fork. ## Sub-PR List. [LAB] This PR's content, including https://github.com/loriab/psi4/tree/dfocc2 by @bozkaya and @yavuzalagoz, will be added through the following sub-PRs:; * #2653 +12k/-1k; * #2663 +4k/-4k; * #2669 +2k/-1k; * #2670 +22k/-0k; * #2739 +20k/-2k. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Documentation; - [x] Test cases. ## Checklist; - [x] Tests added for any new features; - [ ] ~~[All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests)~~; - [ ] ~~Some tests fail locally but these are not related to any code touched in this PR~~; - [x] ~~The initial pull request broke DF-OMP2.5 and DF-OMP3. Will be fixed in a follow-up commit.~~ Fixed. ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2354
https://github.com/psi4/psi4/pull/2355:164,Testability,test,tests,164,"## Description; This PR uses `axpy` and `memcpy` throughout `libdiis`, for the sake of fairer comparisons when I'm doing speed profiling. ## Checklist; - [x] quick tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2355
https://github.com/psi4/psi4/pull/2356:16,Security,Expose,Expose,16,## Description; Expose the function C_DGELS (found in `qt.h`). ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2356
https://github.com/psi4/psi4/pull/2356:117,Testability,test,tests,117,## Description; Expose the function C_DGELS (found in `qt.h`). ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2356
https://github.com/psi4/psi4/pull/2356:208,Testability,test,tests,208,## Description; Expose the function C_DGELS (found in `qt.h`). ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2356
https://github.com/psi4/psi4/pull/2357:266,Testability,test,tests,266,## Description; The mapping from psi4's string-based DFT functional representation to the BrianQC GPU module's macro-based one was flawed; this was corrected. This pull request only touches BrianQC addon-specific code paths. ## Checklist; - [x] The BrianQC-specific tests were run and they passed (ctest -L brianqc). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2357
https://github.com/psi4/psi4/pull/2358:23,Availability,error,error,23,## Description; Fix an error message which I [invalidated](https://github.com/psi4/psi4/pull/1949) last year. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2358
https://github.com/psi4/psi4/pull/2358:29,Integrability,message,message,29,## Description; Fix an error message which I [invalidated](https://github.com/psi4/psi4/pull/1949) last year. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2358
https://github.com/psi4/psi4/pull/2359:16,Deployability,Update,Updated,16,"## Description; Updated version of #2187 . Implements a linear-scaling variant of building the K-matrix by taking advantage of the sparsity of ERIs combined with the Density matrix using advanced prescreening techniques. Reference: C. Ochsenfeld, C.A. White, and M. Head-Gordon, J. Chem. Phys. 109, 1663 (1998); (https://aip.scitation.org/doi/10.1063/1.476741). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Faster build of K matrix based on pre-screening techniques; - [x] Verified timings and accuracy of calculations on 3D system (watercluster). ## Questions; - [x] My algorithm is slightly modified from the Oschenfeld version since we perform our DirectJK algorithm in atom-task pairs instead of shell pairs, in order to preserve the old DirectJK loop. Is that a bad idea?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [x] Updated Docs and Bibliography for new feature. ## Status; - [x] Ready for review; - [x] Ready for merge. ## Table of Contents; - [LinK Pseudocode](https://github.com/psi4/psi4/pull/2359#issuecomment-998996631); - [LinK Timings Graphs](https://github.com/psi4/psi4/pull/2359#issuecomment-1003741024); - [LinK Code Organization](https://github.com/psi4/psi4/pull/2359#issuecomment-1043550653); - [Parallel Preprocessing Code](https://github.com/psi4/psi4/pull/2359#issuecomment-1063147739); - [Atom vs Shell Blocking](https://github.com/psi4/psi4/pull/2359#issuecomment-992619129)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359
https://github.com/psi4/psi4/pull/2359:1039,Deployability,Update,Updated,1039,"## Description; Updated version of #2187 . Implements a linear-scaling variant of building the K-matrix by taking advantage of the sparsity of ERIs combined with the Density matrix using advanced prescreening techniques. Reference: C. Ochsenfeld, C.A. White, and M. Head-Gordon, J. Chem. Phys. 109, 1663 (1998); (https://aip.scitation.org/doi/10.1063/1.476741). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Faster build of K matrix based on pre-screening techniques; - [x] Verified timings and accuracy of calculations on 3D system (watercluster). ## Questions; - [x] My algorithm is slightly modified from the Oschenfeld version since we perform our DirectJK algorithm in atom-task pairs instead of shell pairs, in order to preserve the old DirectJK loop. Is that a bad idea?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [x] Updated Docs and Bibliography for new feature. ## Status; - [x] Ready for review; - [x] Ready for merge. ## Table of Contents; - [LinK Pseudocode](https://github.com/psi4/psi4/pull/2359#issuecomment-998996631); - [LinK Timings Graphs](https://github.com/psi4/psi4/pull/2359#issuecomment-1003741024); - [LinK Code Organization](https://github.com/psi4/psi4/pull/2359#issuecomment-1043550653); - [Parallel Preprocessing Code](https://github.com/psi4/psi4/pull/2359#issuecomment-1063147739); - [Atom vs Shell Blocking](https://github.com/psi4/psi4/pull/2359#issuecomment-992619129)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359
https://github.com/psi4/psi4/pull/2359:701,Performance,perform,perform,701,"## Description; Updated version of #2187 . Implements a linear-scaling variant of building the K-matrix by taking advantage of the sparsity of ERIs combined with the Density matrix using advanced prescreening techniques. Reference: C. Ochsenfeld, C.A. White, and M. Head-Gordon, J. Chem. Phys. 109, 1663 (1998); (https://aip.scitation.org/doi/10.1063/1.476741). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Faster build of K matrix based on pre-screening techniques; - [x] Verified timings and accuracy of calculations on 3D system (watercluster). ## Questions; - [x] My algorithm is slightly modified from the Oschenfeld version since we perform our DirectJK algorithm in atom-task pairs instead of shell pairs, in order to preserve the old DirectJK loop. Is that a bad idea?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [x] Updated Docs and Bibliography for new feature. ## Status; - [x] Ready for review; - [x] Ready for merge. ## Table of Contents; - [LinK Pseudocode](https://github.com/psi4/psi4/pull/2359#issuecomment-998996631); - [LinK Timings Graphs](https://github.com/psi4/psi4/pull/2359#issuecomment-1003741024); - [LinK Code Organization](https://github.com/psi4/psi4/pull/2359#issuecomment-1043550653); - [Parallel Preprocessing Code](https://github.com/psi4/psi4/pull/2359#issuecomment-1063147739); - [Atom vs Shell Blocking](https://github.com/psi4/psi4/pull/2359#issuecomment-992619129)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359
https://github.com/psi4/psi4/pull/2359:860,Testability,Test,Tests,860,"## Description; Updated version of #2187 . Implements a linear-scaling variant of building the K-matrix by taking advantage of the sparsity of ERIs combined with the Density matrix using advanced prescreening techniques. Reference: C. Ochsenfeld, C.A. White, and M. Head-Gordon, J. Chem. Phys. 109, 1663 (1998); (https://aip.scitation.org/doi/10.1063/1.476741). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Faster build of K matrix based on pre-screening techniques; - [x] Verified timings and accuracy of calculations on 3D system (watercluster). ## Questions; - [x] My algorithm is slightly modified from the Oschenfeld version since we perform our DirectJK algorithm in atom-task pairs instead of shell pairs, in order to preserve the old DirectJK loop. Is that a bad idea?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [x] Updated Docs and Bibliography for new feature. ## Status; - [x] Ready for review; - [x] Ready for merge. ## Table of Contents; - [LinK Pseudocode](https://github.com/psi4/psi4/pull/2359#issuecomment-998996631); - [LinK Timings Graphs](https://github.com/psi4/psi4/pull/2359#issuecomment-1003741024); - [LinK Code Organization](https://github.com/psi4/psi4/pull/2359#issuecomment-1043550653); - [Parallel Preprocessing Code](https://github.com/psi4/psi4/pull/2359#issuecomment-1063147739); - [Atom vs Shell Blocking](https://github.com/psi4/psi4/pull/2359#issuecomment-992619129)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359
https://github.com/psi4/psi4/pull/2359:934,Testability,test,tests,934,"## Description; Updated version of #2187 . Implements a linear-scaling variant of building the K-matrix by taking advantage of the sparsity of ERIs combined with the Density matrix using advanced prescreening techniques. Reference: C. Ochsenfeld, C.A. White, and M. Head-Gordon, J. Chem. Phys. 109, 1663 (1998); (https://aip.scitation.org/doi/10.1063/1.476741). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Faster build of K matrix based on pre-screening techniques; - [x] Verified timings and accuracy of calculations on 3D system (watercluster). ## Questions; - [x] My algorithm is slightly modified from the Oschenfeld version since we perform our DirectJK algorithm in atom-task pairs instead of shell pairs, in order to preserve the old DirectJK loop. Is that a bad idea?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [x] Updated Docs and Bibliography for new feature. ## Status; - [x] Ready for review; - [x] Ready for merge. ## Table of Contents; - [LinK Pseudocode](https://github.com/psi4/psi4/pull/2359#issuecomment-998996631); - [LinK Timings Graphs](https://github.com/psi4/psi4/pull/2359#issuecomment-1003741024); - [LinK Code Organization](https://github.com/psi4/psi4/pull/2359#issuecomment-1043550653); - [Parallel Preprocessing Code](https://github.com/psi4/psi4/pull/2359#issuecomment-1063147739); - [Atom vs Shell Blocking](https://github.com/psi4/psi4/pull/2359#issuecomment-992619129)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359
https://github.com/psi4/psi4/pull/2359:1025,Testability,test,tests,1025,"## Description; Updated version of #2187 . Implements a linear-scaling variant of building the K-matrix by taking advantage of the sparsity of ERIs combined with the Density matrix using advanced prescreening techniques. Reference: C. Ochsenfeld, C.A. White, and M. Head-Gordon, J. Chem. Phys. 109, 1663 (1998); (https://aip.scitation.org/doi/10.1063/1.476741). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Faster build of K matrix based on pre-screening techniques; - [x] Verified timings and accuracy of calculations on 3D system (watercluster). ## Questions; - [x] My algorithm is slightly modified from the Oschenfeld version since we perform our DirectJK algorithm in atom-task pairs instead of shell pairs, in order to preserve the old DirectJK loop. Is that a bad idea?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [x] Updated Docs and Bibliography for new feature. ## Status; - [x] Ready for review; - [x] Ready for merge. ## Table of Contents; - [LinK Pseudocode](https://github.com/psi4/psi4/pull/2359#issuecomment-998996631); - [LinK Timings Graphs](https://github.com/psi4/psi4/pull/2359#issuecomment-1003741024); - [LinK Code Organization](https://github.com/psi4/psi4/pull/2359#issuecomment-1043550653); - [Parallel Preprocessing Code](https://github.com/psi4/psi4/pull/2359#issuecomment-1063147739); - [Atom vs Shell Blocking](https://github.com/psi4/psi4/pull/2359#issuecomment-992619129)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2359
https://github.com/psi4/psi4/issues/2360:53,Usability,simpl,simple-,53,"dftd3's have proliferated (https://github.com/awvwgk/simple-dftd3/issues/4). @awvwgk thinks everything we use dftd3 classic for has been incorporated into `simple-dftd3`. It should be a medium-term goal to help kill our fork. may as well tackle the gcp exe to gcp-correction aka mctc-gcp shift at the same time since needed for SCAN. this already has a harness in QCEngine, whereas simple-dftd3 does not. closed by #2791",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2360
https://github.com/psi4/psi4/issues/2360:156,Usability,simpl,simple-,156,"dftd3's have proliferated (https://github.com/awvwgk/simple-dftd3/issues/4). @awvwgk thinks everything we use dftd3 classic for has been incorporated into `simple-dftd3`. It should be a medium-term goal to help kill our fork. may as well tackle the gcp exe to gcp-correction aka mctc-gcp shift at the same time since needed for SCAN. this already has a harness in QCEngine, whereas simple-dftd3 does not. closed by #2791",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2360
https://github.com/psi4/psi4/issues/2360:382,Usability,simpl,simple-,382,"dftd3's have proliferated (https://github.com/awvwgk/simple-dftd3/issues/4). @awvwgk thinks everything we use dftd3 classic for has been incorporated into `simple-dftd3`. It should be a medium-term goal to help kill our fork. may as well tackle the gcp exe to gcp-correction aka mctc-gcp shift at the same time since needed for SCAN. this already has a harness in QCEngine, whereas simple-dftd3 does not. closed by #2791",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2360
https://github.com/psi4/psi4/pull/2361:129,Availability,down,down,129,"## Description; In accordance with https://github.com/MolSSI/QCElemental/pull/275, return certain files in qcschema to be pruned down by user protocols. Bump qcel to 0.24.0 (and qcng to 0.23.0 once it's minted). Note that this can't handle the wfn file b/c binary. And it can't handle `timer.dat` b/c there's no fixed place it lands (I can get it to save calling schema_wrapper directly but not for QCEngine calling psi4). ## Checklist; - [x] Tests added for any new features -- tested at qcengine test_canonical_fields; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2361
https://github.com/psi4/psi4/pull/2361:142,Integrability,protocol,protocols,142,"## Description; In accordance with https://github.com/MolSSI/QCElemental/pull/275, return certain files in qcschema to be pruned down by user protocols. Bump qcel to 0.24.0 (and qcng to 0.23.0 once it's minted). Note that this can't handle the wfn file b/c binary. And it can't handle `timer.dat` b/c there's no fixed place it lands (I can get it to save calling schema_wrapper directly but not for QCEngine calling psi4). ## Checklist; - [x] Tests added for any new features -- tested at qcengine test_canonical_fields; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2361
https://github.com/psi4/psi4/pull/2361:443,Testability,Test,Tests,443,"## Description; In accordance with https://github.com/MolSSI/QCElemental/pull/275, return certain files in qcschema to be pruned down by user protocols. Bump qcel to 0.24.0 (and qcng to 0.23.0 once it's minted). Note that this can't handle the wfn file b/c binary. And it can't handle `timer.dat` b/c there's no fixed place it lands (I can get it to save calling schema_wrapper directly but not for QCEngine calling psi4). ## Checklist; - [x] Tests added for any new features -- tested at qcengine test_canonical_fields; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2361
https://github.com/psi4/psi4/pull/2361:479,Testability,test,tested,479,"## Description; In accordance with https://github.com/MolSSI/QCElemental/pull/275, return certain files in qcschema to be pruned down by user protocols. Bump qcel to 0.24.0 (and qcng to 0.23.0 once it's minted). Note that this can't handle the wfn file b/c binary. And it can't handle `timer.dat` b/c there's no fixed place it lands (I can get it to save calling schema_wrapper directly but not for QCEngine calling psi4). ## Checklist; - [x] Tests added for any new features -- tested at qcengine test_canonical_fields; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2361
https://github.com/psi4/psi4/pull/2361:561,Testability,test,tests,561,"## Description; In accordance with https://github.com/MolSSI/QCElemental/pull/275, return certain files in qcschema to be pruned down by user protocols. Bump qcel to 0.24.0 (and qcng to 0.23.0 once it's minted). Note that this can't handle the wfn file b/c binary. And it can't handle `timer.dat` b/c there's no fixed place it lands (I can get it to save calling schema_wrapper directly but not for QCEngine calling psi4). ## Checklist; - [x] Tests added for any new features -- tested at qcengine test_canonical_fields; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2361
https://github.com/psi4/psi4/pull/2361:652,Testability,test,tests,652,"## Description; In accordance with https://github.com/MolSSI/QCElemental/pull/275, return certain files in qcschema to be pruned down by user protocols. Bump qcel to 0.24.0 (and qcng to 0.23.0 once it's minted). Note that this can't handle the wfn file b/c binary. And it can't handle `timer.dat` b/c there's no fixed place it lands (I can get it to save calling schema_wrapper directly but not for QCEngine calling psi4). ## Checklist; - [x] Tests added for any new features -- tested at qcengine test_canonical_fields; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2361
https://github.com/psi4/psi4/pull/2362:233,Availability,error,error,233,Reports indicate that the in-core `MemDF+wcombine` algorithm is not working correctly.; This PR disables the options. MemDF does not longer turn the option on automatically and users setting the option directly will get an exception error. A note is added to the DFT manual. Issues: #2351 #2279 ; Related: #2283 . ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2362
https://github.com/psi4/psi4/pull/2363:264,Testability,Test,Tests,264,## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2363
https://github.com/psi4/psi4/pull/2363:338,Testability,test,tests,338,## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2363
https://github.com/psi4/psi4/pull/2363:429,Testability,test,tests,429,## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2363
https://github.com/psi4/psi4/pull/2364:476,Availability,repair,repair,476,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This is something I was working on in the spring to find docs problems earlier (currently we'll maybe notice if they break in master) and to remove docs building responsibilities from PR submitters. It looks to still be in working order. The main contentions are likely to be how to phrase the auto-posts so that PR submitters aren't freaked out and inspired to jumble their git histories beyond repair. Below is a screenshot of what it posts to a PR. I can already see things I'd change. Opening this PR to start discussion on how the auto-post should read. <img width=""939"" alt=""Screen Shot 2021-11-23 at 2 49 00 PM"" src=""https://user-images.githubusercontent.com/2314730/143094958-32829f3e-feea-49f3-9601-cc87093276c0.png"">. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2364
https://github.com/psi4/psi4/pull/2368:343,Testability,Test,Tests,343,## Description; <!-- Provide a brief description of the PR's purpose here. -->; Basic can-get-it-in-psi for Rob Shaw's https://github.com/robashaw/libecpint . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2368
https://github.com/psi4/psi4/pull/2368:417,Testability,test,tests,417,## Description; <!-- Provide a brief description of the PR's purpose here. -->; Basic can-get-it-in-psi for Rob Shaw's https://github.com/robashaw/libecpint . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2368
https://github.com/psi4/psi4/pull/2368:508,Testability,test,tests,508,## Description; <!-- Provide a brief description of the PR's purpose here. -->; Basic can-get-it-in-psi for Rob Shaw's https://github.com/robashaw/libecpint . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2368
https://github.com/psi4/psi4/pull/2369:543,Testability,benchmark,benchmarks,543,"## Description; This is a preliminary PR for moving DIIS Python-side, submitted for general review over PsiCon and to see if Windows hates this. This is going to expedite EDIIS/ADIIS, and is a prototype for moving more code to the Python layer. ## Todos; - [x] Moves DIIS to Python. ## Questions; - [x] Where should the boundary between Python and C++ be?; - [x] Can we clean up the C-side API at all?; - [x] What kind of compile-time hit do we take by the CMake changes?; - [x] Can we get more detailed estimates on time and memory costs? My benchmarks so far say there's no hit.; - [x] The new DPD functionality is somewhat hacky, but it is DPD. Are we okay with this...?. ## Checklist; - [x] Quick tests pass. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2369
https://github.com/psi4/psi4/pull/2369:701,Testability,test,tests,701,"## Description; This is a preliminary PR for moving DIIS Python-side, submitted for general review over PsiCon and to see if Windows hates this. This is going to expedite EDIIS/ADIIS, and is a prototype for moving more code to the Python layer. ## Todos; - [x] Moves DIIS to Python. ## Questions; - [x] Where should the boundary between Python and C++ be?; - [x] Can we clean up the C-side API at all?; - [x] What kind of compile-time hit do we take by the CMake changes?; - [x] Can we get more detailed estimates on time and memory costs? My benchmarks so far say there's no hit.; - [x] The new DPD functionality is somewhat hacky, but it is DPD. Are we okay with this...?. ## Checklist; - [x] Quick tests pass. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2369
https://github.com/psi4/psi4/pull/2370:338,Energy Efficiency,charge,charges,338,"## Description; This PR has tho objectives:. 1. Make MBIS volume ratios callable from both `oeprop(...,'MBIS_VOLUME_RATIOS')` and `set scf_properties ['MBIS_VOLUME_RATIOS']`. So, solve #2299. ; 2. A recent comment suggested that the `free_atom_volume()` function was still being called even though they only requested computation of MBIS charges. This PR also ensures that this doesn't happen anymore. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [X] Solve #2299 ; - [X] Remove calling of free atom functions when volume ratios aren't requested. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [X] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2370
https://github.com/psi4/psi4/pull/2370:624,Testability,Test,Tests,624,"## Description; This PR has tho objectives:. 1. Make MBIS volume ratios callable from both `oeprop(...,'MBIS_VOLUME_RATIOS')` and `set scf_properties ['MBIS_VOLUME_RATIOS']`. So, solve #2299. ; 2. A recent comment suggested that the `free_atom_volume()` function was still being called even though they only requested computation of MBIS charges. This PR also ensures that this doesn't happen anymore. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [X] Solve #2299 ; - [X] Remove calling of free atom functions when volume ratios aren't requested. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [X] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2370
https://github.com/psi4/psi4/pull/2370:698,Testability,test,tests,698,"## Description; This PR has tho objectives:. 1. Make MBIS volume ratios callable from both `oeprop(...,'MBIS_VOLUME_RATIOS')` and `set scf_properties ['MBIS_VOLUME_RATIOS']`. So, solve #2299. ; 2. A recent comment suggested that the `free_atom_volume()` function was still being called even though they only requested computation of MBIS charges. This PR also ensures that this doesn't happen anymore. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [X] Solve #2299 ; - [X] Remove calling of free atom functions when volume ratios aren't requested. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [X] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2370
https://github.com/psi4/psi4/pull/2370:789,Testability,test,tests,789,"## Description; This PR has tho objectives:. 1. Make MBIS volume ratios callable from both `oeprop(...,'MBIS_VOLUME_RATIOS')` and `set scf_properties ['MBIS_VOLUME_RATIOS']`. So, solve #2299. ; 2. A recent comment suggested that the `free_atom_volume()` function was still being called even though they only requested computation of MBIS charges. This PR also ensures that this doesn't happen anymore. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [X] Solve #2299 ; - [X] Remove calling of free atom functions when volume ratios aren't requested. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [X] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2370
https://github.com/psi4/psi4/issues/2371:44,Testability,test,tests,44,"@loriab mentioned that we are still missing tests for ""corner cases"" like atoms, no beta electrons, etc in her talk at PsiCon. I would suggest including tests for a challenging molecule, H2+ (DFT gets it wrong). If you do this with counterpoise, you also get nice corner cases like the hydrogen atom and the proton...",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2371
https://github.com/psi4/psi4/issues/2371:153,Testability,test,tests,153,"@loriab mentioned that we are still missing tests for ""corner cases"" like atoms, no beta electrons, etc in her talk at PsiCon. I would suggest including tests for a challenging molecule, H2+ (DFT gets it wrong). If you do this with counterpoise, you also get nice corner cases like the hydrogen atom and the proton...",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2371
https://github.com/psi4/psi4/issues/2372:390,Availability,error,error,390,"If a user decides to do a DFT computation on an open-shell molecule via the Python API, say on OH (doublet), but forgets to specify the reference, there is a strange memory effect that require restarting the kernel. Here is an example. Suppose we run this code in a cell:; ```python; import psi4; psi4.geometry(""""""; O; H 1 1.0; """"""); psi4.energy(""B3LYP/def2-SVP""); ```; This will yield the error message:; ```; RuntimeError: ; Fatal Error: RHF: RHF reference is only for singlets.; Error occurred in file: /home/jovyan/psi4/psi4/src/psi4/libscf_solver/rhf.cc on line: 94; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); ```. If we try to fix the error by specifying the correct reference, i.e., by **adding a new cell** with the following code:; ```python; psi4.set_options({'REFERENCE' : 'UKS'}); psi4.energy(""B3LYP/def2-SVP""); ```; we still give the same error message. This problem does not affect HF computations.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2372
https://github.com/psi4/psi4/issues/2372:433,Availability,Error,Error,433,"If a user decides to do a DFT computation on an open-shell molecule via the Python API, say on OH (doublet), but forgets to specify the reference, there is a strange memory effect that require restarting the kernel. Here is an example. Suppose we run this code in a cell:; ```python; import psi4; psi4.geometry(""""""; O; H 1 1.0; """"""); psi4.energy(""B3LYP/def2-SVP""); ```; This will yield the error message:; ```; RuntimeError: ; Fatal Error: RHF: RHF reference is only for singlets.; Error occurred in file: /home/jovyan/psi4/psi4/src/psi4/libscf_solver/rhf.cc on line: 94; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); ```. If we try to fix the error by specifying the correct reference, i.e., by **adding a new cell** with the following code:; ```python; psi4.set_options({'REFERENCE' : 'UKS'}); psi4.energy(""B3LYP/def2-SVP""); ```; we still give the same error message. This problem does not affect HF computations.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2372
https://github.com/psi4/psi4/issues/2372:482,Availability,Error,Error,482,"If a user decides to do a DFT computation on an open-shell molecule via the Python API, say on OH (doublet), but forgets to specify the reference, there is a strange memory effect that require restarting the kernel. Here is an example. Suppose we run this code in a cell:; ```python; import psi4; psi4.geometry(""""""; O; H 1 1.0; """"""); psi4.energy(""B3LYP/def2-SVP""); ```; This will yield the error message:; ```; RuntimeError: ; Fatal Error: RHF: RHF reference is only for singlets.; Error occurred in file: /home/jovyan/psi4/psi4/src/psi4/libscf_solver/rhf.cc on line: 94; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); ```. If we try to fix the error by specifying the correct reference, i.e., by **adding a new cell** with the following code:; ```python; psi4.set_options({'REFERENCE' : 'UKS'}); psi4.energy(""B3LYP/def2-SVP""); ```; we still give the same error message. This problem does not affect HF computations.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2372
https://github.com/psi4/psi4/issues/2372:770,Availability,error,error,770,"If a user decides to do a DFT computation on an open-shell molecule via the Python API, say on OH (doublet), but forgets to specify the reference, there is a strange memory effect that require restarting the kernel. Here is an example. Suppose we run this code in a cell:; ```python; import psi4; psi4.geometry(""""""; O; H 1 1.0; """"""); psi4.energy(""B3LYP/def2-SVP""); ```; This will yield the error message:; ```; RuntimeError: ; Fatal Error: RHF: RHF reference is only for singlets.; Error occurred in file: /home/jovyan/psi4/psi4/src/psi4/libscf_solver/rhf.cc on line: 94; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); ```. If we try to fix the error by specifying the correct reference, i.e., by **adding a new cell** with the following code:; ```python; psi4.set_options({'REFERENCE' : 'UKS'}); psi4.energy(""B3LYP/def2-SVP""); ```; we still give the same error message. This problem does not affect HF computations.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2372
https://github.com/psi4/psi4/issues/2372:981,Availability,error,error,981,"If a user decides to do a DFT computation on an open-shell molecule via the Python API, say on OH (doublet), but forgets to specify the reference, there is a strange memory effect that require restarting the kernel. Here is an example. Suppose we run this code in a cell:; ```python; import psi4; psi4.geometry(""""""; O; H 1 1.0; """"""); psi4.energy(""B3LYP/def2-SVP""); ```; This will yield the error message:; ```; RuntimeError: ; Fatal Error: RHF: RHF reference is only for singlets.; Error occurred in file: /home/jovyan/psi4/psi4/src/psi4/libscf_solver/rhf.cc on line: 94; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); ```. If we try to fix the error by specifying the correct reference, i.e., by **adding a new cell** with the following code:; ```python; psi4.set_options({'REFERENCE' : 'UKS'}); psi4.energy(""B3LYP/def2-SVP""); ```; we still give the same error message. This problem does not affect HF computations.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2372
https://github.com/psi4/psi4/issues/2372:339,Energy Efficiency,energy,energy,339,"If a user decides to do a DFT computation on an open-shell molecule via the Python API, say on OH (doublet), but forgets to specify the reference, there is a strange memory effect that require restarting the kernel. Here is an example. Suppose we run this code in a cell:; ```python; import psi4; psi4.geometry(""""""; O; H 1 1.0; """"""); psi4.energy(""B3LYP/def2-SVP""); ```; This will yield the error message:; ```; RuntimeError: ; Fatal Error: RHF: RHF reference is only for singlets.; Error occurred in file: /home/jovyan/psi4/psi4/src/psi4/libscf_solver/rhf.cc on line: 94; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); ```. If we try to fix the error by specifying the correct reference, i.e., by **adding a new cell** with the following code:; ```python; psi4.set_options({'REFERENCE' : 'UKS'}); psi4.energy(""B3LYP/def2-SVP""); ```; we still give the same error message. This problem does not affect HF computations.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2372
https://github.com/psi4/psi4/issues/2372:927,Energy Efficiency,energy,energy,927,"If a user decides to do a DFT computation on an open-shell molecule via the Python API, say on OH (doublet), but forgets to specify the reference, there is a strange memory effect that require restarting the kernel. Here is an example. Suppose we run this code in a cell:; ```python; import psi4; psi4.geometry(""""""; O; H 1 1.0; """"""); psi4.energy(""B3LYP/def2-SVP""); ```; This will yield the error message:; ```; RuntimeError: ; Fatal Error: RHF: RHF reference is only for singlets.; Error occurred in file: /home/jovyan/psi4/psi4/src/psi4/libscf_solver/rhf.cc on line: 94; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); ```. If we try to fix the error by specifying the correct reference, i.e., by **adding a new cell** with the following code:; ```python; psi4.set_options({'REFERENCE' : 'UKS'}); psi4.energy(""B3LYP/def2-SVP""); ```; we still give the same error message. This problem does not affect HF computations.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2372
https://github.com/psi4/psi4/issues/2372:396,Integrability,message,message,396,"If a user decides to do a DFT computation on an open-shell molecule via the Python API, say on OH (doublet), but forgets to specify the reference, there is a strange memory effect that require restarting the kernel. Here is an example. Suppose we run this code in a cell:; ```python; import psi4; psi4.geometry(""""""; O; H 1 1.0; """"""); psi4.energy(""B3LYP/def2-SVP""); ```; This will yield the error message:; ```; RuntimeError: ; Fatal Error: RHF: RHF reference is only for singlets.; Error occurred in file: /home/jovyan/psi4/psi4/src/psi4/libscf_solver/rhf.cc on line: 94; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); ```. If we try to fix the error by specifying the correct reference, i.e., by **adding a new cell** with the following code:; ```python; psi4.set_options({'REFERENCE' : 'UKS'}); psi4.energy(""B3LYP/def2-SVP""); ```; we still give the same error message. This problem does not affect HF computations.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2372
https://github.com/psi4/psi4/issues/2372:987,Integrability,message,message,987,"If a user decides to do a DFT computation on an open-shell molecule via the Python API, say on OH (doublet), but forgets to specify the reference, there is a strange memory effect that require restarting the kernel. Here is an example. Suppose we run this code in a cell:; ```python; import psi4; psi4.geometry(""""""; O; H 1 1.0; """"""); psi4.energy(""B3LYP/def2-SVP""); ```; This will yield the error message:; ```; RuntimeError: ; Fatal Error: RHF: RHF reference is only for singlets.; Error occurred in file: /home/jovyan/psi4/psi4/src/psi4/libscf_solver/rhf.cc on line: 94; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); ```. If we try to fix the error by specifying the correct reference, i.e., by **adding a new cell** with the following code:; ```python; psi4.set_options({'REFERENCE' : 'UKS'}); psi4.energy(""B3LYP/def2-SVP""); ```; we still give the same error message. This problem does not affect HF computations.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2372
https://github.com/psi4/psi4/pull/2373:309,Testability,Test,Tests,309,## Description; <!-- Provide a brief description of the PR's purpose here. -->; Closes #2321: removes spurious unused basis. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2373
https://github.com/psi4/psi4/pull/2373:383,Testability,test,tests,383,## Description; <!-- Provide a brief description of the PR's purpose here. -->; Closes #2321: removes spurious unused basis. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2373
https://github.com/psi4/psi4/pull/2373:474,Testability,test,tests,474,## Description; <!-- Provide a brief description of the PR's purpose here. -->; Closes #2321: removes spurious unused basis. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2373
https://github.com/psi4/psi4/issues/2374:197,Availability,error,error,197,"Now that Psi4 uses LIBINT2, one can enable support for the Yukawa kernel for range-separated functionals from Libxc, such as CAMY-B3LYP. The code needs to be generalized so that in addition to the error function kernel, `erf_coulomb`, one can also use the Yukawa kernel, `yukawa`, in the LIBINT2 call.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2374
https://github.com/psi4/psi4/pull/2375:227,Availability,avail,available,227,"## Description; This PR exposes `Vector.clone()` to the Python layer, a generally useful function and one I specifically need for PyDIIS. Sadly, positive LoC this time. The cast to `shared_ptr` is necessary for the clone to be available Py-side because when we pybound `Vector`, we specified `std::shared_ptr<Vector>` as its holder type. I imagine this is an example of ""[holder types must be applied consistently](https://pybind11.readthedocs.io/en/stable/advanced/smart_ptrs.html#std-shared-ptr.)."" Let's not talk about how long it took for me to implicate holder types in my test originally failing. ## Todos; - [x] `Vector.clone` available on the Python layer. ## Checklist; - [x] Tests added for any new features. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2375
https://github.com/psi4/psi4/pull/2375:634,Availability,avail,available,634,"## Description; This PR exposes `Vector.clone()` to the Python layer, a generally useful function and one I specifically need for PyDIIS. Sadly, positive LoC this time. The cast to `shared_ptr` is necessary for the clone to be available Py-side because when we pybound `Vector`, we specified `std::shared_ptr<Vector>` as its holder type. I imagine this is an example of ""[holder types must be applied consistently](https://pybind11.readthedocs.io/en/stable/advanced/smart_ptrs.html#std-shared-ptr.)."" Let's not talk about how long it took for me to implicate holder types in my test originally failing. ## Todos; - [x] `Vector.clone` available on the Python layer. ## Checklist; - [x] Tests added for any new features. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2375
https://github.com/psi4/psi4/pull/2375:24,Security,expose,exposes,24,"## Description; This PR exposes `Vector.clone()` to the Python layer, a generally useful function and one I specifically need for PyDIIS. Sadly, positive LoC this time. The cast to `shared_ptr` is necessary for the clone to be available Py-side because when we pybound `Vector`, we specified `std::shared_ptr<Vector>` as its holder type. I imagine this is an example of ""[holder types must be applied consistently](https://pybind11.readthedocs.io/en/stable/advanced/smart_ptrs.html#std-shared-ptr.)."" Let's not talk about how long it took for me to implicate holder types in my test originally failing. ## Todos; - [x] `Vector.clone` available on the Python layer. ## Checklist; - [x] Tests added for any new features. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2375
https://github.com/psi4/psi4/pull/2375:578,Testability,test,test,578,"## Description; This PR exposes `Vector.clone()` to the Python layer, a generally useful function and one I specifically need for PyDIIS. Sadly, positive LoC this time. The cast to `shared_ptr` is necessary for the clone to be available Py-side because when we pybound `Vector`, we specified `std::shared_ptr<Vector>` as its holder type. I imagine this is an example of ""[holder types must be applied consistently](https://pybind11.readthedocs.io/en/stable/advanced/smart_ptrs.html#std-shared-ptr.)."" Let's not talk about how long it took for me to implicate holder types in my test originally failing. ## Todos; - [x] `Vector.clone` available on the Python layer. ## Checklist; - [x] Tests added for any new features. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2375
https://github.com/psi4/psi4/pull/2375:685,Testability,Test,Tests,685,"## Description; This PR exposes `Vector.clone()` to the Python layer, a generally useful function and one I specifically need for PyDIIS. Sadly, positive LoC this time. The cast to `shared_ptr` is necessary for the clone to be available Py-side because when we pybound `Vector`, we specified `std::shared_ptr<Vector>` as its holder type. I imagine this is an example of ""[holder types must be applied consistently](https://pybind11.readthedocs.io/en/stable/advanced/smart_ptrs.html#std-shared-ptr.)."" Let's not talk about how long it took for me to implicate holder types in my test originally failing. ## Todos; - [x] `Vector.clone` available on the Python layer. ## Checklist; - [x] Tests added for any new features. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2375
https://github.com/psi4/psi4/pull/2376:35,Testability,test,tests,35,"## Description; `compare_fcidumps` tests to 1e-10, so let's converge to 1e-10. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2376
https://github.com/psi4/psi4/pull/2377:131,Performance,optimiz,optimization,131,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This PR solves an issue with the use of the native optimization flags, which are different in various compilers and often get misinterpreted. It looks like the best solution is to first check the brand of the compiler, and then try whether the brand-specific flag(s) work. Related issues https://gitlab.com/libxc/libxc/-/issues/361 and #2023. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2377
https://github.com/psi4/psi4/pull/2377:607,Testability,Test,Tests,607,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This PR solves an issue with the use of the native optimization flags, which are different in various compilers and often get misinterpreted. It looks like the best solution is to first check the brand of the compiler, and then try whether the brand-specific flag(s) work. Related issues https://gitlab.com/libxc/libxc/-/issues/361 and #2023. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2377
https://github.com/psi4/psi4/pull/2377:681,Testability,test,tests,681,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This PR solves an issue with the use of the native optimization flags, which are different in various compilers and often get misinterpreted. It looks like the best solution is to first check the brand of the compiler, and then try whether the brand-specific flag(s) work. Related issues https://gitlab.com/libxc/libxc/-/issues/361 and #2023. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2377
https://github.com/psi4/psi4/pull/2377:772,Testability,test,tests,772,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This PR solves an issue with the use of the native optimization flags, which are different in various compilers and often get misinterpreted. It looks like the best solution is to first check the brand of the compiler, and then try whether the brand-specific flag(s) work. Related issues https://gitlab.com/libxc/libxc/-/issues/361 and #2023. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2377
https://github.com/psi4/psi4/pull/2378:425,Energy Efficiency,schedul,scheduling,425,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Simple performance improvement for the DLPNO-MP2 algorithm. For DLPNO-MP2 computations on many-core machines, I see speedups around 20%. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Clone (rather than create from scratch) a `TwoBodyAOInt` for each thread; - [x] More appropriate OMP scheduling. ## Checklist; - [x] DLPNO tests still pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2378
https://github.com/psi4/psi4/pull/2378:87,Performance,perform,performance,87,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Simple performance improvement for the DLPNO-MP2 algorithm. For DLPNO-MP2 computations on many-core machines, I see speedups around 20%. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Clone (rather than create from scratch) a `TwoBodyAOInt` for each thread; - [x] More appropriate OMP scheduling. ## Checklist; - [x] DLPNO tests still pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2378
https://github.com/psi4/psi4/pull/2378:463,Testability,test,tests,463,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Simple performance improvement for the DLPNO-MP2 algorithm. For DLPNO-MP2 computations on many-core machines, I see speedups around 20%. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Clone (rather than create from scratch) a `TwoBodyAOInt` for each thread; - [x] More appropriate OMP scheduling. ## Checklist; - [x] DLPNO tests still pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2378
https://github.com/psi4/psi4/pull/2378:80,Usability,Simpl,Simple,80,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Simple performance improvement for the DLPNO-MP2 algorithm. For DLPNO-MP2 computations on many-core machines, I see speedups around 20%. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Clone (rather than create from scratch) a `TwoBodyAOInt` for each thread; - [x] More appropriate OMP scheduling. ## Checklist; - [x] DLPNO tests still pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2378
https://github.com/psi4/psi4/issues/2379:198,Security,access,access,198,Consolidate https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fisapt/local2.cc into https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/local.cc. The goal is to get straightforward access to the IBO localizer without the need to go into the fsapt name space.; A new subclass would need to be created for IBO. Tentatively labeled as _new_dev_ but not very familiar with the code base.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2379
https://github.com/psi4/psi4/issues/2380:22,Deployability,release,released,22,"I realize it was only released recently, but is there any possibility of supporting the [DM21 functionals](https://github.com/deepmind/deepmind-research/tree/master/density_functional_approximation_dm21) ([paper](https://doi.org/10.1126/science.abj6511))?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2380
https://github.com/psi4/psi4/pull/2381:85,Availability,redundant,redundant,85,"## Description; This PR removes some convergence checks in the `dct` module that are redundant (when formulated correctly) and currently not implemented correctly. In the current `dct` code, my threaded computations with near linear dependencies were taking a variable number of iterations to converge, due to the condition `update_scf_density_RHF() < orbitals_threshold_` being false. That check is _intended_ to enforce convergence of the orbitals, which change iteration-to-iteration. `update_SCF_density_RHF` returns a measure of how much the reference density changed but does not treat it with an orthogonalizer, so in the near linearly-dependent case, numerical noise leads to the computation proceeding even after all other convergence metrics are flat. Given the choice between fixing the check or removing it, this PR removes it.; * In the case where orbitals are optimized to _satisfy a commutator equation_, all of our orbital convergence metrics are motivated by SCF. We already have the SCF check for small orbital residual elsewhere in the code. We don't check that the absolute change in the density is small in the SCF case, so we shouldn't check it here, either.; * In the case where orbitals are optimized to _minimize the energy_, there is no theoretical justification for this check. We have existing checks that the residual of the orbital gradient is small. ## Todos; - [x] Removes an unnecessary, buggy `dct` convergence metric. ## Checklist; - [x] `dct` tests still pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2381
https://github.com/psi4/psi4/pull/2381:233,Integrability,depend,dependencies,233,"## Description; This PR removes some convergence checks in the `dct` module that are redundant (when formulated correctly) and currently not implemented correctly. In the current `dct` code, my threaded computations with near linear dependencies were taking a variable number of iterations to converge, due to the condition `update_scf_density_RHF() < orbitals_threshold_` being false. That check is _intended_ to enforce convergence of the orbitals, which change iteration-to-iteration. `update_SCF_density_RHF` returns a measure of how much the reference density changed but does not treat it with an orthogonalizer, so in the near linearly-dependent case, numerical noise leads to the computation proceeding even after all other convergence metrics are flat. Given the choice between fixing the check or removing it, this PR removes it.; * In the case where orbitals are optimized to _satisfy a commutator equation_, all of our orbital convergence metrics are motivated by SCF. We already have the SCF check for small orbital residual elsewhere in the code. We don't check that the absolute change in the density is small in the SCF case, so we shouldn't check it here, either.; * In the case where orbitals are optimized to _minimize the energy_, there is no theoretical justification for this check. We have existing checks that the residual of the orbital gradient is small. ## Todos; - [x] Removes an unnecessary, buggy `dct` convergence metric. ## Checklist; - [x] `dct` tests still pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2381
https://github.com/psi4/psi4/pull/2381:643,Integrability,depend,dependent,643,"## Description; This PR removes some convergence checks in the `dct` module that are redundant (when formulated correctly) and currently not implemented correctly. In the current `dct` code, my threaded computations with near linear dependencies were taking a variable number of iterations to converge, due to the condition `update_scf_density_RHF() < orbitals_threshold_` being false. That check is _intended_ to enforce convergence of the orbitals, which change iteration-to-iteration. `update_SCF_density_RHF` returns a measure of how much the reference density changed but does not treat it with an orthogonalizer, so in the near linearly-dependent case, numerical noise leads to the computation proceeding even after all other convergence metrics are flat. Given the choice between fixing the check or removing it, this PR removes it.; * In the case where orbitals are optimized to _satisfy a commutator equation_, all of our orbital convergence metrics are motivated by SCF. We already have the SCF check for small orbital residual elsewhere in the code. We don't check that the absolute change in the density is small in the SCF case, so we shouldn't check it here, either.; * In the case where orbitals are optimized to _minimize the energy_, there is no theoretical justification for this check. We have existing checks that the residual of the orbital gradient is small. ## Todos; - [x] Removes an unnecessary, buggy `dct` convergence metric. ## Checklist; - [x] `dct` tests still pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2381
https://github.com/psi4/psi4/pull/2381:260,Modifiability,variab,variable,260,"## Description; This PR removes some convergence checks in the `dct` module that are redundant (when formulated correctly) and currently not implemented correctly. In the current `dct` code, my threaded computations with near linear dependencies were taking a variable number of iterations to converge, due to the condition `update_scf_density_RHF() < orbitals_threshold_` being false. That check is _intended_ to enforce convergence of the orbitals, which change iteration-to-iteration. `update_SCF_density_RHF` returns a measure of how much the reference density changed but does not treat it with an orthogonalizer, so in the near linearly-dependent case, numerical noise leads to the computation proceeding even after all other convergence metrics are flat. Given the choice between fixing the check or removing it, this PR removes it.; * In the case where orbitals are optimized to _satisfy a commutator equation_, all of our orbital convergence metrics are motivated by SCF. We already have the SCF check for small orbital residual elsewhere in the code. We don't check that the absolute change in the density is small in the SCF case, so we shouldn't check it here, either.; * In the case where orbitals are optimized to _minimize the energy_, there is no theoretical justification for this check. We have existing checks that the residual of the orbital gradient is small. ## Todos; - [x] Removes an unnecessary, buggy `dct` convergence metric. ## Checklist; - [x] `dct` tests still pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2381
https://github.com/psi4/psi4/pull/2381:874,Performance,optimiz,optimized,874,"## Description; This PR removes some convergence checks in the `dct` module that are redundant (when formulated correctly) and currently not implemented correctly. In the current `dct` code, my threaded computations with near linear dependencies were taking a variable number of iterations to converge, due to the condition `update_scf_density_RHF() < orbitals_threshold_` being false. That check is _intended_ to enforce convergence of the orbitals, which change iteration-to-iteration. `update_SCF_density_RHF` returns a measure of how much the reference density changed but does not treat it with an orthogonalizer, so in the near linearly-dependent case, numerical noise leads to the computation proceeding even after all other convergence metrics are flat. Given the choice between fixing the check or removing it, this PR removes it.; * In the case where orbitals are optimized to _satisfy a commutator equation_, all of our orbital convergence metrics are motivated by SCF. We already have the SCF check for small orbital residual elsewhere in the code. We don't check that the absolute change in the density is small in the SCF case, so we shouldn't check it here, either.; * In the case where orbitals are optimized to _minimize the energy_, there is no theoretical justification for this check. We have existing checks that the residual of the orbital gradient is small. ## Todos; - [x] Removes an unnecessary, buggy `dct` convergence metric. ## Checklist; - [x] `dct` tests still pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2381
https://github.com/psi4/psi4/pull/2381:1215,Performance,optimiz,optimized,1215,"## Description; This PR removes some convergence checks in the `dct` module that are redundant (when formulated correctly) and currently not implemented correctly. In the current `dct` code, my threaded computations with near linear dependencies were taking a variable number of iterations to converge, due to the condition `update_scf_density_RHF() < orbitals_threshold_` being false. That check is _intended_ to enforce convergence of the orbitals, which change iteration-to-iteration. `update_SCF_density_RHF` returns a measure of how much the reference density changed but does not treat it with an orthogonalizer, so in the near linearly-dependent case, numerical noise leads to the computation proceeding even after all other convergence metrics are flat. Given the choice between fixing the check or removing it, this PR removes it.; * In the case where orbitals are optimized to _satisfy a commutator equation_, all of our orbital convergence metrics are motivated by SCF. We already have the SCF check for small orbital residual elsewhere in the code. We don't check that the absolute change in the density is small in the SCF case, so we shouldn't check it here, either.; * In the case where orbitals are optimized to _minimize the energy_, there is no theoretical justification for this check. We have existing checks that the residual of the orbital gradient is small. ## Todos; - [x] Removes an unnecessary, buggy `dct` convergence metric. ## Checklist; - [x] `dct` tests still pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2381
https://github.com/psi4/psi4/pull/2381:85,Safety,redund,redundant,85,"## Description; This PR removes some convergence checks in the `dct` module that are redundant (when formulated correctly) and currently not implemented correctly. In the current `dct` code, my threaded computations with near linear dependencies were taking a variable number of iterations to converge, due to the condition `update_scf_density_RHF() < orbitals_threshold_` being false. That check is _intended_ to enforce convergence of the orbitals, which change iteration-to-iteration. `update_SCF_density_RHF` returns a measure of how much the reference density changed but does not treat it with an orthogonalizer, so in the near linearly-dependent case, numerical noise leads to the computation proceeding even after all other convergence metrics are flat. Given the choice between fixing the check or removing it, this PR removes it.; * In the case where orbitals are optimized to _satisfy a commutator equation_, all of our orbital convergence metrics are motivated by SCF. We already have the SCF check for small orbital residual elsewhere in the code. We don't check that the absolute change in the density is small in the SCF case, so we shouldn't check it here, either.; * In the case where orbitals are optimized to _minimize the energy_, there is no theoretical justification for this check. We have existing checks that the residual of the orbital gradient is small. ## Todos; - [x] Removes an unnecessary, buggy `dct` convergence metric. ## Checklist; - [x] `dct` tests still pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2381
https://github.com/psi4/psi4/pull/2381:1479,Testability,test,tests,1479,"## Description; This PR removes some convergence checks in the `dct` module that are redundant (when formulated correctly) and currently not implemented correctly. In the current `dct` code, my threaded computations with near linear dependencies were taking a variable number of iterations to converge, due to the condition `update_scf_density_RHF() < orbitals_threshold_` being false. That check is _intended_ to enforce convergence of the orbitals, which change iteration-to-iteration. `update_SCF_density_RHF` returns a measure of how much the reference density changed but does not treat it with an orthogonalizer, so in the near linearly-dependent case, numerical noise leads to the computation proceeding even after all other convergence metrics are flat. Given the choice between fixing the check or removing it, this PR removes it.; * In the case where orbitals are optimized to _satisfy a commutator equation_, all of our orbital convergence metrics are motivated by SCF. We already have the SCF check for small orbital residual elsewhere in the code. We don't check that the absolute change in the density is small in the SCF case, so we shouldn't check it here, either.; * In the case where orbitals are optimized to _minimize the energy_, there is no theoretical justification for this check. We have existing checks that the residual of the orbital gradient is small. ## Todos; - [x] Removes an unnecessary, buggy `dct` convergence metric. ## Checklist; - [x] `dct` tests still pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2381
https://github.com/psi4/psi4/pull/2382:210,Performance,bottleneck,bottleneck,210,## Description; Adds a basic memory check for the construction of the `Qso` DF Tensor.; This is e.g. needed for large (~1k bfs) (FNO)-DF-CC calculations where the tensor construction may become the main memory bottleneck. Closes #1372 . ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2382
https://github.com/psi4/psi4/pull/2382:291,Testability,test,tests,291,## Description; Adds a basic memory check for the construction of the `Qso` DF Tensor.; This is e.g. needed for large (~1k bfs) (FNO)-DF-CC calculations where the tensor construction may become the main memory bottleneck. Closes #1372 . ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2382
https://github.com/psi4/psi4/pull/2382:382,Testability,test,tests,382,## Description; Adds a basic memory check for the construction of the `Qso` DF Tensor.; This is e.g. needed for large (~1k bfs) (FNO)-DF-CC calculations where the tensor construction may become the main memory bottleneck. Closes #1372 . ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2382
https://github.com/psi4/psi4/pull/2383:58,Modifiability,variab,variables,58,"## Description; This PR does cleanup in `dmrgscf` to mark variables const, remove non-RAII dynamic memory, and switch from pointers to references where possible. This PR is in preparation for updating the deprecated molden call. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] DMRG memory and `const` cleanup. ## Checklist; - [x] DMRG tests still pass. ## Status; - [x] Ready for review; - [x] Ready for merge **squash**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2383
https://github.com/psi4/psi4/pull/2383:394,Testability,test,tests,394,"## Description; This PR does cleanup in `dmrgscf` to mark variables const, remove non-RAII dynamic memory, and switch from pointers to references where possible. This PR is in preparation for updating the deprecated molden call. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] DMRG memory and `const` cleanup. ## Checklist; - [x] DMRG tests still pass. ## Status; - [x] Ready for review; - [x] Ready for merge **squash**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2383
https://github.com/psi4/psi4/pull/2385:176,Testability,test,tests,176,## Description; Addresses issue #2379. IBOLocalizer is a MO localizer that exists in the FISAPT branch. Moving it to libmints cleans up the code. ## Checklist; - [x] All fsapt tests run; - [x] FSAPT tests passing; - [x] FSAPT-D tests passing. ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2385
https://github.com/psi4/psi4/pull/2385:199,Testability,test,tests,199,## Description; Addresses issue #2379. IBOLocalizer is a MO localizer that exists in the FISAPT branch. Moving it to libmints cleans up the code. ## Checklist; - [x] All fsapt tests run; - [x] FSAPT tests passing; - [x] FSAPT-D tests passing. ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2385
https://github.com/psi4/psi4/pull/2385:228,Testability,test,tests,228,## Description; Addresses issue #2379. IBOLocalizer is a MO localizer that exists in the FISAPT branch. Moving it to libmints cleans up the code. ## Checklist; - [x] All fsapt tests run; - [x] FSAPT tests passing; - [x] FSAPT-D tests passing. ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2385
https://github.com/psi4/psi4/pull/2386:49,Integrability,interface,interface,49,"## Description; Per issue #2374, this PR adds an interface to Yukawa ERIs from Libint2. ## Questions; - [x] How would I test my new code? (How are erf kernels tested?); - [x] Do I need to add functions in MintsHelper for the Yukawa kernel?. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2386
https://github.com/psi4/psi4/pull/2386:120,Testability,test,test,120,"## Description; Per issue #2374, this PR adds an interface to Yukawa ERIs from Libint2. ## Questions; - [x] How would I test my new code? (How are erf kernels tested?); - [x] Do I need to add functions in MintsHelper for the Yukawa kernel?. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2386
https://github.com/psi4/psi4/pull/2386:159,Testability,test,tested,159,"## Description; Per issue #2374, this PR adds an interface to Yukawa ERIs from Libint2. ## Questions; - [x] How would I test my new code? (How are erf kernels tested?); - [x] Do I need to add functions in MintsHelper for the Yukawa kernel?. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2386
https://github.com/psi4/psi4/pull/2387:153,Integrability,depend,dependencies,153,"## Description; When trying to build from source, I had problems with Pybind11 headers not being found. This is most likely due to #2369 introducing new dependencies on PB11 being introduced that the build system is unaware of. This PR fixes the problem on my Linux/ICPC setup, but I'm open to suggestions if there's a more up to date way of telling CMake about these new dependencies. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2387
https://github.com/psi4/psi4/pull/2387:372,Integrability,depend,dependencies,372,"## Description; When trying to build from source, I had problems with Pybind11 headers not being found. This is most likely due to #2369 introducing new dependencies on PB11 being introduced that the build system is unaware of. This PR fixes the problem on my Linux/ICPC setup, but I'm open to suggestions if there's a more up to date way of telling CMake about these new dependencies. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2387
https://github.com/psi4/psi4/pull/2387:440,Testability,test,tests,440,"## Description; When trying to build from source, I had problems with Pybind11 headers not being found. This is most likely due to #2369 introducing new dependencies on PB11 being introduced that the build system is unaware of. This PR fixes the problem on my Linux/ICPC setup, but I'm open to suggestions if there's a more up to date way of telling CMake about these new dependencies. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2387
https://github.com/psi4/psi4/pull/2387:531,Testability,test,tests,531,"## Description; When trying to build from source, I had problems with Pybind11 headers not being found. This is most likely due to #2369 introducing new dependencies on PB11 being introduced that the build system is unaware of. This PR fixes the problem on my Linux/ICPC setup, but I'm open to suggestions if there's a more up to date way of telling CMake about these new dependencies. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2387
https://github.com/psi4/psi4/pull/2388:774,Deployability,Release,Release,774,"## Description; Adds libint2 one electron integrals. A few integrals still use the hand-written code for now, but they will be addressed in subsequent PRs, as linked below.; ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Add libint2 one electron integrals.; - [x] Convert all double shell loops to use Onebody object's shell pair list instead.; - [x] Convert multipole potential ints to use L2 engines or McMurchie-Davidson recursions (#2414); - [x] Convert X2C ints to use L2 engines.; - [x] Convert AngularMomentum ints to use L2 engines. (#2414); - [x] Delete unused hand written code for recursions and integrals. (#2414); - [x] Document changes; - [x] Build Windows Libint2 Conda package. ## New Features for Release Notes; - Screening of one electron integrals to improve efficiency of PCM, EFP, and embedding methods; - Parallelized PCM integral computations, which are typically rate-limiting for implicit solvent SCF. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2388
https://github.com/psi4/psi4/pull/2388:1007,Testability,Test,Tests,1007,"## Description; Adds libint2 one electron integrals. A few integrals still use the hand-written code for now, but they will be addressed in subsequent PRs, as linked below.; ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Add libint2 one electron integrals.; - [x] Convert all double shell loops to use Onebody object's shell pair list instead.; - [x] Convert multipole potential ints to use L2 engines or McMurchie-Davidson recursions (#2414); - [x] Convert X2C ints to use L2 engines.; - [x] Convert AngularMomentum ints to use L2 engines. (#2414); - [x] Delete unused hand written code for recursions and integrals. (#2414); - [x] Document changes; - [x] Build Windows Libint2 Conda package. ## New Features for Release Notes; - Screening of one electron integrals to improve efficiency of PCM, EFP, and embedding methods; - Parallelized PCM integral computations, which are typically rate-limiting for implicit solvent SCF. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2388
https://github.com/psi4/psi4/pull/2388:1081,Testability,test,tests,1081,"## Description; Adds libint2 one electron integrals. A few integrals still use the hand-written code for now, but they will be addressed in subsequent PRs, as linked below.; ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Add libint2 one electron integrals.; - [x] Convert all double shell loops to use Onebody object's shell pair list instead.; - [x] Convert multipole potential ints to use L2 engines or McMurchie-Davidson recursions (#2414); - [x] Convert X2C ints to use L2 engines.; - [x] Convert AngularMomentum ints to use L2 engines. (#2414); - [x] Delete unused hand written code for recursions and integrals. (#2414); - [x] Document changes; - [x] Build Windows Libint2 Conda package. ## New Features for Release Notes; - Screening of one electron integrals to improve efficiency of PCM, EFP, and embedding methods; - Parallelized PCM integral computations, which are typically rate-limiting for implicit solvent SCF. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2388
https://github.com/psi4/psi4/pull/2388:1172,Testability,test,tests,1172,"## Description; Adds libint2 one electron integrals. A few integrals still use the hand-written code for now, but they will be addressed in subsequent PRs, as linked below.; ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Add libint2 one electron integrals.; - [x] Convert all double shell loops to use Onebody object's shell pair list instead.; - [x] Convert multipole potential ints to use L2 engines or McMurchie-Davidson recursions (#2414); - [x] Convert X2C ints to use L2 engines.; - [x] Convert AngularMomentum ints to use L2 engines. (#2414); - [x] Delete unused hand written code for recursions and integrals. (#2414); - [x] Document changes; - [x] Build Windows Libint2 Conda package. ## New Features for Release Notes; - Screening of one electron integrals to improve efficiency of PCM, EFP, and embedding methods; - Parallelized PCM integral computations, which are typically rate-limiting for implicit solvent SCF. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2388
https://github.com/psi4/psi4/pull/2389:108,Availability,error,error,108,## Description; <!-- Provide a brief description of the PR's purpose here. -->; Looks like there is a small error in the VMFC Hessian. The `sign` variable is changed for VMFC but it is not used to multiply the Hessian. Compare this with the gradient above and the energy in line 661. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2389
https://github.com/psi4/psi4/pull/2389:264,Energy Efficiency,energy,energy,264,## Description; <!-- Provide a brief description of the PR's purpose here. -->; Looks like there is a small error in the VMFC Hessian. The `sign` variable is changed for VMFC but it is not used to multiply the Hessian. Compare this with the gradient above and the energy in line 661. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2389
https://github.com/psi4/psi4/pull/2389:146,Modifiability,variab,variable,146,## Description; <!-- Provide a brief description of the PR's purpose here. -->; Looks like there is a small error in the VMFC Hessian. The `sign` variable is changed for VMFC but it is not used to multiply the Hessian. Compare this with the gradient above and the energy in line 661. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2389
https://github.com/psi4/psi4/pull/2389:468,Testability,Test,Tests,468,## Description; <!-- Provide a brief description of the PR's purpose here. -->; Looks like there is a small error in the VMFC Hessian. The `sign` variable is changed for VMFC but it is not used to multiply the Hessian. Compare this with the gradient above and the energy in line 661. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2389
https://github.com/psi4/psi4/pull/2389:542,Testability,test,tests,542,## Description; <!-- Provide a brief description of the PR's purpose here. -->; Looks like there is a small error in the VMFC Hessian. The `sign` variable is changed for VMFC but it is not used to multiply the Hessian. Compare this with the gradient above and the energy in line 661. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2389
https://github.com/psi4/psi4/pull/2389:633,Testability,test,tests,633,## Description; <!-- Provide a brief description of the PR's purpose here. -->; Looks like there is a small error in the VMFC Hessian. The `sign` variable is changed for VMFC but it is not used to multiply the Hessian. Compare this with the gradient above and the energy in line 661. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2389
https://github.com/psi4/psi4/issues/2390:183,Availability,error,error,183,"Hi psi4 experts. psi4 shows promising functions and I am trying to install psi4 on my Ubuntu 20 with the command. `conda create -n p4env python=x.x psi4 -c psi4/label/dev`. But I got error messages:; ```. UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions. Package python conflicts for:; psi4 -> python[version='2.7.*|3.5.*|3.6.*|>=2.7,<2.8.0a0|>=3.5,<3.6.0a0|>=3.6,<3.7.0a0|>=3.7,<3.8.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0']; psi4 -> libxc[version='>=5.1.5,<6.0a0'] -> python[version='3.4.*|>=3.10,<3.11.0a0|>=3.6|>=3.5|>=3.7|>=3.6.0|>=3.6,<3.7|>=3.4']; python=3.9The following specifications were found to be incompatible with your system:. - feature:/linux-64::__glibc==2.31=0; - feature:|@/linux-64::__glibc==2.31=0; - psi4 -> libgcc-ng[version='>=7.5.0'] -> __glibc[version='>=2.17']. Your installed version is: 2.31. Note that strict channel priority may have removed packages required for satisfiability.; ```. I am new to psi4 and I hope someone can help me to solve this problem. Thanks!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2390
https://github.com/psi4/psi4/issues/2390:341,Availability,Avail,Available,341,"Hi psi4 experts. psi4 shows promising functions and I am trying to install psi4 on my Ubuntu 20 with the command. `conda create -n p4env python=x.x psi4 -c psi4/label/dev`. But I got error messages:; ```. UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions. Package python conflicts for:; psi4 -> python[version='2.7.*|3.5.*|3.6.*|>=2.7,<2.8.0a0|>=3.5,<3.6.0a0|>=3.6,<3.7.0a0|>=3.7,<3.8.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0']; psi4 -> libxc[version='>=5.1.5,<6.0a0'] -> python[version='3.4.*|>=3.10,<3.11.0a0|>=3.6|>=3.5|>=3.7|>=3.6.0|>=3.6,<3.7|>=3.4']; python=3.9The following specifications were found to be incompatible with your system:. - feature:/linux-64::__glibc==2.31=0; - feature:|@/linux-64::__glibc==2.31=0; - psi4 -> libgcc-ng[version='>=7.5.0'] -> __glibc[version='>=2.17']. Your installed version is: 2.31. Note that strict channel priority may have removed packages required for satisfiability.; ```. I am new to psi4 and I hope someone can help me to solve this problem. Thanks!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2390
https://github.com/psi4/psi4/issues/2390:67,Deployability,install,install,67,"Hi psi4 experts. psi4 shows promising functions and I am trying to install psi4 on my Ubuntu 20 with the command. `conda create -n p4env python=x.x psi4 -c psi4/label/dev`. But I got error messages:; ```. UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions. Package python conflicts for:; psi4 -> python[version='2.7.*|3.5.*|3.6.*|>=2.7,<2.8.0a0|>=3.5,<3.6.0a0|>=3.6,<3.7.0a0|>=3.7,<3.8.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0']; psi4 -> libxc[version='>=5.1.5,<6.0a0'] -> python[version='3.4.*|>=3.10,<3.11.0a0|>=3.6|>=3.5|>=3.7|>=3.6.0|>=3.6,<3.7|>=3.4']; python=3.9The following specifications were found to be incompatible with your system:. - feature:/linux-64::__glibc==2.31=0; - feature:|@/linux-64::__glibc==2.31=0; - psi4 -> libgcc-ng[version='>=7.5.0'] -> __glibc[version='>=2.17']. Your installed version is: 2.31. Note that strict channel priority may have removed packages required for satisfiability.; ```. I am new to psi4 and I hope someone can help me to solve this problem. Thanks!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2390
https://github.com/psi4/psi4/issues/2390:896,Deployability,install,installed,896,"Hi psi4 experts. psi4 shows promising functions and I am trying to install psi4 on my Ubuntu 20 with the command. `conda create -n p4env python=x.x psi4 -c psi4/label/dev`. But I got error messages:; ```. UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions. Package python conflicts for:; psi4 -> python[version='2.7.*|3.5.*|3.6.*|>=2.7,<2.8.0a0|>=3.5,<3.6.0a0|>=3.6,<3.7.0a0|>=3.7,<3.8.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0']; psi4 -> libxc[version='>=5.1.5,<6.0a0'] -> python[version='3.4.*|>=3.10,<3.11.0a0|>=3.6|>=3.5|>=3.7|>=3.6.0|>=3.6,<3.7|>=3.4']; python=3.9The following specifications were found to be incompatible with your system:. - feature:/linux-64::__glibc==2.31=0; - feature:|@/linux-64::__glibc==2.31=0; - psi4 -> libgcc-ng[version='>=7.5.0'] -> __glibc[version='>=2.17']. Your installed version is: 2.31. Note that strict channel priority may have removed packages required for satisfiability.; ```. I am new to psi4 and I hope someone can help me to solve this problem. Thanks!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2390
https://github.com/psi4/psi4/issues/2390:189,Integrability,message,messages,189,"Hi psi4 experts. psi4 shows promising functions and I am trying to install psi4 on my Ubuntu 20 with the command. `conda create -n p4env python=x.x psi4 -c psi4/label/dev`. But I got error messages:; ```. UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions. Package python conflicts for:; psi4 -> python[version='2.7.*|3.5.*|3.6.*|>=2.7,<2.8.0a0|>=3.5,<3.6.0a0|>=3.6,<3.7.0a0|>=3.7,<3.8.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0']; psi4 -> libxc[version='>=5.1.5,<6.0a0'] -> python[version='3.4.*|>=3.10,<3.11.0a0|>=3.6|>=3.5|>=3.7|>=3.6.0|>=3.6,<3.7|>=3.4']; python=3.9The following specifications were found to be incompatible with your system:. - feature:/linux-64::__glibc==2.31=0; - feature:|@/linux-64::__glibc==2.31=0; - psi4 -> libgcc-ng[version='>=7.5.0'] -> __glibc[version='>=2.17']. Your installed version is: 2.31. Note that strict channel priority may have removed packages required for satisfiability.; ```. I am new to psi4 and I hope someone can help me to solve this problem. Thanks!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2390
https://github.com/psi4/psi4/pull/2391:112,Modifiability,config,config,112,"## Description; <!-- Provide a brief description of the PR's purpose here. --> This switches from detecting the config.cmake file from a cppe library to detecting the python module. It's more realistic about what psi4 actually needs. By chance, this detection worked ok with internal builds or with c-f cppe or with psi4 cppe+pycppe. . `adcc-formaldehyde-pe-adc2` still failing with `catching classes that do not inherit from BaseException is not allowed` on `InvalidReference`. ## Checklist; - [ ] ~Tests added for any new features~; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2391
https://github.com/psi4/psi4/pull/2391:413,Modifiability,inherit,inherit,413,"## Description; <!-- Provide a brief description of the PR's purpose here. --> This switches from detecting the config.cmake file from a cppe library to detecting the python module. It's more realistic about what psi4 actually needs. By chance, this detection worked ok with internal builds or with c-f cppe or with psi4 cppe+pycppe. . `adcc-formaldehyde-pe-adc2` still failing with `catching classes that do not inherit from BaseException is not allowed` on `InvalidReference`. ## Checklist; - [ ] ~Tests added for any new features~; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2391
https://github.com/psi4/psi4/pull/2391:98,Safety,detect,detecting,98,"## Description; <!-- Provide a brief description of the PR's purpose here. --> This switches from detecting the config.cmake file from a cppe library to detecting the python module. It's more realistic about what psi4 actually needs. By chance, this detection worked ok with internal builds or with c-f cppe or with psi4 cppe+pycppe. . `adcc-formaldehyde-pe-adc2` still failing with `catching classes that do not inherit from BaseException is not allowed` on `InvalidReference`. ## Checklist; - [ ] ~Tests added for any new features~; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2391
https://github.com/psi4/psi4/pull/2391:153,Safety,detect,detecting,153,"## Description; <!-- Provide a brief description of the PR's purpose here. --> This switches from detecting the config.cmake file from a cppe library to detecting the python module. It's more realistic about what psi4 actually needs. By chance, this detection worked ok with internal builds or with c-f cppe or with psi4 cppe+pycppe. . `adcc-formaldehyde-pe-adc2` still failing with `catching classes that do not inherit from BaseException is not allowed` on `InvalidReference`. ## Checklist; - [ ] ~Tests added for any new features~; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2391
https://github.com/psi4/psi4/pull/2391:250,Safety,detect,detection,250,"## Description; <!-- Provide a brief description of the PR's purpose here. --> This switches from detecting the config.cmake file from a cppe library to detecting the python module. It's more realistic about what psi4 actually needs. By chance, this detection worked ok with internal builds or with c-f cppe or with psi4 cppe+pycppe. . `adcc-formaldehyde-pe-adc2` still failing with `catching classes that do not inherit from BaseException is not allowed` on `InvalidReference`. ## Checklist; - [ ] ~Tests added for any new features~; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2391
https://github.com/psi4/psi4/pull/2391:500,Testability,Test,Tests,500,"## Description; <!-- Provide a brief description of the PR's purpose here. --> This switches from detecting the config.cmake file from a cppe library to detecting the python module. It's more realistic about what psi4 actually needs. By chance, this detection worked ok with internal builds or with c-f cppe or with psi4 cppe+pycppe. . `adcc-formaldehyde-pe-adc2` still failing with `catching classes that do not inherit from BaseException is not allowed` on `InvalidReference`. ## Checklist; - [ ] ~Tests added for any new features~; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2391
https://github.com/psi4/psi4/pull/2391:575,Testability,test,tests,575,"## Description; <!-- Provide a brief description of the PR's purpose here. --> This switches from detecting the config.cmake file from a cppe library to detecting the python module. It's more realistic about what psi4 actually needs. By chance, this detection worked ok with internal builds or with c-f cppe or with psi4 cppe+pycppe. . `adcc-formaldehyde-pe-adc2` still failing with `catching classes that do not inherit from BaseException is not allowed` on `InvalidReference`. ## Checklist; - [ ] ~Tests added for any new features~; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2391
https://github.com/psi4/psi4/pull/2391:666,Testability,test,tests,666,"## Description; <!-- Provide a brief description of the PR's purpose here. --> This switches from detecting the config.cmake file from a cppe library to detecting the python module. It's more realistic about what psi4 actually needs. By chance, this detection worked ok with internal builds or with c-f cppe or with psi4 cppe+pycppe. . `adcc-formaldehyde-pe-adc2` still failing with `catching classes that do not inherit from BaseException is not allowed` on `InvalidReference`. ## Checklist; - [ ] ~Tests added for any new features~; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2391
https://github.com/psi4/psi4/pull/2392:189,Energy Efficiency,energy,energy,189,"## Description; <!-- Provide a brief description of the PR's purpose here. --> @andysim's suggestion worked! Overcomes the bad combination of Intel icpc, c++17 standard, and Libint2 (water energy off by 50 Eh). I've only run smoke tests so far but will fix that tomorrow. *EDIT* I removed some l2 headers among the export_* files that didn't seem to be necessary. And I reordered some l2 headers for consistency with the l2 convenience header. this'll need a little adaptation after #2388 merge, I expect. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2392
https://github.com/psi4/psi4/pull/2392:466,Energy Efficiency,adapt,adaptation,466,"## Description; <!-- Provide a brief description of the PR's purpose here. --> @andysim's suggestion worked! Overcomes the bad combination of Intel icpc, c++17 standard, and Libint2 (water energy off by 50 Eh). I've only run smoke tests so far but will fix that tomorrow. *EDIT* I removed some l2 headers among the export_* files that didn't seem to be necessary. And I reordered some l2 headers for consistency with the l2 convenience header. this'll need a little adaptation after #2388 merge, I expect. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2392
https://github.com/psi4/psi4/pull/2392:466,Modifiability,adapt,adaptation,466,"## Description; <!-- Provide a brief description of the PR's purpose here. --> @andysim's suggestion worked! Overcomes the bad combination of Intel icpc, c++17 standard, and Libint2 (water energy off by 50 Eh). I've only run smoke tests so far but will fix that tomorrow. *EDIT* I removed some l2 headers among the export_* files that didn't seem to be necessary. And I reordered some l2 headers for consistency with the l2 convenience header. this'll need a little adaptation after #2388 merge, I expect. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2392
https://github.com/psi4/psi4/pull/2392:231,Testability,test,tests,231,"## Description; <!-- Provide a brief description of the PR's purpose here. --> @andysim's suggestion worked! Overcomes the bad combination of Intel icpc, c++17 standard, and Libint2 (water energy off by 50 Eh). I've only run smoke tests so far but will fix that tomorrow. *EDIT* I removed some l2 headers among the export_* files that didn't seem to be necessary. And I reordered some l2 headers for consistency with the l2 convenience header. this'll need a little adaptation after #2388 merge, I expect. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2392
https://github.com/psi4/psi4/pull/2392:527,Testability,Test,Tests,527,"## Description; <!-- Provide a brief description of the PR's purpose here. --> @andysim's suggestion worked! Overcomes the bad combination of Intel icpc, c++17 standard, and Libint2 (water energy off by 50 Eh). I've only run smoke tests so far but will fix that tomorrow. *EDIT* I removed some l2 headers among the export_* files that didn't seem to be necessary. And I reordered some l2 headers for consistency with the l2 convenience header. this'll need a little adaptation after #2388 merge, I expect. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2392
https://github.com/psi4/psi4/pull/2392:602,Testability,test,tests,602,"## Description; <!-- Provide a brief description of the PR's purpose here. --> @andysim's suggestion worked! Overcomes the bad combination of Intel icpc, c++17 standard, and Libint2 (water energy off by 50 Eh). I've only run smoke tests so far but will fix that tomorrow. *EDIT* I removed some l2 headers among the export_* files that didn't seem to be necessary. And I reordered some l2 headers for consistency with the l2 convenience header. this'll need a little adaptation after #2388 merge, I expect. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2392
https://github.com/psi4/psi4/pull/2392:693,Testability,test,tests,693,"## Description; <!-- Provide a brief description of the PR's purpose here. --> @andysim's suggestion worked! Overcomes the bad combination of Intel icpc, c++17 standard, and Libint2 (water energy off by 50 Eh). I've only run smoke tests so far but will fix that tomorrow. *EDIT* I removed some l2 headers among the export_* files that didn't seem to be necessary. And I reordered some l2 headers for consistency with the l2 convenience header. this'll need a little adaptation after #2388 merge, I expect. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2392
https://github.com/psi4/psi4/pull/2393:224,Energy Efficiency,adapt,adapted,224,"## Description; As is says in the title.; I've added a quicktest for PE-ADC(1) such that we catch issues like this directly from now on... adcc 0.15.9 introduced a breaking change in the environment parameter handling, I've adapted the existing test accordingly. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2393
https://github.com/psi4/psi4/pull/2393:224,Modifiability,adapt,adapted,224,"## Description; As is says in the title.; I've added a quicktest for PE-ADC(1) such that we catch issues like this directly from now on... adcc 0.15.9 introduced a breaking change in the environment parameter handling, I've adapted the existing test accordingly. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2393
https://github.com/psi4/psi4/pull/2393:245,Testability,test,test,245,"## Description; As is says in the title.; I've added a quicktest for PE-ADC(1) such that we catch issues like this directly from now on... adcc 0.15.9 introduced a breaking change in the environment parameter handling, I've adapted the existing test accordingly. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2393
https://github.com/psi4/psi4/pull/2393:447,Testability,Test,Tests,447,"## Description; As is says in the title.; I've added a quicktest for PE-ADC(1) such that we catch issues like this directly from now on... adcc 0.15.9 introduced a breaking change in the environment parameter handling, I've adapted the existing test accordingly. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2393
https://github.com/psi4/psi4/pull/2393:521,Testability,test,tests,521,"## Description; As is says in the title.; I've added a quicktest for PE-ADC(1) such that we catch issues like this directly from now on... adcc 0.15.9 introduced a breaking change in the environment parameter handling, I've adapted the existing test accordingly. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2393
https://github.com/psi4/psi4/pull/2393:612,Testability,test,tests,612,"## Description; As is says in the title.; I've added a quicktest for PE-ADC(1) such that we catch issues like this directly from now on... adcc 0.15.9 introduced a breaking change in the environment parameter handling, I've adapted the existing test accordingly. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2393
https://github.com/psi4/psi4/pull/2394:87,Availability,mainten,maintenance,87,## Description; <!-- Provide a brief description of the PR's purpose here. -->; Yearly maintenance -- update copyright. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2394
https://github.com/psi4/psi4/pull/2394:102,Deployability,update,update,102,## Description; <!-- Provide a brief description of the PR's purpose here. -->; Yearly maintenance -- update copyright. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2394
https://github.com/psi4/psi4/pull/2395:109,Availability,toler,tolerance,109,"## Description; Provides and exposes a `matrix` method to check if two matrices are the same, within a given tolerance. This may allow for some simplifying of the test infrastructure, but I don't know the test infrastructure nearly well enough to say. ## Checklist; - [x] `test_matrix.py` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2395
https://github.com/psi4/psi4/pull/2395:29,Security,expose,exposes,29,"## Description; Provides and exposes a `matrix` method to check if two matrices are the same, within a given tolerance. This may allow for some simplifying of the test infrastructure, but I don't know the test infrastructure nearly well enough to say. ## Checklist; - [x] `test_matrix.py` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2395
https://github.com/psi4/psi4/pull/2395:163,Testability,test,test,163,"## Description; Provides and exposes a `matrix` method to check if two matrices are the same, within a given tolerance. This may allow for some simplifying of the test infrastructure, but I don't know the test infrastructure nearly well enough to say. ## Checklist; - [x] `test_matrix.py` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2395
https://github.com/psi4/psi4/pull/2395:205,Testability,test,test,205,"## Description; Provides and exposes a `matrix` method to check if two matrices are the same, within a given tolerance. This may allow for some simplifying of the test infrastructure, but I don't know the test infrastructure nearly well enough to say. ## Checklist; - [x] `test_matrix.py` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2395
https://github.com/psi4/psi4/pull/2395:144,Usability,simpl,simplifying,144,"## Description; Provides and exposes a `matrix` method to check if two matrices are the same, within a given tolerance. This may allow for some simplifying of the test infrastructure, but I don't know the test infrastructure nearly well enough to say. ## Checklist; - [x] `test_matrix.py` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2395
https://github.com/psi4/psi4/issues/2396:644,Availability,error,error,644,"The test writing documentation is disorganized. I've been developing with Psi for years, and _I_ have a hard time reading it. I propose that the documentation be restructured along the following lines:. - Overview; - Why do we have tests; - When do I have to make a test for my PR; - When to use Psithon when to use PsiAPI; - Writing Tests; - Structure of a Test; - Do the necessary electronic structure; - Have compare functions; - What makes a good test?; - Quick; - Terse; - Spell out the point of the test; - Psithon Specific; - Create directory w/ CMake File; - Labels; - Update master Cmake; - PsiAPI Specific; - Templates; - How to test error handling; - Common Marks. The current version doesn't separate out the test writing from the details of Psithon test formatting.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2396
https://github.com/psi4/psi4/issues/2396:577,Deployability,Update,Update,577,"The test writing documentation is disorganized. I've been developing with Psi for years, and _I_ have a hard time reading it. I propose that the documentation be restructured along the following lines:. - Overview; - Why do we have tests; - When do I have to make a test for my PR; - When to use Psithon when to use PsiAPI; - Writing Tests; - Structure of a Test; - Do the necessary electronic structure; - Have compare functions; - What makes a good test?; - Quick; - Terse; - Spell out the point of the test; - Psithon Specific; - Create directory w/ CMake File; - Labels; - Update master Cmake; - PsiAPI Specific; - Templates; - How to test error handling; - Common Marks. The current version doesn't separate out the test writing from the details of Psithon test formatting.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2396
https://github.com/psi4/psi4/issues/2396:4,Testability,test,test,4,"The test writing documentation is disorganized. I've been developing with Psi for years, and _I_ have a hard time reading it. I propose that the documentation be restructured along the following lines:. - Overview; - Why do we have tests; - When do I have to make a test for my PR; - When to use Psithon when to use PsiAPI; - Writing Tests; - Structure of a Test; - Do the necessary electronic structure; - Have compare functions; - What makes a good test?; - Quick; - Terse; - Spell out the point of the test; - Psithon Specific; - Create directory w/ CMake File; - Labels; - Update master Cmake; - PsiAPI Specific; - Templates; - How to test error handling; - Common Marks. The current version doesn't separate out the test writing from the details of Psithon test formatting.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2396
https://github.com/psi4/psi4/issues/2396:232,Testability,test,tests,232,"The test writing documentation is disorganized. I've been developing with Psi for years, and _I_ have a hard time reading it. I propose that the documentation be restructured along the following lines:. - Overview; - Why do we have tests; - When do I have to make a test for my PR; - When to use Psithon when to use PsiAPI; - Writing Tests; - Structure of a Test; - Do the necessary electronic structure; - Have compare functions; - What makes a good test?; - Quick; - Terse; - Spell out the point of the test; - Psithon Specific; - Create directory w/ CMake File; - Labels; - Update master Cmake; - PsiAPI Specific; - Templates; - How to test error handling; - Common Marks. The current version doesn't separate out the test writing from the details of Psithon test formatting.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2396
https://github.com/psi4/psi4/issues/2396:266,Testability,test,test,266,"The test writing documentation is disorganized. I've been developing with Psi for years, and _I_ have a hard time reading it. I propose that the documentation be restructured along the following lines:. - Overview; - Why do we have tests; - When do I have to make a test for my PR; - When to use Psithon when to use PsiAPI; - Writing Tests; - Structure of a Test; - Do the necessary electronic structure; - Have compare functions; - What makes a good test?; - Quick; - Terse; - Spell out the point of the test; - Psithon Specific; - Create directory w/ CMake File; - Labels; - Update master Cmake; - PsiAPI Specific; - Templates; - How to test error handling; - Common Marks. The current version doesn't separate out the test writing from the details of Psithon test formatting.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2396
https://github.com/psi4/psi4/issues/2396:334,Testability,Test,Tests,334,"The test writing documentation is disorganized. I've been developing with Psi for years, and _I_ have a hard time reading it. I propose that the documentation be restructured along the following lines:. - Overview; - Why do we have tests; - When do I have to make a test for my PR; - When to use Psithon when to use PsiAPI; - Writing Tests; - Structure of a Test; - Do the necessary electronic structure; - Have compare functions; - What makes a good test?; - Quick; - Terse; - Spell out the point of the test; - Psithon Specific; - Create directory w/ CMake File; - Labels; - Update master Cmake; - PsiAPI Specific; - Templates; - How to test error handling; - Common Marks. The current version doesn't separate out the test writing from the details of Psithon test formatting.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2396
https://github.com/psi4/psi4/issues/2396:358,Testability,Test,Test,358,"The test writing documentation is disorganized. I've been developing with Psi for years, and _I_ have a hard time reading it. I propose that the documentation be restructured along the following lines:. - Overview; - Why do we have tests; - When do I have to make a test for my PR; - When to use Psithon when to use PsiAPI; - Writing Tests; - Structure of a Test; - Do the necessary electronic structure; - Have compare functions; - What makes a good test?; - Quick; - Terse; - Spell out the point of the test; - Psithon Specific; - Create directory w/ CMake File; - Labels; - Update master Cmake; - PsiAPI Specific; - Templates; - How to test error handling; - Common Marks. The current version doesn't separate out the test writing from the details of Psithon test formatting.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2396
https://github.com/psi4/psi4/issues/2396:451,Testability,test,test,451,"The test writing documentation is disorganized. I've been developing with Psi for years, and _I_ have a hard time reading it. I propose that the documentation be restructured along the following lines:. - Overview; - Why do we have tests; - When do I have to make a test for my PR; - When to use Psithon when to use PsiAPI; - Writing Tests; - Structure of a Test; - Do the necessary electronic structure; - Have compare functions; - What makes a good test?; - Quick; - Terse; - Spell out the point of the test; - Psithon Specific; - Create directory w/ CMake File; - Labels; - Update master Cmake; - PsiAPI Specific; - Templates; - How to test error handling; - Common Marks. The current version doesn't separate out the test writing from the details of Psithon test formatting.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2396
https://github.com/psi4/psi4/issues/2396:505,Testability,test,test,505,"The test writing documentation is disorganized. I've been developing with Psi for years, and _I_ have a hard time reading it. I propose that the documentation be restructured along the following lines:. - Overview; - Why do we have tests; - When do I have to make a test for my PR; - When to use Psithon when to use PsiAPI; - Writing Tests; - Structure of a Test; - Do the necessary electronic structure; - Have compare functions; - What makes a good test?; - Quick; - Terse; - Spell out the point of the test; - Psithon Specific; - Create directory w/ CMake File; - Labels; - Update master Cmake; - PsiAPI Specific; - Templates; - How to test error handling; - Common Marks. The current version doesn't separate out the test writing from the details of Psithon test formatting.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2396
https://github.com/psi4/psi4/issues/2396:639,Testability,test,test,639,"The test writing documentation is disorganized. I've been developing with Psi for years, and _I_ have a hard time reading it. I propose that the documentation be restructured along the following lines:. - Overview; - Why do we have tests; - When do I have to make a test for my PR; - When to use Psithon when to use PsiAPI; - Writing Tests; - Structure of a Test; - Do the necessary electronic structure; - Have compare functions; - What makes a good test?; - Quick; - Terse; - Spell out the point of the test; - Psithon Specific; - Create directory w/ CMake File; - Labels; - Update master Cmake; - PsiAPI Specific; - Templates; - How to test error handling; - Common Marks. The current version doesn't separate out the test writing from the details of Psithon test formatting.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2396
https://github.com/psi4/psi4/issues/2396:721,Testability,test,test,721,"The test writing documentation is disorganized. I've been developing with Psi for years, and _I_ have a hard time reading it. I propose that the documentation be restructured along the following lines:. - Overview; - Why do we have tests; - When do I have to make a test for my PR; - When to use Psithon when to use PsiAPI; - Writing Tests; - Structure of a Test; - Do the necessary electronic structure; - Have compare functions; - What makes a good test?; - Quick; - Terse; - Spell out the point of the test; - Psithon Specific; - Create directory w/ CMake File; - Labels; - Update master Cmake; - PsiAPI Specific; - Templates; - How to test error handling; - Common Marks. The current version doesn't separate out the test writing from the details of Psithon test formatting.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2396
https://github.com/psi4/psi4/issues/2396:762,Testability,test,test,762,"The test writing documentation is disorganized. I've been developing with Psi for years, and _I_ have a hard time reading it. I propose that the documentation be restructured along the following lines:. - Overview; - Why do we have tests; - When do I have to make a test for my PR; - When to use Psithon when to use PsiAPI; - Writing Tests; - Structure of a Test; - Do the necessary electronic structure; - Have compare functions; - What makes a good test?; - Quick; - Terse; - Spell out the point of the test; - Psithon Specific; - Create directory w/ CMake File; - Labels; - Update master Cmake; - PsiAPI Specific; - Templates; - How to test error handling; - Common Marks. The current version doesn't separate out the test writing from the details of Psithon test formatting.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2396
https://github.com/psi4/psi4/pull/2397:564,Testability,test,tests,564,"## Description; This PR fixes a bug found by Lori, and gives `compare_matrices` the ability to compare names. Although Lori and I were in talks about some other improvements to comparison functions, those would touch `qcelemental` so can't be included here. This blocks some development on another branch, so I'd appreciate a fast review. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Fixes `compare_recursive` bug; - [x] Adds flag to `compare_matrices` so named can be checked. ## Checklist; - [x] New tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2397
https://github.com/psi4/psi4/issues/2401:212,Availability,error,error,212,"The `diis_min_vecs` option currently has no effect in Psi4. We [check that is at least 1](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/scf_proc/scf_iterator.py#L402), but we [already raise an error if it isn't](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/scf_proc/scf_iterator.py#L849). I've checked, and it was this way before I started tinkering with DIIS. This keyword accomplishes absolutely nothing besides giving the user a chance to raise errors. Do we want to _remove the keyword_, _add the intended feature_, or _deprecate and then remove the keyword_?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2401
https://github.com/psi4/psi4/issues/2401:487,Availability,error,errors,487,"The `diis_min_vecs` option currently has no effect in Psi4. We [check that is at least 1](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/scf_proc/scf_iterator.py#L402), but we [already raise an error if it isn't](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/scf_proc/scf_iterator.py#L849). I've checked, and it was this way before I started tinkering with DIIS. This keyword accomplishes absolutely nothing besides giving the user a chance to raise errors. Do we want to _remove the keyword_, _add the intended feature_, or _deprecate and then remove the keyword_?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2401
https://github.com/psi4/psi4/issues/2405:676,Availability,avail,available,676,"There are some issues with the `liboptions` documentation. First, the source should mention that there's a whole page about the module in the docs. Most modules don't have their own page, so I completely missed it. Now for my more detailed grievances with the `liboptions` page:. I'm sure there are more grievances, but obvious ones:; - The overview uses the passive voice. ""The input is parsed for these options, and defaults are assigned for those keywords not specified by the user."" This would be much clearer written as ""When Psi parses the inputs, Psi assigns each option its user-specified value (if provided) and its default otherwise.""; - ""Array-type options are not available in python."" This is false.; - There's no mention of side effects of the getter functions. This was a major ""gotcha"" for me: getting an SCF option set that to be the active module and interfered with other modules.; - There's no mention of the currently active module mechanism. At all.; - Discussion about _when_ and _which_ options are added is vague. It sounds like the options object only has some options at a time, but it's not clear when these are added/removed.; - `read_globals` appears in a code snippet, but is not described.; - ""The way to do this is to isolate and nullify any changes to options made by the code, the difference between [a] and [c]. "" is unclear.; - ""C-side, there is no concern since options are essentially read-only within the modules."" This is false. DCT for sure changes options in the module.; - ""Py-side is another matter since the driver’s role is to take terse instructions from the user and translate those into instructions to the C++ modules, usually through manipulation of options."" This is vague. The previous two sentences being baffling doesn't help.; - ""In order to preserve effective definition [a]"" What does it mean to preserve a definition? ; - The paragraph containing that sentence needs to explain OptionState. Instead, that's done much later.; - The ""Reading O",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2405
https://github.com/psi4/psi4/issues/2405:506,Usability,clear,clearer,506,"There are some issues with the `liboptions` documentation. First, the source should mention that there's a whole page about the module in the docs. Most modules don't have their own page, so I completely missed it. Now for my more detailed grievances with the `liboptions` page:. I'm sure there are more grievances, but obvious ones:; - The overview uses the passive voice. ""The input is parsed for these options, and defaults are assigned for those keywords not specified by the user."" This would be much clearer written as ""When Psi parses the inputs, Psi assigns each option its user-specified value (if provided) and its default otherwise.""; - ""Array-type options are not available in python."" This is false.; - There's no mention of side effects of the getter functions. This was a major ""gotcha"" for me: getting an SCF option set that to be the active module and interfered with other modules.; - There's no mention of the currently active module mechanism. At all.; - Discussion about _when_ and _which_ options are added is vague. It sounds like the options object only has some options at a time, but it's not clear when these are added/removed.; - `read_globals` appears in a code snippet, but is not described.; - ""The way to do this is to isolate and nullify any changes to options made by the code, the difference between [a] and [c]. "" is unclear.; - ""C-side, there is no concern since options are essentially read-only within the modules."" This is false. DCT for sure changes options in the module.; - ""Py-side is another matter since the driver’s role is to take terse instructions from the user and translate those into instructions to the C++ modules, usually through manipulation of options."" This is vague. The previous two sentences being baffling doesn't help.; - ""In order to preserve effective definition [a]"" What does it mean to preserve a definition? ; - The paragraph containing that sentence needs to explain OptionState. Instead, that's done much later.; - The ""Reading O",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2405
https://github.com/psi4/psi4/issues/2405:1119,Usability,clear,clear,1119," there's a whole page about the module in the docs. Most modules don't have their own page, so I completely missed it. Now for my more detailed grievances with the `liboptions` page:. I'm sure there are more grievances, but obvious ones:; - The overview uses the passive voice. ""The input is parsed for these options, and defaults are assigned for those keywords not specified by the user."" This would be much clearer written as ""When Psi parses the inputs, Psi assigns each option its user-specified value (if provided) and its default otherwise.""; - ""Array-type options are not available in python."" This is false.; - There's no mention of side effects of the getter functions. This was a major ""gotcha"" for me: getting an SCF option set that to be the active module and interfered with other modules.; - There's no mention of the currently active module mechanism. At all.; - Discussion about _when_ and _which_ options are added is vague. It sounds like the options object only has some options at a time, but it's not clear when these are added/removed.; - `read_globals` appears in a code snippet, but is not described.; - ""The way to do this is to isolate and nullify any changes to options made by the code, the difference between [a] and [c]. "" is unclear.; - ""C-side, there is no concern since options are essentially read-only within the modules."" This is false. DCT for sure changes options in the module.; - ""Py-side is another matter since the driver’s role is to take terse instructions from the user and translate those into instructions to the C++ modules, usually through manipulation of options."" This is vague. The previous two sentences being baffling doesn't help.; - ""In order to preserve effective definition [a]"" What does it mean to preserve a definition? ; - The paragraph containing that sentence needs to explain OptionState. Instead, that's done much later.; - The ""Reading Options in Module"" section doesn't exist.; - There's no mention of type-specific getters/setters",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2405
https://github.com/psi4/psi4/pull/2406:350,Testability,Test,Tests,350,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; GWH is not a guess, but a way to approximate the Hamiltonian for interacting systems. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2406
https://github.com/psi4/psi4/pull/2406:424,Testability,test,tests,424,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; GWH is not a guess, but a way to approximate the Hamiltonian for interacting systems. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2406
https://github.com/psi4/psi4/pull/2406:515,Testability,test,tests,515,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; GWH is not a guess, but a way to approximate the Hamiltonian for interacting systems. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2406
https://github.com/psi4/psi4/issues/2407:598,Deployability,install,installation,598,"We recently had a user confused by the [threading documentation](https://psicode.org/psi4manual/master/external.html#threading), so that needs an overhaul as well:. - In (3), change the sample code to only set the number of threads once. That's a more common use case, and those who _need_ to change the number of threads are more likely to read the supporting details.; - Either remove (1) or relegate it to a sidebar.; - The introduction to the threading section is overly technical. The first paragraph can be simplified to ""Psi4 threading uses both OpenMP and MKL, so it is important that your installation is linked against both if you want to use threading. If you have a conda install, this is already taken care of.""; - Replace ""certain circumstances"" in (4) with a more specific statement.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2407
https://github.com/psi4/psi4/issues/2407:684,Deployability,install,install,684,"We recently had a user confused by the [threading documentation](https://psicode.org/psi4manual/master/external.html#threading), so that needs an overhaul as well:. - In (3), change the sample code to only set the number of threads once. That's a more common use case, and those who _need_ to change the number of threads are more likely to read the supporting details.; - Either remove (1) or relegate it to a sidebar.; - The introduction to the threading section is overly technical. The first paragraph can be simplified to ""Psi4 threading uses both OpenMP and MKL, so it is important that your installation is linked against both if you want to use threading. If you have a conda install, this is already taken care of.""; - Replace ""certain circumstances"" in (4) with a more specific statement.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2407
https://github.com/psi4/psi4/issues/2407:513,Usability,simpl,simplified,513,"We recently had a user confused by the [threading documentation](https://psicode.org/psi4manual/master/external.html#threading), so that needs an overhaul as well:. - In (3), change the sample code to only set the number of threads once. That's a more common use case, and those who _need_ to change the number of threads are more likely to read the supporting details.; - Either remove (1) or relegate it to a sidebar.; - The introduction to the threading section is overly technical. The first paragraph can be simplified to ""Psi4 threading uses both OpenMP and MKL, so it is important that your installation is linked against both if you want to use threading. If you have a conda install, this is already taken care of.""; - Replace ""certain circumstances"" in (4) with a more specific statement.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2407
https://github.com/psi4/psi4/pull/2408:192,Testability,test,tester,192,## Description; <!-- Provide a brief description of the PR's purpose here. -->; This works with both test_fchk_writer and #2400 (needed for independent run of fchk()). Thank goodness the fchk tester had a dfocc (comparatively old-style storage) case. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2408
https://github.com/psi4/psi4/pull/2408:271,Testability,Test,Tests,271,## Description; <!-- Provide a brief description of the PR's purpose here. -->; This works with both test_fchk_writer and #2400 (needed for independent run of fchk()). Thank goodness the fchk tester had a dfocc (comparatively old-style storage) case. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2408
https://github.com/psi4/psi4/pull/2408:345,Testability,test,tests,345,## Description; <!-- Provide a brief description of the PR's purpose here. -->; This works with both test_fchk_writer and #2400 (needed for independent run of fchk()). Thank goodness the fchk tester had a dfocc (comparatively old-style storage) case. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2408
https://github.com/psi4/psi4/pull/2408:436,Testability,test,tests,436,## Description; <!-- Provide a brief description of the PR's purpose here. -->; This works with both test_fchk_writer and #2400 (needed for independent run of fchk()). Thank goodness the fchk tester had a dfocc (comparatively old-style storage) case. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2408
https://github.com/psi4/psi4/issues/2410:269,Energy Efficiency,energy,energy,269,"There seems to be a wrong HOMO/LUMO mixing when SAD is used. ; ```python; H2 = psi4.geometry(f""""""; 0 1; H; H 1 3.0; symmetry c1; """"""); psi4.set_options({""REFERENCE"": ""uhf"", ; ""guess"": ""gwh"",; ""e_convergence"": 12,; ""basis"": ""cc-pvdz"",; ""guess_mix "": True,; }); E = psi4.energy(""scf"", molecule=H2); ```; It gives:; ```; Mixing alpha HOMO/LUMO orbitals (1,2); @DF-UHF iter 8: -0.99872135104496 -1.08802e-14 1.64991e-11 DIIS; ```; But for SAD; ```python; psi4.set_options({""REFERENCE"": ""uhf"", ; ""guess"": ""SAD"",; ""e_convergence"": 12,; ""basis"": ""cc-pvdz"",; ""guess_mix "": True,; }); E = psi4.energy(""scf"", molecule=H2); ```; It gives; ```; Mixing alpha HOMO/LUMO orbitals (2,3); @DF-UHF iter 5: -0.82648407827446 -6.66134e-15 5.36516e-14 DIIS; ```; My psi4.__version__ is 1.5.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2410
https://github.com/psi4/psi4/issues/2410:585,Energy Efficiency,energy,energy,585,"There seems to be a wrong HOMO/LUMO mixing when SAD is used. ; ```python; H2 = psi4.geometry(f""""""; 0 1; H; H 1 3.0; symmetry c1; """"""); psi4.set_options({""REFERENCE"": ""uhf"", ; ""guess"": ""gwh"",; ""e_convergence"": 12,; ""basis"": ""cc-pvdz"",; ""guess_mix "": True,; }); E = psi4.energy(""scf"", molecule=H2); ```; It gives:; ```; Mixing alpha HOMO/LUMO orbitals (1,2); @DF-UHF iter 8: -0.99872135104496 -1.08802e-14 1.64991e-11 DIIS; ```; But for SAD; ```python; psi4.set_options({""REFERENCE"": ""uhf"", ; ""guess"": ""SAD"",; ""e_convergence"": 12,; ""basis"": ""cc-pvdz"",; ""guess_mix "": True,; }); E = psi4.energy(""scf"", molecule=H2); ```; It gives; ```; Mixing alpha HOMO/LUMO orbitals (2,3); @DF-UHF iter 5: -0.82648407827446 -6.66134e-15 5.36516e-14 DIIS; ```; My psi4.__version__ is 1.5.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2410
https://github.com/psi4/psi4/pull/2411:374,Testability,Test,Tests,374,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; The current guess mix code runs in iteration 0, but SAD doesn't have orbitals there, while some other guesses don't call `form_C` in iteration 0. This PR fixes guess_mix for all guesses. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Tests for guess_mix added for all guesses. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2411
https://github.com/psi4/psi4/pull/2411:468,Testability,Test,Tests,468,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; The current guess mix code runs in iteration 0, but SAD doesn't have orbitals there, while some other guesses don't call `form_C` in iteration 0. This PR fixes guess_mix for all guesses. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Tests for guess_mix added for all guesses. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2411
https://github.com/psi4/psi4/pull/2411:542,Testability,test,tests,542,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; The current guess mix code runs in iteration 0, but SAD doesn't have orbitals there, while some other guesses don't call `form_C` in iteration 0. This PR fixes guess_mix for all guesses. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Tests for guess_mix added for all guesses. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2411
https://github.com/psi4/psi4/pull/2411:633,Testability,test,tests,633,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; The current guess mix code runs in iteration 0, but SAD doesn't have orbitals there, while some other guesses don't call `form_C` in iteration 0. This PR fixes guess_mix for all guesses. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Tests for guess_mix added for all guesses. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2411
https://github.com/psi4/psi4/issues/2412:416,Modifiability,variab,variables,416,"This issue is a code cleanup wishlist. Please place a code cleanup issue here if you see it in a PR, but fixing it would be outside the scope of the PR. - [x] Remove `new` from `lib3index/fittingmetric.cc`. In some cases, `new` is used to initialize... a raw pointer that points to `std::shared_ptr<OneBodyAOInt>`. In 2022, this should be a `std::vector`.; - [ ] `onebody.h` and its derived classes have many member variables that are `double*`. Let's change to `std::vector<double>` if we can, to avoid having to worry about new/delete.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2412
https://github.com/psi4/psi4/issues/2412:498,Safety,avoid,avoid,498,"This issue is a code cleanup wishlist. Please place a code cleanup issue here if you see it in a PR, but fixing it would be outside the scope of the PR. - [x] Remove `new` from `lib3index/fittingmetric.cc`. In some cases, `new` is used to initialize... a raw pointer that points to `std::shared_ptr<OneBodyAOInt>`. In 2022, this should be a `std::vector`.; - [ ] `onebody.h` and its derived classes have many member variables that are `double*`. Let's change to `std::vector<double>` if we can, to avoid having to worry about new/delete.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2412
https://github.com/psi4/psi4/pull/2413:913,Availability,error,errors,913,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This corresponds to L2 at https://github.com/evaleev/libint/pull/233 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] switches psi4 to use a Libint2 forked from upstream in 2022, not in 2019; - [x] changes a couple cmake knobs and changes the required components to EFV's preferred syntax (`g5` -> `eri_c4_d1_l5`); - [x] avoided grid points discrepancies that I had hit by implementing Holger's suggestion.; - [x] I and others have reported needing `pybind11::headers` in extra places, so adding those; - [x] The defines `INT_NCART` and `INT_CARTINDEX` in psi https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/integral.h#L46-L64 are also in L2. They used to be `#define` in the current/2019 fork of L2, but now in L2 master, it’s an inline function. To avoid errors like the below, they're namespaced and inlined here now, too. ```; < namespace libint2 {; < inline int INT_NCART(int am) { return ((am + 2) * (am + 1)) >> 1; }; < }; < LIBINT_DEPRECATED(""please use libint2::INT_NCART instead""); < inline int INT_NCART(int am) { return libint2::INT_NCART(am); }; ---; > #define INT_NCART(am) ((((am)+2)*((am)+1))>>1); ```; With that situation (define in psi and inlined in L2), I get lots of; ```; In file included from /psi/gits/hrw-pybind/psi4/src/psi4/libmints/integral.cc:28:; /psi/gits/libint2-efv/install-p01/include/libint2/cgshell_ordering.h:104:12: error: expected unqualified-id before 'int'; 104 | inline int INT_CARTINDEX(unsigned int am, int i, int j) {; | ^~~~~~~~~~~~~; ```; I can fix the problem by renaming in psi to `INT_NCART_PSI` and `INT_CARTINDEX_PSI`. What's a cleaner solution than renaming? Should we inline? Or add to the `psi {}` namespace?. ## Checklist; - [ ] ~Tests added for any new features~; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-sub",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2413
https://github.com/psi4/psi4/pull/2413:1510,Availability,error,error,1510,"s corresponds to L2 at https://github.com/evaleev/libint/pull/233 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] switches psi4 to use a Libint2 forked from upstream in 2022, not in 2019; - [x] changes a couple cmake knobs and changes the required components to EFV's preferred syntax (`g5` -> `eri_c4_d1_l5`); - [x] avoided grid points discrepancies that I had hit by implementing Holger's suggestion.; - [x] I and others have reported needing `pybind11::headers` in extra places, so adding those; - [x] The defines `INT_NCART` and `INT_CARTINDEX` in psi https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/integral.h#L46-L64 are also in L2. They used to be `#define` in the current/2019 fork of L2, but now in L2 master, it’s an inline function. To avoid errors like the below, they're namespaced and inlined here now, too. ```; < namespace libint2 {; < inline int INT_NCART(int am) { return ((am + 2) * (am + 1)) >> 1; }; < }; < LIBINT_DEPRECATED(""please use libint2::INT_NCART instead""); < inline int INT_NCART(int am) { return libint2::INT_NCART(am); }; ---; > #define INT_NCART(am) ((((am)+2)*((am)+1))>>1); ```; With that situation (define in psi and inlined in L2), I get lots of; ```; In file included from /psi/gits/hrw-pybind/psi4/src/psi4/libmints/integral.cc:28:; /psi/gits/libint2-efv/install-p01/include/libint2/cgshell_ordering.h:104:12: error: expected unqualified-id before 'int'; 104 | inline int INT_CARTINDEX(unsigned int am, int i, int j) {; | ^~~~~~~~~~~~~; ```; I can fix the problem by renaming in psi to `INT_NCART_PSI` and `INT_CARTINDEX_PSI`. What's a cleaner solution than renaming? Should we inline? Or add to the `psi {}` namespace?. ## Checklist; - [ ] ~Tests added for any new features~; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge **SQUASH**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2413
https://github.com/psi4/psi4/pull/2413:1455,Deployability,install,install-,1455,"s corresponds to L2 at https://github.com/evaleev/libint/pull/233 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] switches psi4 to use a Libint2 forked from upstream in 2022, not in 2019; - [x] changes a couple cmake knobs and changes the required components to EFV's preferred syntax (`g5` -> `eri_c4_d1_l5`); - [x] avoided grid points discrepancies that I had hit by implementing Holger's suggestion.; - [x] I and others have reported needing `pybind11::headers` in extra places, so adding those; - [x] The defines `INT_NCART` and `INT_CARTINDEX` in psi https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/integral.h#L46-L64 are also in L2. They used to be `#define` in the current/2019 fork of L2, but now in L2 master, it’s an inline function. To avoid errors like the below, they're namespaced and inlined here now, too. ```; < namespace libint2 {; < inline int INT_NCART(int am) { return ((am + 2) * (am + 1)) >> 1; }; < }; < LIBINT_DEPRECATED(""please use libint2::INT_NCART instead""); < inline int INT_NCART(int am) { return libint2::INT_NCART(am); }; ---; > #define INT_NCART(am) ((((am)+2)*((am)+1))>>1); ```; With that situation (define in psi and inlined in L2), I get lots of; ```; In file included from /psi/gits/hrw-pybind/psi4/src/psi4/libmints/integral.cc:28:; /psi/gits/libint2-efv/install-p01/include/libint2/cgshell_ordering.h:104:12: error: expected unqualified-id before 'int'; 104 | inline int INT_CARTINDEX(unsigned int am, int i, int j) {; | ^~~~~~~~~~~~~; ```; I can fix the problem by renaming in psi to `INT_NCART_PSI` and `INT_CARTINDEX_PSI`. What's a cleaner solution than renaming? Should we inline? Or add to the `psi {}` namespace?. ## Checklist; - [ ] ~Tests added for any new features~; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge **SQUASH**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2413
https://github.com/psi4/psi4/pull/2413:461,Safety,avoid,avoided,461,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This corresponds to L2 at https://github.com/evaleev/libint/pull/233 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] switches psi4 to use a Libint2 forked from upstream in 2022, not in 2019; - [x] changes a couple cmake knobs and changes the required components to EFV's preferred syntax (`g5` -> `eri_c4_d1_l5`); - [x] avoided grid points discrepancies that I had hit by implementing Holger's suggestion.; - [x] I and others have reported needing `pybind11::headers` in extra places, so adding those; - [x] The defines `INT_NCART` and `INT_CARTINDEX` in psi https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/integral.h#L46-L64 are also in L2. They used to be `#define` in the current/2019 fork of L2, but now in L2 master, it’s an inline function. To avoid errors like the below, they're namespaced and inlined here now, too. ```; < namespace libint2 {; < inline int INT_NCART(int am) { return ((am + 2) * (am + 1)) >> 1; }; < }; < LIBINT_DEPRECATED(""please use libint2::INT_NCART instead""); < inline int INT_NCART(int am) { return libint2::INT_NCART(am); }; ---; > #define INT_NCART(am) ((((am)+2)*((am)+1))>>1); ```; With that situation (define in psi and inlined in L2), I get lots of; ```; In file included from /psi/gits/hrw-pybind/psi4/src/psi4/libmints/integral.cc:28:; /psi/gits/libint2-efv/install-p01/include/libint2/cgshell_ordering.h:104:12: error: expected unqualified-id before 'int'; 104 | inline int INT_CARTINDEX(unsigned int am, int i, int j) {; | ^~~~~~~~~~~~~; ```; I can fix the problem by renaming in psi to `INT_NCART_PSI` and `INT_CARTINDEX_PSI`. What's a cleaner solution than renaming? Should we inline? Or add to the `psi {}` namespace?. ## Checklist; - [ ] ~Tests added for any new features~; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-sub",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2413
https://github.com/psi4/psi4/pull/2413:907,Safety,avoid,avoid,907,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This corresponds to L2 at https://github.com/evaleev/libint/pull/233 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] switches psi4 to use a Libint2 forked from upstream in 2022, not in 2019; - [x] changes a couple cmake knobs and changes the required components to EFV's preferred syntax (`g5` -> `eri_c4_d1_l5`); - [x] avoided grid points discrepancies that I had hit by implementing Holger's suggestion.; - [x] I and others have reported needing `pybind11::headers` in extra places, so adding those; - [x] The defines `INT_NCART` and `INT_CARTINDEX` in psi https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/integral.h#L46-L64 are also in L2. They used to be `#define` in the current/2019 fork of L2, but now in L2 master, it’s an inline function. To avoid errors like the below, they're namespaced and inlined here now, too. ```; < namespace libint2 {; < inline int INT_NCART(int am) { return ((am + 2) * (am + 1)) >> 1; }; < }; < LIBINT_DEPRECATED(""please use libint2::INT_NCART instead""); < inline int INT_NCART(int am) { return libint2::INT_NCART(am); }; ---; > #define INT_NCART(am) ((((am)+2)*((am)+1))>>1); ```; With that situation (define in psi and inlined in L2), I get lots of; ```; In file included from /psi/gits/hrw-pybind/psi4/src/psi4/libmints/integral.cc:28:; /psi/gits/libint2-efv/install-p01/include/libint2/cgshell_ordering.h:104:12: error: expected unqualified-id before 'int'; 104 | inline int INT_CARTINDEX(unsigned int am, int i, int j) {; | ^~~~~~~~~~~~~; ```; I can fix the problem by renaming in psi to `INT_NCART_PSI` and `INT_CARTINDEX_PSI`. What's a cleaner solution than renaming? Should we inline? Or add to the `psi {}` namespace?. ## Checklist; - [ ] ~Tests added for any new features~; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-sub",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2413
https://github.com/psi4/psi4/pull/2413:1842,Testability,Test,Tests,1842,"s corresponds to L2 at https://github.com/evaleev/libint/pull/233 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] switches psi4 to use a Libint2 forked from upstream in 2022, not in 2019; - [x] changes a couple cmake knobs and changes the required components to EFV's preferred syntax (`g5` -> `eri_c4_d1_l5`); - [x] avoided grid points discrepancies that I had hit by implementing Holger's suggestion.; - [x] I and others have reported needing `pybind11::headers` in extra places, so adding those; - [x] The defines `INT_NCART` and `INT_CARTINDEX` in psi https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/integral.h#L46-L64 are also in L2. They used to be `#define` in the current/2019 fork of L2, but now in L2 master, it’s an inline function. To avoid errors like the below, they're namespaced and inlined here now, too. ```; < namespace libint2 {; < inline int INT_NCART(int am) { return ((am + 2) * (am + 1)) >> 1; }; < }; < LIBINT_DEPRECATED(""please use libint2::INT_NCART instead""); < inline int INT_NCART(int am) { return libint2::INT_NCART(am); }; ---; > #define INT_NCART(am) ((((am)+2)*((am)+1))>>1); ```; With that situation (define in psi and inlined in L2), I get lots of; ```; In file included from /psi/gits/hrw-pybind/psi4/src/psi4/libmints/integral.cc:28:; /psi/gits/libint2-efv/install-p01/include/libint2/cgshell_ordering.h:104:12: error: expected unqualified-id before 'int'; 104 | inline int INT_CARTINDEX(unsigned int am, int i, int j) {; | ^~~~~~~~~~~~~; ```; I can fix the problem by renaming in psi to `INT_NCART_PSI` and `INT_CARTINDEX_PSI`. What's a cleaner solution than renaming? Should we inline? Or add to the `psi {}` namespace?. ## Checklist; - [ ] ~Tests added for any new features~; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge **SQUASH**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2413
https://github.com/psi4/psi4/pull/2413:1917,Testability,test,tests,1917,"s corresponds to L2 at https://github.com/evaleev/libint/pull/233 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] switches psi4 to use a Libint2 forked from upstream in 2022, not in 2019; - [x] changes a couple cmake knobs and changes the required components to EFV's preferred syntax (`g5` -> `eri_c4_d1_l5`); - [x] avoided grid points discrepancies that I had hit by implementing Holger's suggestion.; - [x] I and others have reported needing `pybind11::headers` in extra places, so adding those; - [x] The defines `INT_NCART` and `INT_CARTINDEX` in psi https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/integral.h#L46-L64 are also in L2. They used to be `#define` in the current/2019 fork of L2, but now in L2 master, it’s an inline function. To avoid errors like the below, they're namespaced and inlined here now, too. ```; < namespace libint2 {; < inline int INT_NCART(int am) { return ((am + 2) * (am + 1)) >> 1; }; < }; < LIBINT_DEPRECATED(""please use libint2::INT_NCART instead""); < inline int INT_NCART(int am) { return libint2::INT_NCART(am); }; ---; > #define INT_NCART(am) ((((am)+2)*((am)+1))>>1); ```; With that situation (define in psi and inlined in L2), I get lots of; ```; In file included from /psi/gits/hrw-pybind/psi4/src/psi4/libmints/integral.cc:28:; /psi/gits/libint2-efv/install-p01/include/libint2/cgshell_ordering.h:104:12: error: expected unqualified-id before 'int'; 104 | inline int INT_CARTINDEX(unsigned int am, int i, int j) {; | ^~~~~~~~~~~~~; ```; I can fix the problem by renaming in psi to `INT_NCART_PSI` and `INT_CARTINDEX_PSI`. What's a cleaner solution than renaming? Should we inline? Or add to the `psi {}` namespace?. ## Checklist; - [ ] ~Tests added for any new features~; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge **SQUASH**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2413
https://github.com/psi4/psi4/pull/2413:2008,Testability,test,tests,2008,"s corresponds to L2 at https://github.com/evaleev/libint/pull/233 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] switches psi4 to use a Libint2 forked from upstream in 2022, not in 2019; - [x] changes a couple cmake knobs and changes the required components to EFV's preferred syntax (`g5` -> `eri_c4_d1_l5`); - [x] avoided grid points discrepancies that I had hit by implementing Holger's suggestion.; - [x] I and others have reported needing `pybind11::headers` in extra places, so adding those; - [x] The defines `INT_NCART` and `INT_CARTINDEX` in psi https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/integral.h#L46-L64 are also in L2. They used to be `#define` in the current/2019 fork of L2, but now in L2 master, it’s an inline function. To avoid errors like the below, they're namespaced and inlined here now, too. ```; < namespace libint2 {; < inline int INT_NCART(int am) { return ((am + 2) * (am + 1)) >> 1; }; < }; < LIBINT_DEPRECATED(""please use libint2::INT_NCART instead""); < inline int INT_NCART(int am) { return libint2::INT_NCART(am); }; ---; > #define INT_NCART(am) ((((am)+2)*((am)+1))>>1); ```; With that situation (define in psi and inlined in L2), I get lots of; ```; In file included from /psi/gits/hrw-pybind/psi4/src/psi4/libmints/integral.cc:28:; /psi/gits/libint2-efv/install-p01/include/libint2/cgshell_ordering.h:104:12: error: expected unqualified-id before 'int'; 104 | inline int INT_CARTINDEX(unsigned int am, int i, int j) {; | ^~~~~~~~~~~~~; ```; I can fix the problem by renaming in psi to `INT_NCART_PSI` and `INT_CARTINDEX_PSI`. What's a cleaner solution than renaming? Should we inline? Or add to the `psi {}` namespace?. ## Checklist; - [ ] ~Tests added for any new features~; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge **SQUASH**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2413
https://github.com/psi4/psi4/issues/2414:109,Performance,perform,performance,109,"PR #2388 replaces most of the hand-coded one electron integrals with Libint2 calls, for code cleanliness and performance. However, some of the integrals we need are not provided by that library. We also need to replace the arbitrary order multipole moment integrals in the current implementation because they use an algorithm that is not numerically stable at high orders. Although we could possibly use the existing Obara-Saika recursion code, arbitrary order derivatives of the potential and arbitrary order multipoles are much better handled by McMurchie Davidson code. As a proof of concept, see the [attached Python script](https://github.com/psi4/psi4/files/7938278/integrals.py.zip) that computes these integrals through arbitrary order, as well as linear momemtum and angular momentum integrals. All of those integrals can be computed through arbitrary orbital angular momentum and the entire code to compute them all / compare to existing Psi4 implementation is around 400 lines (with comments). I plan to open a followup PR with this implementation, getting rid of all of the remaining Obara-Saika code afterwards, but welcome comments / opinions on this proposal.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2414
https://github.com/psi4/psi4/pull/2415:85,Deployability,update,updates,85,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This updates the Windows Azure for testing and conda build from 2016 to 2022 environment and 11 to 13 llvm. It's definitely needed soonish as 2016 is getting retired. I don't see any reason the llvm change should hurt the broad usability of the conda package, so I'm for trying it in the wild. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2415
https://github.com/psi4/psi4/pull/2415:115,Testability,test,testing,115,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This updates the Windows Azure for testing and conda build from 2016 to 2022 environment and 11 to 13 llvm. It's definitely needed soonish as 2016 is getting retired. I don't see any reason the llvm change should hurt the broad usability of the conda package, so I'm for trying it in the wild. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2415
https://github.com/psi4/psi4/pull/2415:308,Usability,usab,usability,308,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This updates the Windows Azure for testing and conda build from 2016 to 2022 environment and 11 to 13 llvm. It's definitely needed soonish as 2016 is getting retired. I don't see any reason the llvm change should hurt the broad usability of the conda package, so I'm for trying it in the wild. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2415
https://github.com/psi4/psi4/issues/2416:227,Availability,echo,echo,227,"Creating a conda environment with `psi4-dev` makes it really easy to get a source build going, which is great. But I have noticed that conda adds some questionable compiler flags to the following environmental variables:. ```; echo $CFLAGS; -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CFLAGS_USED; -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CXXFLAGS; -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CXXFLAGS_USED; -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CPPFLAGS; -DNDEBUG -D_FORTIFY_SOURCE=2 -O2 -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CPPFLAGS_USED; -DNDEBUG -D_FORTIFY_SOURCE=2 -O2 -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $FFLAGS; -fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $FFLAGS_USED; -fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $FORTRANFLAGS; -fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; ```; Of particular concern, are the `-fstack-protector-strong` and `-D_FORTIFY_SOURCE=2` flags. Do release builds need runtim",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2416
https://github.com/psi4/psi4/issues/2416:409,Availability,echo,echo,409,"Creating a conda environment with `psi4-dev` makes it really easy to get a source build going, which is great. But I have noticed that conda adds some questionable compiler flags to the following environmental variables:. ```; echo $CFLAGS; -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CFLAGS_USED; -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CXXFLAGS; -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CXXFLAGS_USED; -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CPPFLAGS; -DNDEBUG -D_FORTIFY_SOURCE=2 -O2 -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CPPFLAGS_USED; -DNDEBUG -D_FORTIFY_SOURCE=2 -O2 -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $FFLAGS; -fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $FFLAGS_USED; -fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $FORTRANFLAGS; -fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; ```; Of particular concern, are the `-fstack-protector-strong` and `-D_FORTIFY_SOURCE=2` flags. Do release builds need runtim",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2416
https://github.com/psi4/psi4/issues/2416:596,Availability,echo,echo,596,"Creating a conda environment with `psi4-dev` makes it really easy to get a source build going, which is great. But I have noticed that conda adds some questionable compiler flags to the following environmental variables:. ```; echo $CFLAGS; -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CFLAGS_USED; -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CXXFLAGS; -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CXXFLAGS_USED; -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CPPFLAGS; -DNDEBUG -D_FORTIFY_SOURCE=2 -O2 -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CPPFLAGS_USED; -DNDEBUG -D_FORTIFY_SOURCE=2 -O2 -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $FFLAGS; -fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $FFLAGS_USED; -fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $FORTRANFLAGS; -fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; ```; Of particular concern, are the `-fstack-protector-strong` and `-D_FORTIFY_SOURCE=2` flags. Do release builds need runtim",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2416
https://github.com/psi4/psi4/issues/2416:838,Availability,echo,echo,838,"Creating a conda environment with `psi4-dev` makes it really easy to get a source build going, which is great. But I have noticed that conda adds some questionable compiler flags to the following environmental variables:. ```; echo $CFLAGS; -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CFLAGS_USED; -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CXXFLAGS; -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CXXFLAGS_USED; -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CPPFLAGS; -DNDEBUG -D_FORTIFY_SOURCE=2 -O2 -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CPPFLAGS_USED; -DNDEBUG -D_FORTIFY_SOURCE=2 -O2 -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $FFLAGS; -fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $FFLAGS_USED; -fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $FORTRANFLAGS; -fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; ```; Of particular concern, are the `-fstack-protector-strong` and `-D_FORTIFY_SOURCE=2` flags. Do release builds need runtim",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2416
https://github.com/psi4/psi4/issues/2416:1085,Availability,echo,echo,1085,"at. But I have noticed that conda adds some questionable compiler flags to the following environmental variables:. ```; echo $CFLAGS; -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CFLAGS_USED; -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CXXFLAGS; -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CXXFLAGS_USED; -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CPPFLAGS; -DNDEBUG -D_FORTIFY_SOURCE=2 -O2 -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CPPFLAGS_USED; -DNDEBUG -D_FORTIFY_SOURCE=2 -O2 -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $FFLAGS; -fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $FFLAGS_USED; -fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $FORTRANFLAGS; -fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; ```; Of particular concern, are the `-fstack-protector-strong` and `-D_FORTIFY_SOURCE=2` flags. Do release builds need runtime buffer/stack overflow checks?. I think most of the other flags are also somewhat redundant, I have done a",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2416
https://github.com/psi4/psi4/issues/2416:1186,Availability,echo,echo,1186,"ariables:. ```; echo $CFLAGS; -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CFLAGS_USED; -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CXXFLAGS; -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CXXFLAGS_USED; -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CPPFLAGS; -DNDEBUG -D_FORTIFY_SOURCE=2 -O2 -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CPPFLAGS_USED; -DNDEBUG -D_FORTIFY_SOURCE=2 -O2 -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $FFLAGS; -fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $FFLAGS_USED; -fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $FORTRANFLAGS; -fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; ```; Of particular concern, are the `-fstack-protector-strong` and `-D_FORTIFY_SOURCE=2` flags. Do release builds need runtime buffer/stack overflow checks?. I think most of the other flags are also somewhat redundant, I have done a build with `CXXFLAGS=""-fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=native -O3 -pip",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2416
https://github.com/psi4/psi4/issues/2416:1292,Availability,echo,echo,1292,"system /home/gytibor/.conda/envs/psi4gcc/include; echo $CFLAGS_USED; -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CXXFLAGS; -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CXXFLAGS_USED; -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CPPFLAGS; -DNDEBUG -D_FORTIFY_SOURCE=2 -O2 -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CPPFLAGS_USED; -DNDEBUG -D_FORTIFY_SOURCE=2 -O2 -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $FFLAGS; -fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $FFLAGS_USED; -fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $FORTRANFLAGS; -fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; ```; Of particular concern, are the `-fstack-protector-strong` and `-D_FORTIFY_SOURCE=2` flags. Do release builds need runtime buffer/stack overflow checks?. I think most of the other flags are also somewhat redundant, I have done a build with `CXXFLAGS=""-fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=native -O3 -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include""` and all the other envvars also set similarly, and the build appears to be OK, no ctests or pyt",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2416
https://github.com/psi4/psi4/issues/2416:1483,Availability,echo,echo,1483,"gytibor/.conda/envs/psi4gcc/include; echo $CFLAGS_USED; -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CXXFLAGS; -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CXXFLAGS_USED; -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CPPFLAGS; -DNDEBUG -D_FORTIFY_SOURCE=2 -O2 -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CPPFLAGS_USED; -DNDEBUG -D_FORTIFY_SOURCE=2 -O2 -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $FFLAGS; -fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $FFLAGS_USED; -fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $FORTRANFLAGS; -fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; ```; Of particular concern, are the `-fstack-protector-strong` and `-D_FORTIFY_SOURCE=2` flags. Do release builds need runtime buffer/stack overflow checks?. I think most of the other flags are also somewhat redundant, I have done a build with `CXXFLAGS=""-fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=native -O3 -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include""` and all the other envvars also set similarly, and the build appears to be OK, no ctests or pytests failed.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2416
https://github.com/psi4/psi4/issues/2416:1679,Availability,echo,echo,1679,"gytibor/.conda/envs/psi4gcc/include; echo $CFLAGS_USED; -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CXXFLAGS; -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CXXFLAGS_USED; -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CPPFLAGS; -DNDEBUG -D_FORTIFY_SOURCE=2 -O2 -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CPPFLAGS_USED; -DNDEBUG -D_FORTIFY_SOURCE=2 -O2 -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $FFLAGS; -fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $FFLAGS_USED; -fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $FORTRANFLAGS; -fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; ```; Of particular concern, are the `-fstack-protector-strong` and `-D_FORTIFY_SOURCE=2` flags. Do release builds need runtime buffer/stack overflow checks?. I think most of the other flags are also somewhat redundant, I have done a build with `CXXFLAGS=""-fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=native -O3 -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include""` and all the other envvars also set similarly, and the build appears to be OK, no ctests or pytests failed.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2416
https://github.com/psi4/psi4/issues/2416:2084,Availability,redundant,redundant,2084,"gytibor/.conda/envs/psi4gcc/include; echo $CFLAGS_USED; -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CXXFLAGS; -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CXXFLAGS_USED; -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CPPFLAGS; -DNDEBUG -D_FORTIFY_SOURCE=2 -O2 -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CPPFLAGS_USED; -DNDEBUG -D_FORTIFY_SOURCE=2 -O2 -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $FFLAGS; -fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $FFLAGS_USED; -fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $FORTRANFLAGS; -fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; ```; Of particular concern, are the `-fstack-protector-strong` and `-D_FORTIFY_SOURCE=2` flags. Do release builds need runtime buffer/stack overflow checks?. I think most of the other flags are also somewhat redundant, I have done a build with `CXXFLAGS=""-fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=native -O3 -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include""` and all the other envvars also set similarly, and the build appears to be OK, no ctests or pytests failed.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2416
https://github.com/psi4/psi4/issues/2416:1975,Deployability,release,release,1975,"gytibor/.conda/envs/psi4gcc/include; echo $CFLAGS_USED; -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CXXFLAGS; -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CXXFLAGS_USED; -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CPPFLAGS; -DNDEBUG -D_FORTIFY_SOURCE=2 -O2 -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CPPFLAGS_USED; -DNDEBUG -D_FORTIFY_SOURCE=2 -O2 -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $FFLAGS; -fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $FFLAGS_USED; -fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $FORTRANFLAGS; -fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; ```; Of particular concern, are the `-fstack-protector-strong` and `-D_FORTIFY_SOURCE=2` flags. Do release builds need runtime buffer/stack overflow checks?. I think most of the other flags are also somewhat redundant, I have done a build with `CXXFLAGS=""-fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=native -O3 -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include""` and all the other envvars also set similarly, and the build appears to be OK, no ctests or pytests failed.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2416
https://github.com/psi4/psi4/issues/2416:210,Modifiability,variab,variables,210,"Creating a conda environment with `psi4-dev` makes it really easy to get a source build going, which is great. But I have noticed that conda adds some questionable compiler flags to the following environmental variables:. ```; echo $CFLAGS; -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CFLAGS_USED; -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CXXFLAGS; -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CXXFLAGS_USED; -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CPPFLAGS; -DNDEBUG -D_FORTIFY_SOURCE=2 -O2 -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CPPFLAGS_USED; -DNDEBUG -D_FORTIFY_SOURCE=2 -O2 -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $FFLAGS; -fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $FFLAGS_USED; -fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $FORTRANFLAGS; -fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; ```; Of particular concern, are the `-fstack-protector-strong` and `-D_FORTIFY_SOURCE=2` flags. Do release builds need runtim",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2416
https://github.com/psi4/psi4/issues/2416:2084,Safety,redund,redundant,2084,"gytibor/.conda/envs/psi4gcc/include; echo $CFLAGS_USED; -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CXXFLAGS; -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CXXFLAGS_USED; -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CPPFLAGS; -DNDEBUG -D_FORTIFY_SOURCE=2 -O2 -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CPPFLAGS_USED; -DNDEBUG -D_FORTIFY_SOURCE=2 -O2 -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $FFLAGS; -fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $FFLAGS_USED; -fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $FORTRANFLAGS; -fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; ```; Of particular concern, are the `-fstack-protector-strong` and `-D_FORTIFY_SOURCE=2` flags. Do release builds need runtime buffer/stack overflow checks?. I think most of the other flags are also somewhat redundant, I have done a build with `CXXFLAGS=""-fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=native -O3 -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include""` and all the other envvars also set similarly, and the build appears to be OK, no ctests or pytests failed.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2416
https://github.com/psi4/psi4/pull/2417:145,Testability,test,tests,145,## Description; This PR replaces `new`/`delete` in `lib3index/fittingmetric.cc` with `std::vector` per task in #2412 . ## Checklist; - [x] Quick tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2417
https://github.com/psi4/psi4/pull/2418:81,Usability,Undo,Undocumented,81,"## Description; This is an _attempt_ to get the docs working again by resolving ""Undocumented input"" warnings from Sphinx. Worst case scenario, Sphinx outputs are a little shorter. Best case scenario, there was some change in Sphinx that causes crashes when this warning occurs, and we can get docs working again. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2418
https://github.com/psi4/psi4/pull/2419:178,Testability,Test,Tested,178,"## Description; This PR deprecates Psi's built-in ADC module, per discussion on the January developer conference call, issue #1033, and my own investigation. ## Checklist; - [x] Tested ADC still runs, but with well-deserved warnings. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2419
https://github.com/psi4/psi4/pull/2420:43,Modifiability,plugin,plugins,43,## Description; Exposes `FittingMetric` to plugins for one of @fevangelista's students. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2420
https://github.com/psi4/psi4/pull/2420:16,Security,Expose,Exposes,16,## Description; Exposes `FittingMetric` to plugins for one of @fevangelista's students. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2420
https://github.com/psi4/psi4/pull/2422:201,Availability,error,errors,201,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; I think whoever brought up the new ""warnings"" in the sphinx log was on the right track. We do have the treat-warnings-as-errors flag on. It's the treat-broken-links-as-errors flag that we can't enable yet. Between that and the 9800 PR in the newest sphinx changelog released 17 Jan https://www.sphinx-doc.org/en/master/changes.html#release-4-4-0-released-jan-17-2022, I bet that's what's causing our docsbuild fail. Hopefully I haven't added any new syntax errors. - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2422
https://github.com/psi4/psi4/pull/2422:248,Availability,error,errors,248,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; I think whoever brought up the new ""warnings"" in the sphinx log was on the right track. We do have the treat-warnings-as-errors flag on. It's the treat-broken-links-as-errors flag that we can't enable yet. Between that and the 9800 PR in the newest sphinx changelog released 17 Jan https://www.sphinx-doc.org/en/master/changes.html#release-4-4-0-released-jan-17-2022, I bet that's what's causing our docsbuild fail. Hopefully I haven't added any new syntax errors. - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2422
https://github.com/psi4/psi4/pull/2422:537,Availability,error,errors,537,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; I think whoever brought up the new ""warnings"" in the sphinx log was on the right track. We do have the treat-warnings-as-errors flag on. It's the treat-broken-links-as-errors flag that we can't enable yet. Between that and the 9800 PR in the newest sphinx changelog released 17 Jan https://www.sphinx-doc.org/en/master/changes.html#release-4-4-0-released-jan-17-2022, I bet that's what's causing our docsbuild fail. Hopefully I haven't added any new syntax errors. - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2422
https://github.com/psi4/psi4/pull/2422:346,Deployability,release,released,346,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; I think whoever brought up the new ""warnings"" in the sphinx log was on the right track. We do have the treat-warnings-as-errors flag on. It's the treat-broken-links-as-errors flag that we can't enable yet. Between that and the 9800 PR in the newest sphinx changelog released 17 Jan https://www.sphinx-doc.org/en/master/changes.html#release-4-4-0-released-jan-17-2022, I bet that's what's causing our docsbuild fail. Hopefully I haven't added any new syntax errors. - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2422
https://github.com/psi4/psi4/pull/2422:412,Deployability,release,release-,412,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; I think whoever brought up the new ""warnings"" in the sphinx log was on the right track. We do have the treat-warnings-as-errors flag on. It's the treat-broken-links-as-errors flag that we can't enable yet. Between that and the 9800 PR in the newest sphinx changelog released 17 Jan https://www.sphinx-doc.org/en/master/changes.html#release-4-4-0-released-jan-17-2022, I bet that's what's causing our docsbuild fail. Hopefully I haven't added any new syntax errors. - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2422
https://github.com/psi4/psi4/pull/2422:426,Deployability,release,released-jan-,426,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; I think whoever brought up the new ""warnings"" in the sphinx log was on the right track. We do have the treat-warnings-as-errors flag on. It's the treat-broken-links-as-errors flag that we can't enable yet. Between that and the 9800 PR in the newest sphinx changelog released 17 Jan https://www.sphinx-doc.org/en/master/changes.html#release-4-4-0-released-jan-17-2022, I bet that's what's causing our docsbuild fail. Hopefully I haven't added any new syntax errors. - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2422
https://github.com/psi4/psi4/pull/2422:140,Testability,log,log,140,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; I think whoever brought up the new ""warnings"" in the sphinx log was on the right track. We do have the treat-warnings-as-errors flag on. It's the treat-broken-links-as-errors flag that we can't enable yet. Between that and the 9800 PR in the newest sphinx changelog released 17 Jan https://www.sphinx-doc.org/en/master/changes.html#release-4-4-0-released-jan-17-2022, I bet that's what's causing our docsbuild fail. Hopefully I haven't added any new syntax errors. - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2422
https://github.com/psi4/psi4/pull/2423:149,Availability,down,downstream,149,"## Description; Deprecates ways of calling derivatives that are, as best as I can tell, artifacts of legacy code that were never removed. If anybody downstream of us needs these, we're giving them a chance to prevent us. Otherwise, less code, less problems. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2423
https://github.com/psi4/psi4/pull/2425:97,Availability,redundant,redundant,97,"## Description; Misc. cleanup related to SCF densities. Marking function returns const, removing redundant class members, and condensing variable declarations and variable definitions. ## Checklist; - [x] Quicktests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2425
https://github.com/psi4/psi4/pull/2425:137,Modifiability,variab,variable,137,"## Description; Misc. cleanup related to SCF densities. Marking function returns const, removing redundant class members, and condensing variable declarations and variable definitions. ## Checklist; - [x] Quicktests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2425
https://github.com/psi4/psi4/pull/2425:163,Modifiability,variab,variable,163,"## Description; Misc. cleanup related to SCF densities. Marking function returns const, removing redundant class members, and condensing variable declarations and variable definitions. ## Checklist; - [x] Quicktests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2425
https://github.com/psi4/psi4/pull/2425:97,Safety,redund,redundant,97,"## Description; Misc. cleanup related to SCF densities. Marking function returns const, removing redundant class members, and condensing variable declarations and variable definitions. ## Checklist; - [x] Quicktests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2425
https://github.com/psi4/psi4/issues/2427:2713,Availability,error,error,2713,": 0); | ; In file included from build/stage/include/libint2/solidharmonics.h:38,; from build/stage/include/libint2/cxxapi.h:39,; from build/stage/include/libint2/engine.h:48,; from psi4/src/psi4/libmints/shellpair.h:8,; from psi4/src/psi4/libmints/eri.h:42,; from psi4/src/export_mints.cc:54:; build/stage/include/libint2/cgshell_ordering.h:93: warning: ""INT_CARTINDEX"" redefined; 93 | #define INT_CARTINDEX(am,i,j) ( (((((am) - (i) + 1)*((am) - (i)))>>1) + (am) - (i) - (j)) ); | ; In file included from psi4/src/export_mints.cc:48:; psi4/src/psi4/libmints/integral.h:64: note: this is the location of the previous definition; 64 | #define INT_CARTINDEX(am, i, j) (((i) == (am)) ? 0 : (((((am) - (i) + 1) * ((am) - (i))) >> 1) + (am) - (i) - (j))); | ; In file included from build/stage/include/libint2/engine.h:1019,; from psi4/src/psi4/libmints/shellpair.h:8,; from psi4/src/psi4/libmints/eri.h:42,; from psi4/src/export_mints.cc:54:; build/stage/include/libint2/./engine.impl.h:35:11: fatal error: boost/preprocessor.hpp: No such file or directory; 35 | # include <boost/preprocessor.hpp>; | ^~~~~~~~~~~~~~~~~~~~~~~~; compilation terminated.; [11/1097] Building CXX object src/CMakeFiles/core.dir/read_options.cc.o; ninja: build stopped: subcommand failed.; FAILED: psi4-core-prefix/src/psi4-core-stamp/psi4-core-build ; cd build/psi4-core-prefix/src/psi4-core-build && /usr/bin/cmake --build .; ninja: build stopped: subcommand failed.; ```. https://github.com/psi4/psi4/blob/2e3b0f2039ff0e9a968f964ede868adf790ca54e/psi4/src/CMakeLists.txt#L55-L61. `build/external/upstream/libint2/libint2_external-prefix/src/libint2_external/CMakeLists.txt` has the following part:; ```cmake; if (BUILD_SHARED); add_library (int-shared SHARED $<TARGET_OBJECTS:int-obj>); target_link_libraries (int-shared INTERFACE Eigen3::Eigen); set_target_properties (int-shared PROPERTIES SOVERSION ${LIBINT_MAJOR_SOVERSION}; MACOSX_RPATH ON; OUTPUT_NAME ""int2""; EXPORT_NAME ""cxx""); target_include_directories(int-shared IN",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2427
https://github.com/psi4/psi4/issues/2427:4367,Availability,failure,failure,4367,", i, j) (((i) == (am)) ? 0 : (((((am) - (i) + 1) * ((am) - (i))) >> 1) + (am) - (i) - (j))); | ; In file included from build/stage/include/libint2/engine.h:1019,; from psi4/src/psi4/libmints/shellpair.h:8,; from psi4/src/psi4/libmints/eri.h:42,; from psi4/src/export_mints.cc:54:; build/stage/include/libint2/./engine.impl.h:35:11: fatal error: boost/preprocessor.hpp: No such file or directory; 35 | # include <boost/preprocessor.hpp>; | ^~~~~~~~~~~~~~~~~~~~~~~~; compilation terminated.; [11/1097] Building CXX object src/CMakeFiles/core.dir/read_options.cc.o; ninja: build stopped: subcommand failed.; FAILED: psi4-core-prefix/src/psi4-core-stamp/psi4-core-build ; cd build/psi4-core-prefix/src/psi4-core-build && /usr/bin/cmake --build .; ninja: build stopped: subcommand failed.; ```. https://github.com/psi4/psi4/blob/2e3b0f2039ff0e9a968f964ede868adf790ca54e/psi4/src/CMakeLists.txt#L55-L61. `build/external/upstream/libint2/libint2_external-prefix/src/libint2_external/CMakeLists.txt` has the following part:; ```cmake; if (BUILD_SHARED); add_library (int-shared SHARED $<TARGET_OBJECTS:int-obj>); target_link_libraries (int-shared INTERFACE Eigen3::Eigen); set_target_properties (int-shared PROPERTIES SOVERSION ${LIBINT_MAJOR_SOVERSION}; MACOSX_RPATH ON; OUTPUT_NAME ""int2""; EXPORT_NAME ""cxx""); target_include_directories(int-shared INTERFACE $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>); endif(). if (BUILD_STATIC); add_library (int-static STATIC $<TARGET_OBJECTS:int-obj>); target_link_libraries (int-static INTERFACE Eigen3::Eigen); set_target_properties (int-static PROPERTIES OUTPUT_NAME ""int2""; EXPORT_NAME ""cxx""); target_include_directories(int-static INTERFACE $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>); endif(); ```; which seems to come from https://github.com/loriab/libint/blob/6c3a9ce2ef01b6beb7c2804318699c8ba50065d6/src/lib/libint/CMakeLists.txt.export#L117-L133. Here, the dependency on Eigen is properly set, but that on boost is not, resulting in build failure.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2427
https://github.com/psi4/psi4/issues/2427:3514,Integrability,INTERFACE,INTERFACE,3514,", i, j) (((i) == (am)) ? 0 : (((((am) - (i) + 1) * ((am) - (i))) >> 1) + (am) - (i) - (j))); | ; In file included from build/stage/include/libint2/engine.h:1019,; from psi4/src/psi4/libmints/shellpair.h:8,; from psi4/src/psi4/libmints/eri.h:42,; from psi4/src/export_mints.cc:54:; build/stage/include/libint2/./engine.impl.h:35:11: fatal error: boost/preprocessor.hpp: No such file or directory; 35 | # include <boost/preprocessor.hpp>; | ^~~~~~~~~~~~~~~~~~~~~~~~; compilation terminated.; [11/1097] Building CXX object src/CMakeFiles/core.dir/read_options.cc.o; ninja: build stopped: subcommand failed.; FAILED: psi4-core-prefix/src/psi4-core-stamp/psi4-core-build ; cd build/psi4-core-prefix/src/psi4-core-build && /usr/bin/cmake --build .; ninja: build stopped: subcommand failed.; ```. https://github.com/psi4/psi4/blob/2e3b0f2039ff0e9a968f964ede868adf790ca54e/psi4/src/CMakeLists.txt#L55-L61. `build/external/upstream/libint2/libint2_external-prefix/src/libint2_external/CMakeLists.txt` has the following part:; ```cmake; if (BUILD_SHARED); add_library (int-shared SHARED $<TARGET_OBJECTS:int-obj>); target_link_libraries (int-shared INTERFACE Eigen3::Eigen); set_target_properties (int-shared PROPERTIES SOVERSION ${LIBINT_MAJOR_SOVERSION}; MACOSX_RPATH ON; OUTPUT_NAME ""int2""; EXPORT_NAME ""cxx""); target_include_directories(int-shared INTERFACE $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>); endif(). if (BUILD_STATIC); add_library (int-static STATIC $<TARGET_OBJECTS:int-obj>); target_link_libraries (int-static INTERFACE Eigen3::Eigen); set_target_properties (int-static PROPERTIES OUTPUT_NAME ""int2""; EXPORT_NAME ""cxx""); target_include_directories(int-static INTERFACE $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>); endif(); ```; which seems to come from https://github.com/loriab/libint/blob/6c3a9ce2ef01b6beb7c2804318699c8ba50065d6/src/lib/libint/CMakeLists.txt.export#L117-L133. Here, the dependency on Eigen is properly set, but that on boost is not, resulting in build failure.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2427
https://github.com/psi4/psi4/issues/2427:3717,Integrability,INTERFACE,INTERFACE,3717,", i, j) (((i) == (am)) ? 0 : (((((am) - (i) + 1) * ((am) - (i))) >> 1) + (am) - (i) - (j))); | ; In file included from build/stage/include/libint2/engine.h:1019,; from psi4/src/psi4/libmints/shellpair.h:8,; from psi4/src/psi4/libmints/eri.h:42,; from psi4/src/export_mints.cc:54:; build/stage/include/libint2/./engine.impl.h:35:11: fatal error: boost/preprocessor.hpp: No such file or directory; 35 | # include <boost/preprocessor.hpp>; | ^~~~~~~~~~~~~~~~~~~~~~~~; compilation terminated.; [11/1097] Building CXX object src/CMakeFiles/core.dir/read_options.cc.o; ninja: build stopped: subcommand failed.; FAILED: psi4-core-prefix/src/psi4-core-stamp/psi4-core-build ; cd build/psi4-core-prefix/src/psi4-core-build && /usr/bin/cmake --build .; ninja: build stopped: subcommand failed.; ```. https://github.com/psi4/psi4/blob/2e3b0f2039ff0e9a968f964ede868adf790ca54e/psi4/src/CMakeLists.txt#L55-L61. `build/external/upstream/libint2/libint2_external-prefix/src/libint2_external/CMakeLists.txt` has the following part:; ```cmake; if (BUILD_SHARED); add_library (int-shared SHARED $<TARGET_OBJECTS:int-obj>); target_link_libraries (int-shared INTERFACE Eigen3::Eigen); set_target_properties (int-shared PROPERTIES SOVERSION ${LIBINT_MAJOR_SOVERSION}; MACOSX_RPATH ON; OUTPUT_NAME ""int2""; EXPORT_NAME ""cxx""); target_include_directories(int-shared INTERFACE $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>); endif(). if (BUILD_STATIC); add_library (int-static STATIC $<TARGET_OBJECTS:int-obj>); target_link_libraries (int-static INTERFACE Eigen3::Eigen); set_target_properties (int-static PROPERTIES OUTPUT_NAME ""int2""; EXPORT_NAME ""cxx""); target_include_directories(int-static INTERFACE $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>); endif(); ```; which seems to come from https://github.com/loriab/libint/blob/6c3a9ce2ef01b6beb7c2804318699c8ba50065d6/src/lib/libint/CMakeLists.txt.export#L117-L133. Here, the dependency on Eigen is properly set, but that on boost is not, resulting in build failure.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2427
https://github.com/psi4/psi4/issues/2427:3899,Integrability,INTERFACE,INTERFACE,3899,", i, j) (((i) == (am)) ? 0 : (((((am) - (i) + 1) * ((am) - (i))) >> 1) + (am) - (i) - (j))); | ; In file included from build/stage/include/libint2/engine.h:1019,; from psi4/src/psi4/libmints/shellpair.h:8,; from psi4/src/psi4/libmints/eri.h:42,; from psi4/src/export_mints.cc:54:; build/stage/include/libint2/./engine.impl.h:35:11: fatal error: boost/preprocessor.hpp: No such file or directory; 35 | # include <boost/preprocessor.hpp>; | ^~~~~~~~~~~~~~~~~~~~~~~~; compilation terminated.; [11/1097] Building CXX object src/CMakeFiles/core.dir/read_options.cc.o; ninja: build stopped: subcommand failed.; FAILED: psi4-core-prefix/src/psi4-core-stamp/psi4-core-build ; cd build/psi4-core-prefix/src/psi4-core-build && /usr/bin/cmake --build .; ninja: build stopped: subcommand failed.; ```. https://github.com/psi4/psi4/blob/2e3b0f2039ff0e9a968f964ede868adf790ca54e/psi4/src/CMakeLists.txt#L55-L61. `build/external/upstream/libint2/libint2_external-prefix/src/libint2_external/CMakeLists.txt` has the following part:; ```cmake; if (BUILD_SHARED); add_library (int-shared SHARED $<TARGET_OBJECTS:int-obj>); target_link_libraries (int-shared INTERFACE Eigen3::Eigen); set_target_properties (int-shared PROPERTIES SOVERSION ${LIBINT_MAJOR_SOVERSION}; MACOSX_RPATH ON; OUTPUT_NAME ""int2""; EXPORT_NAME ""cxx""); target_include_directories(int-shared INTERFACE $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>); endif(). if (BUILD_STATIC); add_library (int-static STATIC $<TARGET_OBJECTS:int-obj>); target_link_libraries (int-static INTERFACE Eigen3::Eigen); set_target_properties (int-static PROPERTIES OUTPUT_NAME ""int2""; EXPORT_NAME ""cxx""); target_include_directories(int-static INTERFACE $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>); endif(); ```; which seems to come from https://github.com/loriab/libint/blob/6c3a9ce2ef01b6beb7c2804318699c8ba50065d6/src/lib/libint/CMakeLists.txt.export#L117-L133. Here, the dependency on Eigen is properly set, but that on boost is not, resulting in build failure.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2427
https://github.com/psi4/psi4/issues/2427:4048,Integrability,INTERFACE,INTERFACE,4048,", i, j) (((i) == (am)) ? 0 : (((((am) - (i) + 1) * ((am) - (i))) >> 1) + (am) - (i) - (j))); | ; In file included from build/stage/include/libint2/engine.h:1019,; from psi4/src/psi4/libmints/shellpair.h:8,; from psi4/src/psi4/libmints/eri.h:42,; from psi4/src/export_mints.cc:54:; build/stage/include/libint2/./engine.impl.h:35:11: fatal error: boost/preprocessor.hpp: No such file or directory; 35 | # include <boost/preprocessor.hpp>; | ^~~~~~~~~~~~~~~~~~~~~~~~; compilation terminated.; [11/1097] Building CXX object src/CMakeFiles/core.dir/read_options.cc.o; ninja: build stopped: subcommand failed.; FAILED: psi4-core-prefix/src/psi4-core-stamp/psi4-core-build ; cd build/psi4-core-prefix/src/psi4-core-build && /usr/bin/cmake --build .; ninja: build stopped: subcommand failed.; ```. https://github.com/psi4/psi4/blob/2e3b0f2039ff0e9a968f964ede868adf790ca54e/psi4/src/CMakeLists.txt#L55-L61. `build/external/upstream/libint2/libint2_external-prefix/src/libint2_external/CMakeLists.txt` has the following part:; ```cmake; if (BUILD_SHARED); add_library (int-shared SHARED $<TARGET_OBJECTS:int-obj>); target_link_libraries (int-shared INTERFACE Eigen3::Eigen); set_target_properties (int-shared PROPERTIES SOVERSION ${LIBINT_MAJOR_SOVERSION}; MACOSX_RPATH ON; OUTPUT_NAME ""int2""; EXPORT_NAME ""cxx""); target_include_directories(int-shared INTERFACE $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>); endif(). if (BUILD_STATIC); add_library (int-static STATIC $<TARGET_OBJECTS:int-obj>); target_link_libraries (int-static INTERFACE Eigen3::Eigen); set_target_properties (int-static PROPERTIES OUTPUT_NAME ""int2""; EXPORT_NAME ""cxx""); target_include_directories(int-static INTERFACE $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>); endif(); ```; which seems to come from https://github.com/loriab/libint/blob/6c3a9ce2ef01b6beb7c2804318699c8ba50065d6/src/lib/libint/CMakeLists.txt.export#L117-L133. Here, the dependency on Eigen is properly set, but that on boost is not, resulting in build failure.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2427
https://github.com/psi4/psi4/issues/2427:4285,Integrability,depend,dependency,4285,", i, j) (((i) == (am)) ? 0 : (((((am) - (i) + 1) * ((am) - (i))) >> 1) + (am) - (i) - (j))); | ; In file included from build/stage/include/libint2/engine.h:1019,; from psi4/src/psi4/libmints/shellpair.h:8,; from psi4/src/psi4/libmints/eri.h:42,; from psi4/src/export_mints.cc:54:; build/stage/include/libint2/./engine.impl.h:35:11: fatal error: boost/preprocessor.hpp: No such file or directory; 35 | # include <boost/preprocessor.hpp>; | ^~~~~~~~~~~~~~~~~~~~~~~~; compilation terminated.; [11/1097] Building CXX object src/CMakeFiles/core.dir/read_options.cc.o; ninja: build stopped: subcommand failed.; FAILED: psi4-core-prefix/src/psi4-core-stamp/psi4-core-build ; cd build/psi4-core-prefix/src/psi4-core-build && /usr/bin/cmake --build .; ninja: build stopped: subcommand failed.; ```. https://github.com/psi4/psi4/blob/2e3b0f2039ff0e9a968f964ede868adf790ca54e/psi4/src/CMakeLists.txt#L55-L61. `build/external/upstream/libint2/libint2_external-prefix/src/libint2_external/CMakeLists.txt` has the following part:; ```cmake; if (BUILD_SHARED); add_library (int-shared SHARED $<TARGET_OBJECTS:int-obj>); target_link_libraries (int-shared INTERFACE Eigen3::Eigen); set_target_properties (int-shared PROPERTIES SOVERSION ${LIBINT_MAJOR_SOVERSION}; MACOSX_RPATH ON; OUTPUT_NAME ""int2""; EXPORT_NAME ""cxx""); target_include_directories(int-shared INTERFACE $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>); endif(). if (BUILD_STATIC); add_library (int-static STATIC $<TARGET_OBJECTS:int-obj>); target_link_libraries (int-static INTERFACE Eigen3::Eigen); set_target_properties (int-static PROPERTIES OUTPUT_NAME ""int2""; EXPORT_NAME ""cxx""); target_include_directories(int-static INTERFACE $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>); endif(); ```; which seems to come from https://github.com/loriab/libint/blob/6c3a9ce2ef01b6beb7c2804318699c8ba50065d6/src/lib/libint/CMakeLists.txt.export#L117-L133. Here, the dependency on Eigen is properly set, but that on boost is not, resulting in build failure.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2427
https://github.com/psi4/psi4/issues/2427:397,Performance,Perform,Performing,397,"This is rather an issue of [loriab/libint](https://github.com/loriab/libint), but I open here since it is not allowed there. Steps to reproduce is as follows:; ```console; $ git describe --always; v1.5-45-g2e3b0f2039ff; $ cmake -G Ninja -B build -S . -D BOOST_ROOT:PATH=/path/to/boost -D Eigen3_DIR:PATH=/path/to/eigen3 -D CMAKE_BUILD_TYPE:STRING=RelWithDebInfo; $ cmake --builld build; …; [9/12] Performing build step for 'psi4-core'; [1/1097] Generating version info; Defining development snapshot version: 1.6a1.dev45+2e3b0f2 (computed); 1.6a1.dev45 {master} 2e3b0f2 1.5.0.999 1.5 <-- 1.6a1.dev45+2e3b0f2; [2/1097] Building CXX object src/CMakeFiles/l2export.dir/export_mints.cc.o; FAILED: src/CMakeFiles/l2export.dir/export_mints.cc.o ; /usr/bin/c++ -Ipsi4/include -Ipsi4/src -I/usr/include/python3.9 -Ibuild/stage/include -I/path/to/eigen3 -march=native -O2 -g -DNDEBUG -fPIC -std=c++14 -MD -MT src/CMakeFiles/l2export.dir/export_mints.cc.o -MF src/CMakeFiles/l2export.dir/export_mints.cc.o.d -o src/CMakeFiles/l2export.dir/export_mints.cc.o -c psi4/src/export_mints.cc; In file included from build/stage/include/libint2/solidharmonics.h:38,; from build/stage/include/libint2/cxxapi.h:39,; from build/stage/include/libint2/engine.h:48,; from psi4/src/psi4/libmints/shellpair.h:8,; from psi4/src/psi4/libmints/eri.h:42,; from psi4/src/export_mints.cc:54:; build/stage/include/libint2/cgshell_ordering.h:63: warning: ""INT_NCART"" redefined; 63 | #define INT_NCART(am) ((((am)+2)*((am)+1))>>1); | ; In file included from psi4/src/export_mints.cc:48:; psi4/src/psi4/libmints/integral.h:46: note: this is the location of the previous definition; 46 | #define INT_NCART(am) ((am >= 0) ? ((((am) + 2) * ((am) + 1)) >> 1) : 0); | ; In file included from build/stage/include/libint2/solidharmonics.h:38,; from build/stage/include/libint2/cxxapi.h:39,; from build/stage/include/libint2/engine.h:48,; from psi4/src/psi4/libmints/shellpair.h:8,; from psi4/src/psi4/libmints/eri.h:42,; from psi4/src/export_min",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2427
https://github.com/psi4/psi4/pull/2428:156,Availability,error,error-codes,156,## Description; <!-- Provide a brief description of the PR's purpose here. -->; - fix [E101](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E502](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E703](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E711](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E712](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E713](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E722](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [W605](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->. ## Questions. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2428
https://github.com/psi4/psi4/pull/2428:246,Availability,error,error-codes,246,## Description; <!-- Provide a brief description of the PR's purpose here. -->; - fix [E101](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E502](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E703](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E711](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E712](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E713](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E722](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [W605](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->. ## Questions. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2428
https://github.com/psi4/psi4/pull/2428:336,Availability,error,error-codes,336,## Description; <!-- Provide a brief description of the PR's purpose here. -->; - fix [E101](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E502](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E703](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E711](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E712](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E713](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E722](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [W605](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->. ## Questions. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2428
https://github.com/psi4/psi4/pull/2428:426,Availability,error,error-codes,426,## Description; <!-- Provide a brief description of the PR's purpose here. -->; - fix [E101](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E502](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E703](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E711](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E712](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E713](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E722](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [W605](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->. ## Questions. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2428
https://github.com/psi4/psi4/pull/2428:516,Availability,error,error-codes,516,## Description; <!-- Provide a brief description of the PR's purpose here. -->; - fix [E101](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E502](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E703](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E711](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E712](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E713](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E722](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [W605](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->. ## Questions. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2428
https://github.com/psi4/psi4/pull/2428:606,Availability,error,error-codes,606,## Description; <!-- Provide a brief description of the PR's purpose here. -->; - fix [E101](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E502](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E703](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E711](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E712](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E713](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E722](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [W605](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->. ## Questions. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2428
https://github.com/psi4/psi4/pull/2428:696,Availability,error,error-codes,696,## Description; <!-- Provide a brief description of the PR's purpose here. -->; - fix [E101](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E502](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E703](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E711](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E712](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E713](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E722](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [W605](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->. ## Questions. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2428
https://github.com/psi4/psi4/pull/2428:786,Availability,error,error-codes,786,## Description; <!-- Provide a brief description of the PR's purpose here. -->; - fix [E101](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E502](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E703](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E711](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E712](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E713](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E722](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [W605](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->. ## Questions. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2428
https://github.com/psi4/psi4/pull/2428:935,Testability,Test,Tests,935,## Description; <!-- Provide a brief description of the PR's purpose here. -->; - fix [E101](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E502](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E703](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E711](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E712](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E713](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E722](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [W605](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->. ## Questions. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2428
https://github.com/psi4/psi4/pull/2428:1009,Testability,test,tests,1009,## Description; <!-- Provide a brief description of the PR's purpose here. -->; - fix [E101](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E502](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E703](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E711](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E712](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E713](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E722](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [W605](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->. ## Questions. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2428
https://github.com/psi4/psi4/pull/2428:1100,Testability,test,tests,1100,## Description; <!-- Provide a brief description of the PR's purpose here. -->; - fix [E101](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E502](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E703](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E711](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E712](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E713](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [E722](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes); - fix [W605](https://github.com/PyCQA/pycodestyle/blob/2.8.0/docs/intro.rst#error-codes). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->. ## Questions. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2428
https://github.com/psi4/psi4/pull/2429:237,Availability,error,errors,237,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This is picked out of #2413 as independent. Depending on the version of l2, this'll either issue warnings (psi4 l2 fork where `INT_NCART` is still macro) or errors (l2 master where `INT_NCART` now inline fn) when building psi4. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2429
https://github.com/psi4/psi4/pull/2429:124,Integrability,Depend,Depending,124,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This is picked out of #2413 as independent. Depending on the version of l2, this'll either issue warnings (psi4 l2 fork where `INT_NCART` is still macro) or errors (l2 master where `INT_NCART` now inline fn) when building psi4. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2429
https://github.com/psi4/psi4/issues/2430:34,Usability,Undo,Undo,34,This issue serves as a reminder.; Undo #2362 once all bugs are fixed.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2430
https://github.com/psi4/psi4/issues/2431:834,Energy Efficiency,energy,energy,834,"Original report: http://forum.psicode.org/t/tdscf-calculation-for-large-system/2407. Contrary to the forum report I found no issue with B3LYP.; Only the combination of range-separated functionals and `mem_df` seems to give wrong results.; Note, for current PSI4 v1.5 the `wcombine` option is turned off https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/jk.cc#L111. H2O2 example:; ```; from psi4.driver.procrouting.response.scf_response import tdscf_excitations; mol = geometry(""""""; 0 1; O 0.000000000000 0.695000000000 -0.049338363732; O 0.000000000000 -0.695000000000 -0.049338363732; H -0.388142000000 0.895249000000 0.783035636268; H 0.388142000000 -0.895249000000 0.783035636268; symmetry c1; """"""); psi4.set_options({; 'basis':'def2-SVP',; 'scf_type':'mem_df',; 'save_jk': True,; 'tdscf_tda':True,; }); e, wfn = psi4.energy(""cam-b3lyp"", return_wfn=True, molecule=mol); res = tdscf_excitations(wfn, states=2,tda=True,r_convergence=2e-7); ```. [H2O2_memDF.txt](https://github.com/psi4/psi4/files/8027476/H2O2_memDF.txt); [H2O2_PK.txt](https://github.com/psi4/psi4/files/8027475/H2O2_PK.txt); [H2O2_diskDF.txt](https://github.com/psi4/psi4/files/8027477/H2O2_diskDF.txt). ---. QCHEM results; ```; Excited state 1: excitation energy (eV) = 6.5611; Excited state 2: excitation energy (eV) = 6.7734; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2431
https://github.com/psi4/psi4/issues/2431:1239,Energy Efficiency,energy,energy,1239,"Original report: http://forum.psicode.org/t/tdscf-calculation-for-large-system/2407. Contrary to the forum report I found no issue with B3LYP.; Only the combination of range-separated functionals and `mem_df` seems to give wrong results.; Note, for current PSI4 v1.5 the `wcombine` option is turned off https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/jk.cc#L111. H2O2 example:; ```; from psi4.driver.procrouting.response.scf_response import tdscf_excitations; mol = geometry(""""""; 0 1; O 0.000000000000 0.695000000000 -0.049338363732; O 0.000000000000 -0.695000000000 -0.049338363732; H -0.388142000000 0.895249000000 0.783035636268; H 0.388142000000 -0.895249000000 0.783035636268; symmetry c1; """"""); psi4.set_options({; 'basis':'def2-SVP',; 'scf_type':'mem_df',; 'save_jk': True,; 'tdscf_tda':True,; }); e, wfn = psi4.energy(""cam-b3lyp"", return_wfn=True, molecule=mol); res = tdscf_excitations(wfn, states=2,tda=True,r_convergence=2e-7); ```. [H2O2_memDF.txt](https://github.com/psi4/psi4/files/8027476/H2O2_memDF.txt); [H2O2_PK.txt](https://github.com/psi4/psi4/files/8027475/H2O2_PK.txt); [H2O2_diskDF.txt](https://github.com/psi4/psi4/files/8027477/H2O2_diskDF.txt). ---. QCHEM results; ```; Excited state 1: excitation energy (eV) = 6.5611; Excited state 2: excitation energy (eV) = 6.7734; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2431
https://github.com/psi4/psi4/issues/2431:1289,Energy Efficiency,energy,energy,1289,"Original report: http://forum.psicode.org/t/tdscf-calculation-for-large-system/2407. Contrary to the forum report I found no issue with B3LYP.; Only the combination of range-separated functionals and `mem_df` seems to give wrong results.; Note, for current PSI4 v1.5 the `wcombine` option is turned off https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/jk.cc#L111. H2O2 example:; ```; from psi4.driver.procrouting.response.scf_response import tdscf_excitations; mol = geometry(""""""; 0 1; O 0.000000000000 0.695000000000 -0.049338363732; O 0.000000000000 -0.695000000000 -0.049338363732; H -0.388142000000 0.895249000000 0.783035636268; H 0.388142000000 -0.895249000000 0.783035636268; symmetry c1; """"""); psi4.set_options({; 'basis':'def2-SVP',; 'scf_type':'mem_df',; 'save_jk': True,; 'tdscf_tda':True,; }); e, wfn = psi4.energy(""cam-b3lyp"", return_wfn=True, molecule=mol); res = tdscf_excitations(wfn, states=2,tda=True,r_convergence=2e-7); ```. [H2O2_memDF.txt](https://github.com/psi4/psi4/files/8027476/H2O2_memDF.txt); [H2O2_PK.txt](https://github.com/psi4/psi4/files/8027475/H2O2_PK.txt); [H2O2_diskDF.txt](https://github.com/psi4/psi4/files/8027477/H2O2_diskDF.txt). ---. QCHEM results; ```; Excited state 1: excitation energy (eV) = 6.5611; Excited state 2: excitation energy (eV) = 6.7734; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2431
https://github.com/psi4/psi4/issues/2432:1412,Availability,Ping,Pinging,1412,"fference test. My problem is that _I have absolutely no idea how to do this without going through gradient_. If I naively go through properties, the OPDM relaxation terms get dropped because they are expensive. But if I explicitly order OPDM relaxation terms... ```; molecule { ; O; H 1 1.0 ; H 1 1.0 2 101.5; }. set opdm_relax true. properties('ccsd/cc-pvdz'); ```. The `cc` module rebels and informs me that it is `Turning orbital relaxation off since only onepdm is requested.` (TPDM is needed to construct the CC orbital gradient needed for the Z-vector equation.). Who told `cc` to only compute the OPDM? [This line of driver code, which the user cannot override.](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L3124) Although [docs report](https://github.com/psi4/psi4/blob/master/psi4/src/read_options.cc#L1812) that this flag controls whether the onepdm is computed, internal `ccdensity` [says](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccdensity/Params.h#L49) the flag controls whether the 1PDM _alone_ is computed, implicitly denying the 2PDM from ever being computed. Pinging @loriab for all things keyword standardization and @lothian in case you had a reason for [coding this](https://github.com/psi4/psi4archive/commit/575ec501ee7638cf4ff0c373f78e03ae6aac00c4). In my view:; - Keyword `onepdm` should be renamed to something like `onepdm_only`.; - `onepdm_only` default changes to `true`.; - Requesting either `relax_opdm` or a method that inherently requires 2-electron densities (gradients for sure) trumps `onepdm_only`.; - In all other cases, the driver is no longer responsible for setting `onepdm_only`.; - Default for `relax_opdm` remains false, and therefore, 2PDM will not be computed unless necessary. If we're agreed, I'm happy to make these changes. I'm more afraid of the current state of densities in Psi than I am of legacy code. We would need to discuss how we want to handle deprecation, and which CC properties need the 2PDM.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2432
https://github.com/psi4/psi4/issues/2432:4,Testability,test,testing,4,"For testing purposes, I want a CCSD OPDM including orbital relaxation contributions. This script works:; ```; molecule { ; O; H 1 1.0 ; H 1 1.0 2 101.5; }. wfn = gradient('ccsd/cc-pvdz', return_wfn=True)[1]. oeprop(wfn, 'DIPOLE'); ```. ...and I can confirm it's correct by doing a finite difference test. My problem is that _I have absolutely no idea how to do this without going through gradient_. If I naively go through properties, the OPDM relaxation terms get dropped because they are expensive. But if I explicitly order OPDM relaxation terms... ```; molecule { ; O; H 1 1.0 ; H 1 1.0 2 101.5; }. set opdm_relax true. properties('ccsd/cc-pvdz'); ```. The `cc` module rebels and informs me that it is `Turning orbital relaxation off since only onepdm is requested.` (TPDM is needed to construct the CC orbital gradient needed for the Z-vector equation.). Who told `cc` to only compute the OPDM? [This line of driver code, which the user cannot override.](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L3124) Although [docs report](https://github.com/psi4/psi4/blob/master/psi4/src/read_options.cc#L1812) that this flag controls whether the onepdm is computed, internal `ccdensity` [says](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccdensity/Params.h#L49) the flag controls whether the 1PDM _alone_ is computed, implicitly denying the 2PDM from ever being computed. Pinging @loriab for all things keyword standardization and @lothian in case you had a reason for [coding this](https://github.com/psi4/psi4archive/commit/575ec501ee7638cf4ff0c373f78e03ae6aac00c4). In my view:; - Keyword `onepdm` should be renamed to something like `onepdm_only`.; - `onepdm_only` default changes to `true`.; - Requesting either `relax_opdm` or a method that inherently requires 2-electron densities (gradients for sure) trumps `onepdm_only`.; - In all other cases, the driver is no longer responsible for setting `onepdm_only`.; - Default for `relax_opdm` remains false, a",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2432
https://github.com/psi4/psi4/issues/2432:299,Testability,test,test,299,"For testing purposes, I want a CCSD OPDM including orbital relaxation contributions. This script works:; ```; molecule { ; O; H 1 1.0 ; H 1 1.0 2 101.5; }. wfn = gradient('ccsd/cc-pvdz', return_wfn=True)[1]. oeprop(wfn, 'DIPOLE'); ```. ...and I can confirm it's correct by doing a finite difference test. My problem is that _I have absolutely no idea how to do this without going through gradient_. If I naively go through properties, the OPDM relaxation terms get dropped because they are expensive. But if I explicitly order OPDM relaxation terms... ```; molecule { ; O; H 1 1.0 ; H 1 1.0 2 101.5; }. set opdm_relax true. properties('ccsd/cc-pvdz'); ```. The `cc` module rebels and informs me that it is `Turning orbital relaxation off since only onepdm is requested.` (TPDM is needed to construct the CC orbital gradient needed for the Z-vector equation.). Who told `cc` to only compute the OPDM? [This line of driver code, which the user cannot override.](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L3124) Although [docs report](https://github.com/psi4/psi4/blob/master/psi4/src/read_options.cc#L1812) that this flag controls whether the onepdm is computed, internal `ccdensity` [says](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccdensity/Params.h#L49) the flag controls whether the 1PDM _alone_ is computed, implicitly denying the 2PDM from ever being computed. Pinging @loriab for all things keyword standardization and @lothian in case you had a reason for [coding this](https://github.com/psi4/psi4archive/commit/575ec501ee7638cf4ff0c373f78e03ae6aac00c4). In my view:; - Keyword `onepdm` should be renamed to something like `onepdm_only`.; - `onepdm_only` default changes to `true`.; - Requesting either `relax_opdm` or a method that inherently requires 2-electron densities (gradients for sure) trumps `onepdm_only`.; - In all other cases, the driver is no longer responsible for setting `onepdm_only`.; - Default for `relax_opdm` remains false, a",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2432
https://github.com/psi4/psi4/pull/2434:472,Testability,test,test,472,"## Description; Closes #2432. This is PR 1 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. (That means I'll have a lot of PRs for you two to review. Let me know if there's another person from VA Tech you want to take the responsibility of reviewing my PRs.). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Adds finite difference test on CCSD dipoles; - [x] Standardizes `onepdm` vs `opdm` in `ccdensity` keywords.; - [x] Corrects incorrect description of the `onepdm`/`opdm` keyword; - [x] Creates new `ccdensity` function to convert `** double` to `Matrix`; - [x] Adds `Ca` matrix to parameters, to begin phasing out the QT ordered `** double` representation of the orbitals . ## Checklist; - [x] Passes `cc` tests; - [x] Passes finite difference test on CCSD dipoles. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2434
https://github.com/psi4/psi4/pull/2434:853,Testability,test,tests,853,"## Description; Closes #2432. This is PR 1 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. (That means I'll have a lot of PRs for you two to review. Let me know if there's another person from VA Tech you want to take the responsibility of reviewing my PRs.). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Adds finite difference test on CCSD dipoles; - [x] Standardizes `onepdm` vs `opdm` in `ccdensity` keywords.; - [x] Corrects incorrect description of the `onepdm`/`opdm` keyword; - [x] Creates new `ccdensity` function to convert `** double` to `Matrix`; - [x] Adds `Ca` matrix to parameters, to begin phasing out the QT ordered `** double` representation of the orbitals . ## Checklist; - [x] Passes `cc` tests; - [x] Passes finite difference test on CCSD dipoles. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2434
https://github.com/psi4/psi4/pull/2434:891,Testability,test,test,891,"## Description; Closes #2432. This is PR 1 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. (That means I'll have a lot of PRs for you two to review. Let me know if there's another person from VA Tech you want to take the responsibility of reviewing my PRs.). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Adds finite difference test on CCSD dipoles; - [x] Standardizes `onepdm` vs `opdm` in `ccdensity` keywords.; - [x] Corrects incorrect description of the `onepdm`/`opdm` keyword; - [x] Creates new `ccdensity` function to convert `** double` to `Matrix`; - [x] Adds `Ca` matrix to parameters, to begin phasing out the QT ordered `** double` representation of the orbitals . ## Checklist; - [x] Passes `cc` tests; - [x] Passes finite difference test on CCSD dipoles. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2434
https://github.com/psi4/psi4/pull/2435:439,Availability,error,error,439,"## Description; This PR fixes a bug introduced in #1749, where `MemDFJK` handling of range-separated functional was incorrect in the asymmetric case. This incorrect handling lead to incorrect TD-DFT excitation spectra for range-separated functionals when `MemDFJK` was used. This PR hence closes #2431. In the symmetric case, either swapping the contraction order had no effect, or it was corrected by a hermitivitize call later on, so no error was observed. I strongly recommend backporting this PR (or at least the two characters needed to fix the bug). The rest of the PR other than those two characters is tests and commenting. Credit to @hokru for tag-team debugging. . ## Checklist; - [x] Tests added for newly working features. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2435
https://github.com/psi4/psi4/pull/2435:346,Integrability,contract,contraction,346,"## Description; This PR fixes a bug introduced in #1749, where `MemDFJK` handling of range-separated functional was incorrect in the asymmetric case. This incorrect handling lead to incorrect TD-DFT excitation spectra for range-separated functionals when `MemDFJK` was used. This PR hence closes #2431. In the symmetric case, either swapping the contraction order had no effect, or it was corrected by a hermitivitize call later on, so no error was observed. I strongly recommend backporting this PR (or at least the two characters needed to fix the bug). The rest of the PR other than those two characters is tests and commenting. Credit to @hokru for tag-team debugging. . ## Checklist; - [x] Tests added for newly working features. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2435
https://github.com/psi4/psi4/pull/2435:610,Testability,test,tests,610,"## Description; This PR fixes a bug introduced in #1749, where `MemDFJK` handling of range-separated functional was incorrect in the asymmetric case. This incorrect handling lead to incorrect TD-DFT excitation spectra for range-separated functionals when `MemDFJK` was used. This PR hence closes #2431. In the symmetric case, either swapping the contraction order had no effect, or it was corrected by a hermitivitize call later on, so no error was observed. I strongly recommend backporting this PR (or at least the two characters needed to fix the bug). The rest of the PR other than those two characters is tests and commenting. Credit to @hokru for tag-team debugging. . ## Checklist; - [x] Tests added for newly working features. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2435
https://github.com/psi4/psi4/pull/2435:695,Testability,Test,Tests,695,"## Description; This PR fixes a bug introduced in #1749, where `MemDFJK` handling of range-separated functional was incorrect in the asymmetric case. This incorrect handling lead to incorrect TD-DFT excitation spectra for range-separated functionals when `MemDFJK` was used. This PR hence closes #2431. In the symmetric case, either swapping the contraction order had no effect, or it was corrected by a hermitivitize call later on, so no error was observed. I strongly recommend backporting this PR (or at least the two characters needed to fix the bug). The rest of the PR other than those two characters is tests and commenting. Credit to @hokru for tag-team debugging. . ## Checklist; - [x] Tests added for newly working features. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2435
https://github.com/psi4/psi4/pull/2436:62,Availability,error,error,62,## Description; Humor the Sphinx by specifying _exactly_ what error is raised by a function that was promoted to a Wavefunction method in the A/EDIIS PR. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2436
https://github.com/psi4/psi4/pull/2437:147,Security,Expose,Exposes,147,"## Description; Per @fevangelista request, this PR allows Forte to compile with master Psi, almost. That also requires a Forte PR. ## Todos; - [x] Exposes `reset_subspace` to C++. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2437
https://github.com/psi4/psi4/pull/2438:225,Security,access,access,225,"## Description; This PR replaces several `int *` types in `ccdensity` with `Dimension` or `std::vector<int>` objects as appropriate. In addition to eliminating manual memory management and making the code more readable, easy access to `Dimension` objects will allow for a subsequent PR to construct `Matrix` objects directly, replacing the current `block_matrix` representation of objects. This is PR 2 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. Obligatory @lothian notification. ## Checklist; - [x] `cc` tests still pass. ## Status; - [x] Ready for review; - [ ] Ready for merge - to be explicit, Lori advised me **not** to merge until I had manually checked the `cc` tests, since those tests run by perl script",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2438
https://github.com/psi4/psi4/pull/2438:593,Testability,test,tests,593,"## Description; This PR replaces several `int *` types in `ccdensity` with `Dimension` or `std::vector<int>` objects as appropriate. In addition to eliminating manual memory management and making the code more readable, easy access to `Dimension` objects will allow for a subsequent PR to construct `Matrix` objects directly, replacing the current `block_matrix` representation of objects. This is PR 2 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. Obligatory @lothian notification. ## Checklist; - [x] `cc` tests still pass. ## Status; - [x] Ready for review; - [ ] Ready for merge - to be explicit, Lori advised me **not** to merge until I had manually checked the `cc` tests, since those tests run by perl script",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2438
https://github.com/psi4/psi4/pull/2438:757,Testability,test,tests,757,"## Description; This PR replaces several `int *` types in `ccdensity` with `Dimension` or `std::vector<int>` objects as appropriate. In addition to eliminating manual memory management and making the code more readable, easy access to `Dimension` objects will allow for a subsequent PR to construct `Matrix` objects directly, replacing the current `block_matrix` representation of objects. This is PR 2 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. Obligatory @lothian notification. ## Checklist; - [x] `cc` tests still pass. ## Status; - [x] Ready for review; - [ ] Ready for merge - to be explicit, Lori advised me **not** to merge until I had manually checked the `cc` tests, since those tests run by perl script",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2438
https://github.com/psi4/psi4/pull/2438:776,Testability,test,tests,776,"## Description; This PR replaces several `int *` types in `ccdensity` with `Dimension` or `std::vector<int>` objects as appropriate. In addition to eliminating manual memory management and making the code more readable, easy access to `Dimension` objects will allow for a subsequent PR to construct `Matrix` objects directly, replacing the current `block_matrix` representation of objects. This is PR 2 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. Obligatory @lothian notification. ## Checklist; - [x] `cc` tests still pass. ## Status; - [x] Ready for review; - [ ] Ready for merge - to be explicit, Lori advised me **not** to merge until I had manually checked the `cc` tests, since those tests run by perl script",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2438
https://github.com/psi4/psi4/issues/2439:1084,Availability,Error,Error,1084,"I found that in version=1.5 MintsHelper.ao_eri() does not work for multiple basis sets, such as MintsHelper.ao_eri(BasisA, BasisA, BasisB, BasisB).; In 1.5, I ran this:; ```python; print(""python=%s, \npsi4=%s""%(sys.version, psi4.__version__)); H = psi4.geometry(; """"""; nocom; noreorient; H -1 0 0; units bohr; symmetry c1""""""; ); O = psi4.geometry(; """"""; nocom; noreorient; O 1 0 0; units bohr; symmetry c1""""""; ); psi4.set_options({""reference"": ""uhf""}); EH, wfnH = psi4.energy(""scf/sto-3g"", molecule=H, return_wfn=True); EO, wfnO = psi4.energy(""scf/sto-3g"", molecule=O, return_wfn=True); mints = psi4.core.MintsHelper(wfnH.basisset()); aoeriHO = np.array(mints.ao_eri(wfnO.basisset(), wfnO.basisset(), wfnH.basisset(), wfnH.basisset())); aoeriHO.shape; ```; ==>; ```; python=3.8.12 (default, Oct 12 2021, 13:49:34) ; [GCC 7.5.0], ; psi4=1.5; RuntimeError Traceback (most recent call last); /tmp/ipykernel_845/2933828549.py in <module>; ----> 1 aoeriHO = np.array(mints.ao_eri(wfnO.basisset(), wfnO.basisset(), wfnH.basisset(), wfnH.basisset())); 2 aoeriHO.shape. RuntimeError: ; Fatal Error: Unexpected integral type (aa|bb) in setup_sieve(); Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1638121835567/work/psi4/src/psi4/libmints/twobody.cc on line: 249; The most recent 5 function calls were:. psi::TwoBodyAOInt::setup_sieve(); psi::IntegralFactory::eri(int, bool, bool); ```; But in 1.3.2, the same code gave me; ```; python=3.7.11 (default, Jul 27 2021, 14:32:16) ; [GCC 7.5.0], ; psi4=1.3.2; (5, 5, 1, 1); ```; I am not sure if this was an issue with my python or my WSL2 or psi4. Thanks!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2439
https://github.com/psi4/psi4/issues/2439:1142,Availability,Error,Error,1142,"I found that in version=1.5 MintsHelper.ao_eri() does not work for multiple basis sets, such as MintsHelper.ao_eri(BasisA, BasisA, BasisB, BasisB).; In 1.5, I ran this:; ```python; print(""python=%s, \npsi4=%s""%(sys.version, psi4.__version__)); H = psi4.geometry(; """"""; nocom; noreorient; H -1 0 0; units bohr; symmetry c1""""""; ); O = psi4.geometry(; """"""; nocom; noreorient; O 1 0 0; units bohr; symmetry c1""""""; ); psi4.set_options({""reference"": ""uhf""}); EH, wfnH = psi4.energy(""scf/sto-3g"", molecule=H, return_wfn=True); EO, wfnO = psi4.energy(""scf/sto-3g"", molecule=O, return_wfn=True); mints = psi4.core.MintsHelper(wfnH.basisset()); aoeriHO = np.array(mints.ao_eri(wfnO.basisset(), wfnO.basisset(), wfnH.basisset(), wfnH.basisset())); aoeriHO.shape; ```; ==>; ```; python=3.8.12 (default, Oct 12 2021, 13:49:34) ; [GCC 7.5.0], ; psi4=1.5; RuntimeError Traceback (most recent call last); /tmp/ipykernel_845/2933828549.py in <module>; ----> 1 aoeriHO = np.array(mints.ao_eri(wfnO.basisset(), wfnO.basisset(), wfnH.basisset(), wfnH.basisset())); 2 aoeriHO.shape. RuntimeError: ; Fatal Error: Unexpected integral type (aa|bb) in setup_sieve(); Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1638121835567/work/psi4/src/psi4/libmints/twobody.cc on line: 249; The most recent 5 function calls were:. psi::TwoBodyAOInt::setup_sieve(); psi::IntegralFactory::eri(int, bool, bool); ```; But in 1.3.2, the same code gave me; ```; python=3.7.11 (default, Jul 27 2021, 14:32:16) ; [GCC 7.5.0], ; psi4=1.3.2; (5, 5, 1, 1); ```; I am not sure if this was an issue with my python or my WSL2 or psi4. Thanks!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2439
https://github.com/psi4/psi4/issues/2439:469,Energy Efficiency,energy,energy,469,"I found that in version=1.5 MintsHelper.ao_eri() does not work for multiple basis sets, such as MintsHelper.ao_eri(BasisA, BasisA, BasisB, BasisB).; In 1.5, I ran this:; ```python; print(""python=%s, \npsi4=%s""%(sys.version, psi4.__version__)); H = psi4.geometry(; """"""; nocom; noreorient; H -1 0 0; units bohr; symmetry c1""""""; ); O = psi4.geometry(; """"""; nocom; noreorient; O 1 0 0; units bohr; symmetry c1""""""; ); psi4.set_options({""reference"": ""uhf""}); EH, wfnH = psi4.energy(""scf/sto-3g"", molecule=H, return_wfn=True); EO, wfnO = psi4.energy(""scf/sto-3g"", molecule=O, return_wfn=True); mints = psi4.core.MintsHelper(wfnH.basisset()); aoeriHO = np.array(mints.ao_eri(wfnO.basisset(), wfnO.basisset(), wfnH.basisset(), wfnH.basisset())); aoeriHO.shape; ```; ==>; ```; python=3.8.12 (default, Oct 12 2021, 13:49:34) ; [GCC 7.5.0], ; psi4=1.5; RuntimeError Traceback (most recent call last); /tmp/ipykernel_845/2933828549.py in <module>; ----> 1 aoeriHO = np.array(mints.ao_eri(wfnO.basisset(), wfnO.basisset(), wfnH.basisset(), wfnH.basisset())); 2 aoeriHO.shape. RuntimeError: ; Fatal Error: Unexpected integral type (aa|bb) in setup_sieve(); Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1638121835567/work/psi4/src/psi4/libmints/twobody.cc on line: 249; The most recent 5 function calls were:. psi::TwoBodyAOInt::setup_sieve(); psi::IntegralFactory::eri(int, bool, bool); ```; But in 1.3.2, the same code gave me; ```; python=3.7.11 (default, Jul 27 2021, 14:32:16) ; [GCC 7.5.0], ; psi4=1.3.2; (5, 5, 1, 1); ```; I am not sure if this was an issue with my python or my WSL2 or psi4. Thanks!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2439
https://github.com/psi4/psi4/issues/2439:536,Energy Efficiency,energy,energy,536,"I found that in version=1.5 MintsHelper.ao_eri() does not work for multiple basis sets, such as MintsHelper.ao_eri(BasisA, BasisA, BasisB, BasisB).; In 1.5, I ran this:; ```python; print(""python=%s, \npsi4=%s""%(sys.version, psi4.__version__)); H = psi4.geometry(; """"""; nocom; noreorient; H -1 0 0; units bohr; symmetry c1""""""; ); O = psi4.geometry(; """"""; nocom; noreorient; O 1 0 0; units bohr; symmetry c1""""""; ); psi4.set_options({""reference"": ""uhf""}); EH, wfnH = psi4.energy(""scf/sto-3g"", molecule=H, return_wfn=True); EO, wfnO = psi4.energy(""scf/sto-3g"", molecule=O, return_wfn=True); mints = psi4.core.MintsHelper(wfnH.basisset()); aoeriHO = np.array(mints.ao_eri(wfnO.basisset(), wfnO.basisset(), wfnH.basisset(), wfnH.basisset())); aoeriHO.shape; ```; ==>; ```; python=3.8.12 (default, Oct 12 2021, 13:49:34) ; [GCC 7.5.0], ; psi4=1.5; RuntimeError Traceback (most recent call last); /tmp/ipykernel_845/2933828549.py in <module>; ----> 1 aoeriHO = np.array(mints.ao_eri(wfnO.basisset(), wfnO.basisset(), wfnH.basisset(), wfnH.basisset())); 2 aoeriHO.shape. RuntimeError: ; Fatal Error: Unexpected integral type (aa|bb) in setup_sieve(); Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1638121835567/work/psi4/src/psi4/libmints/twobody.cc on line: 249; The most recent 5 function calls were:. psi::TwoBodyAOInt::setup_sieve(); psi::IntegralFactory::eri(int, bool, bool); ```; But in 1.3.2, the same code gave me; ```; python=3.7.11 (default, Jul 27 2021, 14:32:16) ; [GCC 7.5.0], ; psi4=1.3.2; (5, 5, 1, 1); ```; I am not sure if this was an issue with my python or my WSL2 or psi4. Thanks!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2439
https://github.com/psi4/psi4/pull/2440:498,Availability,ping,ping,498,## Description; This PR migrates 8 of the `cc` tests from using `autotest` to using standard `compare_values`. The 13 `cc` tests that still use `autotest` are all more delicate (usually because they involve properties) and are deferred to another PR. This PR handles the easy cases. This is PR 3 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. Review requested from Lori for all things testing. Obligatory @lothian ping. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2440
https://github.com/psi4/psi4/pull/2440:47,Testability,test,tests,47,## Description; This PR migrates 8 of the `cc` tests from using `autotest` to using standard `compare_values`. The 13 `cc` tests that still use `autotest` are all more delicate (usually because they involve properties) and are deferred to another PR. This PR handles the easy cases. This is PR 3 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. Review requested from Lori for all things testing. Obligatory @lothian ping. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2440
https://github.com/psi4/psi4/pull/2440:123,Testability,test,tests,123,## Description; This PR migrates 8 of the `cc` tests from using `autotest` to using standard `compare_values`. The 13 `cc` tests that still use `autotest` are all more delicate (usually because they involve properties) and are deferred to another PR. This PR handles the easy cases. This is PR 3 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. Review requested from Lori for all things testing. Obligatory @lothian ping. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2440
https://github.com/psi4/psi4/pull/2440:469,Testability,test,testing,469,## Description; This PR migrates 8 of the `cc` tests from using `autotest` to using standard `compare_values`. The 13 `cc` tests that still use `autotest` are all more delicate (usually because they involve properties) and are deferred to another PR. This PR handles the easy cases. This is PR 3 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. Review requested from Lori for all things testing. Obligatory @lothian ping. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2440
https://github.com/psi4/psi4/pull/2440:558,Testability,test,tests,558,## Description; This PR migrates 8 of the `cc` tests from using `autotest` to using standard `compare_values`. The 13 `cc` tests that still use `autotest` are all more delicate (usually because they involve properties) and are deferred to another PR. This PR handles the easy cases. This is PR 3 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. Review requested from Lori for all things testing. Obligatory @lothian ping. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2440
https://github.com/psi4/psi4/pull/2440:649,Testability,test,tests,649,## Description; This PR migrates 8 of the `cc` tests from using `autotest` to using standard `compare_values`. The 13 `cc` tests that still use `autotest` are all more delicate (usually because they involve properties) and are deferred to another PR. This PR handles the easy cases. This is PR 3 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. Review requested from Lori for all things testing. Obligatory @lothian ping. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2440
https://github.com/psi4/psi4/pull/2441:44,Modifiability,refactor,refactor,44,## Description; Fix a stupid typo from DIIS refactor. Needed to prevent a crash in Forte. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2441
https://github.com/psi4/psi4/issues/2442:2231,Availability,down,download,2231,"hub.com/evaleev/libint/pull/233 | 23Mar22, after #2413, v1.6, v1.7 | `5-4-3-6-5-4_mm4f12ob2.tgz` | gss | `eri_c4_d1_l5` | `_15` | `_7` | `_4` |; | C[^8] | McMurchie Davidson | any | 31Mar22, after #2414, v1.6, v1.7 |; | ~A[^6]~ | ~standardize ordering~ | ditto step B | #2537 | ditto step B | sss | `g5` | rm `_16` | rm `_8` | — |; | A' [^9] | flex solid-harm ordering | [loriab:new-cmake-2023-take2-b](https://github.com/loriab/libint/tree/new-cmake-2023-take2-b) https://github.com/evaleev/libint/pull/259 | 8May23, after #2861, v1.8, v1.9 (see also A'') | `libint-2.7.2-post1-5-4-3-6-5-4_mm4f12ob2_1` | sss | `eri_c4_d1_l5` | `_1`, c-f | c-f | c-f |; | A'' [^10] | flex solid-harm ordering, libtool-based | [upstream master](https://github.com/evaleev/libint/tree/master) any point after https://github.com/evaleev/libint/commit/10ca429217977bc2baac78fdaf3ac8d4f8aa05d9 | 3Dec23, after #3047, v1.9 (see also A') | [libint-2.8.0-dev2-5-4-3-6-5-4_mm10f12ob2_0.tgz](https://github.com/loriab/libint/releases/download/v0.1/libint-2.8.0-dev2-5-4-3-6-5-4_mm10f12ob2_0.tgz) | ss | `eri_hhhh_d1` | . [^1]: Assets off https://github.com/loriab/libint/releases/tag/v0.1 . Numbers are 4-center e-g-h AM, 3-center e-g-h AM.; [^3]: https://anaconda.org/psi4/libint/files L: `libint-1.2.1-hb4a4fd4_6.tar.bz2`, M: `libint-1.2.1-h1989688_2.tar.bz2`; [^4]: https://anaconda.org/psi4/libint2/files L: `libint2-2.6.0-hc9558a2_9.tar.bz2`, M: `libint2-2.6.0-h879752b_3.tar.bz2` W: `libint2-2.6.0-h2e52968_1.tar.bz2`; [^5]: Step 3 conda packages: [linux-64/libint2-2.6.0-h2fe1556_13.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/linux-64/libint2-2.6.0-h2fe1556_13.tar.bz2), [osx-64/libint2-2.6.0-h879752b_6.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/osx-64/libint2-2.6.0-h879752b_6.tar.bz2) ~`libint2-2.6.0-h879752b_4.tar.bz2`~, [win-64/libint2-2.6.0-h2e52968_5.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/win-64/libint2-2.6.0-h2e52968_5.tar.bz2) ~`libint2-2.6.0-h2e52968_3.tar.b",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2442
https://github.com/psi4/psi4/issues/2442:2836,Availability,down,download,2836," | `_1`, c-f | c-f | c-f |; | A'' [^10] | flex solid-harm ordering, libtool-based | [upstream master](https://github.com/evaleev/libint/tree/master) any point after https://github.com/evaleev/libint/commit/10ca429217977bc2baac78fdaf3ac8d4f8aa05d9 | 3Dec23, after #3047, v1.9 (see also A') | [libint-2.8.0-dev2-5-4-3-6-5-4_mm10f12ob2_0.tgz](https://github.com/loriab/libint/releases/download/v0.1/libint-2.8.0-dev2-5-4-3-6-5-4_mm10f12ob2_0.tgz) | ss | `eri_hhhh_d1` | . [^1]: Assets off https://github.com/loriab/libint/releases/tag/v0.1 . Numbers are 4-center e-g-h AM, 3-center e-g-h AM.; [^3]: https://anaconda.org/psi4/libint/files L: `libint-1.2.1-hb4a4fd4_6.tar.bz2`, M: `libint-1.2.1-h1989688_2.tar.bz2`; [^4]: https://anaconda.org/psi4/libint2/files L: `libint2-2.6.0-hc9558a2_9.tar.bz2`, M: `libint2-2.6.0-h879752b_3.tar.bz2` W: `libint2-2.6.0-h2e52968_1.tar.bz2`; [^5]: Step 3 conda packages: [linux-64/libint2-2.6.0-h2fe1556_13.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/linux-64/libint2-2.6.0-h2fe1556_13.tar.bz2), [osx-64/libint2-2.6.0-h879752b_6.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/osx-64/libint2-2.6.0-h879752b_6.tar.bz2) ~`libint2-2.6.0-h879752b_4.tar.bz2`~, [win-64/libint2-2.6.0-h2e52968_5.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/win-64/libint2-2.6.0-h2e52968_5.tar.bz2) ~`libint2-2.6.0-h2e52968_3.tar.bz2`~; [^6]: Step A conda packages: [linux-64/libint2-2.7.1-h2fe1556_16.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/linux-64/libint2-2.7.1-h2fe1556_16.tar.bz2), [osx-64/libint2-2.7.1-h879752b_8.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/osx-64/libint2-2.7.1-h879752b_8.tar.bz2); [^7]: Step B conda packages: [linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2), [osx-64/libint2-2.6.0-h879752b_7.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/osx-64/libint2-2.6.0-h879752b_7.tar.bz2), [win-64/libint2-2",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2442
https://github.com/psi4/psi4/issues/2442:2972,Availability,down,download,2972,"/tree/master) any point after https://github.com/evaleev/libint/commit/10ca429217977bc2baac78fdaf3ac8d4f8aa05d9 | 3Dec23, after #3047, v1.9 (see also A') | [libint-2.8.0-dev2-5-4-3-6-5-4_mm10f12ob2_0.tgz](https://github.com/loriab/libint/releases/download/v0.1/libint-2.8.0-dev2-5-4-3-6-5-4_mm10f12ob2_0.tgz) | ss | `eri_hhhh_d1` | . [^1]: Assets off https://github.com/loriab/libint/releases/tag/v0.1 . Numbers are 4-center e-g-h AM, 3-center e-g-h AM.; [^3]: https://anaconda.org/psi4/libint/files L: `libint-1.2.1-hb4a4fd4_6.tar.bz2`, M: `libint-1.2.1-h1989688_2.tar.bz2`; [^4]: https://anaconda.org/psi4/libint2/files L: `libint2-2.6.0-hc9558a2_9.tar.bz2`, M: `libint2-2.6.0-h879752b_3.tar.bz2` W: `libint2-2.6.0-h2e52968_1.tar.bz2`; [^5]: Step 3 conda packages: [linux-64/libint2-2.6.0-h2fe1556_13.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/linux-64/libint2-2.6.0-h2fe1556_13.tar.bz2), [osx-64/libint2-2.6.0-h879752b_6.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/osx-64/libint2-2.6.0-h879752b_6.tar.bz2) ~`libint2-2.6.0-h879752b_4.tar.bz2`~, [win-64/libint2-2.6.0-h2e52968_5.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/win-64/libint2-2.6.0-h2e52968_5.tar.bz2) ~`libint2-2.6.0-h2e52968_3.tar.bz2`~; [^6]: Step A conda packages: [linux-64/libint2-2.7.1-h2fe1556_16.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/linux-64/libint2-2.7.1-h2fe1556_16.tar.bz2), [osx-64/libint2-2.7.1-h879752b_8.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/osx-64/libint2-2.7.1-h879752b_8.tar.bz2); [^7]: Step B conda packages: [linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2), [osx-64/libint2-2.6.0-h879752b_7.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/osx-64/libint2-2.6.0-h879752b_7.tar.bz2), [win-64/libint2-2.6.0-h2e52968_4.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/win-64/libint2-2.6.0-h2e52968_4.tar.bz2); [^8]: Packages can ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2442
https://github.com/psi4/psi4/issues/2442:3142,Availability,down,download,3142,"dev2-5-4-3-6-5-4_mm10f12ob2_0.tgz](https://github.com/loriab/libint/releases/download/v0.1/libint-2.8.0-dev2-5-4-3-6-5-4_mm10f12ob2_0.tgz) | ss | `eri_hhhh_d1` | . [^1]: Assets off https://github.com/loriab/libint/releases/tag/v0.1 . Numbers are 4-center e-g-h AM, 3-center e-g-h AM.; [^3]: https://anaconda.org/psi4/libint/files L: `libint-1.2.1-hb4a4fd4_6.tar.bz2`, M: `libint-1.2.1-h1989688_2.tar.bz2`; [^4]: https://anaconda.org/psi4/libint2/files L: `libint2-2.6.0-hc9558a2_9.tar.bz2`, M: `libint2-2.6.0-h879752b_3.tar.bz2` W: `libint2-2.6.0-h2e52968_1.tar.bz2`; [^5]: Step 3 conda packages: [linux-64/libint2-2.6.0-h2fe1556_13.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/linux-64/libint2-2.6.0-h2fe1556_13.tar.bz2), [osx-64/libint2-2.6.0-h879752b_6.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/osx-64/libint2-2.6.0-h879752b_6.tar.bz2) ~`libint2-2.6.0-h879752b_4.tar.bz2`~, [win-64/libint2-2.6.0-h2e52968_5.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/win-64/libint2-2.6.0-h2e52968_5.tar.bz2) ~`libint2-2.6.0-h2e52968_3.tar.bz2`~; [^6]: Step A conda packages: [linux-64/libint2-2.7.1-h2fe1556_16.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/linux-64/libint2-2.7.1-h2fe1556_16.tar.bz2), [osx-64/libint2-2.7.1-h879752b_8.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/osx-64/libint2-2.7.1-h879752b_8.tar.bz2); [^7]: Step B conda packages: [linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2), [osx-64/libint2-2.6.0-h879752b_7.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/osx-64/libint2-2.6.0-h879752b_7.tar.bz2), [win-64/libint2-2.6.0-h2e52968_4.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/win-64/libint2-2.6.0-h2e52968_4.tar.bz2); [^8]: Packages can be found off `psi4/label/dev` or `psi4/label/testing` subchannels, depending on stage of master. The build number (e.g., `_13`) remains steady even if the subchannel chan",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2442
https://github.com/psi4/psi4/issues/2442:3344,Availability,down,download,3344,"iab/libint/releases/tag/v0.1 . Numbers are 4-center e-g-h AM, 3-center e-g-h AM.; [^3]: https://anaconda.org/psi4/libint/files L: `libint-1.2.1-hb4a4fd4_6.tar.bz2`, M: `libint-1.2.1-h1989688_2.tar.bz2`; [^4]: https://anaconda.org/psi4/libint2/files L: `libint2-2.6.0-hc9558a2_9.tar.bz2`, M: `libint2-2.6.0-h879752b_3.tar.bz2` W: `libint2-2.6.0-h2e52968_1.tar.bz2`; [^5]: Step 3 conda packages: [linux-64/libint2-2.6.0-h2fe1556_13.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/linux-64/libint2-2.6.0-h2fe1556_13.tar.bz2), [osx-64/libint2-2.6.0-h879752b_6.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/osx-64/libint2-2.6.0-h879752b_6.tar.bz2) ~`libint2-2.6.0-h879752b_4.tar.bz2`~, [win-64/libint2-2.6.0-h2e52968_5.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/win-64/libint2-2.6.0-h2e52968_5.tar.bz2) ~`libint2-2.6.0-h2e52968_3.tar.bz2`~; [^6]: Step A conda packages: [linux-64/libint2-2.7.1-h2fe1556_16.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/linux-64/libint2-2.7.1-h2fe1556_16.tar.bz2), [osx-64/libint2-2.7.1-h879752b_8.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/osx-64/libint2-2.7.1-h879752b_8.tar.bz2); [^7]: Step B conda packages: [linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2), [osx-64/libint2-2.6.0-h879752b_7.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/osx-64/libint2-2.6.0-h879752b_7.tar.bz2), [win-64/libint2-2.6.0-h2e52968_4.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/win-64/libint2-2.6.0-h2e52968_4.tar.bz2); [^8]: Packages can be found off `psi4/label/dev` or `psi4/label/testing` subchannels, depending on stage of master. The build number (e.g., `_13`) remains steady even if the subchannel changes. If you're in an environment that already has a L2, `conda remove libint2 --force`, then `conda install libint2=*=<h2fe1556_13> -c psi4/label/<dev|testing>` (substitute `<placeholders>`); <!--[^9]: P",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2442
https://github.com/psi4/psi4/issues/2442:3480,Availability,down,download,3480,"nt-1.2.1-hb4a4fd4_6.tar.bz2`, M: `libint-1.2.1-h1989688_2.tar.bz2`; [^4]: https://anaconda.org/psi4/libint2/files L: `libint2-2.6.0-hc9558a2_9.tar.bz2`, M: `libint2-2.6.0-h879752b_3.tar.bz2` W: `libint2-2.6.0-h2e52968_1.tar.bz2`; [^5]: Step 3 conda packages: [linux-64/libint2-2.6.0-h2fe1556_13.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/linux-64/libint2-2.6.0-h2fe1556_13.tar.bz2), [osx-64/libint2-2.6.0-h879752b_6.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/osx-64/libint2-2.6.0-h879752b_6.tar.bz2) ~`libint2-2.6.0-h879752b_4.tar.bz2`~, [win-64/libint2-2.6.0-h2e52968_5.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/win-64/libint2-2.6.0-h2e52968_5.tar.bz2) ~`libint2-2.6.0-h2e52968_3.tar.bz2`~; [^6]: Step A conda packages: [linux-64/libint2-2.7.1-h2fe1556_16.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/linux-64/libint2-2.7.1-h2fe1556_16.tar.bz2), [osx-64/libint2-2.7.1-h879752b_8.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/osx-64/libint2-2.7.1-h879752b_8.tar.bz2); [^7]: Step B conda packages: [linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2), [osx-64/libint2-2.6.0-h879752b_7.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/osx-64/libint2-2.6.0-h879752b_7.tar.bz2), [win-64/libint2-2.6.0-h2e52968_4.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/win-64/libint2-2.6.0-h2e52968_4.tar.bz2); [^8]: Packages can be found off `psi4/label/dev` or `psi4/label/testing` subchannels, depending on stage of master. The build number (e.g., `_13`) remains steady even if the subchannel changes. If you're in an environment that already has a L2, `conda remove libint2 --force`, then `conda install libint2=*=<h2fe1556_13> -c psi4/label/<dev|testing>` (substitute `<placeholders>`); <!--[^9]: Packages can be found off `psi4/label/testing` subchannel: [linux-64/libint2-2.7.2-h2fe1556_0.tar.bz2](https://anaconda.org/psi4/libint2",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2442
https://github.com/psi4/psi4/issues/2442:3645,Availability,down,download,3645,".6.0-h879752b_3.tar.bz2` W: `libint2-2.6.0-h2e52968_1.tar.bz2`; [^5]: Step 3 conda packages: [linux-64/libint2-2.6.0-h2fe1556_13.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/linux-64/libint2-2.6.0-h2fe1556_13.tar.bz2), [osx-64/libint2-2.6.0-h879752b_6.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/osx-64/libint2-2.6.0-h879752b_6.tar.bz2) ~`libint2-2.6.0-h879752b_4.tar.bz2`~, [win-64/libint2-2.6.0-h2e52968_5.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/win-64/libint2-2.6.0-h2e52968_5.tar.bz2) ~`libint2-2.6.0-h2e52968_3.tar.bz2`~; [^6]: Step A conda packages: [linux-64/libint2-2.7.1-h2fe1556_16.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/linux-64/libint2-2.7.1-h2fe1556_16.tar.bz2), [osx-64/libint2-2.7.1-h879752b_8.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/osx-64/libint2-2.7.1-h879752b_8.tar.bz2); [^7]: Step B conda packages: [linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2), [osx-64/libint2-2.6.0-h879752b_7.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/osx-64/libint2-2.6.0-h879752b_7.tar.bz2), [win-64/libint2-2.6.0-h2e52968_4.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/win-64/libint2-2.6.0-h2e52968_4.tar.bz2); [^8]: Packages can be found off `psi4/label/dev` or `psi4/label/testing` subchannels, depending on stage of master. The build number (e.g., `_13`) remains steady even if the subchannel changes. If you're in an environment that already has a L2, `conda remove libint2 --force`, then `conda install libint2=*=<h2fe1556_13> -c psi4/label/<dev|testing>` (substitute `<placeholders>`); <!--[^9]: Packages can be found off `psi4/label/testing` subchannel: [linux-64/libint2-2.7.2-h2fe1556_0.tar.bz2](https://anaconda.org/psi4/libint2/2.7.2/download/linux-64/libint2-2.7.2-h2fe1556_0.tar.bz2), [osx-64/libint2-2.7.2-h1800126_0.conda](https://anaconda.org/psi4/libint2/2.7.2/download/osx-64/libint2-2.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2442
https://github.com/psi4/psi4/issues/2442:3781,Availability,down,download,3781,"2](https://anaconda.org/psi4/libint2/2.6.0/download/linux-64/libint2-2.6.0-h2fe1556_13.tar.bz2), [osx-64/libint2-2.6.0-h879752b_6.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/osx-64/libint2-2.6.0-h879752b_6.tar.bz2) ~`libint2-2.6.0-h879752b_4.tar.bz2`~, [win-64/libint2-2.6.0-h2e52968_5.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/win-64/libint2-2.6.0-h2e52968_5.tar.bz2) ~`libint2-2.6.0-h2e52968_3.tar.bz2`~; [^6]: Step A conda packages: [linux-64/libint2-2.7.1-h2fe1556_16.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/linux-64/libint2-2.7.1-h2fe1556_16.tar.bz2), [osx-64/libint2-2.7.1-h879752b_8.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/osx-64/libint2-2.7.1-h879752b_8.tar.bz2); [^7]: Step B conda packages: [linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2), [osx-64/libint2-2.6.0-h879752b_7.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/osx-64/libint2-2.6.0-h879752b_7.tar.bz2), [win-64/libint2-2.6.0-h2e52968_4.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/win-64/libint2-2.6.0-h2e52968_4.tar.bz2); [^8]: Packages can be found off `psi4/label/dev` or `psi4/label/testing` subchannels, depending on stage of master. The build number (e.g., `_13`) remains steady even if the subchannel changes. If you're in an environment that already has a L2, `conda remove libint2 --force`, then `conda install libint2=*=<h2fe1556_13> -c psi4/label/<dev|testing>` (substitute `<placeholders>`); <!--[^9]: Packages can be found off `psi4/label/testing` subchannel: [linux-64/libint2-2.7.2-h2fe1556_0.tar.bz2](https://anaconda.org/psi4/libint2/2.7.2/download/linux-64/libint2-2.7.2-h2fe1556_0.tar.bz2), [osx-64/libint2-2.7.2-h1800126_0.conda](https://anaconda.org/psi4/libint2/2.7.2/download/osx-64/libint2-2.7.2-h1800126_0.conda)-->; [^9]: Step A' conda packages: AM7 from `psi4/label/testing::libint2`: [linux-64/libint2-2.7.2-h2fe1556_1.tar.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2442
https://github.com/psi4/psi4/issues/2442:3914,Availability,down,download,3914,".bz2](https://anaconda.org/psi4/libint2/2.6.0/download/osx-64/libint2-2.6.0-h879752b_6.tar.bz2) ~`libint2-2.6.0-h879752b_4.tar.bz2`~, [win-64/libint2-2.6.0-h2e52968_5.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/win-64/libint2-2.6.0-h2e52968_5.tar.bz2) ~`libint2-2.6.0-h2e52968_3.tar.bz2`~; [^6]: Step A conda packages: [linux-64/libint2-2.7.1-h2fe1556_16.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/linux-64/libint2-2.7.1-h2fe1556_16.tar.bz2), [osx-64/libint2-2.7.1-h879752b_8.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/osx-64/libint2-2.7.1-h879752b_8.tar.bz2); [^7]: Step B conda packages: [linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2), [osx-64/libint2-2.6.0-h879752b_7.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/osx-64/libint2-2.6.0-h879752b_7.tar.bz2), [win-64/libint2-2.6.0-h2e52968_4.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/win-64/libint2-2.6.0-h2e52968_4.tar.bz2); [^8]: Packages can be found off `psi4/label/dev` or `psi4/label/testing` subchannels, depending on stage of master. The build number (e.g., `_13`) remains steady even if the subchannel changes. If you're in an environment that already has a L2, `conda remove libint2 --force`, then `conda install libint2=*=<h2fe1556_13> -c psi4/label/<dev|testing>` (substitute `<placeholders>`); <!--[^9]: Packages can be found off `psi4/label/testing` subchannel: [linux-64/libint2-2.7.2-h2fe1556_0.tar.bz2](https://anaconda.org/psi4/libint2/2.7.2/download/linux-64/libint2-2.7.2-h2fe1556_0.tar.bz2), [osx-64/libint2-2.7.2-h1800126_0.conda](https://anaconda.org/psi4/libint2/2.7.2/download/osx-64/libint2-2.7.2-h1800126_0.conda)-->; [^9]: Step A' conda packages: AM7 from `psi4/label/testing::libint2`: [linux-64/libint2-2.7.2-h2fe1556_1.tar.bz2](https://anaconda.org/psi4/libint2/2.7.2/download/linux-64/libint2-2.7.2-h2fe1556_1.tar.bz2) or AM5 from `conda-forge/label/libin",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2442
https://github.com/psi4/psi4/issues/2442:4499,Availability,down,download,4499,"79752b_8.tar.bz2); [^7]: Step B conda packages: [linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2), [osx-64/libint2-2.6.0-h879752b_7.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/osx-64/libint2-2.6.0-h879752b_7.tar.bz2), [win-64/libint2-2.6.0-h2e52968_4.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/win-64/libint2-2.6.0-h2e52968_4.tar.bz2); [^8]: Packages can be found off `psi4/label/dev` or `psi4/label/testing` subchannels, depending on stage of master. The build number (e.g., `_13`) remains steady even if the subchannel changes. If you're in an environment that already has a L2, `conda remove libint2 --force`, then `conda install libint2=*=<h2fe1556_13> -c psi4/label/<dev|testing>` (substitute `<placeholders>`); <!--[^9]: Packages can be found off `psi4/label/testing` subchannel: [linux-64/libint2-2.7.2-h2fe1556_0.tar.bz2](https://anaconda.org/psi4/libint2/2.7.2/download/linux-64/libint2-2.7.2-h2fe1556_0.tar.bz2), [osx-64/libint2-2.7.2-h1800126_0.conda](https://anaconda.org/psi4/libint2/2.7.2/download/osx-64/libint2-2.7.2-h1800126_0.conda)-->; [^9]: Step A' conda packages: AM7 from `psi4/label/testing::libint2`: [linux-64/libint2-2.7.2-h2fe1556_1.tar.bz2](https://anaconda.org/psi4/libint2/2.7.2/download/linux-64/libint2-2.7.2-h2fe1556_1.tar.bz2) or AM5 from `conda-forge/label/libint_dev::libint`: [linux-64/libint-2.7.3dev1-h95a0634_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/linux-64/libint-2.7.3dev1-h95a0634_0.conda), [osx-64/libint-2.7.3dev1-h7eb4062_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/osx-64/libint-2.7.3dev1-h7eb4062_0.conda), [osx-arm64/libint-2.7.3dev1-h8694fdf_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/osx-arm64/libint-2.7.3dev1-h8694fdf_0.conda), [win-64/libint-2.7.3dev1-h8e19551_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/win-64/libint-2.7.3dev1",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2442
https://github.com/psi4/psi4/issues/2442:4632,Availability,down,download,4632,"/download/linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2), [osx-64/libint2-2.6.0-h879752b_7.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/osx-64/libint2-2.6.0-h879752b_7.tar.bz2), [win-64/libint2-2.6.0-h2e52968_4.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/win-64/libint2-2.6.0-h2e52968_4.tar.bz2); [^8]: Packages can be found off `psi4/label/dev` or `psi4/label/testing` subchannels, depending on stage of master. The build number (e.g., `_13`) remains steady even if the subchannel changes. If you're in an environment that already has a L2, `conda remove libint2 --force`, then `conda install libint2=*=<h2fe1556_13> -c psi4/label/<dev|testing>` (substitute `<placeholders>`); <!--[^9]: Packages can be found off `psi4/label/testing` subchannel: [linux-64/libint2-2.7.2-h2fe1556_0.tar.bz2](https://anaconda.org/psi4/libint2/2.7.2/download/linux-64/libint2-2.7.2-h2fe1556_0.tar.bz2), [osx-64/libint2-2.7.2-h1800126_0.conda](https://anaconda.org/psi4/libint2/2.7.2/download/osx-64/libint2-2.7.2-h1800126_0.conda)-->; [^9]: Step A' conda packages: AM7 from `psi4/label/testing::libint2`: [linux-64/libint2-2.7.2-h2fe1556_1.tar.bz2](https://anaconda.org/psi4/libint2/2.7.2/download/linux-64/libint2-2.7.2-h2fe1556_1.tar.bz2) or AM5 from `conda-forge/label/libint_dev::libint`: [linux-64/libint-2.7.3dev1-h95a0634_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/linux-64/libint-2.7.3dev1-h95a0634_0.conda), [osx-64/libint-2.7.3dev1-h7eb4062_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/osx-64/libint-2.7.3dev1-h7eb4062_0.conda), [osx-arm64/libint-2.7.3dev1-h8694fdf_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/osx-arm64/libint-2.7.3dev1-h8694fdf_0.conda), [win-64/libint-2.7.3dev1-h8e19551_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/win-64/libint-2.7.3dev1-h8e19551_0.conda); [^10]: Step A'' conda packages AM5 from `-c psi4/label/testing`: [linux-64/libint-2.8.0dev2-h59595ed_0.conda](ht",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2442
https://github.com/psi4/psi4/issues/2442:4838,Availability,down,download,4838,".0-h2e52968_4.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/win-64/libint2-2.6.0-h2e52968_4.tar.bz2); [^8]: Packages can be found off `psi4/label/dev` or `psi4/label/testing` subchannels, depending on stage of master. The build number (e.g., `_13`) remains steady even if the subchannel changes. If you're in an environment that already has a L2, `conda remove libint2 --force`, then `conda install libint2=*=<h2fe1556_13> -c psi4/label/<dev|testing>` (substitute `<placeholders>`); <!--[^9]: Packages can be found off `psi4/label/testing` subchannel: [linux-64/libint2-2.7.2-h2fe1556_0.tar.bz2](https://anaconda.org/psi4/libint2/2.7.2/download/linux-64/libint2-2.7.2-h2fe1556_0.tar.bz2), [osx-64/libint2-2.7.2-h1800126_0.conda](https://anaconda.org/psi4/libint2/2.7.2/download/osx-64/libint2-2.7.2-h1800126_0.conda)-->; [^9]: Step A' conda packages: AM7 from `psi4/label/testing::libint2`: [linux-64/libint2-2.7.2-h2fe1556_1.tar.bz2](https://anaconda.org/psi4/libint2/2.7.2/download/linux-64/libint2-2.7.2-h2fe1556_1.tar.bz2) or AM5 from `conda-forge/label/libint_dev::libint`: [linux-64/libint-2.7.3dev1-h95a0634_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/linux-64/libint-2.7.3dev1-h95a0634_0.conda), [osx-64/libint-2.7.3dev1-h7eb4062_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/osx-64/libint-2.7.3dev1-h7eb4062_0.conda), [osx-arm64/libint-2.7.3dev1-h8694fdf_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/osx-arm64/libint-2.7.3dev1-h8694fdf_0.conda), [win-64/libint-2.7.3dev1-h8e19551_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/win-64/libint-2.7.3dev1-h8e19551_0.conda); [^10]: Step A'' conda packages AM5 from `-c psi4/label/testing`: [linux-64/libint-2.8.0dev2-h59595ed_0.conda](https://anaconda.org/psi4/libint/2.8.0dev2/download/linux-64/libint-2.8.0dev2-h59595ed_0.conda), [osx-64/libint-2.8.0dev2-h93d8f39_0.conda](https://anaconda.org/psi4/libint/2.8.0dev2/download/osx-64/libint-2.8",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2442
https://github.com/psi4/psi4/issues/2442:5037,Availability,down,download,5037,"ls, depending on stage of master. The build number (e.g., `_13`) remains steady even if the subchannel changes. If you're in an environment that already has a L2, `conda remove libint2 --force`, then `conda install libint2=*=<h2fe1556_13> -c psi4/label/<dev|testing>` (substitute `<placeholders>`); <!--[^9]: Packages can be found off `psi4/label/testing` subchannel: [linux-64/libint2-2.7.2-h2fe1556_0.tar.bz2](https://anaconda.org/psi4/libint2/2.7.2/download/linux-64/libint2-2.7.2-h2fe1556_0.tar.bz2), [osx-64/libint2-2.7.2-h1800126_0.conda](https://anaconda.org/psi4/libint2/2.7.2/download/osx-64/libint2-2.7.2-h1800126_0.conda)-->; [^9]: Step A' conda packages: AM7 from `psi4/label/testing::libint2`: [linux-64/libint2-2.7.2-h2fe1556_1.tar.bz2](https://anaconda.org/psi4/libint2/2.7.2/download/linux-64/libint2-2.7.2-h2fe1556_1.tar.bz2) or AM5 from `conda-forge/label/libint_dev::libint`: [linux-64/libint-2.7.3dev1-h95a0634_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/linux-64/libint-2.7.3dev1-h95a0634_0.conda), [osx-64/libint-2.7.3dev1-h7eb4062_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/osx-64/libint-2.7.3dev1-h7eb4062_0.conda), [osx-arm64/libint-2.7.3dev1-h8694fdf_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/osx-arm64/libint-2.7.3dev1-h8694fdf_0.conda), [win-64/libint-2.7.3dev1-h8e19551_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/win-64/libint-2.7.3dev1-h8e19551_0.conda); [^10]: Step A'' conda packages AM5 from `-c psi4/label/testing`: [linux-64/libint-2.8.0dev2-h59595ed_0.conda](https://anaconda.org/psi4/libint/2.8.0dev2/download/linux-64/libint-2.8.0dev2-h59595ed_0.conda), [osx-64/libint-2.8.0dev2-h93d8f39_0.conda](https://anaconda.org/psi4/libint/2.8.0dev2/download/osx-64/libint-2.8.0dev2-h93d8f39_0.conda), [win-64/libint-2.8.0dev2-h63175ca_0.conda](https://anaconda.org/psi4/libint/2.8.0dev2/download/win-64/libint-2.8.0dev2-h63175ca_0.conda). Links on Libint2 issues here sinc",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2442
https://github.com/psi4/psi4/issues/2442:5184,Availability,down,download,5184,"lready has a L2, `conda remove libint2 --force`, then `conda install libint2=*=<h2fe1556_13> -c psi4/label/<dev|testing>` (substitute `<placeholders>`); <!--[^9]: Packages can be found off `psi4/label/testing` subchannel: [linux-64/libint2-2.7.2-h2fe1556_0.tar.bz2](https://anaconda.org/psi4/libint2/2.7.2/download/linux-64/libint2-2.7.2-h2fe1556_0.tar.bz2), [osx-64/libint2-2.7.2-h1800126_0.conda](https://anaconda.org/psi4/libint2/2.7.2/download/osx-64/libint2-2.7.2-h1800126_0.conda)-->; [^9]: Step A' conda packages: AM7 from `psi4/label/testing::libint2`: [linux-64/libint2-2.7.2-h2fe1556_1.tar.bz2](https://anaconda.org/psi4/libint2/2.7.2/download/linux-64/libint2-2.7.2-h2fe1556_1.tar.bz2) or AM5 from `conda-forge/label/libint_dev::libint`: [linux-64/libint-2.7.3dev1-h95a0634_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/linux-64/libint-2.7.3dev1-h95a0634_0.conda), [osx-64/libint-2.7.3dev1-h7eb4062_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/osx-64/libint-2.7.3dev1-h7eb4062_0.conda), [osx-arm64/libint-2.7.3dev1-h8694fdf_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/osx-arm64/libint-2.7.3dev1-h8694fdf_0.conda), [win-64/libint-2.7.3dev1-h8e19551_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/win-64/libint-2.7.3dev1-h8e19551_0.conda); [^10]: Step A'' conda packages AM5 from `-c psi4/label/testing`: [linux-64/libint-2.8.0dev2-h59595ed_0.conda](https://anaconda.org/psi4/libint/2.8.0dev2/download/linux-64/libint-2.8.0dev2-h59595ed_0.conda), [osx-64/libint-2.8.0dev2-h93d8f39_0.conda](https://anaconda.org/psi4/libint/2.8.0dev2/download/osx-64/libint-2.8.0dev2-h93d8f39_0.conda), [win-64/libint-2.8.0dev2-h63175ca_0.conda](https://anaconda.org/psi4/libint/2.8.0dev2/download/win-64/libint-2.8.0dev2-h63175ca_0.conda). Links on Libint2 issues here since it's worth having an issue open on this for packagers to consult. * https://github.com/psi4/psi4/issues/2300 (search ""multidimensional"") for bac",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2442
https://github.com/psi4/psi4/issues/2442:5332,Availability,down,download,5332,"); <!--[^9]: Packages can be found off `psi4/label/testing` subchannel: [linux-64/libint2-2.7.2-h2fe1556_0.tar.bz2](https://anaconda.org/psi4/libint2/2.7.2/download/linux-64/libint2-2.7.2-h2fe1556_0.tar.bz2), [osx-64/libint2-2.7.2-h1800126_0.conda](https://anaconda.org/psi4/libint2/2.7.2/download/osx-64/libint2-2.7.2-h1800126_0.conda)-->; [^9]: Step A' conda packages: AM7 from `psi4/label/testing::libint2`: [linux-64/libint2-2.7.2-h2fe1556_1.tar.bz2](https://anaconda.org/psi4/libint2/2.7.2/download/linux-64/libint2-2.7.2-h2fe1556_1.tar.bz2) or AM5 from `conda-forge/label/libint_dev::libint`: [linux-64/libint-2.7.3dev1-h95a0634_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/linux-64/libint-2.7.3dev1-h95a0634_0.conda), [osx-64/libint-2.7.3dev1-h7eb4062_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/osx-64/libint-2.7.3dev1-h7eb4062_0.conda), [osx-arm64/libint-2.7.3dev1-h8694fdf_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/osx-arm64/libint-2.7.3dev1-h8694fdf_0.conda), [win-64/libint-2.7.3dev1-h8e19551_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/win-64/libint-2.7.3dev1-h8e19551_0.conda); [^10]: Step A'' conda packages AM5 from `-c psi4/label/testing`: [linux-64/libint-2.8.0dev2-h59595ed_0.conda](https://anaconda.org/psi4/libint/2.8.0dev2/download/linux-64/libint-2.8.0dev2-h59595ed_0.conda), [osx-64/libint-2.8.0dev2-h93d8f39_0.conda](https://anaconda.org/psi4/libint/2.8.0dev2/download/osx-64/libint-2.8.0dev2-h93d8f39_0.conda), [win-64/libint-2.8.0dev2-h63175ca_0.conda](https://anaconda.org/psi4/libint/2.8.0dev2/download/win-64/libint-2.8.0dev2-h63175ca_0.conda). Links on Libint2 issues here since it's worth having an issue open on this for packagers to consult. * https://github.com/psi4/psi4/issues/2300 (search ""multidimensional"") for background and conda-forge; * https://github.com/evaleev/libint/issues/190 for the general open-source conundrum and current psi4 prospects toward the e",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2442
https://github.com/psi4/psi4/issues/2442:5480,Availability,down,download,5480,"nt2/2.7.2/download/linux-64/libint2-2.7.2-h2fe1556_0.tar.bz2), [osx-64/libint2-2.7.2-h1800126_0.conda](https://anaconda.org/psi4/libint2/2.7.2/download/osx-64/libint2-2.7.2-h1800126_0.conda)-->; [^9]: Step A' conda packages: AM7 from `psi4/label/testing::libint2`: [linux-64/libint2-2.7.2-h2fe1556_1.tar.bz2](https://anaconda.org/psi4/libint2/2.7.2/download/linux-64/libint2-2.7.2-h2fe1556_1.tar.bz2) or AM5 from `conda-forge/label/libint_dev::libint`: [linux-64/libint-2.7.3dev1-h95a0634_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/linux-64/libint-2.7.3dev1-h95a0634_0.conda), [osx-64/libint-2.7.3dev1-h7eb4062_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/osx-64/libint-2.7.3dev1-h7eb4062_0.conda), [osx-arm64/libint-2.7.3dev1-h8694fdf_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/osx-arm64/libint-2.7.3dev1-h8694fdf_0.conda), [win-64/libint-2.7.3dev1-h8e19551_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/win-64/libint-2.7.3dev1-h8e19551_0.conda); [^10]: Step A'' conda packages AM5 from `-c psi4/label/testing`: [linux-64/libint-2.8.0dev2-h59595ed_0.conda](https://anaconda.org/psi4/libint/2.8.0dev2/download/linux-64/libint-2.8.0dev2-h59595ed_0.conda), [osx-64/libint-2.8.0dev2-h93d8f39_0.conda](https://anaconda.org/psi4/libint/2.8.0dev2/download/osx-64/libint-2.8.0dev2-h93d8f39_0.conda), [win-64/libint-2.8.0dev2-h63175ca_0.conda](https://anaconda.org/psi4/libint/2.8.0dev2/download/win-64/libint-2.8.0dev2-h63175ca_0.conda). Links on Libint2 issues here since it's worth having an issue open on this for packagers to consult. * https://github.com/psi4/psi4/issues/2300 (search ""multidimensional"") for background and conda-forge; * https://github.com/evaleev/libint/issues/190 for the general open-source conundrum and current psi4 prospects toward the end; * https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L1-L25 for libint2 build constraints for Psi4. Steps toward",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2442
https://github.com/psi4/psi4/issues/2442:5685,Availability,down,download,5685,"A' conda packages: AM7 from `psi4/label/testing::libint2`: [linux-64/libint2-2.7.2-h2fe1556_1.tar.bz2](https://anaconda.org/psi4/libint2/2.7.2/download/linux-64/libint2-2.7.2-h2fe1556_1.tar.bz2) or AM5 from `conda-forge/label/libint_dev::libint`: [linux-64/libint-2.7.3dev1-h95a0634_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/linux-64/libint-2.7.3dev1-h95a0634_0.conda), [osx-64/libint-2.7.3dev1-h7eb4062_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/osx-64/libint-2.7.3dev1-h7eb4062_0.conda), [osx-arm64/libint-2.7.3dev1-h8694fdf_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/osx-arm64/libint-2.7.3dev1-h8694fdf_0.conda), [win-64/libint-2.7.3dev1-h8e19551_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/win-64/libint-2.7.3dev1-h8e19551_0.conda); [^10]: Step A'' conda packages AM5 from `-c psi4/label/testing`: [linux-64/libint-2.8.0dev2-h59595ed_0.conda](https://anaconda.org/psi4/libint/2.8.0dev2/download/linux-64/libint-2.8.0dev2-h59595ed_0.conda), [osx-64/libint-2.8.0dev2-h93d8f39_0.conda](https://anaconda.org/psi4/libint/2.8.0dev2/download/osx-64/libint-2.8.0dev2-h93d8f39_0.conda), [win-64/libint-2.8.0dev2-h63175ca_0.conda](https://anaconda.org/psi4/libint/2.8.0dev2/download/win-64/libint-2.8.0dev2-h63175ca_0.conda). Links on Libint2 issues here since it's worth having an issue open on this for packagers to consult. * https://github.com/psi4/psi4/issues/2300 (search ""multidimensional"") for background and conda-forge; * https://github.com/evaleev/libint/issues/190 for the general open-source conundrum and current psi4 prospects toward the end; * https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L1-L25 for libint2 build constraints for Psi4. Steps toward Psi4 using a upstream Libint2 release in common with other open-source QC programs:; * step 2 — 20 Nov 2020 — #1721; * step 3 — 11 Mar 2022 — #2388; * post 3 — 16 Mar 2022 — #2474, #2482, #2484; * step C —",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2442
https://github.com/psi4/psi4/issues/2442:5825,Availability,down,download,5825,"7.2/download/linux-64/libint2-2.7.2-h2fe1556_1.tar.bz2) or AM5 from `conda-forge/label/libint_dev::libint`: [linux-64/libint-2.7.3dev1-h95a0634_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/linux-64/libint-2.7.3dev1-h95a0634_0.conda), [osx-64/libint-2.7.3dev1-h7eb4062_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/osx-64/libint-2.7.3dev1-h7eb4062_0.conda), [osx-arm64/libint-2.7.3dev1-h8694fdf_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/osx-arm64/libint-2.7.3dev1-h8694fdf_0.conda), [win-64/libint-2.7.3dev1-h8e19551_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/win-64/libint-2.7.3dev1-h8e19551_0.conda); [^10]: Step A'' conda packages AM5 from `-c psi4/label/testing`: [linux-64/libint-2.8.0dev2-h59595ed_0.conda](https://anaconda.org/psi4/libint/2.8.0dev2/download/linux-64/libint-2.8.0dev2-h59595ed_0.conda), [osx-64/libint-2.8.0dev2-h93d8f39_0.conda](https://anaconda.org/psi4/libint/2.8.0dev2/download/osx-64/libint-2.8.0dev2-h93d8f39_0.conda), [win-64/libint-2.8.0dev2-h63175ca_0.conda](https://anaconda.org/psi4/libint/2.8.0dev2/download/win-64/libint-2.8.0dev2-h63175ca_0.conda). Links on Libint2 issues here since it's worth having an issue open on this for packagers to consult. * https://github.com/psi4/psi4/issues/2300 (search ""multidimensional"") for background and conda-forge; * https://github.com/evaleev/libint/issues/190 for the general open-source conundrum and current psi4 prospects toward the end; * https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L1-L25 for libint2 build constraints for Psi4. Steps toward Psi4 using a upstream Libint2 release in common with other open-source QC programs:; * step 2 — 20 Nov 2020 — #1721; * step 3 — 11 Mar 2022 — #2388; * post 3 — 16 Mar 2022 — #2474, #2482, #2484; * step C — 21 March 2022 — #2489; * step C — 21 March 2022 — #2483; * step B — 23 March 2022 — #2413; * post B — 23 March 2022 — #2494 ; * step C — 2",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2442
https://github.com/psi4/psi4/issues/2442:5963,Availability,down,download,5963,"a0634_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/linux-64/libint-2.7.3dev1-h95a0634_0.conda), [osx-64/libint-2.7.3dev1-h7eb4062_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/osx-64/libint-2.7.3dev1-h7eb4062_0.conda), [osx-arm64/libint-2.7.3dev1-h8694fdf_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/osx-arm64/libint-2.7.3dev1-h8694fdf_0.conda), [win-64/libint-2.7.3dev1-h8e19551_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/win-64/libint-2.7.3dev1-h8e19551_0.conda); [^10]: Step A'' conda packages AM5 from `-c psi4/label/testing`: [linux-64/libint-2.8.0dev2-h59595ed_0.conda](https://anaconda.org/psi4/libint/2.8.0dev2/download/linux-64/libint-2.8.0dev2-h59595ed_0.conda), [osx-64/libint-2.8.0dev2-h93d8f39_0.conda](https://anaconda.org/psi4/libint/2.8.0dev2/download/osx-64/libint-2.8.0dev2-h93d8f39_0.conda), [win-64/libint-2.8.0dev2-h63175ca_0.conda](https://anaconda.org/psi4/libint/2.8.0dev2/download/win-64/libint-2.8.0dev2-h63175ca_0.conda). Links on Libint2 issues here since it's worth having an issue open on this for packagers to consult. * https://github.com/psi4/psi4/issues/2300 (search ""multidimensional"") for background and conda-forge; * https://github.com/evaleev/libint/issues/190 for the general open-source conundrum and current psi4 prospects toward the end; * https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L1-L25 for libint2 build constraints for Psi4. Steps toward Psi4 using a upstream Libint2 release in common with other open-source QC programs:; * step 2 — 20 Nov 2020 — #1721; * step 3 — 11 Mar 2022 — #2388; * post 3 — 16 Mar 2022 — #2474, #2482, #2484; * step C — 21 March 2022 — #2489; * step C — 21 March 2022 — #2483; * step B — 23 March 2022 — #2413; * post B — 23 March 2022 — #2494 ; * step C — 25 March 2022 — #2386; * step C — 25 March 2022 — #2496; * step C — 30 March 2022 — #2504; * step C — 31 March 2022 — #2517; * step C — 31 ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2442
https://github.com/psi4/psi4/issues/2442:87,Deployability,update,update,87,"There's a lot of steps in the grand Libint2 project, so here's a place to organize and update progress. Also, this is a place to see if there's a conda package configured to test each step. Table at the top includes steps that need new requirements of L2 library. List below has more intermediate steps. | step | status | libint ver & branch | Psi4 | tarball[^1] | order | component style | linux-64[^8] | osx-64[^8] | win-64[^8] |; | ---- | ------ | ------- | ---- | -------- | ---- | ------ | ----- | ------ | -------- |; | 1[^3] | longstanding L1 | L1 [evaleev:5c89451](https://github.com/evaleev/libint/tree/5c89451) | v1.3 | — | gss | `5` | L1 `_6` | L1 `_2` | — |; | 2[^4] | TEI L2 | [loriab:l2cmake](https://github.com/loriab/libint/tree/l2cmake) https://github.com/evaleev/libint/pull/148 | 20Nov20, after #1721, v1.4, 1.5 | L: `7-7-4-7-7-5_1`, MW: `5-4-3-6-5-4_1` | gss | `g5` | `_9` | `_3` | `_1` |; | 3[^5] | OEI L2 | ditto step 2 | 11Mar22, after #2388 | L: `5-4-3-6-5-4_mm25f12ob2`, MW: `5-4-3-6-5-4_mm4ob2` | gss | `g5` | rm `_13` | ~`_4`~ rm `_6` | ~`_3`~ rm `_5` |; | B[^7] | upstream L2 cmake | [loriab:new-cmake-harness-lab-rb1](https://github.com/loriab/libint/tree/new-cmake-harness-lab-rb1) https://github.com/evaleev/libint/pull/233 | 23Mar22, after #2413, v1.6, v1.7 | `5-4-3-6-5-4_mm4f12ob2.tgz` | gss | `eri_c4_d1_l5` | `_15` | `_7` | `_4` |; | C[^8] | McMurchie Davidson | any | 31Mar22, after #2414, v1.6, v1.7 |; | ~A[^6]~ | ~standardize ordering~ | ditto step B | #2537 | ditto step B | sss | `g5` | rm `_16` | rm `_8` | — |; | A' [^9] | flex solid-harm ordering | [loriab:new-cmake-2023-take2-b](https://github.com/loriab/libint/tree/new-cmake-2023-take2-b) https://github.com/evaleev/libint/pull/259 | 8May23, after #2861, v1.8, v1.9 (see also A'') | `libint-2.7.2-post1-5-4-3-6-5-4_mm4f12ob2_1` | sss | `eri_c4_d1_l5` | `_1`, c-f | c-f | c-f |; | A'' [^10] | flex solid-harm ordering, libtool-based | [upstream master](https://github.com/evaleev/libint/tree/master) any",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2442
https://github.com/psi4/psi4/issues/2442:2222,Deployability,release,releases,2222,"hub.com/evaleev/libint/pull/233 | 23Mar22, after #2413, v1.6, v1.7 | `5-4-3-6-5-4_mm4f12ob2.tgz` | gss | `eri_c4_d1_l5` | `_15` | `_7` | `_4` |; | C[^8] | McMurchie Davidson | any | 31Mar22, after #2414, v1.6, v1.7 |; | ~A[^6]~ | ~standardize ordering~ | ditto step B | #2537 | ditto step B | sss | `g5` | rm `_16` | rm `_8` | — |; | A' [^9] | flex solid-harm ordering | [loriab:new-cmake-2023-take2-b](https://github.com/loriab/libint/tree/new-cmake-2023-take2-b) https://github.com/evaleev/libint/pull/259 | 8May23, after #2861, v1.8, v1.9 (see also A'') | `libint-2.7.2-post1-5-4-3-6-5-4_mm4f12ob2_1` | sss | `eri_c4_d1_l5` | `_1`, c-f | c-f | c-f |; | A'' [^10] | flex solid-harm ordering, libtool-based | [upstream master](https://github.com/evaleev/libint/tree/master) any point after https://github.com/evaleev/libint/commit/10ca429217977bc2baac78fdaf3ac8d4f8aa05d9 | 3Dec23, after #3047, v1.9 (see also A') | [libint-2.8.0-dev2-5-4-3-6-5-4_mm10f12ob2_0.tgz](https://github.com/loriab/libint/releases/download/v0.1/libint-2.8.0-dev2-5-4-3-6-5-4_mm10f12ob2_0.tgz) | ss | `eri_hhhh_d1` | . [^1]: Assets off https://github.com/loriab/libint/releases/tag/v0.1 . Numbers are 4-center e-g-h AM, 3-center e-g-h AM.; [^3]: https://anaconda.org/psi4/libint/files L: `libint-1.2.1-hb4a4fd4_6.tar.bz2`, M: `libint-1.2.1-h1989688_2.tar.bz2`; [^4]: https://anaconda.org/psi4/libint2/files L: `libint2-2.6.0-hc9558a2_9.tar.bz2`, M: `libint2-2.6.0-h879752b_3.tar.bz2` W: `libint2-2.6.0-h2e52968_1.tar.bz2`; [^5]: Step 3 conda packages: [linux-64/libint2-2.6.0-h2fe1556_13.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/linux-64/libint2-2.6.0-h2fe1556_13.tar.bz2), [osx-64/libint2-2.6.0-h879752b_6.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/osx-64/libint2-2.6.0-h879752b_6.tar.bz2) ~`libint2-2.6.0-h879752b_4.tar.bz2`~, [win-64/libint2-2.6.0-h2e52968_5.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/win-64/libint2-2.6.0-h2e52968_5.tar.bz2) ~`libint2-2.6.0-h2e52968_3.tar.b",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2442
https://github.com/psi4/psi4/issues/2442:2368,Deployability,release,releases,2368," | C[^8] | McMurchie Davidson | any | 31Mar22, after #2414, v1.6, v1.7 |; | ~A[^6]~ | ~standardize ordering~ | ditto step B | #2537 | ditto step B | sss | `g5` | rm `_16` | rm `_8` | — |; | A' [^9] | flex solid-harm ordering | [loriab:new-cmake-2023-take2-b](https://github.com/loriab/libint/tree/new-cmake-2023-take2-b) https://github.com/evaleev/libint/pull/259 | 8May23, after #2861, v1.8, v1.9 (see also A'') | `libint-2.7.2-post1-5-4-3-6-5-4_mm4f12ob2_1` | sss | `eri_c4_d1_l5` | `_1`, c-f | c-f | c-f |; | A'' [^10] | flex solid-harm ordering, libtool-based | [upstream master](https://github.com/evaleev/libint/tree/master) any point after https://github.com/evaleev/libint/commit/10ca429217977bc2baac78fdaf3ac8d4f8aa05d9 | 3Dec23, after #3047, v1.9 (see also A') | [libint-2.8.0-dev2-5-4-3-6-5-4_mm10f12ob2_0.tgz](https://github.com/loriab/libint/releases/download/v0.1/libint-2.8.0-dev2-5-4-3-6-5-4_mm10f12ob2_0.tgz) | ss | `eri_hhhh_d1` | . [^1]: Assets off https://github.com/loriab/libint/releases/tag/v0.1 . Numbers are 4-center e-g-h AM, 3-center e-g-h AM.; [^3]: https://anaconda.org/psi4/libint/files L: `libint-1.2.1-hb4a4fd4_6.tar.bz2`, M: `libint-1.2.1-h1989688_2.tar.bz2`; [^4]: https://anaconda.org/psi4/libint2/files L: `libint2-2.6.0-hc9558a2_9.tar.bz2`, M: `libint2-2.6.0-h879752b_3.tar.bz2` W: `libint2-2.6.0-h2e52968_1.tar.bz2`; [^5]: Step 3 conda packages: [linux-64/libint2-2.6.0-h2fe1556_13.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/linux-64/libint2-2.6.0-h2fe1556_13.tar.bz2), [osx-64/libint2-2.6.0-h879752b_6.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/osx-64/libint2-2.6.0-h879752b_6.tar.bz2) ~`libint2-2.6.0-h879752b_4.tar.bz2`~, [win-64/libint2-2.6.0-h2e52968_5.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/win-64/libint2-2.6.0-h2e52968_5.tar.bz2) ~`libint2-2.6.0-h2e52968_3.tar.bz2`~; [^6]: Step A conda packages: [linux-64/libint2-2.7.1-h2fe1556_16.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/linux-64/libin",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2442
https://github.com/psi4/psi4/issues/2442:4254,Deployability,install,install,4254,"ar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/linux-64/libint2-2.7.1-h2fe1556_16.tar.bz2), [osx-64/libint2-2.7.1-h879752b_8.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/osx-64/libint2-2.7.1-h879752b_8.tar.bz2); [^7]: Step B conda packages: [linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2), [osx-64/libint2-2.6.0-h879752b_7.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/osx-64/libint2-2.6.0-h879752b_7.tar.bz2), [win-64/libint2-2.6.0-h2e52968_4.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/win-64/libint2-2.6.0-h2e52968_4.tar.bz2); [^8]: Packages can be found off `psi4/label/dev` or `psi4/label/testing` subchannels, depending on stage of master. The build number (e.g., `_13`) remains steady even if the subchannel changes. If you're in an environment that already has a L2, `conda remove libint2 --force`, then `conda install libint2=*=<h2fe1556_13> -c psi4/label/<dev|testing>` (substitute `<placeholders>`); <!--[^9]: Packages can be found off `psi4/label/testing` subchannel: [linux-64/libint2-2.7.2-h2fe1556_0.tar.bz2](https://anaconda.org/psi4/libint2/2.7.2/download/linux-64/libint2-2.7.2-h2fe1556_0.tar.bz2), [osx-64/libint2-2.7.2-h1800126_0.conda](https://anaconda.org/psi4/libint2/2.7.2/download/osx-64/libint2-2.7.2-h1800126_0.conda)-->; [^9]: Step A' conda packages: AM7 from `psi4/label/testing::libint2`: [linux-64/libint2-2.7.2-h2fe1556_1.tar.bz2](https://anaconda.org/psi4/libint2/2.7.2/download/linux-64/libint2-2.7.2-h2fe1556_1.tar.bz2) or AM5 from `conda-forge/label/libint_dev::libint`: [linux-64/libint-2.7.3dev1-h95a0634_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/linux-64/libint-2.7.3dev1-h95a0634_0.conda), [osx-64/libint-2.7.3dev1-h7eb4062_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/osx-64/libint-2.7.3dev1-h7eb4062_0.conda), [osx-arm64/libint-2.7.3dev1-h8694fdf_0.conda](https://anacond",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2442
https://github.com/psi4/psi4/issues/2442:6521,Deployability,release,release,6521,"4/libint/2.8.0dev2/download/osx-64/libint-2.8.0dev2-h93d8f39_0.conda), [win-64/libint-2.8.0dev2-h63175ca_0.conda](https://anaconda.org/psi4/libint/2.8.0dev2/download/win-64/libint-2.8.0dev2-h63175ca_0.conda). Links on Libint2 issues here since it's worth having an issue open on this for packagers to consult. * https://github.com/psi4/psi4/issues/2300 (search ""multidimensional"") for background and conda-forge; * https://github.com/evaleev/libint/issues/190 for the general open-source conundrum and current psi4 prospects toward the end; * https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L1-L25 for libint2 build constraints for Psi4. Steps toward Psi4 using a upstream Libint2 release in common with other open-source QC programs:; * step 2 — 20 Nov 2020 — #1721; * step 3 — 11 Mar 2022 — #2388; * post 3 — 16 Mar 2022 — #2474, #2482, #2484; * step C — 21 March 2022 — #2489; * step C — 21 March 2022 — #2483; * step B — 23 March 2022 — #2413; * post B — 23 March 2022 — #2494 ; * step C — 25 March 2022 — #2386; * step C — 25 March 2022 — #2496; * step C — 30 March 2022 — #2504; * step C — 31 March 2022 — #2517; * step C — 31 March 2022 — #2414; * step C — #2503; * step C — #2502; * step A — 8 May 2023 — #2537; * step A' — 8 May 2023 — #2861; * step C — #2473 (depends on https://github.com/evaleev/libint/pull/242); * step B — WIP sidestepping; * step B — WIP — https://github.com/evaleev/libint/pull/259; * step B — WIP — https://github.com/evaleev/libint/pull/233; * step B — WIP — https://github.com/evaleev/libint/pull/205; * step B' — WIP runtime changes from step B, no buildtime changes; * step B' — WIP — https://github.com/evaleev/libint/pull/271; * step B' — WIP — #3047 ; * step B' — WIP — https://github.com/conda-forge/libint-feedstock/pull/22; * coordinate with packagers and other QC programs for a AM and integrals types l2 config options set that is adequate for all. #### Added; * 15 Feb: `_15` pkg for step B; * 18 Feb: `_4` pkg for step ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2442
https://github.com/psi4/psi4/issues/2442:8369,Deployability,update,updated,8369,"arch 2022 — #2413; * post B — 23 March 2022 — #2494 ; * step C — 25 March 2022 — #2386; * step C — 25 March 2022 — #2496; * step C — 30 March 2022 — #2504; * step C — 31 March 2022 — #2517; * step C — 31 March 2022 — #2414; * step C — #2503; * step C — #2502; * step A — 8 May 2023 — #2537; * step A' — 8 May 2023 — #2861; * step C — #2473 (depends on https://github.com/evaleev/libint/pull/242); * step B — WIP sidestepping; * step B — WIP — https://github.com/evaleev/libint/pull/259; * step B — WIP — https://github.com/evaleev/libint/pull/233; * step B — WIP — https://github.com/evaleev/libint/pull/205; * step B' — WIP runtime changes from step B, no buildtime changes; * step B' — WIP — https://github.com/evaleev/libint/pull/271; * step B' — WIP — #3047 ; * step B' — WIP — https://github.com/conda-forge/libint-feedstock/pull/22; * coordinate with packagers and other QC programs for a AM and integrals types l2 config options set that is adequate for all. #### Added; * 15 Feb: `_15` pkg for step B; * 18 Feb: `_4` pkg for step B (thanks, Jet!); * 22 Feb: add OS->MD step in. convert unordered steps to letters; * 16/17 Mar: switch out good conda packages for step 3 (M: 4->6; W: 3->5); * 23 Mar: add more PRs and items to list from 2414; * 23 Mar: added `_7` pkg for mac for step B; * 23 Mar: clarified M-D multipole integral notes (@maxscheurer); * 25 Mar: reordered some bullets for merged PRs; * 5 Apr: add more M-D/OS removal PRs to step C (@maxscheurer); * 5 Apr: switch to new linux pkg for step A (L: 12->16); * 9 Apr: add new mac pkg for step A (M: 8) and edited step A; * 21 May: updated table for v1.6; * 10 Feb 2023: updated table for v1.7 and A' replacing step A. deleted A packages and posted A' Linux one; * 17 Feb 2023: added A' Mac; * 16 May 2023: finish out A' row for v1.8; * 4 Dec 2023: finish out A'' row (incomplete B' strategy) for v1.9. note L2 shift is _not required_ -- psi4 can work with A' or A'' -- the difference is in the generation, not the library contents.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2442
https://github.com/psi4/psi4/issues/2442:8408,Deployability,update,updated,8408,"arch 2022 — #2413; * post B — 23 March 2022 — #2494 ; * step C — 25 March 2022 — #2386; * step C — 25 March 2022 — #2496; * step C — 30 March 2022 — #2504; * step C — 31 March 2022 — #2517; * step C — 31 March 2022 — #2414; * step C — #2503; * step C — #2502; * step A — 8 May 2023 — #2537; * step A' — 8 May 2023 — #2861; * step C — #2473 (depends on https://github.com/evaleev/libint/pull/242); * step B — WIP sidestepping; * step B — WIP — https://github.com/evaleev/libint/pull/259; * step B — WIP — https://github.com/evaleev/libint/pull/233; * step B — WIP — https://github.com/evaleev/libint/pull/205; * step B' — WIP runtime changes from step B, no buildtime changes; * step B' — WIP — https://github.com/evaleev/libint/pull/271; * step B' — WIP — #3047 ; * step B' — WIP — https://github.com/conda-forge/libint-feedstock/pull/22; * coordinate with packagers and other QC programs for a AM and integrals types l2 config options set that is adequate for all. #### Added; * 15 Feb: `_15` pkg for step B; * 18 Feb: `_4` pkg for step B (thanks, Jet!); * 22 Feb: add OS->MD step in. convert unordered steps to letters; * 16/17 Mar: switch out good conda packages for step 3 (M: 4->6; W: 3->5); * 23 Mar: add more PRs and items to list from 2414; * 23 Mar: added `_7` pkg for mac for step B; * 23 Mar: clarified M-D multipole integral notes (@maxscheurer); * 25 Mar: reordered some bullets for merged PRs; * 5 Apr: add more M-D/OS removal PRs to step C (@maxscheurer); * 5 Apr: switch to new linux pkg for step A (L: 12->16); * 9 Apr: add new mac pkg for step A (M: 8) and edited step A; * 21 May: updated table for v1.6; * 10 Feb 2023: updated table for v1.7 and A' replacing step A. deleted A packages and posted A' Linux one; * 17 Feb 2023: added A' Mac; * 16 May 2023: finish out A' row for v1.8; * 4 Dec 2023: finish out A'' row (incomplete B' strategy) for v1.9. note L2 shift is _not required_ -- psi4 can work with A' or A'' -- the difference is in the generation, not the library contents.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2442
https://github.com/psi4/psi4/issues/2442:4051,Integrability,depend,depending,4051,"2) ~`libint2-2.6.0-h879752b_4.tar.bz2`~, [win-64/libint2-2.6.0-h2e52968_5.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/win-64/libint2-2.6.0-h2e52968_5.tar.bz2) ~`libint2-2.6.0-h2e52968_3.tar.bz2`~; [^6]: Step A conda packages: [linux-64/libint2-2.7.1-h2fe1556_16.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/linux-64/libint2-2.7.1-h2fe1556_16.tar.bz2), [osx-64/libint2-2.7.1-h879752b_8.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/osx-64/libint2-2.7.1-h879752b_8.tar.bz2); [^7]: Step B conda packages: [linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2), [osx-64/libint2-2.6.0-h879752b_7.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/osx-64/libint2-2.6.0-h879752b_7.tar.bz2), [win-64/libint2-2.6.0-h2e52968_4.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/win-64/libint2-2.6.0-h2e52968_4.tar.bz2); [^8]: Packages can be found off `psi4/label/dev` or `psi4/label/testing` subchannels, depending on stage of master. The build number (e.g., `_13`) remains steady even if the subchannel changes. If you're in an environment that already has a L2, `conda remove libint2 --force`, then `conda install libint2=*=<h2fe1556_13> -c psi4/label/<dev|testing>` (substitute `<placeholders>`); <!--[^9]: Packages can be found off `psi4/label/testing` subchannel: [linux-64/libint2-2.7.2-h2fe1556_0.tar.bz2](https://anaconda.org/psi4/libint2/2.7.2/download/linux-64/libint2-2.7.2-h2fe1556_0.tar.bz2), [osx-64/libint2-2.7.2-h1800126_0.conda](https://anaconda.org/psi4/libint2/2.7.2/download/osx-64/libint2-2.7.2-h1800126_0.conda)-->; [^9]: Step A' conda packages: AM7 from `psi4/label/testing::libint2`: [linux-64/libint2-2.7.2-h2fe1556_1.tar.bz2](https://anaconda.org/psi4/libint2/2.7.2/download/linux-64/libint2-2.7.2-h2fe1556_1.tar.bz2) or AM5 from `conda-forge/label/libint_dev::libint`: [linux-64/libint-2.7.3dev1-h95a0634_0.conda](https://anaconda.org/conda-forge/",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2442
https://github.com/psi4/psi4/issues/2442:7110,Integrability,depend,depends,7110,"4/libint/2.8.0dev2/download/osx-64/libint-2.8.0dev2-h93d8f39_0.conda), [win-64/libint-2.8.0dev2-h63175ca_0.conda](https://anaconda.org/psi4/libint/2.8.0dev2/download/win-64/libint-2.8.0dev2-h63175ca_0.conda). Links on Libint2 issues here since it's worth having an issue open on this for packagers to consult. * https://github.com/psi4/psi4/issues/2300 (search ""multidimensional"") for background and conda-forge; * https://github.com/evaleev/libint/issues/190 for the general open-source conundrum and current psi4 prospects toward the end; * https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L1-L25 for libint2 build constraints for Psi4. Steps toward Psi4 using a upstream Libint2 release in common with other open-source QC programs:; * step 2 — 20 Nov 2020 — #1721; * step 3 — 11 Mar 2022 — #2388; * post 3 — 16 Mar 2022 — #2474, #2482, #2484; * step C — 21 March 2022 — #2489; * step C — 21 March 2022 — #2483; * step B — 23 March 2022 — #2413; * post B — 23 March 2022 — #2494 ; * step C — 25 March 2022 — #2386; * step C — 25 March 2022 — #2496; * step C — 30 March 2022 — #2504; * step C — 31 March 2022 — #2517; * step C — 31 March 2022 — #2414; * step C — #2503; * step C — #2502; * step A — 8 May 2023 — #2537; * step A' — 8 May 2023 — #2861; * step C — #2473 (depends on https://github.com/evaleev/libint/pull/242); * step B — WIP sidestepping; * step B — WIP — https://github.com/evaleev/libint/pull/259; * step B — WIP — https://github.com/evaleev/libint/pull/233; * step B — WIP — https://github.com/evaleev/libint/pull/205; * step B' — WIP runtime changes from step B, no buildtime changes; * step B' — WIP — https://github.com/evaleev/libint/pull/271; * step B' — WIP — #3047 ; * step B' — WIP — https://github.com/conda-forge/libint-feedstock/pull/22; * coordinate with packagers and other QC programs for a AM and integrals types l2 config options set that is adequate for all. #### Added; * 15 Feb: `_15` pkg for step B; * 18 Feb: `_4` pkg for step ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2442
https://github.com/psi4/psi4/issues/2442:160,Modifiability,config,configured,160,"There's a lot of steps in the grand Libint2 project, so here's a place to organize and update progress. Also, this is a place to see if there's a conda package configured to test each step. Table at the top includes steps that need new requirements of L2 library. List below has more intermediate steps. | step | status | libint ver & branch | Psi4 | tarball[^1] | order | component style | linux-64[^8] | osx-64[^8] | win-64[^8] |; | ---- | ------ | ------- | ---- | -------- | ---- | ------ | ----- | ------ | -------- |; | 1[^3] | longstanding L1 | L1 [evaleev:5c89451](https://github.com/evaleev/libint/tree/5c89451) | v1.3 | — | gss | `5` | L1 `_6` | L1 `_2` | — |; | 2[^4] | TEI L2 | [loriab:l2cmake](https://github.com/loriab/libint/tree/l2cmake) https://github.com/evaleev/libint/pull/148 | 20Nov20, after #1721, v1.4, 1.5 | L: `7-7-4-7-7-5_1`, MW: `5-4-3-6-5-4_1` | gss | `g5` | `_9` | `_3` | `_1` |; | 3[^5] | OEI L2 | ditto step 2 | 11Mar22, after #2388 | L: `5-4-3-6-5-4_mm25f12ob2`, MW: `5-4-3-6-5-4_mm4ob2` | gss | `g5` | rm `_13` | ~`_4`~ rm `_6` | ~`_3`~ rm `_5` |; | B[^7] | upstream L2 cmake | [loriab:new-cmake-harness-lab-rb1](https://github.com/loriab/libint/tree/new-cmake-harness-lab-rb1) https://github.com/evaleev/libint/pull/233 | 23Mar22, after #2413, v1.6, v1.7 | `5-4-3-6-5-4_mm4f12ob2.tgz` | gss | `eri_c4_d1_l5` | `_15` | `_7` | `_4` |; | C[^8] | McMurchie Davidson | any | 31Mar22, after #2414, v1.6, v1.7 |; | ~A[^6]~ | ~standardize ordering~ | ditto step B | #2537 | ditto step B | sss | `g5` | rm `_16` | rm `_8` | — |; | A' [^9] | flex solid-harm ordering | [loriab:new-cmake-2023-take2-b](https://github.com/loriab/libint/tree/new-cmake-2023-take2-b) https://github.com/evaleev/libint/pull/259 | 8May23, after #2861, v1.8, v1.9 (see also A'') | `libint-2.7.2-post1-5-4-3-6-5-4_mm4f12ob2_1` | sss | `eri_c4_d1_l5` | `_1`, c-f | c-f | c-f |; | A'' [^10] | flex solid-harm ordering, libtool-based | [upstream master](https://github.com/evaleev/libint/tree/master) any",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2442
https://github.com/psi4/psi4/issues/2442:7690,Modifiability,config,config,7690," 16 Mar 2022 — #2474, #2482, #2484; * step C — 21 March 2022 — #2489; * step C — 21 March 2022 — #2483; * step B — 23 March 2022 — #2413; * post B — 23 March 2022 — #2494 ; * step C — 25 March 2022 — #2386; * step C — 25 March 2022 — #2496; * step C — 30 March 2022 — #2504; * step C — 31 March 2022 — #2517; * step C — 31 March 2022 — #2414; * step C — #2503; * step C — #2502; * step A — 8 May 2023 — #2537; * step A' — 8 May 2023 — #2861; * step C — #2473 (depends on https://github.com/evaleev/libint/pull/242); * step B — WIP sidestepping; * step B — WIP — https://github.com/evaleev/libint/pull/259; * step B — WIP — https://github.com/evaleev/libint/pull/233; * step B — WIP — https://github.com/evaleev/libint/pull/205; * step B' — WIP runtime changes from step B, no buildtime changes; * step B' — WIP — https://github.com/evaleev/libint/pull/271; * step B' — WIP — #3047 ; * step B' — WIP — https://github.com/conda-forge/libint-feedstock/pull/22; * coordinate with packagers and other QC programs for a AM and integrals types l2 config options set that is adequate for all. #### Added; * 15 Feb: `_15` pkg for step B; * 18 Feb: `_4` pkg for step B (thanks, Jet!); * 22 Feb: add OS->MD step in. convert unordered steps to letters; * 16/17 Mar: switch out good conda packages for step 3 (M: 4->6; W: 3->5); * 23 Mar: add more PRs and items to list from 2414; * 23 Mar: added `_7` pkg for mac for step B; * 23 Mar: clarified M-D multipole integral notes (@maxscheurer); * 25 Mar: reordered some bullets for merged PRs; * 5 Apr: add more M-D/OS removal PRs to step C (@maxscheurer); * 5 Apr: switch to new linux pkg for step A (L: 12->16); * 9 Apr: add new mac pkg for step A (M: 8) and edited step A; * 21 May: updated table for v1.6; * 10 Feb 2023: updated table for v1.7 and A' replacing step A. deleted A packages and posted A' Linux one; * 17 Feb 2023: added A' Mac; * 16 May 2023: finish out A' row for v1.8; * 4 Dec 2023: finish out A'' row (incomplete B' strategy) for v1.9. note L2 sh",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2442
https://github.com/psi4/psi4/issues/2442:174,Testability,test,test,174,"There's a lot of steps in the grand Libint2 project, so here's a place to organize and update progress. Also, this is a place to see if there's a conda package configured to test each step. Table at the top includes steps that need new requirements of L2 library. List below has more intermediate steps. | step | status | libint ver & branch | Psi4 | tarball[^1] | order | component style | linux-64[^8] | osx-64[^8] | win-64[^8] |; | ---- | ------ | ------- | ---- | -------- | ---- | ------ | ----- | ------ | -------- |; | 1[^3] | longstanding L1 | L1 [evaleev:5c89451](https://github.com/evaleev/libint/tree/5c89451) | v1.3 | — | gss | `5` | L1 `_6` | L1 `_2` | — |; | 2[^4] | TEI L2 | [loriab:l2cmake](https://github.com/loriab/libint/tree/l2cmake) https://github.com/evaleev/libint/pull/148 | 20Nov20, after #1721, v1.4, 1.5 | L: `7-7-4-7-7-5_1`, MW: `5-4-3-6-5-4_1` | gss | `g5` | `_9` | `_3` | `_1` |; | 3[^5] | OEI L2 | ditto step 2 | 11Mar22, after #2388 | L: `5-4-3-6-5-4_mm25f12ob2`, MW: `5-4-3-6-5-4_mm4ob2` | gss | `g5` | rm `_13` | ~`_4`~ rm `_6` | ~`_3`~ rm `_5` |; | B[^7] | upstream L2 cmake | [loriab:new-cmake-harness-lab-rb1](https://github.com/loriab/libint/tree/new-cmake-harness-lab-rb1) https://github.com/evaleev/libint/pull/233 | 23Mar22, after #2413, v1.6, v1.7 | `5-4-3-6-5-4_mm4f12ob2.tgz` | gss | `eri_c4_d1_l5` | `_15` | `_7` | `_4` |; | C[^8] | McMurchie Davidson | any | 31Mar22, after #2414, v1.6, v1.7 |; | ~A[^6]~ | ~standardize ordering~ | ditto step B | #2537 | ditto step B | sss | `g5` | rm `_16` | rm `_8` | — |; | A' [^9] | flex solid-harm ordering | [loriab:new-cmake-2023-take2-b](https://github.com/loriab/libint/tree/new-cmake-2023-take2-b) https://github.com/evaleev/libint/pull/259 | 8May23, after #2861, v1.8, v1.9 (see also A'') | `libint-2.7.2-post1-5-4-3-6-5-4_mm4f12ob2_1` | sss | `eri_c4_d1_l5` | `_1`, c-f | c-f | c-f |; | A'' [^10] | flex solid-harm ordering, libtool-based | [upstream master](https://github.com/evaleev/libint/tree/master) any",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2442
https://github.com/psi4/psi4/issues/2442:4029,Testability,test,testing,4029,"2) ~`libint2-2.6.0-h879752b_4.tar.bz2`~, [win-64/libint2-2.6.0-h2e52968_5.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/win-64/libint2-2.6.0-h2e52968_5.tar.bz2) ~`libint2-2.6.0-h2e52968_3.tar.bz2`~; [^6]: Step A conda packages: [linux-64/libint2-2.7.1-h2fe1556_16.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/linux-64/libint2-2.7.1-h2fe1556_16.tar.bz2), [osx-64/libint2-2.7.1-h879752b_8.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/osx-64/libint2-2.7.1-h879752b_8.tar.bz2); [^7]: Step B conda packages: [linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2), [osx-64/libint2-2.6.0-h879752b_7.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/osx-64/libint2-2.6.0-h879752b_7.tar.bz2), [win-64/libint2-2.6.0-h2e52968_4.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/win-64/libint2-2.6.0-h2e52968_4.tar.bz2); [^8]: Packages can be found off `psi4/label/dev` or `psi4/label/testing` subchannels, depending on stage of master. The build number (e.g., `_13`) remains steady even if the subchannel changes. If you're in an environment that already has a L2, `conda remove libint2 --force`, then `conda install libint2=*=<h2fe1556_13> -c psi4/label/<dev|testing>` (substitute `<placeholders>`); <!--[^9]: Packages can be found off `psi4/label/testing` subchannel: [linux-64/libint2-2.7.2-h2fe1556_0.tar.bz2](https://anaconda.org/psi4/libint2/2.7.2/download/linux-64/libint2-2.7.2-h2fe1556_0.tar.bz2), [osx-64/libint2-2.7.2-h1800126_0.conda](https://anaconda.org/psi4/libint2/2.7.2/download/osx-64/libint2-2.7.2-h1800126_0.conda)-->; [^9]: Step A' conda packages: AM7 from `psi4/label/testing::libint2`: [linux-64/libint2-2.7.2-h2fe1556_1.tar.bz2](https://anaconda.org/psi4/libint2/2.7.2/download/linux-64/libint2-2.7.2-h2fe1556_1.tar.bz2) or AM5 from `conda-forge/label/libint_dev::libint`: [linux-64/libint-2.7.3dev1-h95a0634_0.conda](https://anaconda.org/conda-forge/",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2442
https://github.com/psi4/psi4/issues/2442:4305,Testability,test,testing,4305,"ar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/linux-64/libint2-2.7.1-h2fe1556_16.tar.bz2), [osx-64/libint2-2.7.1-h879752b_8.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/osx-64/libint2-2.7.1-h879752b_8.tar.bz2); [^7]: Step B conda packages: [linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2), [osx-64/libint2-2.6.0-h879752b_7.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/osx-64/libint2-2.6.0-h879752b_7.tar.bz2), [win-64/libint2-2.6.0-h2e52968_4.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/win-64/libint2-2.6.0-h2e52968_4.tar.bz2); [^8]: Packages can be found off `psi4/label/dev` or `psi4/label/testing` subchannels, depending on stage of master. The build number (e.g., `_13`) remains steady even if the subchannel changes. If you're in an environment that already has a L2, `conda remove libint2 --force`, then `conda install libint2=*=<h2fe1556_13> -c psi4/label/<dev|testing>` (substitute `<placeholders>`); <!--[^9]: Packages can be found off `psi4/label/testing` subchannel: [linux-64/libint2-2.7.2-h2fe1556_0.tar.bz2](https://anaconda.org/psi4/libint2/2.7.2/download/linux-64/libint2-2.7.2-h2fe1556_0.tar.bz2), [osx-64/libint2-2.7.2-h1800126_0.conda](https://anaconda.org/psi4/libint2/2.7.2/download/osx-64/libint2-2.7.2-h1800126_0.conda)-->; [^9]: Step A' conda packages: AM7 from `psi4/label/testing::libint2`: [linux-64/libint2-2.7.2-h2fe1556_1.tar.bz2](https://anaconda.org/psi4/libint2/2.7.2/download/linux-64/libint2-2.7.2-h2fe1556_1.tar.bz2) or AM5 from `conda-forge/label/libint_dev::libint`: [linux-64/libint-2.7.3dev1-h95a0634_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/linux-64/libint-2.7.3dev1-h95a0634_0.conda), [osx-64/libint-2.7.3dev1-h7eb4062_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/osx-64/libint-2.7.3dev1-h7eb4062_0.conda), [osx-arm64/libint-2.7.3dev1-h8694fdf_0.conda](https://anacond",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2442
https://github.com/psi4/psi4/issues/2442:4394,Testability,test,testing,4394,"ar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/linux-64/libint2-2.7.1-h2fe1556_16.tar.bz2), [osx-64/libint2-2.7.1-h879752b_8.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/osx-64/libint2-2.7.1-h879752b_8.tar.bz2); [^7]: Step B conda packages: [linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2), [osx-64/libint2-2.6.0-h879752b_7.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/osx-64/libint2-2.6.0-h879752b_7.tar.bz2), [win-64/libint2-2.6.0-h2e52968_4.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/win-64/libint2-2.6.0-h2e52968_4.tar.bz2); [^8]: Packages can be found off `psi4/label/dev` or `psi4/label/testing` subchannels, depending on stage of master. The build number (e.g., `_13`) remains steady even if the subchannel changes. If you're in an environment that already has a L2, `conda remove libint2 --force`, then `conda install libint2=*=<h2fe1556_13> -c psi4/label/<dev|testing>` (substitute `<placeholders>`); <!--[^9]: Packages can be found off `psi4/label/testing` subchannel: [linux-64/libint2-2.7.2-h2fe1556_0.tar.bz2](https://anaconda.org/psi4/libint2/2.7.2/download/linux-64/libint2-2.7.2-h2fe1556_0.tar.bz2), [osx-64/libint2-2.7.2-h1800126_0.conda](https://anaconda.org/psi4/libint2/2.7.2/download/osx-64/libint2-2.7.2-h1800126_0.conda)-->; [^9]: Step A' conda packages: AM7 from `psi4/label/testing::libint2`: [linux-64/libint2-2.7.2-h2fe1556_1.tar.bz2](https://anaconda.org/psi4/libint2/2.7.2/download/linux-64/libint2-2.7.2-h2fe1556_1.tar.bz2) or AM5 from `conda-forge/label/libint_dev::libint`: [linux-64/libint-2.7.3dev1-h95a0634_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/linux-64/libint-2.7.3dev1-h95a0634_0.conda), [osx-64/libint-2.7.3dev1-h7eb4062_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/osx-64/libint-2.7.3dev1-h7eb4062_0.conda), [osx-arm64/libint-2.7.3dev1-h8694fdf_0.conda](https://anacond",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2442
https://github.com/psi4/psi4/issues/2442:4735,Testability,test,testing,4735,"79752b_7.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/osx-64/libint2-2.6.0-h879752b_7.tar.bz2), [win-64/libint2-2.6.0-h2e52968_4.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/win-64/libint2-2.6.0-h2e52968_4.tar.bz2); [^8]: Packages can be found off `psi4/label/dev` or `psi4/label/testing` subchannels, depending on stage of master. The build number (e.g., `_13`) remains steady even if the subchannel changes. If you're in an environment that already has a L2, `conda remove libint2 --force`, then `conda install libint2=*=<h2fe1556_13> -c psi4/label/<dev|testing>` (substitute `<placeholders>`); <!--[^9]: Packages can be found off `psi4/label/testing` subchannel: [linux-64/libint2-2.7.2-h2fe1556_0.tar.bz2](https://anaconda.org/psi4/libint2/2.7.2/download/linux-64/libint2-2.7.2-h2fe1556_0.tar.bz2), [osx-64/libint2-2.7.2-h1800126_0.conda](https://anaconda.org/psi4/libint2/2.7.2/download/osx-64/libint2-2.7.2-h1800126_0.conda)-->; [^9]: Step A' conda packages: AM7 from `psi4/label/testing::libint2`: [linux-64/libint2-2.7.2-h2fe1556_1.tar.bz2](https://anaconda.org/psi4/libint2/2.7.2/download/linux-64/libint2-2.7.2-h2fe1556_1.tar.bz2) or AM5 from `conda-forge/label/libint_dev::libint`: [linux-64/libint-2.7.3dev1-h95a0634_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/linux-64/libint-2.7.3dev1-h95a0634_0.conda), [osx-64/libint-2.7.3dev1-h7eb4062_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/osx-64/libint-2.7.3dev1-h7eb4062_0.conda), [osx-arm64/libint-2.7.3dev1-h8694fdf_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/osx-arm64/libint-2.7.3dev1-h8694fdf_0.conda), [win-64/libint-2.7.3dev1-h8e19551_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/win-64/libint-2.7.3dev1-h8e19551_0.conda); [^10]: Step A'' conda packages AM5 from `-c psi4/label/testing`: [linux-64/libint-2.8.0dev2-h59595ed_0.conda](https://anaconda.org/psi4/libint/2.8.0dev2/download/linux-64/libint-2.8.0dev2-h595",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2442
https://github.com/psi4/psi4/issues/2442:5587,Testability,test,testing,5587,"7.2-h1800126_0.conda](https://anaconda.org/psi4/libint2/2.7.2/download/osx-64/libint2-2.7.2-h1800126_0.conda)-->; [^9]: Step A' conda packages: AM7 from `psi4/label/testing::libint2`: [linux-64/libint2-2.7.2-h2fe1556_1.tar.bz2](https://anaconda.org/psi4/libint2/2.7.2/download/linux-64/libint2-2.7.2-h2fe1556_1.tar.bz2) or AM5 from `conda-forge/label/libint_dev::libint`: [linux-64/libint-2.7.3dev1-h95a0634_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/linux-64/libint-2.7.3dev1-h95a0634_0.conda), [osx-64/libint-2.7.3dev1-h7eb4062_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/osx-64/libint-2.7.3dev1-h7eb4062_0.conda), [osx-arm64/libint-2.7.3dev1-h8694fdf_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/osx-arm64/libint-2.7.3dev1-h8694fdf_0.conda), [win-64/libint-2.7.3dev1-h8e19551_0.conda](https://anaconda.org/conda-forge/libint/2.7.3dev1/download/win-64/libint-2.7.3dev1-h8e19551_0.conda); [^10]: Step A'' conda packages AM5 from `-c psi4/label/testing`: [linux-64/libint-2.8.0dev2-h59595ed_0.conda](https://anaconda.org/psi4/libint/2.8.0dev2/download/linux-64/libint-2.8.0dev2-h59595ed_0.conda), [osx-64/libint-2.8.0dev2-h93d8f39_0.conda](https://anaconda.org/psi4/libint/2.8.0dev2/download/osx-64/libint-2.8.0dev2-h93d8f39_0.conda), [win-64/libint-2.8.0dev2-h63175ca_0.conda](https://anaconda.org/psi4/libint/2.8.0dev2/download/win-64/libint-2.8.0dev2-h63175ca_0.conda). Links on Libint2 issues here since it's worth having an issue open on this for packagers to consult. * https://github.com/psi4/psi4/issues/2300 (search ""multidimensional"") for background and conda-forge; * https://github.com/evaleev/libint/issues/190 for the general open-source conundrum and current psi4 prospects toward the end; * https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L1-L25 for libint2 build constraints for Psi4. Steps toward Psi4 using a upstream Libint2 release in common with other open-source QC progr",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2442
https://github.com/psi4/psi4/pull/2443:244,Deployability,integrat,integrates,244,"## Description; This PR adds a new psivariable, the overlap between the left and right CC eigenvectors. This was previously tested by `psitest.pl`, but promoting it to a psivar allows the standard `compare_values` machinery to test it. This PR integrates the new psivar into tests of `cc18`. This PR also removes the file `overlap_LAMPS.cc`, which was unused and differs from `overlap.cc` just by a search-replace on the name of the file to which quantities were being written. This is PR 4 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. **Do not merge until** we have approval from @loriab and @lothian, as we are adding a new psivar to the `cc` mega-module. The next stage will be to ensure all variables are set _on the wavefunction_, for testing purposes. This will proceed module-by-module, to minimize the chances of anything getting overlooked. ## Questions; - [x] Are there any Crawford group projects that need `overlap_LAMPS.cc`?; - [x] Please double-check that my assignments of method to ground state name are correct. ## Checklist; - [x] Tests added for any newly testable features; - [x] `cc` tests pass. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2443
https://github.com/psi4/psi4/pull/2443:244,Integrability,integrat,integrates,244,"## Description; This PR adds a new psivariable, the overlap between the left and right CC eigenvectors. This was previously tested by `psitest.pl`, but promoting it to a psivar allows the standard `compare_values` machinery to test it. This PR integrates the new psivar into tests of `cc18`. This PR also removes the file `overlap_LAMPS.cc`, which was unused and differs from `overlap.cc` just by a search-replace on the name of the file to which quantities were being written. This is PR 4 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. **Do not merge until** we have approval from @loriab and @lothian, as we are adding a new psivar to the `cc` mega-module. The next stage will be to ensure all variables are set _on the wavefunction_, for testing purposes. This will proceed module-by-module, to minimize the chances of anything getting overlooked. ## Questions; - [x] Are there any Crawford group projects that need `overlap_LAMPS.cc`?; - [x] Please double-check that my assignments of method to ground state name are correct. ## Checklist; - [x] Tests added for any newly testable features; - [x] `cc` tests pass. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2443
https://github.com/psi4/psi4/pull/2443:781,Modifiability,variab,variables,781,"## Description; This PR adds a new psivariable, the overlap between the left and right CC eigenvectors. This was previously tested by `psitest.pl`, but promoting it to a psivar allows the standard `compare_values` machinery to test it. This PR integrates the new psivar into tests of `cc18`. This PR also removes the file `overlap_LAMPS.cc`, which was unused and differs from `overlap.cc` just by a search-replace on the name of the file to which quantities were being written. This is PR 4 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. **Do not merge until** we have approval from @loriab and @lothian, as we are adding a new psivar to the `cc` mega-module. The next stage will be to ensure all variables are set _on the wavefunction_, for testing purposes. This will proceed module-by-module, to minimize the chances of anything getting overlooked. ## Questions; - [x] Are there any Crawford group projects that need `overlap_LAMPS.cc`?; - [x] Please double-check that my assignments of method to ground state name are correct. ## Checklist; - [x] Tests added for any newly testable features; - [x] `cc` tests pass. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2443
https://github.com/psi4/psi4/pull/2443:124,Testability,test,tested,124,"## Description; This PR adds a new psivariable, the overlap between the left and right CC eigenvectors. This was previously tested by `psitest.pl`, but promoting it to a psivar allows the standard `compare_values` machinery to test it. This PR integrates the new psivar into tests of `cc18`. This PR also removes the file `overlap_LAMPS.cc`, which was unused and differs from `overlap.cc` just by a search-replace on the name of the file to which quantities were being written. This is PR 4 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. **Do not merge until** we have approval from @loriab and @lothian, as we are adding a new psivar to the `cc` mega-module. The next stage will be to ensure all variables are set _on the wavefunction_, for testing purposes. This will proceed module-by-module, to minimize the chances of anything getting overlooked. ## Questions; - [x] Are there any Crawford group projects that need `overlap_LAMPS.cc`?; - [x] Please double-check that my assignments of method to ground state name are correct. ## Checklist; - [x] Tests added for any newly testable features; - [x] `cc` tests pass. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2443
https://github.com/psi4/psi4/pull/2443:227,Testability,test,test,227,"## Description; This PR adds a new psivariable, the overlap between the left and right CC eigenvectors. This was previously tested by `psitest.pl`, but promoting it to a psivar allows the standard `compare_values` machinery to test it. This PR integrates the new psivar into tests of `cc18`. This PR also removes the file `overlap_LAMPS.cc`, which was unused and differs from `overlap.cc` just by a search-replace on the name of the file to which quantities were being written. This is PR 4 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. **Do not merge until** we have approval from @loriab and @lothian, as we are adding a new psivar to the `cc` mega-module. The next stage will be to ensure all variables are set _on the wavefunction_, for testing purposes. This will proceed module-by-module, to minimize the chances of anything getting overlooked. ## Questions; - [x] Are there any Crawford group projects that need `overlap_LAMPS.cc`?; - [x] Please double-check that my assignments of method to ground state name are correct. ## Checklist; - [x] Tests added for any newly testable features; - [x] `cc` tests pass. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2443
https://github.com/psi4/psi4/pull/2443:275,Testability,test,tests,275,"## Description; This PR adds a new psivariable, the overlap between the left and right CC eigenvectors. This was previously tested by `psitest.pl`, but promoting it to a psivar allows the standard `compare_values` machinery to test it. This PR integrates the new psivar into tests of `cc18`. This PR also removes the file `overlap_LAMPS.cc`, which was unused and differs from `overlap.cc` just by a search-replace on the name of the file to which quantities were being written. This is PR 4 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. **Do not merge until** we have approval from @loriab and @lothian, as we are adding a new psivar to the `cc` mega-module. The next stage will be to ensure all variables are set _on the wavefunction_, for testing purposes. This will proceed module-by-module, to minimize the chances of anything getting overlooked. ## Questions; - [x] Are there any Crawford group projects that need `overlap_LAMPS.cc`?; - [x] Please double-check that my assignments of method to ground state name are correct. ## Checklist; - [x] Tests added for any newly testable features; - [x] `cc` tests pass. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2443
https://github.com/psi4/psi4/pull/2443:826,Testability,test,testing,826,"## Description; This PR adds a new psivariable, the overlap between the left and right CC eigenvectors. This was previously tested by `psitest.pl`, but promoting it to a psivar allows the standard `compare_values` machinery to test it. This PR integrates the new psivar into tests of `cc18`. This PR also removes the file `overlap_LAMPS.cc`, which was unused and differs from `overlap.cc` just by a search-replace on the name of the file to which quantities were being written. This is PR 4 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. **Do not merge until** we have approval from @loriab and @lothian, as we are adding a new psivar to the `cc` mega-module. The next stage will be to ensure all variables are set _on the wavefunction_, for testing purposes. This will proceed module-by-module, to minimize the chances of anything getting overlooked. ## Questions; - [x] Are there any Crawford group projects that need `overlap_LAMPS.cc`?; - [x] Please double-check that my assignments of method to ground state name are correct. ## Checklist; - [x] Tests added for any newly testable features; - [x] `cc` tests pass. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2443
https://github.com/psi4/psi4/pull/2443:1135,Testability,Test,Tests,1135,"## Description; This PR adds a new psivariable, the overlap between the left and right CC eigenvectors. This was previously tested by `psitest.pl`, but promoting it to a psivar allows the standard `compare_values` machinery to test it. This PR integrates the new psivar into tests of `cc18`. This PR also removes the file `overlap_LAMPS.cc`, which was unused and differs from `overlap.cc` just by a search-replace on the name of the file to which quantities were being written. This is PR 4 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. **Do not merge until** we have approval from @loriab and @lothian, as we are adding a new psivar to the `cc` mega-module. The next stage will be to ensure all variables are set _on the wavefunction_, for testing purposes. This will proceed module-by-module, to minimize the chances of anything getting overlooked. ## Questions; - [x] Are there any Crawford group projects that need `overlap_LAMPS.cc`?; - [x] Please double-check that my assignments of method to ground state name are correct. ## Checklist; - [x] Tests added for any newly testable features; - [x] `cc` tests pass. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2443
https://github.com/psi4/psi4/pull/2443:1161,Testability,test,testable,1161,"## Description; This PR adds a new psivariable, the overlap between the left and right CC eigenvectors. This was previously tested by `psitest.pl`, but promoting it to a psivar allows the standard `compare_values` machinery to test it. This PR integrates the new psivar into tests of `cc18`. This PR also removes the file `overlap_LAMPS.cc`, which was unused and differs from `overlap.cc` just by a search-replace on the name of the file to which quantities were being written. This is PR 4 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. **Do not merge until** we have approval from @loriab and @lothian, as we are adding a new psivar to the `cc` mega-module. The next stage will be to ensure all variables are set _on the wavefunction_, for testing purposes. This will proceed module-by-module, to minimize the chances of anything getting overlooked. ## Questions; - [x] Are there any Crawford group projects that need `overlap_LAMPS.cc`?; - [x] Please double-check that my assignments of method to ground state name are correct. ## Checklist; - [x] Tests added for any newly testable features; - [x] `cc` tests pass. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2443
https://github.com/psi4/psi4/pull/2443:1191,Testability,test,tests,1191,"## Description; This PR adds a new psivariable, the overlap between the left and right CC eigenvectors. This was previously tested by `psitest.pl`, but promoting it to a psivar allows the standard `compare_values` machinery to test it. This PR integrates the new psivar into tests of `cc18`. This PR also removes the file `overlap_LAMPS.cc`, which was unused and differs from `overlap.cc` just by a search-replace on the name of the file to which quantities were being written. This is PR 4 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. **Do not merge until** we have approval from @loriab and @lothian, as we are adding a new psivar to the `cc` mega-module. The next stage will be to ensure all variables are set _on the wavefunction_, for testing purposes. This will proceed module-by-module, to minimize the chances of anything getting overlooked. ## Questions; - [x] Are there any Crawford group projects that need `overlap_LAMPS.cc`?; - [x] Please double-check that my assignments of method to ground state name are correct. ## Checklist; - [x] Tests added for any newly testable features; - [x] `cc` tests pass. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2443
https://github.com/psi4/psi4/pull/2444:22,Testability,test,tests,22,## Description; Heals tests and marks the tests that _should have caught this_ as `fnocc` tests. ## Checklist; - [x] `ctest -L fnocc` passes _and is now enlarged_. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2444
https://github.com/psi4/psi4/pull/2444:42,Testability,test,tests,42,## Description; Heals tests and marks the tests that _should have caught this_ as `fnocc` tests. ## Checklist; - [x] `ctest -L fnocc` passes _and is now enlarged_. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2444
https://github.com/psi4/psi4/pull/2444:90,Testability,test,tests,90,## Description; Heals tests and marks the tests that _should have caught this_ as `fnocc` tests. ## Checklist; - [x] `ctest -L fnocc` passes _and is now enlarged_. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2444
https://github.com/psi4/psi4/pull/2445:82,Availability,error,error,82,"## Description; During review of the ADIIS PR, it was suggested that Psi raise an error if the BFGS doesn't meet the target convergence criteria. This PR changes that, so the error will be raised _if BFGS is very far from meeting the convergence criteria_. 1e-6 would be nice, but 1e-3 is good enough for our purposes. @loriab, these are the last of the Psi tests on my list to heal. ## Checklist; - [x] Failing tests Lori pointed out work; Can't cause tests that previously passed to fail. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2445
https://github.com/psi4/psi4/pull/2445:175,Availability,error,error,175,"## Description; During review of the ADIIS PR, it was suggested that Psi raise an error if the BFGS doesn't meet the target convergence criteria. This PR changes that, so the error will be raised _if BFGS is very far from meeting the convergence criteria_. 1e-6 would be nice, but 1e-3 is good enough for our purposes. @loriab, these are the last of the Psi tests on my list to heal. ## Checklist; - [x] Failing tests Lori pointed out work; Can't cause tests that previously passed to fail. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2445
https://github.com/psi4/psi4/pull/2445:358,Testability,test,tests,358,"## Description; During review of the ADIIS PR, it was suggested that Psi raise an error if the BFGS doesn't meet the target convergence criteria. This PR changes that, so the error will be raised _if BFGS is very far from meeting the convergence criteria_. 1e-6 would be nice, but 1e-3 is good enough for our purposes. @loriab, these are the last of the Psi tests on my list to heal. ## Checklist; - [x] Failing tests Lori pointed out work; Can't cause tests that previously passed to fail. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2445
https://github.com/psi4/psi4/pull/2445:412,Testability,test,tests,412,"## Description; During review of the ADIIS PR, it was suggested that Psi raise an error if the BFGS doesn't meet the target convergence criteria. This PR changes that, so the error will be raised _if BFGS is very far from meeting the convergence criteria_. 1e-6 would be nice, but 1e-3 is good enough for our purposes. @loriab, these are the last of the Psi tests on my list to heal. ## Checklist; - [x] Failing tests Lori pointed out work; Can't cause tests that previously passed to fail. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2445
https://github.com/psi4/psi4/pull/2445:453,Testability,test,tests,453,"## Description; During review of the ADIIS PR, it was suggested that Psi raise an error if the BFGS doesn't meet the target convergence criteria. This PR changes that, so the error will be raised _if BFGS is very far from meeting the convergence criteria_. 1e-6 would be nice, but 1e-3 is good enough for our purposes. @loriab, these are the last of the Psi tests on my list to heal. ## Checklist; - [x] Failing tests Lori pointed out work; Can't cause tests that previously passed to fail. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2445
https://github.com/psi4/psi4/pull/2446:629,Availability,failure,failure,629,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; fixes a couple full tests. with these and the ones Jonathon fixed, full tests should be clean again. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] the nbody-vmfc-hessian has one element of value 0.85 above reference by 1.2e-8 caused by adiis. not a big deal, so convcrit loosened from 1e-8 to 2e-8.; - [x] the new molden writer tests are nicely structured, but they use r_convergence=12 a lot for SCF, which doesn't tighten the criteria for SCF. so the new adiis tipped one test over the failure limit. (see below the original (r_conv=12) and tight (e_conv=12) SCF cycles w/ diis and adiis.) I've regenerated the reference molden.refs with e_convergence 12 and plain diis, then relaxed the convergence for normal running. no trouble with adiis. sound ok, @sgoodlett?; - [ ] @hokru, on the new dft_blocking_schemes test, I'm getting `OCTREE GRID POINTS:: computed value (293260.0) does not match (293259) by difference (1.0).` Is it reasonable to test for 293259 +/- 2 or so?. ```. Total Energy Delta E RMS |[F,P]|. @RHF iter SAD: -672.15146809832379 -6.72151e+02 0.00000e+00; @RHF iter 1: -672.63084564264716 -4.79378e-01 9.00814e-03 DIIS; @RHF iter 2: -672.71442224758289 -8.35766e-02 5.30043e-03 DIIS; @RHF iter 3: -672.74379684057214 -2.93746e-02 5.52535e-04 DIIS; @RHF iter 4: -672.74452788784220 -7.31047e-04 1.91489e-04 DIIS; @RHF iter 5: -672.74459677446487 -6.88866e-05 5.52833e-05 DIIS; @RHF iter 6: -672.74460689141483 -1.01169e-05 1.01025e-05 DIIS; @RHF iter 7: -672.74460730536885 -4.13954e-07 1.76374e-06 DIIS; @RHF iter 8: -672.74460731378190 -8.41305e-09 7.61045e-07 DIIS; Energy and wave function converged. @RHF iter SAD: -672.15146809832379 -6.72151e+02 0.00000e+00; @RHF iter 1: -672.63084564264716 -4.79378e-01 9.00814e-03 DIIS; @RHF iter 2: -672.71442224758289 -8.35766e-02 5.30043e-03 DIIS; @RHF iter 3: -672.74379684057214 -2.93746e-02 5",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2446
https://github.com/psi4/psi4/pull/2446:1128,Energy Efficiency,Energy,Energy,1128,"n fixed, full tests should be clean again. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] the nbody-vmfc-hessian has one element of value 0.85 above reference by 1.2e-8 caused by adiis. not a big deal, so convcrit loosened from 1e-8 to 2e-8.; - [x] the new molden writer tests are nicely structured, but they use r_convergence=12 a lot for SCF, which doesn't tighten the criteria for SCF. so the new adiis tipped one test over the failure limit. (see below the original (r_conv=12) and tight (e_conv=12) SCF cycles w/ diis and adiis.) I've regenerated the reference molden.refs with e_convergence 12 and plain diis, then relaxed the convergence for normal running. no trouble with adiis. sound ok, @sgoodlett?; - [ ] @hokru, on the new dft_blocking_schemes test, I'm getting `OCTREE GRID POINTS:: computed value (293260.0) does not match (293259) by difference (1.0).` Is it reasonable to test for 293259 +/- 2 or so?. ```. Total Energy Delta E RMS |[F,P]|. @RHF iter SAD: -672.15146809832379 -6.72151e+02 0.00000e+00; @RHF iter 1: -672.63084564264716 -4.79378e-01 9.00814e-03 DIIS; @RHF iter 2: -672.71442224758289 -8.35766e-02 5.30043e-03 DIIS; @RHF iter 3: -672.74379684057214 -2.93746e-02 5.52535e-04 DIIS; @RHF iter 4: -672.74452788784220 -7.31047e-04 1.91489e-04 DIIS; @RHF iter 5: -672.74459677446487 -6.88866e-05 5.52833e-05 DIIS; @RHF iter 6: -672.74460689141483 -1.01169e-05 1.01025e-05 DIIS; @RHF iter 7: -672.74460730536885 -4.13954e-07 1.76374e-06 DIIS; @RHF iter 8: -672.74460731378190 -8.41305e-09 7.61045e-07 DIIS; Energy and wave function converged. @RHF iter SAD: -672.15146809832379 -6.72151e+02 0.00000e+00; @RHF iter 1: -672.63084564264716 -4.79378e-01 9.00814e-03 DIIS; @RHF iter 2: -672.71442224758289 -8.35766e-02 5.30043e-03 DIIS; @RHF iter 3: -672.74379684057214 -2.93746e-02 5.52535e-04 DIIS; @RHF iter 4: -672.74452788784220 -7.31047e-04 1.91489e-04 DIIS; @RHF iter 5: -672.74459677446487 -6.88866e-05 5.52833e-0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2446
https://github.com/psi4/psi4/pull/2446:1729,Energy Efficiency,Energy,Energy,1729,"regenerated the reference molden.refs with e_convergence 12 and plain diis, then relaxed the convergence for normal running. no trouble with adiis. sound ok, @sgoodlett?; - [ ] @hokru, on the new dft_blocking_schemes test, I'm getting `OCTREE GRID POINTS:: computed value (293260.0) does not match (293259) by difference (1.0).` Is it reasonable to test for 293259 +/- 2 or so?. ```. Total Energy Delta E RMS |[F,P]|. @RHF iter SAD: -672.15146809832379 -6.72151e+02 0.00000e+00; @RHF iter 1: -672.63084564264716 -4.79378e-01 9.00814e-03 DIIS; @RHF iter 2: -672.71442224758289 -8.35766e-02 5.30043e-03 DIIS; @RHF iter 3: -672.74379684057214 -2.93746e-02 5.52535e-04 DIIS; @RHF iter 4: -672.74452788784220 -7.31047e-04 1.91489e-04 DIIS; @RHF iter 5: -672.74459677446487 -6.88866e-05 5.52833e-05 DIIS; @RHF iter 6: -672.74460689141483 -1.01169e-05 1.01025e-05 DIIS; @RHF iter 7: -672.74460730536885 -4.13954e-07 1.76374e-06 DIIS; @RHF iter 8: -672.74460731378190 -8.41305e-09 7.61045e-07 DIIS; Energy and wave function converged. @RHF iter SAD: -672.15146809832379 -6.72151e+02 0.00000e+00; @RHF iter 1: -672.63084564264716 -4.79378e-01 9.00814e-03 DIIS; @RHF iter 2: -672.71442224758289 -8.35766e-02 5.30043e-03 DIIS; @RHF iter 3: -672.74379684057214 -2.93746e-02 5.52535e-04 DIIS; @RHF iter 4: -672.74452788784220 -7.31047e-04 1.91489e-04 DIIS; @RHF iter 5: -672.74459677446487 -6.88866e-05 5.52833e-05 DIIS; @RHF iter 6: -672.74460689141483 -1.01169e-05 1.01025e-05 DIIS; @RHF iter 7: -672.74460730536885 -4.13954e-07 1.76374e-06 DIIS; @RHF iter 8: -672.74460731378190 -8.41305e-09 7.61045e-07 DIIS; @RHF iter 9: -672.74460731474380 -9.61904e-10 2.09614e-07 DIIS; @RHF iter 10: -672.74460731487704 -1.33241e-10 6.64041e-08 DIIS; @RHF iter 11: -672.74460731489182 -1.47793e-11 1.26692e-08 DIIS; @RHF iter 12: -672.74460731489194 -1.13687e-13 2.66098e-09 DIIS; @RHF iter 13: -672.74460731489341 -1.47793e-12 6.52605e-10 DIIS; @RHF iter 14: -672.74460731489307 3.41061e-13 2.24066e-10 DIIS; @RHF iter 15:",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2446
https://github.com/psi4/psi4/pull/2446:3113,Energy Efficiency,Energy,Energy,3113,6e-05 5.52833e-05 DIIS; @RHF iter 6: -672.74460689141483 -1.01169e-05 1.01025e-05 DIIS; @RHF iter 7: -672.74460730536885 -4.13954e-07 1.76374e-06 DIIS; @RHF iter 8: -672.74460731378190 -8.41305e-09 7.61045e-07 DIIS; @RHF iter 9: -672.74460731474380 -9.61904e-10 2.09614e-07 DIIS; @RHF iter 10: -672.74460731487704 -1.33241e-10 6.64041e-08 DIIS; @RHF iter 11: -672.74460731489182 -1.47793e-11 1.26692e-08 DIIS; @RHF iter 12: -672.74460731489194 -1.13687e-13 2.66098e-09 DIIS; @RHF iter 13: -672.74460731489341 -1.47793e-12 6.52605e-10 DIIS; @RHF iter 14: -672.74460731489307 3.41061e-13 2.24066e-10 DIIS; @RHF iter 15: -672.74460731489285 2.27374e-13 6.54131e-11 DIIS; @RHF iter 16: -672.74460731489262 2.27374e-13 2.00408e-11 DIIS; @RHF iter 17: -672.74460731489285 -2.27374e-13 4.36522e-12 DIIS; @RHF iter 18: -672.74460731489307 -2.27374e-13 1.26829e-12 DIIS; @RHF iter 19: -672.74460731489410 -1.02318e-12 2.71243e-13 DIIS; @RHF iter 20: -672.74460731489353 5.68434e-13 7.18233e-14 DIIS; Energy and wave function converged. @RHF iter SAD: -672.15146809832379 -6.72151e+02 0.00000e+00; @RHF iter 1: -672.63084564264716 -4.79378e-01 9.00814e-03 ADIIS/DIIS; @RHF iter 2: -672.71442224758289 -8.35766e-02 5.30043e-03 ADIIS/DIIS; @RHF iter 3: -672.74373946371918 -2.93172e-02 6.13615e-04 ADIIS/DIIS; @RHF iter 4: -672.74452727814617 -7.87814e-04 1.92071e-04 ADIIS/DIIS; @RHF iter 5: -672.74459671900468 -6.94409e-05 5.54299e-05 DIIS; @RHF iter 6: -672.74460689054501 -1.01715e-05 1.01141e-05 DIIS; @RHF iter 7: -672.74460730521071 -4.14666e-07 1.79146e-06 DIIS; @RHF iter 8: -672.74460731376098 -8.55027e-09 7.54369e-07 DIIS; Energy and wave function converged. @RHF iter SAD: -672.15146809832379 -6.72151e+02 0.00000e+00; @RHF iter 1: -672.63084564264716 -4.79378e-01 9.00814e-03 ADIIS/DIIS; @RHF iter 2: -672.71442224758289 -8.35766e-02 5.30043e-03 ADIIS/DIIS; @RHF iter 3: -672.74373946371918 -2.93172e-02 6.13615e-04 ADIIS/DIIS; @RHF iter 4: -672.74452727814617 -7.87814e-04 1.92071e-04 ADIIS/DIIS; ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2446
https://github.com/psi4/psi4/pull/2446:3746,Energy Efficiency,Energy,Energy,3746,9285 2.27374e-13 6.54131e-11 DIIS; @RHF iter 16: -672.74460731489262 2.27374e-13 2.00408e-11 DIIS; @RHF iter 17: -672.74460731489285 -2.27374e-13 4.36522e-12 DIIS; @RHF iter 18: -672.74460731489307 -2.27374e-13 1.26829e-12 DIIS; @RHF iter 19: -672.74460731489410 -1.02318e-12 2.71243e-13 DIIS; @RHF iter 20: -672.74460731489353 5.68434e-13 7.18233e-14 DIIS; Energy and wave function converged. @RHF iter SAD: -672.15146809832379 -6.72151e+02 0.00000e+00; @RHF iter 1: -672.63084564264716 -4.79378e-01 9.00814e-03 ADIIS/DIIS; @RHF iter 2: -672.71442224758289 -8.35766e-02 5.30043e-03 ADIIS/DIIS; @RHF iter 3: -672.74373946371918 -2.93172e-02 6.13615e-04 ADIIS/DIIS; @RHF iter 4: -672.74452727814617 -7.87814e-04 1.92071e-04 ADIIS/DIIS; @RHF iter 5: -672.74459671900468 -6.94409e-05 5.54299e-05 DIIS; @RHF iter 6: -672.74460689054501 -1.01715e-05 1.01141e-05 DIIS; @RHF iter 7: -672.74460730521071 -4.14666e-07 1.79146e-06 DIIS; @RHF iter 8: -672.74460731376098 -8.55027e-09 7.54369e-07 DIIS; Energy and wave function converged. @RHF iter SAD: -672.15146809832379 -6.72151e+02 0.00000e+00; @RHF iter 1: -672.63084564264716 -4.79378e-01 9.00814e-03 ADIIS/DIIS; @RHF iter 2: -672.71442224758289 -8.35766e-02 5.30043e-03 ADIIS/DIIS; @RHF iter 3: -672.74373946371918 -2.93172e-02 6.13615e-04 ADIIS/DIIS; @RHF iter 4: -672.74452727814617 -7.87814e-04 1.92071e-04 ADIIS/DIIS; @RHF iter 5: -672.74459671900468 -6.94409e-05 5.54299e-05 DIIS; @RHF iter 6: -672.74460689054501 -1.01715e-05 1.01141e-05 DIIS; @RHF iter 7: -672.74460730521071 -4.14666e-07 1.79146e-06 DIIS; @RHF iter 8: -672.74460731376098 -8.55027e-09 7.54369e-07 DIIS; @RHF iter 9: -672.74460731474016 -9.79185e-10 2.16800e-07 DIIS; @RHF iter 10: -672.74460731487568 -1.35515e-10 7.07155e-08 DIIS; @RHF iter 11: -672.74460731489148 -1.58025e-11 1.29083e-08 DIIS; @RHF iter 12: -672.74460731489262 -1.13687e-12 2.70093e-09 DIIS; @RHF iter 13: -672.74460731489307 -4.54747e-13 6.42115e-10 DIIS; @RHF iter 14: -672.74460731489330 -2.27374e-13 2.0280,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2446
https://github.com/psi4/psi4/pull/2446:5091,Energy Efficiency,Energy,Energy,5091,2.93172e-02 6.13615e-04 ADIIS/DIIS; @RHF iter 4: -672.74452727814617 -7.87814e-04 1.92071e-04 ADIIS/DIIS; @RHF iter 5: -672.74459671900468 -6.94409e-05 5.54299e-05 DIIS; @RHF iter 6: -672.74460689054501 -1.01715e-05 1.01141e-05 DIIS; @RHF iter 7: -672.74460730521071 -4.14666e-07 1.79146e-06 DIIS; @RHF iter 8: -672.74460731376098 -8.55027e-09 7.54369e-07 DIIS; Energy and wave function converged. @RHF iter SAD: -672.15146809832379 -6.72151e+02 0.00000e+00; @RHF iter 1: -672.63084564264716 -4.79378e-01 9.00814e-03 ADIIS/DIIS; @RHF iter 2: -672.71442224758289 -8.35766e-02 5.30043e-03 ADIIS/DIIS; @RHF iter 3: -672.74373946371918 -2.93172e-02 6.13615e-04 ADIIS/DIIS; @RHF iter 4: -672.74452727814617 -7.87814e-04 1.92071e-04 ADIIS/DIIS; @RHF iter 5: -672.74459671900468 -6.94409e-05 5.54299e-05 DIIS; @RHF iter 6: -672.74460689054501 -1.01715e-05 1.01141e-05 DIIS; @RHF iter 7: -672.74460730521071 -4.14666e-07 1.79146e-06 DIIS; @RHF iter 8: -672.74460731376098 -8.55027e-09 7.54369e-07 DIIS; @RHF iter 9: -672.74460731474016 -9.79185e-10 2.16800e-07 DIIS; @RHF iter 10: -672.74460731487568 -1.35515e-10 7.07155e-08 DIIS; @RHF iter 11: -672.74460731489148 -1.58025e-11 1.29083e-08 DIIS; @RHF iter 12: -672.74460731489262 -1.13687e-12 2.70093e-09 DIIS; @RHF iter 13: -672.74460731489307 -4.54747e-13 6.42115e-10 DIIS; @RHF iter 14: -672.74460731489330 -2.27374e-13 2.02808e-10 DIIS; @RHF iter 15: -672.74460731489262 6.82121e-13 6.57895e-11 DIIS; @RHF iter 16: -672.74460731489239 2.27374e-13 1.98299e-11 DIIS; @RHF iter 17: -672.74460731489273 -3.41061e-13 4.17600e-12 DIIS; @RHF iter 18: -672.74460731489296 -2.27374e-13 1.20666e-12 DIIS; @RHF iter 19: -672.74460731489376 -7.95808e-13 2.59222e-13 DIIS; Energy and wave function converged.; ```. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2446
https://github.com/psi4/psi4/pull/2446:100,Testability,test,tests,100,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; fixes a couple full tests. with these and the ones Jonathon fixed, full tests should be clean again. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] the nbody-vmfc-hessian has one element of value 0.85 above reference by 1.2e-8 caused by adiis. not a big deal, so convcrit loosened from 1e-8 to 2e-8.; - [x] the new molden writer tests are nicely structured, but they use r_convergence=12 a lot for SCF, which doesn't tighten the criteria for SCF. so the new adiis tipped one test over the failure limit. (see below the original (r_conv=12) and tight (e_conv=12) SCF cycles w/ diis and adiis.) I've regenerated the reference molden.refs with e_convergence 12 and plain diis, then relaxed the convergence for normal running. no trouble with adiis. sound ok, @sgoodlett?; - [ ] @hokru, on the new dft_blocking_schemes test, I'm getting `OCTREE GRID POINTS:: computed value (293260.0) does not match (293259) by difference (1.0).` Is it reasonable to test for 293259 +/- 2 or so?. ```. Total Energy Delta E RMS |[F,P]|. @RHF iter SAD: -672.15146809832379 -6.72151e+02 0.00000e+00; @RHF iter 1: -672.63084564264716 -4.79378e-01 9.00814e-03 DIIS; @RHF iter 2: -672.71442224758289 -8.35766e-02 5.30043e-03 DIIS; @RHF iter 3: -672.74379684057214 -2.93746e-02 5.52535e-04 DIIS; @RHF iter 4: -672.74452788784220 -7.31047e-04 1.91489e-04 DIIS; @RHF iter 5: -672.74459677446487 -6.88866e-05 5.52833e-05 DIIS; @RHF iter 6: -672.74460689141483 -1.01169e-05 1.01025e-05 DIIS; @RHF iter 7: -672.74460730536885 -4.13954e-07 1.76374e-06 DIIS; @RHF iter 8: -672.74460731378190 -8.41305e-09 7.61045e-07 DIIS; Energy and wave function converged. @RHF iter SAD: -672.15146809832379 -6.72151e+02 0.00000e+00; @RHF iter 1: -672.63084564264716 -4.79378e-01 9.00814e-03 DIIS; @RHF iter 2: -672.71442224758289 -8.35766e-02 5.30043e-03 DIIS; @RHF iter 3: -672.74379684057214 -2.93746e-02 5",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2446
https://github.com/psi4/psi4/pull/2446:152,Testability,test,tests,152,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; fixes a couple full tests. with these and the ones Jonathon fixed, full tests should be clean again. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] the nbody-vmfc-hessian has one element of value 0.85 above reference by 1.2e-8 caused by adiis. not a big deal, so convcrit loosened from 1e-8 to 2e-8.; - [x] the new molden writer tests are nicely structured, but they use r_convergence=12 a lot for SCF, which doesn't tighten the criteria for SCF. so the new adiis tipped one test over the failure limit. (see below the original (r_conv=12) and tight (e_conv=12) SCF cycles w/ diis and adiis.) I've regenerated the reference molden.refs with e_convergence 12 and plain diis, then relaxed the convergence for normal running. no trouble with adiis. sound ok, @sgoodlett?; - [ ] @hokru, on the new dft_blocking_schemes test, I'm getting `OCTREE GRID POINTS:: computed value (293260.0) does not match (293259) by difference (1.0).` Is it reasonable to test for 293259 +/- 2 or so?. ```. Total Energy Delta E RMS |[F,P]|. @RHF iter SAD: -672.15146809832379 -6.72151e+02 0.00000e+00; @RHF iter 1: -672.63084564264716 -4.79378e-01 9.00814e-03 DIIS; @RHF iter 2: -672.71442224758289 -8.35766e-02 5.30043e-03 DIIS; @RHF iter 3: -672.74379684057214 -2.93746e-02 5.52535e-04 DIIS; @RHF iter 4: -672.74452788784220 -7.31047e-04 1.91489e-04 DIIS; @RHF iter 5: -672.74459677446487 -6.88866e-05 5.52833e-05 DIIS; @RHF iter 6: -672.74460689141483 -1.01169e-05 1.01025e-05 DIIS; @RHF iter 7: -672.74460730536885 -4.13954e-07 1.76374e-06 DIIS; @RHF iter 8: -672.74460731378190 -8.41305e-09 7.61045e-07 DIIS; Energy and wave function converged. @RHF iter SAD: -672.15146809832379 -6.72151e+02 0.00000e+00; @RHF iter 1: -672.63084564264716 -4.79378e-01 9.00814e-03 DIIS; @RHF iter 2: -672.71442224758289 -8.35766e-02 5.30043e-03 DIIS; @RHF iter 3: -672.74379684057214 -2.93746e-02 5",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2446
https://github.com/psi4/psi4/pull/2446:469,Testability,test,tests,469,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; fixes a couple full tests. with these and the ones Jonathon fixed, full tests should be clean again. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] the nbody-vmfc-hessian has one element of value 0.85 above reference by 1.2e-8 caused by adiis. not a big deal, so convcrit loosened from 1e-8 to 2e-8.; - [x] the new molden writer tests are nicely structured, but they use r_convergence=12 a lot for SCF, which doesn't tighten the criteria for SCF. so the new adiis tipped one test over the failure limit. (see below the original (r_conv=12) and tight (e_conv=12) SCF cycles w/ diis and adiis.) I've regenerated the reference molden.refs with e_convergence 12 and plain diis, then relaxed the convergence for normal running. no trouble with adiis. sound ok, @sgoodlett?; - [ ] @hokru, on the new dft_blocking_schemes test, I'm getting `OCTREE GRID POINTS:: computed value (293260.0) does not match (293259) by difference (1.0).` Is it reasonable to test for 293259 +/- 2 or so?. ```. Total Energy Delta E RMS |[F,P]|. @RHF iter SAD: -672.15146809832379 -6.72151e+02 0.00000e+00; @RHF iter 1: -672.63084564264716 -4.79378e-01 9.00814e-03 DIIS; @RHF iter 2: -672.71442224758289 -8.35766e-02 5.30043e-03 DIIS; @RHF iter 3: -672.74379684057214 -2.93746e-02 5.52535e-04 DIIS; @RHF iter 4: -672.74452788784220 -7.31047e-04 1.91489e-04 DIIS; @RHF iter 5: -672.74459677446487 -6.88866e-05 5.52833e-05 DIIS; @RHF iter 6: -672.74460689141483 -1.01169e-05 1.01025e-05 DIIS; @RHF iter 7: -672.74460730536885 -4.13954e-07 1.76374e-06 DIIS; @RHF iter 8: -672.74460731378190 -8.41305e-09 7.61045e-07 DIIS; Energy and wave function converged. @RHF iter SAD: -672.15146809832379 -6.72151e+02 0.00000e+00; @RHF iter 1: -672.63084564264716 -4.79378e-01 9.00814e-03 DIIS; @RHF iter 2: -672.71442224758289 -8.35766e-02 5.30043e-03 DIIS; @RHF iter 3: -672.74379684057214 -2.93746e-02 5",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2446
https://github.com/psi4/psi4/pull/2446:615,Testability,test,test,615,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; fixes a couple full tests. with these and the ones Jonathon fixed, full tests should be clean again. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] the nbody-vmfc-hessian has one element of value 0.85 above reference by 1.2e-8 caused by adiis. not a big deal, so convcrit loosened from 1e-8 to 2e-8.; - [x] the new molden writer tests are nicely structured, but they use r_convergence=12 a lot for SCF, which doesn't tighten the criteria for SCF. so the new adiis tipped one test over the failure limit. (see below the original (r_conv=12) and tight (e_conv=12) SCF cycles w/ diis and adiis.) I've regenerated the reference molden.refs with e_convergence 12 and plain diis, then relaxed the convergence for normal running. no trouble with adiis. sound ok, @sgoodlett?; - [ ] @hokru, on the new dft_blocking_schemes test, I'm getting `OCTREE GRID POINTS:: computed value (293260.0) does not match (293259) by difference (1.0).` Is it reasonable to test for 293259 +/- 2 or so?. ```. Total Energy Delta E RMS |[F,P]|. @RHF iter SAD: -672.15146809832379 -6.72151e+02 0.00000e+00; @RHF iter 1: -672.63084564264716 -4.79378e-01 9.00814e-03 DIIS; @RHF iter 2: -672.71442224758289 -8.35766e-02 5.30043e-03 DIIS; @RHF iter 3: -672.74379684057214 -2.93746e-02 5.52535e-04 DIIS; @RHF iter 4: -672.74452788784220 -7.31047e-04 1.91489e-04 DIIS; @RHF iter 5: -672.74459677446487 -6.88866e-05 5.52833e-05 DIIS; @RHF iter 6: -672.74460689141483 -1.01169e-05 1.01025e-05 DIIS; @RHF iter 7: -672.74460730536885 -4.13954e-07 1.76374e-06 DIIS; @RHF iter 8: -672.74460731378190 -8.41305e-09 7.61045e-07 DIIS; Energy and wave function converged. @RHF iter SAD: -672.15146809832379 -6.72151e+02 0.00000e+00; @RHF iter 1: -672.63084564264716 -4.79378e-01 9.00814e-03 DIIS; @RHF iter 2: -672.71442224758289 -8.35766e-02 5.30043e-03 DIIS; @RHF iter 3: -672.74379684057214 -2.93746e-02 5",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2446
https://github.com/psi4/psi4/pull/2446:955,Testability,test,test,955,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; fixes a couple full tests. with these and the ones Jonathon fixed, full tests should be clean again. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] the nbody-vmfc-hessian has one element of value 0.85 above reference by 1.2e-8 caused by adiis. not a big deal, so convcrit loosened from 1e-8 to 2e-8.; - [x] the new molden writer tests are nicely structured, but they use r_convergence=12 a lot for SCF, which doesn't tighten the criteria for SCF. so the new adiis tipped one test over the failure limit. (see below the original (r_conv=12) and tight (e_conv=12) SCF cycles w/ diis and adiis.) I've regenerated the reference molden.refs with e_convergence 12 and plain diis, then relaxed the convergence for normal running. no trouble with adiis. sound ok, @sgoodlett?; - [ ] @hokru, on the new dft_blocking_schemes test, I'm getting `OCTREE GRID POINTS:: computed value (293260.0) does not match (293259) by difference (1.0).` Is it reasonable to test for 293259 +/- 2 or so?. ```. Total Energy Delta E RMS |[F,P]|. @RHF iter SAD: -672.15146809832379 -6.72151e+02 0.00000e+00; @RHF iter 1: -672.63084564264716 -4.79378e-01 9.00814e-03 DIIS; @RHF iter 2: -672.71442224758289 -8.35766e-02 5.30043e-03 DIIS; @RHF iter 3: -672.74379684057214 -2.93746e-02 5.52535e-04 DIIS; @RHF iter 4: -672.74452788784220 -7.31047e-04 1.91489e-04 DIIS; @RHF iter 5: -672.74459677446487 -6.88866e-05 5.52833e-05 DIIS; @RHF iter 6: -672.74460689141483 -1.01169e-05 1.01025e-05 DIIS; @RHF iter 7: -672.74460730536885 -4.13954e-07 1.76374e-06 DIIS; @RHF iter 8: -672.74460731378190 -8.41305e-09 7.61045e-07 DIIS; Energy and wave function converged. @RHF iter SAD: -672.15146809832379 -6.72151e+02 0.00000e+00; @RHF iter 1: -672.63084564264716 -4.79378e-01 9.00814e-03 DIIS; @RHF iter 2: -672.71442224758289 -8.35766e-02 5.30043e-03 DIIS; @RHF iter 3: -672.74379684057214 -2.93746e-02 5",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2446
https://github.com/psi4/psi4/pull/2446:1087,Testability,test,test,1087,"uple full tests. with these and the ones Jonathon fixed, full tests should be clean again. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] the nbody-vmfc-hessian has one element of value 0.85 above reference by 1.2e-8 caused by adiis. not a big deal, so convcrit loosened from 1e-8 to 2e-8.; - [x] the new molden writer tests are nicely structured, but they use r_convergence=12 a lot for SCF, which doesn't tighten the criteria for SCF. so the new adiis tipped one test over the failure limit. (see below the original (r_conv=12) and tight (e_conv=12) SCF cycles w/ diis and adiis.) I've regenerated the reference molden.refs with e_convergence 12 and plain diis, then relaxed the convergence for normal running. no trouble with adiis. sound ok, @sgoodlett?; - [ ] @hokru, on the new dft_blocking_schemes test, I'm getting `OCTREE GRID POINTS:: computed value (293260.0) does not match (293259) by difference (1.0).` Is it reasonable to test for 293259 +/- 2 or so?. ```. Total Energy Delta E RMS |[F,P]|. @RHF iter SAD: -672.15146809832379 -6.72151e+02 0.00000e+00; @RHF iter 1: -672.63084564264716 -4.79378e-01 9.00814e-03 DIIS; @RHF iter 2: -672.71442224758289 -8.35766e-02 5.30043e-03 DIIS; @RHF iter 3: -672.74379684057214 -2.93746e-02 5.52535e-04 DIIS; @RHF iter 4: -672.74452788784220 -7.31047e-04 1.91489e-04 DIIS; @RHF iter 5: -672.74459677446487 -6.88866e-05 5.52833e-05 DIIS; @RHF iter 6: -672.74460689141483 -1.01169e-05 1.01025e-05 DIIS; @RHF iter 7: -672.74460730536885 -4.13954e-07 1.76374e-06 DIIS; @RHF iter 8: -672.74460731378190 -8.41305e-09 7.61045e-07 DIIS; Energy and wave function converged. @RHF iter SAD: -672.15146809832379 -6.72151e+02 0.00000e+00; @RHF iter 1: -672.63084564264716 -4.79378e-01 9.00814e-03 DIIS; @RHF iter 2: -672.71442224758289 -8.35766e-02 5.30043e-03 DIIS; @RHF iter 3: -672.74379684057214 -2.93746e-02 5.52535e-04 DIIS; @RHF iter 4: -672.74452788784220 -7.31047e-04 1.91489e-04 DIIS; @RHF iter",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2446
https://github.com/psi4/psi4/pull/2446:5154,Testability,Test,Tests,5154,2.93172e-02 6.13615e-04 ADIIS/DIIS; @RHF iter 4: -672.74452727814617 -7.87814e-04 1.92071e-04 ADIIS/DIIS; @RHF iter 5: -672.74459671900468 -6.94409e-05 5.54299e-05 DIIS; @RHF iter 6: -672.74460689054501 -1.01715e-05 1.01141e-05 DIIS; @RHF iter 7: -672.74460730521071 -4.14666e-07 1.79146e-06 DIIS; @RHF iter 8: -672.74460731376098 -8.55027e-09 7.54369e-07 DIIS; Energy and wave function converged. @RHF iter SAD: -672.15146809832379 -6.72151e+02 0.00000e+00; @RHF iter 1: -672.63084564264716 -4.79378e-01 9.00814e-03 ADIIS/DIIS; @RHF iter 2: -672.71442224758289 -8.35766e-02 5.30043e-03 ADIIS/DIIS; @RHF iter 3: -672.74373946371918 -2.93172e-02 6.13615e-04 ADIIS/DIIS; @RHF iter 4: -672.74452727814617 -7.87814e-04 1.92071e-04 ADIIS/DIIS; @RHF iter 5: -672.74459671900468 -6.94409e-05 5.54299e-05 DIIS; @RHF iter 6: -672.74460689054501 -1.01715e-05 1.01141e-05 DIIS; @RHF iter 7: -672.74460730521071 -4.14666e-07 1.79146e-06 DIIS; @RHF iter 8: -672.74460731376098 -8.55027e-09 7.54369e-07 DIIS; @RHF iter 9: -672.74460731474016 -9.79185e-10 2.16800e-07 DIIS; @RHF iter 10: -672.74460731487568 -1.35515e-10 7.07155e-08 DIIS; @RHF iter 11: -672.74460731489148 -1.58025e-11 1.29083e-08 DIIS; @RHF iter 12: -672.74460731489262 -1.13687e-12 2.70093e-09 DIIS; @RHF iter 13: -672.74460731489307 -4.54747e-13 6.42115e-10 DIIS; @RHF iter 14: -672.74460731489330 -2.27374e-13 2.02808e-10 DIIS; @RHF iter 15: -672.74460731489262 6.82121e-13 6.57895e-11 DIIS; @RHF iter 16: -672.74460731489239 2.27374e-13 1.98299e-11 DIIS; @RHF iter 17: -672.74460731489273 -3.41061e-13 4.17600e-12 DIIS; @RHF iter 18: -672.74460731489296 -2.27374e-13 1.20666e-12 DIIS; @RHF iter 19: -672.74460731489376 -7.95808e-13 2.59222e-13 DIIS; Energy and wave function converged.; ```. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2446
https://github.com/psi4/psi4/pull/2446:5229,Testability,test,tests,5229,2.93172e-02 6.13615e-04 ADIIS/DIIS; @RHF iter 4: -672.74452727814617 -7.87814e-04 1.92071e-04 ADIIS/DIIS; @RHF iter 5: -672.74459671900468 -6.94409e-05 5.54299e-05 DIIS; @RHF iter 6: -672.74460689054501 -1.01715e-05 1.01141e-05 DIIS; @RHF iter 7: -672.74460730521071 -4.14666e-07 1.79146e-06 DIIS; @RHF iter 8: -672.74460731376098 -8.55027e-09 7.54369e-07 DIIS; Energy and wave function converged. @RHF iter SAD: -672.15146809832379 -6.72151e+02 0.00000e+00; @RHF iter 1: -672.63084564264716 -4.79378e-01 9.00814e-03 ADIIS/DIIS; @RHF iter 2: -672.71442224758289 -8.35766e-02 5.30043e-03 ADIIS/DIIS; @RHF iter 3: -672.74373946371918 -2.93172e-02 6.13615e-04 ADIIS/DIIS; @RHF iter 4: -672.74452727814617 -7.87814e-04 1.92071e-04 ADIIS/DIIS; @RHF iter 5: -672.74459671900468 -6.94409e-05 5.54299e-05 DIIS; @RHF iter 6: -672.74460689054501 -1.01715e-05 1.01141e-05 DIIS; @RHF iter 7: -672.74460730521071 -4.14666e-07 1.79146e-06 DIIS; @RHF iter 8: -672.74460731376098 -8.55027e-09 7.54369e-07 DIIS; @RHF iter 9: -672.74460731474016 -9.79185e-10 2.16800e-07 DIIS; @RHF iter 10: -672.74460731487568 -1.35515e-10 7.07155e-08 DIIS; @RHF iter 11: -672.74460731489148 -1.58025e-11 1.29083e-08 DIIS; @RHF iter 12: -672.74460731489262 -1.13687e-12 2.70093e-09 DIIS; @RHF iter 13: -672.74460731489307 -4.54747e-13 6.42115e-10 DIIS; @RHF iter 14: -672.74460731489330 -2.27374e-13 2.02808e-10 DIIS; @RHF iter 15: -672.74460731489262 6.82121e-13 6.57895e-11 DIIS; @RHF iter 16: -672.74460731489239 2.27374e-13 1.98299e-11 DIIS; @RHF iter 17: -672.74460731489273 -3.41061e-13 4.17600e-12 DIIS; @RHF iter 18: -672.74460731489296 -2.27374e-13 1.20666e-12 DIIS; @RHF iter 19: -672.74460731489376 -7.95808e-13 2.59222e-13 DIIS; Energy and wave function converged.; ```. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2446
https://github.com/psi4/psi4/pull/2446:5320,Testability,test,tests,5320,2.93172e-02 6.13615e-04 ADIIS/DIIS; @RHF iter 4: -672.74452727814617 -7.87814e-04 1.92071e-04 ADIIS/DIIS; @RHF iter 5: -672.74459671900468 -6.94409e-05 5.54299e-05 DIIS; @RHF iter 6: -672.74460689054501 -1.01715e-05 1.01141e-05 DIIS; @RHF iter 7: -672.74460730521071 -4.14666e-07 1.79146e-06 DIIS; @RHF iter 8: -672.74460731376098 -8.55027e-09 7.54369e-07 DIIS; Energy and wave function converged. @RHF iter SAD: -672.15146809832379 -6.72151e+02 0.00000e+00; @RHF iter 1: -672.63084564264716 -4.79378e-01 9.00814e-03 ADIIS/DIIS; @RHF iter 2: -672.71442224758289 -8.35766e-02 5.30043e-03 ADIIS/DIIS; @RHF iter 3: -672.74373946371918 -2.93172e-02 6.13615e-04 ADIIS/DIIS; @RHF iter 4: -672.74452727814617 -7.87814e-04 1.92071e-04 ADIIS/DIIS; @RHF iter 5: -672.74459671900468 -6.94409e-05 5.54299e-05 DIIS; @RHF iter 6: -672.74460689054501 -1.01715e-05 1.01141e-05 DIIS; @RHF iter 7: -672.74460730521071 -4.14666e-07 1.79146e-06 DIIS; @RHF iter 8: -672.74460731376098 -8.55027e-09 7.54369e-07 DIIS; @RHF iter 9: -672.74460731474016 -9.79185e-10 2.16800e-07 DIIS; @RHF iter 10: -672.74460731487568 -1.35515e-10 7.07155e-08 DIIS; @RHF iter 11: -672.74460731489148 -1.58025e-11 1.29083e-08 DIIS; @RHF iter 12: -672.74460731489262 -1.13687e-12 2.70093e-09 DIIS; @RHF iter 13: -672.74460731489307 -4.54747e-13 6.42115e-10 DIIS; @RHF iter 14: -672.74460731489330 -2.27374e-13 2.02808e-10 DIIS; @RHF iter 15: -672.74460731489262 6.82121e-13 6.57895e-11 DIIS; @RHF iter 16: -672.74460731489239 2.27374e-13 1.98299e-11 DIIS; @RHF iter 17: -672.74460731489273 -3.41061e-13 4.17600e-12 DIIS; @RHF iter 18: -672.74460731489296 -2.27374e-13 1.20666e-12 DIIS; @RHF iter 19: -672.74460731489376 -7.95808e-13 2.59222e-13 DIIS; Energy and wave function converged.; ```. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2446
https://github.com/psi4/psi4/pull/2447:390,Availability,ping,ping,390,"## Description; This PR fixes a docs fail caused by the previous PR in the series and also adapts a few more tests. Test `cc29` needs another adaptation, but as that will require a new psivar, I'm saving that for the next PR. This is PR 5 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. Obligatory @lothian ping for `cc` and obligatory @loriab ping for fixing the docs. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2447
https://github.com/psi4/psi4/pull/2447:427,Availability,ping,ping,427,"## Description; This PR fixes a docs fail caused by the previous PR in the series and also adapts a few more tests. Test `cc29` needs another adaptation, but as that will require a new psivar, I'm saving that for the next PR. This is PR 5 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. Obligatory @lothian ping for `cc` and obligatory @loriab ping for fixing the docs. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2447
https://github.com/psi4/psi4/pull/2447:91,Energy Efficiency,adapt,adapts,91,"## Description; This PR fixes a docs fail caused by the previous PR in the series and also adapts a few more tests. Test `cc29` needs another adaptation, but as that will require a new psivar, I'm saving that for the next PR. This is PR 5 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. Obligatory @lothian ping for `cc` and obligatory @loriab ping for fixing the docs. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2447
https://github.com/psi4/psi4/pull/2447:142,Energy Efficiency,adapt,adaptation,142,"## Description; This PR fixes a docs fail caused by the previous PR in the series and also adapts a few more tests. Test `cc29` needs another adaptation, but as that will require a new psivar, I'm saving that for the next PR. This is PR 5 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. Obligatory @lothian ping for `cc` and obligatory @loriab ping for fixing the docs. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2447
https://github.com/psi4/psi4/pull/2447:91,Modifiability,adapt,adapts,91,"## Description; This PR fixes a docs fail caused by the previous PR in the series and also adapts a few more tests. Test `cc29` needs another adaptation, but as that will require a new psivar, I'm saving that for the next PR. This is PR 5 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. Obligatory @lothian ping for `cc` and obligatory @loriab ping for fixing the docs. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2447
https://github.com/psi4/psi4/pull/2447:142,Modifiability,adapt,adaptation,142,"## Description; This PR fixes a docs fail caused by the previous PR in the series and also adapts a few more tests. Test `cc29` needs another adaptation, but as that will require a new psivar, I'm saving that for the next PR. This is PR 5 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. Obligatory @lothian ping for `cc` and obligatory @loriab ping for fixing the docs. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2447
https://github.com/psi4/psi4/pull/2447:109,Testability,test,tests,109,"## Description; This PR fixes a docs fail caused by the previous PR in the series and also adapts a few more tests. Test `cc29` needs another adaptation, but as that will require a new psivar, I'm saving that for the next PR. This is PR 5 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. Obligatory @lothian ping for `cc` and obligatory @loriab ping for fixing the docs. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2447
https://github.com/psi4/psi4/pull/2447:116,Testability,Test,Test,116,"## Description; This PR fixes a docs fail caused by the previous PR in the series and also adapts a few more tests. Test `cc29` needs another adaptation, but as that will require a new psivar, I'm saving that for the next PR. This is PR 5 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. Obligatory @lothian ping for `cc` and obligatory @loriab ping for fixing the docs. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2447
https://github.com/psi4/psi4/pull/2448:476,Safety,avoid,avoid,476,"## Description; Docs still failed even after the last PR. My current suspicion is that the problem is [this line](https://github.com/psi4/psi4/runs/5253940040?check_suite_focus=true#step:9:248), which results when [an over-active Perl scraper thinks ""LEFT-RIGHT"" is a psivar](https://github.com/psi4/psi4/blob/master/doc/sphinxman/document_psivariables.pl#L213-L224). I don't particularly feel like learning enough Perl to implement the regex properly, so we're just going to avoid it. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2448
https://github.com/psi4/psi4/pull/2448:399,Usability,learn,learning,399,"## Description; Docs still failed even after the last PR. My current suspicion is that the problem is [this line](https://github.com/psi4/psi4/runs/5253940040?check_suite_focus=true#step:9:248), which results when [an over-active Perl scraper thinks ""LEFT-RIGHT"" is a psivar](https://github.com/psi4/psi4/blob/master/doc/sphinxman/document_psivariables.pl#L213-L224). I don't particularly feel like learning enough Perl to implement the regex properly, so we're just going to avoid it. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2448
https://github.com/psi4/psi4/pull/2449:60,Availability,failure,failures,60,"## Description; This is a more elegant solution to the test failures fixed in #2445. When doing ADIIS/EDIIS, you need to solve a constrained quadratic programming problem. Hu and Yang's ADIIS paper solved the equations by doing a change of variables and throwing the problem at BFGS. Instead, I threw the constrained problem at SLSQP, which is naturally able to incorporate these constraints. All tests pass with no modifications now, and not including the variable transformation simplifies the equations. _What About Other Packages?_; PySCF follows Hu and Yang, and it isn't consistently able to solve the equations. Our friends at HORTON have [a custom solver for such problems](https://github.com/theochem/horton/blob/master/horton/meanfield/scf_ediis.py#L137-L150), but as this problem isn't positive or negative semi-definite, their solver is on the expensive side. ## Checklist; - [x] Passes `ctest` locally. Test suite will cover `pytest. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2449
https://github.com/psi4/psi4/pull/2449:240,Modifiability,variab,variables,240,"## Description; This is a more elegant solution to the test failures fixed in #2445. When doing ADIIS/EDIIS, you need to solve a constrained quadratic programming problem. Hu and Yang's ADIIS paper solved the equations by doing a change of variables and throwing the problem at BFGS. Instead, I threw the constrained problem at SLSQP, which is naturally able to incorporate these constraints. All tests pass with no modifications now, and not including the variable transformation simplifies the equations. _What About Other Packages?_; PySCF follows Hu and Yang, and it isn't consistently able to solve the equations. Our friends at HORTON have [a custom solver for such problems](https://github.com/theochem/horton/blob/master/horton/meanfield/scf_ediis.py#L137-L150), but as this problem isn't positive or negative semi-definite, their solver is on the expensive side. ## Checklist; - [x] Passes `ctest` locally. Test suite will cover `pytest. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2449
https://github.com/psi4/psi4/pull/2449:457,Modifiability,variab,variable,457,"## Description; This is a more elegant solution to the test failures fixed in #2445. When doing ADIIS/EDIIS, you need to solve a constrained quadratic programming problem. Hu and Yang's ADIIS paper solved the equations by doing a change of variables and throwing the problem at BFGS. Instead, I threw the constrained problem at SLSQP, which is naturally able to incorporate these constraints. All tests pass with no modifications now, and not including the variable transformation simplifies the equations. _What About Other Packages?_; PySCF follows Hu and Yang, and it isn't consistently able to solve the equations. Our friends at HORTON have [a custom solver for such problems](https://github.com/theochem/horton/blob/master/horton/meanfield/scf_ediis.py#L137-L150), but as this problem isn't positive or negative semi-definite, their solver is on the expensive side. ## Checklist; - [x] Passes `ctest` locally. Test suite will cover `pytest. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2449
https://github.com/psi4/psi4/pull/2449:55,Testability,test,test,55,"## Description; This is a more elegant solution to the test failures fixed in #2445. When doing ADIIS/EDIIS, you need to solve a constrained quadratic programming problem. Hu and Yang's ADIIS paper solved the equations by doing a change of variables and throwing the problem at BFGS. Instead, I threw the constrained problem at SLSQP, which is naturally able to incorporate these constraints. All tests pass with no modifications now, and not including the variable transformation simplifies the equations. _What About Other Packages?_; PySCF follows Hu and Yang, and it isn't consistently able to solve the equations. Our friends at HORTON have [a custom solver for such problems](https://github.com/theochem/horton/blob/master/horton/meanfield/scf_ediis.py#L137-L150), but as this problem isn't positive or negative semi-definite, their solver is on the expensive side. ## Checklist; - [x] Passes `ctest` locally. Test suite will cover `pytest. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2449
https://github.com/psi4/psi4/pull/2449:397,Testability,test,tests,397,"## Description; This is a more elegant solution to the test failures fixed in #2445. When doing ADIIS/EDIIS, you need to solve a constrained quadratic programming problem. Hu and Yang's ADIIS paper solved the equations by doing a change of variables and throwing the problem at BFGS. Instead, I threw the constrained problem at SLSQP, which is naturally able to incorporate these constraints. All tests pass with no modifications now, and not including the variable transformation simplifies the equations. _What About Other Packages?_; PySCF follows Hu and Yang, and it isn't consistently able to solve the equations. Our friends at HORTON have [a custom solver for such problems](https://github.com/theochem/horton/blob/master/horton/meanfield/scf_ediis.py#L137-L150), but as this problem isn't positive or negative semi-definite, their solver is on the expensive side. ## Checklist; - [x] Passes `ctest` locally. Test suite will cover `pytest. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2449
https://github.com/psi4/psi4/pull/2449:916,Testability,Test,Test,916,"## Description; This is a more elegant solution to the test failures fixed in #2445. When doing ADIIS/EDIIS, you need to solve a constrained quadratic programming problem. Hu and Yang's ADIIS paper solved the equations by doing a change of variables and throwing the problem at BFGS. Instead, I threw the constrained problem at SLSQP, which is naturally able to incorporate these constraints. All tests pass with no modifications now, and not including the variable transformation simplifies the equations. _What About Other Packages?_; PySCF follows Hu and Yang, and it isn't consistently able to solve the equations. Our friends at HORTON have [a custom solver for such problems](https://github.com/theochem/horton/blob/master/horton/meanfield/scf_ediis.py#L137-L150), but as this problem isn't positive or negative semi-definite, their solver is on the expensive side. ## Checklist; - [x] Passes `ctest` locally. Test suite will cover `pytest. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2449
https://github.com/psi4/psi4/pull/2449:481,Usability,simpl,simplifies,481,"## Description; This is a more elegant solution to the test failures fixed in #2445. When doing ADIIS/EDIIS, you need to solve a constrained quadratic programming problem. Hu and Yang's ADIIS paper solved the equations by doing a change of variables and throwing the problem at BFGS. Instead, I threw the constrained problem at SLSQP, which is naturally able to incorporate these constraints. All tests pass with no modifications now, and not including the variable transformation simplifies the equations. _What About Other Packages?_; PySCF follows Hu and Yang, and it isn't consistently able to solve the equations. Our friends at HORTON have [a custom solver for such problems](https://github.com/theochem/horton/blob/master/horton/meanfield/scf_ediis.py#L137-L150), but as this problem isn't positive or negative semi-definite, their solver is on the expensive side. ## Checklist; - [x] Passes `ctest` locally. Test suite will cover `pytest. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2449
https://github.com/psi4/psi4/pull/2450:34,Availability,error,error,34,"## Description; Closes #2310 - an error message is more helpful than a segfault, in my opinion. ## Checklist; - [x] Tests added for any newly trapped keywords; - [x] cc test still pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2450
https://github.com/psi4/psi4/pull/2450:40,Integrability,message,message,40,"## Description; Closes #2310 - an error message is more helpful than a segfault, in my opinion. ## Checklist; - [x] Tests added for any newly trapped keywords; - [x] cc test still pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2450
https://github.com/psi4/psi4/pull/2450:116,Testability,Test,Tests,116,"## Description; Closes #2310 - an error message is more helpful than a segfault, in my opinion. ## Checklist; - [x] Tests added for any newly trapped keywords; - [x] cc test still pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2450
https://github.com/psi4/psi4/pull/2450:169,Testability,test,test,169,"## Description; Closes #2310 - an error message is more helpful than a segfault, in my opinion. ## Checklist; - [x] Tests added for any newly trapped keywords; - [x] cc test still pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2450
https://github.com/psi4/psi4/pull/2451:412,Availability,ping,ping,412,"## Description; This PR adds a new psivar for the length gauge origin-dependence of the specific rotation, to aid in migration of the CC tests. `cc29` now tests this psivar. Once the psivar is accepted, I can resume porting tests over. This is PR 6 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. Obligatory @lothian and @loriab ping for new `cc` psivars. For TDC's benefit, you can go to the ""Files changed"" tab, ""Review changes"", and then mark to approve if things look good to you. ## Checklist; - [x] Newly added psivar is tested. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2451
https://github.com/psi4/psi4/pull/2451:70,Integrability,depend,dependence,70,"## Description; This PR adds a new psivar for the length gauge origin-dependence of the specific rotation, to aid in migration of the CC tests. `cc29` now tests this psivar. Once the psivar is accepted, I can resume porting tests over. This is PR 6 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. Obligatory @lothian and @loriab ping for new `cc` psivars. For TDC's benefit, you can go to the ""Files changed"" tab, ""Review changes"", and then mark to approve if things look good to you. ## Checklist; - [x] Newly added psivar is tested. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2451
https://github.com/psi4/psi4/pull/2451:137,Testability,test,tests,137,"## Description; This PR adds a new psivar for the length gauge origin-dependence of the specific rotation, to aid in migration of the CC tests. `cc29` now tests this psivar. Once the psivar is accepted, I can resume porting tests over. This is PR 6 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. Obligatory @lothian and @loriab ping for new `cc` psivars. For TDC's benefit, you can go to the ""Files changed"" tab, ""Review changes"", and then mark to approve if things look good to you. ## Checklist; - [x] Newly added psivar is tested. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2451
https://github.com/psi4/psi4/pull/2451:155,Testability,test,tests,155,"## Description; This PR adds a new psivar for the length gauge origin-dependence of the specific rotation, to aid in migration of the CC tests. `cc29` now tests this psivar. Once the psivar is accepted, I can resume porting tests over. This is PR 6 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. Obligatory @lothian and @loriab ping for new `cc` psivars. For TDC's benefit, you can go to the ""Files changed"" tab, ""Review changes"", and then mark to approve if things look good to you. ## Checklist; - [x] Newly added psivar is tested. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2451
https://github.com/psi4/psi4/pull/2451:224,Testability,test,tests,224,"## Description; This PR adds a new psivar for the length gauge origin-dependence of the specific rotation, to aid in migration of the CC tests. `cc29` now tests this psivar. Once the psivar is accepted, I can resume porting tests over. This is PR 6 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. Obligatory @lothian and @loriab ping for new `cc` psivars. For TDC's benefit, you can go to the ""Files changed"" tab, ""Review changes"", and then mark to approve if things look good to you. ## Checklist; - [x] Newly added psivar is tested. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2451
https://github.com/psi4/psi4/pull/2451:610,Testability,test,tested,610,"## Description; This PR adds a new psivar for the length gauge origin-dependence of the specific rotation, to aid in migration of the CC tests. `cc29` now tests this psivar. Once the psivar is accepted, I can resume porting tests over. This is PR 6 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. Obligatory @lothian and @loriab ping for new `cc` psivars. For TDC's benefit, you can go to the ""Files changed"" tab, ""Review changes"", and then mark to approve if things look good to you. ## Checklist; - [x] Newly added psivar is tested. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2451
https://github.com/psi4/psi4/pull/2451:209,Usability,resume,resume,209,"## Description; This PR adds a new psivar for the length gauge origin-dependence of the specific rotation, to aid in migration of the CC tests. `cc29` now tests this psivar. Once the psivar is accepted, I can resume porting tests over. This is PR 6 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. Obligatory @lothian and @loriab ping for new `cc` psivars. For TDC's benefit, you can go to the ""Files changed"" tab, ""Review changes"", and then mark to approve if things look good to you. ## Checklist; - [x] Newly added psivar is tested. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2451
https://github.com/psi4/psi4/issues/2452:336,Availability,error,error,336,"I found a typo, while reviewing the code for tdscf_excitations. I did not reproduce an issue. I found the typo before actually using the code (therefore no formal bug report). ; ""LEFT EIGENVECTOR ALPHA"" is exported wrong; it holds the value of ""LEFT EIGENVECTOR BETA"".; The correct value of ""LEFT EIGENVECTOR ALPHA"" is overwritten. The error should be in:; https://github.com/psi4/psi4/blob/75ae6967d25db377cce83524ae16b348685d50d0/psi4/driver/procrouting/response/scf_response.py#L785. The line should read BETA. I will send a pull request very soon, which fixes this.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2452
https://github.com/psi4/psi4/pull/2453:176,Testability,test,tests,176,"## Description; This fixes #2452. I export the correct value TD-LEFT EIGENVECTOR BETA and do not overwrite TD-LEFT EIGENVECTOR ALPHA anymore. ## Checklist; I did not rerun the tests, as the fix is trivial. I did not find pre-existing unittests referencing TD-LEFT EIGENVECTOR ALPHA or TD-LEFT EIGENVECTOR BETA. ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2453
https://github.com/psi4/psi4/pull/2454:6149,Availability,avail,available,6149,"ance for all the compare_* fns and added to docs.; - [x] light updating of user testing docs in build_planning.rst. - Misc.; - [x] improved `psi4.extras()` printing so you know what you're missing: `['adcc', 'ambit', 'c̶c̶t̶3̶', ...`; - [x] fixed some FutureWarnings like replacing `set_module_options`; - [x] added ""maxeco"" conda env files to devtools/ for each platform for developers/users who prefer those to psi4-dev conda package. they were generated from the ecosystem GHA but not autoupdated -- that may happen in a future GHA from master; - [x] added passing `CMAKE_OSX_DEPLOYMENT_TARGET` and `CMAKE_OSX_SYSROOT` cmakevars to internal builds. this is how the macOS SDK gets passed through, apparently, for C/C++. it happens through `CMAKE_Fortran_FLAGS` for Fortran. proven necessary for v2rdm_casscf, so I rolled it out to all the compiled externals.; - [x] for ambit, added Python and pb11 cmakevars that are proper for the new de-boosted and new-python-searched version. left old (capital PYTHON) for now. ## Questions; - [ ] PR is mostly CI, so non-user-facing, and testing supplements, so non-user-changing. But it requires cutting-edge pytest 7 (released Dec 2021) available from conda c-f and pypi, not from conda defaults yet. ok to demand of users? most aren't running pytests I would guess.; - [ ] In documenting psi4 compare functions, have to autodoc qcel compare fn, and that shows up a circular import in forward declaration of types (bet you didn't think that would be a sentence applied to Python 5 years ago) that produces a Sphinx warning. I've figured out how to edit qcel to avoid this, but until that makes its way into a release, we may have to turn off warnings-as-errors in psi4 docs build. ok?. close #1708. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge !SQUASH!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454
https://github.com/psi4/psi4/pull/2454:6666,Availability,error,errors,6666,"ance for all the compare_* fns and added to docs.; - [x] light updating of user testing docs in build_planning.rst. - Misc.; - [x] improved `psi4.extras()` printing so you know what you're missing: `['adcc', 'ambit', 'c̶c̶t̶3̶', ...`; - [x] fixed some FutureWarnings like replacing `set_module_options`; - [x] added ""maxeco"" conda env files to devtools/ for each platform for developers/users who prefer those to psi4-dev conda package. they were generated from the ecosystem GHA but not autoupdated -- that may happen in a future GHA from master; - [x] added passing `CMAKE_OSX_DEPLOYMENT_TARGET` and `CMAKE_OSX_SYSROOT` cmakevars to internal builds. this is how the macOS SDK gets passed through, apparently, for C/C++. it happens through `CMAKE_Fortran_FLAGS` for Fortran. proven necessary for v2rdm_casscf, so I rolled it out to all the compiled externals.; - [x] for ambit, added Python and pb11 cmakevars that are proper for the new de-boosted and new-python-searched version. left old (capital PYTHON) for now. ## Questions; - [ ] PR is mostly CI, so non-user-facing, and testing supplements, so non-user-changing. But it requires cutting-edge pytest 7 (released Dec 2021) available from conda c-f and pypi, not from conda defaults yet. ok to demand of users? most aren't running pytests I would guess.; - [ ] In documenting psi4 compare functions, have to autodoc qcel compare fn, and that shows up a circular import in forward declaration of types (bet you didn't think that would be a sentence applied to Python 5 years ago) that produces a Sphinx warning. I've figured out how to edit qcel to avoid this, but until that makes its way into a release, we may have to turn off warnings-as-errors in psi4 docs build. ok?. close #1708. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge !SQUASH!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454
https://github.com/psi4/psi4/pull/2454:163,Deployability,install,install,163,"## Description; Psi4 ecosystem is growing (good) and spreading (good, b/c psi4 channel isn't a natural home for openfermion, for instance; bad, b/c it's harder to install/test/keep-track-of everything at once). The initial scope of this PR was to set up a GHA that tested as many addons as conda could lay its hands on. Other stuff happened along the way ... ### Highlights for review (link permanence questionable); - [.github/workflows/README.md](https://github.com/psi4/psi4/pull/2454/files#diff-636942e0afa55e1aea027fb857aa2c6046858fb317c0b9a4f12ff3ca17e64ffb); - [.github/workflows/ecosystem.yml](https://github.com/psi4/psi4/pull/2454/files#diff-9886b1fe077112c3a9952964ed992dc3cd38b48d0a506a6b7a00241e4669d2b1); - [doc/sphinxman/source/add_tests.rst](https://github.com/psi4/psi4/pull/2454/files#diff-c35e937cac108347811127c527ab39f06b064d399a1eced0714ecdc47d954058); - representative; - [tests/tu1-h2o-energy/test_input.py](https://github.com/psi4/psi4/pull/2454/files#diff-54403c03174a7c69742c46e5553bf1ba9f7d4b855c649eae56ffb0662a0ba50e); - [tests/adcc/formaldehyde-pe-adc1/test_input.py](https://github.com/psi4/psi4/pull/2454/files#diff-58c0e6c9056f03a206a5b10c17a465c7931c41d6a9c6c8d7e434adca515084d0); - if you want to read testing docstrings [psi4/driver/p4util/testing.py](https://github.com/psi4/psi4/pull/2454/files#diff-7104dfa29c684b4211ecc2cc6e77479d18570fdadc5a67951d3442e45f462d89); - if you want to read testing code [tests/pytests/addons.py](https://github.com/psi4/psi4/pull/2454/files#diff-93c9a8823b9fa2f85a114c39cd0d17d6c66e4cb93aa00189785ff8040d3169b3). ## Todos. - CI; - [x] read [.github/workflows/README.md](https://github.com/psi4/psi4/pull/2454/files#diff-636942e0afa55e1aea027fb857aa2c6046858fb317c0b9a4f12ff3ca17e64ffb); - [x] current readings are below (fail/pass/skip/uncollected/xfail/xpass/warnings) for `pytest -m ""addon and not long""`; - L: -/244/ 10/3229/4/4/303; - M: -/229/ 25/3229/6/2/304; - W: -/144/112/3229/2/4/303; - skipped on Linux are things like ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454
https://github.com/psi4/psi4/pull/2454:2396,Deployability,pipeline,pipelines,2396,"8570fdadc5a67951d3442e45f462d89); - if you want to read testing code [tests/pytests/addons.py](https://github.com/psi4/psi4/pull/2454/files#diff-93c9a8823b9fa2f85a114c39cd0d17d6c66e4cb93aa00189785ff8040d3169b3). ## Todos. - CI; - [x] read [.github/workflows/README.md](https://github.com/psi4/psi4/pull/2454/files#diff-636942e0afa55e1aea027fb857aa2c6046858fb317c0b9a4f12ff3ca17e64ffb); - [x] current readings are below (fail/pass/skip/uncollected/xfail/xpass/warnings) for `pytest -m ""addon and not long""`; - L: -/244/ 10/3229/4/4/303; - M: -/229/ 25/3229/6/2/304; - W: -/144/112/3229/2/4/303; - skipped on Linux are things like gpu_dfcc (needs gpus), mrcc (proprietary), cct3 (no package), fock-ci (apparently I packaged the wrong thing); - [ ] there's an unresolved issue on macOS where with Py39 adcc shows pulled from pypi but it tests fine. with Py310, adcc and others pulled from pypi and it doesn't get found for testing. leaving at Py39 for now, but mysterious; - [ ] I haven't removed all the addons from the Azure pipelines yet but I can if everyone comfortable. - Testing Strategy; - [x] `ctest` is familiar, easy to read, and doesn't require configuration. on the other hand, it can't test installations, it can't do parameterizations, and by passing through TestingMacros and runtest.py, you can't always pass environment info into it. Don't worry, it's staying exactly as it is. I've added a single short file to several ctest directories ...; - [x] moved `setup.cfg` to `pytest.ini` and install it. only pytest was using the setup.cfg file anyways. all labels (things you can `pytest -m quick` akin to `ctest -L quick`) are stored here instead of duplicated btwn setup.cfg and conftest.py. The GHA will complain if you hit unregistered label.; - [x] changed the pytest import_mode from default to ""importlib"". this means (1) we don't need to have empty `__init__.py` in all 500 ctest directories and (2) avoid name conflicts when collecting ctests. Result is that tests/pytests is no l",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454
https://github.com/psi4/psi4/pull/2454:2526,Deployability,configurat,configuration,2526,"si4/pull/2454/files#diff-93c9a8823b9fa2f85a114c39cd0d17d6c66e4cb93aa00189785ff8040d3169b3). ## Todos. - CI; - [x] read [.github/workflows/README.md](https://github.com/psi4/psi4/pull/2454/files#diff-636942e0afa55e1aea027fb857aa2c6046858fb317c0b9a4f12ff3ca17e64ffb); - [x] current readings are below (fail/pass/skip/uncollected/xfail/xpass/warnings) for `pytest -m ""addon and not long""`; - L: -/244/ 10/3229/4/4/303; - M: -/229/ 25/3229/6/2/304; - W: -/144/112/3229/2/4/303; - skipped on Linux are things like gpu_dfcc (needs gpus), mrcc (proprietary), cct3 (no package), fock-ci (apparently I packaged the wrong thing); - [ ] there's an unresolved issue on macOS where with Py39 adcc shows pulled from pypi but it tests fine. with Py310, adcc and others pulled from pypi and it doesn't get found for testing. leaving at Py39 for now, but mysterious; - [ ] I haven't removed all the addons from the Azure pipelines yet but I can if everyone comfortable. - Testing Strategy; - [x] `ctest` is familiar, easy to read, and doesn't require configuration. on the other hand, it can't test installations, it can't do parameterizations, and by passing through TestingMacros and runtest.py, you can't always pass environment info into it. Don't worry, it's staying exactly as it is. I've added a single short file to several ctest directories ...; - [x] moved `setup.cfg` to `pytest.ini` and install it. only pytest was using the setup.cfg file anyways. all labels (things you can `pytest -m quick` akin to `ctest -L quick`) are stored here instead of duplicated btwn setup.cfg and conftest.py. The GHA will complain if you hit unregistered label.; - [x] changed the pytest import_mode from default to ""importlib"". this means (1) we don't need to have empty `__init__.py` in all 500 ctest directories and (2) avoid name conflicts when collecting ctests. Result is that tests/pytests is no longer a module, so a lot of the `from .utils import ...` become `from utils import ...` etc. Those names are looking gen",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454
https://github.com/psi4/psi4/pull/2454:2574,Deployability,install,installations,2574,"] read [.github/workflows/README.md](https://github.com/psi4/psi4/pull/2454/files#diff-636942e0afa55e1aea027fb857aa2c6046858fb317c0b9a4f12ff3ca17e64ffb); - [x] current readings are below (fail/pass/skip/uncollected/xfail/xpass/warnings) for `pytest -m ""addon and not long""`; - L: -/244/ 10/3229/4/4/303; - M: -/229/ 25/3229/6/2/304; - W: -/144/112/3229/2/4/303; - skipped on Linux are things like gpu_dfcc (needs gpus), mrcc (proprietary), cct3 (no package), fock-ci (apparently I packaged the wrong thing); - [ ] there's an unresolved issue on macOS where with Py39 adcc shows pulled from pypi but it tests fine. with Py310, adcc and others pulled from pypi and it doesn't get found for testing. leaving at Py39 for now, but mysterious; - [ ] I haven't removed all the addons from the Azure pipelines yet but I can if everyone comfortable. - Testing Strategy; - [x] `ctest` is familiar, easy to read, and doesn't require configuration. on the other hand, it can't test installations, it can't do parameterizations, and by passing through TestingMacros and runtest.py, you can't always pass environment info into it. Don't worry, it's staying exactly as it is. I've added a single short file to several ctest directories ...; - [x] moved `setup.cfg` to `pytest.ini` and install it. only pytest was using the setup.cfg file anyways. all labels (things you can `pytest -m quick` akin to `ctest -L quick`) are stored here instead of duplicated btwn setup.cfg and conftest.py. The GHA will complain if you hit unregistered label.; - [x] changed the pytest import_mode from default to ""importlib"". this means (1) we don't need to have empty `__init__.py` in all 500 ctest directories and (2) avoid name conflicts when collecting ctests. Result is that tests/pytests is no longer a module, so a lot of the `from .utils import ...` become `from utils import ...` etc. Those names are looking generic, so may need to rename in future. - Testing Details; - [x] in tests, rewrote `using(package)` function whose",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454
https://github.com/psi4/psi4/pull/2454:2874,Deployability,install,install,2874,"""`; - L: -/244/ 10/3229/4/4/303; - M: -/229/ 25/3229/6/2/304; - W: -/144/112/3229/2/4/303; - skipped on Linux are things like gpu_dfcc (needs gpus), mrcc (proprietary), cct3 (no package), fock-ci (apparently I packaged the wrong thing); - [ ] there's an unresolved issue on macOS where with Py39 adcc shows pulled from pypi but it tests fine. with Py310, adcc and others pulled from pypi and it doesn't get found for testing. leaving at Py39 for now, but mysterious; - [ ] I haven't removed all the addons from the Azure pipelines yet but I can if everyone comfortable. - Testing Strategy; - [x] `ctest` is familiar, easy to read, and doesn't require configuration. on the other hand, it can't test installations, it can't do parameterizations, and by passing through TestingMacros and runtest.py, you can't always pass environment info into it. Don't worry, it's staying exactly as it is. I've added a single short file to several ctest directories ...; - [x] moved `setup.cfg` to `pytest.ini` and install it. only pytest was using the setup.cfg file anyways. all labels (things you can `pytest -m quick` akin to `ctest -L quick`) are stored here instead of duplicated btwn setup.cfg and conftest.py. The GHA will complain if you hit unregistered label.; - [x] changed the pytest import_mode from default to ""importlib"". this means (1) we don't need to have empty `__init__.py` in all 500 ctest directories and (2) avoid name conflicts when collecting ctests. Result is that tests/pytests is no longer a module, so a lot of the `from .utils import ...` become `from utils import ...` etc. Those names are looking generic, so may need to rename in future. - Testing Details; - [x] in tests, rewrote `using(package)` function whose role is to detect whether package present and skip test otherwise. now the fn additionally adds ""addon"" label and the name of the package label, so one can run `pytest -m dftd3`. to do this, had to separate into two fns: `uusing` for nested decorator marks and `using` ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454
https://github.com/psi4/psi4/pull/2454:4221,Deployability,install,install,4221,"is means (1) we don't need to have empty `__init__.py` in all 500 ctest directories and (2) avoid name conflicts when collecting ctests. Result is that tests/pytests is no longer a module, so a lot of the `from .utils import ...` become `from utils import ...` etc. Those names are looking generic, so may need to rename in future. - Testing Details; - [x] in tests, rewrote `using(package)` function whose role is to detect whether package present and skip test otherwise. now the fn additionally adds ""addon"" label and the name of the package label, so one can run `pytest -m dftd3`. to do this, had to separate into two fns: `uusing` for nested decorator marks and `using` for list marks.; - [x] to avoid FutureWarning, changed three `distutils.dir_util.copy_tree` into `shutil.copytree`. this is a py38 language feature, the first actual breaking of py37+ compatibility.; - [x] added the openfermion demo as test; - [x] apparently 3body in dftd3 fails on Mac. near-term goal is replacing, so skip for now; - [x] newly install pytest.ini and install any test_input.py, input.dat, and input.py from tests/ . sensibly, input.dat/py would only get installed if test_input.py present, but I can't teach cmake that logic, so it's either this or have to register each pytest-prepared psithon test. aux files from tests/ are also installed but these have to be registered with cmake.; - [x] moved `compare_moldenfiles()` from testing code to driver alongside `compare_fchkfiles()` so that it can be documented.; - [x] ""psi"" and ""api"" marks added to all tests/pytests/ files for reasons explained in docs. - Docs; - [x] Updated the add_tests documentation, esp. wrt pytest; - [x] Might have done enough of the outline to close #2396 ; - [x] Straightened out docstring inheritance for all the compare_* fns and added to docs.; - [x] light updating of user testing docs in build_planning.rst. - Misc.; - [x] improved `psi4.extras()` printing so you know what you're missing: `['adcc', 'ambit', 'c̶c̶t̶3̶', .",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454
https://github.com/psi4/psi4/pull/2454:4244,Deployability,install,install,4244,"y` in all 500 ctest directories and (2) avoid name conflicts when collecting ctests. Result is that tests/pytests is no longer a module, so a lot of the `from .utils import ...` become `from utils import ...` etc. Those names are looking generic, so may need to rename in future. - Testing Details; - [x] in tests, rewrote `using(package)` function whose role is to detect whether package present and skip test otherwise. now the fn additionally adds ""addon"" label and the name of the package label, so one can run `pytest -m dftd3`. to do this, had to separate into two fns: `uusing` for nested decorator marks and `using` for list marks.; - [x] to avoid FutureWarning, changed three `distutils.dir_util.copy_tree` into `shutil.copytree`. this is a py38 language feature, the first actual breaking of py37+ compatibility.; - [x] added the openfermion demo as test; - [x] apparently 3body in dftd3 fails on Mac. near-term goal is replacing, so skip for now; - [x] newly install pytest.ini and install any test_input.py, input.dat, and input.py from tests/ . sensibly, input.dat/py would only get installed if test_input.py present, but I can't teach cmake that logic, so it's either this or have to register each pytest-prepared psithon test. aux files from tests/ are also installed but these have to be registered with cmake.; - [x] moved `compare_moldenfiles()` from testing code to driver alongside `compare_fchkfiles()` so that it can be documented.; - [x] ""psi"" and ""api"" marks added to all tests/pytests/ files for reasons explained in docs. - Docs; - [x] Updated the add_tests documentation, esp. wrt pytest; - [x] Might have done enough of the outline to close #2396 ; - [x] Straightened out docstring inheritance for all the compare_* fns and added to docs.; - [x] light updating of user testing docs in build_planning.rst. - Misc.; - [x] improved `psi4.extras()` printing so you know what you're missing: `['adcc', 'ambit', 'c̶c̶t̶3̶', ...`; - [x] fixed some FutureWarnings like replacing `",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454
https://github.com/psi4/psi4/pull/2454:4347,Deployability,install,installed,4347,"at tests/pytests is no longer a module, so a lot of the `from .utils import ...` become `from utils import ...` etc. Those names are looking generic, so may need to rename in future. - Testing Details; - [x] in tests, rewrote `using(package)` function whose role is to detect whether package present and skip test otherwise. now the fn additionally adds ""addon"" label and the name of the package label, so one can run `pytest -m dftd3`. to do this, had to separate into two fns: `uusing` for nested decorator marks and `using` for list marks.; - [x] to avoid FutureWarning, changed three `distutils.dir_util.copy_tree` into `shutil.copytree`. this is a py38 language feature, the first actual breaking of py37+ compatibility.; - [x] added the openfermion demo as test; - [x] apparently 3body in dftd3 fails on Mac. near-term goal is replacing, so skip for now; - [x] newly install pytest.ini and install any test_input.py, input.dat, and input.py from tests/ . sensibly, input.dat/py would only get installed if test_input.py present, but I can't teach cmake that logic, so it's either this or have to register each pytest-prepared psithon test. aux files from tests/ are also installed but these have to be registered with cmake.; - [x] moved `compare_moldenfiles()` from testing code to driver alongside `compare_fchkfiles()` so that it can be documented.; - [x] ""psi"" and ""api"" marks added to all tests/pytests/ files for reasons explained in docs. - Docs; - [x] Updated the add_tests documentation, esp. wrt pytest; - [x] Might have done enough of the outline to close #2396 ; - [x] Straightened out docstring inheritance for all the compare_* fns and added to docs.; - [x] light updating of user testing docs in build_planning.rst. - Misc.; - [x] improved `psi4.extras()` printing so you know what you're missing: `['adcc', 'ambit', 'c̶c̶t̶3̶', ...`; - [x] fixed some FutureWarnings like replacing `set_module_options`; - [x] added ""maxeco"" conda env files to devtools/ for each platform for dev",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454
https://github.com/psi4/psi4/pull/2454:4525,Deployability,install,installed,4525,"sting Details; - [x] in tests, rewrote `using(package)` function whose role is to detect whether package present and skip test otherwise. now the fn additionally adds ""addon"" label and the name of the package label, so one can run `pytest -m dftd3`. to do this, had to separate into two fns: `uusing` for nested decorator marks and `using` for list marks.; - [x] to avoid FutureWarning, changed three `distutils.dir_util.copy_tree` into `shutil.copytree`. this is a py38 language feature, the first actual breaking of py37+ compatibility.; - [x] added the openfermion demo as test; - [x] apparently 3body in dftd3 fails on Mac. near-term goal is replacing, so skip for now; - [x] newly install pytest.ini and install any test_input.py, input.dat, and input.py from tests/ . sensibly, input.dat/py would only get installed if test_input.py present, but I can't teach cmake that logic, so it's either this or have to register each pytest-prepared psithon test. aux files from tests/ are also installed but these have to be registered with cmake.; - [x] moved `compare_moldenfiles()` from testing code to driver alongside `compare_fchkfiles()` so that it can be documented.; - [x] ""psi"" and ""api"" marks added to all tests/pytests/ files for reasons explained in docs. - Docs; - [x] Updated the add_tests documentation, esp. wrt pytest; - [x] Might have done enough of the outline to close #2396 ; - [x] Straightened out docstring inheritance for all the compare_* fns and added to docs.; - [x] light updating of user testing docs in build_planning.rst. - Misc.; - [x] improved `psi4.extras()` printing so you know what you're missing: `['adcc', 'ambit', 'c̶c̶t̶3̶', ...`; - [x] fixed some FutureWarnings like replacing `set_module_options`; - [x] added ""maxeco"" conda env files to devtools/ for each platform for developers/users who prefer those to psi4-dev conda package. they were generated from the ecosystem GHA but not autoupdated -- that may happen in a future GHA from master; - [x] added passing",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454
https://github.com/psi4/psi4/pull/2454:4814,Deployability,Update,Updated,4814,"`uusing` for nested decorator marks and `using` for list marks.; - [x] to avoid FutureWarning, changed three `distutils.dir_util.copy_tree` into `shutil.copytree`. this is a py38 language feature, the first actual breaking of py37+ compatibility.; - [x] added the openfermion demo as test; - [x] apparently 3body in dftd3 fails on Mac. near-term goal is replacing, so skip for now; - [x] newly install pytest.ini and install any test_input.py, input.dat, and input.py from tests/ . sensibly, input.dat/py would only get installed if test_input.py present, but I can't teach cmake that logic, so it's either this or have to register each pytest-prepared psithon test. aux files from tests/ are also installed but these have to be registered with cmake.; - [x] moved `compare_moldenfiles()` from testing code to driver alongside `compare_fchkfiles()` so that it can be documented.; - [x] ""psi"" and ""api"" marks added to all tests/pytests/ files for reasons explained in docs. - Docs; - [x] Updated the add_tests documentation, esp. wrt pytest; - [x] Might have done enough of the outline to close #2396 ; - [x] Straightened out docstring inheritance for all the compare_* fns and added to docs.; - [x] light updating of user testing docs in build_planning.rst. - Misc.; - [x] improved `psi4.extras()` printing so you know what you're missing: `['adcc', 'ambit', 'c̶c̶t̶3̶', ...`; - [x] fixed some FutureWarnings like replacing `set_module_options`; - [x] added ""maxeco"" conda env files to devtools/ for each platform for developers/users who prefer those to psi4-dev conda package. they were generated from the ecosystem GHA but not autoupdated -- that may happen in a future GHA from master; - [x] added passing `CMAKE_OSX_DEPLOYMENT_TARGET` and `CMAKE_OSX_SYSROOT` cmakevars to internal builds. this is how the macOS SDK gets passed through, apparently, for C/C++. it happens through `CMAKE_Fortran_FLAGS` for Fortran. proven necessary for v2rdm_casscf, so I rolled it out to all the compiled external",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454
https://github.com/psi4/psi4/pull/2454:6130,Deployability,release,released,6130,"ance for all the compare_* fns and added to docs.; - [x] light updating of user testing docs in build_planning.rst. - Misc.; - [x] improved `psi4.extras()` printing so you know what you're missing: `['adcc', 'ambit', 'c̶c̶t̶3̶', ...`; - [x] fixed some FutureWarnings like replacing `set_module_options`; - [x] added ""maxeco"" conda env files to devtools/ for each platform for developers/users who prefer those to psi4-dev conda package. they were generated from the ecosystem GHA but not autoupdated -- that may happen in a future GHA from master; - [x] added passing `CMAKE_OSX_DEPLOYMENT_TARGET` and `CMAKE_OSX_SYSROOT` cmakevars to internal builds. this is how the macOS SDK gets passed through, apparently, for C/C++. it happens through `CMAKE_Fortran_FLAGS` for Fortran. proven necessary for v2rdm_casscf, so I rolled it out to all the compiled externals.; - [x] for ambit, added Python and pb11 cmakevars that are proper for the new de-boosted and new-python-searched version. left old (capital PYTHON) for now. ## Questions; - [ ] PR is mostly CI, so non-user-facing, and testing supplements, so non-user-changing. But it requires cutting-edge pytest 7 (released Dec 2021) available from conda c-f and pypi, not from conda defaults yet. ok to demand of users? most aren't running pytests I would guess.; - [ ] In documenting psi4 compare functions, have to autodoc qcel compare fn, and that shows up a circular import in forward declaration of types (bet you didn't think that would be a sentence applied to Python 5 years ago) that produces a Sphinx warning. I've figured out how to edit qcel to avoid this, but until that makes its way into a release, we may have to turn off warnings-as-errors in psi4 docs build. ok?. close #1708. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge !SQUASH!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454
https://github.com/psi4/psi4/pull/2454:6621,Deployability,release,release,6621,"ance for all the compare_* fns and added to docs.; - [x] light updating of user testing docs in build_planning.rst. - Misc.; - [x] improved `psi4.extras()` printing so you know what you're missing: `['adcc', 'ambit', 'c̶c̶t̶3̶', ...`; - [x] fixed some FutureWarnings like replacing `set_module_options`; - [x] added ""maxeco"" conda env files to devtools/ for each platform for developers/users who prefer those to psi4-dev conda package. they were generated from the ecosystem GHA but not autoupdated -- that may happen in a future GHA from master; - [x] added passing `CMAKE_OSX_DEPLOYMENT_TARGET` and `CMAKE_OSX_SYSROOT` cmakevars to internal builds. this is how the macOS SDK gets passed through, apparently, for C/C++. it happens through `CMAKE_Fortran_FLAGS` for Fortran. proven necessary for v2rdm_casscf, so I rolled it out to all the compiled externals.; - [x] for ambit, added Python and pb11 cmakevars that are proper for the new de-boosted and new-python-searched version. left old (capital PYTHON) for now. ## Questions; - [ ] PR is mostly CI, so non-user-facing, and testing supplements, so non-user-changing. But it requires cutting-edge pytest 7 (released Dec 2021) available from conda c-f and pypi, not from conda defaults yet. ok to demand of users? most aren't running pytests I would guess.; - [ ] In documenting psi4 compare functions, have to autodoc qcel compare fn, and that shows up a circular import in forward declaration of types (bet you didn't think that would be a sentence applied to Python 5 years ago) that produces a Sphinx warning. I've figured out how to edit qcel to avoid this, but until that makes its way into a release, we may have to turn off warnings-as-errors in psi4 docs build. ok?. close #1708. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge !SQUASH!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454
https://github.com/psi4/psi4/pull/2454:910,Energy Efficiency,energy,energy,910,"## Description; Psi4 ecosystem is growing (good) and spreading (good, b/c psi4 channel isn't a natural home for openfermion, for instance; bad, b/c it's harder to install/test/keep-track-of everything at once). The initial scope of this PR was to set up a GHA that tested as many addons as conda could lay its hands on. Other stuff happened along the way ... ### Highlights for review (link permanence questionable); - [.github/workflows/README.md](https://github.com/psi4/psi4/pull/2454/files#diff-636942e0afa55e1aea027fb857aa2c6046858fb317c0b9a4f12ff3ca17e64ffb); - [.github/workflows/ecosystem.yml](https://github.com/psi4/psi4/pull/2454/files#diff-9886b1fe077112c3a9952964ed992dc3cd38b48d0a506a6b7a00241e4669d2b1); - [doc/sphinxman/source/add_tests.rst](https://github.com/psi4/psi4/pull/2454/files#diff-c35e937cac108347811127c527ab39f06b064d399a1eced0714ecdc47d954058); - representative; - [tests/tu1-h2o-energy/test_input.py](https://github.com/psi4/psi4/pull/2454/files#diff-54403c03174a7c69742c46e5553bf1ba9f7d4b855c649eae56ffb0662a0ba50e); - [tests/adcc/formaldehyde-pe-adc1/test_input.py](https://github.com/psi4/psi4/pull/2454/files#diff-58c0e6c9056f03a206a5b10c17a465c7931c41d6a9c6c8d7e434adca515084d0); - if you want to read testing docstrings [psi4/driver/p4util/testing.py](https://github.com/psi4/psi4/pull/2454/files#diff-7104dfa29c684b4211ecc2cc6e77479d18570fdadc5a67951d3442e45f462d89); - if you want to read testing code [tests/pytests/addons.py](https://github.com/psi4/psi4/pull/2454/files#diff-93c9a8823b9fa2f85a114c39cd0d17d6c66e4cb93aa00189785ff8040d3169b3). ## Todos. - CI; - [x] read [.github/workflows/README.md](https://github.com/psi4/psi4/pull/2454/files#diff-636942e0afa55e1aea027fb857aa2c6046858fb317c0b9a4f12ff3ca17e64ffb); - [x] current readings are below (fail/pass/skip/uncollected/xfail/xpass/warnings) for `pytest -m ""addon and not long""`; - L: -/244/ 10/3229/4/4/303; - M: -/229/ 25/3229/6/2/304; - W: -/144/112/3229/2/4/303; - skipped on Linux are things like ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454
https://github.com/psi4/psi4/pull/2454:2526,Modifiability,config,configuration,2526,"si4/pull/2454/files#diff-93c9a8823b9fa2f85a114c39cd0d17d6c66e4cb93aa00189785ff8040d3169b3). ## Todos. - CI; - [x] read [.github/workflows/README.md](https://github.com/psi4/psi4/pull/2454/files#diff-636942e0afa55e1aea027fb857aa2c6046858fb317c0b9a4f12ff3ca17e64ffb); - [x] current readings are below (fail/pass/skip/uncollected/xfail/xpass/warnings) for `pytest -m ""addon and not long""`; - L: -/244/ 10/3229/4/4/303; - M: -/229/ 25/3229/6/2/304; - W: -/144/112/3229/2/4/303; - skipped on Linux are things like gpu_dfcc (needs gpus), mrcc (proprietary), cct3 (no package), fock-ci (apparently I packaged the wrong thing); - [ ] there's an unresolved issue on macOS where with Py39 adcc shows pulled from pypi but it tests fine. with Py310, adcc and others pulled from pypi and it doesn't get found for testing. leaving at Py39 for now, but mysterious; - [ ] I haven't removed all the addons from the Azure pipelines yet but I can if everyone comfortable. - Testing Strategy; - [x] `ctest` is familiar, easy to read, and doesn't require configuration. on the other hand, it can't test installations, it can't do parameterizations, and by passing through TestingMacros and runtest.py, you can't always pass environment info into it. Don't worry, it's staying exactly as it is. I've added a single short file to several ctest directories ...; - [x] moved `setup.cfg` to `pytest.ini` and install it. only pytest was using the setup.cfg file anyways. all labels (things you can `pytest -m quick` akin to `ctest -L quick`) are stored here instead of duplicated btwn setup.cfg and conftest.py. The GHA will complain if you hit unregistered label.; - [x] changed the pytest import_mode from default to ""importlib"". this means (1) we don't need to have empty `__init__.py` in all 500 ctest directories and (2) avoid name conflicts when collecting ctests. Result is that tests/pytests is no longer a module, so a lot of the `from .utils import ...` become `from utils import ...` etc. Those names are looking gen",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454
https://github.com/psi4/psi4/pull/2454:2601,Modifiability,parameteriz,parameterizations,2601,"] read [.github/workflows/README.md](https://github.com/psi4/psi4/pull/2454/files#diff-636942e0afa55e1aea027fb857aa2c6046858fb317c0b9a4f12ff3ca17e64ffb); - [x] current readings are below (fail/pass/skip/uncollected/xfail/xpass/warnings) for `pytest -m ""addon and not long""`; - L: -/244/ 10/3229/4/4/303; - M: -/229/ 25/3229/6/2/304; - W: -/144/112/3229/2/4/303; - skipped on Linux are things like gpu_dfcc (needs gpus), mrcc (proprietary), cct3 (no package), fock-ci (apparently I packaged the wrong thing); - [ ] there's an unresolved issue on macOS where with Py39 adcc shows pulled from pypi but it tests fine. with Py310, adcc and others pulled from pypi and it doesn't get found for testing. leaving at Py39 for now, but mysterious; - [ ] I haven't removed all the addons from the Azure pipelines yet but I can if everyone comfortable. - Testing Strategy; - [x] `ctest` is familiar, easy to read, and doesn't require configuration. on the other hand, it can't test installations, it can't do parameterizations, and by passing through TestingMacros and runtest.py, you can't always pass environment info into it. Don't worry, it's staying exactly as it is. I've added a single short file to several ctest directories ...; - [x] moved `setup.cfg` to `pytest.ini` and install it. only pytest was using the setup.cfg file anyways. all labels (things you can `pytest -m quick` akin to `ctest -L quick`) are stored here instead of duplicated btwn setup.cfg and conftest.py. The GHA will complain if you hit unregistered label.; - [x] changed the pytest import_mode from default to ""importlib"". this means (1) we don't need to have empty `__init__.py` in all 500 ctest directories and (2) avoid name conflicts when collecting ctests. Result is that tests/pytests is no longer a module, so a lot of the `from .utils import ...` become `from utils import ...` etc. Those names are looking generic, so may need to rename in future. - Testing Details; - [x] in tests, rewrote `using(package)` function whose",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454
https://github.com/psi4/psi4/pull/2454:4962,Modifiability,inherit,inheritance,4962,"`distutils.dir_util.copy_tree` into `shutil.copytree`. this is a py38 language feature, the first actual breaking of py37+ compatibility.; - [x] added the openfermion demo as test; - [x] apparently 3body in dftd3 fails on Mac. near-term goal is replacing, so skip for now; - [x] newly install pytest.ini and install any test_input.py, input.dat, and input.py from tests/ . sensibly, input.dat/py would only get installed if test_input.py present, but I can't teach cmake that logic, so it's either this or have to register each pytest-prepared psithon test. aux files from tests/ are also installed but these have to be registered with cmake.; - [x] moved `compare_moldenfiles()` from testing code to driver alongside `compare_fchkfiles()` so that it can be documented.; - [x] ""psi"" and ""api"" marks added to all tests/pytests/ files for reasons explained in docs. - Docs; - [x] Updated the add_tests documentation, esp. wrt pytest; - [x] Might have done enough of the outline to close #2396 ; - [x] Straightened out docstring inheritance for all the compare_* fns and added to docs.; - [x] light updating of user testing docs in build_planning.rst. - Misc.; - [x] improved `psi4.extras()` printing so you know what you're missing: `['adcc', 'ambit', 'c̶c̶t̶3̶', ...`; - [x] fixed some FutureWarnings like replacing `set_module_options`; - [x] added ""maxeco"" conda env files to devtools/ for each platform for developers/users who prefer those to psi4-dev conda package. they were generated from the ecosystem GHA but not autoupdated -- that may happen in a future GHA from master; - [x] added passing `CMAKE_OSX_DEPLOYMENT_TARGET` and `CMAKE_OSX_SYSROOT` cmakevars to internal builds. this is how the macOS SDK gets passed through, apparently, for C/C++. it happens through `CMAKE_Fortran_FLAGS` for Fortran. proven necessary for v2rdm_casscf, so I rolled it out to all the compiled externals.; - [x] for ambit, added Python and pb11 cmakevars that are proper for the new de-boosted and new-python-sea",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454
https://github.com/psi4/psi4/pull/2454:3291,Safety,avoid,avoid,3291,"testing. leaving at Py39 for now, but mysterious; - [ ] I haven't removed all the addons from the Azure pipelines yet but I can if everyone comfortable. - Testing Strategy; - [x] `ctest` is familiar, easy to read, and doesn't require configuration. on the other hand, it can't test installations, it can't do parameterizations, and by passing through TestingMacros and runtest.py, you can't always pass environment info into it. Don't worry, it's staying exactly as it is. I've added a single short file to several ctest directories ...; - [x] moved `setup.cfg` to `pytest.ini` and install it. only pytest was using the setup.cfg file anyways. all labels (things you can `pytest -m quick` akin to `ctest -L quick`) are stored here instead of duplicated btwn setup.cfg and conftest.py. The GHA will complain if you hit unregistered label.; - [x] changed the pytest import_mode from default to ""importlib"". this means (1) we don't need to have empty `__init__.py` in all 500 ctest directories and (2) avoid name conflicts when collecting ctests. Result is that tests/pytests is no longer a module, so a lot of the `from .utils import ...` become `from utils import ...` etc. Those names are looking generic, so may need to rename in future. - Testing Details; - [x] in tests, rewrote `using(package)` function whose role is to detect whether package present and skip test otherwise. now the fn additionally adds ""addon"" label and the name of the package label, so one can run `pytest -m dftd3`. to do this, had to separate into two fns: `uusing` for nested decorator marks and `using` for list marks.; - [x] to avoid FutureWarning, changed three `distutils.dir_util.copy_tree` into `shutil.copytree`. this is a py38 language feature, the first actual breaking of py37+ compatibility.; - [x] added the openfermion demo as test; - [x] apparently 3body in dftd3 fails on Mac. near-term goal is replacing, so skip for now; - [x] newly install pytest.ini and install any test_input.py, input.dat, and input.p",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454
https://github.com/psi4/psi4/pull/2454:3617,Safety,detect,detect,3617,"parameterizations, and by passing through TestingMacros and runtest.py, you can't always pass environment info into it. Don't worry, it's staying exactly as it is. I've added a single short file to several ctest directories ...; - [x] moved `setup.cfg` to `pytest.ini` and install it. only pytest was using the setup.cfg file anyways. all labels (things you can `pytest -m quick` akin to `ctest -L quick`) are stored here instead of duplicated btwn setup.cfg and conftest.py. The GHA will complain if you hit unregistered label.; - [x] changed the pytest import_mode from default to ""importlib"". this means (1) we don't need to have empty `__init__.py` in all 500 ctest directories and (2) avoid name conflicts when collecting ctests. Result is that tests/pytests is no longer a module, so a lot of the `from .utils import ...` become `from utils import ...` etc. Those names are looking generic, so may need to rename in future. - Testing Details; - [x] in tests, rewrote `using(package)` function whose role is to detect whether package present and skip test otherwise. now the fn additionally adds ""addon"" label and the name of the package label, so one can run `pytest -m dftd3`. to do this, had to separate into two fns: `uusing` for nested decorator marks and `using` for list marks.; - [x] to avoid FutureWarning, changed three `distutils.dir_util.copy_tree` into `shutil.copytree`. this is a py38 language feature, the first actual breaking of py37+ compatibility.; - [x] added the openfermion demo as test; - [x] apparently 3body in dftd3 fails on Mac. near-term goal is replacing, so skip for now; - [x] newly install pytest.ini and install any test_input.py, input.dat, and input.py from tests/ . sensibly, input.dat/py would only get installed if test_input.py present, but I can't teach cmake that logic, so it's either this or have to register each pytest-prepared psithon test. aux files from tests/ are also installed but these have to be registered with cmake.; - [x] moved `compare_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454
https://github.com/psi4/psi4/pull/2454:3901,Safety,avoid,avoid,3901,"cfg file anyways. all labels (things you can `pytest -m quick` akin to `ctest -L quick`) are stored here instead of duplicated btwn setup.cfg and conftest.py. The GHA will complain if you hit unregistered label.; - [x] changed the pytest import_mode from default to ""importlib"". this means (1) we don't need to have empty `__init__.py` in all 500 ctest directories and (2) avoid name conflicts when collecting ctests. Result is that tests/pytests is no longer a module, so a lot of the `from .utils import ...` become `from utils import ...` etc. Those names are looking generic, so may need to rename in future. - Testing Details; - [x] in tests, rewrote `using(package)` function whose role is to detect whether package present and skip test otherwise. now the fn additionally adds ""addon"" label and the name of the package label, so one can run `pytest -m dftd3`. to do this, had to separate into two fns: `uusing` for nested decorator marks and `using` for list marks.; - [x] to avoid FutureWarning, changed three `distutils.dir_util.copy_tree` into `shutil.copytree`. this is a py38 language feature, the first actual breaking of py37+ compatibility.; - [x] added the openfermion demo as test; - [x] apparently 3body in dftd3 fails on Mac. near-term goal is replacing, so skip for now; - [x] newly install pytest.ini and install any test_input.py, input.dat, and input.py from tests/ . sensibly, input.dat/py would only get installed if test_input.py present, but I can't teach cmake that logic, so it's either this or have to register each pytest-prepared psithon test. aux files from tests/ are also installed but these have to be registered with cmake.; - [x] moved `compare_moldenfiles()` from testing code to driver alongside `compare_fchkfiles()` so that it can be documented.; - [x] ""psi"" and ""api"" marks added to all tests/pytests/ files for reasons explained in docs. - Docs; - [x] Updated the add_tests documentation, esp. wrt pytest; - [x] Might have done enough of the outline to clos",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454
https://github.com/psi4/psi4/pull/2454:6573,Safety,avoid,avoid,6573,"ance for all the compare_* fns and added to docs.; - [x] light updating of user testing docs in build_planning.rst. - Misc.; - [x] improved `psi4.extras()` printing so you know what you're missing: `['adcc', 'ambit', 'c̶c̶t̶3̶', ...`; - [x] fixed some FutureWarnings like replacing `set_module_options`; - [x] added ""maxeco"" conda env files to devtools/ for each platform for developers/users who prefer those to psi4-dev conda package. they were generated from the ecosystem GHA but not autoupdated -- that may happen in a future GHA from master; - [x] added passing `CMAKE_OSX_DEPLOYMENT_TARGET` and `CMAKE_OSX_SYSROOT` cmakevars to internal builds. this is how the macOS SDK gets passed through, apparently, for C/C++. it happens through `CMAKE_Fortran_FLAGS` for Fortran. proven necessary for v2rdm_casscf, so I rolled it out to all the compiled externals.; - [x] for ambit, added Python and pb11 cmakevars that are proper for the new de-boosted and new-python-searched version. left old (capital PYTHON) for now. ## Questions; - [ ] PR is mostly CI, so non-user-facing, and testing supplements, so non-user-changing. But it requires cutting-edge pytest 7 (released Dec 2021) available from conda c-f and pypi, not from conda defaults yet. ok to demand of users? most aren't running pytests I would guess.; - [ ] In documenting psi4 compare functions, have to autodoc qcel compare fn, and that shows up a circular import in forward declaration of types (bet you didn't think that would be a sentence applied to Python 5 years ago) that produces a Sphinx warning. I've figured out how to edit qcel to avoid this, but until that makes its way into a release, we may have to turn off warnings-as-errors in psi4 docs build. ok?. close #1708. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge !SQUASH!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454
https://github.com/psi4/psi4/pull/2454:171,Testability,test,test,171,"## Description; Psi4 ecosystem is growing (good) and spreading (good, b/c psi4 channel isn't a natural home for openfermion, for instance; bad, b/c it's harder to install/test/keep-track-of everything at once). The initial scope of this PR was to set up a GHA that tested as many addons as conda could lay its hands on. Other stuff happened along the way ... ### Highlights for review (link permanence questionable); - [.github/workflows/README.md](https://github.com/psi4/psi4/pull/2454/files#diff-636942e0afa55e1aea027fb857aa2c6046858fb317c0b9a4f12ff3ca17e64ffb); - [.github/workflows/ecosystem.yml](https://github.com/psi4/psi4/pull/2454/files#diff-9886b1fe077112c3a9952964ed992dc3cd38b48d0a506a6b7a00241e4669d2b1); - [doc/sphinxman/source/add_tests.rst](https://github.com/psi4/psi4/pull/2454/files#diff-c35e937cac108347811127c527ab39f06b064d399a1eced0714ecdc47d954058); - representative; - [tests/tu1-h2o-energy/test_input.py](https://github.com/psi4/psi4/pull/2454/files#diff-54403c03174a7c69742c46e5553bf1ba9f7d4b855c649eae56ffb0662a0ba50e); - [tests/adcc/formaldehyde-pe-adc1/test_input.py](https://github.com/psi4/psi4/pull/2454/files#diff-58c0e6c9056f03a206a5b10c17a465c7931c41d6a9c6c8d7e434adca515084d0); - if you want to read testing docstrings [psi4/driver/p4util/testing.py](https://github.com/psi4/psi4/pull/2454/files#diff-7104dfa29c684b4211ecc2cc6e77479d18570fdadc5a67951d3442e45f462d89); - if you want to read testing code [tests/pytests/addons.py](https://github.com/psi4/psi4/pull/2454/files#diff-93c9a8823b9fa2f85a114c39cd0d17d6c66e4cb93aa00189785ff8040d3169b3). ## Todos. - CI; - [x] read [.github/workflows/README.md](https://github.com/psi4/psi4/pull/2454/files#diff-636942e0afa55e1aea027fb857aa2c6046858fb317c0b9a4f12ff3ca17e64ffb); - [x] current readings are below (fail/pass/skip/uncollected/xfail/xpass/warnings) for `pytest -m ""addon and not long""`; - L: -/244/ 10/3229/4/4/303; - M: -/229/ 25/3229/6/2/304; - W: -/144/112/3229/2/4/303; - skipped on Linux are things like ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454
https://github.com/psi4/psi4/pull/2454:265,Testability,test,tested,265,"## Description; Psi4 ecosystem is growing (good) and spreading (good, b/c psi4 channel isn't a natural home for openfermion, for instance; bad, b/c it's harder to install/test/keep-track-of everything at once). The initial scope of this PR was to set up a GHA that tested as many addons as conda could lay its hands on. Other stuff happened along the way ... ### Highlights for review (link permanence questionable); - [.github/workflows/README.md](https://github.com/psi4/psi4/pull/2454/files#diff-636942e0afa55e1aea027fb857aa2c6046858fb317c0b9a4f12ff3ca17e64ffb); - [.github/workflows/ecosystem.yml](https://github.com/psi4/psi4/pull/2454/files#diff-9886b1fe077112c3a9952964ed992dc3cd38b48d0a506a6b7a00241e4669d2b1); - [doc/sphinxman/source/add_tests.rst](https://github.com/psi4/psi4/pull/2454/files#diff-c35e937cac108347811127c527ab39f06b064d399a1eced0714ecdc47d954058); - representative; - [tests/tu1-h2o-energy/test_input.py](https://github.com/psi4/psi4/pull/2454/files#diff-54403c03174a7c69742c46e5553bf1ba9f7d4b855c649eae56ffb0662a0ba50e); - [tests/adcc/formaldehyde-pe-adc1/test_input.py](https://github.com/psi4/psi4/pull/2454/files#diff-58c0e6c9056f03a206a5b10c17a465c7931c41d6a9c6c8d7e434adca515084d0); - if you want to read testing docstrings [psi4/driver/p4util/testing.py](https://github.com/psi4/psi4/pull/2454/files#diff-7104dfa29c684b4211ecc2cc6e77479d18570fdadc5a67951d3442e45f462d89); - if you want to read testing code [tests/pytests/addons.py](https://github.com/psi4/psi4/pull/2454/files#diff-93c9a8823b9fa2f85a114c39cd0d17d6c66e4cb93aa00189785ff8040d3169b3). ## Todos. - CI; - [x] read [.github/workflows/README.md](https://github.com/psi4/psi4/pull/2454/files#diff-636942e0afa55e1aea027fb857aa2c6046858fb317c0b9a4f12ff3ca17e64ffb); - [x] current readings are below (fail/pass/skip/uncollected/xfail/xpass/warnings) for `pytest -m ""addon and not long""`; - L: -/244/ 10/3229/4/4/303; - M: -/229/ 25/3229/6/2/304; - W: -/144/112/3229/2/4/303; - skipped on Linux are things like ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454
https://github.com/psi4/psi4/pull/2454:896,Testability,test,tests,896,"## Description; Psi4 ecosystem is growing (good) and spreading (good, b/c psi4 channel isn't a natural home for openfermion, for instance; bad, b/c it's harder to install/test/keep-track-of everything at once). The initial scope of this PR was to set up a GHA that tested as many addons as conda could lay its hands on. Other stuff happened along the way ... ### Highlights for review (link permanence questionable); - [.github/workflows/README.md](https://github.com/psi4/psi4/pull/2454/files#diff-636942e0afa55e1aea027fb857aa2c6046858fb317c0b9a4f12ff3ca17e64ffb); - [.github/workflows/ecosystem.yml](https://github.com/psi4/psi4/pull/2454/files#diff-9886b1fe077112c3a9952964ed992dc3cd38b48d0a506a6b7a00241e4669d2b1); - [doc/sphinxman/source/add_tests.rst](https://github.com/psi4/psi4/pull/2454/files#diff-c35e937cac108347811127c527ab39f06b064d399a1eced0714ecdc47d954058); - representative; - [tests/tu1-h2o-energy/test_input.py](https://github.com/psi4/psi4/pull/2454/files#diff-54403c03174a7c69742c46e5553bf1ba9f7d4b855c649eae56ffb0662a0ba50e); - [tests/adcc/formaldehyde-pe-adc1/test_input.py](https://github.com/psi4/psi4/pull/2454/files#diff-58c0e6c9056f03a206a5b10c17a465c7931c41d6a9c6c8d7e434adca515084d0); - if you want to read testing docstrings [psi4/driver/p4util/testing.py](https://github.com/psi4/psi4/pull/2454/files#diff-7104dfa29c684b4211ecc2cc6e77479d18570fdadc5a67951d3442e45f462d89); - if you want to read testing code [tests/pytests/addons.py](https://github.com/psi4/psi4/pull/2454/files#diff-93c9a8823b9fa2f85a114c39cd0d17d6c66e4cb93aa00189785ff8040d3169b3). ## Todos. - CI; - [x] read [.github/workflows/README.md](https://github.com/psi4/psi4/pull/2454/files#diff-636942e0afa55e1aea027fb857aa2c6046858fb317c0b9a4f12ff3ca17e64ffb); - [x] current readings are below (fail/pass/skip/uncollected/xfail/xpass/warnings) for `pytest -m ""addon and not long""`; - L: -/244/ 10/3229/4/4/303; - M: -/229/ 25/3229/6/2/304; - W: -/144/112/3229/2/4/303; - skipped on Linux are things like ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454
https://github.com/psi4/psi4/pull/2454:1052,Testability,test,tests,1052,"ecosystem is growing (good) and spreading (good, b/c psi4 channel isn't a natural home for openfermion, for instance; bad, b/c it's harder to install/test/keep-track-of everything at once). The initial scope of this PR was to set up a GHA that tested as many addons as conda could lay its hands on. Other stuff happened along the way ... ### Highlights for review (link permanence questionable); - [.github/workflows/README.md](https://github.com/psi4/psi4/pull/2454/files#diff-636942e0afa55e1aea027fb857aa2c6046858fb317c0b9a4f12ff3ca17e64ffb); - [.github/workflows/ecosystem.yml](https://github.com/psi4/psi4/pull/2454/files#diff-9886b1fe077112c3a9952964ed992dc3cd38b48d0a506a6b7a00241e4669d2b1); - [doc/sphinxman/source/add_tests.rst](https://github.com/psi4/psi4/pull/2454/files#diff-c35e937cac108347811127c527ab39f06b064d399a1eced0714ecdc47d954058); - representative; - [tests/tu1-h2o-energy/test_input.py](https://github.com/psi4/psi4/pull/2454/files#diff-54403c03174a7c69742c46e5553bf1ba9f7d4b855c649eae56ffb0662a0ba50e); - [tests/adcc/formaldehyde-pe-adc1/test_input.py](https://github.com/psi4/psi4/pull/2454/files#diff-58c0e6c9056f03a206a5b10c17a465c7931c41d6a9c6c8d7e434adca515084d0); - if you want to read testing docstrings [psi4/driver/p4util/testing.py](https://github.com/psi4/psi4/pull/2454/files#diff-7104dfa29c684b4211ecc2cc6e77479d18570fdadc5a67951d3442e45f462d89); - if you want to read testing code [tests/pytests/addons.py](https://github.com/psi4/psi4/pull/2454/files#diff-93c9a8823b9fa2f85a114c39cd0d17d6c66e4cb93aa00189785ff8040d3169b3). ## Todos. - CI; - [x] read [.github/workflows/README.md](https://github.com/psi4/psi4/pull/2454/files#diff-636942e0afa55e1aea027fb857aa2c6046858fb317c0b9a4f12ff3ca17e64ffb); - [x] current readings are below (fail/pass/skip/uncollected/xfail/xpass/warnings) for `pytest -m ""addon and not long""`; - L: -/244/ 10/3229/4/4/303; - M: -/229/ 25/3229/6/2/304; - W: -/144/112/3229/2/4/303; - skipped on Linux are things like gpu_dfcc (needs gpus",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454
https://github.com/psi4/psi4/pull/2454:1238,Testability,test,testing,1238,"g at once). The initial scope of this PR was to set up a GHA that tested as many addons as conda could lay its hands on. Other stuff happened along the way ... ### Highlights for review (link permanence questionable); - [.github/workflows/README.md](https://github.com/psi4/psi4/pull/2454/files#diff-636942e0afa55e1aea027fb857aa2c6046858fb317c0b9a4f12ff3ca17e64ffb); - [.github/workflows/ecosystem.yml](https://github.com/psi4/psi4/pull/2454/files#diff-9886b1fe077112c3a9952964ed992dc3cd38b48d0a506a6b7a00241e4669d2b1); - [doc/sphinxman/source/add_tests.rst](https://github.com/psi4/psi4/pull/2454/files#diff-c35e937cac108347811127c527ab39f06b064d399a1eced0714ecdc47d954058); - representative; - [tests/tu1-h2o-energy/test_input.py](https://github.com/psi4/psi4/pull/2454/files#diff-54403c03174a7c69742c46e5553bf1ba9f7d4b855c649eae56ffb0662a0ba50e); - [tests/adcc/formaldehyde-pe-adc1/test_input.py](https://github.com/psi4/psi4/pull/2454/files#diff-58c0e6c9056f03a206a5b10c17a465c7931c41d6a9c6c8d7e434adca515084d0); - if you want to read testing docstrings [psi4/driver/p4util/testing.py](https://github.com/psi4/psi4/pull/2454/files#diff-7104dfa29c684b4211ecc2cc6e77479d18570fdadc5a67951d3442e45f462d89); - if you want to read testing code [tests/pytests/addons.py](https://github.com/psi4/psi4/pull/2454/files#diff-93c9a8823b9fa2f85a114c39cd0d17d6c66e4cb93aa00189785ff8040d3169b3). ## Todos. - CI; - [x] read [.github/workflows/README.md](https://github.com/psi4/psi4/pull/2454/files#diff-636942e0afa55e1aea027fb857aa2c6046858fb317c0b9a4f12ff3ca17e64ffb); - [x] current readings are below (fail/pass/skip/uncollected/xfail/xpass/warnings) for `pytest -m ""addon and not long""`; - L: -/244/ 10/3229/4/4/303; - M: -/229/ 25/3229/6/2/304; - W: -/144/112/3229/2/4/303; - skipped on Linux are things like gpu_dfcc (needs gpus), mrcc (proprietary), cct3 (no package), fock-ci (apparently I packaged the wrong thing); - [ ] there's an unresolved issue on macOS where with Py39 adcc shows pulled from pypi b",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454
https://github.com/psi4/psi4/pull/2454:1277,Testability,test,testing,1277,"g at once). The initial scope of this PR was to set up a GHA that tested as many addons as conda could lay its hands on. Other stuff happened along the way ... ### Highlights for review (link permanence questionable); - [.github/workflows/README.md](https://github.com/psi4/psi4/pull/2454/files#diff-636942e0afa55e1aea027fb857aa2c6046858fb317c0b9a4f12ff3ca17e64ffb); - [.github/workflows/ecosystem.yml](https://github.com/psi4/psi4/pull/2454/files#diff-9886b1fe077112c3a9952964ed992dc3cd38b48d0a506a6b7a00241e4669d2b1); - [doc/sphinxman/source/add_tests.rst](https://github.com/psi4/psi4/pull/2454/files#diff-c35e937cac108347811127c527ab39f06b064d399a1eced0714ecdc47d954058); - representative; - [tests/tu1-h2o-energy/test_input.py](https://github.com/psi4/psi4/pull/2454/files#diff-54403c03174a7c69742c46e5553bf1ba9f7d4b855c649eae56ffb0662a0ba50e); - [tests/adcc/formaldehyde-pe-adc1/test_input.py](https://github.com/psi4/psi4/pull/2454/files#diff-58c0e6c9056f03a206a5b10c17a465c7931c41d6a9c6c8d7e434adca515084d0); - if you want to read testing docstrings [psi4/driver/p4util/testing.py](https://github.com/psi4/psi4/pull/2454/files#diff-7104dfa29c684b4211ecc2cc6e77479d18570fdadc5a67951d3442e45f462d89); - if you want to read testing code [tests/pytests/addons.py](https://github.com/psi4/psi4/pull/2454/files#diff-93c9a8823b9fa2f85a114c39cd0d17d6c66e4cb93aa00189785ff8040d3169b3). ## Todos. - CI; - [x] read [.github/workflows/README.md](https://github.com/psi4/psi4/pull/2454/files#diff-636942e0afa55e1aea027fb857aa2c6046858fb317c0b9a4f12ff3ca17e64ffb); - [x] current readings are below (fail/pass/skip/uncollected/xfail/xpass/warnings) for `pytest -m ""addon and not long""`; - L: -/244/ 10/3229/4/4/303; - M: -/229/ 25/3229/6/2/304; - W: -/144/112/3229/2/4/303; - skipped on Linux are things like gpu_dfcc (needs gpus), mrcc (proprietary), cct3 (no package), fock-ci (apparently I packaged the wrong thing); - [ ] there's an unresolved issue on macOS where with Py39 adcc shows pulled from pypi b",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454
https://github.com/psi4/psi4/pull/2454:1428,Testability,test,testing,1428,"w (link permanence questionable); - [.github/workflows/README.md](https://github.com/psi4/psi4/pull/2454/files#diff-636942e0afa55e1aea027fb857aa2c6046858fb317c0b9a4f12ff3ca17e64ffb); - [.github/workflows/ecosystem.yml](https://github.com/psi4/psi4/pull/2454/files#diff-9886b1fe077112c3a9952964ed992dc3cd38b48d0a506a6b7a00241e4669d2b1); - [doc/sphinxman/source/add_tests.rst](https://github.com/psi4/psi4/pull/2454/files#diff-c35e937cac108347811127c527ab39f06b064d399a1eced0714ecdc47d954058); - representative; - [tests/tu1-h2o-energy/test_input.py](https://github.com/psi4/psi4/pull/2454/files#diff-54403c03174a7c69742c46e5553bf1ba9f7d4b855c649eae56ffb0662a0ba50e); - [tests/adcc/formaldehyde-pe-adc1/test_input.py](https://github.com/psi4/psi4/pull/2454/files#diff-58c0e6c9056f03a206a5b10c17a465c7931c41d6a9c6c8d7e434adca515084d0); - if you want to read testing docstrings [psi4/driver/p4util/testing.py](https://github.com/psi4/psi4/pull/2454/files#diff-7104dfa29c684b4211ecc2cc6e77479d18570fdadc5a67951d3442e45f462d89); - if you want to read testing code [tests/pytests/addons.py](https://github.com/psi4/psi4/pull/2454/files#diff-93c9a8823b9fa2f85a114c39cd0d17d6c66e4cb93aa00189785ff8040d3169b3). ## Todos. - CI; - [x] read [.github/workflows/README.md](https://github.com/psi4/psi4/pull/2454/files#diff-636942e0afa55e1aea027fb857aa2c6046858fb317c0b9a4f12ff3ca17e64ffb); - [x] current readings are below (fail/pass/skip/uncollected/xfail/xpass/warnings) for `pytest -m ""addon and not long""`; - L: -/244/ 10/3229/4/4/303; - M: -/229/ 25/3229/6/2/304; - W: -/144/112/3229/2/4/303; - skipped on Linux are things like gpu_dfcc (needs gpus), mrcc (proprietary), cct3 (no package), fock-ci (apparently I packaged the wrong thing); - [ ] there's an unresolved issue on macOS where with Py39 adcc shows pulled from pypi but it tests fine. with Py310, adcc and others pulled from pypi and it doesn't get found for testing. leaving at Py39 for now, but mysterious; - [ ] I haven't removed all the addons fro",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454
https://github.com/psi4/psi4/pull/2454:1442,Testability,test,tests,1442,"w (link permanence questionable); - [.github/workflows/README.md](https://github.com/psi4/psi4/pull/2454/files#diff-636942e0afa55e1aea027fb857aa2c6046858fb317c0b9a4f12ff3ca17e64ffb); - [.github/workflows/ecosystem.yml](https://github.com/psi4/psi4/pull/2454/files#diff-9886b1fe077112c3a9952964ed992dc3cd38b48d0a506a6b7a00241e4669d2b1); - [doc/sphinxman/source/add_tests.rst](https://github.com/psi4/psi4/pull/2454/files#diff-c35e937cac108347811127c527ab39f06b064d399a1eced0714ecdc47d954058); - representative; - [tests/tu1-h2o-energy/test_input.py](https://github.com/psi4/psi4/pull/2454/files#diff-54403c03174a7c69742c46e5553bf1ba9f7d4b855c649eae56ffb0662a0ba50e); - [tests/adcc/formaldehyde-pe-adc1/test_input.py](https://github.com/psi4/psi4/pull/2454/files#diff-58c0e6c9056f03a206a5b10c17a465c7931c41d6a9c6c8d7e434adca515084d0); - if you want to read testing docstrings [psi4/driver/p4util/testing.py](https://github.com/psi4/psi4/pull/2454/files#diff-7104dfa29c684b4211ecc2cc6e77479d18570fdadc5a67951d3442e45f462d89); - if you want to read testing code [tests/pytests/addons.py](https://github.com/psi4/psi4/pull/2454/files#diff-93c9a8823b9fa2f85a114c39cd0d17d6c66e4cb93aa00189785ff8040d3169b3). ## Todos. - CI; - [x] read [.github/workflows/README.md](https://github.com/psi4/psi4/pull/2454/files#diff-636942e0afa55e1aea027fb857aa2c6046858fb317c0b9a4f12ff3ca17e64ffb); - [x] current readings are below (fail/pass/skip/uncollected/xfail/xpass/warnings) for `pytest -m ""addon and not long""`; - L: -/244/ 10/3229/4/4/303; - M: -/229/ 25/3229/6/2/304; - W: -/144/112/3229/2/4/303; - skipped on Linux are things like gpu_dfcc (needs gpus), mrcc (proprietary), cct3 (no package), fock-ci (apparently I packaged the wrong thing); - [ ] there's an unresolved issue on macOS where with Py39 adcc shows pulled from pypi but it tests fine. with Py310, adcc and others pulled from pypi and it doesn't get found for testing. leaving at Py39 for now, but mysterious; - [ ] I haven't removed all the addons fro",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454
https://github.com/psi4/psi4/pull/2454:2206,Testability,test,tests,2206,"s://github.com/psi4/psi4/pull/2454/files#diff-54403c03174a7c69742c46e5553bf1ba9f7d4b855c649eae56ffb0662a0ba50e); - [tests/adcc/formaldehyde-pe-adc1/test_input.py](https://github.com/psi4/psi4/pull/2454/files#diff-58c0e6c9056f03a206a5b10c17a465c7931c41d6a9c6c8d7e434adca515084d0); - if you want to read testing docstrings [psi4/driver/p4util/testing.py](https://github.com/psi4/psi4/pull/2454/files#diff-7104dfa29c684b4211ecc2cc6e77479d18570fdadc5a67951d3442e45f462d89); - if you want to read testing code [tests/pytests/addons.py](https://github.com/psi4/psi4/pull/2454/files#diff-93c9a8823b9fa2f85a114c39cd0d17d6c66e4cb93aa00189785ff8040d3169b3). ## Todos. - CI; - [x] read [.github/workflows/README.md](https://github.com/psi4/psi4/pull/2454/files#diff-636942e0afa55e1aea027fb857aa2c6046858fb317c0b9a4f12ff3ca17e64ffb); - [x] current readings are below (fail/pass/skip/uncollected/xfail/xpass/warnings) for `pytest -m ""addon and not long""`; - L: -/244/ 10/3229/4/4/303; - M: -/229/ 25/3229/6/2/304; - W: -/144/112/3229/2/4/303; - skipped on Linux are things like gpu_dfcc (needs gpus), mrcc (proprietary), cct3 (no package), fock-ci (apparently I packaged the wrong thing); - [ ] there's an unresolved issue on macOS where with Py39 adcc shows pulled from pypi but it tests fine. with Py310, adcc and others pulled from pypi and it doesn't get found for testing. leaving at Py39 for now, but mysterious; - [ ] I haven't removed all the addons from the Azure pipelines yet but I can if everyone comfortable. - Testing Strategy; - [x] `ctest` is familiar, easy to read, and doesn't require configuration. on the other hand, it can't test installations, it can't do parameterizations, and by passing through TestingMacros and runtest.py, you can't always pass environment info into it. Don't worry, it's staying exactly as it is. I've added a single short file to several ctest directories ...; - [x] moved `setup.cfg` to `pytest.ini` and install it. only pytest was using the setup.cfg file anyways. a",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454
https://github.com/psi4/psi4/pull/2454:2292,Testability,test,testing,2292,"psi4/driver/p4util/testing.py](https://github.com/psi4/psi4/pull/2454/files#diff-7104dfa29c684b4211ecc2cc6e77479d18570fdadc5a67951d3442e45f462d89); - if you want to read testing code [tests/pytests/addons.py](https://github.com/psi4/psi4/pull/2454/files#diff-93c9a8823b9fa2f85a114c39cd0d17d6c66e4cb93aa00189785ff8040d3169b3). ## Todos. - CI; - [x] read [.github/workflows/README.md](https://github.com/psi4/psi4/pull/2454/files#diff-636942e0afa55e1aea027fb857aa2c6046858fb317c0b9a4f12ff3ca17e64ffb); - [x] current readings are below (fail/pass/skip/uncollected/xfail/xpass/warnings) for `pytest -m ""addon and not long""`; - L: -/244/ 10/3229/4/4/303; - M: -/229/ 25/3229/6/2/304; - W: -/144/112/3229/2/4/303; - skipped on Linux are things like gpu_dfcc (needs gpus), mrcc (proprietary), cct3 (no package), fock-ci (apparently I packaged the wrong thing); - [ ] there's an unresolved issue on macOS where with Py39 adcc shows pulled from pypi but it tests fine. with Py310, adcc and others pulled from pypi and it doesn't get found for testing. leaving at Py39 for now, but mysterious; - [ ] I haven't removed all the addons from the Azure pipelines yet but I can if everyone comfortable. - Testing Strategy; - [x] `ctest` is familiar, easy to read, and doesn't require configuration. on the other hand, it can't test installations, it can't do parameterizations, and by passing through TestingMacros and runtest.py, you can't always pass environment info into it. Don't worry, it's staying exactly as it is. I've added a single short file to several ctest directories ...; - [x] moved `setup.cfg` to `pytest.ini` and install it. only pytest was using the setup.cfg file anyways. all labels (things you can `pytest -m quick` akin to `ctest -L quick`) are stored here instead of duplicated btwn setup.cfg and conftest.py. The GHA will complain if you hit unregistered label.; - [x] changed the pytest import_mode from default to ""importlib"". this means (1) we don't need to have empty `__init__.py` in al",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454
https://github.com/psi4/psi4/pull/2454:2447,Testability,Test,Testing,2447,"si4/pull/2454/files#diff-93c9a8823b9fa2f85a114c39cd0d17d6c66e4cb93aa00189785ff8040d3169b3). ## Todos. - CI; - [x] read [.github/workflows/README.md](https://github.com/psi4/psi4/pull/2454/files#diff-636942e0afa55e1aea027fb857aa2c6046858fb317c0b9a4f12ff3ca17e64ffb); - [x] current readings are below (fail/pass/skip/uncollected/xfail/xpass/warnings) for `pytest -m ""addon and not long""`; - L: -/244/ 10/3229/4/4/303; - M: -/229/ 25/3229/6/2/304; - W: -/144/112/3229/2/4/303; - skipped on Linux are things like gpu_dfcc (needs gpus), mrcc (proprietary), cct3 (no package), fock-ci (apparently I packaged the wrong thing); - [ ] there's an unresolved issue on macOS where with Py39 adcc shows pulled from pypi but it tests fine. with Py310, adcc and others pulled from pypi and it doesn't get found for testing. leaving at Py39 for now, but mysterious; - [ ] I haven't removed all the addons from the Azure pipelines yet but I can if everyone comfortable. - Testing Strategy; - [x] `ctest` is familiar, easy to read, and doesn't require configuration. on the other hand, it can't test installations, it can't do parameterizations, and by passing through TestingMacros and runtest.py, you can't always pass environment info into it. Don't worry, it's staying exactly as it is. I've added a single short file to several ctest directories ...; - [x] moved `setup.cfg` to `pytest.ini` and install it. only pytest was using the setup.cfg file anyways. all labels (things you can `pytest -m quick` akin to `ctest -L quick`) are stored here instead of duplicated btwn setup.cfg and conftest.py. The GHA will complain if you hit unregistered label.; - [x] changed the pytest import_mode from default to ""importlib"". this means (1) we don't need to have empty `__init__.py` in all 500 ctest directories and (2) avoid name conflicts when collecting ctests. Result is that tests/pytests is no longer a module, so a lot of the `from .utils import ...` become `from utils import ...` etc. Those names are looking gen",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454
https://github.com/psi4/psi4/pull/2454:2569,Testability,test,test,2569,"] read [.github/workflows/README.md](https://github.com/psi4/psi4/pull/2454/files#diff-636942e0afa55e1aea027fb857aa2c6046858fb317c0b9a4f12ff3ca17e64ffb); - [x] current readings are below (fail/pass/skip/uncollected/xfail/xpass/warnings) for `pytest -m ""addon and not long""`; - L: -/244/ 10/3229/4/4/303; - M: -/229/ 25/3229/6/2/304; - W: -/144/112/3229/2/4/303; - skipped on Linux are things like gpu_dfcc (needs gpus), mrcc (proprietary), cct3 (no package), fock-ci (apparently I packaged the wrong thing); - [ ] there's an unresolved issue on macOS where with Py39 adcc shows pulled from pypi but it tests fine. with Py310, adcc and others pulled from pypi and it doesn't get found for testing. leaving at Py39 for now, but mysterious; - [ ] I haven't removed all the addons from the Azure pipelines yet but I can if everyone comfortable. - Testing Strategy; - [x] `ctest` is familiar, easy to read, and doesn't require configuration. on the other hand, it can't test installations, it can't do parameterizations, and by passing through TestingMacros and runtest.py, you can't always pass environment info into it. Don't worry, it's staying exactly as it is. I've added a single short file to several ctest directories ...; - [x] moved `setup.cfg` to `pytest.ini` and install it. only pytest was using the setup.cfg file anyways. all labels (things you can `pytest -m quick` akin to `ctest -L quick`) are stored here instead of duplicated btwn setup.cfg and conftest.py. The GHA will complain if you hit unregistered label.; - [x] changed the pytest import_mode from default to ""importlib"". this means (1) we don't need to have empty `__init__.py` in all 500 ctest directories and (2) avoid name conflicts when collecting ctests. Result is that tests/pytests is no longer a module, so a lot of the `from .utils import ...` become `from utils import ...` etc. Those names are looking generic, so may need to rename in future. - Testing Details; - [x] in tests, rewrote `using(package)` function whose",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454
https://github.com/psi4/psi4/pull/2454:2643,Testability,Test,TestingMacros,2643,"] read [.github/workflows/README.md](https://github.com/psi4/psi4/pull/2454/files#diff-636942e0afa55e1aea027fb857aa2c6046858fb317c0b9a4f12ff3ca17e64ffb); - [x] current readings are below (fail/pass/skip/uncollected/xfail/xpass/warnings) for `pytest -m ""addon and not long""`; - L: -/244/ 10/3229/4/4/303; - M: -/229/ 25/3229/6/2/304; - W: -/144/112/3229/2/4/303; - skipped on Linux are things like gpu_dfcc (needs gpus), mrcc (proprietary), cct3 (no package), fock-ci (apparently I packaged the wrong thing); - [ ] there's an unresolved issue on macOS where with Py39 adcc shows pulled from pypi but it tests fine. with Py310, adcc and others pulled from pypi and it doesn't get found for testing. leaving at Py39 for now, but mysterious; - [ ] I haven't removed all the addons from the Azure pipelines yet but I can if everyone comfortable. - Testing Strategy; - [x] `ctest` is familiar, easy to read, and doesn't require configuration. on the other hand, it can't test installations, it can't do parameterizations, and by passing through TestingMacros and runtest.py, you can't always pass environment info into it. Don't worry, it's staying exactly as it is. I've added a single short file to several ctest directories ...; - [x] moved `setup.cfg` to `pytest.ini` and install it. only pytest was using the setup.cfg file anyways. all labels (things you can `pytest -m quick` akin to `ctest -L quick`) are stored here instead of duplicated btwn setup.cfg and conftest.py. The GHA will complain if you hit unregistered label.; - [x] changed the pytest import_mode from default to ""importlib"". this means (1) we don't need to have empty `__init__.py` in all 500 ctest directories and (2) avoid name conflicts when collecting ctests. Result is that tests/pytests is no longer a module, so a lot of the `from .utils import ...` become `from utils import ...` etc. Those names are looking generic, so may need to rename in future. - Testing Details; - [x] in tests, rewrote `using(package)` function whose",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454
https://github.com/psi4/psi4/pull/2454:3351,Testability,test,tests,3351," addons from the Azure pipelines yet but I can if everyone comfortable. - Testing Strategy; - [x] `ctest` is familiar, easy to read, and doesn't require configuration. on the other hand, it can't test installations, it can't do parameterizations, and by passing through TestingMacros and runtest.py, you can't always pass environment info into it. Don't worry, it's staying exactly as it is. I've added a single short file to several ctest directories ...; - [x] moved `setup.cfg` to `pytest.ini` and install it. only pytest was using the setup.cfg file anyways. all labels (things you can `pytest -m quick` akin to `ctest -L quick`) are stored here instead of duplicated btwn setup.cfg and conftest.py. The GHA will complain if you hit unregistered label.; - [x] changed the pytest import_mode from default to ""importlib"". this means (1) we don't need to have empty `__init__.py` in all 500 ctest directories and (2) avoid name conflicts when collecting ctests. Result is that tests/pytests is no longer a module, so a lot of the `from .utils import ...` become `from utils import ...` etc. Those names are looking generic, so may need to rename in future. - Testing Details; - [x] in tests, rewrote `using(package)` function whose role is to detect whether package present and skip test otherwise. now the fn additionally adds ""addon"" label and the name of the package label, so one can run `pytest -m dftd3`. to do this, had to separate into two fns: `uusing` for nested decorator marks and `using` for list marks.; - [x] to avoid FutureWarning, changed three `distutils.dir_util.copy_tree` into `shutil.copytree`. this is a py38 language feature, the first actual breaking of py37+ compatibility.; - [x] added the openfermion demo as test; - [x] apparently 3body in dftd3 fails on Mac. near-term goal is replacing, so skip for now; - [x] newly install pytest.ini and install any test_input.py, input.dat, and input.py from tests/ . sensibly, input.dat/py would only get installed if test_input.py",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454
https://github.com/psi4/psi4/pull/2454:3533,Testability,Test,Testing,3533,"parameterizations, and by passing through TestingMacros and runtest.py, you can't always pass environment info into it. Don't worry, it's staying exactly as it is. I've added a single short file to several ctest directories ...; - [x] moved `setup.cfg` to `pytest.ini` and install it. only pytest was using the setup.cfg file anyways. all labels (things you can `pytest -m quick` akin to `ctest -L quick`) are stored here instead of duplicated btwn setup.cfg and conftest.py. The GHA will complain if you hit unregistered label.; - [x] changed the pytest import_mode from default to ""importlib"". this means (1) we don't need to have empty `__init__.py` in all 500 ctest directories and (2) avoid name conflicts when collecting ctests. Result is that tests/pytests is no longer a module, so a lot of the `from .utils import ...` become `from utils import ...` etc. Those names are looking generic, so may need to rename in future. - Testing Details; - [x] in tests, rewrote `using(package)` function whose role is to detect whether package present and skip test otherwise. now the fn additionally adds ""addon"" label and the name of the package label, so one can run `pytest -m dftd3`. to do this, had to separate into two fns: `uusing` for nested decorator marks and `using` for list marks.; - [x] to avoid FutureWarning, changed three `distutils.dir_util.copy_tree` into `shutil.copytree`. this is a py38 language feature, the first actual breaking of py37+ compatibility.; - [x] added the openfermion demo as test; - [x] apparently 3body in dftd3 fails on Mac. near-term goal is replacing, so skip for now; - [x] newly install pytest.ini and install any test_input.py, input.dat, and input.py from tests/ . sensibly, input.dat/py would only get installed if test_input.py present, but I can't teach cmake that logic, so it's either this or have to register each pytest-prepared psithon test. aux files from tests/ are also installed but these have to be registered with cmake.; - [x] moved `compare_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454
https://github.com/psi4/psi4/pull/2454:3559,Testability,test,tests,3559,"parameterizations, and by passing through TestingMacros and runtest.py, you can't always pass environment info into it. Don't worry, it's staying exactly as it is. I've added a single short file to several ctest directories ...; - [x] moved `setup.cfg` to `pytest.ini` and install it. only pytest was using the setup.cfg file anyways. all labels (things you can `pytest -m quick` akin to `ctest -L quick`) are stored here instead of duplicated btwn setup.cfg and conftest.py. The GHA will complain if you hit unregistered label.; - [x] changed the pytest import_mode from default to ""importlib"". this means (1) we don't need to have empty `__init__.py` in all 500 ctest directories and (2) avoid name conflicts when collecting ctests. Result is that tests/pytests is no longer a module, so a lot of the `from .utils import ...` become `from utils import ...` etc. Those names are looking generic, so may need to rename in future. - Testing Details; - [x] in tests, rewrote `using(package)` function whose role is to detect whether package present and skip test otherwise. now the fn additionally adds ""addon"" label and the name of the package label, so one can run `pytest -m dftd3`. to do this, had to separate into two fns: `uusing` for nested decorator marks and `using` for list marks.; - [x] to avoid FutureWarning, changed three `distutils.dir_util.copy_tree` into `shutil.copytree`. this is a py38 language feature, the first actual breaking of py37+ compatibility.; - [x] added the openfermion demo as test; - [x] apparently 3body in dftd3 fails on Mac. near-term goal is replacing, so skip for now; - [x] newly install pytest.ini and install any test_input.py, input.dat, and input.py from tests/ . sensibly, input.dat/py would only get installed if test_input.py present, but I can't teach cmake that logic, so it's either this or have to register each pytest-prepared psithon test. aux files from tests/ are also installed but these have to be registered with cmake.; - [x] moved `compare_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454
https://github.com/psi4/psi4/pull/2454:3657,Testability,test,test,3657,"parameterizations, and by passing through TestingMacros and runtest.py, you can't always pass environment info into it. Don't worry, it's staying exactly as it is. I've added a single short file to several ctest directories ...; - [x] moved `setup.cfg` to `pytest.ini` and install it. only pytest was using the setup.cfg file anyways. all labels (things you can `pytest -m quick` akin to `ctest -L quick`) are stored here instead of duplicated btwn setup.cfg and conftest.py. The GHA will complain if you hit unregistered label.; - [x] changed the pytest import_mode from default to ""importlib"". this means (1) we don't need to have empty `__init__.py` in all 500 ctest directories and (2) avoid name conflicts when collecting ctests. Result is that tests/pytests is no longer a module, so a lot of the `from .utils import ...` become `from utils import ...` etc. Those names are looking generic, so may need to rename in future. - Testing Details; - [x] in tests, rewrote `using(package)` function whose role is to detect whether package present and skip test otherwise. now the fn additionally adds ""addon"" label and the name of the package label, so one can run `pytest -m dftd3`. to do this, had to separate into two fns: `uusing` for nested decorator marks and `using` for list marks.; - [x] to avoid FutureWarning, changed three `distutils.dir_util.copy_tree` into `shutil.copytree`. this is a py38 language feature, the first actual breaking of py37+ compatibility.; - [x] added the openfermion demo as test; - [x] apparently 3body in dftd3 fails on Mac. near-term goal is replacing, so skip for now; - [x] newly install pytest.ini and install any test_input.py, input.dat, and input.py from tests/ . sensibly, input.dat/py would only get installed if test_input.py present, but I can't teach cmake that logic, so it's either this or have to register each pytest-prepared psithon test. aux files from tests/ are also installed but these have to be registered with cmake.; - [x] moved `compare_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454
https://github.com/psi4/psi4/pull/2454:4111,Testability,test,test,4111,"tered label.; - [x] changed the pytest import_mode from default to ""importlib"". this means (1) we don't need to have empty `__init__.py` in all 500 ctest directories and (2) avoid name conflicts when collecting ctests. Result is that tests/pytests is no longer a module, so a lot of the `from .utils import ...` become `from utils import ...` etc. Those names are looking generic, so may need to rename in future. - Testing Details; - [x] in tests, rewrote `using(package)` function whose role is to detect whether package present and skip test otherwise. now the fn additionally adds ""addon"" label and the name of the package label, so one can run `pytest -m dftd3`. to do this, had to separate into two fns: `uusing` for nested decorator marks and `using` for list marks.; - [x] to avoid FutureWarning, changed three `distutils.dir_util.copy_tree` into `shutil.copytree`. this is a py38 language feature, the first actual breaking of py37+ compatibility.; - [x] added the openfermion demo as test; - [x] apparently 3body in dftd3 fails on Mac. near-term goal is replacing, so skip for now; - [x] newly install pytest.ini and install any test_input.py, input.dat, and input.py from tests/ . sensibly, input.dat/py would only get installed if test_input.py present, but I can't teach cmake that logic, so it's either this or have to register each pytest-prepared psithon test. aux files from tests/ are also installed but these have to be registered with cmake.; - [x] moved `compare_moldenfiles()` from testing code to driver alongside `compare_fchkfiles()` so that it can be documented.; - [x] ""psi"" and ""api"" marks added to all tests/pytests/ files for reasons explained in docs. - Docs; - [x] Updated the add_tests documentation, esp. wrt pytest; - [x] Might have done enough of the outline to close #2396 ; - [x] Straightened out docstring inheritance for all the compare_* fns and added to docs.; - [x] light updating of user testing docs in build_planning.rst. - Misc.; - [x] improved `psi4.ext",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454
https://github.com/psi4/psi4/pull/2454:4300,Testability,test,tests,4300,"e conflicts when collecting ctests. Result is that tests/pytests is no longer a module, so a lot of the `from .utils import ...` become `from utils import ...` etc. Those names are looking generic, so may need to rename in future. - Testing Details; - [x] in tests, rewrote `using(package)` function whose role is to detect whether package present and skip test otherwise. now the fn additionally adds ""addon"" label and the name of the package label, so one can run `pytest -m dftd3`. to do this, had to separate into two fns: `uusing` for nested decorator marks and `using` for list marks.; - [x] to avoid FutureWarning, changed three `distutils.dir_util.copy_tree` into `shutil.copytree`. this is a py38 language feature, the first actual breaking of py37+ compatibility.; - [x] added the openfermion demo as test; - [x] apparently 3body in dftd3 fails on Mac. near-term goal is replacing, so skip for now; - [x] newly install pytest.ini and install any test_input.py, input.dat, and input.py from tests/ . sensibly, input.dat/py would only get installed if test_input.py present, but I can't teach cmake that logic, so it's either this or have to register each pytest-prepared psithon test. aux files from tests/ are also installed but these have to be registered with cmake.; - [x] moved `compare_moldenfiles()` from testing code to driver alongside `compare_fchkfiles()` so that it can be documented.; - [x] ""psi"" and ""api"" marks added to all tests/pytests/ files for reasons explained in docs. - Docs; - [x] Updated the add_tests documentation, esp. wrt pytest; - [x] Might have done enough of the outline to close #2396 ; - [x] Straightened out docstring inheritance for all the compare_* fns and added to docs.; - [x] light updating of user testing docs in build_planning.rst. - Misc.; - [x] improved `psi4.extras()` printing so you know what you're missing: `['adcc', 'ambit', 'c̶c̶t̶3̶', ...`; - [x] fixed some FutureWarnings like replacing `set_module_options`; - [x] added ""maxeco"" conda ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454
https://github.com/psi4/psi4/pull/2454:4412,Testability,log,logic,4412,"ome `from utils import ...` etc. Those names are looking generic, so may need to rename in future. - Testing Details; - [x] in tests, rewrote `using(package)` function whose role is to detect whether package present and skip test otherwise. now the fn additionally adds ""addon"" label and the name of the package label, so one can run `pytest -m dftd3`. to do this, had to separate into two fns: `uusing` for nested decorator marks and `using` for list marks.; - [x] to avoid FutureWarning, changed three `distutils.dir_util.copy_tree` into `shutil.copytree`. this is a py38 language feature, the first actual breaking of py37+ compatibility.; - [x] added the openfermion demo as test; - [x] apparently 3body in dftd3 fails on Mac. near-term goal is replacing, so skip for now; - [x] newly install pytest.ini and install any test_input.py, input.dat, and input.py from tests/ . sensibly, input.dat/py would only get installed if test_input.py present, but I can't teach cmake that logic, so it's either this or have to register each pytest-prepared psithon test. aux files from tests/ are also installed but these have to be registered with cmake.; - [x] moved `compare_moldenfiles()` from testing code to driver alongside `compare_fchkfiles()` so that it can be documented.; - [x] ""psi"" and ""api"" marks added to all tests/pytests/ files for reasons explained in docs. - Docs; - [x] Updated the add_tests documentation, esp. wrt pytest; - [x] Might have done enough of the outline to close #2396 ; - [x] Straightened out docstring inheritance for all the compare_* fns and added to docs.; - [x] light updating of user testing docs in build_planning.rst. - Misc.; - [x] improved `psi4.extras()` printing so you know what you're missing: `['adcc', 'ambit', 'c̶c̶t̶3̶', ...`; - [x] fixed some FutureWarnings like replacing `set_module_options`; - [x] added ""maxeco"" conda env files to devtools/ for each platform for developers/users who prefer those to psi4-dev conda package. they were generated from t",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454
https://github.com/psi4/psi4/pull/2454:4488,Testability,test,test,4488,"ome `from utils import ...` etc. Those names are looking generic, so may need to rename in future. - Testing Details; - [x] in tests, rewrote `using(package)` function whose role is to detect whether package present and skip test otherwise. now the fn additionally adds ""addon"" label and the name of the package label, so one can run `pytest -m dftd3`. to do this, had to separate into two fns: `uusing` for nested decorator marks and `using` for list marks.; - [x] to avoid FutureWarning, changed three `distutils.dir_util.copy_tree` into `shutil.copytree`. this is a py38 language feature, the first actual breaking of py37+ compatibility.; - [x] added the openfermion demo as test; - [x] apparently 3body in dftd3 fails on Mac. near-term goal is replacing, so skip for now; - [x] newly install pytest.ini and install any test_input.py, input.dat, and input.py from tests/ . sensibly, input.dat/py would only get installed if test_input.py present, but I can't teach cmake that logic, so it's either this or have to register each pytest-prepared psithon test. aux files from tests/ are also installed but these have to be registered with cmake.; - [x] moved `compare_moldenfiles()` from testing code to driver alongside `compare_fchkfiles()` so that it can be documented.; - [x] ""psi"" and ""api"" marks added to all tests/pytests/ files for reasons explained in docs. - Docs; - [x] Updated the add_tests documentation, esp. wrt pytest; - [x] Might have done enough of the outline to close #2396 ; - [x] Straightened out docstring inheritance for all the compare_* fns and added to docs.; - [x] light updating of user testing docs in build_planning.rst. - Misc.; - [x] improved `psi4.extras()` printing so you know what you're missing: `['adcc', 'ambit', 'c̶c̶t̶3̶', ...`; - [x] fixed some FutureWarnings like replacing `set_module_options`; - [x] added ""maxeco"" conda env files to devtools/ for each platform for developers/users who prefer those to psi4-dev conda package. they were generated from t",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454
https://github.com/psi4/psi4/pull/2454:4509,Testability,test,tests,4509,"sting Details; - [x] in tests, rewrote `using(package)` function whose role is to detect whether package present and skip test otherwise. now the fn additionally adds ""addon"" label and the name of the package label, so one can run `pytest -m dftd3`. to do this, had to separate into two fns: `uusing` for nested decorator marks and `using` for list marks.; - [x] to avoid FutureWarning, changed three `distutils.dir_util.copy_tree` into `shutil.copytree`. this is a py38 language feature, the first actual breaking of py37+ compatibility.; - [x] added the openfermion demo as test; - [x] apparently 3body in dftd3 fails on Mac. near-term goal is replacing, so skip for now; - [x] newly install pytest.ini and install any test_input.py, input.dat, and input.py from tests/ . sensibly, input.dat/py would only get installed if test_input.py present, but I can't teach cmake that logic, so it's either this or have to register each pytest-prepared psithon test. aux files from tests/ are also installed but these have to be registered with cmake.; - [x] moved `compare_moldenfiles()` from testing code to driver alongside `compare_fchkfiles()` so that it can be documented.; - [x] ""psi"" and ""api"" marks added to all tests/pytests/ files for reasons explained in docs. - Docs; - [x] Updated the add_tests documentation, esp. wrt pytest; - [x] Might have done enough of the outline to close #2396 ; - [x] Straightened out docstring inheritance for all the compare_* fns and added to docs.; - [x] light updating of user testing docs in build_planning.rst. - Misc.; - [x] improved `psi4.extras()` printing so you know what you're missing: `['adcc', 'ambit', 'c̶c̶t̶3̶', ...`; - [x] fixed some FutureWarnings like replacing `set_module_options`; - [x] added ""maxeco"" conda env files to devtools/ for each platform for developers/users who prefer those to psi4-dev conda package. they were generated from the ecosystem GHA but not autoupdated -- that may happen in a future GHA from master; - [x] added passing",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454
https://github.com/psi4/psi4/pull/2454:4621,Testability,test,testing,4621,"resent and skip test otherwise. now the fn additionally adds ""addon"" label and the name of the package label, so one can run `pytest -m dftd3`. to do this, had to separate into two fns: `uusing` for nested decorator marks and `using` for list marks.; - [x] to avoid FutureWarning, changed three `distutils.dir_util.copy_tree` into `shutil.copytree`. this is a py38 language feature, the first actual breaking of py37+ compatibility.; - [x] added the openfermion demo as test; - [x] apparently 3body in dftd3 fails on Mac. near-term goal is replacing, so skip for now; - [x] newly install pytest.ini and install any test_input.py, input.dat, and input.py from tests/ . sensibly, input.dat/py would only get installed if test_input.py present, but I can't teach cmake that logic, so it's either this or have to register each pytest-prepared psithon test. aux files from tests/ are also installed but these have to be registered with cmake.; - [x] moved `compare_moldenfiles()` from testing code to driver alongside `compare_fchkfiles()` so that it can be documented.; - [x] ""psi"" and ""api"" marks added to all tests/pytests/ files for reasons explained in docs. - Docs; - [x] Updated the add_tests documentation, esp. wrt pytest; - [x] Might have done enough of the outline to close #2396 ; - [x] Straightened out docstring inheritance for all the compare_* fns and added to docs.; - [x] light updating of user testing docs in build_planning.rst. - Misc.; - [x] improved `psi4.extras()` printing so you know what you're missing: `['adcc', 'ambit', 'c̶c̶t̶3̶', ...`; - [x] fixed some FutureWarnings like replacing `set_module_options`; - [x] added ""maxeco"" conda env files to devtools/ for each platform for developers/users who prefer those to psi4-dev conda package. they were generated from the ecosystem GHA but not autoupdated -- that may happen in a future GHA from master; - [x] added passing `CMAKE_OSX_DEPLOYMENT_TARGET` and `CMAKE_OSX_SYSROOT` cmakevars to internal builds. this is how the macOS",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454
https://github.com/psi4/psi4/pull/2454:4748,Testability,test,tests,4748,"o one can run `pytest -m dftd3`. to do this, had to separate into two fns: `uusing` for nested decorator marks and `using` for list marks.; - [x] to avoid FutureWarning, changed three `distutils.dir_util.copy_tree` into `shutil.copytree`. this is a py38 language feature, the first actual breaking of py37+ compatibility.; - [x] added the openfermion demo as test; - [x] apparently 3body in dftd3 fails on Mac. near-term goal is replacing, so skip for now; - [x] newly install pytest.ini and install any test_input.py, input.dat, and input.py from tests/ . sensibly, input.dat/py would only get installed if test_input.py present, but I can't teach cmake that logic, so it's either this or have to register each pytest-prepared psithon test. aux files from tests/ are also installed but these have to be registered with cmake.; - [x] moved `compare_moldenfiles()` from testing code to driver alongside `compare_fchkfiles()` so that it can be documented.; - [x] ""psi"" and ""api"" marks added to all tests/pytests/ files for reasons explained in docs. - Docs; - [x] Updated the add_tests documentation, esp. wrt pytest; - [x] Might have done enough of the outline to close #2396 ; - [x] Straightened out docstring inheritance for all the compare_* fns and added to docs.; - [x] light updating of user testing docs in build_planning.rst. - Misc.; - [x] improved `psi4.extras()` printing so you know what you're missing: `['adcc', 'ambit', 'c̶c̶t̶3̶', ...`; - [x] fixed some FutureWarnings like replacing `set_module_options`; - [x] added ""maxeco"" conda env files to devtools/ for each platform for developers/users who prefer those to psi4-dev conda package. they were generated from the ecosystem GHA but not autoupdated -- that may happen in a future GHA from master; - [x] added passing `CMAKE_OSX_DEPLOYMENT_TARGET` and `CMAKE_OSX_SYSROOT` cmakevars to internal builds. this is how the macOS SDK gets passed through, apparently, for C/C++. it happens through `CMAKE_Fortran_FLAGS` for Fortran. proven ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454
https://github.com/psi4/psi4/pull/2454:5049,Testability,test,testing,5049," of py37+ compatibility.; - [x] added the openfermion demo as test; - [x] apparently 3body in dftd3 fails on Mac. near-term goal is replacing, so skip for now; - [x] newly install pytest.ini and install any test_input.py, input.dat, and input.py from tests/ . sensibly, input.dat/py would only get installed if test_input.py present, but I can't teach cmake that logic, so it's either this or have to register each pytest-prepared psithon test. aux files from tests/ are also installed but these have to be registered with cmake.; - [x] moved `compare_moldenfiles()` from testing code to driver alongside `compare_fchkfiles()` so that it can be documented.; - [x] ""psi"" and ""api"" marks added to all tests/pytests/ files for reasons explained in docs. - Docs; - [x] Updated the add_tests documentation, esp. wrt pytest; - [x] Might have done enough of the outline to close #2396 ; - [x] Straightened out docstring inheritance for all the compare_* fns and added to docs.; - [x] light updating of user testing docs in build_planning.rst. - Misc.; - [x] improved `psi4.extras()` printing so you know what you're missing: `['adcc', 'ambit', 'c̶c̶t̶3̶', ...`; - [x] fixed some FutureWarnings like replacing `set_module_options`; - [x] added ""maxeco"" conda env files to devtools/ for each platform for developers/users who prefer those to psi4-dev conda package. they were generated from the ecosystem GHA but not autoupdated -- that may happen in a future GHA from master; - [x] added passing `CMAKE_OSX_DEPLOYMENT_TARGET` and `CMAKE_OSX_SYSROOT` cmakevars to internal builds. this is how the macOS SDK gets passed through, apparently, for C/C++. it happens through `CMAKE_Fortran_FLAGS` for Fortran. proven necessary for v2rdm_casscf, so I rolled it out to all the compiled externals.; - [x] for ambit, added Python and pb11 cmakevars that are proper for the new de-boosted and new-python-searched version. left old (capital PYTHON) for now. ## Questions; - [ ] PR is mostly CI, so non-user-facing, and t",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454
https://github.com/psi4/psi4/pull/2454:6048,Testability,test,testing,6048,"ance for all the compare_* fns and added to docs.; - [x] light updating of user testing docs in build_planning.rst. - Misc.; - [x] improved `psi4.extras()` printing so you know what you're missing: `['adcc', 'ambit', 'c̶c̶t̶3̶', ...`; - [x] fixed some FutureWarnings like replacing `set_module_options`; - [x] added ""maxeco"" conda env files to devtools/ for each platform for developers/users who prefer those to psi4-dev conda package. they were generated from the ecosystem GHA but not autoupdated -- that may happen in a future GHA from master; - [x] added passing `CMAKE_OSX_DEPLOYMENT_TARGET` and `CMAKE_OSX_SYSROOT` cmakevars to internal builds. this is how the macOS SDK gets passed through, apparently, for C/C++. it happens through `CMAKE_Fortran_FLAGS` for Fortran. proven necessary for v2rdm_casscf, so I rolled it out to all the compiled externals.; - [x] for ambit, added Python and pb11 cmakevars that are proper for the new de-boosted and new-python-searched version. left old (capital PYTHON) for now. ## Questions; - [ ] PR is mostly CI, so non-user-facing, and testing supplements, so non-user-changing. But it requires cutting-edge pytest 7 (released Dec 2021) available from conda c-f and pypi, not from conda defaults yet. ok to demand of users? most aren't running pytests I would guess.; - [ ] In documenting psi4 compare functions, have to autodoc qcel compare fn, and that shows up a circular import in forward declaration of types (bet you didn't think that would be a sentence applied to Python 5 years ago) that produces a Sphinx warning. I've figured out how to edit qcel to avoid this, but until that makes its way into a release, we may have to turn off warnings-as-errors in psi4 docs build. ok?. close #1708. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge !SQUASH!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454
https://github.com/psi4/psi4/pull/2454:6731,Testability,Test,Tests,6731,"ance for all the compare_* fns and added to docs.; - [x] light updating of user testing docs in build_planning.rst. - Misc.; - [x] improved `psi4.extras()` printing so you know what you're missing: `['adcc', 'ambit', 'c̶c̶t̶3̶', ...`; - [x] fixed some FutureWarnings like replacing `set_module_options`; - [x] added ""maxeco"" conda env files to devtools/ for each platform for developers/users who prefer those to psi4-dev conda package. they were generated from the ecosystem GHA but not autoupdated -- that may happen in a future GHA from master; - [x] added passing `CMAKE_OSX_DEPLOYMENT_TARGET` and `CMAKE_OSX_SYSROOT` cmakevars to internal builds. this is how the macOS SDK gets passed through, apparently, for C/C++. it happens through `CMAKE_Fortran_FLAGS` for Fortran. proven necessary for v2rdm_casscf, so I rolled it out to all the compiled externals.; - [x] for ambit, added Python and pb11 cmakevars that are proper for the new de-boosted and new-python-searched version. left old (capital PYTHON) for now. ## Questions; - [ ] PR is mostly CI, so non-user-facing, and testing supplements, so non-user-changing. But it requires cutting-edge pytest 7 (released Dec 2021) available from conda c-f and pypi, not from conda defaults yet. ok to demand of users? most aren't running pytests I would guess.; - [ ] In documenting psi4 compare functions, have to autodoc qcel compare fn, and that shows up a circular import in forward declaration of types (bet you didn't think that would be a sentence applied to Python 5 years ago) that produces a Sphinx warning. I've figured out how to edit qcel to avoid this, but until that makes its way into a release, we may have to turn off warnings-as-errors in psi4 docs build. ok?. close #1708. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge !SQUASH!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454
https://github.com/psi4/psi4/pull/2454:6805,Testability,test,tests,6805,"ance for all the compare_* fns and added to docs.; - [x] light updating of user testing docs in build_planning.rst. - Misc.; - [x] improved `psi4.extras()` printing so you know what you're missing: `['adcc', 'ambit', 'c̶c̶t̶3̶', ...`; - [x] fixed some FutureWarnings like replacing `set_module_options`; - [x] added ""maxeco"" conda env files to devtools/ for each platform for developers/users who prefer those to psi4-dev conda package. they were generated from the ecosystem GHA but not autoupdated -- that may happen in a future GHA from master; - [x] added passing `CMAKE_OSX_DEPLOYMENT_TARGET` and `CMAKE_OSX_SYSROOT` cmakevars to internal builds. this is how the macOS SDK gets passed through, apparently, for C/C++. it happens through `CMAKE_Fortran_FLAGS` for Fortran. proven necessary for v2rdm_casscf, so I rolled it out to all the compiled externals.; - [x] for ambit, added Python and pb11 cmakevars that are proper for the new de-boosted and new-python-searched version. left old (capital PYTHON) for now. ## Questions; - [ ] PR is mostly CI, so non-user-facing, and testing supplements, so non-user-changing. But it requires cutting-edge pytest 7 (released Dec 2021) available from conda c-f and pypi, not from conda defaults yet. ok to demand of users? most aren't running pytests I would guess.; - [ ] In documenting psi4 compare functions, have to autodoc qcel compare fn, and that shows up a circular import in forward declaration of types (bet you didn't think that would be a sentence applied to Python 5 years ago) that produces a Sphinx warning. I've figured out how to edit qcel to avoid this, but until that makes its way into a release, we may have to turn off warnings-as-errors in psi4 docs build. ok?. close #1708. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge !SQUASH!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454
https://github.com/psi4/psi4/pull/2454:6896,Testability,test,tests,6896,"ance for all the compare_* fns and added to docs.; - [x] light updating of user testing docs in build_planning.rst. - Misc.; - [x] improved `psi4.extras()` printing so you know what you're missing: `['adcc', 'ambit', 'c̶c̶t̶3̶', ...`; - [x] fixed some FutureWarnings like replacing `set_module_options`; - [x] added ""maxeco"" conda env files to devtools/ for each platform for developers/users who prefer those to psi4-dev conda package. they were generated from the ecosystem GHA but not autoupdated -- that may happen in a future GHA from master; - [x] added passing `CMAKE_OSX_DEPLOYMENT_TARGET` and `CMAKE_OSX_SYSROOT` cmakevars to internal builds. this is how the macOS SDK gets passed through, apparently, for C/C++. it happens through `CMAKE_Fortran_FLAGS` for Fortran. proven necessary for v2rdm_casscf, so I rolled it out to all the compiled externals.; - [x] for ambit, added Python and pb11 cmakevars that are proper for the new de-boosted and new-python-searched version. left old (capital PYTHON) for now. ## Questions; - [ ] PR is mostly CI, so non-user-facing, and testing supplements, so non-user-changing. But it requires cutting-edge pytest 7 (released Dec 2021) available from conda c-f and pypi, not from conda defaults yet. ok to demand of users? most aren't running pytests I would guess.; - [ ] In documenting psi4 compare functions, have to autodoc qcel compare fn, and that shows up a circular import in forward declaration of types (bet you didn't think that would be a sentence applied to Python 5 years ago) that produces a Sphinx warning. I've figured out how to edit qcel to avoid this, but until that makes its way into a release, we may have to turn off warnings-as-errors in psi4 docs build. ok?. close #1708. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge !SQUASH!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2454
https://github.com/psi4/psi4/pull/2455:162,Deployability,update,updates,162,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Main point is to add scipy to Windows conda requirements, so package builds. Also updates some labels for 3.8+. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2455
https://github.com/psi4/psi4/pull/2456:352,Availability,ping,pings,352,## Description; This PR fixes some typos in `cc29` which reduced test coverage and also migrates `cc30` and `cc31` from autotest to ctest. `cc32` and `cc33` are good as written. This is PR 7 in an ongoing series to make ccdensity compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. Obligatory @lothian and @loriab pings - reviews appreciated but not mandatory. ## Checklist; - [x] Changed tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2456
https://github.com/psi4/psi4/pull/2456:57,Energy Efficiency,reduce,reduced,57,## Description; This PR fixes some typos in `cc29` which reduced test coverage and also migrates `cc30` and `cc31` from autotest to ctest. `cc32` and `cc33` are good as written. This is PR 7 in an ongoing series to make ccdensity compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. Obligatory @lothian and @loriab pings - reviews appreciated but not mandatory. ## Checklist; - [x] Changed tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2456
https://github.com/psi4/psi4/pull/2456:65,Testability,test,test,65,## Description; This PR fixes some typos in `cc29` which reduced test coverage and also migrates `cc30` and `cc31` from autotest to ctest. `cc32` and `cc33` are good as written. This is PR 7 in an ongoing series to make ccdensity compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. Obligatory @lothian and @loriab pings - reviews appreciated but not mandatory. ## Checklist; - [x] Changed tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2456
https://github.com/psi4/psi4/pull/2456:427,Testability,test,tests,427,## Description; This PR fixes some typos in `cc29` which reduced test coverage and also migrates `cc30` and `cc31` from autotest to ctest. `cc32` and `cc33` are good as written. This is PR 7 in an ongoing series to make ccdensity compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. Obligatory @lothian and @loriab pings - reviews appreciated but not mandatory. ## Checklist; - [x] Changed tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2456
https://github.com/psi4/psi4/issues/2457:680,Availability,failure,failure,680,"Consider the following input file:; ```; molecule h2o {; symmetry c1; 0 1 ; O; H 1 0.957119; H 1 0.957119 2 104.225; }. set {; basis cc-pVDZ; freeze_core true; pair_energies_print true; cachelevel 1; }. energy('ccsd'); energy('ccsd'); ```. The second time the MP2 orbital energies are printed, they use the CCSD values. This is because the MP2 values are initialized from the [tau amplitudes](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/pair_energies.cc#L69), but those initialize to the values from the first computation. I attempted to fix this by changing the line in question to read amplitudes from the DPD file ""tauIjAb (MP2)"", but this caused a test failure for low values of `cachelevel`, as the MP2 amplitudes are not saved, but the CCSD amplitudes were, for reasons that are unclear to me. The correct fix is also unclear to me.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2457
https://github.com/psi4/psi4/issues/2457:203,Energy Efficiency,energy,energy,203,"Consider the following input file:; ```; molecule h2o {; symmetry c1; 0 1 ; O; H 1 0.957119; H 1 0.957119 2 104.225; }. set {; basis cc-pVDZ; freeze_core true; pair_energies_print true; cachelevel 1; }. energy('ccsd'); energy('ccsd'); ```. The second time the MP2 orbital energies are printed, they use the CCSD values. This is because the MP2 values are initialized from the [tau amplitudes](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/pair_energies.cc#L69), but those initialize to the values from the first computation. I attempted to fix this by changing the line in question to read amplitudes from the DPD file ""tauIjAb (MP2)"", but this caused a test failure for low values of `cachelevel`, as the MP2 amplitudes are not saved, but the CCSD amplitudes were, for reasons that are unclear to me. The correct fix is also unclear to me.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2457
https://github.com/psi4/psi4/issues/2457:219,Energy Efficiency,energy,energy,219,"Consider the following input file:; ```; molecule h2o {; symmetry c1; 0 1 ; O; H 1 0.957119; H 1 0.957119 2 104.225; }. set {; basis cc-pVDZ; freeze_core true; pair_energies_print true; cachelevel 1; }. energy('ccsd'); energy('ccsd'); ```. The second time the MP2 orbital energies are printed, they use the CCSD values. This is because the MP2 values are initialized from the [tau amplitudes](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/pair_energies.cc#L69), but those initialize to the values from the first computation. I attempted to fix this by changing the line in question to read amplitudes from the DPD file ""tauIjAb (MP2)"", but this caused a test failure for low values of `cachelevel`, as the MP2 amplitudes are not saved, but the CCSD amplitudes were, for reasons that are unclear to me. The correct fix is also unclear to me.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2457
https://github.com/psi4/psi4/issues/2457:186,Performance,cache,cachelevel,186,"Consider the following input file:; ```; molecule h2o {; symmetry c1; 0 1 ; O; H 1 0.957119; H 1 0.957119 2 104.225; }. set {; basis cc-pVDZ; freeze_core true; pair_energies_print true; cachelevel 1; }. energy('ccsd'); energy('ccsd'); ```. The second time the MP2 orbital energies are printed, they use the CCSD values. This is because the MP2 values are initialized from the [tau amplitudes](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/pair_energies.cc#L69), but those initialize to the values from the first computation. I attempted to fix this by changing the line in question to read amplitudes from the DPD file ""tauIjAb (MP2)"", but this caused a test failure for low values of `cachelevel`, as the MP2 amplitudes are not saved, but the CCSD amplitudes were, for reasons that are unclear to me. The correct fix is also unclear to me.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2457
https://github.com/psi4/psi4/issues/2457:707,Performance,cache,cachelevel,707,"Consider the following input file:; ```; molecule h2o {; symmetry c1; 0 1 ; O; H 1 0.957119; H 1 0.957119 2 104.225; }. set {; basis cc-pVDZ; freeze_core true; pair_energies_print true; cachelevel 1; }. energy('ccsd'); energy('ccsd'); ```. The second time the MP2 orbital energies are printed, they use the CCSD values. This is because the MP2 values are initialized from the [tau amplitudes](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/pair_energies.cc#L69), but those initialize to the values from the first computation. I attempted to fix this by changing the line in question to read amplitudes from the DPD file ""tauIjAb (MP2)"", but this caused a test failure for low values of `cachelevel`, as the MP2 amplitudes are not saved, but the CCSD amplitudes were, for reasons that are unclear to me. The correct fix is also unclear to me.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2457
https://github.com/psi4/psi4/issues/2457:675,Testability,test,test,675,"Consider the following input file:; ```; molecule h2o {; symmetry c1; 0 1 ; O; H 1 0.957119; H 1 0.957119 2 104.225; }. set {; basis cc-pVDZ; freeze_core true; pair_energies_print true; cachelevel 1; }. energy('ccsd'); energy('ccsd'); ```. The second time the MP2 orbital energies are printed, they use the CCSD values. This is because the MP2 values are initialized from the [tau amplitudes](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/pair_energies.cc#L69), but those initialize to the values from the first computation. I attempted to fix this by changing the line in question to read amplitudes from the DPD file ""tauIjAb (MP2)"", but this caused a test failure for low values of `cachelevel`, as the MP2 amplitudes are not saved, but the CCSD amplitudes were, for reasons that are unclear to me. The correct fix is also unclear to me.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2457
https://github.com/psi4/psi4/issues/2458:230,Deployability,update,update,230,"Consider the following:; ```; molecule {; O; H 1 1.0 ; H 1 1.0 2 104.5; }. set maxiter 2; energy(""scf/cc-pvdz""); set guess sadno; energy(""scf/cc-pvdz""); ```. The second run does not use the new guess type, but the guess type will update if the absurdly low `set maxiter` is removed.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2458
https://github.com/psi4/psi4/issues/2458:90,Energy Efficiency,energy,energy,90,"Consider the following:; ```; molecule {; O; H 1 1.0 ; H 1 1.0 2 104.5; }. set maxiter 2; energy(""scf/cc-pvdz""); set guess sadno; energy(""scf/cc-pvdz""); ```. The second run does not use the new guess type, but the guess type will update if the absurdly low `set maxiter` is removed.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2458
https://github.com/psi4/psi4/issues/2458:130,Energy Efficiency,energy,energy,130,"Consider the following:; ```; molecule {; O; H 1 1.0 ; H 1 1.0 2 104.5; }. set maxiter 2; energy(""scf/cc-pvdz""); set guess sadno; energy(""scf/cc-pvdz""); ```. The second run does not use the new guess type, but the guess type will update if the absurdly low `set maxiter` is removed.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2458
https://github.com/psi4/psi4/pull/2460:81,Testability,test,tests,81,"## Description; As of this PR, cctests 1-33, 35-39 are ported. The next batch of tests will involve EOM oscillator strengths. ## Checklist; - [x] Edited tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2460
https://github.com/psi4/psi4/pull/2460:153,Testability,test,tests,153,"## Description; As of this PR, cctests 1-33, 35-39 are ported. The next batch of tests will involve EOM oscillator strengths. ## Checklist; - [x] Edited tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2460
https://github.com/psi4/psi4/pull/2461:88,Testability,test,test,88,"## Description; As of this PR, cctests 1-33, 35-45 are ported. `cc44` and `cc45` (which test EOM root energies) needed no modifications. The tests added here cover CC2 rotational proeprties. Next on the list is an EOM dipole test, possibly bundled with an oscillator strength test. @loriab @lothian . ## Checklist; - [x] Changed tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2461
https://github.com/psi4/psi4/pull/2461:141,Testability,test,tests,141,"## Description; As of this PR, cctests 1-33, 35-45 are ported. `cc44` and `cc45` (which test EOM root energies) needed no modifications. The tests added here cover CC2 rotational proeprties. Next on the list is an EOM dipole test, possibly bundled with an oscillator strength test. @loriab @lothian . ## Checklist; - [x] Changed tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2461
https://github.com/psi4/psi4/pull/2461:225,Testability,test,test,225,"## Description; As of this PR, cctests 1-33, 35-45 are ported. `cc44` and `cc45` (which test EOM root energies) needed no modifications. The tests added here cover CC2 rotational proeprties. Next on the list is an EOM dipole test, possibly bundled with an oscillator strength test. @loriab @lothian . ## Checklist; - [x] Changed tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2461
https://github.com/psi4/psi4/pull/2461:276,Testability,test,test,276,"## Description; As of this PR, cctests 1-33, 35-45 are ported. `cc44` and `cc45` (which test EOM root energies) needed no modifications. The tests added here cover CC2 rotational proeprties. Next on the list is an EOM dipole test, possibly bundled with an oscillator strength test. @loriab @lothian . ## Checklist; - [x] Changed tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2461
https://github.com/psi4/psi4/pull/2461:329,Testability,test,tests,329,"## Description; As of this PR, cctests 1-33, 35-45 are ported. `cc44` and `cc45` (which test EOM root energies) needed no modifications. The tests added here cover CC2 rotational proeprties. Next on the list is an EOM dipole test, possibly bundled with an oscillator strength test. @loriab @lothian . ## Checklist; - [x] Changed tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2461
https://github.com/psi4/psi4/pull/2462:1509,Deployability,update,update,1509,"## Description; TDSCF/ADC and EOM can't agree on how to name variables for excitation energies. Per discussion between Lori and I, this moves the TDSCF variable names to the new standard, as I see it. This PR is not complete and is submitted for feedback from the excited-state gurus, who are likely to have strong opinions: @loriab @robertodr @lothian @maxscheurer . To demonstrate the changes, consider the example file I added. Old code would write the second transition as ""TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY - B2 SYMMETRY"". The new code replaces that with three new psivars:. - TD-HF ROOT 0 (B1) -> ROOT 0 (B2) EXCITATION ENERGY; - TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY; - TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY - A2 SYMMETRY. We have one access call that requires the symmetries of initial and target states and the indices of both _within their irreps_. We have one access call that requires no symmetry information and just requires the index of the states _among all irreps_. The last access call is like the second, but adds on the symmetry of the _transition_. **This is a breaking change** because old code instead used the symmetry of the final state. After coding this all up, I'm inclined to remove the last access call. The original reason for keeping it up was consistency with the current way TDSCF operates, but it's still inconsistent, per the last paragraph. I'll add docs once we're settled about the new naming conventions. Once this PR is in, the other modules will need to update to the new style. ## Questions; - [x] Opinions on the new variable names?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2462
https://github.com/psi4/psi4/pull/2462:512,Energy Efficiency,ENERGY,ENERGY,512,"## Description; TDSCF/ADC and EOM can't agree on how to name variables for excitation energies. Per discussion between Lori and I, this moves the TDSCF variable names to the new standard, as I see it. This PR is not complete and is submitted for feedback from the excited-state gurus, who are likely to have strong opinions: @loriab @robertodr @lothian @maxscheurer . To demonstrate the changes, consider the example file I added. Old code would write the second transition as ""TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY - B2 SYMMETRY"". The new code replaces that with three new psivars:. - TD-HF ROOT 0 (B1) -> ROOT 0 (B2) EXCITATION ENERGY; - TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY; - TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY - A2 SYMMETRY. We have one access call that requires the symmetries of initial and target states and the indices of both _within their irreps_. We have one access call that requires no symmetry information and just requires the index of the states _among all irreps_. The last access call is like the second, but adds on the symmetry of the _transition_. **This is a breaking change** because old code instead used the symmetry of the final state. After coding this all up, I'm inclined to remove the last access call. The original reason for keeping it up was consistency with the current way TDSCF operates, but it's still inconsistent, per the last paragraph. I'll add docs once we're settled about the new naming conventions. Once this PR is in, the other modules will need to update to the new style. ## Questions; - [x] Opinions on the new variable names?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2462
https://github.com/psi4/psi4/pull/2462:633,Energy Efficiency,ENERGY,ENERGY,633,"## Description; TDSCF/ADC and EOM can't agree on how to name variables for excitation energies. Per discussion between Lori and I, this moves the TDSCF variable names to the new standard, as I see it. This PR is not complete and is submitted for feedback from the excited-state gurus, who are likely to have strong opinions: @loriab @robertodr @lothian @maxscheurer . To demonstrate the changes, consider the example file I added. Old code would write the second transition as ""TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY - B2 SYMMETRY"". The new code replaces that with three new psivars:. - TD-HF ROOT 0 (B1) -> ROOT 0 (B2) EXCITATION ENERGY; - TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY; - TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY - A2 SYMMETRY. We have one access call that requires the symmetries of initial and target states and the indices of both _within their irreps_. We have one access call that requires no symmetry information and just requires the index of the states _among all irreps_. The last access call is like the second, but adds on the symmetry of the _transition_. **This is a breaking change** because old code instead used the symmetry of the final state. After coding this all up, I'm inclined to remove the last access call. The original reason for keeping it up was consistency with the current way TDSCF operates, but it's still inconsistent, per the last paragraph. I'll add docs once we're settled about the new naming conventions. Once this PR is in, the other modules will need to update to the new style. ## Questions; - [x] Opinions on the new variable names?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2462
https://github.com/psi4/psi4/pull/2462:677,Energy Efficiency,ENERGY,ENERGY,677,"## Description; TDSCF/ADC and EOM can't agree on how to name variables for excitation energies. Per discussion between Lori and I, this moves the TDSCF variable names to the new standard, as I see it. This PR is not complete and is submitted for feedback from the excited-state gurus, who are likely to have strong opinions: @loriab @robertodr @lothian @maxscheurer . To demonstrate the changes, consider the example file I added. Old code would write the second transition as ""TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY - B2 SYMMETRY"". The new code replaces that with three new psivars:. - TD-HF ROOT 0 (B1) -> ROOT 0 (B2) EXCITATION ENERGY; - TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY; - TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY - A2 SYMMETRY. We have one access call that requires the symmetries of initial and target states and the indices of both _within their irreps_. We have one access call that requires no symmetry information and just requires the index of the states _among all irreps_. The last access call is like the second, but adds on the symmetry of the _transition_. **This is a breaking change** because old code instead used the symmetry of the final state. After coding this all up, I'm inclined to remove the last access call. The original reason for keeping it up was consistency with the current way TDSCF operates, but it's still inconsistent, per the last paragraph. I'll add docs once we're settled about the new naming conventions. Once this PR is in, the other modules will need to update to the new style. ## Questions; - [x] Opinions on the new variable names?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2462
https://github.com/psi4/psi4/pull/2462:721,Energy Efficiency,ENERGY,ENERGY,721,"## Description; TDSCF/ADC and EOM can't agree on how to name variables for excitation energies. Per discussion between Lori and I, this moves the TDSCF variable names to the new standard, as I see it. This PR is not complete and is submitted for feedback from the excited-state gurus, who are likely to have strong opinions: @loriab @robertodr @lothian @maxscheurer . To demonstrate the changes, consider the example file I added. Old code would write the second transition as ""TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY - B2 SYMMETRY"". The new code replaces that with three new psivars:. - TD-HF ROOT 0 (B1) -> ROOT 0 (B2) EXCITATION ENERGY; - TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY; - TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY - A2 SYMMETRY. We have one access call that requires the symmetries of initial and target states and the indices of both _within their irreps_. We have one access call that requires no symmetry information and just requires the index of the states _among all irreps_. The last access call is like the second, but adds on the symmetry of the _transition_. **This is a breaking change** because old code instead used the symmetry of the final state. After coding this all up, I'm inclined to remove the last access call. The original reason for keeping it up was consistency with the current way TDSCF operates, but it's still inconsistent, per the last paragraph. I'll add docs once we're settled about the new naming conventions. Once this PR is in, the other modules will need to update to the new style. ## Questions; - [x] Opinions on the new variable names?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2462
https://github.com/psi4/psi4/pull/2462:61,Modifiability,variab,variables,61,"## Description; TDSCF/ADC and EOM can't agree on how to name variables for excitation energies. Per discussion between Lori and I, this moves the TDSCF variable names to the new standard, as I see it. This PR is not complete and is submitted for feedback from the excited-state gurus, who are likely to have strong opinions: @loriab @robertodr @lothian @maxscheurer . To demonstrate the changes, consider the example file I added. Old code would write the second transition as ""TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY - B2 SYMMETRY"". The new code replaces that with three new psivars:. - TD-HF ROOT 0 (B1) -> ROOT 0 (B2) EXCITATION ENERGY; - TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY; - TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY - A2 SYMMETRY. We have one access call that requires the symmetries of initial and target states and the indices of both _within their irreps_. We have one access call that requires no symmetry information and just requires the index of the states _among all irreps_. The last access call is like the second, but adds on the symmetry of the _transition_. **This is a breaking change** because old code instead used the symmetry of the final state. After coding this all up, I'm inclined to remove the last access call. The original reason for keeping it up was consistency with the current way TDSCF operates, but it's still inconsistent, per the last paragraph. I'll add docs once we're settled about the new naming conventions. Once this PR is in, the other modules will need to update to the new style. ## Questions; - [x] Opinions on the new variable names?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2462
https://github.com/psi4/psi4/pull/2462:152,Modifiability,variab,variable,152,"## Description; TDSCF/ADC and EOM can't agree on how to name variables for excitation energies. Per discussion between Lori and I, this moves the TDSCF variable names to the new standard, as I see it. This PR is not complete and is submitted for feedback from the excited-state gurus, who are likely to have strong opinions: @loriab @robertodr @lothian @maxscheurer . To demonstrate the changes, consider the example file I added. Old code would write the second transition as ""TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY - B2 SYMMETRY"". The new code replaces that with three new psivars:. - TD-HF ROOT 0 (B1) -> ROOT 0 (B2) EXCITATION ENERGY; - TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY; - TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY - A2 SYMMETRY. We have one access call that requires the symmetries of initial and target states and the indices of both _within their irreps_. We have one access call that requires no symmetry information and just requires the index of the states _among all irreps_. The last access call is like the second, but adds on the symmetry of the _transition_. **This is a breaking change** because old code instead used the symmetry of the final state. After coding this all up, I'm inclined to remove the last access call. The original reason for keeping it up was consistency with the current way TDSCF operates, but it's still inconsistent, per the last paragraph. I'll add docs once we're settled about the new naming conventions. Once this PR is in, the other modules will need to update to the new style. ## Questions; - [x] Opinions on the new variable names?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2462
https://github.com/psi4/psi4/pull/2462:1574,Modifiability,variab,variable,1574,"## Description; TDSCF/ADC and EOM can't agree on how to name variables for excitation energies. Per discussion between Lori and I, this moves the TDSCF variable names to the new standard, as I see it. This PR is not complete and is submitted for feedback from the excited-state gurus, who are likely to have strong opinions: @loriab @robertodr @lothian @maxscheurer . To demonstrate the changes, consider the example file I added. Old code would write the second transition as ""TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY - B2 SYMMETRY"". The new code replaces that with three new psivars:. - TD-HF ROOT 0 (B1) -> ROOT 0 (B2) EXCITATION ENERGY; - TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY; - TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY - A2 SYMMETRY. We have one access call that requires the symmetries of initial and target states and the indices of both _within their irreps_. We have one access call that requires no symmetry information and just requires the index of the states _among all irreps_. The last access call is like the second, but adds on the symmetry of the _transition_. **This is a breaking change** because old code instead used the symmetry of the final state. After coding this all up, I'm inclined to remove the last access call. The original reason for keeping it up was consistency with the current way TDSCF operates, but it's still inconsistent, per the last paragraph. I'll add docs once we're settled about the new naming conventions. Once this PR is in, the other modules will need to update to the new style. ## Questions; - [x] Opinions on the new variable names?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2462
https://github.com/psi4/psi4/pull/2462:755,Security,access,access,755,"## Description; TDSCF/ADC and EOM can't agree on how to name variables for excitation energies. Per discussion between Lori and I, this moves the TDSCF variable names to the new standard, as I see it. This PR is not complete and is submitted for feedback from the excited-state gurus, who are likely to have strong opinions: @loriab @robertodr @lothian @maxscheurer . To demonstrate the changes, consider the example file I added. Old code would write the second transition as ""TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY - B2 SYMMETRY"". The new code replaces that with three new psivars:. - TD-HF ROOT 0 (B1) -> ROOT 0 (B2) EXCITATION ENERGY; - TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY; - TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY - A2 SYMMETRY. We have one access call that requires the symmetries of initial and target states and the indices of both _within their irreps_. We have one access call that requires no symmetry information and just requires the index of the states _among all irreps_. The last access call is like the second, but adds on the symmetry of the _transition_. **This is a breaking change** because old code instead used the symmetry of the final state. After coding this all up, I'm inclined to remove the last access call. The original reason for keeping it up was consistency with the current way TDSCF operates, but it's still inconsistent, per the last paragraph. I'll add docs once we're settled about the new naming conventions. Once this PR is in, the other modules will need to update to the new style. ## Questions; - [x] Opinions on the new variable names?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2462
https://github.com/psi4/psi4/pull/2462:884,Security,access,access,884,"## Description; TDSCF/ADC and EOM can't agree on how to name variables for excitation energies. Per discussion between Lori and I, this moves the TDSCF variable names to the new standard, as I see it. This PR is not complete and is submitted for feedback from the excited-state gurus, who are likely to have strong opinions: @loriab @robertodr @lothian @maxscheurer . To demonstrate the changes, consider the example file I added. Old code would write the second transition as ""TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY - B2 SYMMETRY"". The new code replaces that with three new psivars:. - TD-HF ROOT 0 (B1) -> ROOT 0 (B2) EXCITATION ENERGY; - TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY; - TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY - A2 SYMMETRY. We have one access call that requires the symmetries of initial and target states and the indices of both _within their irreps_. We have one access call that requires no symmetry information and just requires the index of the states _among all irreps_. The last access call is like the second, but adds on the symmetry of the _transition_. **This is a breaking change** because old code instead used the symmetry of the final state. After coding this all up, I'm inclined to remove the last access call. The original reason for keeping it up was consistency with the current way TDSCF operates, but it's still inconsistent, per the last paragraph. I'll add docs once we're settled about the new naming conventions. Once this PR is in, the other modules will need to update to the new style. ## Questions; - [x] Opinions on the new variable names?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2462
https://github.com/psi4/psi4/pull/2462:1005,Security,access,access,1005,"## Description; TDSCF/ADC and EOM can't agree on how to name variables for excitation energies. Per discussion between Lori and I, this moves the TDSCF variable names to the new standard, as I see it. This PR is not complete and is submitted for feedback from the excited-state gurus, who are likely to have strong opinions: @loriab @robertodr @lothian @maxscheurer . To demonstrate the changes, consider the example file I added. Old code would write the second transition as ""TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY - B2 SYMMETRY"". The new code replaces that with three new psivars:. - TD-HF ROOT 0 (B1) -> ROOT 0 (B2) EXCITATION ENERGY; - TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY; - TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY - A2 SYMMETRY. We have one access call that requires the symmetries of initial and target states and the indices of both _within their irreps_. We have one access call that requires no symmetry information and just requires the index of the states _among all irreps_. The last access call is like the second, but adds on the symmetry of the _transition_. **This is a breaking change** because old code instead used the symmetry of the final state. After coding this all up, I'm inclined to remove the last access call. The original reason for keeping it up was consistency with the current way TDSCF operates, but it's still inconsistent, per the last paragraph. I'll add docs once we're settled about the new naming conventions. Once this PR is in, the other modules will need to update to the new style. ## Questions; - [x] Opinions on the new variable names?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2462
https://github.com/psi4/psi4/pull/2462:1234,Security,access,access,1234,"## Description; TDSCF/ADC and EOM can't agree on how to name variables for excitation energies. Per discussion between Lori and I, this moves the TDSCF variable names to the new standard, as I see it. This PR is not complete and is submitted for feedback from the excited-state gurus, who are likely to have strong opinions: @loriab @robertodr @lothian @maxscheurer . To demonstrate the changes, consider the example file I added. Old code would write the second transition as ""TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY - B2 SYMMETRY"". The new code replaces that with three new psivars:. - TD-HF ROOT 0 (B1) -> ROOT 0 (B2) EXCITATION ENERGY; - TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY; - TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY - A2 SYMMETRY. We have one access call that requires the symmetries of initial and target states and the indices of both _within their irreps_. We have one access call that requires no symmetry information and just requires the index of the states _among all irreps_. The last access call is like the second, but adds on the symmetry of the _transition_. **This is a breaking change** because old code instead used the symmetry of the final state. After coding this all up, I'm inclined to remove the last access call. The original reason for keeping it up was consistency with the current way TDSCF operates, but it's still inconsistent, per the last paragraph. I'll add docs once we're settled about the new naming conventions. Once this PR is in, the other modules will need to update to the new style. ## Questions; - [x] Opinions on the new variable names?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2462
https://github.com/psi4/psi4/pull/2462:1611,Testability,Test,Tests,1611,"## Description; TDSCF/ADC and EOM can't agree on how to name variables for excitation energies. Per discussion between Lori and I, this moves the TDSCF variable names to the new standard, as I see it. This PR is not complete and is submitted for feedback from the excited-state gurus, who are likely to have strong opinions: @loriab @robertodr @lothian @maxscheurer . To demonstrate the changes, consider the example file I added. Old code would write the second transition as ""TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY - B2 SYMMETRY"". The new code replaces that with three new psivars:. - TD-HF ROOT 0 (B1) -> ROOT 0 (B2) EXCITATION ENERGY; - TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY; - TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY - A2 SYMMETRY. We have one access call that requires the symmetries of initial and target states and the indices of both _within their irreps_. We have one access call that requires no symmetry information and just requires the index of the states _among all irreps_. The last access call is like the second, but adds on the symmetry of the _transition_. **This is a breaking change** because old code instead used the symmetry of the final state. After coding this all up, I'm inclined to remove the last access call. The original reason for keeping it up was consistency with the current way TDSCF operates, but it's still inconsistent, per the last paragraph. I'll add docs once we're settled about the new naming conventions. Once this PR is in, the other modules will need to update to the new style. ## Questions; - [x] Opinions on the new variable names?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2462
https://github.com/psi4/psi4/pull/2462:1685,Testability,test,tests,1685,"## Description; TDSCF/ADC and EOM can't agree on how to name variables for excitation energies. Per discussion between Lori and I, this moves the TDSCF variable names to the new standard, as I see it. This PR is not complete and is submitted for feedback from the excited-state gurus, who are likely to have strong opinions: @loriab @robertodr @lothian @maxscheurer . To demonstrate the changes, consider the example file I added. Old code would write the second transition as ""TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY - B2 SYMMETRY"". The new code replaces that with three new psivars:. - TD-HF ROOT 0 (B1) -> ROOT 0 (B2) EXCITATION ENERGY; - TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY; - TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY - A2 SYMMETRY. We have one access call that requires the symmetries of initial and target states and the indices of both _within their irreps_. We have one access call that requires no symmetry information and just requires the index of the states _among all irreps_. The last access call is like the second, but adds on the symmetry of the _transition_. **This is a breaking change** because old code instead used the symmetry of the final state. After coding this all up, I'm inclined to remove the last access call. The original reason for keeping it up was consistency with the current way TDSCF operates, but it's still inconsistent, per the last paragraph. I'll add docs once we're settled about the new naming conventions. Once this PR is in, the other modules will need to update to the new style. ## Questions; - [x] Opinions on the new variable names?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2462
https://github.com/psi4/psi4/pull/2462:1776,Testability,test,tests,1776,"## Description; TDSCF/ADC and EOM can't agree on how to name variables for excitation energies. Per discussion between Lori and I, this moves the TDSCF variable names to the new standard, as I see it. This PR is not complete and is submitted for feedback from the excited-state gurus, who are likely to have strong opinions: @loriab @robertodr @lothian @maxscheurer . To demonstrate the changes, consider the example file I added. Old code would write the second transition as ""TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY - B2 SYMMETRY"". The new code replaces that with three new psivars:. - TD-HF ROOT 0 (B1) -> ROOT 0 (B2) EXCITATION ENERGY; - TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY; - TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY - A2 SYMMETRY. We have one access call that requires the symmetries of initial and target states and the indices of both _within their irreps_. We have one access call that requires no symmetry information and just requires the index of the states _among all irreps_. The last access call is like the second, but adds on the symmetry of the _transition_. **This is a breaking change** because old code instead used the symmetry of the final state. After coding this all up, I'm inclined to remove the last access call. The original reason for keeping it up was consistency with the current way TDSCF operates, but it's still inconsistent, per the last paragraph. I'll add docs once we're settled about the new naming conventions. Once this PR is in, the other modules will need to update to the new style. ## Questions; - [x] Opinions on the new variable names?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2462
https://github.com/psi4/psi4/pull/2462:246,Usability,feedback,feedback,246,"## Description; TDSCF/ADC and EOM can't agree on how to name variables for excitation energies. Per discussion between Lori and I, this moves the TDSCF variable names to the new standard, as I see it. This PR is not complete and is submitted for feedback from the excited-state gurus, who are likely to have strong opinions: @loriab @robertodr @lothian @maxscheurer . To demonstrate the changes, consider the example file I added. Old code would write the second transition as ""TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY - B2 SYMMETRY"". The new code replaces that with three new psivars:. - TD-HF ROOT 0 (B1) -> ROOT 0 (B2) EXCITATION ENERGY; - TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY; - TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY - A2 SYMMETRY. We have one access call that requires the symmetries of initial and target states and the indices of both _within their irreps_. We have one access call that requires no symmetry information and just requires the index of the states _among all irreps_. The last access call is like the second, but adds on the symmetry of the _transition_. **This is a breaking change** because old code instead used the symmetry of the final state. After coding this all up, I'm inclined to remove the last access call. The original reason for keeping it up was consistency with the current way TDSCF operates, but it's still inconsistent, per the last paragraph. I'll add docs once we're settled about the new naming conventions. Once this PR is in, the other modules will need to update to the new style. ## Questions; - [x] Opinions on the new variable names?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2462
https://github.com/psi4/psi4/issues/2463:362,Availability,error,error,362,"Psi4 seems to be unable to recognize the symmetry of molecules that should be Cs.; Minimal input:; ```; molecule {; pubchem:fluoroethane ; }; set basis cc-pVDZ; energy('scf'); ```; Output is attached. [Cs_test.log](https://github.com/psi4/psi4/files/8209874/Cs_test.log); I have tried overriding this by manually specifying a Cs symmetry, but that results in an error:; ```; !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: User specified point group (Cs(X)) is not a subgroup of the highest !; ! detected point group (C1). If this is because the symmetry increased, try to !; ! start the calculation again from the last geometry, after checking any !; ! symmetry-dependent input, such as DOCC. !; ! Error occurred in file: /scratch/psilocaluser/conda- !; ! builds/psi4-multiout_1645476997931/work/psi4/src/psi4/libmints/molecule.cc !; ! on line: 2011 !; ! The most recent 5 function calls were: !; ! psi::Molecule::find_point_group(double) const !; ! psi::Molecule::update_geometry() !; ! from_dict(pybind11::dict) !; ! !; !----------------------------------------------------------------------------------!; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2463
https://github.com/psi4/psi4/issues/2463:474,Availability,Error,Error,474,"Psi4 seems to be unable to recognize the symmetry of molecules that should be Cs.; Minimal input:; ```; molecule {; pubchem:fluoroethane ; }; set basis cc-pVDZ; energy('scf'); ```; Output is attached. [Cs_test.log](https://github.com/psi4/psi4/files/8209874/Cs_test.log); I have tried overriding this by manually specifying a Cs symmetry, but that results in an error:; ```; !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: User specified point group (Cs(X)) is not a subgroup of the highest !; ! detected point group (C1). If this is because the symmetry increased, try to !; ! start the calculation again from the last geometry, after checking any !; ! symmetry-dependent input, such as DOCC. !; ! Error occurred in file: /scratch/psilocaluser/conda- !; ! builds/psi4-multiout_1645476997931/work/psi4/src/psi4/libmints/molecule.cc !; ! on line: 2011 !; ! The most recent 5 function calls were: !; ! psi::Molecule::find_point_group(double) const !; ! psi::Molecule::update_geometry() !; ! from_dict(pybind11::dict) !; ! !; !----------------------------------------------------------------------------------!; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2463
https://github.com/psi4/psi4/issues/2463:757,Availability,Error,Error,757,"Psi4 seems to be unable to recognize the symmetry of molecules that should be Cs.; Minimal input:; ```; molecule {; pubchem:fluoroethane ; }; set basis cc-pVDZ; energy('scf'); ```; Output is attached. [Cs_test.log](https://github.com/psi4/psi4/files/8209874/Cs_test.log); I have tried overriding this by manually specifying a Cs symmetry, but that results in an error:; ```; !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: User specified point group (Cs(X)) is not a subgroup of the highest !; ! detected point group (C1). If this is because the symmetry increased, try to !; ! start the calculation again from the last geometry, after checking any !; ! symmetry-dependent input, such as DOCC. !; ! Error occurred in file: /scratch/psilocaluser/conda- !; ! builds/psi4-multiout_1645476997931/work/psi4/src/psi4/libmints/molecule.cc !; ! on line: 2011 !; ! The most recent 5 function calls were: !; ! psi::Molecule::find_point_group(double) const !; ! psi::Molecule::update_geometry() !; ! from_dict(pybind11::dict) !; ! !; !----------------------------------------------------------------------------------!; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2463
https://github.com/psi4/psi4/issues/2463:161,Energy Efficiency,energy,energy,161,"Psi4 seems to be unable to recognize the symmetry of molecules that should be Cs.; Minimal input:; ```; molecule {; pubchem:fluoroethane ; }; set basis cc-pVDZ; energy('scf'); ```; Output is attached. [Cs_test.log](https://github.com/psi4/psi4/files/8209874/Cs_test.log); I have tried overriding this by manually specifying a Cs symmetry, but that results in an error:; ```; !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: User specified point group (Cs(X)) is not a subgroup of the highest !; ! detected point group (C1). If this is because the symmetry increased, try to !; ! start the calculation again from the last geometry, after checking any !; ! symmetry-dependent input, such as DOCC. !; ! Error occurred in file: /scratch/psilocaluser/conda- !; ! builds/psi4-multiout_1645476997931/work/psi4/src/psi4/libmints/molecule.cc !; ! on line: 2011 !; ! The most recent 5 function calls were: !; ! psi::Molecule::find_point_group(double) const !; ! psi::Molecule::update_geometry() !; ! from_dict(pybind11::dict) !; ! !; !----------------------------------------------------------------------------------!; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2463
https://github.com/psi4/psi4/issues/2463:721,Integrability,depend,dependent,721,"Psi4 seems to be unable to recognize the symmetry of molecules that should be Cs.; Minimal input:; ```; molecule {; pubchem:fluoroethane ; }; set basis cc-pVDZ; energy('scf'); ```; Output is attached. [Cs_test.log](https://github.com/psi4/psi4/files/8209874/Cs_test.log); I have tried overriding this by manually specifying a Cs symmetry, but that results in an error:; ```; !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: User specified point group (Cs(X)) is not a subgroup of the highest !; ! detected point group (C1). If this is because the symmetry increased, try to !; ! start the calculation again from the last geometry, after checking any !; ! symmetry-dependent input, such as DOCC. !; ! Error occurred in file: /scratch/psilocaluser/conda- !; ! builds/psi4-multiout_1645476997931/work/psi4/src/psi4/libmints/molecule.cc !; ! on line: 2011 !; ! The most recent 5 function calls were: !; ! psi::Molecule::find_point_group(double) const !; ! psi::Molecule::update_geometry() !; ! from_dict(pybind11::dict) !; ! !; !----------------------------------------------------------------------------------!; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2463
https://github.com/psi4/psi4/issues/2463:554,Safety,detect,detected,554,"Psi4 seems to be unable to recognize the symmetry of molecules that should be Cs.; Minimal input:; ```; molecule {; pubchem:fluoroethane ; }; set basis cc-pVDZ; energy('scf'); ```; Output is attached. [Cs_test.log](https://github.com/psi4/psi4/files/8209874/Cs_test.log); I have tried overriding this by manually specifying a Cs symmetry, but that results in an error:; ```; !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: User specified point group (Cs(X)) is not a subgroup of the highest !; ! detected point group (C1). If this is because the symmetry increased, try to !; ! start the calculation again from the last geometry, after checking any !; ! symmetry-dependent input, such as DOCC. !; ! Error occurred in file: /scratch/psilocaluser/conda- !; ! builds/psi4-multiout_1645476997931/work/psi4/src/psi4/libmints/molecule.cc !; ! on line: 2011 !; ! The most recent 5 function calls were: !; ! psi::Molecule::find_point_group(double) const !; ! psi::Molecule::update_geometry() !; ! from_dict(pybind11::dict) !; ! !; !----------------------------------------------------------------------------------!; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2463
https://github.com/psi4/psi4/issues/2463:210,Testability,log,log,210,"Psi4 seems to be unable to recognize the symmetry of molecules that should be Cs.; Minimal input:; ```; molecule {; pubchem:fluoroethane ; }; set basis cc-pVDZ; energy('scf'); ```; Output is attached. [Cs_test.log](https://github.com/psi4/psi4/files/8209874/Cs_test.log); I have tried overriding this by manually specifying a Cs symmetry, but that results in an error:; ```; !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: User specified point group (Cs(X)) is not a subgroup of the highest !; ! detected point group (C1). If this is because the symmetry increased, try to !; ! start the calculation again from the last geometry, after checking any !; ! symmetry-dependent input, such as DOCC. !; ! Error occurred in file: /scratch/psilocaluser/conda- !; ! builds/psi4-multiout_1645476997931/work/psi4/src/psi4/libmints/molecule.cc !; ! on line: 2011 !; ! The most recent 5 function calls were: !; ! psi::Molecule::find_point_group(double) const !; ! psi::Molecule::update_geometry() !; ! from_dict(pybind11::dict) !; ! !; !----------------------------------------------------------------------------------!; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2463
https://github.com/psi4/psi4/issues/2463:266,Testability,log,log,266,"Psi4 seems to be unable to recognize the symmetry of molecules that should be Cs.; Minimal input:; ```; molecule {; pubchem:fluoroethane ; }; set basis cc-pVDZ; energy('scf'); ```; Output is attached. [Cs_test.log](https://github.com/psi4/psi4/files/8209874/Cs_test.log); I have tried overriding this by manually specifying a Cs symmetry, but that results in an error:; ```; !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: User specified point group (Cs(X)) is not a subgroup of the highest !; ! detected point group (C1). If this is because the symmetry increased, try to !; ! start the calculation again from the last geometry, after checking any !; ! symmetry-dependent input, such as DOCC. !; ! Error occurred in file: /scratch/psilocaluser/conda- !; ! builds/psi4-multiout_1645476997931/work/psi4/src/psi4/libmints/molecule.cc !; ! on line: 2011 !; ! The most recent 5 function calls were: !; ! psi::Molecule::find_point_group(double) const !; ! psi::Molecule::update_geometry() !; ! from_dict(pybind11::dict) !; ! !; !----------------------------------------------------------------------------------!; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2463
https://github.com/psi4/psi4/pull/2464:264,Testability,test,tests,264,## Description; Some code triplication may be eliminated. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [X] Yay for negative LOC. ## Checklist; - [X] No new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2464
https://github.com/psi4/psi4/pull/2464:355,Testability,test,tests,355,## Description; Some code triplication may be eliminated. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [X] Yay for negative LOC. ## Checklist; - [X] No new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2464
https://github.com/psi4/psi4/pull/2465:413,Availability,toler,tolerance,413,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. `Molecule::atom_at_position` is supposed to return the index of the atom found in a specified radius of a specified point in 3D space, or -1 if no atom is found in the radius. The current implementation assumes there is never more than one atom within the given radius, and returns the index of the first atom found to be within the tolerance.; This can hypothetically happen in two ways: the atoms are either extremely close, or the tolerance is set to a large value. The new implementation behaves more like one would expect it to behave: under the aforementioned extreme circumstances it throws an exception and informs the user with an error message. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Detect corner case and throw error if encountered; - [x] Update docstrings to better describe implementation. ## Questions; - [x] Apparently, `qcdb.Molecule` has its own independent Python implementation of `atom_at_position`. As is, this PR means that calling `qcdb.Molecule.atom_at_position` and `psi4.core.Molecule.atom_at_position` from a Python program may return different results for the same geometry, if the aforementioned corner case happens.; Not sure what to do about this, at first glance it would be neater if both `qcdb.Molecule.atom_at_position` and `psi4.core.Molecule.atom_at_position` ended up calling the same C++ implementation, but I am not sure how feasible that would be.; Thoughts?. ## Checklist; - [x] No new features; - [x] `ctest -j24` and `make pytest` both passed locally. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2465
https://github.com/psi4/psi4/pull/2465:514,Availability,toler,tolerance,514,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. `Molecule::atom_at_position` is supposed to return the index of the atom found in a specified radius of a specified point in 3D space, or -1 if no atom is found in the radius. The current implementation assumes there is never more than one atom within the given radius, and returns the index of the first atom found to be within the tolerance.; This can hypothetically happen in two ways: the atoms are either extremely close, or the tolerance is set to a large value. The new implementation behaves more like one would expect it to behave: under the aforementioned extreme circumstances it throws an exception and informs the user with an error message. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Detect corner case and throw error if encountered; - [x] Update docstrings to better describe implementation. ## Questions; - [x] Apparently, `qcdb.Molecule` has its own independent Python implementation of `atom_at_position`. As is, this PR means that calling `qcdb.Molecule.atom_at_position` and `psi4.core.Molecule.atom_at_position` from a Python program may return different results for the same geometry, if the aforementioned corner case happens.; Not sure what to do about this, at first glance it would be neater if both `qcdb.Molecule.atom_at_position` and `psi4.core.Molecule.atom_at_position` ended up calling the same C++ implementation, but I am not sure how feasible that would be.; Thoughts?. ## Checklist; - [x] No new features; - [x] `ctest -j24` and `make pytest` both passed locally. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2465
https://github.com/psi4/psi4/pull/2465:720,Availability,error,error,720,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. `Molecule::atom_at_position` is supposed to return the index of the atom found in a specified radius of a specified point in 3D space, or -1 if no atom is found in the radius. The current implementation assumes there is never more than one atom within the given radius, and returns the index of the first atom found to be within the tolerance.; This can hypothetically happen in two ways: the atoms are either extremely close, or the tolerance is set to a large value. The new implementation behaves more like one would expect it to behave: under the aforementioned extreme circumstances it throws an exception and informs the user with an error message. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Detect corner case and throw error if encountered; - [x] Update docstrings to better describe implementation. ## Questions; - [x] Apparently, `qcdb.Molecule` has its own independent Python implementation of `atom_at_position`. As is, this PR means that calling `qcdb.Molecule.atom_at_position` and `psi4.core.Molecule.atom_at_position` from a Python program may return different results for the same geometry, if the aforementioned corner case happens.; Not sure what to do about this, at first glance it would be neater if both `qcdb.Molecule.atom_at_position` and `psi4.core.Molecule.atom_at_position` ended up calling the same C++ implementation, but I am not sure how feasible that would be.; Thoughts?. ## Checklist; - [x] No new features; - [x] `ctest -j24` and `make pytest` both passed locally. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2465
https://github.com/psi4/psi4/pull/2465:871,Availability,error,error,871,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. `Molecule::atom_at_position` is supposed to return the index of the atom found in a specified radius of a specified point in 3D space, or -1 if no atom is found in the radius. The current implementation assumes there is never more than one atom within the given radius, and returns the index of the first atom found to be within the tolerance.; This can hypothetically happen in two ways: the atoms are either extremely close, or the tolerance is set to a large value. The new implementation behaves more like one would expect it to behave: under the aforementioned extreme circumstances it throws an exception and informs the user with an error message. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Detect corner case and throw error if encountered; - [x] Update docstrings to better describe implementation. ## Questions; - [x] Apparently, `qcdb.Molecule` has its own independent Python implementation of `atom_at_position`. As is, this PR means that calling `qcdb.Molecule.atom_at_position` and `psi4.core.Molecule.atom_at_position` from a Python program may return different results for the same geometry, if the aforementioned corner case happens.; Not sure what to do about this, at first glance it would be neater if both `qcdb.Molecule.atom_at_position` and `psi4.core.Molecule.atom_at_position` ended up calling the same C++ implementation, but I am not sure how feasible that would be.; Thoughts?. ## Checklist; - [x] No new features; - [x] `ctest -j24` and `make pytest` both passed locally. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2465
https://github.com/psi4/psi4/pull/2465:899,Deployability,Update,Update,899,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. `Molecule::atom_at_position` is supposed to return the index of the atom found in a specified radius of a specified point in 3D space, or -1 if no atom is found in the radius. The current implementation assumes there is never more than one atom within the given radius, and returns the index of the first atom found to be within the tolerance.; This can hypothetically happen in two ways: the atoms are either extremely close, or the tolerance is set to a large value. The new implementation behaves more like one would expect it to behave: under the aforementioned extreme circumstances it throws an exception and informs the user with an error message. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Detect corner case and throw error if encountered; - [x] Update docstrings to better describe implementation. ## Questions; - [x] Apparently, `qcdb.Molecule` has its own independent Python implementation of `atom_at_position`. As is, this PR means that calling `qcdb.Molecule.atom_at_position` and `psi4.core.Molecule.atom_at_position` from a Python program may return different results for the same geometry, if the aforementioned corner case happens.; Not sure what to do about this, at first glance it would be neater if both `qcdb.Molecule.atom_at_position` and `psi4.core.Molecule.atom_at_position` ended up calling the same C++ implementation, but I am not sure how feasible that would be.; Thoughts?. ## Checklist; - [x] No new features; - [x] `ctest -j24` and `make pytest` both passed locally. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2465
https://github.com/psi4/psi4/pull/2465:726,Integrability,message,message,726,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. `Molecule::atom_at_position` is supposed to return the index of the atom found in a specified radius of a specified point in 3D space, or -1 if no atom is found in the radius. The current implementation assumes there is never more than one atom within the given radius, and returns the index of the first atom found to be within the tolerance.; This can hypothetically happen in two ways: the atoms are either extremely close, or the tolerance is set to a large value. The new implementation behaves more like one would expect it to behave: under the aforementioned extreme circumstances it throws an exception and informs the user with an error message. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Detect corner case and throw error if encountered; - [x] Update docstrings to better describe implementation. ## Questions; - [x] Apparently, `qcdb.Molecule` has its own independent Python implementation of `atom_at_position`. As is, this PR means that calling `qcdb.Molecule.atom_at_position` and `psi4.core.Molecule.atom_at_position` from a Python program may return different results for the same geometry, if the aforementioned corner case happens.; Not sure what to do about this, at first glance it would be neater if both `qcdb.Molecule.atom_at_position` and `psi4.core.Molecule.atom_at_position` ended up calling the same C++ implementation, but I am not sure how feasible that would be.; Thoughts?. ## Checklist; - [x] No new features; - [x] `ctest -j24` and `make pytest` both passed locally. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2465
https://github.com/psi4/psi4/pull/2465:842,Safety,Detect,Detect,842,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. `Molecule::atom_at_position` is supposed to return the index of the atom found in a specified radius of a specified point in 3D space, or -1 if no atom is found in the radius. The current implementation assumes there is never more than one atom within the given radius, and returns the index of the first atom found to be within the tolerance.; This can hypothetically happen in two ways: the atoms are either extremely close, or the tolerance is set to a large value. The new implementation behaves more like one would expect it to behave: under the aforementioned extreme circumstances it throws an exception and informs the user with an error message. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Detect corner case and throw error if encountered; - [x] Update docstrings to better describe implementation. ## Questions; - [x] Apparently, `qcdb.Molecule` has its own independent Python implementation of `atom_at_position`. As is, this PR means that calling `qcdb.Molecule.atom_at_position` and `psi4.core.Molecule.atom_at_position` from a Python program may return different results for the same geometry, if the aforementioned corner case happens.; Not sure what to do about this, at first glance it would be neater if both `qcdb.Molecule.atom_at_position` and `psi4.core.Molecule.atom_at_position` ended up calling the same C++ implementation, but I am not sure how feasible that would be.; Thoughts?. ## Checklist; - [x] No new features; - [x] `ctest -j24` and `make pytest` both passed locally. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2465
https://github.com/psi4/psi4/pull/2466:32,Modifiability,variab,variable,32,"## Description; Goodbye, unused variable that leaks memory. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2466
https://github.com/psi4/psi4/pull/2467:241,Availability,down,down,241,"## Description; `LEOM_CCSD` is included in the list of EOM methods, but I can find no evidence that this method exists in Psi, other than as an option. This PR removes the option entirely. This brings the EOM methods to create variables for down to EOMCCSD, EOMCC2, and EOMCC3. Per Lori observation, the `LOCAL_GHOST` option is removed as unused. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2467
https://github.com/psi4/psi4/pull/2467:227,Modifiability,variab,variables,227,"## Description; `LEOM_CCSD` is included in the list of EOM methods, but I can find no evidence that this method exists in Psi, other than as an option. This PR removes the option entirely. This brings the EOM methods to create variables for down to EOMCCSD, EOMCC2, and EOMCC3. Per Lori observation, the `LOCAL_GHOST` option is removed as unused. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2467
https://github.com/psi4/psi4/pull/2468:196,Availability,ERROR,ERROR,196,"## Description; Attempts to restore the docs. Previously, we were getting warnings:; ```; 2022-03-10T17:32:55.6518847Z /home/runner/work/psi4/psi4/code/objdir/doc/sphinxman/source/notes_c.rst:66: ERROR: Unexpected indentation.; 2022-03-10T17:32:55.6519492Z /home/runner/work/psi4/psi4/code/objdir/doc/sphinxman/source/notes_c.rst:67: WARNING: Block quote ends without a blank line; unexpected unindent.; 2022-03-10T17:32:55.6520109Z /home/runner/work/psi4/psi4/code/objdir/doc/sphinxman/source/notes_c.rst:70: WARNING: Bullet list ends without a blank line; unexpected unindent.; ```. Wouldn't GHA docs auto-build be nice...?. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2468
https://github.com/psi4/psi4/pull/2470:67,Testability,Test,Tests,67,## Description; A few consequences of #2462 . ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2470
https://github.com/psi4/psi4/pull/2470:142,Testability,test,tests,142,## Description; A few consequences of #2462 . ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2470
https://github.com/psi4/psi4/pull/2470:233,Testability,test,tests,233,## Description; A few consequences of #2462 . ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2470
https://github.com/psi4/psi4/issues/2472:435,Energy Efficiency,charge,charges,435,"My goal is to use `psi4` for a mixed QM/MM simulation (mechanical and electrostatic embedding). I am aware of a previous issue (https://github.com/psi4/psi4/issues/341), however, I have a MD engine at hand and would like to use `psi4` as QM engine only (i.e. energies and gradients on a given molecule with external potential). In that regard, I am wondering what is the best way to use `psi4` to calculate gradients on external point charges from C++. . I am aware of the class `ExternalPotential`, which is demonstrated from the Python side here: https://github.com/psi4/psi4/tree/master/tests/extern1. It looks to me like the following function will return gradients on a given molecule caused by the points charges but not the other way round:. ```C++; /// Compute the gradients due to the external potential; SharedMatrix computePotentialGradients(std::shared_ptr<BasisSet> basis, std::shared_ptr<Matrix> Dt);; ```. However, I could not find any corresponding function that computes gradients on point charges. In case the functionality is not implemented yet, I am happy to volunteer code.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2472
https://github.com/psi4/psi4/issues/2472:711,Energy Efficiency,charge,charges,711,"My goal is to use `psi4` for a mixed QM/MM simulation (mechanical and electrostatic embedding). I am aware of a previous issue (https://github.com/psi4/psi4/issues/341), however, I have a MD engine at hand and would like to use `psi4` as QM engine only (i.e. energies and gradients on a given molecule with external potential). In that regard, I am wondering what is the best way to use `psi4` to calculate gradients on external point charges from C++. . I am aware of the class `ExternalPotential`, which is demonstrated from the Python side here: https://github.com/psi4/psi4/tree/master/tests/extern1. It looks to me like the following function will return gradients on a given molecule caused by the points charges but not the other way round:. ```C++; /// Compute the gradients due to the external potential; SharedMatrix computePotentialGradients(std::shared_ptr<BasisSet> basis, std::shared_ptr<Matrix> Dt);; ```. However, I could not find any corresponding function that computes gradients on point charges. In case the functionality is not implemented yet, I am happy to volunteer code.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2472
https://github.com/psi4/psi4/issues/2472:1007,Energy Efficiency,charge,charges,1007,"My goal is to use `psi4` for a mixed QM/MM simulation (mechanical and electrostatic embedding). I am aware of a previous issue (https://github.com/psi4/psi4/issues/341), however, I have a MD engine at hand and would like to use `psi4` as QM engine only (i.e. energies and gradients on a given molecule with external potential). In that regard, I am wondering what is the best way to use `psi4` to calculate gradients on external point charges from C++. . I am aware of the class `ExternalPotential`, which is demonstrated from the Python side here: https://github.com/psi4/psi4/tree/master/tests/extern1. It looks to me like the following function will return gradients on a given molecule caused by the points charges but not the other way round:. ```C++; /// Compute the gradients due to the external potential; SharedMatrix computePotentialGradients(std::shared_ptr<BasisSet> basis, std::shared_ptr<Matrix> Dt);; ```. However, I could not find any corresponding function that computes gradients on point charges. In case the functionality is not implemented yet, I am happy to volunteer code.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2472
https://github.com/psi4/psi4/issues/2472:590,Testability,test,tests,590,"My goal is to use `psi4` for a mixed QM/MM simulation (mechanical and electrostatic embedding). I am aware of a previous issue (https://github.com/psi4/psi4/issues/341), however, I have a MD engine at hand and would like to use `psi4` as QM engine only (i.e. energies and gradients on a given molecule with external potential). In that regard, I am wondering what is the best way to use `psi4` to calculate gradients on external point charges from C++. . I am aware of the class `ExternalPotential`, which is demonstrated from the Python side here: https://github.com/psi4/psi4/tree/master/tests/extern1. It looks to me like the following function will return gradients on a given molecule caused by the points charges but not the other way round:. ```C++; /// Compute the gradients due to the external potential; SharedMatrix computePotentialGradients(std::shared_ptr<BasisSet> basis, std::shared_ptr<Matrix> Dt);; ```. However, I could not find any corresponding function that computes gradients on point charges. In case the functionality is not implemented yet, I am happy to volunteer code.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2472
https://github.com/psi4/psi4/pull/2473:1151,Availability,Ping,Ping,1151,"## Description; This PR refactors the existing `PseudospectralInts` (untested, unused, but maybe needed at some point, see #2414); with some refactoring: The ""old"" `PseudospectralInts` did compute `<p| 1/R |q>` *or* `<p| erf(omega*R)/R |q>` with `R = |r -r_c|` for some given point/origin `r_c`. . - The class `PseudospectralInts` is removed. To compute the ""normal"" Coulomb potential at a given origin, one can use either `MultipolePotentialInt` (with `max_k=0`) *OR* `ElectrostaticInt`.; - To compute the erf-attenuated Coulomb potential, I created a new class named `PotentialErfInt` to better reflect the actual ""property integral"" being computed. For testing purposes, I also added the erfc-attenuated Coulomb potential (`PotentialErfComplementInt`), maybe they're also useful at some point. Both use L2 under the hood.; - The point `r_c` is canonically set with `set_origin`.; - I've added the new integrals to `MintsHelper` and the Python API.; - Tests are added. (`erf(infinity*R)/R = 1/R`, `erfc(0*R)/R = 1/R`, and `1/R - erf(R)/R - erfc(R)/R = 0`). This is a preparation to get rid of most of the remaining OS86 code as discussed in #2414.; Ping @loriab @zachglick @andysim . ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2473
https://github.com/psi4/psi4/pull/2473:24,Modifiability,refactor,refactors,24,"## Description; This PR refactors the existing `PseudospectralInts` (untested, unused, but maybe needed at some point, see #2414); with some refactoring: The ""old"" `PseudospectralInts` did compute `<p| 1/R |q>` *or* `<p| erf(omega*R)/R |q>` with `R = |r -r_c|` for some given point/origin `r_c`. . - The class `PseudospectralInts` is removed. To compute the ""normal"" Coulomb potential at a given origin, one can use either `MultipolePotentialInt` (with `max_k=0`) *OR* `ElectrostaticInt`.; - To compute the erf-attenuated Coulomb potential, I created a new class named `PotentialErfInt` to better reflect the actual ""property integral"" being computed. For testing purposes, I also added the erfc-attenuated Coulomb potential (`PotentialErfComplementInt`), maybe they're also useful at some point. Both use L2 under the hood.; - The point `r_c` is canonically set with `set_origin`.; - I've added the new integrals to `MintsHelper` and the Python API.; - Tests are added. (`erf(infinity*R)/R = 1/R`, `erfc(0*R)/R = 1/R`, and `1/R - erf(R)/R - erfc(R)/R = 0`). This is a preparation to get rid of most of the remaining OS86 code as discussed in #2414.; Ping @loriab @zachglick @andysim . ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2473
https://github.com/psi4/psi4/pull/2473:141,Modifiability,refactor,refactoring,141,"## Description; This PR refactors the existing `PseudospectralInts` (untested, unused, but maybe needed at some point, see #2414); with some refactoring: The ""old"" `PseudospectralInts` did compute `<p| 1/R |q>` *or* `<p| erf(omega*R)/R |q>` with `R = |r -r_c|` for some given point/origin `r_c`. . - The class `PseudospectralInts` is removed. To compute the ""normal"" Coulomb potential at a given origin, one can use either `MultipolePotentialInt` (with `max_k=0`) *OR* `ElectrostaticInt`.; - To compute the erf-attenuated Coulomb potential, I created a new class named `PotentialErfInt` to better reflect the actual ""property integral"" being computed. For testing purposes, I also added the erfc-attenuated Coulomb potential (`PotentialErfComplementInt`), maybe they're also useful at some point. Both use L2 under the hood.; - The point `r_c` is canonically set with `set_origin`.; - I've added the new integrals to `MintsHelper` and the Python API.; - Tests are added. (`erf(infinity*R)/R = 1/R`, `erfc(0*R)/R = 1/R`, and `1/R - erf(R)/R - erfc(R)/R = 0`). This is a preparation to get rid of most of the remaining OS86 code as discussed in #2414.; Ping @loriab @zachglick @andysim . ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2473
https://github.com/psi4/psi4/pull/2473:656,Testability,test,testing,656,"## Description; This PR refactors the existing `PseudospectralInts` (untested, unused, but maybe needed at some point, see #2414); with some refactoring: The ""old"" `PseudospectralInts` did compute `<p| 1/R |q>` *or* `<p| erf(omega*R)/R |q>` with `R = |r -r_c|` for some given point/origin `r_c`. . - The class `PseudospectralInts` is removed. To compute the ""normal"" Coulomb potential at a given origin, one can use either `MultipolePotentialInt` (with `max_k=0`) *OR* `ElectrostaticInt`.; - To compute the erf-attenuated Coulomb potential, I created a new class named `PotentialErfInt` to better reflect the actual ""property integral"" being computed. For testing purposes, I also added the erfc-attenuated Coulomb potential (`PotentialErfComplementInt`), maybe they're also useful at some point. Both use L2 under the hood.; - The point `r_c` is canonically set with `set_origin`.; - I've added the new integrals to `MintsHelper` and the Python API.; - Tests are added. (`erf(infinity*R)/R = 1/R`, `erfc(0*R)/R = 1/R`, and `1/R - erf(R)/R - erfc(R)/R = 0`). This is a preparation to get rid of most of the remaining OS86 code as discussed in #2414.; Ping @loriab @zachglick @andysim . ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2473
https://github.com/psi4/psi4/pull/2473:954,Testability,Test,Tests,954,"## Description; This PR refactors the existing `PseudospectralInts` (untested, unused, but maybe needed at some point, see #2414); with some refactoring: The ""old"" `PseudospectralInts` did compute `<p| 1/R |q>` *or* `<p| erf(omega*R)/R |q>` with `R = |r -r_c|` for some given point/origin `r_c`. . - The class `PseudospectralInts` is removed. To compute the ""normal"" Coulomb potential at a given origin, one can use either `MultipolePotentialInt` (with `max_k=0`) *OR* `ElectrostaticInt`.; - To compute the erf-attenuated Coulomb potential, I created a new class named `PotentialErfInt` to better reflect the actual ""property integral"" being computed. For testing purposes, I also added the erfc-attenuated Coulomb potential (`PotentialErfComplementInt`), maybe they're also useful at some point. Both use L2 under the hood.; - The point `r_c` is canonically set with `set_origin`.; - I've added the new integrals to `MintsHelper` and the Python API.; - Tests are added. (`erf(infinity*R)/R = 1/R`, `erfc(0*R)/R = 1/R`, and `1/R - erf(R)/R - erfc(R)/R = 0`). This is a preparation to get rid of most of the remaining OS86 code as discussed in #2414.; Ping @loriab @zachglick @andysim . ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2473
https://github.com/psi4/psi4/pull/2473:1237,Testability,Test,Tests,1237,"## Description; This PR refactors the existing `PseudospectralInts` (untested, unused, but maybe needed at some point, see #2414); with some refactoring: The ""old"" `PseudospectralInts` did compute `<p| 1/R |q>` *or* `<p| erf(omega*R)/R |q>` with `R = |r -r_c|` for some given point/origin `r_c`. . - The class `PseudospectralInts` is removed. To compute the ""normal"" Coulomb potential at a given origin, one can use either `MultipolePotentialInt` (with `max_k=0`) *OR* `ElectrostaticInt`.; - To compute the erf-attenuated Coulomb potential, I created a new class named `PotentialErfInt` to better reflect the actual ""property integral"" being computed. For testing purposes, I also added the erfc-attenuated Coulomb potential (`PotentialErfComplementInt`), maybe they're also useful at some point. Both use L2 under the hood.; - The point `r_c` is canonically set with `set_origin`.; - I've added the new integrals to `MintsHelper` and the Python API.; - Tests are added. (`erf(infinity*R)/R = 1/R`, `erfc(0*R)/R = 1/R`, and `1/R - erf(R)/R - erfc(R)/R = 0`). This is a preparation to get rid of most of the remaining OS86 code as discussed in #2414.; Ping @loriab @zachglick @andysim . ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2473
https://github.com/psi4/psi4/pull/2473:1311,Testability,test,tests,1311,"## Description; This PR refactors the existing `PseudospectralInts` (untested, unused, but maybe needed at some point, see #2414); with some refactoring: The ""old"" `PseudospectralInts` did compute `<p| 1/R |q>` *or* `<p| erf(omega*R)/R |q>` with `R = |r -r_c|` for some given point/origin `r_c`. . - The class `PseudospectralInts` is removed. To compute the ""normal"" Coulomb potential at a given origin, one can use either `MultipolePotentialInt` (with `max_k=0`) *OR* `ElectrostaticInt`.; - To compute the erf-attenuated Coulomb potential, I created a new class named `PotentialErfInt` to better reflect the actual ""property integral"" being computed. For testing purposes, I also added the erfc-attenuated Coulomb potential (`PotentialErfComplementInt`), maybe they're also useful at some point. Both use L2 under the hood.; - The point `r_c` is canonically set with `set_origin`.; - I've added the new integrals to `MintsHelper` and the Python API.; - Tests are added. (`erf(infinity*R)/R = 1/R`, `erfc(0*R)/R = 1/R`, and `1/R - erf(R)/R - erfc(R)/R = 0`). This is a preparation to get rid of most of the remaining OS86 code as discussed in #2414.; Ping @loriab @zachglick @andysim . ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2473
https://github.com/psi4/psi4/pull/2473:1402,Testability,test,tests,1402,"## Description; This PR refactors the existing `PseudospectralInts` (untested, unused, but maybe needed at some point, see #2414); with some refactoring: The ""old"" `PseudospectralInts` did compute `<p| 1/R |q>` *or* `<p| erf(omega*R)/R |q>` with `R = |r -r_c|` for some given point/origin `r_c`. . - The class `PseudospectralInts` is removed. To compute the ""normal"" Coulomb potential at a given origin, one can use either `MultipolePotentialInt` (with `max_k=0`) *OR* `ElectrostaticInt`.; - To compute the erf-attenuated Coulomb potential, I created a new class named `PotentialErfInt` to better reflect the actual ""property integral"" being computed. For testing purposes, I also added the erfc-attenuated Coulomb potential (`PotentialErfComplementInt`), maybe they're also useful at some point. Both use L2 under the hood.; - The point `r_c` is canonically set with `set_origin`.; - I've added the new integrals to `MintsHelper` and the Python API.; - Tests are added. (`erf(infinity*R)/R = 1/R`, `erfc(0*R)/R = 1/R`, and `1/R - erf(R)/R - erfc(R)/R = 0`). This is a preparation to get rid of most of the remaining OS86 code as discussed in #2414.; Ping @loriab @zachglick @andysim . ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2473
https://github.com/psi4/psi4/pull/2475:689,Availability,ping,pings,689,"## Description; This PR is the _first part_ of migrating EOM variables to the new standard for variable names, introduced in #2462. Among other things, the new standard gets rid of a longstanding grievance of TDC's: you no longer need to mix up all the irreps. This PR is content to migrate energy variable names. Other EOM variables go through `oeprop`, which will be a follow-up PR. A comprehensive test of EOM naming conventions is deferred to Pt. 2. This PR also contains misc. minor EOM cleanup I did while trying to understand the big picture of the code. More cleanup is possible, but you need to give EOM a wavefunction first, which is far outside the scope of this PR. Obligatory pings to @loriab and @lothian. ## Todos; - [x] Improve cc docs; - [x] Rename EOMCC energy variables to new standard ; - [x] Creates new EOM tag for tests . ## Checklist; - [x] All cc tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2475
https://github.com/psi4/psi4/pull/2475:291,Energy Efficiency,energy,energy,291,"## Description; This PR is the _first part_ of migrating EOM variables to the new standard for variable names, introduced in #2462. Among other things, the new standard gets rid of a longstanding grievance of TDC's: you no longer need to mix up all the irreps. This PR is content to migrate energy variable names. Other EOM variables go through `oeprop`, which will be a follow-up PR. A comprehensive test of EOM naming conventions is deferred to Pt. 2. This PR also contains misc. minor EOM cleanup I did while trying to understand the big picture of the code. More cleanup is possible, but you need to give EOM a wavefunction first, which is far outside the scope of this PR. Obligatory pings to @loriab and @lothian. ## Todos; - [x] Improve cc docs; - [x] Rename EOMCC energy variables to new standard ; - [x] Creates new EOM tag for tests . ## Checklist; - [x] All cc tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2475
https://github.com/psi4/psi4/pull/2475:772,Energy Efficiency,energy,energy,772,"## Description; This PR is the _first part_ of migrating EOM variables to the new standard for variable names, introduced in #2462. Among other things, the new standard gets rid of a longstanding grievance of TDC's: you no longer need to mix up all the irreps. This PR is content to migrate energy variable names. Other EOM variables go through `oeprop`, which will be a follow-up PR. A comprehensive test of EOM naming conventions is deferred to Pt. 2. This PR also contains misc. minor EOM cleanup I did while trying to understand the big picture of the code. More cleanup is possible, but you need to give EOM a wavefunction first, which is far outside the scope of this PR. Obligatory pings to @loriab and @lothian. ## Todos; - [x] Improve cc docs; - [x] Rename EOMCC energy variables to new standard ; - [x] Creates new EOM tag for tests . ## Checklist; - [x] All cc tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2475
https://github.com/psi4/psi4/pull/2475:61,Modifiability,variab,variables,61,"## Description; This PR is the _first part_ of migrating EOM variables to the new standard for variable names, introduced in #2462. Among other things, the new standard gets rid of a longstanding grievance of TDC's: you no longer need to mix up all the irreps. This PR is content to migrate energy variable names. Other EOM variables go through `oeprop`, which will be a follow-up PR. A comprehensive test of EOM naming conventions is deferred to Pt. 2. This PR also contains misc. minor EOM cleanup I did while trying to understand the big picture of the code. More cleanup is possible, but you need to give EOM a wavefunction first, which is far outside the scope of this PR. Obligatory pings to @loriab and @lothian. ## Todos; - [x] Improve cc docs; - [x] Rename EOMCC energy variables to new standard ; - [x] Creates new EOM tag for tests . ## Checklist; - [x] All cc tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2475
https://github.com/psi4/psi4/pull/2475:95,Modifiability,variab,variable,95,"## Description; This PR is the _first part_ of migrating EOM variables to the new standard for variable names, introduced in #2462. Among other things, the new standard gets rid of a longstanding grievance of TDC's: you no longer need to mix up all the irreps. This PR is content to migrate energy variable names. Other EOM variables go through `oeprop`, which will be a follow-up PR. A comprehensive test of EOM naming conventions is deferred to Pt. 2. This PR also contains misc. minor EOM cleanup I did while trying to understand the big picture of the code. More cleanup is possible, but you need to give EOM a wavefunction first, which is far outside the scope of this PR. Obligatory pings to @loriab and @lothian. ## Todos; - [x] Improve cc docs; - [x] Rename EOMCC energy variables to new standard ; - [x] Creates new EOM tag for tests . ## Checklist; - [x] All cc tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2475
https://github.com/psi4/psi4/pull/2475:298,Modifiability,variab,variable,298,"## Description; This PR is the _first part_ of migrating EOM variables to the new standard for variable names, introduced in #2462. Among other things, the new standard gets rid of a longstanding grievance of TDC's: you no longer need to mix up all the irreps. This PR is content to migrate energy variable names. Other EOM variables go through `oeprop`, which will be a follow-up PR. A comprehensive test of EOM naming conventions is deferred to Pt. 2. This PR also contains misc. minor EOM cleanup I did while trying to understand the big picture of the code. More cleanup is possible, but you need to give EOM a wavefunction first, which is far outside the scope of this PR. Obligatory pings to @loriab and @lothian. ## Todos; - [x] Improve cc docs; - [x] Rename EOMCC energy variables to new standard ; - [x] Creates new EOM tag for tests . ## Checklist; - [x] All cc tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2475
https://github.com/psi4/psi4/pull/2475:324,Modifiability,variab,variables,324,"## Description; This PR is the _first part_ of migrating EOM variables to the new standard for variable names, introduced in #2462. Among other things, the new standard gets rid of a longstanding grievance of TDC's: you no longer need to mix up all the irreps. This PR is content to migrate energy variable names. Other EOM variables go through `oeprop`, which will be a follow-up PR. A comprehensive test of EOM naming conventions is deferred to Pt. 2. This PR also contains misc. minor EOM cleanup I did while trying to understand the big picture of the code. More cleanup is possible, but you need to give EOM a wavefunction first, which is far outside the scope of this PR. Obligatory pings to @loriab and @lothian. ## Todos; - [x] Improve cc docs; - [x] Rename EOMCC energy variables to new standard ; - [x] Creates new EOM tag for tests . ## Checklist; - [x] All cc tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2475
https://github.com/psi4/psi4/pull/2475:779,Modifiability,variab,variables,779,"## Description; This PR is the _first part_ of migrating EOM variables to the new standard for variable names, introduced in #2462. Among other things, the new standard gets rid of a longstanding grievance of TDC's: you no longer need to mix up all the irreps. This PR is content to migrate energy variable names. Other EOM variables go through `oeprop`, which will be a follow-up PR. A comprehensive test of EOM naming conventions is deferred to Pt. 2. This PR also contains misc. minor EOM cleanup I did while trying to understand the big picture of the code. More cleanup is possible, but you need to give EOM a wavefunction first, which is far outside the scope of this PR. Obligatory pings to @loriab and @lothian. ## Todos; - [x] Improve cc docs; - [x] Rename EOMCC energy variables to new standard ; - [x] Creates new EOM tag for tests . ## Checklist; - [x] All cc tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2475
https://github.com/psi4/psi4/pull/2475:401,Testability,test,test,401,"## Description; This PR is the _first part_ of migrating EOM variables to the new standard for variable names, introduced in #2462. Among other things, the new standard gets rid of a longstanding grievance of TDC's: you no longer need to mix up all the irreps. This PR is content to migrate energy variable names. Other EOM variables go through `oeprop`, which will be a follow-up PR. A comprehensive test of EOM naming conventions is deferred to Pt. 2. This PR also contains misc. minor EOM cleanup I did while trying to understand the big picture of the code. More cleanup is possible, but you need to give EOM a wavefunction first, which is far outside the scope of this PR. Obligatory pings to @loriab and @lothian. ## Todos; - [x] Improve cc docs; - [x] Rename EOMCC energy variables to new standard ; - [x] Creates new EOM tag for tests . ## Checklist; - [x] All cc tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2475
https://github.com/psi4/psi4/pull/2475:837,Testability,test,tests,837,"## Description; This PR is the _first part_ of migrating EOM variables to the new standard for variable names, introduced in #2462. Among other things, the new standard gets rid of a longstanding grievance of TDC's: you no longer need to mix up all the irreps. This PR is content to migrate energy variable names. Other EOM variables go through `oeprop`, which will be a follow-up PR. A comprehensive test of EOM naming conventions is deferred to Pt. 2. This PR also contains misc. minor EOM cleanup I did while trying to understand the big picture of the code. More cleanup is possible, but you need to give EOM a wavefunction first, which is far outside the scope of this PR. Obligatory pings to @loriab and @lothian. ## Todos; - [x] Improve cc docs; - [x] Rename EOMCC energy variables to new standard ; - [x] Creates new EOM tag for tests . ## Checklist; - [x] All cc tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2475
https://github.com/psi4/psi4/pull/2475:872,Testability,test,tests,872,"## Description; This PR is the _first part_ of migrating EOM variables to the new standard for variable names, introduced in #2462. Among other things, the new standard gets rid of a longstanding grievance of TDC's: you no longer need to mix up all the irreps. This PR is content to migrate energy variable names. Other EOM variables go through `oeprop`, which will be a follow-up PR. A comprehensive test of EOM naming conventions is deferred to Pt. 2. This PR also contains misc. minor EOM cleanup I did while trying to understand the big picture of the code. More cleanup is possible, but you need to give EOM a wavefunction first, which is far outside the scope of this PR. Obligatory pings to @loriab and @lothian. ## Todos; - [x] Improve cc docs; - [x] Rename EOMCC energy variables to new standard ; - [x] Creates new EOM tag for tests . ## Checklist; - [x] All cc tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2475
https://github.com/psi4/psi4/issues/2476:703,Deployability,update,update,703,"Testing some calculations, I ran into very odd behavior in Psi4 1.3.2. The input; ```; molecule {; 0 2; Y; }. set basis seg-cc-pv5z-pp; set scf_type direct; set df_scf_guess false; set reference uhf; energy('scf'); ```; leads to the output; ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 2, 0, 0, 0, 0, 1, 1, 1 ]; SOCC [ 0, 0, 0, 0, 0, 1, 0, 0 ]. @UHF iter 1: -33.78761858648352 -3.37876e+01 4.53671e-02 DIIS; Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 1, 0, 0, 0, 0, 1, 1, 1 ]; SOCC [ 1, 1, 0, 1, 0, 0, 0, 0 ]. @UHF iter 2: -36.39804695906182 -2.61043e+00 2.16710e-02 DIIS; ```. For some reason, the occupation update changes the spin state from a doublet (one unpaired electron) to hextet (3 unpaired electrons). Basis set is attached. [seg-cc-pv5z-pp.gbs.txt](https://github.com/psi4/psi4/files/8247541/seg-cc-pv5z-pp.gbs.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2476
https://github.com/psi4/psi4/issues/2476:200,Energy Efficiency,energy,energy,200,"Testing some calculations, I ran into very odd behavior in Psi4 1.3.2. The input; ```; molecule {; 0 2; Y; }. set basis seg-cc-pv5z-pp; set scf_type direct; set df_scf_guess false; set reference uhf; energy('scf'); ```; leads to the output; ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 2, 0, 0, 0, 0, 1, 1, 1 ]; SOCC [ 0, 0, 0, 0, 0, 1, 0, 0 ]. @UHF iter 1: -33.78761858648352 -3.37876e+01 4.53671e-02 DIIS; Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 1, 0, 0, 0, 0, 1, 1, 1 ]; SOCC [ 1, 1, 0, 1, 0, 0, 0, 0 ]. @UHF iter 2: -36.39804695906182 -2.61043e+00 2.16710e-02 DIIS; ```. For some reason, the occupation update changes the spin state from a doublet (one unpaired electron) to hextet (3 unpaired electrons). Basis set is attached. [seg-cc-pv5z-pp.gbs.txt](https://github.com/psi4/psi4/files/8247541/seg-cc-pv5z-pp.gbs.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2476
https://github.com/psi4/psi4/issues/2476:272,Energy Efficiency,Energy,Energy,272,"Testing some calculations, I ran into very odd behavior in Psi4 1.3.2. The input; ```; molecule {; 0 2; Y; }. set basis seg-cc-pv5z-pp; set scf_type direct; set df_scf_guess false; set reference uhf; energy('scf'); ```; leads to the output; ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 2, 0, 0, 0, 0, 1, 1, 1 ]; SOCC [ 0, 0, 0, 0, 0, 1, 0, 0 ]. @UHF iter 1: -33.78761858648352 -3.37876e+01 4.53671e-02 DIIS; Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 1, 0, 0, 0, 0, 1, 1, 1 ]; SOCC [ 1, 1, 0, 1, 0, 0, 0, 0 ]. @UHF iter 2: -36.39804695906182 -2.61043e+00 2.16710e-02 DIIS; ```. For some reason, the occupation update changes the spin state from a doublet (one unpaired electron) to hextet (3 unpaired electrons). Basis set is attached. [seg-cc-pv5z-pp.gbs.txt](https://github.com/psi4/psi4/files/8247541/seg-cc-pv5z-pp.gbs.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2476
https://github.com/psi4/psi4/issues/2476:0,Testability,Test,Testing,0,"Testing some calculations, I ran into very odd behavior in Psi4 1.3.2. The input; ```; molecule {; 0 2; Y; }. set basis seg-cc-pv5z-pp; set scf_type direct; set df_scf_guess false; set reference uhf; energy('scf'); ```; leads to the output; ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 2, 0, 0, 0, 0, 1, 1, 1 ]; SOCC [ 0, 0, 0, 0, 0, 1, 0, 0 ]. @UHF iter 1: -33.78761858648352 -3.37876e+01 4.53671e-02 DIIS; Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 1, 0, 0, 0, 0, 1, 1, 1 ]; SOCC [ 1, 1, 0, 1, 0, 0, 0, 0 ]. @UHF iter 2: -36.39804695906182 -2.61043e+00 2.16710e-02 DIIS; ```. For some reason, the occupation update changes the spin state from a doublet (one unpaired electron) to hextet (3 unpaired electrons). Basis set is attached. [seg-cc-pv5z-pp.gbs.txt](https://github.com/psi4/psi4/files/8247541/seg-cc-pv5z-pp.gbs.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2476
https://github.com/psi4/psi4/pull/2481:811,Availability,redundant,redundant,811,"## Description; Optimizes the integral transformation step of SAPT(DFT), in which the transformed MO needs to be written to the disk. The `STORE` scheme in `src/psi4/lib3index/dfhelper.cc` has problem in writing blocks of integrals efficiently, and this PR changes it to `direct_iaQ` to optimize the writing process. Also fixed a few memory related bugs and modified a few timer tags.; The deafult scaling scheme of SAPT(DFT) exchange-dispersion energy is now changed from `DISP` to `FIXED`. It scales the uncoupled Exch-Disp2 by 0.769848. Deeper details are discussed in the paper [Y. Xie, D. G. A. Smith, and C. D. Sherrill, J. Chem. Phys. **157**, 024801 (2022)].; The SAPT(DFT) procedure is also optimized for the case that `SAPT_DFT_FUNCTIONAL = HF`, i.e. running SAPT0 with the SAPT(DFT) driver, to avoid redundant SCF calculations. ## Todos. - [ ] Optimization of disk I/O in SAPT(DFT) integral transformation; - [ ] Fixed minor memory related bugs and modified timer tags; - [ ] Switched default exch-disp scaling scheme to FIXED (default factor 0.769848); - [ ] Optimization of SAPT(HF) procedure. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481
https://github.com/psi4/psi4/pull/2481:232,Energy Efficiency,efficient,efficiently,232,"## Description; Optimizes the integral transformation step of SAPT(DFT), in which the transformed MO needs to be written to the disk. The `STORE` scheme in `src/psi4/lib3index/dfhelper.cc` has problem in writing blocks of integrals efficiently, and this PR changes it to `direct_iaQ` to optimize the writing process. Also fixed a few memory related bugs and modified a few timer tags.; The deafult scaling scheme of SAPT(DFT) exchange-dispersion energy is now changed from `DISP` to `FIXED`. It scales the uncoupled Exch-Disp2 by 0.769848. Deeper details are discussed in the paper [Y. Xie, D. G. A. Smith, and C. D. Sherrill, J. Chem. Phys. **157**, 024801 (2022)].; The SAPT(DFT) procedure is also optimized for the case that `SAPT_DFT_FUNCTIONAL = HF`, i.e. running SAPT0 with the SAPT(DFT) driver, to avoid redundant SCF calculations. ## Todos. - [ ] Optimization of disk I/O in SAPT(DFT) integral transformation; - [ ] Fixed minor memory related bugs and modified timer tags; - [ ] Switched default exch-disp scaling scheme to FIXED (default factor 0.769848); - [ ] Optimization of SAPT(HF) procedure. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481
https://github.com/psi4/psi4/pull/2481:446,Energy Efficiency,energy,energy,446,"## Description; Optimizes the integral transformation step of SAPT(DFT), in which the transformed MO needs to be written to the disk. The `STORE` scheme in `src/psi4/lib3index/dfhelper.cc` has problem in writing blocks of integrals efficiently, and this PR changes it to `direct_iaQ` to optimize the writing process. Also fixed a few memory related bugs and modified a few timer tags.; The deafult scaling scheme of SAPT(DFT) exchange-dispersion energy is now changed from `DISP` to `FIXED`. It scales the uncoupled Exch-Disp2 by 0.769848. Deeper details are discussed in the paper [Y. Xie, D. G. A. Smith, and C. D. Sherrill, J. Chem. Phys. **157**, 024801 (2022)].; The SAPT(DFT) procedure is also optimized for the case that `SAPT_DFT_FUNCTIONAL = HF`, i.e. running SAPT0 with the SAPT(DFT) driver, to avoid redundant SCF calculations. ## Todos. - [ ] Optimization of disk I/O in SAPT(DFT) integral transformation; - [ ] Fixed minor memory related bugs and modified timer tags; - [ ] Switched default exch-disp scaling scheme to FIXED (default factor 0.769848); - [ ] Optimization of SAPT(HF) procedure. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481
https://github.com/psi4/psi4/pull/2481:16,Performance,Optimiz,Optimizes,16,"## Description; Optimizes the integral transformation step of SAPT(DFT), in which the transformed MO needs to be written to the disk. The `STORE` scheme in `src/psi4/lib3index/dfhelper.cc` has problem in writing blocks of integrals efficiently, and this PR changes it to `direct_iaQ` to optimize the writing process. Also fixed a few memory related bugs and modified a few timer tags.; The deafult scaling scheme of SAPT(DFT) exchange-dispersion energy is now changed from `DISP` to `FIXED`. It scales the uncoupled Exch-Disp2 by 0.769848. Deeper details are discussed in the paper [Y. Xie, D. G. A. Smith, and C. D. Sherrill, J. Chem. Phys. **157**, 024801 (2022)].; The SAPT(DFT) procedure is also optimized for the case that `SAPT_DFT_FUNCTIONAL = HF`, i.e. running SAPT0 with the SAPT(DFT) driver, to avoid redundant SCF calculations. ## Todos. - [ ] Optimization of disk I/O in SAPT(DFT) integral transformation; - [ ] Fixed minor memory related bugs and modified timer tags; - [ ] Switched default exch-disp scaling scheme to FIXED (default factor 0.769848); - [ ] Optimization of SAPT(HF) procedure. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481
https://github.com/psi4/psi4/pull/2481:287,Performance,optimiz,optimize,287,"## Description; Optimizes the integral transformation step of SAPT(DFT), in which the transformed MO needs to be written to the disk. The `STORE` scheme in `src/psi4/lib3index/dfhelper.cc` has problem in writing blocks of integrals efficiently, and this PR changes it to `direct_iaQ` to optimize the writing process. Also fixed a few memory related bugs and modified a few timer tags.; The deafult scaling scheme of SAPT(DFT) exchange-dispersion energy is now changed from `DISP` to `FIXED`. It scales the uncoupled Exch-Disp2 by 0.769848. Deeper details are discussed in the paper [Y. Xie, D. G. A. Smith, and C. D. Sherrill, J. Chem. Phys. **157**, 024801 (2022)].; The SAPT(DFT) procedure is also optimized for the case that `SAPT_DFT_FUNCTIONAL = HF`, i.e. running SAPT0 with the SAPT(DFT) driver, to avoid redundant SCF calculations. ## Todos. - [ ] Optimization of disk I/O in SAPT(DFT) integral transformation; - [ ] Fixed minor memory related bugs and modified timer tags; - [ ] Switched default exch-disp scaling scheme to FIXED (default factor 0.769848); - [ ] Optimization of SAPT(HF) procedure. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481
https://github.com/psi4/psi4/pull/2481:700,Performance,optimiz,optimized,700,"## Description; Optimizes the integral transformation step of SAPT(DFT), in which the transformed MO needs to be written to the disk. The `STORE` scheme in `src/psi4/lib3index/dfhelper.cc` has problem in writing blocks of integrals efficiently, and this PR changes it to `direct_iaQ` to optimize the writing process. Also fixed a few memory related bugs and modified a few timer tags.; The deafult scaling scheme of SAPT(DFT) exchange-dispersion energy is now changed from `DISP` to `FIXED`. It scales the uncoupled Exch-Disp2 by 0.769848. Deeper details are discussed in the paper [Y. Xie, D. G. A. Smith, and C. D. Sherrill, J. Chem. Phys. **157**, 024801 (2022)].; The SAPT(DFT) procedure is also optimized for the case that `SAPT_DFT_FUNCTIONAL = HF`, i.e. running SAPT0 with the SAPT(DFT) driver, to avoid redundant SCF calculations. ## Todos. - [ ] Optimization of disk I/O in SAPT(DFT) integral transformation; - [ ] Fixed minor memory related bugs and modified timer tags; - [ ] Switched default exch-disp scaling scheme to FIXED (default factor 0.769848); - [ ] Optimization of SAPT(HF) procedure. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481
https://github.com/psi4/psi4/pull/2481:855,Performance,Optimiz,Optimization,855,"## Description; Optimizes the integral transformation step of SAPT(DFT), in which the transformed MO needs to be written to the disk. The `STORE` scheme in `src/psi4/lib3index/dfhelper.cc` has problem in writing blocks of integrals efficiently, and this PR changes it to `direct_iaQ` to optimize the writing process. Also fixed a few memory related bugs and modified a few timer tags.; The deafult scaling scheme of SAPT(DFT) exchange-dispersion energy is now changed from `DISP` to `FIXED`. It scales the uncoupled Exch-Disp2 by 0.769848. Deeper details are discussed in the paper [Y. Xie, D. G. A. Smith, and C. D. Sherrill, J. Chem. Phys. **157**, 024801 (2022)].; The SAPT(DFT) procedure is also optimized for the case that `SAPT_DFT_FUNCTIONAL = HF`, i.e. running SAPT0 with the SAPT(DFT) driver, to avoid redundant SCF calculations. ## Todos. - [ ] Optimization of disk I/O in SAPT(DFT) integral transformation; - [ ] Fixed minor memory related bugs and modified timer tags; - [ ] Switched default exch-disp scaling scheme to FIXED (default factor 0.769848); - [ ] Optimization of SAPT(HF) procedure. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481
https://github.com/psi4/psi4/pull/2481:1071,Performance,Optimiz,Optimization,1071,"## Description; Optimizes the integral transformation step of SAPT(DFT), in which the transformed MO needs to be written to the disk. The `STORE` scheme in `src/psi4/lib3index/dfhelper.cc` has problem in writing blocks of integrals efficiently, and this PR changes it to `direct_iaQ` to optimize the writing process. Also fixed a few memory related bugs and modified a few timer tags.; The deafult scaling scheme of SAPT(DFT) exchange-dispersion energy is now changed from `DISP` to `FIXED`. It scales the uncoupled Exch-Disp2 by 0.769848. Deeper details are discussed in the paper [Y. Xie, D. G. A. Smith, and C. D. Sherrill, J. Chem. Phys. **157**, 024801 (2022)].; The SAPT(DFT) procedure is also optimized for the case that `SAPT_DFT_FUNCTIONAL = HF`, i.e. running SAPT0 with the SAPT(DFT) driver, to avoid redundant SCF calculations. ## Todos. - [ ] Optimization of disk I/O in SAPT(DFT) integral transformation; - [ ] Fixed minor memory related bugs and modified timer tags; - [ ] Switched default exch-disp scaling scheme to FIXED (default factor 0.769848); - [ ] Optimization of SAPT(HF) procedure. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481
https://github.com/psi4/psi4/pull/2481:805,Safety,avoid,avoid,805,"## Description; Optimizes the integral transformation step of SAPT(DFT), in which the transformed MO needs to be written to the disk. The `STORE` scheme in `src/psi4/lib3index/dfhelper.cc` has problem in writing blocks of integrals efficiently, and this PR changes it to `direct_iaQ` to optimize the writing process. Also fixed a few memory related bugs and modified a few timer tags.; The deafult scaling scheme of SAPT(DFT) exchange-dispersion energy is now changed from `DISP` to `FIXED`. It scales the uncoupled Exch-Disp2 by 0.769848. Deeper details are discussed in the paper [Y. Xie, D. G. A. Smith, and C. D. Sherrill, J. Chem. Phys. **157**, 024801 (2022)].; The SAPT(DFT) procedure is also optimized for the case that `SAPT_DFT_FUNCTIONAL = HF`, i.e. running SAPT0 with the SAPT(DFT) driver, to avoid redundant SCF calculations. ## Todos. - [ ] Optimization of disk I/O in SAPT(DFT) integral transformation; - [ ] Fixed minor memory related bugs and modified timer tags; - [ ] Switched default exch-disp scaling scheme to FIXED (default factor 0.769848); - [ ] Optimization of SAPT(HF) procedure. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481
https://github.com/psi4/psi4/pull/2481:811,Safety,redund,redundant,811,"## Description; Optimizes the integral transformation step of SAPT(DFT), in which the transformed MO needs to be written to the disk. The `STORE` scheme in `src/psi4/lib3index/dfhelper.cc` has problem in writing blocks of integrals efficiently, and this PR changes it to `direct_iaQ` to optimize the writing process. Also fixed a few memory related bugs and modified a few timer tags.; The deafult scaling scheme of SAPT(DFT) exchange-dispersion energy is now changed from `DISP` to `FIXED`. It scales the uncoupled Exch-Disp2 by 0.769848. Deeper details are discussed in the paper [Y. Xie, D. G. A. Smith, and C. D. Sherrill, J. Chem. Phys. **157**, 024801 (2022)].; The SAPT(DFT) procedure is also optimized for the case that `SAPT_DFT_FUNCTIONAL = HF`, i.e. running SAPT0 with the SAPT(DFT) driver, to avoid redundant SCF calculations. ## Todos. - [ ] Optimization of disk I/O in SAPT(DFT) integral transformation; - [ ] Fixed minor memory related bugs and modified timer tags; - [ ] Switched default exch-disp scaling scheme to FIXED (default factor 0.769848); - [ ] Optimization of SAPT(HF) procedure. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481
https://github.com/psi4/psi4/pull/2481:1158,Testability,Test,Tests,1158,"## Description; Optimizes the integral transformation step of SAPT(DFT), in which the transformed MO needs to be written to the disk. The `STORE` scheme in `src/psi4/lib3index/dfhelper.cc` has problem in writing blocks of integrals efficiently, and this PR changes it to `direct_iaQ` to optimize the writing process. Also fixed a few memory related bugs and modified a few timer tags.; The deafult scaling scheme of SAPT(DFT) exchange-dispersion energy is now changed from `DISP` to `FIXED`. It scales the uncoupled Exch-Disp2 by 0.769848. Deeper details are discussed in the paper [Y. Xie, D. G. A. Smith, and C. D. Sherrill, J. Chem. Phys. **157**, 024801 (2022)].; The SAPT(DFT) procedure is also optimized for the case that `SAPT_DFT_FUNCTIONAL = HF`, i.e. running SAPT0 with the SAPT(DFT) driver, to avoid redundant SCF calculations. ## Todos. - [ ] Optimization of disk I/O in SAPT(DFT) integral transformation; - [ ] Fixed minor memory related bugs and modified timer tags; - [ ] Switched default exch-disp scaling scheme to FIXED (default factor 0.769848); - [ ] Optimization of SAPT(HF) procedure. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481
https://github.com/psi4/psi4/pull/2481:1232,Testability,test,tests,1232,"## Description; Optimizes the integral transformation step of SAPT(DFT), in which the transformed MO needs to be written to the disk. The `STORE` scheme in `src/psi4/lib3index/dfhelper.cc` has problem in writing blocks of integrals efficiently, and this PR changes it to `direct_iaQ` to optimize the writing process. Also fixed a few memory related bugs and modified a few timer tags.; The deafult scaling scheme of SAPT(DFT) exchange-dispersion energy is now changed from `DISP` to `FIXED`. It scales the uncoupled Exch-Disp2 by 0.769848. Deeper details are discussed in the paper [Y. Xie, D. G. A. Smith, and C. D. Sherrill, J. Chem. Phys. **157**, 024801 (2022)].; The SAPT(DFT) procedure is also optimized for the case that `SAPT_DFT_FUNCTIONAL = HF`, i.e. running SAPT0 with the SAPT(DFT) driver, to avoid redundant SCF calculations. ## Todos. - [ ] Optimization of disk I/O in SAPT(DFT) integral transformation; - [ ] Fixed minor memory related bugs and modified timer tags; - [ ] Switched default exch-disp scaling scheme to FIXED (default factor 0.769848); - [ ] Optimization of SAPT(HF) procedure. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481
https://github.com/psi4/psi4/pull/2481:1323,Testability,test,tests,1323,"## Description; Optimizes the integral transformation step of SAPT(DFT), in which the transformed MO needs to be written to the disk. The `STORE` scheme in `src/psi4/lib3index/dfhelper.cc` has problem in writing blocks of integrals efficiently, and this PR changes it to `direct_iaQ` to optimize the writing process. Also fixed a few memory related bugs and modified a few timer tags.; The deafult scaling scheme of SAPT(DFT) exchange-dispersion energy is now changed from `DISP` to `FIXED`. It scales the uncoupled Exch-Disp2 by 0.769848. Deeper details are discussed in the paper [Y. Xie, D. G. A. Smith, and C. D. Sherrill, J. Chem. Phys. **157**, 024801 (2022)].; The SAPT(DFT) procedure is also optimized for the case that `SAPT_DFT_FUNCTIONAL = HF`, i.e. running SAPT0 with the SAPT(DFT) driver, to avoid redundant SCF calculations. ## Todos. - [ ] Optimization of disk I/O in SAPT(DFT) integral transformation; - [ ] Fixed minor memory related bugs and modified timer tags; - [ ] Switched default exch-disp scaling scheme to FIXED (default factor 0.769848); - [ ] Optimization of SAPT(HF) procedure. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2481
https://github.com/psi4/psi4/pull/2483:541,Energy Efficiency,allocate,allocate,541,"## Description; This PR refactors angular momentum integrals (`AngularMomentumInt`) using the McMurchie-Davidson scheme. It is the first PR of a series to replace most of the existing OS86 code with M-D (#2414). I've chosen the angular momentum integrals because they are really simple and only require the E matrix (Hermite-to-Cartesian conversion factors). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `AngularMomentumInt` w/ M-D scheme. ## Questions; - [x] Is it worth to pre-allocate the E-matrix? This would require some boilerplate code, which could be worth packing into a small class that all future M-D integrals will inherit from?. ## Checklist; - [x] Tests added for any new features (consistency check against Psi4 v1.5); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2483
https://github.com/psi4/psi4/pull/2483:24,Modifiability,refactor,refactors,24,"## Description; This PR refactors angular momentum integrals (`AngularMomentumInt`) using the McMurchie-Davidson scheme. It is the first PR of a series to replace most of the existing OS86 code with M-D (#2414). I've chosen the angular momentum integrals because they are really simple and only require the E matrix (Hermite-to-Cartesian conversion factors). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `AngularMomentumInt` w/ M-D scheme. ## Questions; - [x] Is it worth to pre-allocate the E-matrix? This would require some boilerplate code, which could be worth packing into a small class that all future M-D integrals will inherit from?. ## Checklist; - [x] Tests added for any new features (consistency check against Psi4 v1.5); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2483
https://github.com/psi4/psi4/pull/2483:689,Modifiability,inherit,inherit,689,"## Description; This PR refactors angular momentum integrals (`AngularMomentumInt`) using the McMurchie-Davidson scheme. It is the first PR of a series to replace most of the existing OS86 code with M-D (#2414). I've chosen the angular momentum integrals because they are really simple and only require the E matrix (Hermite-to-Cartesian conversion factors). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `AngularMomentumInt` w/ M-D scheme. ## Questions; - [x] Is it worth to pre-allocate the E-matrix? This would require some boilerplate code, which could be worth packing into a small class that all future M-D integrals will inherit from?. ## Checklist; - [x] Tests added for any new features (consistency check against Psi4 v1.5); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2483
https://github.com/psi4/psi4/pull/2483:724,Testability,Test,Tests,724,"## Description; This PR refactors angular momentum integrals (`AngularMomentumInt`) using the McMurchie-Davidson scheme. It is the first PR of a series to replace most of the existing OS86 code with M-D (#2414). I've chosen the angular momentum integrals because they are really simple and only require the E matrix (Hermite-to-Cartesian conversion factors). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `AngularMomentumInt` w/ M-D scheme. ## Questions; - [x] Is it worth to pre-allocate the E-matrix? This would require some boilerplate code, which could be worth packing into a small class that all future M-D integrals will inherit from?. ## Checklist; - [x] Tests added for any new features (consistency check against Psi4 v1.5); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2483
https://github.com/psi4/psi4/pull/2483:836,Testability,test,tests,836,"## Description; This PR refactors angular momentum integrals (`AngularMomentumInt`) using the McMurchie-Davidson scheme. It is the first PR of a series to replace most of the existing OS86 code with M-D (#2414). I've chosen the angular momentum integrals because they are really simple and only require the E matrix (Hermite-to-Cartesian conversion factors). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `AngularMomentumInt` w/ M-D scheme. ## Questions; - [x] Is it worth to pre-allocate the E-matrix? This would require some boilerplate code, which could be worth packing into a small class that all future M-D integrals will inherit from?. ## Checklist; - [x] Tests added for any new features (consistency check against Psi4 v1.5); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2483
https://github.com/psi4/psi4/pull/2483:927,Testability,test,tests,927,"## Description; This PR refactors angular momentum integrals (`AngularMomentumInt`) using the McMurchie-Davidson scheme. It is the first PR of a series to replace most of the existing OS86 code with M-D (#2414). I've chosen the angular momentum integrals because they are really simple and only require the E matrix (Hermite-to-Cartesian conversion factors). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `AngularMomentumInt` w/ M-D scheme. ## Questions; - [x] Is it worth to pre-allocate the E-matrix? This would require some boilerplate code, which could be worth packing into a small class that all future M-D integrals will inherit from?. ## Checklist; - [x] Tests added for any new features (consistency check against Psi4 v1.5); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2483
https://github.com/psi4/psi4/pull/2483:279,Usability,simpl,simple,279,"## Description; This PR refactors angular momentum integrals (`AngularMomentumInt`) using the McMurchie-Davidson scheme. It is the first PR of a series to replace most of the existing OS86 code with M-D (#2414). I've chosen the angular momentum integrals because they are really simple and only require the E matrix (Hermite-to-Cartesian conversion factors). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `AngularMomentumInt` w/ M-D scheme. ## Questions; - [x] Is it worth to pre-allocate the E-matrix? This would require some boilerplate code, which could be worth packing into a small class that all future M-D integrals will inherit from?. ## Checklist; - [x] Tests added for any new features (consistency check against Psi4 v1.5); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2483
https://github.com/psi4/psi4/pull/2485:327,Modifiability,variab,variable,327,"## Description; This code removes `oeprop`'s specialized dipole/quadrupole functions in favor of the general multipole function. The output for dipoles _does_ change. I can change the printout if there's demand for it, but I don't care either way. I just want to have less code to mess with for the next stage of excited state variable cleanup. ### Old Function; ```; Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Nuclear Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.9783. Electronic Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: -0.1680. Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.8103 Total: 0.8103. Dipole Moment: [D]; X: 0.0000 Y: 0.0000 Z: 2.0595 Total: 2.0595; ```. ### New Function; See [here](https://github.com/psi4/psi4/pull/2485#issuecomment-1077774801). ## Checklist; - [x] Quick tests pass; - [x] Properties pass . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2485
https://github.com/psi4/psi4/pull/2485:871,Testability,test,tests,871,"## Description; This code removes `oeprop`'s specialized dipole/quadrupole functions in favor of the general multipole function. The output for dipoles _does_ change. I can change the printout if there's demand for it, but I don't care either way. I just want to have less code to mess with for the next stage of excited state variable cleanup. ### Old Function; ```; Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Nuclear Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.9783. Electronic Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: -0.1680. Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.8103 Total: 0.8103. Dipole Moment: [D]; X: 0.0000 Y: 0.0000 Z: 2.0595 Total: 2.0595; ```. ### New Function; See [here](https://github.com/psi4/psi4/pull/2485#issuecomment-1077774801). ## Checklist; - [x] Quick tests pass; - [x] Properties pass . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2485
https://github.com/psi4/psi4/issues/2486:496,Energy Efficiency,ENERGY,ENERGY,496,"This is the mega-issue for the cleanup of excited-state variables. I come to this as a spinoff of the cc modernization mega-issue, which is a spin-off of the density sanitizing mega-issue. The goal of this mega-issue is to synchronize variable names across TDDFT, EOM, and ADC, per the standard introduced in #2462 and amended slightly in #2475. ### The Standard; We support the following access patterns:; ```; f""{method} ROOT 0 ({initial_state}) -> ROOT {irrep_idx} ({target_state}) EXCITATION ENERGY""; f""{method} TD-HF ROOT 0 -> ROOT {global_idx} EXCITATION ENERGY; f""{method} ROOT 0 -> ROOT {global_idx} EXCITATION ENERGY - {transition} TRANSITION; ```. - `{method}` should include both the _family_ of the method and the _specific method_ used. For example, both `CC` and `CC3`.; - `{global_idx}` is the index of the root, ordered by energy, in the space of all roots.; - `{irrep_idx}`is the index of the root, ordered by energy, in the space of roots of that irrep. This should **never** be larger than `global_idx` and is identical `global_idx` for molecules without symmetry.; - `{initial_state} ^ {target_state} = {transition}`. ### The Status. - [x] DFT; - [x] #2462 - initial cleanup; - [x] (part of) #2477 - set TD-DFT variables with names starting TD-SCF or TD-DFT (maybr both?) in addition to TD-fctl; - [ ] EOM; - [x] #2475 - variables set directly in `cceom`; - [x] Variables set directly in `ccdensity`; - [x] #2514 - Oscillator strengths; - [x] #2525 - Einstein coefficients, rotation strengths; - [x] #2538 - All access patterns ; - [ ] Variables set indirectly, via oeprop; - [X] #2479 - remove mutlipole component variables from being set in oeprop; - [x] #2485 - condense multipole setting functions into one; - [ ] #2541 Rename multipole variables from `oeprop` according to the standard; - [x] ADCC; - [x] #2513 ; - [ ] Final cleanup pass",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2486
https://github.com/psi4/psi4/issues/2486:561,Energy Efficiency,ENERGY,ENERGY,561,"This is the mega-issue for the cleanup of excited-state variables. I come to this as a spinoff of the cc modernization mega-issue, which is a spin-off of the density sanitizing mega-issue. The goal of this mega-issue is to synchronize variable names across TDDFT, EOM, and ADC, per the standard introduced in #2462 and amended slightly in #2475. ### The Standard; We support the following access patterns:; ```; f""{method} ROOT 0 ({initial_state}) -> ROOT {irrep_idx} ({target_state}) EXCITATION ENERGY""; f""{method} TD-HF ROOT 0 -> ROOT {global_idx} EXCITATION ENERGY; f""{method} ROOT 0 -> ROOT {global_idx} EXCITATION ENERGY - {transition} TRANSITION; ```. - `{method}` should include both the _family_ of the method and the _specific method_ used. For example, both `CC` and `CC3`.; - `{global_idx}` is the index of the root, ordered by energy, in the space of all roots.; - `{irrep_idx}`is the index of the root, ordered by energy, in the space of roots of that irrep. This should **never** be larger than `global_idx` and is identical `global_idx` for molecules without symmetry.; - `{initial_state} ^ {target_state} = {transition}`. ### The Status. - [x] DFT; - [x] #2462 - initial cleanup; - [x] (part of) #2477 - set TD-DFT variables with names starting TD-SCF or TD-DFT (maybr both?) in addition to TD-fctl; - [ ] EOM; - [x] #2475 - variables set directly in `cceom`; - [x] Variables set directly in `ccdensity`; - [x] #2514 - Oscillator strengths; - [x] #2525 - Einstein coefficients, rotation strengths; - [x] #2538 - All access patterns ; - [ ] Variables set indirectly, via oeprop; - [X] #2479 - remove mutlipole component variables from being set in oeprop; - [x] #2485 - condense multipole setting functions into one; - [ ] #2541 Rename multipole variables from `oeprop` according to the standard; - [x] ADCC; - [x] #2513 ; - [ ] Final cleanup pass",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2486
https://github.com/psi4/psi4/issues/2486:619,Energy Efficiency,ENERGY,ENERGY,619,"This is the mega-issue for the cleanup of excited-state variables. I come to this as a spinoff of the cc modernization mega-issue, which is a spin-off of the density sanitizing mega-issue. The goal of this mega-issue is to synchronize variable names across TDDFT, EOM, and ADC, per the standard introduced in #2462 and amended slightly in #2475. ### The Standard; We support the following access patterns:; ```; f""{method} ROOT 0 ({initial_state}) -> ROOT {irrep_idx} ({target_state}) EXCITATION ENERGY""; f""{method} TD-HF ROOT 0 -> ROOT {global_idx} EXCITATION ENERGY; f""{method} ROOT 0 -> ROOT {global_idx} EXCITATION ENERGY - {transition} TRANSITION; ```. - `{method}` should include both the _family_ of the method and the _specific method_ used. For example, both `CC` and `CC3`.; - `{global_idx}` is the index of the root, ordered by energy, in the space of all roots.; - `{irrep_idx}`is the index of the root, ordered by energy, in the space of roots of that irrep. This should **never** be larger than `global_idx` and is identical `global_idx` for molecules without symmetry.; - `{initial_state} ^ {target_state} = {transition}`. ### The Status. - [x] DFT; - [x] #2462 - initial cleanup; - [x] (part of) #2477 - set TD-DFT variables with names starting TD-SCF or TD-DFT (maybr both?) in addition to TD-fctl; - [ ] EOM; - [x] #2475 - variables set directly in `cceom`; - [x] Variables set directly in `ccdensity`; - [x] #2514 - Oscillator strengths; - [x] #2525 - Einstein coefficients, rotation strengths; - [x] #2538 - All access patterns ; - [ ] Variables set indirectly, via oeprop; - [X] #2479 - remove mutlipole component variables from being set in oeprop; - [x] #2485 - condense multipole setting functions into one; - [ ] #2541 Rename multipole variables from `oeprop` according to the standard; - [x] ADCC; - [x] #2513 ; - [ ] Final cleanup pass",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2486
https://github.com/psi4/psi4/issues/2486:839,Energy Efficiency,energy,energy,839,"This is the mega-issue for the cleanup of excited-state variables. I come to this as a spinoff of the cc modernization mega-issue, which is a spin-off of the density sanitizing mega-issue. The goal of this mega-issue is to synchronize variable names across TDDFT, EOM, and ADC, per the standard introduced in #2462 and amended slightly in #2475. ### The Standard; We support the following access patterns:; ```; f""{method} ROOT 0 ({initial_state}) -> ROOT {irrep_idx} ({target_state}) EXCITATION ENERGY""; f""{method} TD-HF ROOT 0 -> ROOT {global_idx} EXCITATION ENERGY; f""{method} ROOT 0 -> ROOT {global_idx} EXCITATION ENERGY - {transition} TRANSITION; ```. - `{method}` should include both the _family_ of the method and the _specific method_ used. For example, both `CC` and `CC3`.; - `{global_idx}` is the index of the root, ordered by energy, in the space of all roots.; - `{irrep_idx}`is the index of the root, ordered by energy, in the space of roots of that irrep. This should **never** be larger than `global_idx` and is identical `global_idx` for molecules without symmetry.; - `{initial_state} ^ {target_state} = {transition}`. ### The Status. - [x] DFT; - [x] #2462 - initial cleanup; - [x] (part of) #2477 - set TD-DFT variables with names starting TD-SCF or TD-DFT (maybr both?) in addition to TD-fctl; - [ ] EOM; - [x] #2475 - variables set directly in `cceom`; - [x] Variables set directly in `ccdensity`; - [x] #2514 - Oscillator strengths; - [x] #2525 - Einstein coefficients, rotation strengths; - [x] #2538 - All access patterns ; - [ ] Variables set indirectly, via oeprop; - [X] #2479 - remove mutlipole component variables from being set in oeprop; - [x] #2485 - condense multipole setting functions into one; - [ ] #2541 Rename multipole variables from `oeprop` according to the standard; - [x] ADCC; - [x] #2513 ; - [ ] Final cleanup pass",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2486
https://github.com/psi4/psi4/issues/2486:927,Energy Efficiency,energy,energy,927,"This is the mega-issue for the cleanup of excited-state variables. I come to this as a spinoff of the cc modernization mega-issue, which is a spin-off of the density sanitizing mega-issue. The goal of this mega-issue is to synchronize variable names across TDDFT, EOM, and ADC, per the standard introduced in #2462 and amended slightly in #2475. ### The Standard; We support the following access patterns:; ```; f""{method} ROOT 0 ({initial_state}) -> ROOT {irrep_idx} ({target_state}) EXCITATION ENERGY""; f""{method} TD-HF ROOT 0 -> ROOT {global_idx} EXCITATION ENERGY; f""{method} ROOT 0 -> ROOT {global_idx} EXCITATION ENERGY - {transition} TRANSITION; ```. - `{method}` should include both the _family_ of the method and the _specific method_ used. For example, both `CC` and `CC3`.; - `{global_idx}` is the index of the root, ordered by energy, in the space of all roots.; - `{irrep_idx}`is the index of the root, ordered by energy, in the space of roots of that irrep. This should **never** be larger than `global_idx` and is identical `global_idx` for molecules without symmetry.; - `{initial_state} ^ {target_state} = {transition}`. ### The Status. - [x] DFT; - [x] #2462 - initial cleanup; - [x] (part of) #2477 - set TD-DFT variables with names starting TD-SCF or TD-DFT (maybr both?) in addition to TD-fctl; - [ ] EOM; - [x] #2475 - variables set directly in `cceom`; - [x] Variables set directly in `ccdensity`; - [x] #2514 - Oscillator strengths; - [x] #2525 - Einstein coefficients, rotation strengths; - [x] #2538 - All access patterns ; - [ ] Variables set indirectly, via oeprop; - [X] #2479 - remove mutlipole component variables from being set in oeprop; - [x] #2485 - condense multipole setting functions into one; - [ ] #2541 Rename multipole variables from `oeprop` according to the standard; - [x] ADCC; - [x] #2513 ; - [ ] Final cleanup pass",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2486
https://github.com/psi4/psi4/issues/2486:223,Integrability,synchroniz,synchronize,223,"This is the mega-issue for the cleanup of excited-state variables. I come to this as a spinoff of the cc modernization mega-issue, which is a spin-off of the density sanitizing mega-issue. The goal of this mega-issue is to synchronize variable names across TDDFT, EOM, and ADC, per the standard introduced in #2462 and amended slightly in #2475. ### The Standard; We support the following access patterns:; ```; f""{method} ROOT 0 ({initial_state}) -> ROOT {irrep_idx} ({target_state}) EXCITATION ENERGY""; f""{method} TD-HF ROOT 0 -> ROOT {global_idx} EXCITATION ENERGY; f""{method} ROOT 0 -> ROOT {global_idx} EXCITATION ENERGY - {transition} TRANSITION; ```. - `{method}` should include both the _family_ of the method and the _specific method_ used. For example, both `CC` and `CC3`.; - `{global_idx}` is the index of the root, ordered by energy, in the space of all roots.; - `{irrep_idx}`is the index of the root, ordered by energy, in the space of roots of that irrep. This should **never** be larger than `global_idx` and is identical `global_idx` for molecules without symmetry.; - `{initial_state} ^ {target_state} = {transition}`. ### The Status. - [x] DFT; - [x] #2462 - initial cleanup; - [x] (part of) #2477 - set TD-DFT variables with names starting TD-SCF or TD-DFT (maybr both?) in addition to TD-fctl; - [ ] EOM; - [x] #2475 - variables set directly in `cceom`; - [x] Variables set directly in `ccdensity`; - [x] #2514 - Oscillator strengths; - [x] #2525 - Einstein coefficients, rotation strengths; - [x] #2538 - All access patterns ; - [ ] Variables set indirectly, via oeprop; - [X] #2479 - remove mutlipole component variables from being set in oeprop; - [x] #2485 - condense multipole setting functions into one; - [ ] #2541 Rename multipole variables from `oeprop` according to the standard; - [x] ADCC; - [x] #2513 ; - [ ] Final cleanup pass",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2486
https://github.com/psi4/psi4/issues/2486:56,Modifiability,variab,variables,56,"This is the mega-issue for the cleanup of excited-state variables. I come to this as a spinoff of the cc modernization mega-issue, which is a spin-off of the density sanitizing mega-issue. The goal of this mega-issue is to synchronize variable names across TDDFT, EOM, and ADC, per the standard introduced in #2462 and amended slightly in #2475. ### The Standard; We support the following access patterns:; ```; f""{method} ROOT 0 ({initial_state}) -> ROOT {irrep_idx} ({target_state}) EXCITATION ENERGY""; f""{method} TD-HF ROOT 0 -> ROOT {global_idx} EXCITATION ENERGY; f""{method} ROOT 0 -> ROOT {global_idx} EXCITATION ENERGY - {transition} TRANSITION; ```. - `{method}` should include both the _family_ of the method and the _specific method_ used. For example, both `CC` and `CC3`.; - `{global_idx}` is the index of the root, ordered by energy, in the space of all roots.; - `{irrep_idx}`is the index of the root, ordered by energy, in the space of roots of that irrep. This should **never** be larger than `global_idx` and is identical `global_idx` for molecules without symmetry.; - `{initial_state} ^ {target_state} = {transition}`. ### The Status. - [x] DFT; - [x] #2462 - initial cleanup; - [x] (part of) #2477 - set TD-DFT variables with names starting TD-SCF or TD-DFT (maybr both?) in addition to TD-fctl; - [ ] EOM; - [x] #2475 - variables set directly in `cceom`; - [x] Variables set directly in `ccdensity`; - [x] #2514 - Oscillator strengths; - [x] #2525 - Einstein coefficients, rotation strengths; - [x] #2538 - All access patterns ; - [ ] Variables set indirectly, via oeprop; - [X] #2479 - remove mutlipole component variables from being set in oeprop; - [x] #2485 - condense multipole setting functions into one; - [ ] #2541 Rename multipole variables from `oeprop` according to the standard; - [x] ADCC; - [x] #2513 ; - [ ] Final cleanup pass",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2486
https://github.com/psi4/psi4/issues/2486:235,Modifiability,variab,variable,235,"This is the mega-issue for the cleanup of excited-state variables. I come to this as a spinoff of the cc modernization mega-issue, which is a spin-off of the density sanitizing mega-issue. The goal of this mega-issue is to synchronize variable names across TDDFT, EOM, and ADC, per the standard introduced in #2462 and amended slightly in #2475. ### The Standard; We support the following access patterns:; ```; f""{method} ROOT 0 ({initial_state}) -> ROOT {irrep_idx} ({target_state}) EXCITATION ENERGY""; f""{method} TD-HF ROOT 0 -> ROOT {global_idx} EXCITATION ENERGY; f""{method} ROOT 0 -> ROOT {global_idx} EXCITATION ENERGY - {transition} TRANSITION; ```. - `{method}` should include both the _family_ of the method and the _specific method_ used. For example, both `CC` and `CC3`.; - `{global_idx}` is the index of the root, ordered by energy, in the space of all roots.; - `{irrep_idx}`is the index of the root, ordered by energy, in the space of roots of that irrep. This should **never** be larger than `global_idx` and is identical `global_idx` for molecules without symmetry.; - `{initial_state} ^ {target_state} = {transition}`. ### The Status. - [x] DFT; - [x] #2462 - initial cleanup; - [x] (part of) #2477 - set TD-DFT variables with names starting TD-SCF or TD-DFT (maybr both?) in addition to TD-fctl; - [ ] EOM; - [x] #2475 - variables set directly in `cceom`; - [x] Variables set directly in `ccdensity`; - [x] #2514 - Oscillator strengths; - [x] #2525 - Einstein coefficients, rotation strengths; - [x] #2538 - All access patterns ; - [ ] Variables set indirectly, via oeprop; - [X] #2479 - remove mutlipole component variables from being set in oeprop; - [x] #2485 - condense multipole setting functions into one; - [ ] #2541 Rename multipole variables from `oeprop` according to the standard; - [x] ADCC; - [x] #2513 ; - [ ] Final cleanup pass",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2486
https://github.com/psi4/psi4/issues/2486:1231,Modifiability,variab,variables,1231,"This is the mega-issue for the cleanup of excited-state variables. I come to this as a spinoff of the cc modernization mega-issue, which is a spin-off of the density sanitizing mega-issue. The goal of this mega-issue is to synchronize variable names across TDDFT, EOM, and ADC, per the standard introduced in #2462 and amended slightly in #2475. ### The Standard; We support the following access patterns:; ```; f""{method} ROOT 0 ({initial_state}) -> ROOT {irrep_idx} ({target_state}) EXCITATION ENERGY""; f""{method} TD-HF ROOT 0 -> ROOT {global_idx} EXCITATION ENERGY; f""{method} ROOT 0 -> ROOT {global_idx} EXCITATION ENERGY - {transition} TRANSITION; ```. - `{method}` should include both the _family_ of the method and the _specific method_ used. For example, both `CC` and `CC3`.; - `{global_idx}` is the index of the root, ordered by energy, in the space of all roots.; - `{irrep_idx}`is the index of the root, ordered by energy, in the space of roots of that irrep. This should **never** be larger than `global_idx` and is identical `global_idx` for molecules without symmetry.; - `{initial_state} ^ {target_state} = {transition}`. ### The Status. - [x] DFT; - [x] #2462 - initial cleanup; - [x] (part of) #2477 - set TD-DFT variables with names starting TD-SCF or TD-DFT (maybr both?) in addition to TD-fctl; - [ ] EOM; - [x] #2475 - variables set directly in `cceom`; - [x] Variables set directly in `ccdensity`; - [x] #2514 - Oscillator strengths; - [x] #2525 - Einstein coefficients, rotation strengths; - [x] #2538 - All access patterns ; - [ ] Variables set indirectly, via oeprop; - [X] #2479 - remove mutlipole component variables from being set in oeprop; - [x] #2485 - condense multipole setting functions into one; - [ ] #2541 Rename multipole variables from `oeprop` according to the standard; - [x] ADCC; - [x] #2513 ; - [ ] Final cleanup pass",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2486
https://github.com/psi4/psi4/issues/2486:1341,Modifiability,variab,variables,1341,"This is the mega-issue for the cleanup of excited-state variables. I come to this as a spinoff of the cc modernization mega-issue, which is a spin-off of the density sanitizing mega-issue. The goal of this mega-issue is to synchronize variable names across TDDFT, EOM, and ADC, per the standard introduced in #2462 and amended slightly in #2475. ### The Standard; We support the following access patterns:; ```; f""{method} ROOT 0 ({initial_state}) -> ROOT {irrep_idx} ({target_state}) EXCITATION ENERGY""; f""{method} TD-HF ROOT 0 -> ROOT {global_idx} EXCITATION ENERGY; f""{method} ROOT 0 -> ROOT {global_idx} EXCITATION ENERGY - {transition} TRANSITION; ```. - `{method}` should include both the _family_ of the method and the _specific method_ used. For example, both `CC` and `CC3`.; - `{global_idx}` is the index of the root, ordered by energy, in the space of all roots.; - `{irrep_idx}`is the index of the root, ordered by energy, in the space of roots of that irrep. This should **never** be larger than `global_idx` and is identical `global_idx` for molecules without symmetry.; - `{initial_state} ^ {target_state} = {transition}`. ### The Status. - [x] DFT; - [x] #2462 - initial cleanup; - [x] (part of) #2477 - set TD-DFT variables with names starting TD-SCF or TD-DFT (maybr both?) in addition to TD-fctl; - [ ] EOM; - [x] #2475 - variables set directly in `cceom`; - [x] Variables set directly in `ccdensity`; - [x] #2514 - Oscillator strengths; - [x] #2525 - Einstein coefficients, rotation strengths; - [x] #2538 - All access patterns ; - [ ] Variables set indirectly, via oeprop; - [X] #2479 - remove mutlipole component variables from being set in oeprop; - [x] #2485 - condense multipole setting functions into one; - [ ] #2541 Rename multipole variables from `oeprop` according to the standard; - [x] ADCC; - [x] #2513 ; - [ ] Final cleanup pass",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2486
https://github.com/psi4/psi4/issues/2486:1382,Modifiability,Variab,Variables,1382,"This is the mega-issue for the cleanup of excited-state variables. I come to this as a spinoff of the cc modernization mega-issue, which is a spin-off of the density sanitizing mega-issue. The goal of this mega-issue is to synchronize variable names across TDDFT, EOM, and ADC, per the standard introduced in #2462 and amended slightly in #2475. ### The Standard; We support the following access patterns:; ```; f""{method} ROOT 0 ({initial_state}) -> ROOT {irrep_idx} ({target_state}) EXCITATION ENERGY""; f""{method} TD-HF ROOT 0 -> ROOT {global_idx} EXCITATION ENERGY; f""{method} ROOT 0 -> ROOT {global_idx} EXCITATION ENERGY - {transition} TRANSITION; ```. - `{method}` should include both the _family_ of the method and the _specific method_ used. For example, both `CC` and `CC3`.; - `{global_idx}` is the index of the root, ordered by energy, in the space of all roots.; - `{irrep_idx}`is the index of the root, ordered by energy, in the space of roots of that irrep. This should **never** be larger than `global_idx` and is identical `global_idx` for molecules without symmetry.; - `{initial_state} ^ {target_state} = {transition}`. ### The Status. - [x] DFT; - [x] #2462 - initial cleanup; - [x] (part of) #2477 - set TD-DFT variables with names starting TD-SCF or TD-DFT (maybr both?) in addition to TD-fctl; - [ ] EOM; - [x] #2475 - variables set directly in `cceom`; - [x] Variables set directly in `ccdensity`; - [x] #2514 - Oscillator strengths; - [x] #2525 - Einstein coefficients, rotation strengths; - [x] #2538 - All access patterns ; - [ ] Variables set indirectly, via oeprop; - [X] #2479 - remove mutlipole component variables from being set in oeprop; - [x] #2485 - condense multipole setting functions into one; - [ ] #2541 Rename multipole variables from `oeprop` according to the standard; - [x] ADCC; - [x] #2513 ; - [ ] Final cleanup pass",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2486
https://github.com/psi4/psi4/issues/2486:1556,Modifiability,Variab,Variables,1556,"This is the mega-issue for the cleanup of excited-state variables. I come to this as a spinoff of the cc modernization mega-issue, which is a spin-off of the density sanitizing mega-issue. The goal of this mega-issue is to synchronize variable names across TDDFT, EOM, and ADC, per the standard introduced in #2462 and amended slightly in #2475. ### The Standard; We support the following access patterns:; ```; f""{method} ROOT 0 ({initial_state}) -> ROOT {irrep_idx} ({target_state}) EXCITATION ENERGY""; f""{method} TD-HF ROOT 0 -> ROOT {global_idx} EXCITATION ENERGY; f""{method} ROOT 0 -> ROOT {global_idx} EXCITATION ENERGY - {transition} TRANSITION; ```. - `{method}` should include both the _family_ of the method and the _specific method_ used. For example, both `CC` and `CC3`.; - `{global_idx}` is the index of the root, ordered by energy, in the space of all roots.; - `{irrep_idx}`is the index of the root, ordered by energy, in the space of roots of that irrep. This should **never** be larger than `global_idx` and is identical `global_idx` for molecules without symmetry.; - `{initial_state} ^ {target_state} = {transition}`. ### The Status. - [x] DFT; - [x] #2462 - initial cleanup; - [x] (part of) #2477 - set TD-DFT variables with names starting TD-SCF or TD-DFT (maybr both?) in addition to TD-fctl; - [ ] EOM; - [x] #2475 - variables set directly in `cceom`; - [x] Variables set directly in `ccdensity`; - [x] #2514 - Oscillator strengths; - [x] #2525 - Einstein coefficients, rotation strengths; - [x] #2538 - All access patterns ; - [ ] Variables set indirectly, via oeprop; - [X] #2479 - remove mutlipole component variables from being set in oeprop; - [x] #2485 - condense multipole setting functions into one; - [ ] #2541 Rename multipole variables from `oeprop` according to the standard; - [x] ADCC; - [x] #2513 ; - [ ] Final cleanup pass",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2486
https://github.com/psi4/psi4/issues/2486:1635,Modifiability,variab,variables,1635,"This is the mega-issue for the cleanup of excited-state variables. I come to this as a spinoff of the cc modernization mega-issue, which is a spin-off of the density sanitizing mega-issue. The goal of this mega-issue is to synchronize variable names across TDDFT, EOM, and ADC, per the standard introduced in #2462 and amended slightly in #2475. ### The Standard; We support the following access patterns:; ```; f""{method} ROOT 0 ({initial_state}) -> ROOT {irrep_idx} ({target_state}) EXCITATION ENERGY""; f""{method} TD-HF ROOT 0 -> ROOT {global_idx} EXCITATION ENERGY; f""{method} ROOT 0 -> ROOT {global_idx} EXCITATION ENERGY - {transition} TRANSITION; ```. - `{method}` should include both the _family_ of the method and the _specific method_ used. For example, both `CC` and `CC3`.; - `{global_idx}` is the index of the root, ordered by energy, in the space of all roots.; - `{irrep_idx}`is the index of the root, ordered by energy, in the space of roots of that irrep. This should **never** be larger than `global_idx` and is identical `global_idx` for molecules without symmetry.; - `{initial_state} ^ {target_state} = {transition}`. ### The Status. - [x] DFT; - [x] #2462 - initial cleanup; - [x] (part of) #2477 - set TD-DFT variables with names starting TD-SCF or TD-DFT (maybr both?) in addition to TD-fctl; - [ ] EOM; - [x] #2475 - variables set directly in `cceom`; - [x] Variables set directly in `ccdensity`; - [x] #2514 - Oscillator strengths; - [x] #2525 - Einstein coefficients, rotation strengths; - [x] #2538 - All access patterns ; - [ ] Variables set indirectly, via oeprop; - [X] #2479 - remove mutlipole component variables from being set in oeprop; - [x] #2485 - condense multipole setting functions into one; - [ ] #2541 Rename multipole variables from `oeprop` according to the standard; - [x] ADCC; - [x] #2513 ; - [ ] Final cleanup pass",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2486
https://github.com/psi4/psi4/issues/2486:1761,Modifiability,variab,variables,1761,"This is the mega-issue for the cleanup of excited-state variables. I come to this as a spinoff of the cc modernization mega-issue, which is a spin-off of the density sanitizing mega-issue. The goal of this mega-issue is to synchronize variable names across TDDFT, EOM, and ADC, per the standard introduced in #2462 and amended slightly in #2475. ### The Standard; We support the following access patterns:; ```; f""{method} ROOT 0 ({initial_state}) -> ROOT {irrep_idx} ({target_state}) EXCITATION ENERGY""; f""{method} TD-HF ROOT 0 -> ROOT {global_idx} EXCITATION ENERGY; f""{method} ROOT 0 -> ROOT {global_idx} EXCITATION ENERGY - {transition} TRANSITION; ```. - `{method}` should include both the _family_ of the method and the _specific method_ used. For example, both `CC` and `CC3`.; - `{global_idx}` is the index of the root, ordered by energy, in the space of all roots.; - `{irrep_idx}`is the index of the root, ordered by energy, in the space of roots of that irrep. This should **never** be larger than `global_idx` and is identical `global_idx` for molecules without symmetry.; - `{initial_state} ^ {target_state} = {transition}`. ### The Status. - [x] DFT; - [x] #2462 - initial cleanup; - [x] (part of) #2477 - set TD-DFT variables with names starting TD-SCF or TD-DFT (maybr both?) in addition to TD-fctl; - [ ] EOM; - [x] #2475 - variables set directly in `cceom`; - [x] Variables set directly in `ccdensity`; - [x] #2514 - Oscillator strengths; - [x] #2525 - Einstein coefficients, rotation strengths; - [x] #2538 - All access patterns ; - [ ] Variables set indirectly, via oeprop; - [X] #2479 - remove mutlipole component variables from being set in oeprop; - [x] #2485 - condense multipole setting functions into one; - [ ] #2541 Rename multipole variables from `oeprop` according to the standard; - [x] ADCC; - [x] #2513 ; - [ ] Final cleanup pass",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2486
https://github.com/psi4/psi4/issues/2486:166,Security,sanitiz,sanitizing,166,"This is the mega-issue for the cleanup of excited-state variables. I come to this as a spinoff of the cc modernization mega-issue, which is a spin-off of the density sanitizing mega-issue. The goal of this mega-issue is to synchronize variable names across TDDFT, EOM, and ADC, per the standard introduced in #2462 and amended slightly in #2475. ### The Standard; We support the following access patterns:; ```; f""{method} ROOT 0 ({initial_state}) -> ROOT {irrep_idx} ({target_state}) EXCITATION ENERGY""; f""{method} TD-HF ROOT 0 -> ROOT {global_idx} EXCITATION ENERGY; f""{method} ROOT 0 -> ROOT {global_idx} EXCITATION ENERGY - {transition} TRANSITION; ```. - `{method}` should include both the _family_ of the method and the _specific method_ used. For example, both `CC` and `CC3`.; - `{global_idx}` is the index of the root, ordered by energy, in the space of all roots.; - `{irrep_idx}`is the index of the root, ordered by energy, in the space of roots of that irrep. This should **never** be larger than `global_idx` and is identical `global_idx` for molecules without symmetry.; - `{initial_state} ^ {target_state} = {transition}`. ### The Status. - [x] DFT; - [x] #2462 - initial cleanup; - [x] (part of) #2477 - set TD-DFT variables with names starting TD-SCF or TD-DFT (maybr both?) in addition to TD-fctl; - [ ] EOM; - [x] #2475 - variables set directly in `cceom`; - [x] Variables set directly in `ccdensity`; - [x] #2514 - Oscillator strengths; - [x] #2525 - Einstein coefficients, rotation strengths; - [x] #2538 - All access patterns ; - [ ] Variables set indirectly, via oeprop; - [X] #2479 - remove mutlipole component variables from being set in oeprop; - [x] #2485 - condense multipole setting functions into one; - [ ] #2541 Rename multipole variables from `oeprop` according to the standard; - [x] ADCC; - [x] #2513 ; - [ ] Final cleanup pass",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2486
https://github.com/psi4/psi4/issues/2486:389,Security,access,access,389,"This is the mega-issue for the cleanup of excited-state variables. I come to this as a spinoff of the cc modernization mega-issue, which is a spin-off of the density sanitizing mega-issue. The goal of this mega-issue is to synchronize variable names across TDDFT, EOM, and ADC, per the standard introduced in #2462 and amended slightly in #2475. ### The Standard; We support the following access patterns:; ```; f""{method} ROOT 0 ({initial_state}) -> ROOT {irrep_idx} ({target_state}) EXCITATION ENERGY""; f""{method} TD-HF ROOT 0 -> ROOT {global_idx} EXCITATION ENERGY; f""{method} ROOT 0 -> ROOT {global_idx} EXCITATION ENERGY - {transition} TRANSITION; ```. - `{method}` should include both the _family_ of the method and the _specific method_ used. For example, both `CC` and `CC3`.; - `{global_idx}` is the index of the root, ordered by energy, in the space of all roots.; - `{irrep_idx}`is the index of the root, ordered by energy, in the space of roots of that irrep. This should **never** be larger than `global_idx` and is identical `global_idx` for molecules without symmetry.; - `{initial_state} ^ {target_state} = {transition}`. ### The Status. - [x] DFT; - [x] #2462 - initial cleanup; - [x] (part of) #2477 - set TD-DFT variables with names starting TD-SCF or TD-DFT (maybr both?) in addition to TD-fctl; - [ ] EOM; - [x] #2475 - variables set directly in `cceom`; - [x] Variables set directly in `ccdensity`; - [x] #2514 - Oscillator strengths; - [x] #2525 - Einstein coefficients, rotation strengths; - [x] #2538 - All access patterns ; - [ ] Variables set indirectly, via oeprop; - [X] #2479 - remove mutlipole component variables from being set in oeprop; - [x] #2485 - condense multipole setting functions into one; - [ ] #2541 Rename multipole variables from `oeprop` according to the standard; - [x] ADCC; - [x] #2513 ; - [ ] Final cleanup pass",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2486
https://github.com/psi4/psi4/issues/2486:1532,Security,access,access,1532,"This is the mega-issue for the cleanup of excited-state variables. I come to this as a spinoff of the cc modernization mega-issue, which is a spin-off of the density sanitizing mega-issue. The goal of this mega-issue is to synchronize variable names across TDDFT, EOM, and ADC, per the standard introduced in #2462 and amended slightly in #2475. ### The Standard; We support the following access patterns:; ```; f""{method} ROOT 0 ({initial_state}) -> ROOT {irrep_idx} ({target_state}) EXCITATION ENERGY""; f""{method} TD-HF ROOT 0 -> ROOT {global_idx} EXCITATION ENERGY; f""{method} ROOT 0 -> ROOT {global_idx} EXCITATION ENERGY - {transition} TRANSITION; ```. - `{method}` should include both the _family_ of the method and the _specific method_ used. For example, both `CC` and `CC3`.; - `{global_idx}` is the index of the root, ordered by energy, in the space of all roots.; - `{irrep_idx}`is the index of the root, ordered by energy, in the space of roots of that irrep. This should **never** be larger than `global_idx` and is identical `global_idx` for molecules without symmetry.; - `{initial_state} ^ {target_state} = {transition}`. ### The Status. - [x] DFT; - [x] #2462 - initial cleanup; - [x] (part of) #2477 - set TD-DFT variables with names starting TD-SCF or TD-DFT (maybr both?) in addition to TD-fctl; - [ ] EOM; - [x] #2475 - variables set directly in `cceom`; - [x] Variables set directly in `ccdensity`; - [x] #2514 - Oscillator strengths; - [x] #2525 - Einstein coefficients, rotation strengths; - [x] #2538 - All access patterns ; - [ ] Variables set indirectly, via oeprop; - [X] #2479 - remove mutlipole component variables from being set in oeprop; - [x] #2485 - condense multipole setting functions into one; - [ ] #2541 Rename multipole variables from `oeprop` according to the standard; - [x] ADCC; - [x] #2513 ; - [ ] Final cleanup pass",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2486
https://github.com/psi4/psi4/issues/2487:14,Modifiability,variab,variable,14,"`detci` has a variable called `print_lvl_` that is currently set at 0 and remains at 0, no matter what the user sets the `print` keyword to. As a result, it's not possible [for a user to see the S^2 value if they want](http://forum.psicode.org/t/computing-s-2-on-an-fci-calculation/2439/2). A developer should have `print_lvl_` take the value of the standard `print` keyword.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2487
https://github.com/psi4/psi4/pull/2488:147,Safety,sanity check,sanity checks,147,## Description; <!-- Provide a brief description of the PR's purpose here. -->; Minor cleanups to `find_occupation` as well as the introduction of sanity checks for #2476 to prevent sudden changes of the spin state during the calculation. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2488
https://github.com/psi4/psi4/pull/2488:423,Testability,Test,Tests,423,## Description; <!-- Provide a brief description of the PR's purpose here. -->; Minor cleanups to `find_occupation` as well as the introduction of sanity checks for #2476 to prevent sudden changes of the spin state during the calculation. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2488
https://github.com/psi4/psi4/pull/2488:497,Testability,test,tests,497,## Description; <!-- Provide a brief description of the PR's purpose here. -->; Minor cleanups to `find_occupation` as well as the introduction of sanity checks for #2476 to prevent sudden changes of the spin state during the calculation. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2488
https://github.com/psi4/psi4/pull/2488:588,Testability,test,tests,588,## Description; <!-- Provide a brief description of the PR's purpose here. -->; Minor cleanups to `find_occupation` as well as the introduction of sanity checks for #2476 to prevent sudden changes of the spin state during the calculation. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2488
https://github.com/psi4/psi4/pull/2489:24,Modifiability,refactor,refactors,24,"## Description; This PR refactors `ThreeCenterOverlapInt` using Libint2. Even though one cannot compute these integrals directly, it's possible to obtain them through the delta function: `<phi(r_1) phi(r_1)| delta(r_1 - r_2) | phi(r_2) 1>`. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] 3-center overlap integrals with L2. ## Checklist; - [x] Tests added for any new features (SAPT-DFT still working, Python API via `MintsHelper` tested locally 👍); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2489
https://github.com/psi4/psi4/pull/2489:404,Testability,Test,Tests,404,"## Description; This PR refactors `ThreeCenterOverlapInt` using Libint2. Even though one cannot compute these integrals directly, it's possible to obtain them through the delta function: `<phi(r_1) phi(r_1)| delta(r_1 - r_2) | phi(r_2) 1>`. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] 3-center overlap integrals with L2. ## Checklist; - [x] Tests added for any new features (SAPT-DFT still working, Python API via `MintsHelper` tested locally 👍); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2489
https://github.com/psi4/psi4/pull/2489:491,Testability,test,tested,491,"## Description; This PR refactors `ThreeCenterOverlapInt` using Libint2. Even though one cannot compute these integrals directly, it's possible to obtain them through the delta function: `<phi(r_1) phi(r_1)| delta(r_1 - r_2) | phi(r_2) 1>`. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] 3-center overlap integrals with L2. ## Checklist; - [x] Tests added for any new features (SAPT-DFT still working, Python API via `MintsHelper` tested locally 👍); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2489
https://github.com/psi4/psi4/pull/2489:550,Testability,test,tests,550,"## Description; This PR refactors `ThreeCenterOverlapInt` using Libint2. Even though one cannot compute these integrals directly, it's possible to obtain them through the delta function: `<phi(r_1) phi(r_1)| delta(r_1 - r_2) | phi(r_2) 1>`. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] 3-center overlap integrals with L2. ## Checklist; - [x] Tests added for any new features (SAPT-DFT still working, Python API via `MintsHelper` tested locally 👍); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2489
https://github.com/psi4/psi4/pull/2489:641,Testability,test,tests,641,"## Description; This PR refactors `ThreeCenterOverlapInt` using Libint2. Even though one cannot compute these integrals directly, it's possible to obtain them through the delta function: `<phi(r_1) phi(r_1)| delta(r_1 - r_2) | phi(r_2) 1>`. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] 3-center overlap integrals with L2. ## Checklist; - [x] Tests added for any new features (SAPT-DFT still working, Python API via `MintsHelper` tested locally 👍); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2489
https://github.com/psi4/psi4/pull/2490:56,Testability,test,test,56,"## Description; WORK IN PROGRESS. PR created to run the test cases. Adds F12 integrals from libint2 needed for F12 methods. As part of cleanup the choice of libint1 or erd integral engine is removed. ## Status; - [ ] Ready for review, only if you feel like it.; - [ ] NOT ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2490
https://github.com/psi4/psi4/issues/2491:2754,Energy Efficiency,efficient,efficient,2754,"scribed [here](https://www.sciencedirect.com/science/article/pii/S0301010408005089). ### Results. Below are timings of the naive semi-numerical integral loop using both the old psi4 integrals and the new libint2 integrals. This benchmark was performed on a butane molecule in a cc-pVDZ basis set and a standard 302/75 quadrature grid. Wall times are the minimum of five trials. | Cores | Old Integral<br/>Wall Time (s) | Old Integral<br/>Parallel Speedup | New Integral<br/>Wall Time (s) | New Integral<br/>Parallel Speedup |; | :--- | :--- | :--- | :--- | :--- |; | 1 | 191.7 | --- | 105.3 | --- |; | 2 | 96.1 | x2.00 | 72.6 | x1.45 |; | 4 | 48.4 | x3.96 | 71.5 | x1.47 |; | 8 | 24.3 | x7.88 | 74.5 | x1.41 |; | 18 | 11.5 | x16.62 | 72.8 | x1.45 |. Note that with one core, the new libint2 integrals (105.3s) are faster than the old OS integrals (191.7s) by almost a factor of two, which is to be expected. Part of the reason for deprecating the old, hand-coded integral code for the libint2 interface is that libint2 is a specialized library and therefore should have more efficient routines. The integral routine using the old OS code scales almost perfectly all the way through 18 cores. This is also to be expected: the work being done in the integral routine is embarrassingly parallel, and threads don't share any information or intermediates. Surprisingly, when the same integrals are computed with libint2 instead of the old OS code, the parallel scaling suffers drastically. We see no benefit gained from using more than two cores, and even a calculation with two cores only achieves a 1.45x speedup. When I use all 18 cores on my workstation, the new libint2 integrals are nearly 7(!) times slower than the old OS code. What makes this particularly confusing is that none of the usual culprits associated with poor parallel scaling (bad scheduling/work balance, high overhead, etc.) apply here. This is because we see perfect parallel scaling with the old OS code using all of the same cond",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2491
https://github.com/psi4/psi4/issues/2491:3527,Energy Efficiency,schedul,scheduling,3527,"re faster than the old OS integrals (191.7s) by almost a factor of two, which is to be expected. Part of the reason for deprecating the old, hand-coded integral code for the libint2 interface is that libint2 is a specialized library and therefore should have more efficient routines. The integral routine using the old OS code scales almost perfectly all the way through 18 cores. This is also to be expected: the work being done in the integral routine is embarrassingly parallel, and threads don't share any information or intermediates. Surprisingly, when the same integrals are computed with libint2 instead of the old OS code, the parallel scaling suffers drastically. We see no benefit gained from using more than two cores, and even a calculation with two cores only achieves a 1.45x speedup. When I use all 18 cores on my workstation, the new libint2 integrals are nearly 7(!) times slower than the old OS code. What makes this particularly confusing is that none of the usual culprits associated with poor parallel scaling (bad scheduling/work balance, high overhead, etc.) apply here. This is because we see perfect parallel scaling with the old OS code using all of the same conditions. The only difference between the two computations is that I've switched the source of the integrals. The only explanation for this behavior I can come up with is that the libint2 library might have some kind of global lock that prevents independent threads (with their own independent `ElectrostaticInt` objects) from computing integrals in parallel. I don't know enough about how libint2 works to justify this idea. I'm very curious to hear other thoughts on this scaling issue. ### Plugin. The plugin (attached) requires adding `PSI_API` to a few classes (DFTGrid, MultipolePotentialInt). The following function is also necessary in `psi4/libmints/electrostatic.cc`:; ```; void ElectrostaticInt::set_origin(const Vector3& _origin) {; origin_ = _origin;; std::vector<std::pair<double, std::array<double",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2491
https://github.com/psi4/psi4/issues/2491:151,Integrability,interface,interface,151,"The one-electron integrals (OEIs) in psi4 are in the process of being overhauled. The (old) native psi4 Obara-Saika code was recently replaced with an interface to the (new) libint2 library (#2388). I've found that in my specific use case, while the new OEI code is serially faster than the old OEI code, the new OEI code scales surprisingly poorly with multiple cores. . ### Background. I'm in the process of implementing semi-numerical exchange for psi4. The cost of this algorithm is dominated by the calculation of OEIs with the following functional form:; ```; (u | (r - r_g)^{-1} | v),; ```; where `u` and `v` are basis functions, and `r_g` is a point in space on some quadrature. A naive semi-numerical exchange code computes these integrals over all `u`, `v`, and `r_g`, requiring O(N^3) work. In current psi4, integrals of this type can be computed with either the old OS code (via the `MultipolePotentialInt` class) or the new libint2 interface (via the `ElectrostaticInt` class). I've attached a plugin that computes a large number of these OEI integrals with both classes, modeled after a naive semi-numerical exchange code. Here's the pseudocode of this plugin:. ```; # pragma omp parallel for; for grid_point_block in quadrature (B); ; thread = omp_get_thread(); ; for bra in basis (u); for ket in basis (v); for grid point in B (g); ; // integral_computer[thread] is either an ElectrostaticInt or MultipolePotentialInt; integral_computer[thread].compute(u, v, g); ```. Note that the above pseudocode is parallelized over blocks of ~64 grid points. This pseudocode follows the description of the original chain of spheres (COSX) semi-numerical exchange algorithm described [here](https://www.sciencedirect.com/science/article/pii/S0301010408005089). ### Results. Below are timings of the naive semi-numerical integral loop using both the old psi4 integrals and the new libint2 integrals. This benchmark was performed on a butane molecule in a cc-pVDZ basis set and a standard 302/75 quad",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2491
https://github.com/psi4/psi4/issues/2491:945,Integrability,interface,interface,945,"The one-electron integrals (OEIs) in psi4 are in the process of being overhauled. The (old) native psi4 Obara-Saika code was recently replaced with an interface to the (new) libint2 library (#2388). I've found that in my specific use case, while the new OEI code is serially faster than the old OEI code, the new OEI code scales surprisingly poorly with multiple cores. . ### Background. I'm in the process of implementing semi-numerical exchange for psi4. The cost of this algorithm is dominated by the calculation of OEIs with the following functional form:; ```; (u | (r - r_g)^{-1} | v),; ```; where `u` and `v` are basis functions, and `r_g` is a point in space on some quadrature. A naive semi-numerical exchange code computes these integrals over all `u`, `v`, and `r_g`, requiring O(N^3) work. In current psi4, integrals of this type can be computed with either the old OS code (via the `MultipolePotentialInt` class) or the new libint2 interface (via the `ElectrostaticInt` class). I've attached a plugin that computes a large number of these OEI integrals with both classes, modeled after a naive semi-numerical exchange code. Here's the pseudocode of this plugin:. ```; # pragma omp parallel for; for grid_point_block in quadrature (B); ; thread = omp_get_thread(); ; for bra in basis (u); for ket in basis (v); for grid point in B (g); ; // integral_computer[thread] is either an ElectrostaticInt or MultipolePotentialInt; integral_computer[thread].compute(u, v, g); ```. Note that the above pseudocode is parallelized over blocks of ~64 grid points. This pseudocode follows the description of the original chain of spheres (COSX) semi-numerical exchange algorithm described [here](https://www.sciencedirect.com/science/article/pii/S0301010408005089). ### Results. Below are timings of the naive semi-numerical integral loop using both the old psi4 integrals and the new libint2 integrals. This benchmark was performed on a butane molecule in a cc-pVDZ basis set and a standard 302/75 quad",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2491
https://github.com/psi4/psi4/issues/2491:2672,Integrability,interface,interface,2672,"scribed [here](https://www.sciencedirect.com/science/article/pii/S0301010408005089). ### Results. Below are timings of the naive semi-numerical integral loop using both the old psi4 integrals and the new libint2 integrals. This benchmark was performed on a butane molecule in a cc-pVDZ basis set and a standard 302/75 quadrature grid. Wall times are the minimum of five trials. | Cores | Old Integral<br/>Wall Time (s) | Old Integral<br/>Parallel Speedup | New Integral<br/>Wall Time (s) | New Integral<br/>Parallel Speedup |; | :--- | :--- | :--- | :--- | :--- |; | 1 | 191.7 | --- | 105.3 | --- |; | 2 | 96.1 | x2.00 | 72.6 | x1.45 |; | 4 | 48.4 | x3.96 | 71.5 | x1.47 |; | 8 | 24.3 | x7.88 | 74.5 | x1.41 |; | 18 | 11.5 | x16.62 | 72.8 | x1.45 |. Note that with one core, the new libint2 integrals (105.3s) are faster than the old OS integrals (191.7s) by almost a factor of two, which is to be expected. Part of the reason for deprecating the old, hand-coded integral code for the libint2 interface is that libint2 is a specialized library and therefore should have more efficient routines. The integral routine using the old OS code scales almost perfectly all the way through 18 cores. This is also to be expected: the work being done in the integral routine is embarrassingly parallel, and threads don't share any information or intermediates. Surprisingly, when the same integrals are computed with libint2 instead of the old OS code, the parallel scaling suffers drastically. We see no benefit gained from using more than two cores, and even a calculation with two cores only achieves a 1.45x speedup. When I use all 18 cores on my workstation, the new libint2 integrals are nearly 7(!) times slower than the old OS code. What makes this particularly confusing is that none of the usual culprits associated with poor parallel scaling (bad scheduling/work balance, high overhead, etc.) apply here. This is because we see perfect parallel scaling with the old OS code using all of the same cond",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2491
https://github.com/psi4/psi4/issues/2491:2764,Integrability,rout,routines,2764,"scribed [here](https://www.sciencedirect.com/science/article/pii/S0301010408005089). ### Results. Below are timings of the naive semi-numerical integral loop using both the old psi4 integrals and the new libint2 integrals. This benchmark was performed on a butane molecule in a cc-pVDZ basis set and a standard 302/75 quadrature grid. Wall times are the minimum of five trials. | Cores | Old Integral<br/>Wall Time (s) | Old Integral<br/>Parallel Speedup | New Integral<br/>Wall Time (s) | New Integral<br/>Parallel Speedup |; | :--- | :--- | :--- | :--- | :--- |; | 1 | 191.7 | --- | 105.3 | --- |; | 2 | 96.1 | x2.00 | 72.6 | x1.45 |; | 4 | 48.4 | x3.96 | 71.5 | x1.47 |; | 8 | 24.3 | x7.88 | 74.5 | x1.41 |; | 18 | 11.5 | x16.62 | 72.8 | x1.45 |. Note that with one core, the new libint2 integrals (105.3s) are faster than the old OS integrals (191.7s) by almost a factor of two, which is to be expected. Part of the reason for deprecating the old, hand-coded integral code for the libint2 interface is that libint2 is a specialized library and therefore should have more efficient routines. The integral routine using the old OS code scales almost perfectly all the way through 18 cores. This is also to be expected: the work being done in the integral routine is embarrassingly parallel, and threads don't share any information or intermediates. Surprisingly, when the same integrals are computed with libint2 instead of the old OS code, the parallel scaling suffers drastically. We see no benefit gained from using more than two cores, and even a calculation with two cores only achieves a 1.45x speedup. When I use all 18 cores on my workstation, the new libint2 integrals are nearly 7(!) times slower than the old OS code. What makes this particularly confusing is that none of the usual culprits associated with poor parallel scaling (bad scheduling/work balance, high overhead, etc.) apply here. This is because we see perfect parallel scaling with the old OS code using all of the same cond",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2491
https://github.com/psi4/psi4/issues/2491:2787,Integrability,rout,routine,2787,"l integral loop using both the old psi4 integrals and the new libint2 integrals. This benchmark was performed on a butane molecule in a cc-pVDZ basis set and a standard 302/75 quadrature grid. Wall times are the minimum of five trials. | Cores | Old Integral<br/>Wall Time (s) | Old Integral<br/>Parallel Speedup | New Integral<br/>Wall Time (s) | New Integral<br/>Parallel Speedup |; | :--- | :--- | :--- | :--- | :--- |; | 1 | 191.7 | --- | 105.3 | --- |; | 2 | 96.1 | x2.00 | 72.6 | x1.45 |; | 4 | 48.4 | x3.96 | 71.5 | x1.47 |; | 8 | 24.3 | x7.88 | 74.5 | x1.41 |; | 18 | 11.5 | x16.62 | 72.8 | x1.45 |. Note that with one core, the new libint2 integrals (105.3s) are faster than the old OS integrals (191.7s) by almost a factor of two, which is to be expected. Part of the reason for deprecating the old, hand-coded integral code for the libint2 interface is that libint2 is a specialized library and therefore should have more efficient routines. The integral routine using the old OS code scales almost perfectly all the way through 18 cores. This is also to be expected: the work being done in the integral routine is embarrassingly parallel, and threads don't share any information or intermediates. Surprisingly, when the same integrals are computed with libint2 instead of the old OS code, the parallel scaling suffers drastically. We see no benefit gained from using more than two cores, and even a calculation with two cores only achieves a 1.45x speedup. When I use all 18 cores on my workstation, the new libint2 integrals are nearly 7(!) times slower than the old OS code. What makes this particularly confusing is that none of the usual culprits associated with poor parallel scaling (bad scheduling/work balance, high overhead, etc.) apply here. This is because we see perfect parallel scaling with the old OS code using all of the same conditions. The only difference between the two computations is that I've switched the source of the integrals. The only explanation for this beha",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2491
https://github.com/psi4/psi4/issues/2491:2936,Integrability,rout,routine,2936,"le in a cc-pVDZ basis set and a standard 302/75 quadrature grid. Wall times are the minimum of five trials. | Cores | Old Integral<br/>Wall Time (s) | Old Integral<br/>Parallel Speedup | New Integral<br/>Wall Time (s) | New Integral<br/>Parallel Speedup |; | :--- | :--- | :--- | :--- | :--- |; | 1 | 191.7 | --- | 105.3 | --- |; | 2 | 96.1 | x2.00 | 72.6 | x1.45 |; | 4 | 48.4 | x3.96 | 71.5 | x1.47 |; | 8 | 24.3 | x7.88 | 74.5 | x1.41 |; | 18 | 11.5 | x16.62 | 72.8 | x1.45 |. Note that with one core, the new libint2 integrals (105.3s) are faster than the old OS integrals (191.7s) by almost a factor of two, which is to be expected. Part of the reason for deprecating the old, hand-coded integral code for the libint2 interface is that libint2 is a specialized library and therefore should have more efficient routines. The integral routine using the old OS code scales almost perfectly all the way through 18 cores. This is also to be expected: the work being done in the integral routine is embarrassingly parallel, and threads don't share any information or intermediates. Surprisingly, when the same integrals are computed with libint2 instead of the old OS code, the parallel scaling suffers drastically. We see no benefit gained from using more than two cores, and even a calculation with two cores only achieves a 1.45x speedup. When I use all 18 cores on my workstation, the new libint2 integrals are nearly 7(!) times slower than the old OS code. What makes this particularly confusing is that none of the usual culprits associated with poor parallel scaling (bad scheduling/work balance, high overhead, etc.) apply here. This is because we see perfect parallel scaling with the old OS code using all of the same conditions. The only difference between the two computations is that I've switched the source of the integrals. The only explanation for this behavior I can come up with is that the libint2 library might have some kind of global lock that prevents independent threads (with ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2491
https://github.com/psi4/psi4/issues/2491:1007,Modifiability,plugin,plugin,1007," being overhauled. The (old) native psi4 Obara-Saika code was recently replaced with an interface to the (new) libint2 library (#2388). I've found that in my specific use case, while the new OEI code is serially faster than the old OEI code, the new OEI code scales surprisingly poorly with multiple cores. . ### Background. I'm in the process of implementing semi-numerical exchange for psi4. The cost of this algorithm is dominated by the calculation of OEIs with the following functional form:; ```; (u | (r - r_g)^{-1} | v),; ```; where `u` and `v` are basis functions, and `r_g` is a point in space on some quadrature. A naive semi-numerical exchange code computes these integrals over all `u`, `v`, and `r_g`, requiring O(N^3) work. In current psi4, integrals of this type can be computed with either the old OS code (via the `MultipolePotentialInt` class) or the new libint2 interface (via the `ElectrostaticInt` class). I've attached a plugin that computes a large number of these OEI integrals with both classes, modeled after a naive semi-numerical exchange code. Here's the pseudocode of this plugin:. ```; # pragma omp parallel for; for grid_point_block in quadrature (B); ; thread = omp_get_thread(); ; for bra in basis (u); for ket in basis (v); for grid point in B (g); ; // integral_computer[thread] is either an ElectrostaticInt or MultipolePotentialInt; integral_computer[thread].compute(u, v, g); ```. Note that the above pseudocode is parallelized over blocks of ~64 grid points. This pseudocode follows the description of the original chain of spheres (COSX) semi-numerical exchange algorithm described [here](https://www.sciencedirect.com/science/article/pii/S0301010408005089). ### Results. Below are timings of the naive semi-numerical integral loop using both the old psi4 integrals and the new libint2 integrals. This benchmark was performed on a butane molecule in a cc-pVDZ basis set and a standard 302/75 quadrature grid. Wall times are the minimum of five trials. | Core",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2491
https://github.com/psi4/psi4/issues/2491:1167,Modifiability,plugin,plugin,1167,"rface to the (new) libint2 library (#2388). I've found that in my specific use case, while the new OEI code is serially faster than the old OEI code, the new OEI code scales surprisingly poorly with multiple cores. . ### Background. I'm in the process of implementing semi-numerical exchange for psi4. The cost of this algorithm is dominated by the calculation of OEIs with the following functional form:; ```; (u | (r - r_g)^{-1} | v),; ```; where `u` and `v` are basis functions, and `r_g` is a point in space on some quadrature. A naive semi-numerical exchange code computes these integrals over all `u`, `v`, and `r_g`, requiring O(N^3) work. In current psi4, integrals of this type can be computed with either the old OS code (via the `MultipolePotentialInt` class) or the new libint2 interface (via the `ElectrostaticInt` class). I've attached a plugin that computes a large number of these OEI integrals with both classes, modeled after a naive semi-numerical exchange code. Here's the pseudocode of this plugin:. ```; # pragma omp parallel for; for grid_point_block in quadrature (B); ; thread = omp_get_thread(); ; for bra in basis (u); for ket in basis (v); for grid point in B (g); ; // integral_computer[thread] is either an ElectrostaticInt or MultipolePotentialInt; integral_computer[thread].compute(u, v, g); ```. Note that the above pseudocode is parallelized over blocks of ~64 grid points. This pseudocode follows the description of the original chain of spheres (COSX) semi-numerical exchange algorithm described [here](https://www.sciencedirect.com/science/article/pii/S0301010408005089). ### Results. Below are timings of the naive semi-numerical integral loop using both the old psi4 integrals and the new libint2 integrals. This benchmark was performed on a butane molecule in a cc-pVDZ basis set and a standard 302/75 quadrature grid. Wall times are the minimum of five trials. | Cores | Old Integral<br/>Wall Time (s) | Old Integral<br/>Parallel Speedup | New Integral<br/>Wal",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2491
https://github.com/psi4/psi4/issues/2491:4171,Modifiability,Plugin,Plugin,4171,"terface is that libint2 is a specialized library and therefore should have more efficient routines. The integral routine using the old OS code scales almost perfectly all the way through 18 cores. This is also to be expected: the work being done in the integral routine is embarrassingly parallel, and threads don't share any information or intermediates. Surprisingly, when the same integrals are computed with libint2 instead of the old OS code, the parallel scaling suffers drastically. We see no benefit gained from using more than two cores, and even a calculation with two cores only achieves a 1.45x speedup. When I use all 18 cores on my workstation, the new libint2 integrals are nearly 7(!) times slower than the old OS code. What makes this particularly confusing is that none of the usual culprits associated with poor parallel scaling (bad scheduling/work balance, high overhead, etc.) apply here. This is because we see perfect parallel scaling with the old OS code using all of the same conditions. The only difference between the two computations is that I've switched the source of the integrals. The only explanation for this behavior I can come up with is that the libint2 library might have some kind of global lock that prevents independent threads (with their own independent `ElectrostaticInt` objects) from computing integrals in parallel. I don't know enough about how libint2 works to justify this idea. I'm very curious to hear other thoughts on this scaling issue. ### Plugin. The plugin (attached) requires adding `PSI_API` to a few classes (DFTGrid, MultipolePotentialInt). The following function is also necessary in `psi4/libmints/electrostatic.cc`:; ```; void ElectrostaticInt::set_origin(const Vector3& _origin) {; origin_ = _origin;; std::vector<std::pair<double, std::array<double, 3>>> pcs;; pcs.push_back({-1.0, {origin_[0], origin_[1], origin_[2]}});; engine0_->set_params(pcs);; }; ```. [plugin.cc.zip](https://github.com/psi4/psi4/files/8326964/plugin.cc.zip)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2491
https://github.com/psi4/psi4/issues/2491:4183,Modifiability,plugin,plugin,4183,"terface is that libint2 is a specialized library and therefore should have more efficient routines. The integral routine using the old OS code scales almost perfectly all the way through 18 cores. This is also to be expected: the work being done in the integral routine is embarrassingly parallel, and threads don't share any information or intermediates. Surprisingly, when the same integrals are computed with libint2 instead of the old OS code, the parallel scaling suffers drastically. We see no benefit gained from using more than two cores, and even a calculation with two cores only achieves a 1.45x speedup. When I use all 18 cores on my workstation, the new libint2 integrals are nearly 7(!) times slower than the old OS code. What makes this particularly confusing is that none of the usual culprits associated with poor parallel scaling (bad scheduling/work balance, high overhead, etc.) apply here. This is because we see perfect parallel scaling with the old OS code using all of the same conditions. The only difference between the two computations is that I've switched the source of the integrals. The only explanation for this behavior I can come up with is that the libint2 library might have some kind of global lock that prevents independent threads (with their own independent `ElectrostaticInt` objects) from computing integrals in parallel. I don't know enough about how libint2 works to justify this idea. I'm very curious to hear other thoughts on this scaling issue. ### Plugin. The plugin (attached) requires adding `PSI_API` to a few classes (DFTGrid, MultipolePotentialInt). The following function is also necessary in `psi4/libmints/electrostatic.cc`:; ```; void ElectrostaticInt::set_origin(const Vector3& _origin) {; origin_ = _origin;; std::vector<std::pair<double, std::array<double, 3>>> pcs;; pcs.push_back({-1.0, {origin_[0], origin_[1], origin_[2]}});; engine0_->set_params(pcs);; }; ```. [plugin.cc.zip](https://github.com/psi4/psi4/files/8326964/plugin.cc.zip)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2491
https://github.com/psi4/psi4/issues/2491:4602,Modifiability,plugin,plugin,4602,"terface is that libint2 is a specialized library and therefore should have more efficient routines. The integral routine using the old OS code scales almost perfectly all the way through 18 cores. This is also to be expected: the work being done in the integral routine is embarrassingly parallel, and threads don't share any information or intermediates. Surprisingly, when the same integrals are computed with libint2 instead of the old OS code, the parallel scaling suffers drastically. We see no benefit gained from using more than two cores, and even a calculation with two cores only achieves a 1.45x speedup. When I use all 18 cores on my workstation, the new libint2 integrals are nearly 7(!) times slower than the old OS code. What makes this particularly confusing is that none of the usual culprits associated with poor parallel scaling (bad scheduling/work balance, high overhead, etc.) apply here. This is because we see perfect parallel scaling with the old OS code using all of the same conditions. The only difference between the two computations is that I've switched the source of the integrals. The only explanation for this behavior I can come up with is that the libint2 library might have some kind of global lock that prevents independent threads (with their own independent `ElectrostaticInt` objects) from computing integrals in parallel. I don't know enough about how libint2 works to justify this idea. I'm very curious to hear other thoughts on this scaling issue. ### Plugin. The plugin (attached) requires adding `PSI_API` to a few classes (DFTGrid, MultipolePotentialInt). The following function is also necessary in `psi4/libmints/electrostatic.cc`:; ```; void ElectrostaticInt::set_origin(const Vector3& _origin) {; origin_ = _origin;; std::vector<std::pair<double, std::array<double, 3>>> pcs;; pcs.push_back({-1.0, {origin_[0], origin_[1], origin_[2]}});; engine0_->set_params(pcs);; }; ```. [plugin.cc.zip](https://github.com/psi4/psi4/files/8326964/plugin.cc.zip)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2491
https://github.com/psi4/psi4/issues/2491:4660,Modifiability,plugin,plugin,4660,"terface is that libint2 is a specialized library and therefore should have more efficient routines. The integral routine using the old OS code scales almost perfectly all the way through 18 cores. This is also to be expected: the work being done in the integral routine is embarrassingly parallel, and threads don't share any information or intermediates. Surprisingly, when the same integrals are computed with libint2 instead of the old OS code, the parallel scaling suffers drastically. We see no benefit gained from using more than two cores, and even a calculation with two cores only achieves a 1.45x speedup. When I use all 18 cores on my workstation, the new libint2 integrals are nearly 7(!) times slower than the old OS code. What makes this particularly confusing is that none of the usual culprits associated with poor parallel scaling (bad scheduling/work balance, high overhead, etc.) apply here. This is because we see perfect parallel scaling with the old OS code using all of the same conditions. The only difference between the two computations is that I've switched the source of the integrals. The only explanation for this behavior I can come up with is that the libint2 library might have some kind of global lock that prevents independent threads (with their own independent `ElectrostaticInt` objects) from computing integrals in parallel. I don't know enough about how libint2 works to justify this idea. I'm very curious to hear other thoughts on this scaling issue. ### Plugin. The plugin (attached) requires adding `PSI_API` to a few classes (DFTGrid, MultipolePotentialInt). The following function is also necessary in `psi4/libmints/electrostatic.cc`:; ```; void ElectrostaticInt::set_origin(const Vector3& _origin) {; origin_ = _origin;; std::vector<std::pair<double, std::array<double, 3>>> pcs;; pcs.push_back({-1.0, {origin_[0], origin_[1], origin_[2]}});; engine0_->set_params(pcs);; }; ```. [plugin.cc.zip](https://github.com/psi4/psi4/files/8326964/plugin.cc.zip)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2491
https://github.com/psi4/psi4/issues/2491:1921,Performance,perform,performed,1921,"ia the `ElectrostaticInt` class). I've attached a plugin that computes a large number of these OEI integrals with both classes, modeled after a naive semi-numerical exchange code. Here's the pseudocode of this plugin:. ```; # pragma omp parallel for; for grid_point_block in quadrature (B); ; thread = omp_get_thread(); ; for bra in basis (u); for ket in basis (v); for grid point in B (g); ; // integral_computer[thread] is either an ElectrostaticInt or MultipolePotentialInt; integral_computer[thread].compute(u, v, g); ```. Note that the above pseudocode is parallelized over blocks of ~64 grid points. This pseudocode follows the description of the original chain of spheres (COSX) semi-numerical exchange algorithm described [here](https://www.sciencedirect.com/science/article/pii/S0301010408005089). ### Results. Below are timings of the naive semi-numerical integral loop using both the old psi4 integrals and the new libint2 integrals. This benchmark was performed on a butane molecule in a cc-pVDZ basis set and a standard 302/75 quadrature grid. Wall times are the minimum of five trials. | Cores | Old Integral<br/>Wall Time (s) | Old Integral<br/>Parallel Speedup | New Integral<br/>Wall Time (s) | New Integral<br/>Parallel Speedup |; | :--- | :--- | :--- | :--- | :--- |; | 1 | 191.7 | --- | 105.3 | --- |; | 2 | 96.1 | x2.00 | 72.6 | x1.45 |; | 4 | 48.4 | x3.96 | 71.5 | x1.47 |; | 8 | 24.3 | x7.88 | 74.5 | x1.41 |; | 18 | 11.5 | x16.62 | 72.8 | x1.45 |. Note that with one core, the new libint2 integrals (105.3s) are faster than the old OS integrals (191.7s) by almost a factor of two, which is to be expected. Part of the reason for deprecating the old, hand-coded integral code for the libint2 interface is that libint2 is a specialized library and therefore should have more efficient routines. The integral routine using the old OS code scales almost perfectly all the way through 18 cores. This is also to be expected: the work being done in the integral routine is embarrassi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2491
https://github.com/psi4/psi4/issues/2491:1907,Testability,benchmark,benchmark,1907,"ia the `ElectrostaticInt` class). I've attached a plugin that computes a large number of these OEI integrals with both classes, modeled after a naive semi-numerical exchange code. Here's the pseudocode of this plugin:. ```; # pragma omp parallel for; for grid_point_block in quadrature (B); ; thread = omp_get_thread(); ; for bra in basis (u); for ket in basis (v); for grid point in B (g); ; // integral_computer[thread] is either an ElectrostaticInt or MultipolePotentialInt; integral_computer[thread].compute(u, v, g); ```. Note that the above pseudocode is parallelized over blocks of ~64 grid points. This pseudocode follows the description of the original chain of spheres (COSX) semi-numerical exchange algorithm described [here](https://www.sciencedirect.com/science/article/pii/S0301010408005089). ### Results. Below are timings of the naive semi-numerical integral loop using both the old psi4 integrals and the new libint2 integrals. This benchmark was performed on a butane molecule in a cc-pVDZ basis set and a standard 302/75 quadrature grid. Wall times are the minimum of five trials. | Cores | Old Integral<br/>Wall Time (s) | Old Integral<br/>Parallel Speedup | New Integral<br/>Wall Time (s) | New Integral<br/>Parallel Speedup |; | :--- | :--- | :--- | :--- | :--- |; | 1 | 191.7 | --- | 105.3 | --- |; | 2 | 96.1 | x2.00 | 72.6 | x1.45 |; | 4 | 48.4 | x3.96 | 71.5 | x1.47 |; | 8 | 24.3 | x7.88 | 74.5 | x1.41 |; | 18 | 11.5 | x16.62 | 72.8 | x1.45 |. Note that with one core, the new libint2 integrals (105.3s) are faster than the old OS integrals (191.7s) by almost a factor of two, which is to be expected. Part of the reason for deprecating the old, hand-coded integral code for the libint2 interface is that libint2 is a specialized library and therefore should have more efficient routines. The integral routine using the old OS code scales almost perfectly all the way through 18 cores. This is also to be expected: the work being done in the integral routine is embarrassi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2491
https://github.com/psi4/psi4/pull/2494:45,Testability,test,tests,45,## Description; A few dipole/quadrupole full tests evaded earlier passes. Also give Windows the right L2 after #2413 ; ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2494
https://github.com/psi4/psi4/pull/2494:140,Testability,Test,Tests,140,## Description; A few dipole/quadrupole full tests evaded earlier passes. Also give Windows the right L2 after #2413 ; ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2494
https://github.com/psi4/psi4/pull/2494:215,Testability,test,tests,215,## Description; A few dipole/quadrupole full tests evaded earlier passes. Also give Windows the right L2 after #2413 ; ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2494
https://github.com/psi4/psi4/pull/2494:306,Testability,test,tests,306,## Description; A few dipole/quadrupole full tests evaded earlier passes. Also give Windows the right L2 after #2413 ; ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2494
https://github.com/psi4/psi4/issues/2495:144,Testability,test,tests,144,"Only makes sense (models and docs) after #2454. Summary is that by adding a simple file like the below to each PSIthon/CTest directory (dir in `tests/` that has an `input.dat` or `input.py`), we can run the test additionally through pytest. Read the docs to see why this is a good thing and more details on how to compose the file. ```; from addons import *. @ctest_labeler(""quick;ci;cas;properties;cart;noc1""); def test_ci_property():; ctest_runner(__file__, [""grid.dat""]); ```. A few dozen have been done, but filling in all 500 is suitable for distributing the workload.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2495
https://github.com/psi4/psi4/issues/2495:207,Testability,test,test,207,"Only makes sense (models and docs) after #2454. Summary is that by adding a simple file like the below to each PSIthon/CTest directory (dir in `tests/` that has an `input.dat` or `input.py`), we can run the test additionally through pytest. Read the docs to see why this is a good thing and more details on how to compose the file. ```; from addons import *. @ctest_labeler(""quick;ci;cas;properties;cart;noc1""); def test_ci_property():; ctest_runner(__file__, [""grid.dat""]); ```. A few dozen have been done, but filling in all 500 is suitable for distributing the workload.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2495
https://github.com/psi4/psi4/issues/2495:76,Usability,simpl,simple,76,"Only makes sense (models and docs) after #2454. Summary is that by adding a simple file like the below to each PSIthon/CTest directory (dir in `tests/` that has an `input.dat` or `input.py`), we can run the test additionally through pytest. Read the docs to see why this is a good thing and more details on how to compose the file. ```; from addons import *. @ctest_labeler(""quick;ci;cas;properties;cart;noc1""); def test_ci_property():; ctest_runner(__file__, [""grid.dat""]); ```. A few dozen have been done, but filling in all 500 is suitable for distributing the workload.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2495
https://github.com/psi4/psi4/pull/2496:169,Integrability,rout,routine,169,"## Description. This is the second PR of the M-D series, this time replacing the OS code for arbitrary-order multipole integrals.; Some notable points:. - I added a new routine `ao_multipoles` to the Py API to conveniently call those integrals.; - There's also a new `multipole_grad` which computes first derivatives of arbitrary-order multipole integrals (new feature!).; - The dipole derivative code in `DipoleInt` (which uses l2 for dipole ints, used OS86 for derivs) is removed.; - To keep the API stable, the `dipole_grad` is hard-wired to `multipole_grad` with the appropriate arguments.; - ➡️ more features, less code 💡. ## ToDos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Implement arbitrary-order multipole integrals using M-D; - [x] first derivatives; - [x] finite-difference tests; - [x] more equation numbers; - [x] small benchmark against OS86 implementation. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for **SQUASH-merge** (wait for @andysim and @loriab approval)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2496
https://github.com/psi4/psi4/pull/2496:841,Testability,test,tests,841,"## Description. This is the second PR of the M-D series, this time replacing the OS code for arbitrary-order multipole integrals.; Some notable points:. - I added a new routine `ao_multipoles` to the Py API to conveniently call those integrals.; - There's also a new `multipole_grad` which computes first derivatives of arbitrary-order multipole integrals (new feature!).; - The dipole derivative code in `DipoleInt` (which uses l2 for dipole ints, used OS86 for derivs) is removed.; - To keep the API stable, the `dipole_grad` is hard-wired to `multipole_grad` with the appropriate arguments.; - ➡️ more features, less code 💡. ## ToDos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Implement arbitrary-order multipole integrals using M-D; - [x] first derivatives; - [x] finite-difference tests; - [x] more equation numbers; - [x] small benchmark against OS86 implementation. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for **SQUASH-merge** (wait for @andysim and @loriab approval)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2496
https://github.com/psi4/psi4/pull/2496:889,Testability,benchmark,benchmark,889,"## Description. This is the second PR of the M-D series, this time replacing the OS code for arbitrary-order multipole integrals.; Some notable points:. - I added a new routine `ao_multipoles` to the Py API to conveniently call those integrals.; - There's also a new `multipole_grad` which computes first derivatives of arbitrary-order multipole integrals (new feature!).; - The dipole derivative code in `DipoleInt` (which uses l2 for dipole ints, used OS86 for derivs) is removed.; - To keep the API stable, the `dipole_grad` is hard-wired to `multipole_grad` with the appropriate arguments.; - ➡️ more features, less code 💡. ## ToDos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Implement arbitrary-order multipole integrals using M-D; - [x] first derivatives; - [x] finite-difference tests; - [x] more equation numbers; - [x] small benchmark against OS86 implementation. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for **SQUASH-merge** (wait for @andysim and @loriab approval)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2496
https://github.com/psi4/psi4/pull/2496:979,Testability,Test,Tests,979,"## Description. This is the second PR of the M-D series, this time replacing the OS code for arbitrary-order multipole integrals.; Some notable points:. - I added a new routine `ao_multipoles` to the Py API to conveniently call those integrals.; - There's also a new `multipole_grad` which computes first derivatives of arbitrary-order multipole integrals (new feature!).; - The dipole derivative code in `DipoleInt` (which uses l2 for dipole ints, used OS86 for derivs) is removed.; - To keep the API stable, the `dipole_grad` is hard-wired to `multipole_grad` with the appropriate arguments.; - ➡️ more features, less code 💡. ## ToDos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Implement arbitrary-order multipole integrals using M-D; - [x] first derivatives; - [x] finite-difference tests; - [x] more equation numbers; - [x] small benchmark against OS86 implementation. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for **SQUASH-merge** (wait for @andysim and @loriab approval)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2496
https://github.com/psi4/psi4/pull/2496:1053,Testability,test,tests,1053,"## Description. This is the second PR of the M-D series, this time replacing the OS code for arbitrary-order multipole integrals.; Some notable points:. - I added a new routine `ao_multipoles` to the Py API to conveniently call those integrals.; - There's also a new `multipole_grad` which computes first derivatives of arbitrary-order multipole integrals (new feature!).; - The dipole derivative code in `DipoleInt` (which uses l2 for dipole ints, used OS86 for derivs) is removed.; - To keep the API stable, the `dipole_grad` is hard-wired to `multipole_grad` with the appropriate arguments.; - ➡️ more features, less code 💡. ## ToDos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Implement arbitrary-order multipole integrals using M-D; - [x] first derivatives; - [x] finite-difference tests; - [x] more equation numbers; - [x] small benchmark against OS86 implementation. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for **SQUASH-merge** (wait for @andysim and @loriab approval)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2496
https://github.com/psi4/psi4/pull/2496:1144,Testability,test,tests,1144,"## Description. This is the second PR of the M-D series, this time replacing the OS code for arbitrary-order multipole integrals.; Some notable points:. - I added a new routine `ao_multipoles` to the Py API to conveniently call those integrals.; - There's also a new `multipole_grad` which computes first derivatives of arbitrary-order multipole integrals (new feature!).; - The dipole derivative code in `DipoleInt` (which uses l2 for dipole ints, used OS86 for derivs) is removed.; - To keep the API stable, the `dipole_grad` is hard-wired to `multipole_grad` with the appropriate arguments.; - ➡️ more features, less code 💡. ## ToDos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Implement arbitrary-order multipole integrals using M-D; - [x] first derivatives; - [x] finite-difference tests; - [x] more equation numbers; - [x] small benchmark against OS86 implementation. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for **SQUASH-merge** (wait for @andysim and @loriab approval)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2496
https://github.com/psi4/psi4/issues/2497:322,Availability,failure,failure,322,"MRCC-related CTests pass with an older version (2019 with some unknown patches) of MRCC, but the 2022 release broke the interface (again?).; For what its worth, it also no longer works with Molpro 2015. ```; (p4dev) gytibor@CRD-MILAN-3:~/psi4/objdir$ ctest -L mrcc -j`getconf _NPROCESSORS_ONLN` --rerun-failed --output-on-failure; Test project /home/gytibor/psi4/objdir; Start 499: mrcc-ccsdt; Start 500: mrcc-ccsd_t_; Start 501: mrcc-ccsdt_q_; Start 502: mrcc-rohf_ccsdt_q_; Start 503: mrcc-optfreq; 1/5 Test #499: mrcc-ccsdt .......................***Failed 0.62 sec; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /tmp/mrcc_67625/KEYWD; Image PC Routine Line Source; dmrcc 0000000001284F08 Unknown Unknown Unknown; dmrcc 00000000012A12A2 Unknown Unknown Unknown; dmrcc 00000000004AE4BD Unknown Unknown Unknown; dmrcc 0000000000507E55 Unknown Unknown Unknown; dmrcc 000000000040D9DD Unknown Unknown Unknown; dmrcc 00000000004021AA Unknown Unknown Unknown; dmrcc 0000000000400DF2 Unknown Unknown Unknown; dmrcc 00000000013571F9 Unknown Unknown Unknown; dmrcc 0000000000400CCA Unknown Unknown Unknown; Traceback (most recent call last):; File ""/home/gytibor/psi4/objdir/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 27, in <module>; File ""/home/gytibor/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 599, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/gytibor/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 4732, in run_mrcc; for line in open('iface'):. FileNotFoundError: [Errno 2] No such file or directory: 'iface'. Printing out the relevant lines from the Psithon --> Python processed input file:; h 1 1.0 2 104.5; """""",""h2o""); core.IO.set_default_namespace(""h2o""); core.set_global_option(""BASIS"", ""cc-pvdz""); core.set_global_option(""FREEZE_CORE"", ""true""); --> energy('mrccsdt'); compare_values( 8.801465529972, variable(""NUCLEAR REPULSION ENERGY""), 6, 'N",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2497
https://github.com/psi4/psi4/issues/2497:71,Deployability,patch,patches,71,"MRCC-related CTests pass with an older version (2019 with some unknown patches) of MRCC, but the 2022 release broke the interface (again?).; For what its worth, it also no longer works with Molpro 2015. ```; (p4dev) gytibor@CRD-MILAN-3:~/psi4/objdir$ ctest -L mrcc -j`getconf _NPROCESSORS_ONLN` --rerun-failed --output-on-failure; Test project /home/gytibor/psi4/objdir; Start 499: mrcc-ccsdt; Start 500: mrcc-ccsd_t_; Start 501: mrcc-ccsdt_q_; Start 502: mrcc-rohf_ccsdt_q_; Start 503: mrcc-optfreq; 1/5 Test #499: mrcc-ccsdt .......................***Failed 0.62 sec; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /tmp/mrcc_67625/KEYWD; Image PC Routine Line Source; dmrcc 0000000001284F08 Unknown Unknown Unknown; dmrcc 00000000012A12A2 Unknown Unknown Unknown; dmrcc 00000000004AE4BD Unknown Unknown Unknown; dmrcc 0000000000507E55 Unknown Unknown Unknown; dmrcc 000000000040D9DD Unknown Unknown Unknown; dmrcc 00000000004021AA Unknown Unknown Unknown; dmrcc 0000000000400DF2 Unknown Unknown Unknown; dmrcc 00000000013571F9 Unknown Unknown Unknown; dmrcc 0000000000400CCA Unknown Unknown Unknown; Traceback (most recent call last):; File ""/home/gytibor/psi4/objdir/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 27, in <module>; File ""/home/gytibor/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 599, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/gytibor/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 4732, in run_mrcc; for line in open('iface'):. FileNotFoundError: [Errno 2] No such file or directory: 'iface'. Printing out the relevant lines from the Psithon --> Python processed input file:; h 1 1.0 2 104.5; """""",""h2o""); core.IO.set_default_namespace(""h2o""); core.set_global_option(""BASIS"", ""cc-pvdz""); core.set_global_option(""FREEZE_CORE"", ""true""); --> energy('mrccsdt'); compare_values( 8.801465529972, variable(""NUCLEAR REPULSION ENERGY""), 6, 'N",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2497
https://github.com/psi4/psi4/issues/2497:102,Deployability,release,release,102,"MRCC-related CTests pass with an older version (2019 with some unknown patches) of MRCC, but the 2022 release broke the interface (again?).; For what its worth, it also no longer works with Molpro 2015. ```; (p4dev) gytibor@CRD-MILAN-3:~/psi4/objdir$ ctest -L mrcc -j`getconf _NPROCESSORS_ONLN` --rerun-failed --output-on-failure; Test project /home/gytibor/psi4/objdir; Start 499: mrcc-ccsdt; Start 500: mrcc-ccsd_t_; Start 501: mrcc-ccsdt_q_; Start 502: mrcc-rohf_ccsdt_q_; Start 503: mrcc-optfreq; 1/5 Test #499: mrcc-ccsdt .......................***Failed 0.62 sec; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /tmp/mrcc_67625/KEYWD; Image PC Routine Line Source; dmrcc 0000000001284F08 Unknown Unknown Unknown; dmrcc 00000000012A12A2 Unknown Unknown Unknown; dmrcc 00000000004AE4BD Unknown Unknown Unknown; dmrcc 0000000000507E55 Unknown Unknown Unknown; dmrcc 000000000040D9DD Unknown Unknown Unknown; dmrcc 00000000004021AA Unknown Unknown Unknown; dmrcc 0000000000400DF2 Unknown Unknown Unknown; dmrcc 00000000013571F9 Unknown Unknown Unknown; dmrcc 0000000000400CCA Unknown Unknown Unknown; Traceback (most recent call last):; File ""/home/gytibor/psi4/objdir/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 27, in <module>; File ""/home/gytibor/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 599, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/gytibor/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 4732, in run_mrcc; for line in open('iface'):. FileNotFoundError: [Errno 2] No such file or directory: 'iface'. Printing out the relevant lines from the Psithon --> Python processed input file:; h 1 1.0 2 104.5; """""",""h2o""); core.IO.set_default_namespace(""h2o""); core.set_global_option(""BASIS"", ""cc-pvdz""); core.set_global_option(""FREEZE_CORE"", ""true""); --> energy('mrccsdt'); compare_values( 8.801465529972, variable(""NUCLEAR REPULSION ENERGY""), 6, 'N",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2497
https://github.com/psi4/psi4/issues/2497:1382,Energy Efficiency,energy,energy,1382,"02: mrcc-rohf_ccsdt_q_; Start 503: mrcc-optfreq; 1/5 Test #499: mrcc-ccsdt .......................***Failed 0.62 sec; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /tmp/mrcc_67625/KEYWD; Image PC Routine Line Source; dmrcc 0000000001284F08 Unknown Unknown Unknown; dmrcc 00000000012A12A2 Unknown Unknown Unknown; dmrcc 00000000004AE4BD Unknown Unknown Unknown; dmrcc 0000000000507E55 Unknown Unknown Unknown; dmrcc 000000000040D9DD Unknown Unknown Unknown; dmrcc 00000000004021AA Unknown Unknown Unknown; dmrcc 0000000000400DF2 Unknown Unknown Unknown; dmrcc 00000000013571F9 Unknown Unknown Unknown; dmrcc 0000000000400CCA Unknown Unknown Unknown; Traceback (most recent call last):; File ""/home/gytibor/psi4/objdir/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 27, in <module>; File ""/home/gytibor/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 599, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/gytibor/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 4732, in run_mrcc; for line in open('iface'):. FileNotFoundError: [Errno 2] No such file or directory: 'iface'. Printing out the relevant lines from the Psithon --> Python processed input file:; h 1 1.0 2 104.5; """""",""h2o""); core.IO.set_default_namespace(""h2o""); core.set_global_option(""BASIS"", ""cc-pvdz""); core.set_global_option(""FREEZE_CORE"", ""true""); --> energy('mrccsdt'); compare_values( 8.801465529972, variable(""NUCLEAR REPULSION ENERGY""), 6, 'NRE'); compare_values(-76.021418445155, variable(""SCF TOTAL ENERGY""), 6, 'SCF'); compare_values( -0.204692406830, variable(""MP2 CORRELATION ENERGY"") , 6, 'MP2 correlation'); compare_values( -0.217715210258, variable(""CCSDT CORRELATION ENERGY""), 6, 'CCSDT correlation'); compare_values(-76.239133655413, variable(""CURRENT ENERGY""), 6, 'CCSDT'). !-----------------------------------------------!; ! !; ! [Errno 2] No such file or directory: 'iface' !; ! ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2497
https://github.com/psi4/psi4/issues/2497:1408,Energy Efficiency,energy,energy,1408,"02: mrcc-rohf_ccsdt_q_; Start 503: mrcc-optfreq; 1/5 Test #499: mrcc-ccsdt .......................***Failed 0.62 sec; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /tmp/mrcc_67625/KEYWD; Image PC Routine Line Source; dmrcc 0000000001284F08 Unknown Unknown Unknown; dmrcc 00000000012A12A2 Unknown Unknown Unknown; dmrcc 00000000004AE4BD Unknown Unknown Unknown; dmrcc 0000000000507E55 Unknown Unknown Unknown; dmrcc 000000000040D9DD Unknown Unknown Unknown; dmrcc 00000000004021AA Unknown Unknown Unknown; dmrcc 0000000000400DF2 Unknown Unknown Unknown; dmrcc 00000000013571F9 Unknown Unknown Unknown; dmrcc 0000000000400CCA Unknown Unknown Unknown; Traceback (most recent call last):; File ""/home/gytibor/psi4/objdir/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 27, in <module>; File ""/home/gytibor/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 599, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/gytibor/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 4732, in run_mrcc; for line in open('iface'):. FileNotFoundError: [Errno 2] No such file or directory: 'iface'. Printing out the relevant lines from the Psithon --> Python processed input file:; h 1 1.0 2 104.5; """""",""h2o""); core.IO.set_default_namespace(""h2o""); core.set_global_option(""BASIS"", ""cc-pvdz""); core.set_global_option(""FREEZE_CORE"", ""true""); --> energy('mrccsdt'); compare_values( 8.801465529972, variable(""NUCLEAR REPULSION ENERGY""), 6, 'NRE'); compare_values(-76.021418445155, variable(""SCF TOTAL ENERGY""), 6, 'SCF'); compare_values( -0.204692406830, variable(""MP2 CORRELATION ENERGY"") , 6, 'MP2 correlation'); compare_values( -0.217715210258, variable(""CCSDT CORRELATION ENERGY""), 6, 'CCSDT correlation'); compare_values(-76.239133655413, variable(""CURRENT ENERGY""), 6, 'CCSDT'). !-----------------------------------------------!; ! !; ! [Errno 2] No such file or directory: 'iface' !; ! ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2497
https://github.com/psi4/psi4/issues/2497:1907,Energy Efficiency,energy,energy,1907," #499: mrcc-ccsdt .......................***Failed 0.62 sec; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /tmp/mrcc_67625/KEYWD; Image PC Routine Line Source; dmrcc 0000000001284F08 Unknown Unknown Unknown; dmrcc 00000000012A12A2 Unknown Unknown Unknown; dmrcc 00000000004AE4BD Unknown Unknown Unknown; dmrcc 0000000000507E55 Unknown Unknown Unknown; dmrcc 000000000040D9DD Unknown Unknown Unknown; dmrcc 00000000004021AA Unknown Unknown Unknown; dmrcc 0000000000400DF2 Unknown Unknown Unknown; dmrcc 00000000013571F9 Unknown Unknown Unknown; dmrcc 0000000000400CCA Unknown Unknown Unknown; Traceback (most recent call last):; File ""/home/gytibor/psi4/objdir/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 27, in <module>; File ""/home/gytibor/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 599, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/gytibor/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 4732, in run_mrcc; for line in open('iface'):. FileNotFoundError: [Errno 2] No such file or directory: 'iface'. Printing out the relevant lines from the Psithon --> Python processed input file:; h 1 1.0 2 104.5; """""",""h2o""); core.IO.set_default_namespace(""h2o""); core.set_global_option(""BASIS"", ""cc-pvdz""); core.set_global_option(""FREEZE_CORE"", ""true""); --> energy('mrccsdt'); compare_values( 8.801465529972, variable(""NUCLEAR REPULSION ENERGY""), 6, 'NRE'); compare_values(-76.021418445155, variable(""SCF TOTAL ENERGY""), 6, 'SCF'); compare_values( -0.204692406830, variable(""MP2 CORRELATION ENERGY"") , 6, 'MP2 correlation'); compare_values( -0.217715210258, variable(""CCSDT CORRELATION ENERGY""), 6, 'CCSDT correlation'); compare_values(-76.239133655413, variable(""CURRENT ENERGY""), 6, 'CCSDT'). !-----------------------------------------------!; ! !; ! [Errno 2] No such file or directory: 'iface' !; ! !; !-----------------------------------------------!; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2497
https://github.com/psi4/psi4/issues/2497:1986,Energy Efficiency,ENERGY,ENERGY,1986," #499: mrcc-ccsdt .......................***Failed 0.62 sec; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /tmp/mrcc_67625/KEYWD; Image PC Routine Line Source; dmrcc 0000000001284F08 Unknown Unknown Unknown; dmrcc 00000000012A12A2 Unknown Unknown Unknown; dmrcc 00000000004AE4BD Unknown Unknown Unknown; dmrcc 0000000000507E55 Unknown Unknown Unknown; dmrcc 000000000040D9DD Unknown Unknown Unknown; dmrcc 00000000004021AA Unknown Unknown Unknown; dmrcc 0000000000400DF2 Unknown Unknown Unknown; dmrcc 00000000013571F9 Unknown Unknown Unknown; dmrcc 0000000000400CCA Unknown Unknown Unknown; Traceback (most recent call last):; File ""/home/gytibor/psi4/objdir/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 27, in <module>; File ""/home/gytibor/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 599, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/gytibor/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 4732, in run_mrcc; for line in open('iface'):. FileNotFoundError: [Errno 2] No such file or directory: 'iface'. Printing out the relevant lines from the Psithon --> Python processed input file:; h 1 1.0 2 104.5; """""",""h2o""); core.IO.set_default_namespace(""h2o""); core.set_global_option(""BASIS"", ""cc-pvdz""); core.set_global_option(""FREEZE_CORE"", ""true""); --> energy('mrccsdt'); compare_values( 8.801465529972, variable(""NUCLEAR REPULSION ENERGY""), 6, 'NRE'); compare_values(-76.021418445155, variable(""SCF TOTAL ENERGY""), 6, 'SCF'); compare_values( -0.204692406830, variable(""MP2 CORRELATION ENERGY"") , 6, 'MP2 correlation'); compare_values( -0.217715210258, variable(""CCSDT CORRELATION ENERGY""), 6, 'CCSDT correlation'); compare_values(-76.239133655413, variable(""CURRENT ENERGY""), 6, 'CCSDT'). !-----------------------------------------------!; ! !; ! [Errno 2] No such file or directory: 'iface' !; ! !; !-----------------------------------------------!; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2497
https://github.com/psi4/psi4/issues/2497:2060,Energy Efficiency,ENERGY,ENERGY,2060," #499: mrcc-ccsdt .......................***Failed 0.62 sec; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /tmp/mrcc_67625/KEYWD; Image PC Routine Line Source; dmrcc 0000000001284F08 Unknown Unknown Unknown; dmrcc 00000000012A12A2 Unknown Unknown Unknown; dmrcc 00000000004AE4BD Unknown Unknown Unknown; dmrcc 0000000000507E55 Unknown Unknown Unknown; dmrcc 000000000040D9DD Unknown Unknown Unknown; dmrcc 00000000004021AA Unknown Unknown Unknown; dmrcc 0000000000400DF2 Unknown Unknown Unknown; dmrcc 00000000013571F9 Unknown Unknown Unknown; dmrcc 0000000000400CCA Unknown Unknown Unknown; Traceback (most recent call last):; File ""/home/gytibor/psi4/objdir/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 27, in <module>; File ""/home/gytibor/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 599, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/gytibor/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 4732, in run_mrcc; for line in open('iface'):. FileNotFoundError: [Errno 2] No such file or directory: 'iface'. Printing out the relevant lines from the Psithon --> Python processed input file:; h 1 1.0 2 104.5; """""",""h2o""); core.IO.set_default_namespace(""h2o""); core.set_global_option(""BASIS"", ""cc-pvdz""); core.set_global_option(""FREEZE_CORE"", ""true""); --> energy('mrccsdt'); compare_values( 8.801465529972, variable(""NUCLEAR REPULSION ENERGY""), 6, 'NRE'); compare_values(-76.021418445155, variable(""SCF TOTAL ENERGY""), 6, 'SCF'); compare_values( -0.204692406830, variable(""MP2 CORRELATION ENERGY"") , 6, 'MP2 correlation'); compare_values( -0.217715210258, variable(""CCSDT CORRELATION ENERGY""), 6, 'CCSDT correlation'); compare_values(-76.239133655413, variable(""CURRENT ENERGY""), 6, 'CCSDT'). !-----------------------------------------------!; ! !; ! [Errno 2] No such file or directory: 'iface' !; ! !; !-----------------------------------------------!; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2497
https://github.com/psi4/psi4/issues/2497:2140,Energy Efficiency,ENERGY,ENERGY,2140," #499: mrcc-ccsdt .......................***Failed 0.62 sec; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /tmp/mrcc_67625/KEYWD; Image PC Routine Line Source; dmrcc 0000000001284F08 Unknown Unknown Unknown; dmrcc 00000000012A12A2 Unknown Unknown Unknown; dmrcc 00000000004AE4BD Unknown Unknown Unknown; dmrcc 0000000000507E55 Unknown Unknown Unknown; dmrcc 000000000040D9DD Unknown Unknown Unknown; dmrcc 00000000004021AA Unknown Unknown Unknown; dmrcc 0000000000400DF2 Unknown Unknown Unknown; dmrcc 00000000013571F9 Unknown Unknown Unknown; dmrcc 0000000000400CCA Unknown Unknown Unknown; Traceback (most recent call last):; File ""/home/gytibor/psi4/objdir/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 27, in <module>; File ""/home/gytibor/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 599, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/gytibor/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 4732, in run_mrcc; for line in open('iface'):. FileNotFoundError: [Errno 2] No such file or directory: 'iface'. Printing out the relevant lines from the Psithon --> Python processed input file:; h 1 1.0 2 104.5; """""",""h2o""); core.IO.set_default_namespace(""h2o""); core.set_global_option(""BASIS"", ""cc-pvdz""); core.set_global_option(""FREEZE_CORE"", ""true""); --> energy('mrccsdt'); compare_values( 8.801465529972, variable(""NUCLEAR REPULSION ENERGY""), 6, 'NRE'); compare_values(-76.021418445155, variable(""SCF TOTAL ENERGY""), 6, 'SCF'); compare_values( -0.204692406830, variable(""MP2 CORRELATION ENERGY"") , 6, 'MP2 correlation'); compare_values( -0.217715210258, variable(""CCSDT CORRELATION ENERGY""), 6, 'CCSDT correlation'); compare_values(-76.239133655413, variable(""CURRENT ENERGY""), 6, 'CCSDT'). !-----------------------------------------------!; ! !; ! [Errno 2] No such file or directory: 'iface' !; ! !; !-----------------------------------------------!; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2497
https://github.com/psi4/psi4/issues/2497:2235,Energy Efficiency,ENERGY,ENERGY,2235," #499: mrcc-ccsdt .......................***Failed 0.62 sec; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /tmp/mrcc_67625/KEYWD; Image PC Routine Line Source; dmrcc 0000000001284F08 Unknown Unknown Unknown; dmrcc 00000000012A12A2 Unknown Unknown Unknown; dmrcc 00000000004AE4BD Unknown Unknown Unknown; dmrcc 0000000000507E55 Unknown Unknown Unknown; dmrcc 000000000040D9DD Unknown Unknown Unknown; dmrcc 00000000004021AA Unknown Unknown Unknown; dmrcc 0000000000400DF2 Unknown Unknown Unknown; dmrcc 00000000013571F9 Unknown Unknown Unknown; dmrcc 0000000000400CCA Unknown Unknown Unknown; Traceback (most recent call last):; File ""/home/gytibor/psi4/objdir/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 27, in <module>; File ""/home/gytibor/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 599, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/gytibor/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 4732, in run_mrcc; for line in open('iface'):. FileNotFoundError: [Errno 2] No such file or directory: 'iface'. Printing out the relevant lines from the Psithon --> Python processed input file:; h 1 1.0 2 104.5; """""",""h2o""); core.IO.set_default_namespace(""h2o""); core.set_global_option(""BASIS"", ""cc-pvdz""); core.set_global_option(""FREEZE_CORE"", ""true""); --> energy('mrccsdt'); compare_values( 8.801465529972, variable(""NUCLEAR REPULSION ENERGY""), 6, 'NRE'); compare_values(-76.021418445155, variable(""SCF TOTAL ENERGY""), 6, 'SCF'); compare_values( -0.204692406830, variable(""MP2 CORRELATION ENERGY"") , 6, 'MP2 correlation'); compare_values( -0.217715210258, variable(""CCSDT CORRELATION ENERGY""), 6, 'CCSDT correlation'); compare_values(-76.239133655413, variable(""CURRENT ENERGY""), 6, 'CCSDT'). !-----------------------------------------------!; ! !; ! [Errno 2] No such file or directory: 'iface' !; ! !; !-----------------------------------------------!; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2497
https://github.com/psi4/psi4/issues/2497:2321,Energy Efficiency,ENERGY,ENERGY,2321," #499: mrcc-ccsdt .......................***Failed 0.62 sec; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /tmp/mrcc_67625/KEYWD; Image PC Routine Line Source; dmrcc 0000000001284F08 Unknown Unknown Unknown; dmrcc 00000000012A12A2 Unknown Unknown Unknown; dmrcc 00000000004AE4BD Unknown Unknown Unknown; dmrcc 0000000000507E55 Unknown Unknown Unknown; dmrcc 000000000040D9DD Unknown Unknown Unknown; dmrcc 00000000004021AA Unknown Unknown Unknown; dmrcc 0000000000400DF2 Unknown Unknown Unknown; dmrcc 00000000013571F9 Unknown Unknown Unknown; dmrcc 0000000000400CCA Unknown Unknown Unknown; Traceback (most recent call last):; File ""/home/gytibor/psi4/objdir/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 27, in <module>; File ""/home/gytibor/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 599, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/gytibor/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 4732, in run_mrcc; for line in open('iface'):. FileNotFoundError: [Errno 2] No such file or directory: 'iface'. Printing out the relevant lines from the Psithon --> Python processed input file:; h 1 1.0 2 104.5; """""",""h2o""); core.IO.set_default_namespace(""h2o""); core.set_global_option(""BASIS"", ""cc-pvdz""); core.set_global_option(""FREEZE_CORE"", ""true""); --> energy('mrccsdt'); compare_values( 8.801465529972, variable(""NUCLEAR REPULSION ENERGY""), 6, 'NRE'); compare_values(-76.021418445155, variable(""SCF TOTAL ENERGY""), 6, 'SCF'); compare_values( -0.204692406830, variable(""MP2 CORRELATION ENERGY"") , 6, 'MP2 correlation'); compare_values( -0.217715210258, variable(""CCSDT CORRELATION ENERGY""), 6, 'CCSDT correlation'); compare_values(-76.239133655413, variable(""CURRENT ENERGY""), 6, 'CCSDT'). !-----------------------------------------------!; ! !; ! [Errno 2] No such file or directory: 'iface' !; ! !; !-----------------------------------------------!; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2497
https://github.com/psi4/psi4/issues/2497:120,Integrability,interface,interface,120,"MRCC-related CTests pass with an older version (2019 with some unknown patches) of MRCC, but the 2022 release broke the interface (again?).; For what its worth, it also no longer works with Molpro 2015. ```; (p4dev) gytibor@CRD-MILAN-3:~/psi4/objdir$ ctest -L mrcc -j`getconf _NPROCESSORS_ONLN` --rerun-failed --output-on-failure; Test project /home/gytibor/psi4/objdir; Start 499: mrcc-ccsdt; Start 500: mrcc-ccsd_t_; Start 501: mrcc-ccsdt_q_; Start 502: mrcc-rohf_ccsdt_q_; Start 503: mrcc-optfreq; 1/5 Test #499: mrcc-ccsdt .......................***Failed 0.62 sec; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /tmp/mrcc_67625/KEYWD; Image PC Routine Line Source; dmrcc 0000000001284F08 Unknown Unknown Unknown; dmrcc 00000000012A12A2 Unknown Unknown Unknown; dmrcc 00000000004AE4BD Unknown Unknown Unknown; dmrcc 0000000000507E55 Unknown Unknown Unknown; dmrcc 000000000040D9DD Unknown Unknown Unknown; dmrcc 00000000004021AA Unknown Unknown Unknown; dmrcc 0000000000400DF2 Unknown Unknown Unknown; dmrcc 00000000013571F9 Unknown Unknown Unknown; dmrcc 0000000000400CCA Unknown Unknown Unknown; Traceback (most recent call last):; File ""/home/gytibor/psi4/objdir/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 27, in <module>; File ""/home/gytibor/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 599, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/gytibor/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 4732, in run_mrcc; for line in open('iface'):. FileNotFoundError: [Errno 2] No such file or directory: 'iface'. Printing out the relevant lines from the Psithon --> Python processed input file:; h 1 1.0 2 104.5; """""",""h2o""); core.IO.set_default_namespace(""h2o""); core.set_global_option(""BASIS"", ""cc-pvdz""); core.set_global_option(""FREEZE_CORE"", ""true""); --> energy('mrccsdt'); compare_values( 8.801465529972, variable(""NUCLEAR REPULSION ENERGY""), 6, 'N",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2497
https://github.com/psi4/psi4/issues/2497:688,Integrability,Rout,Routine,688,"MRCC-related CTests pass with an older version (2019 with some unknown patches) of MRCC, but the 2022 release broke the interface (again?).; For what its worth, it also no longer works with Molpro 2015. ```; (p4dev) gytibor@CRD-MILAN-3:~/psi4/objdir$ ctest -L mrcc -j`getconf _NPROCESSORS_ONLN` --rerun-failed --output-on-failure; Test project /home/gytibor/psi4/objdir; Start 499: mrcc-ccsdt; Start 500: mrcc-ccsd_t_; Start 501: mrcc-ccsdt_q_; Start 502: mrcc-rohf_ccsdt_q_; Start 503: mrcc-optfreq; 1/5 Test #499: mrcc-ccsdt .......................***Failed 0.62 sec; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /tmp/mrcc_67625/KEYWD; Image PC Routine Line Source; dmrcc 0000000001284F08 Unknown Unknown Unknown; dmrcc 00000000012A12A2 Unknown Unknown Unknown; dmrcc 00000000004AE4BD Unknown Unknown Unknown; dmrcc 0000000000507E55 Unknown Unknown Unknown; dmrcc 000000000040D9DD Unknown Unknown Unknown; dmrcc 00000000004021AA Unknown Unknown Unknown; dmrcc 0000000000400DF2 Unknown Unknown Unknown; dmrcc 00000000013571F9 Unknown Unknown Unknown; dmrcc 0000000000400CCA Unknown Unknown Unknown; Traceback (most recent call last):; File ""/home/gytibor/psi4/objdir/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 27, in <module>; File ""/home/gytibor/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 599, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/gytibor/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 4732, in run_mrcc; for line in open('iface'):. FileNotFoundError: [Errno 2] No such file or directory: 'iface'. Printing out the relevant lines from the Psithon --> Python processed input file:; h 1 1.0 2 104.5; """""",""h2o""); core.IO.set_default_namespace(""h2o""); core.set_global_option(""BASIS"", ""cc-pvdz""); core.set_global_option(""FREEZE_CORE"", ""true""); --> energy('mrccsdt'); compare_values( 8.801465529972, variable(""NUCLEAR REPULSION ENERGY""), 6, 'N",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2497
https://github.com/psi4/psi4/issues/2497:1958,Modifiability,variab,variable,1958," #499: mrcc-ccsdt .......................***Failed 0.62 sec; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /tmp/mrcc_67625/KEYWD; Image PC Routine Line Source; dmrcc 0000000001284F08 Unknown Unknown Unknown; dmrcc 00000000012A12A2 Unknown Unknown Unknown; dmrcc 00000000004AE4BD Unknown Unknown Unknown; dmrcc 0000000000507E55 Unknown Unknown Unknown; dmrcc 000000000040D9DD Unknown Unknown Unknown; dmrcc 00000000004021AA Unknown Unknown Unknown; dmrcc 0000000000400DF2 Unknown Unknown Unknown; dmrcc 00000000013571F9 Unknown Unknown Unknown; dmrcc 0000000000400CCA Unknown Unknown Unknown; Traceback (most recent call last):; File ""/home/gytibor/psi4/objdir/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 27, in <module>; File ""/home/gytibor/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 599, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/gytibor/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 4732, in run_mrcc; for line in open('iface'):. FileNotFoundError: [Errno 2] No such file or directory: 'iface'. Printing out the relevant lines from the Psithon --> Python processed input file:; h 1 1.0 2 104.5; """""",""h2o""); core.IO.set_default_namespace(""h2o""); core.set_global_option(""BASIS"", ""cc-pvdz""); core.set_global_option(""FREEZE_CORE"", ""true""); --> energy('mrccsdt'); compare_values( 8.801465529972, variable(""NUCLEAR REPULSION ENERGY""), 6, 'NRE'); compare_values(-76.021418445155, variable(""SCF TOTAL ENERGY""), 6, 'SCF'); compare_values( -0.204692406830, variable(""MP2 CORRELATION ENERGY"") , 6, 'MP2 correlation'); compare_values( -0.217715210258, variable(""CCSDT CORRELATION ENERGY""), 6, 'CCSDT correlation'); compare_values(-76.239133655413, variable(""CURRENT ENERGY""), 6, 'CCSDT'). !-----------------------------------------------!; ! !; ! [Errno 2] No such file or directory: 'iface' !; ! !; !-----------------------------------------------!; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2497
https://github.com/psi4/psi4/issues/2497:2040,Modifiability,variab,variable,2040," #499: mrcc-ccsdt .......................***Failed 0.62 sec; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /tmp/mrcc_67625/KEYWD; Image PC Routine Line Source; dmrcc 0000000001284F08 Unknown Unknown Unknown; dmrcc 00000000012A12A2 Unknown Unknown Unknown; dmrcc 00000000004AE4BD Unknown Unknown Unknown; dmrcc 0000000000507E55 Unknown Unknown Unknown; dmrcc 000000000040D9DD Unknown Unknown Unknown; dmrcc 00000000004021AA Unknown Unknown Unknown; dmrcc 0000000000400DF2 Unknown Unknown Unknown; dmrcc 00000000013571F9 Unknown Unknown Unknown; dmrcc 0000000000400CCA Unknown Unknown Unknown; Traceback (most recent call last):; File ""/home/gytibor/psi4/objdir/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 27, in <module>; File ""/home/gytibor/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 599, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/gytibor/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 4732, in run_mrcc; for line in open('iface'):. FileNotFoundError: [Errno 2] No such file or directory: 'iface'. Printing out the relevant lines from the Psithon --> Python processed input file:; h 1 1.0 2 104.5; """""",""h2o""); core.IO.set_default_namespace(""h2o""); core.set_global_option(""BASIS"", ""cc-pvdz""); core.set_global_option(""FREEZE_CORE"", ""true""); --> energy('mrccsdt'); compare_values( 8.801465529972, variable(""NUCLEAR REPULSION ENERGY""), 6, 'NRE'); compare_values(-76.021418445155, variable(""SCF TOTAL ENERGY""), 6, 'SCF'); compare_values( -0.204692406830, variable(""MP2 CORRELATION ENERGY"") , 6, 'MP2 correlation'); compare_values( -0.217715210258, variable(""CCSDT CORRELATION ENERGY""), 6, 'CCSDT correlation'); compare_values(-76.239133655413, variable(""CURRENT ENERGY""), 6, 'CCSDT'). !-----------------------------------------------!; ! !; ! [Errno 2] No such file or directory: 'iface' !; ! !; !-----------------------------------------------!; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2497
https://github.com/psi4/psi4/issues/2497:2114,Modifiability,variab,variable,2114," #499: mrcc-ccsdt .......................***Failed 0.62 sec; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /tmp/mrcc_67625/KEYWD; Image PC Routine Line Source; dmrcc 0000000001284F08 Unknown Unknown Unknown; dmrcc 00000000012A12A2 Unknown Unknown Unknown; dmrcc 00000000004AE4BD Unknown Unknown Unknown; dmrcc 0000000000507E55 Unknown Unknown Unknown; dmrcc 000000000040D9DD Unknown Unknown Unknown; dmrcc 00000000004021AA Unknown Unknown Unknown; dmrcc 0000000000400DF2 Unknown Unknown Unknown; dmrcc 00000000013571F9 Unknown Unknown Unknown; dmrcc 0000000000400CCA Unknown Unknown Unknown; Traceback (most recent call last):; File ""/home/gytibor/psi4/objdir/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 27, in <module>; File ""/home/gytibor/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 599, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/gytibor/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 4732, in run_mrcc; for line in open('iface'):. FileNotFoundError: [Errno 2] No such file or directory: 'iface'. Printing out the relevant lines from the Psithon --> Python processed input file:; h 1 1.0 2 104.5; """""",""h2o""); core.IO.set_default_namespace(""h2o""); core.set_global_option(""BASIS"", ""cc-pvdz""); core.set_global_option(""FREEZE_CORE"", ""true""); --> energy('mrccsdt'); compare_values( 8.801465529972, variable(""NUCLEAR REPULSION ENERGY""), 6, 'NRE'); compare_values(-76.021418445155, variable(""SCF TOTAL ENERGY""), 6, 'SCF'); compare_values( -0.204692406830, variable(""MP2 CORRELATION ENERGY"") , 6, 'MP2 correlation'); compare_values( -0.217715210258, variable(""CCSDT CORRELATION ENERGY""), 6, 'CCSDT correlation'); compare_values(-76.239133655413, variable(""CURRENT ENERGY""), 6, 'CCSDT'). !-----------------------------------------------!; ! !; ! [Errno 2] No such file or directory: 'iface' !; ! !; !-----------------------------------------------!; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2497
https://github.com/psi4/psi4/issues/2497:2207,Modifiability,variab,variable,2207," #499: mrcc-ccsdt .......................***Failed 0.62 sec; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /tmp/mrcc_67625/KEYWD; Image PC Routine Line Source; dmrcc 0000000001284F08 Unknown Unknown Unknown; dmrcc 00000000012A12A2 Unknown Unknown Unknown; dmrcc 00000000004AE4BD Unknown Unknown Unknown; dmrcc 0000000000507E55 Unknown Unknown Unknown; dmrcc 000000000040D9DD Unknown Unknown Unknown; dmrcc 00000000004021AA Unknown Unknown Unknown; dmrcc 0000000000400DF2 Unknown Unknown Unknown; dmrcc 00000000013571F9 Unknown Unknown Unknown; dmrcc 0000000000400CCA Unknown Unknown Unknown; Traceback (most recent call last):; File ""/home/gytibor/psi4/objdir/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 27, in <module>; File ""/home/gytibor/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 599, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/gytibor/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 4732, in run_mrcc; for line in open('iface'):. FileNotFoundError: [Errno 2] No such file or directory: 'iface'. Printing out the relevant lines from the Psithon --> Python processed input file:; h 1 1.0 2 104.5; """""",""h2o""); core.IO.set_default_namespace(""h2o""); core.set_global_option(""BASIS"", ""cc-pvdz""); core.set_global_option(""FREEZE_CORE"", ""true""); --> energy('mrccsdt'); compare_values( 8.801465529972, variable(""NUCLEAR REPULSION ENERGY""), 6, 'NRE'); compare_values(-76.021418445155, variable(""SCF TOTAL ENERGY""), 6, 'SCF'); compare_values( -0.204692406830, variable(""MP2 CORRELATION ENERGY"") , 6, 'MP2 correlation'); compare_values( -0.217715210258, variable(""CCSDT CORRELATION ENERGY""), 6, 'CCSDT correlation'); compare_values(-76.239133655413, variable(""CURRENT ENERGY""), 6, 'CCSDT'). !-----------------------------------------------!; ! !; ! [Errno 2] No such file or directory: 'iface' !; ! !; !-----------------------------------------------!; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2497
https://github.com/psi4/psi4/issues/2497:2303,Modifiability,variab,variable,2303," #499: mrcc-ccsdt .......................***Failed 0.62 sec; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /tmp/mrcc_67625/KEYWD; Image PC Routine Line Source; dmrcc 0000000001284F08 Unknown Unknown Unknown; dmrcc 00000000012A12A2 Unknown Unknown Unknown; dmrcc 00000000004AE4BD Unknown Unknown Unknown; dmrcc 0000000000507E55 Unknown Unknown Unknown; dmrcc 000000000040D9DD Unknown Unknown Unknown; dmrcc 00000000004021AA Unknown Unknown Unknown; dmrcc 0000000000400DF2 Unknown Unknown Unknown; dmrcc 00000000013571F9 Unknown Unknown Unknown; dmrcc 0000000000400CCA Unknown Unknown Unknown; Traceback (most recent call last):; File ""/home/gytibor/psi4/objdir/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 27, in <module>; File ""/home/gytibor/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 599, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/gytibor/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 4732, in run_mrcc; for line in open('iface'):. FileNotFoundError: [Errno 2] No such file or directory: 'iface'. Printing out the relevant lines from the Psithon --> Python processed input file:; h 1 1.0 2 104.5; """""",""h2o""); core.IO.set_default_namespace(""h2o""); core.set_global_option(""BASIS"", ""cc-pvdz""); core.set_global_option(""FREEZE_CORE"", ""true""); --> energy('mrccsdt'); compare_values( 8.801465529972, variable(""NUCLEAR REPULSION ENERGY""), 6, 'NRE'); compare_values(-76.021418445155, variable(""SCF TOTAL ENERGY""), 6, 'SCF'); compare_values( -0.204692406830, variable(""MP2 CORRELATION ENERGY"") , 6, 'MP2 correlation'); compare_values( -0.217715210258, variable(""CCSDT CORRELATION ENERGY""), 6, 'CCSDT correlation'); compare_values(-76.239133655413, variable(""CURRENT ENERGY""), 6, 'CCSDT'). !-----------------------------------------------!; ! !; ! [Errno 2] No such file or directory: 'iface' !; ! !; !-----------------------------------------------!; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2497
https://github.com/psi4/psi4/issues/2497:331,Testability,Test,Test,331,"MRCC-related CTests pass with an older version (2019 with some unknown patches) of MRCC, but the 2022 release broke the interface (again?).; For what its worth, it also no longer works with Molpro 2015. ```; (p4dev) gytibor@CRD-MILAN-3:~/psi4/objdir$ ctest -L mrcc -j`getconf _NPROCESSORS_ONLN` --rerun-failed --output-on-failure; Test project /home/gytibor/psi4/objdir; Start 499: mrcc-ccsdt; Start 500: mrcc-ccsd_t_; Start 501: mrcc-ccsdt_q_; Start 502: mrcc-rohf_ccsdt_q_; Start 503: mrcc-optfreq; 1/5 Test #499: mrcc-ccsdt .......................***Failed 0.62 sec; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /tmp/mrcc_67625/KEYWD; Image PC Routine Line Source; dmrcc 0000000001284F08 Unknown Unknown Unknown; dmrcc 00000000012A12A2 Unknown Unknown Unknown; dmrcc 00000000004AE4BD Unknown Unknown Unknown; dmrcc 0000000000507E55 Unknown Unknown Unknown; dmrcc 000000000040D9DD Unknown Unknown Unknown; dmrcc 00000000004021AA Unknown Unknown Unknown; dmrcc 0000000000400DF2 Unknown Unknown Unknown; dmrcc 00000000013571F9 Unknown Unknown Unknown; dmrcc 0000000000400CCA Unknown Unknown Unknown; Traceback (most recent call last):; File ""/home/gytibor/psi4/objdir/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 27, in <module>; File ""/home/gytibor/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 599, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/gytibor/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 4732, in run_mrcc; for line in open('iface'):. FileNotFoundError: [Errno 2] No such file or directory: 'iface'. Printing out the relevant lines from the Psithon --> Python processed input file:; h 1 1.0 2 104.5; """""",""h2o""); core.IO.set_default_namespace(""h2o""); core.set_global_option(""BASIS"", ""cc-pvdz""); core.set_global_option(""FREEZE_CORE"", ""true""); --> energy('mrccsdt'); compare_values( 8.801465529972, variable(""NUCLEAR REPULSION ENERGY""), 6, 'N",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2497
https://github.com/psi4/psi4/issues/2497:505,Testability,Test,Test,505,"MRCC-related CTests pass with an older version (2019 with some unknown patches) of MRCC, but the 2022 release broke the interface (again?).; For what its worth, it also no longer works with Molpro 2015. ```; (p4dev) gytibor@CRD-MILAN-3:~/psi4/objdir$ ctest -L mrcc -j`getconf _NPROCESSORS_ONLN` --rerun-failed --output-on-failure; Test project /home/gytibor/psi4/objdir; Start 499: mrcc-ccsdt; Start 500: mrcc-ccsd_t_; Start 501: mrcc-ccsdt_q_; Start 502: mrcc-rohf_ccsdt_q_; Start 503: mrcc-optfreq; 1/5 Test #499: mrcc-ccsdt .......................***Failed 0.62 sec; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /tmp/mrcc_67625/KEYWD; Image PC Routine Line Source; dmrcc 0000000001284F08 Unknown Unknown Unknown; dmrcc 00000000012A12A2 Unknown Unknown Unknown; dmrcc 00000000004AE4BD Unknown Unknown Unknown; dmrcc 0000000000507E55 Unknown Unknown Unknown; dmrcc 000000000040D9DD Unknown Unknown Unknown; dmrcc 00000000004021AA Unknown Unknown Unknown; dmrcc 0000000000400DF2 Unknown Unknown Unknown; dmrcc 00000000013571F9 Unknown Unknown Unknown; dmrcc 0000000000400CCA Unknown Unknown Unknown; Traceback (most recent call last):; File ""/home/gytibor/psi4/objdir/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 27, in <module>; File ""/home/gytibor/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 599, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/gytibor/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 4732, in run_mrcc; for line in open('iface'):. FileNotFoundError: [Errno 2] No such file or directory: 'iface'. Printing out the relevant lines from the Psithon --> Python processed input file:; h 1 1.0 2 104.5; """""",""h2o""); core.IO.set_default_namespace(""h2o""); core.set_global_option(""BASIS"", ""cc-pvdz""); core.set_global_option(""FREEZE_CORE"", ""true""); --> energy('mrccsdt'); compare_values( 8.801465529972, variable(""NUCLEAR REPULSION ENERGY""), 6, 'N",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2497
https://github.com/psi4/psi4/issues/2498:35,Usability,simpl,simplify,35,"Per discussion in #2496, one could simplify the libmints code for multipole integrals to all use the arbitrary-order code.; The strategy would be to somehow hard-wire `MultipoleInt` into these specialized integral classes and only return the requested multipole components. I'll take this on after the M-D transition (#2414).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2498
https://github.com/psi4/psi4/pull/2504:584,Deployability,Release,Release,584,"## Description; This is the third PR of the McMurchie-Davidson series, now tackling `MultipolePotentialInt` (used for PE/EFP). ~I'm not happy with the performance yet, so I'll do some profiling to see what could be improved.~. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] arbitrary-order multipole potential integrals; - [x] tests (generalized existing tests); - [x] more equation numbers; - [x] addresses #2499, as discussed in #2496 ; - [x] adapt for Intel compilers (remove structured bindings, etc.). ## Blurb for the Release Notes; - [x] Added the ability to compute integral representations of the derivative of the Coulomb operator (potential, field, field gradient, _etc._), with arbitrary derivative order; the previous Obara-Saika based code was limited to third order derivatives. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for **SQUASH**-merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2504
https://github.com/psi4/psi4/pull/2504:505,Energy Efficiency,adapt,adapt,505,"## Description; This is the third PR of the McMurchie-Davidson series, now tackling `MultipolePotentialInt` (used for PE/EFP). ~I'm not happy with the performance yet, so I'll do some profiling to see what could be improved.~. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] arbitrary-order multipole potential integrals; - [x] tests (generalized existing tests); - [x] more equation numbers; - [x] addresses #2499, as discussed in #2496 ; - [x] adapt for Intel compilers (remove structured bindings, etc.). ## Blurb for the Release Notes; - [x] Added the ability to compute integral representations of the derivative of the Coulomb operator (potential, field, field gradient, _etc._), with arbitrary derivative order; the previous Obara-Saika based code was limited to third order derivatives. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for **SQUASH**-merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2504
https://github.com/psi4/psi4/pull/2504:505,Modifiability,adapt,adapt,505,"## Description; This is the third PR of the McMurchie-Davidson series, now tackling `MultipolePotentialInt` (used for PE/EFP). ~I'm not happy with the performance yet, so I'll do some profiling to see what could be improved.~. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] arbitrary-order multipole potential integrals; - [x] tests (generalized existing tests); - [x] more equation numbers; - [x] addresses #2499, as discussed in #2496 ; - [x] adapt for Intel compilers (remove structured bindings, etc.). ## Blurb for the Release Notes; - [x] Added the ability to compute integral representations of the derivative of the Coulomb operator (potential, field, field gradient, _etc._), with arbitrary derivative order; the previous Obara-Saika based code was limited to third order derivatives. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for **SQUASH**-merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2504
https://github.com/psi4/psi4/pull/2504:151,Performance,perform,performance,151,"## Description; This is the third PR of the McMurchie-Davidson series, now tackling `MultipolePotentialInt` (used for PE/EFP). ~I'm not happy with the performance yet, so I'll do some profiling to see what could be improved.~. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] arbitrary-order multipole potential integrals; - [x] tests (generalized existing tests); - [x] more equation numbers; - [x] addresses #2499, as discussed in #2496 ; - [x] adapt for Intel compilers (remove structured bindings, etc.). ## Blurb for the Release Notes; - [x] Added the ability to compute integral representations of the derivative of the Coulomb operator (potential, field, field gradient, _etc._), with arbitrary derivative order; the previous Obara-Saika based code was limited to third order derivatives. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for **SQUASH**-merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2504
https://github.com/psi4/psi4/pull/2504:387,Testability,test,tests,387,"## Description; This is the third PR of the McMurchie-Davidson series, now tackling `MultipolePotentialInt` (used for PE/EFP). ~I'm not happy with the performance yet, so I'll do some profiling to see what could be improved.~. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] arbitrary-order multipole potential integrals; - [x] tests (generalized existing tests); - [x] more equation numbers; - [x] addresses #2499, as discussed in #2496 ; - [x] adapt for Intel compilers (remove structured bindings, etc.). ## Blurb for the Release Notes; - [x] Added the ability to compute integral representations of the derivative of the Coulomb operator (potential, field, field gradient, _etc._), with arbitrary derivative order; the previous Obara-Saika based code was limited to third order derivatives. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for **SQUASH**-merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2504
https://github.com/psi4/psi4/pull/2504:415,Testability,test,tests,415,"## Description; This is the third PR of the McMurchie-Davidson series, now tackling `MultipolePotentialInt` (used for PE/EFP). ~I'm not happy with the performance yet, so I'll do some profiling to see what could be improved.~. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] arbitrary-order multipole potential integrals; - [x] tests (generalized existing tests); - [x] more equation numbers; - [x] addresses #2499, as discussed in #2496 ; - [x] adapt for Intel compilers (remove structured bindings, etc.). ## Blurb for the Release Notes; - [x] Added the ability to compute integral representations of the derivative of the Coulomb operator (potential, field, field gradient, _etc._), with arbitrary derivative order; the previous Obara-Saika based code was limited to third order derivatives. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for **SQUASH**-merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2504
https://github.com/psi4/psi4/pull/2504:874,Testability,Test,Tests,874,"## Description; This is the third PR of the McMurchie-Davidson series, now tackling `MultipolePotentialInt` (used for PE/EFP). ~I'm not happy with the performance yet, so I'll do some profiling to see what could be improved.~. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] arbitrary-order multipole potential integrals; - [x] tests (generalized existing tests); - [x] more equation numbers; - [x] addresses #2499, as discussed in #2496 ; - [x] adapt for Intel compilers (remove structured bindings, etc.). ## Blurb for the Release Notes; - [x] Added the ability to compute integral representations of the derivative of the Coulomb operator (potential, field, field gradient, _etc._), with arbitrary derivative order; the previous Obara-Saika based code was limited to third order derivatives. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for **SQUASH**-merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2504
https://github.com/psi4/psi4/pull/2504:948,Testability,test,tests,948,"## Description; This is the third PR of the McMurchie-Davidson series, now tackling `MultipolePotentialInt` (used for PE/EFP). ~I'm not happy with the performance yet, so I'll do some profiling to see what could be improved.~. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] arbitrary-order multipole potential integrals; - [x] tests (generalized existing tests); - [x] more equation numbers; - [x] addresses #2499, as discussed in #2496 ; - [x] adapt for Intel compilers (remove structured bindings, etc.). ## Blurb for the Release Notes; - [x] Added the ability to compute integral representations of the derivative of the Coulomb operator (potential, field, field gradient, _etc._), with arbitrary derivative order; the previous Obara-Saika based code was limited to third order derivatives. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for **SQUASH**-merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2504
https://github.com/psi4/psi4/pull/2504:1039,Testability,test,tests,1039,"## Description; This is the third PR of the McMurchie-Davidson series, now tackling `MultipolePotentialInt` (used for PE/EFP). ~I'm not happy with the performance yet, so I'll do some profiling to see what could be improved.~. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] arbitrary-order multipole potential integrals; - [x] tests (generalized existing tests); - [x] more equation numbers; - [x] addresses #2499, as discussed in #2496 ; - [x] adapt for Intel compilers (remove structured bindings, etc.). ## Blurb for the Release Notes; - [x] Added the ability to compute integral representations of the derivative of the Coulomb operator (potential, field, field gradient, _etc._), with arbitrary derivative order; the previous Obara-Saika based code was limited to third order derivatives. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for **SQUASH**-merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2504
https://github.com/psi4/psi4/pull/2505:354,Deployability,update,update,354,"## Description; This PR makes changes so that `Psi` can do DIIS on an `ambit.BlockedTensor`, as required by the `forte` plugin. This PR will not work until [this ambit PR](https://github.com/jturney/ambit/pull/53) is merged, but passes locally. The test suite tells us little about this one, sadly. @loriab, I leave it up to you whether this warrants an update to the version of ambit that Psi takes. @fevangelista @lcyyork. ## Status; - [x] Ready for review; - [ ] Leave merging to me",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2505
https://github.com/psi4/psi4/pull/2505:120,Modifiability,plugin,plugin,120,"## Description; This PR makes changes so that `Psi` can do DIIS on an `ambit.BlockedTensor`, as required by the `forte` plugin. This PR will not work until [this ambit PR](https://github.com/jturney/ambit/pull/53) is merged, but passes locally. The test suite tells us little about this one, sadly. @loriab, I leave it up to you whether this warrants an update to the version of ambit that Psi takes. @fevangelista @lcyyork. ## Status; - [x] Ready for review; - [ ] Leave merging to me",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2505
https://github.com/psi4/psi4/pull/2505:249,Testability,test,test,249,"## Description; This PR makes changes so that `Psi` can do DIIS on an `ambit.BlockedTensor`, as required by the `forte` plugin. This PR will not work until [this ambit PR](https://github.com/jturney/ambit/pull/53) is merged, but passes locally. The test suite tells us little about this one, sadly. @loriab, I leave it up to you whether this warrants an update to the version of ambit that Psi takes. @fevangelista @lcyyork. ## Status; - [x] Ready for review; - [ ] Leave merging to me",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2505
https://github.com/psi4/psi4/pull/2506:89,Security,access,access,89,"## Description; Ticks off an item on #2486 and #2477 by allowing ""TD-DFT"" to be a way to access TD-DFT psivars. As far as I'm aware, TD-DFT psivars are now as we want them. ## Checklist; - [x] `tdscf` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2506
https://github.com/psi4/psi4/pull/2506:201,Testability,test,tests,201,"## Description; Ticks off an item on #2486 and #2477 by allowing ""TD-DFT"" to be a way to access TD-DFT psivars. As far as I'm aware, TD-DFT psivars are now as we want them. ## Checklist; - [x] `tdscf` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2506
https://github.com/psi4/psi4/pull/2507:152,Testability,test,tests,152,## Description; Exactly what it says in the title. This is a preliminary PR before I make some other `OEProp` changes. ## Checklist; - [x] `properties` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2507
https://github.com/psi4/psi4/pull/2508:36,Testability,test,tests,36,"## Description; As of this PR, `cc` tests 1-33, 35-45, 52 are ported. Several tests have been deferred until after #2486. **This test is not marked ready for merge because I'm not happy with one of the psivar definitions: opinions wanted.**. We have ""CCSD QUADRUPOLE POLARIZABILITY TENSOR COMPONENT 0 @ 589NM"", ""CCSD QUADRUPOLE POLARIZABILITY TENSOR COMPONENT 1 @ 589NM"", and ""CCSD QUADRUPOLE POLARIZABILITY TENSOR COMPONENT 2 @ 589NM"". I _imagine_ we can combine these into a single array of dimension 3 x 3 x 3, just like we do with the octopole. Thoughts, @loriab @lothian?. ## Checklist; - [x] `cc52` ported off autotests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2508
https://github.com/psi4/psi4/pull/2508:78,Testability,test,tests,78,"## Description; As of this PR, `cc` tests 1-33, 35-45, 52 are ported. Several tests have been deferred until after #2486. **This test is not marked ready for merge because I'm not happy with one of the psivar definitions: opinions wanted.**. We have ""CCSD QUADRUPOLE POLARIZABILITY TENSOR COMPONENT 0 @ 589NM"", ""CCSD QUADRUPOLE POLARIZABILITY TENSOR COMPONENT 1 @ 589NM"", and ""CCSD QUADRUPOLE POLARIZABILITY TENSOR COMPONENT 2 @ 589NM"". I _imagine_ we can combine these into a single array of dimension 3 x 3 x 3, just like we do with the octopole. Thoughts, @loriab @lothian?. ## Checklist; - [x] `cc52` ported off autotests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2508
https://github.com/psi4/psi4/pull/2508:129,Testability,test,test,129,"## Description; As of this PR, `cc` tests 1-33, 35-45, 52 are ported. Several tests have been deferred until after #2486. **This test is not marked ready for merge because I'm not happy with one of the psivar definitions: opinions wanted.**. We have ""CCSD QUADRUPOLE POLARIZABILITY TENSOR COMPONENT 0 @ 589NM"", ""CCSD QUADRUPOLE POLARIZABILITY TENSOR COMPONENT 1 @ 589NM"", and ""CCSD QUADRUPOLE POLARIZABILITY TENSOR COMPONENT 2 @ 589NM"". I _imagine_ we can combine these into a single array of dimension 3 x 3 x 3, just like we do with the octopole. Thoughts, @loriab @lothian?. ## Checklist; - [x] `cc52` ported off autotests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2508
https://github.com/psi4/psi4/pull/2509:382,Testability,Test,Tests,382,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Adds a missing doi in a source tree README file, also standardizes the use of doi syntax (it is doi:foo not DOI foo). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2509
https://github.com/psi4/psi4/pull/2509:456,Testability,test,tests,456,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Adds a missing doi in a source tree README file, also standardizes the use of doi syntax (it is doi:foo not DOI foo). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2509
https://github.com/psi4/psi4/pull/2509:547,Testability,test,tests,547,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Adds a missing doi in a source tree README file, also standardizes the use of doi syntax (it is doi:foo not DOI foo). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2509
https://github.com/psi4/psi4/issues/2510:350,Availability,error,error,350,"I am attempting run a frequency calculation with Psi4 (version 1.5) and Python 3.7.10. All other calculations (optimization, single point energy, etc.) work well. However, when I attempt to run a frequency calculation with the command `psi4.frequency(""B3LYP/cc-pVDZ"", molecule=molecule_xyz, return_wfn=True, dertype='gradient')`, I get the following error. From [what I've seen on Stack Overflow](https://stackoverflow.com/questions/69564817/typeerror-load-missing-1-required-positional-argument-loader-in-google-col), this may be an issue with psi4 compatibility. How can I navigate this issue? . ```; ---------------------------------------------------------------------------; TypeError Traceback (most recent call last); [<ipython-input-13-13c5f85efa27>](https://localhost:8080/#) in <module>(); 4 ; 5 psi4.set_output_file(F'{molecule_name}_frequency_analysis.dat', False); ----> 6 psi4.frequency(""B3LYP/cc-pVDZ"", molecule=molecule_xyz, return_wfn=True, dertype='gradient'); 7 correction_g = parse_free_energy(F'{molecule_name}_frequency_analysis.dat'); 8 print(""Correction G: "", correction_g). 21 frames; [/usr/local/lib/python3.7/site-packages/psi4/driver/driver.py](https://localhost:8080/#) in frequency(name, **kwargs); 1772 ; 1773 # Compute the hessian; -> 1774 H, wfn = hessian(name, return_wfn=True, molecule=molecule, **kwargs); 1775 ; 1776 # Project final frequencies?. [/usr/local/lib/python3.7/site-packages/psi4/driver/driver.py](https://localhost:8080/#) in hessian(name, **kwargs); 1493 # Check if this is a CBS extrapolation; 1494 elif gradient_type == ""cbs_gufunc"":; -> 1495 return driver_cbs._cbs_gufunc(hessian, name.lower(), **kwargs, ptype=""hessian""); 1496 elif gradient_type == ""cbs_wrapper"":; 1497 return driver_cbs.cbs(hessian, ""cbs"", **kwargs, ptype=""hessian""). [/usr/local/lib/python3.7/site-packages/psi4/driver/driver_cbs.py](https://localhost:8080/#) in _cbs_gufunc(func, total_method_name, **kwargs); 1963 optstash = p4util.OptionsState(['BASIS']); 1964 core.set_glob",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2510
https://github.com/psi4/psi4/issues/2510:4254,Availability,error,errors,4254,"://localhost:8080/#) in to_schema(self, dtype, units); 1542 ; 1543 molrec = self.to_dict(np_out=True); -> 1544 schmol = qcel.molparse.to_schema(molrec, dtype=dtype, units=units); 1545 return schmol; 1546 . [/usr/local/lib/python3.7/site-packages/qcelemental/molparse/to_schema.py](https://localhost:8080/#) in to_schema(molrec, dtype, units, np_out, copy); 47 geom = geom * molrec[""input_units_to_au""]; 48 else:; ---> 49 geom = geom * constants.conversion_factor(molrec[""units""], units); 50 ; 51 nat = geom.shape[0] // 3. [/usr/local/lib/python3.7/site-packages/qcelemental/physical_constants/context.py](https://localhost:8080/#) in conversion_factor(self, base_unit, conv_unit); 310 # Add a little magic in case the incoming values have scalars; 311 ; --> 312 from pint import quantity; 313 ; 314 factor = 1.0. [/usr/local/lib/python3.7/site-packages/pint/__init__.py](https://localhost:8080/#) in <module>(); 12 """"""; 13 ; ---> 14 from .context import Context; 15 from .errors import ( # noqa: F401; 16 DefinitionSyntaxError,. [/usr/local/lib/python3.7/site-packages/pint/context.py](https://localhost:8080/#) in <module>(); 13 from collections import ChainMap, defaultdict; 14 ; ---> 15 from .definitions import Definition, UnitDefinition; 16 from .errors import DefinitionSyntaxError; 17 from .util import ParserHelper, SourceIterator, to_units_container. [/usr/local/lib/python3.7/site-packages/pint/definitions.py](https://localhost:8080/#) in <module>(); 11 from collections import namedtuple; 12 ; ---> 13 from .converters import LogarithmicConverter, OffsetConverter, ScaleConverter; 14 from .errors import DefinitionSyntaxError; 15 from .util import ParserHelper, UnitsContainer, _is_dim. [/usr/local/lib/python3.7/site-packages/pint/converters.py](https://localhost:8080/#) in <module>(); 10 ; 11 ; ---> 12 from .compat import HAS_NUMPY, exp, log # noqa: F401; 13 ; 14 . [/usr/local/lib/python3.7/site-packages/pint/compat.py](https://localhost:8080/#) in <module>(); 161 # xarray (DataArr",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2510
https://github.com/psi4/psi4/issues/2510:4534,Availability,error,errors,4534,"a.py](https://localhost:8080/#) in to_schema(molrec, dtype, units, np_out, copy); 47 geom = geom * molrec[""input_units_to_au""]; 48 else:; ---> 49 geom = geom * constants.conversion_factor(molrec[""units""], units); 50 ; 51 nat = geom.shape[0] // 3. [/usr/local/lib/python3.7/site-packages/qcelemental/physical_constants/context.py](https://localhost:8080/#) in conversion_factor(self, base_unit, conv_unit); 310 # Add a little magic in case the incoming values have scalars; 311 ; --> 312 from pint import quantity; 313 ; 314 factor = 1.0. [/usr/local/lib/python3.7/site-packages/pint/__init__.py](https://localhost:8080/#) in <module>(); 12 """"""; 13 ; ---> 14 from .context import Context; 15 from .errors import ( # noqa: F401; 16 DefinitionSyntaxError,. [/usr/local/lib/python3.7/site-packages/pint/context.py](https://localhost:8080/#) in <module>(); 13 from collections import ChainMap, defaultdict; 14 ; ---> 15 from .definitions import Definition, UnitDefinition; 16 from .errors import DefinitionSyntaxError; 17 from .util import ParserHelper, SourceIterator, to_units_container. [/usr/local/lib/python3.7/site-packages/pint/definitions.py](https://localhost:8080/#) in <module>(); 11 from collections import namedtuple; 12 ; ---> 13 from .converters import LogarithmicConverter, OffsetConverter, ScaleConverter; 14 from .errors import DefinitionSyntaxError; 15 from .util import ParserHelper, UnitsContainer, _is_dim. [/usr/local/lib/python3.7/site-packages/pint/converters.py](https://localhost:8080/#) in <module>(); 10 ; 11 ; ---> 12 from .compat import HAS_NUMPY, exp, log # noqa: F401; 13 ; 14 . [/usr/local/lib/python3.7/site-packages/pint/compat.py](https://localhost:8080/#) in <module>(); 161 # xarray (DataArray, Dataset, Variable); 162 try:; --> 163 from xarray import DataArray, Dataset, Variable; 164 ; 165 upcast_types += [DataArray, Dataset, Variable]. [/usr/local/lib/python3.7/dist-packages/xarray/__init__.py](https://localhost:8080/#) in <module>(); 1 import pkg_resources; 2",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2510
https://github.com/psi4/psi4/issues/2510:4884,Availability,error,errors,4884,"80/#) in conversion_factor(self, base_unit, conv_unit); 310 # Add a little magic in case the incoming values have scalars; 311 ; --> 312 from pint import quantity; 313 ; 314 factor = 1.0. [/usr/local/lib/python3.7/site-packages/pint/__init__.py](https://localhost:8080/#) in <module>(); 12 """"""; 13 ; ---> 14 from .context import Context; 15 from .errors import ( # noqa: F401; 16 DefinitionSyntaxError,. [/usr/local/lib/python3.7/site-packages/pint/context.py](https://localhost:8080/#) in <module>(); 13 from collections import ChainMap, defaultdict; 14 ; ---> 15 from .definitions import Definition, UnitDefinition; 16 from .errors import DefinitionSyntaxError; 17 from .util import ParserHelper, SourceIterator, to_units_container. [/usr/local/lib/python3.7/site-packages/pint/definitions.py](https://localhost:8080/#) in <module>(); 11 from collections import namedtuple; 12 ; ---> 13 from .converters import LogarithmicConverter, OffsetConverter, ScaleConverter; 14 from .errors import DefinitionSyntaxError; 15 from .util import ParserHelper, UnitsContainer, _is_dim. [/usr/local/lib/python3.7/site-packages/pint/converters.py](https://localhost:8080/#) in <module>(); 10 ; 11 ; ---> 12 from .compat import HAS_NUMPY, exp, log # noqa: F401; 13 ; 14 . [/usr/local/lib/python3.7/site-packages/pint/compat.py](https://localhost:8080/#) in <module>(); 161 # xarray (DataArray, Dataset, Variable); 162 try:; --> 163 from xarray import DataArray, Dataset, Variable; 164 ; 165 upcast_types += [DataArray, Dataset, Variable]. [/usr/local/lib/python3.7/dist-packages/xarray/__init__.py](https://localhost:8080/#) in <module>(); 1 import pkg_resources; 2 ; ----> 3 from . import testing, tutorial, ufuncs; 4 from .backends.api import (; 5 load_dataarray,. [/usr/local/lib/python3.7/dist-packages/xarray/tutorial.py](https://localhost:8080/#) in <module>(); 11 import numpy as np; 12 ; ---> 13 from .backends.api import open_dataset as _open_dataset; 14 from .backends.rasterio_ import open_rasterio as _o",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2510
https://github.com/psi4/psi4/issues/2510:138,Energy Efficiency,energy,energy,138,"I am attempting run a frequency calculation with Psi4 (version 1.5) and Python 3.7.10. All other calculations (optimization, single point energy, etc.) work well. However, when I attempt to run a frequency calculation with the command `psi4.frequency(""B3LYP/cc-pVDZ"", molecule=molecule_xyz, return_wfn=True, dertype='gradient')`, I get the following error. From [what I've seen on Stack Overflow](https://stackoverflow.com/questions/69564817/typeerror-load-missing-1-required-positional-argument-loader-in-google-col), this may be an issue with psi4 compatibility. How can I navigate this issue? . ```; ---------------------------------------------------------------------------; TypeError Traceback (most recent call last); [<ipython-input-13-13c5f85efa27>](https://localhost:8080/#) in <module>(); 4 ; 5 psi4.set_output_file(F'{molecule_name}_frequency_analysis.dat', False); ----> 6 psi4.frequency(""B3LYP/cc-pVDZ"", molecule=molecule_xyz, return_wfn=True, dertype='gradient'); 7 correction_g = parse_free_energy(F'{molecule_name}_frequency_analysis.dat'); 8 print(""Correction G: "", correction_g). 21 frames; [/usr/local/lib/python3.7/site-packages/psi4/driver/driver.py](https://localhost:8080/#) in frequency(name, **kwargs); 1772 ; 1773 # Compute the hessian; -> 1774 H, wfn = hessian(name, return_wfn=True, molecule=molecule, **kwargs); 1775 ; 1776 # Project final frequencies?. [/usr/local/lib/python3.7/site-packages/psi4/driver/driver.py](https://localhost:8080/#) in hessian(name, **kwargs); 1493 # Check if this is a CBS extrapolation; 1494 elif gradient_type == ""cbs_gufunc"":; -> 1495 return driver_cbs._cbs_gufunc(hessian, name.lower(), **kwargs, ptype=""hessian""); 1496 elif gradient_type == ""cbs_wrapper"":; 1497 return driver_cbs.cbs(hessian, ""cbs"", **kwargs, ptype=""hessian""). [/usr/local/lib/python3.7/site-packages/psi4/driver/driver_cbs.py](https://localhost:8080/#) in _cbs_gufunc(func, total_method_name, **kwargs); 1963 optstash = p4util.OptionsState(['BASIS']); 1964 core.set_glob",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2510
https://github.com/psi4/psi4/issues/2510:5295,Modifiability,Variab,Variable,5295,"lib/python3.7/site-packages/pint/context.py](https://localhost:8080/#) in <module>(); 13 from collections import ChainMap, defaultdict; 14 ; ---> 15 from .definitions import Definition, UnitDefinition; 16 from .errors import DefinitionSyntaxError; 17 from .util import ParserHelper, SourceIterator, to_units_container. [/usr/local/lib/python3.7/site-packages/pint/definitions.py](https://localhost:8080/#) in <module>(); 11 from collections import namedtuple; 12 ; ---> 13 from .converters import LogarithmicConverter, OffsetConverter, ScaleConverter; 14 from .errors import DefinitionSyntaxError; 15 from .util import ParserHelper, UnitsContainer, _is_dim. [/usr/local/lib/python3.7/site-packages/pint/converters.py](https://localhost:8080/#) in <module>(); 10 ; 11 ; ---> 12 from .compat import HAS_NUMPY, exp, log # noqa: F401; 13 ; 14 . [/usr/local/lib/python3.7/site-packages/pint/compat.py](https://localhost:8080/#) in <module>(); 161 # xarray (DataArray, Dataset, Variable); 162 try:; --> 163 from xarray import DataArray, Dataset, Variable; 164 ; 165 upcast_types += [DataArray, Dataset, Variable]. [/usr/local/lib/python3.7/dist-packages/xarray/__init__.py](https://localhost:8080/#) in <module>(); 1 import pkg_resources; 2 ; ----> 3 from . import testing, tutorial, ufuncs; 4 from .backends.api import (; 5 load_dataarray,. [/usr/local/lib/python3.7/dist-packages/xarray/tutorial.py](https://localhost:8080/#) in <module>(); 11 import numpy as np; 12 ; ---> 13 from .backends.api import open_dataset as _open_dataset; 14 from .backends.rasterio_ import open_rasterio as _open_rasterio; 15 from .core.dataarray import DataArray. [/usr/local/lib/python3.7/dist-packages/xarray/backends/__init__.py](https://localhost:8080/#) in <module>(); 4 formats. They should not be used directly, but rather through Dataset objects.; 5 """"""; ----> 6 from .cfgrib_ import CfGribDataStore; 7 from .common import AbstractDataStore, BackendArray, BackendEntrypoint; 8 from .file_manager import CachingFileMa",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2510
https://github.com/psi4/psi4/issues/2510:5363,Modifiability,Variab,Variable,5363,"lib/python3.7/site-packages/pint/context.py](https://localhost:8080/#) in <module>(); 13 from collections import ChainMap, defaultdict; 14 ; ---> 15 from .definitions import Definition, UnitDefinition; 16 from .errors import DefinitionSyntaxError; 17 from .util import ParserHelper, SourceIterator, to_units_container. [/usr/local/lib/python3.7/site-packages/pint/definitions.py](https://localhost:8080/#) in <module>(); 11 from collections import namedtuple; 12 ; ---> 13 from .converters import LogarithmicConverter, OffsetConverter, ScaleConverter; 14 from .errors import DefinitionSyntaxError; 15 from .util import ParserHelper, UnitsContainer, _is_dim. [/usr/local/lib/python3.7/site-packages/pint/converters.py](https://localhost:8080/#) in <module>(); 10 ; 11 ; ---> 12 from .compat import HAS_NUMPY, exp, log # noqa: F401; 13 ; 14 . [/usr/local/lib/python3.7/site-packages/pint/compat.py](https://localhost:8080/#) in <module>(); 161 # xarray (DataArray, Dataset, Variable); 162 try:; --> 163 from xarray import DataArray, Dataset, Variable; 164 ; 165 upcast_types += [DataArray, Dataset, Variable]. [/usr/local/lib/python3.7/dist-packages/xarray/__init__.py](https://localhost:8080/#) in <module>(); 1 import pkg_resources; 2 ; ----> 3 from . import testing, tutorial, ufuncs; 4 from .backends.api import (; 5 load_dataarray,. [/usr/local/lib/python3.7/dist-packages/xarray/tutorial.py](https://localhost:8080/#) in <module>(); 11 import numpy as np; 12 ; ---> 13 from .backends.api import open_dataset as _open_dataset; 14 from .backends.rasterio_ import open_rasterio as _open_rasterio; 15 from .core.dataarray import DataArray. [/usr/local/lib/python3.7/dist-packages/xarray/backends/__init__.py](https://localhost:8080/#) in <module>(); 4 formats. They should not be used directly, but rather through Dataset objects.; 5 """"""; ----> 6 from .cfgrib_ import CfGribDataStore; 7 from .common import AbstractDataStore, BackendArray, BackendEntrypoint; 8 from .file_manager import CachingFileMa",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2510
https://github.com/psi4/psi4/issues/2510:5420,Modifiability,Variab,Variable,5420,"lib/python3.7/site-packages/pint/context.py](https://localhost:8080/#) in <module>(); 13 from collections import ChainMap, defaultdict; 14 ; ---> 15 from .definitions import Definition, UnitDefinition; 16 from .errors import DefinitionSyntaxError; 17 from .util import ParserHelper, SourceIterator, to_units_container. [/usr/local/lib/python3.7/site-packages/pint/definitions.py](https://localhost:8080/#) in <module>(); 11 from collections import namedtuple; 12 ; ---> 13 from .converters import LogarithmicConverter, OffsetConverter, ScaleConverter; 14 from .errors import DefinitionSyntaxError; 15 from .util import ParserHelper, UnitsContainer, _is_dim. [/usr/local/lib/python3.7/site-packages/pint/converters.py](https://localhost:8080/#) in <module>(); 10 ; 11 ; ---> 12 from .compat import HAS_NUMPY, exp, log # noqa: F401; 13 ; 14 . [/usr/local/lib/python3.7/site-packages/pint/compat.py](https://localhost:8080/#) in <module>(); 161 # xarray (DataArray, Dataset, Variable); 162 try:; --> 163 from xarray import DataArray, Dataset, Variable; 164 ; 165 upcast_types += [DataArray, Dataset, Variable]. [/usr/local/lib/python3.7/dist-packages/xarray/__init__.py](https://localhost:8080/#) in <module>(); 1 import pkg_resources; 2 ; ----> 3 from . import testing, tutorial, ufuncs; 4 from .backends.api import (; 5 load_dataarray,. [/usr/local/lib/python3.7/dist-packages/xarray/tutorial.py](https://localhost:8080/#) in <module>(); 11 import numpy as np; 12 ; ---> 13 from .backends.api import open_dataset as _open_dataset; 14 from .backends.rasterio_ import open_rasterio as _open_rasterio; 15 from .core.dataarray import DataArray. [/usr/local/lib/python3.7/dist-packages/xarray/backends/__init__.py](https://localhost:8080/#) in <module>(); 4 formats. They should not be used directly, but rather through Dataset objects.; 5 """"""; ----> 6 from .cfgrib_ import CfGribDataStore; 7 from .common import AbstractDataStore, BackendArray, BackendEntrypoint; 8 from .file_manager import CachingFileMa",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2510
https://github.com/psi4/psi4/issues/2510:7237,Modifiability,config,config,7237,"ncs; 4 from .backends.api import (; 5 load_dataarray,. [/usr/local/lib/python3.7/dist-packages/xarray/tutorial.py](https://localhost:8080/#) in <module>(); 11 import numpy as np; 12 ; ---> 13 from .backends.api import open_dataset as _open_dataset; 14 from .backends.rasterio_ import open_rasterio as _open_rasterio; 15 from .core.dataarray import DataArray. [/usr/local/lib/python3.7/dist-packages/xarray/backends/__init__.py](https://localhost:8080/#) in <module>(); 4 formats. They should not be used directly, but rather through Dataset objects.; 5 """"""; ----> 6 from .cfgrib_ import CfGribDataStore; 7 from .common import AbstractDataStore, BackendArray, BackendEntrypoint; 8 from .file_manager import CachingFileManager, DummyFileManager, FileManager. [/usr/local/lib/python3.7/dist-packages/xarray/backends/cfgrib_.py](https://localhost:8080/#) in <module>(); 14 _normalize_path,; 15 ); ---> 16 from .locks import SerializableLock, ensure_lock; 17 from .store import StoreBackendEntrypoint; 18 . [/usr/local/lib/python3.7/dist-packages/xarray/backends/locks.py](https://localhost:8080/#) in <module>(); 11 ; 12 try:; ---> 13 from dask.distributed import Lock as DistributedLock; 14 except ImportError:; 15 DistributedLock = None. [/usr/local/lib/python3.7/dist-packages/dask/distributed.py](https://localhost:8080/#) in <module>(); 1 # flake8: noqa; 2 try:; ----> 3 from distributed import *; 4 except ImportError:; 5 msg = (. [/usr/local/lib/python3.7/dist-packages/distributed/__init__.py](https://localhost:8080/#) in <module>(); 1 from __future__ import print_function, division, absolute_import; 2 ; ----> 3 from . import config; 4 from dask.config import config; 5 from .actor import Actor, ActorFuture. [/usr/local/lib/python3.7/dist-packages/distributed/config.py](https://localhost:8080/#) in <module>(); 18 ; 19 with open(fn) as f:; ---> 20 defaults = yaml.load(f); 21 ; 22 dask.config.update_defaults(defaults). TypeError: load() missing 1 required positional argument: 'Loader'; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2510
https://github.com/psi4/psi4/issues/2510:7257,Modifiability,config,config,7257,"ncs; 4 from .backends.api import (; 5 load_dataarray,. [/usr/local/lib/python3.7/dist-packages/xarray/tutorial.py](https://localhost:8080/#) in <module>(); 11 import numpy as np; 12 ; ---> 13 from .backends.api import open_dataset as _open_dataset; 14 from .backends.rasterio_ import open_rasterio as _open_rasterio; 15 from .core.dataarray import DataArray. [/usr/local/lib/python3.7/dist-packages/xarray/backends/__init__.py](https://localhost:8080/#) in <module>(); 4 formats. They should not be used directly, but rather through Dataset objects.; 5 """"""; ----> 6 from .cfgrib_ import CfGribDataStore; 7 from .common import AbstractDataStore, BackendArray, BackendEntrypoint; 8 from .file_manager import CachingFileManager, DummyFileManager, FileManager. [/usr/local/lib/python3.7/dist-packages/xarray/backends/cfgrib_.py](https://localhost:8080/#) in <module>(); 14 _normalize_path,; 15 ); ---> 16 from .locks import SerializableLock, ensure_lock; 17 from .store import StoreBackendEntrypoint; 18 . [/usr/local/lib/python3.7/dist-packages/xarray/backends/locks.py](https://localhost:8080/#) in <module>(); 11 ; 12 try:; ---> 13 from dask.distributed import Lock as DistributedLock; 14 except ImportError:; 15 DistributedLock = None. [/usr/local/lib/python3.7/dist-packages/dask/distributed.py](https://localhost:8080/#) in <module>(); 1 # flake8: noqa; 2 try:; ----> 3 from distributed import *; 4 except ImportError:; 5 msg = (. [/usr/local/lib/python3.7/dist-packages/distributed/__init__.py](https://localhost:8080/#) in <module>(); 1 from __future__ import print_function, division, absolute_import; 2 ; ----> 3 from . import config; 4 from dask.config import config; 5 from .actor import Actor, ActorFuture. [/usr/local/lib/python3.7/dist-packages/distributed/config.py](https://localhost:8080/#) in <module>(); 18 ; 19 with open(fn) as f:; ---> 20 defaults = yaml.load(f); 21 ; 22 dask.config.update_defaults(defaults). TypeError: load() missing 1 required positional argument: 'Loader'; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2510
https://github.com/psi4/psi4/issues/2510:7271,Modifiability,config,config,7271,"ncs; 4 from .backends.api import (; 5 load_dataarray,. [/usr/local/lib/python3.7/dist-packages/xarray/tutorial.py](https://localhost:8080/#) in <module>(); 11 import numpy as np; 12 ; ---> 13 from .backends.api import open_dataset as _open_dataset; 14 from .backends.rasterio_ import open_rasterio as _open_rasterio; 15 from .core.dataarray import DataArray. [/usr/local/lib/python3.7/dist-packages/xarray/backends/__init__.py](https://localhost:8080/#) in <module>(); 4 formats. They should not be used directly, but rather through Dataset objects.; 5 """"""; ----> 6 from .cfgrib_ import CfGribDataStore; 7 from .common import AbstractDataStore, BackendArray, BackendEntrypoint; 8 from .file_manager import CachingFileManager, DummyFileManager, FileManager. [/usr/local/lib/python3.7/dist-packages/xarray/backends/cfgrib_.py](https://localhost:8080/#) in <module>(); 14 _normalize_path,; 15 ); ---> 16 from .locks import SerializableLock, ensure_lock; 17 from .store import StoreBackendEntrypoint; 18 . [/usr/local/lib/python3.7/dist-packages/xarray/backends/locks.py](https://localhost:8080/#) in <module>(); 11 ; 12 try:; ---> 13 from dask.distributed import Lock as DistributedLock; 14 except ImportError:; 15 DistributedLock = None. [/usr/local/lib/python3.7/dist-packages/dask/distributed.py](https://localhost:8080/#) in <module>(); 1 # flake8: noqa; 2 try:; ----> 3 from distributed import *; 4 except ImportError:; 5 msg = (. [/usr/local/lib/python3.7/dist-packages/distributed/__init__.py](https://localhost:8080/#) in <module>(); 1 from __future__ import print_function, division, absolute_import; 2 ; ----> 3 from . import config; 4 from dask.config import config; 5 from .actor import Actor, ActorFuture. [/usr/local/lib/python3.7/dist-packages/distributed/config.py](https://localhost:8080/#) in <module>(); 18 ; 19 with open(fn) as f:; ---> 20 defaults = yaml.load(f); 21 ; 22 dask.config.update_defaults(defaults). TypeError: load() missing 1 required positional argument: 'Loader'; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2510
https://github.com/psi4/psi4/issues/2510:7372,Modifiability,config,config,7372,"ncs; 4 from .backends.api import (; 5 load_dataarray,. [/usr/local/lib/python3.7/dist-packages/xarray/tutorial.py](https://localhost:8080/#) in <module>(); 11 import numpy as np; 12 ; ---> 13 from .backends.api import open_dataset as _open_dataset; 14 from .backends.rasterio_ import open_rasterio as _open_rasterio; 15 from .core.dataarray import DataArray. [/usr/local/lib/python3.7/dist-packages/xarray/backends/__init__.py](https://localhost:8080/#) in <module>(); 4 formats. They should not be used directly, but rather through Dataset objects.; 5 """"""; ----> 6 from .cfgrib_ import CfGribDataStore; 7 from .common import AbstractDataStore, BackendArray, BackendEntrypoint; 8 from .file_manager import CachingFileManager, DummyFileManager, FileManager. [/usr/local/lib/python3.7/dist-packages/xarray/backends/cfgrib_.py](https://localhost:8080/#) in <module>(); 14 _normalize_path,; 15 ); ---> 16 from .locks import SerializableLock, ensure_lock; 17 from .store import StoreBackendEntrypoint; 18 . [/usr/local/lib/python3.7/dist-packages/xarray/backends/locks.py](https://localhost:8080/#) in <module>(); 11 ; 12 try:; ---> 13 from dask.distributed import Lock as DistributedLock; 14 except ImportError:; 15 DistributedLock = None. [/usr/local/lib/python3.7/dist-packages/dask/distributed.py](https://localhost:8080/#) in <module>(); 1 # flake8: noqa; 2 try:; ----> 3 from distributed import *; 4 except ImportError:; 5 msg = (. [/usr/local/lib/python3.7/dist-packages/distributed/__init__.py](https://localhost:8080/#) in <module>(); 1 from __future__ import print_function, division, absolute_import; 2 ; ----> 3 from . import config; 4 from dask.config import config; 5 from .actor import Actor, ActorFuture. [/usr/local/lib/python3.7/dist-packages/distributed/config.py](https://localhost:8080/#) in <module>(); 18 ; 19 with open(fn) as f:; ---> 20 defaults = yaml.load(f); 21 ; 22 dask.config.update_defaults(defaults). TypeError: load() missing 1 required positional argument: 'Loader'; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2510
https://github.com/psi4/psi4/issues/2510:7499,Modifiability,config,config,7499,"ncs; 4 from .backends.api import (; 5 load_dataarray,. [/usr/local/lib/python3.7/dist-packages/xarray/tutorial.py](https://localhost:8080/#) in <module>(); 11 import numpy as np; 12 ; ---> 13 from .backends.api import open_dataset as _open_dataset; 14 from .backends.rasterio_ import open_rasterio as _open_rasterio; 15 from .core.dataarray import DataArray. [/usr/local/lib/python3.7/dist-packages/xarray/backends/__init__.py](https://localhost:8080/#) in <module>(); 4 formats. They should not be used directly, but rather through Dataset objects.; 5 """"""; ----> 6 from .cfgrib_ import CfGribDataStore; 7 from .common import AbstractDataStore, BackendArray, BackendEntrypoint; 8 from .file_manager import CachingFileManager, DummyFileManager, FileManager. [/usr/local/lib/python3.7/dist-packages/xarray/backends/cfgrib_.py](https://localhost:8080/#) in <module>(); 14 _normalize_path,; 15 ); ---> 16 from .locks import SerializableLock, ensure_lock; 17 from .store import StoreBackendEntrypoint; 18 . [/usr/local/lib/python3.7/dist-packages/xarray/backends/locks.py](https://localhost:8080/#) in <module>(); 11 ; 12 try:; ---> 13 from dask.distributed import Lock as DistributedLock; 14 except ImportError:; 15 DistributedLock = None. [/usr/local/lib/python3.7/dist-packages/dask/distributed.py](https://localhost:8080/#) in <module>(); 1 # flake8: noqa; 2 try:; ----> 3 from distributed import *; 4 except ImportError:; 5 msg = (. [/usr/local/lib/python3.7/dist-packages/distributed/__init__.py](https://localhost:8080/#) in <module>(); 1 from __future__ import print_function, division, absolute_import; 2 ; ----> 3 from . import config; 4 from dask.config import config; 5 from .actor import Actor, ActorFuture. [/usr/local/lib/python3.7/dist-packages/distributed/config.py](https://localhost:8080/#) in <module>(); 18 ; 19 with open(fn) as f:; ---> 20 defaults = yaml.load(f); 21 ; 22 dask.config.update_defaults(defaults). TypeError: load() missing 1 required positional argument: 'Loader'; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2510
https://github.com/psi4/psi4/issues/2510:111,Performance,optimiz,optimization,111,"I am attempting run a frequency calculation with Psi4 (version 1.5) and Python 3.7.10. All other calculations (optimization, single point energy, etc.) work well. However, when I attempt to run a frequency calculation with the command `psi4.frequency(""B3LYP/cc-pVDZ"", molecule=molecule_xyz, return_wfn=True, dertype='gradient')`, I get the following error. From [what I've seen on Stack Overflow](https://stackoverflow.com/questions/69564817/typeerror-load-missing-1-required-positional-argument-loader-in-google-col), this may be an issue with psi4 compatibility. How can I navigate this issue? . ```; ---------------------------------------------------------------------------; TypeError Traceback (most recent call last); [<ipython-input-13-13c5f85efa27>](https://localhost:8080/#) in <module>(); 4 ; 5 psi4.set_output_file(F'{molecule_name}_frequency_analysis.dat', False); ----> 6 psi4.frequency(""B3LYP/cc-pVDZ"", molecule=molecule_xyz, return_wfn=True, dertype='gradient'); 7 correction_g = parse_free_energy(F'{molecule_name}_frequency_analysis.dat'); 8 print(""Correction G: "", correction_g). 21 frames; [/usr/local/lib/python3.7/site-packages/psi4/driver/driver.py](https://localhost:8080/#) in frequency(name, **kwargs); 1772 ; 1773 # Compute the hessian; -> 1774 H, wfn = hessian(name, return_wfn=True, molecule=molecule, **kwargs); 1775 ; 1776 # Project final frequencies?. [/usr/local/lib/python3.7/site-packages/psi4/driver/driver.py](https://localhost:8080/#) in hessian(name, **kwargs); 1493 # Check if this is a CBS extrapolation; 1494 elif gradient_type == ""cbs_gufunc"":; -> 1495 return driver_cbs._cbs_gufunc(hessian, name.lower(), **kwargs, ptype=""hessian""); 1496 elif gradient_type == ""cbs_wrapper"":; 1497 return driver_cbs.cbs(hessian, ""cbs"", **kwargs, ptype=""hessian""). [/usr/local/lib/python3.7/site-packages/psi4/driver/driver_cbs.py](https://localhost:8080/#) in _cbs_gufunc(func, total_method_name, **kwargs); 1963 optstash = p4util.OptionsState(['BASIS']); 1964 core.set_glob",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2510
https://github.com/psi4/psi4/issues/2510:452,Performance,load,load-missing-,452,"I am attempting run a frequency calculation with Psi4 (version 1.5) and Python 3.7.10. All other calculations (optimization, single point energy, etc.) work well. However, when I attempt to run a frequency calculation with the command `psi4.frequency(""B3LYP/cc-pVDZ"", molecule=molecule_xyz, return_wfn=True, dertype='gradient')`, I get the following error. From [what I've seen on Stack Overflow](https://stackoverflow.com/questions/69564817/typeerror-load-missing-1-required-positional-argument-loader-in-google-col), this may be an issue with psi4 compatibility. How can I navigate this issue? . ```; ---------------------------------------------------------------------------; TypeError Traceback (most recent call last); [<ipython-input-13-13c5f85efa27>](https://localhost:8080/#) in <module>(); 4 ; 5 psi4.set_output_file(F'{molecule_name}_frequency_analysis.dat', False); ----> 6 psi4.frequency(""B3LYP/cc-pVDZ"", molecule=molecule_xyz, return_wfn=True, dertype='gradient'); 7 correction_g = parse_free_energy(F'{molecule_name}_frequency_analysis.dat'); 8 print(""Correction G: "", correction_g). 21 frames; [/usr/local/lib/python3.7/site-packages/psi4/driver/driver.py](https://localhost:8080/#) in frequency(name, **kwargs); 1772 ; 1773 # Compute the hessian; -> 1774 H, wfn = hessian(name, return_wfn=True, molecule=molecule, **kwargs); 1775 ; 1776 # Project final frequencies?. [/usr/local/lib/python3.7/site-packages/psi4/driver/driver.py](https://localhost:8080/#) in hessian(name, **kwargs); 1493 # Check if this is a CBS extrapolation; 1494 elif gradient_type == ""cbs_gufunc"":; -> 1495 return driver_cbs._cbs_gufunc(hessian, name.lower(), **kwargs, ptype=""hessian""); 1496 elif gradient_type == ""cbs_wrapper"":; 1497 return driver_cbs.cbs(hessian, ""cbs"", **kwargs, ptype=""hessian""). [/usr/local/lib/python3.7/site-packages/psi4/driver/driver_cbs.py](https://localhost:8080/#) in _cbs_gufunc(func, total_method_name, **kwargs); 1963 optstash = p4util.OptionsState(['BASIS']); 1964 core.set_glob",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2510
https://github.com/psi4/psi4/issues/2510:496,Performance,load,loader-in-google-col,496,"I am attempting run a frequency calculation with Psi4 (version 1.5) and Python 3.7.10. All other calculations (optimization, single point energy, etc.) work well. However, when I attempt to run a frequency calculation with the command `psi4.frequency(""B3LYP/cc-pVDZ"", molecule=molecule_xyz, return_wfn=True, dertype='gradient')`, I get the following error. From [what I've seen on Stack Overflow](https://stackoverflow.com/questions/69564817/typeerror-load-missing-1-required-positional-argument-loader-in-google-col), this may be an issue with psi4 compatibility. How can I navigate this issue? . ```; ---------------------------------------------------------------------------; TypeError Traceback (most recent call last); [<ipython-input-13-13c5f85efa27>](https://localhost:8080/#) in <module>(); 4 ; 5 psi4.set_output_file(F'{molecule_name}_frequency_analysis.dat', False); ----> 6 psi4.frequency(""B3LYP/cc-pVDZ"", molecule=molecule_xyz, return_wfn=True, dertype='gradient'); 7 correction_g = parse_free_energy(F'{molecule_name}_frequency_analysis.dat'); 8 print(""Correction G: "", correction_g). 21 frames; [/usr/local/lib/python3.7/site-packages/psi4/driver/driver.py](https://localhost:8080/#) in frequency(name, **kwargs); 1772 ; 1773 # Compute the hessian; -> 1774 H, wfn = hessian(name, return_wfn=True, molecule=molecule, **kwargs); 1775 ; 1776 # Project final frequencies?. [/usr/local/lib/python3.7/site-packages/psi4/driver/driver.py](https://localhost:8080/#) in hessian(name, **kwargs); 1493 # Check if this is a CBS extrapolation; 1494 elif gradient_type == ""cbs_gufunc"":; -> 1495 return driver_cbs._cbs_gufunc(hessian, name.lower(), **kwargs, ptype=""hessian""); 1496 elif gradient_type == ""cbs_wrapper"":; 1497 return driver_cbs.cbs(hessian, ""cbs"", **kwargs, ptype=""hessian""). [/usr/local/lib/python3.7/site-packages/psi4/driver/driver_cbs.py](https://localhost:8080/#) in _cbs_gufunc(func, total_method_name, **kwargs); 1963 optstash = p4util.OptionsState(['BASIS']); 1964 core.set_glob",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2510
https://github.com/psi4/psi4/issues/2510:7477,Performance,load,load,7477,"ncs; 4 from .backends.api import (; 5 load_dataarray,. [/usr/local/lib/python3.7/dist-packages/xarray/tutorial.py](https://localhost:8080/#) in <module>(); 11 import numpy as np; 12 ; ---> 13 from .backends.api import open_dataset as _open_dataset; 14 from .backends.rasterio_ import open_rasterio as _open_rasterio; 15 from .core.dataarray import DataArray. [/usr/local/lib/python3.7/dist-packages/xarray/backends/__init__.py](https://localhost:8080/#) in <module>(); 4 formats. They should not be used directly, but rather through Dataset objects.; 5 """"""; ----> 6 from .cfgrib_ import CfGribDataStore; 7 from .common import AbstractDataStore, BackendArray, BackendEntrypoint; 8 from .file_manager import CachingFileManager, DummyFileManager, FileManager. [/usr/local/lib/python3.7/dist-packages/xarray/backends/cfgrib_.py](https://localhost:8080/#) in <module>(); 14 _normalize_path,; 15 ); ---> 16 from .locks import SerializableLock, ensure_lock; 17 from .store import StoreBackendEntrypoint; 18 . [/usr/local/lib/python3.7/dist-packages/xarray/backends/locks.py](https://localhost:8080/#) in <module>(); 11 ; 12 try:; ---> 13 from dask.distributed import Lock as DistributedLock; 14 except ImportError:; 15 DistributedLock = None. [/usr/local/lib/python3.7/dist-packages/dask/distributed.py](https://localhost:8080/#) in <module>(); 1 # flake8: noqa; 2 try:; ----> 3 from distributed import *; 4 except ImportError:; 5 msg = (. [/usr/local/lib/python3.7/dist-packages/distributed/__init__.py](https://localhost:8080/#) in <module>(); 1 from __future__ import print_function, division, absolute_import; 2 ; ----> 3 from . import config; 4 from dask.config import config; 5 from .actor import Actor, ActorFuture. [/usr/local/lib/python3.7/dist-packages/distributed/config.py](https://localhost:8080/#) in <module>(); 18 ; 19 with open(fn) as f:; ---> 20 defaults = yaml.load(f); 21 ; 22 dask.config.update_defaults(defaults). TypeError: load() missing 1 required positional argument: 'Loader'; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2510
https://github.com/psi4/psi4/issues/2510:7544,Performance,load,load,7544,"ncs; 4 from .backends.api import (; 5 load_dataarray,. [/usr/local/lib/python3.7/dist-packages/xarray/tutorial.py](https://localhost:8080/#) in <module>(); 11 import numpy as np; 12 ; ---> 13 from .backends.api import open_dataset as _open_dataset; 14 from .backends.rasterio_ import open_rasterio as _open_rasterio; 15 from .core.dataarray import DataArray. [/usr/local/lib/python3.7/dist-packages/xarray/backends/__init__.py](https://localhost:8080/#) in <module>(); 4 formats. They should not be used directly, but rather through Dataset objects.; 5 """"""; ----> 6 from .cfgrib_ import CfGribDataStore; 7 from .common import AbstractDataStore, BackendArray, BackendEntrypoint; 8 from .file_manager import CachingFileManager, DummyFileManager, FileManager. [/usr/local/lib/python3.7/dist-packages/xarray/backends/cfgrib_.py](https://localhost:8080/#) in <module>(); 14 _normalize_path,; 15 ); ---> 16 from .locks import SerializableLock, ensure_lock; 17 from .store import StoreBackendEntrypoint; 18 . [/usr/local/lib/python3.7/dist-packages/xarray/backends/locks.py](https://localhost:8080/#) in <module>(); 11 ; 12 try:; ---> 13 from dask.distributed import Lock as DistributedLock; 14 except ImportError:; 15 DistributedLock = None. [/usr/local/lib/python3.7/dist-packages/dask/distributed.py](https://localhost:8080/#) in <module>(); 1 # flake8: noqa; 2 try:; ----> 3 from distributed import *; 4 except ImportError:; 5 msg = (. [/usr/local/lib/python3.7/dist-packages/distributed/__init__.py](https://localhost:8080/#) in <module>(); 1 from __future__ import print_function, division, absolute_import; 2 ; ----> 3 from . import config; 4 from dask.config import config; 5 from .actor import Actor, ActorFuture. [/usr/local/lib/python3.7/dist-packages/distributed/config.py](https://localhost:8080/#) in <module>(); 18 ; 19 with open(fn) as f:; ---> 20 defaults = yaml.load(f); 21 ; 22 dask.config.update_defaults(defaults). TypeError: load() missing 1 required positional argument: 'Loader'; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2510
https://github.com/psi4/psi4/issues/2510:7592,Performance,Load,Loader,7592,"ncs; 4 from .backends.api import (; 5 load_dataarray,. [/usr/local/lib/python3.7/dist-packages/xarray/tutorial.py](https://localhost:8080/#) in <module>(); 11 import numpy as np; 12 ; ---> 13 from .backends.api import open_dataset as _open_dataset; 14 from .backends.rasterio_ import open_rasterio as _open_rasterio; 15 from .core.dataarray import DataArray. [/usr/local/lib/python3.7/dist-packages/xarray/backends/__init__.py](https://localhost:8080/#) in <module>(); 4 formats. They should not be used directly, but rather through Dataset objects.; 5 """"""; ----> 6 from .cfgrib_ import CfGribDataStore; 7 from .common import AbstractDataStore, BackendArray, BackendEntrypoint; 8 from .file_manager import CachingFileManager, DummyFileManager, FileManager. [/usr/local/lib/python3.7/dist-packages/xarray/backends/cfgrib_.py](https://localhost:8080/#) in <module>(); 14 _normalize_path,; 15 ); ---> 16 from .locks import SerializableLock, ensure_lock; 17 from .store import StoreBackendEntrypoint; 18 . [/usr/local/lib/python3.7/dist-packages/xarray/backends/locks.py](https://localhost:8080/#) in <module>(); 11 ; 12 try:; ---> 13 from dask.distributed import Lock as DistributedLock; 14 except ImportError:; 15 DistributedLock = None. [/usr/local/lib/python3.7/dist-packages/dask/distributed.py](https://localhost:8080/#) in <module>(); 1 # flake8: noqa; 2 try:; ----> 3 from distributed import *; 4 except ImportError:; 5 msg = (. [/usr/local/lib/python3.7/dist-packages/distributed/__init__.py](https://localhost:8080/#) in <module>(); 1 from __future__ import print_function, division, absolute_import; 2 ; ----> 3 from . import config; 4 from dask.config import config; 5 from .actor import Actor, ActorFuture. [/usr/local/lib/python3.7/dist-packages/distributed/config.py](https://localhost:8080/#) in <module>(); 18 ; 19 with open(fn) as f:; ---> 20 defaults = yaml.load(f); 21 ; 22 dask.config.update_defaults(defaults). TypeError: load() missing 1 required positional argument: 'Loader'; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2510
https://github.com/psi4/psi4/issues/2510:4820,Testability,Log,LogarithmicConverter,4820,"/qcelemental/physical_constants/context.py](https://localhost:8080/#) in conversion_factor(self, base_unit, conv_unit); 310 # Add a little magic in case the incoming values have scalars; 311 ; --> 312 from pint import quantity; 313 ; 314 factor = 1.0. [/usr/local/lib/python3.7/site-packages/pint/__init__.py](https://localhost:8080/#) in <module>(); 12 """"""; 13 ; ---> 14 from .context import Context; 15 from .errors import ( # noqa: F401; 16 DefinitionSyntaxError,. [/usr/local/lib/python3.7/site-packages/pint/context.py](https://localhost:8080/#) in <module>(); 13 from collections import ChainMap, defaultdict; 14 ; ---> 15 from .definitions import Definition, UnitDefinition; 16 from .errors import DefinitionSyntaxError; 17 from .util import ParserHelper, SourceIterator, to_units_container. [/usr/local/lib/python3.7/site-packages/pint/definitions.py](https://localhost:8080/#) in <module>(); 11 from collections import namedtuple; 12 ; ---> 13 from .converters import LogarithmicConverter, OffsetConverter, ScaleConverter; 14 from .errors import DefinitionSyntaxError; 15 from .util import ParserHelper, UnitsContainer, _is_dim. [/usr/local/lib/python3.7/site-packages/pint/converters.py](https://localhost:8080/#) in <module>(); 10 ; 11 ; ---> 12 from .compat import HAS_NUMPY, exp, log # noqa: F401; 13 ; 14 . [/usr/local/lib/python3.7/site-packages/pint/compat.py](https://localhost:8080/#) in <module>(); 161 # xarray (DataArray, Dataset, Variable); 162 try:; --> 163 from xarray import DataArray, Dataset, Variable; 164 ; 165 upcast_types += [DataArray, Dataset, Variable]. [/usr/local/lib/python3.7/dist-packages/xarray/__init__.py](https://localhost:8080/#) in <module>(); 1 import pkg_resources; 2 ; ----> 3 from . import testing, tutorial, ufuncs; 4 from .backends.api import (; 5 load_dataarray,. [/usr/local/lib/python3.7/dist-packages/xarray/tutorial.py](https://localhost:8080/#) in <module>(); 11 import numpy as np; 12 ; ---> 13 from .backends.api import open_dataset as _open",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2510
https://github.com/psi4/psi4/issues/2510:5136,Testability,log,log,5136,"/pint/__init__.py](https://localhost:8080/#) in <module>(); 12 """"""; 13 ; ---> 14 from .context import Context; 15 from .errors import ( # noqa: F401; 16 DefinitionSyntaxError,. [/usr/local/lib/python3.7/site-packages/pint/context.py](https://localhost:8080/#) in <module>(); 13 from collections import ChainMap, defaultdict; 14 ; ---> 15 from .definitions import Definition, UnitDefinition; 16 from .errors import DefinitionSyntaxError; 17 from .util import ParserHelper, SourceIterator, to_units_container. [/usr/local/lib/python3.7/site-packages/pint/definitions.py](https://localhost:8080/#) in <module>(); 11 from collections import namedtuple; 12 ; ---> 13 from .converters import LogarithmicConverter, OffsetConverter, ScaleConverter; 14 from .errors import DefinitionSyntaxError; 15 from .util import ParserHelper, UnitsContainer, _is_dim. [/usr/local/lib/python3.7/site-packages/pint/converters.py](https://localhost:8080/#) in <module>(); 10 ; 11 ; ---> 12 from .compat import HAS_NUMPY, exp, log # noqa: F401; 13 ; 14 . [/usr/local/lib/python3.7/site-packages/pint/compat.py](https://localhost:8080/#) in <module>(); 161 # xarray (DataArray, Dataset, Variable); 162 try:; --> 163 from xarray import DataArray, Dataset, Variable; 164 ; 165 upcast_types += [DataArray, Dataset, Variable]. [/usr/local/lib/python3.7/dist-packages/xarray/__init__.py](https://localhost:8080/#) in <module>(); 1 import pkg_resources; 2 ; ----> 3 from . import testing, tutorial, ufuncs; 4 from .backends.api import (; 5 load_dataarray,. [/usr/local/lib/python3.7/dist-packages/xarray/tutorial.py](https://localhost:8080/#) in <module>(); 11 import numpy as np; 12 ; ---> 13 from .backends.api import open_dataset as _open_dataset; 14 from .backends.rasterio_ import open_rasterio as _open_rasterio; 15 from .core.dataarray import DataArray. [/usr/local/lib/python3.7/dist-packages/xarray/backends/__init__.py](https://localhost:8080/#) in <module>(); 4 formats. They should not be used directly, but rather throug",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2510
https://github.com/psi4/psi4/issues/2510:5582,Testability,test,testing,5582,"serHelper, SourceIterator, to_units_container. [/usr/local/lib/python3.7/site-packages/pint/definitions.py](https://localhost:8080/#) in <module>(); 11 from collections import namedtuple; 12 ; ---> 13 from .converters import LogarithmicConverter, OffsetConverter, ScaleConverter; 14 from .errors import DefinitionSyntaxError; 15 from .util import ParserHelper, UnitsContainer, _is_dim. [/usr/local/lib/python3.7/site-packages/pint/converters.py](https://localhost:8080/#) in <module>(); 10 ; 11 ; ---> 12 from .compat import HAS_NUMPY, exp, log # noqa: F401; 13 ; 14 . [/usr/local/lib/python3.7/site-packages/pint/compat.py](https://localhost:8080/#) in <module>(); 161 # xarray (DataArray, Dataset, Variable); 162 try:; --> 163 from xarray import DataArray, Dataset, Variable; 164 ; 165 upcast_types += [DataArray, Dataset, Variable]. [/usr/local/lib/python3.7/dist-packages/xarray/__init__.py](https://localhost:8080/#) in <module>(); 1 import pkg_resources; 2 ; ----> 3 from . import testing, tutorial, ufuncs; 4 from .backends.api import (; 5 load_dataarray,. [/usr/local/lib/python3.7/dist-packages/xarray/tutorial.py](https://localhost:8080/#) in <module>(); 11 import numpy as np; 12 ; ---> 13 from .backends.api import open_dataset as _open_dataset; 14 from .backends.rasterio_ import open_rasterio as _open_rasterio; 15 from .core.dataarray import DataArray. [/usr/local/lib/python3.7/dist-packages/xarray/backends/__init__.py](https://localhost:8080/#) in <module>(); 4 formats. They should not be used directly, but rather through Dataset objects.; 5 """"""; ----> 6 from .cfgrib_ import CfGribDataStore; 7 from .common import AbstractDataStore, BackendArray, BackendEntrypoint; 8 from .file_manager import CachingFileManager, DummyFileManager, FileManager. [/usr/local/lib/python3.7/dist-packages/xarray/backends/cfgrib_.py](https://localhost:8080/#) in <module>(); 14 _normalize_path,; 15 ); ---> 16 from .locks import SerializableLock, ensure_lock; 17 from .store import StoreBackendEntrypo",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2510
https://github.com/psi4/psi4/pull/2511:202,Testability,test,tests,202,"## Description; Get Psi4 running correctly with Intel (2021.4) again. I'm sorry to uglify the nice structured bindings (thanks for the name, @robertodr). Edit with any better suggestions. I've got full tests running locally. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2511
https://github.com/psi4/psi4/pull/2511:409,Testability,Test,Tests,409,"## Description; Get Psi4 running correctly with Intel (2021.4) again. I'm sorry to uglify the nice structured bindings (thanks for the name, @robertodr). Edit with any better suggestions. I've got full tests running locally. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2511
https://github.com/psi4/psi4/pull/2511:483,Testability,test,tests,483,"## Description; Get Psi4 running correctly with Intel (2021.4) again. I'm sorry to uglify the nice structured bindings (thanks for the name, @robertodr). Edit with any better suggestions. I've got full tests running locally. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2511
https://github.com/psi4/psi4/pull/2511:574,Testability,test,tests,574,"## Description; Get Psi4 running correctly with Intel (2021.4) again. I'm sorry to uglify the nice structured bindings (thanks for the name, @robertodr). Edit with any better suggestions. I've got full tests running locally. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2511
https://github.com/psi4/psi4/pull/2512:907,Energy Efficiency,energy,energy,907,"## Description; DDD in #1351 is nominally ready, but looking through the diff, I don't think I can answer close questioning on all the pieces. So I'm going to try to pick off some topics for coherent discussion. This is No. 1 of the DDD series, #1351. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] New `psi4.set_output_file` function to both set up a logger and call `psi4.core.set_output_file`; - [x] Added some brief logging in the driver. This doesn't look much like DDD, but it's something to work with.; - [x] output file naming has been changed up. outputs may have double extension (e.g., myfile.log.out) to cope with the oddity of two extensions. Mostly, something.in creates something.out and something.log.; - [x] docs. Below is an example of output set at DEBUG with an extra `gradient()` call added to tu1; `>>> psi4 ../tests/tu1-h2o-energy/input.dat --loglevel=10 && cat ../tests/tu1-h2o-energy/input.log`; ```; 2022-03-28:21:06:46,635 INFO [psi4.driver.driver:603] Compute energy(): method=scf, basis=cc-pvdz, molecule=h2o, nre=9.168193296424349; 2022-03-28:21:06:46,644 DEBUG [psi4.driver.driver:604] {'elbl': array(['', '', ''], dtype='<U1'),; 'elea': array([16, 1, 1]),; 'elem': array(['O', 'H', 'H'], dtype='<U1'),; 'elez': array([8, 1, 1]),; 'fix_com': False,; 'fix_orientation': False,; 'fragment_charges': [0.0],; 'fragment_multiplicities': [1],; 'fragment_separators': [],; 'geom': array([ 0. , 0. , -0.06577557, 0. , -0.75906199,; 0.52195302, 0. , 0.75906199, 0.52195302]),; 'mass': array([15.99491462, 1.00782503, 1.00782503]),; 'molecular_charge': 0.0,; 'molecular_multiplicity': 1,; 'name': 'h2o',; 'provenance': {'creator': 'QCElemental', 'routine': 'qcelemental.molparse.from_string', 'version': 'v0.24.0'},; 'real': array([ True, True, True]),; 'units': 'Angstrom'}; 2022-03-28:21:06:47,79 INFO [psi4.driver.driver:606] Return energy(): -76.0266327350908; 2022-03-28:21:06:47,83 INFO [psi4.driver.driver:748] Co",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2512
https://github.com/psi4/psi4/pull/2512:962,Energy Efficiency,energy,energy,962,"## Description; DDD in #1351 is nominally ready, but looking through the diff, I don't think I can answer close questioning on all the pieces. So I'm going to try to pick off some topics for coherent discussion. This is No. 1 of the DDD series, #1351. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] New `psi4.set_output_file` function to both set up a logger and call `psi4.core.set_output_file`; - [x] Added some brief logging in the driver. This doesn't look much like DDD, but it's something to work with.; - [x] output file naming has been changed up. outputs may have double extension (e.g., myfile.log.out) to cope with the oddity of two extensions. Mostly, something.in creates something.out and something.log.; - [x] docs. Below is an example of output set at DEBUG with an extra `gradient()` call added to tu1; `>>> psi4 ../tests/tu1-h2o-energy/input.dat --loglevel=10 && cat ../tests/tu1-h2o-energy/input.log`; ```; 2022-03-28:21:06:46,635 INFO [psi4.driver.driver:603] Compute energy(): method=scf, basis=cc-pvdz, molecule=h2o, nre=9.168193296424349; 2022-03-28:21:06:46,644 DEBUG [psi4.driver.driver:604] {'elbl': array(['', '', ''], dtype='<U1'),; 'elea': array([16, 1, 1]),; 'elem': array(['O', 'H', 'H'], dtype='<U1'),; 'elez': array([8, 1, 1]),; 'fix_com': False,; 'fix_orientation': False,; 'fragment_charges': [0.0],; 'fragment_multiplicities': [1],; 'fragment_separators': [],; 'geom': array([ 0. , 0. , -0.06577557, 0. , -0.75906199,; 0.52195302, 0. , 0.75906199, 0.52195302]),; 'mass': array([15.99491462, 1.00782503, 1.00782503]),; 'molecular_charge': 0.0,; 'molecular_multiplicity': 1,; 'name': 'h2o',; 'provenance': {'creator': 'QCElemental', 'routine': 'qcelemental.molparse.from_string', 'version': 'v0.24.0'},; 'real': array([ True, True, True]),; 'units': 'Angstrom'}; 2022-03-28:21:06:47,79 INFO [psi4.driver.driver:606] Return energy(): -76.0266327350908; 2022-03-28:21:06:47,83 INFO [psi4.driver.driver:748] Co",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2512
https://github.com/psi4/psi4/pull/2512:1048,Energy Efficiency,energy,energy,1048,"gh the diff, I don't think I can answer close questioning on all the pieces. So I'm going to try to pick off some topics for coherent discussion. This is No. 1 of the DDD series, #1351. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] New `psi4.set_output_file` function to both set up a logger and call `psi4.core.set_output_file`; - [x] Added some brief logging in the driver. This doesn't look much like DDD, but it's something to work with.; - [x] output file naming has been changed up. outputs may have double extension (e.g., myfile.log.out) to cope with the oddity of two extensions. Mostly, something.in creates something.out and something.log.; - [x] docs. Below is an example of output set at DEBUG with an extra `gradient()` call added to tu1; `>>> psi4 ../tests/tu1-h2o-energy/input.dat --loglevel=10 && cat ../tests/tu1-h2o-energy/input.log`; ```; 2022-03-28:21:06:46,635 INFO [psi4.driver.driver:603] Compute energy(): method=scf, basis=cc-pvdz, molecule=h2o, nre=9.168193296424349; 2022-03-28:21:06:46,644 DEBUG [psi4.driver.driver:604] {'elbl': array(['', '', ''], dtype='<U1'),; 'elea': array([16, 1, 1]),; 'elem': array(['O', 'H', 'H'], dtype='<U1'),; 'elez': array([8, 1, 1]),; 'fix_com': False,; 'fix_orientation': False,; 'fragment_charges': [0.0],; 'fragment_multiplicities': [1],; 'fragment_separators': [],; 'geom': array([ 0. , 0. , -0.06577557, 0. , -0.75906199,; 0.52195302, 0. , 0.75906199, 0.52195302]),; 'mass': array([15.99491462, 1.00782503, 1.00782503]),; 'molecular_charge': 0.0,; 'molecular_multiplicity': 1,; 'name': 'h2o',; 'provenance': {'creator': 'QCElemental', 'routine': 'qcelemental.molparse.from_string', 'version': 'v0.24.0'},; 'real': array([ True, True, True]),; 'units': 'Angstrom'}; 2022-03-28:21:06:47,79 INFO [psi4.driver.driver:606] Return energy(): -76.0266327350908; 2022-03-28:21:06:47,83 INFO [psi4.driver.driver:748] Compute gradient(): method=scf, basis=cc-pvdz, molecule=h2o, nre=9.1",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2512
https://github.com/psi4/psi4/pull/2512:1917,Energy Efficiency,energy,energy,1917,"input.dat --loglevel=10 && cat ../tests/tu1-h2o-energy/input.log`; ```; 2022-03-28:21:06:46,635 INFO [psi4.driver.driver:603] Compute energy(): method=scf, basis=cc-pvdz, molecule=h2o, nre=9.168193296424349; 2022-03-28:21:06:46,644 DEBUG [psi4.driver.driver:604] {'elbl': array(['', '', ''], dtype='<U1'),; 'elea': array([16, 1, 1]),; 'elem': array(['O', 'H', 'H'], dtype='<U1'),; 'elez': array([8, 1, 1]),; 'fix_com': False,; 'fix_orientation': False,; 'fragment_charges': [0.0],; 'fragment_multiplicities': [1],; 'fragment_separators': [],; 'geom': array([ 0. , 0. , -0.06577557, 0. , -0.75906199,; 0.52195302, 0. , 0.75906199, 0.52195302]),; 'mass': array([15.99491462, 1.00782503, 1.00782503]),; 'molecular_charge': 0.0,; 'molecular_multiplicity': 1,; 'name': 'h2o',; 'provenance': {'creator': 'QCElemental', 'routine': 'qcelemental.molparse.from_string', 'version': 'v0.24.0'},; 'real': array([ True, True, True]),; 'units': 'Angstrom'}; 2022-03-28:21:06:47,79 INFO [psi4.driver.driver:606] Return energy(): -76.0266327350908; 2022-03-28:21:06:47,83 INFO [psi4.driver.driver:748] Compute gradient(): method=scf, basis=cc-pvdz, molecule=h2o, nre=9.168193296424349; 2022-03-28:21:06:47,86 DEBUG [psi4.driver.driver:749] {'elbl': array(['', '', ''], dtype='<U1'),; 'elea': array([16, 1, 1]),; 'elem': array(['O', 'H', 'H'], dtype='<U1'),; 'elez': array([8, 1, 1]),; 'fix_com': False,; 'fix_orientation': False,; 'fragment_charges': [0.0],; 'fragment_multiplicities': [1],; 'fragment_separators': [],; 'geom': array([ 0. , 0. , -0.06577557, 0. , -0.75906199,; 0.52195302, 0. , 0.75906199, 0.52195302]),; 'mass': array([15.99491462, 1.00782503, 1.00782503]),; 'molecular_charge': 0.0,; 'molecular_multiplicity': 1,; 'name': 'h2o',; 'provenance': {'creator': 'QCElemental', 'routine': 'qcelemental.molparse.from_string', 'version': 'v0.24.0'},; 'real': array([ True, True, True]),; 'units': 'Angstrom'}; 2022-03-28:21:06:47,455 INFO [psi4.driver.driver:751] Return gradient(): -76.02663273512434; 2022-",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2512
https://github.com/psi4/psi4/pull/2512:1728,Integrability,rout,routine,1728,"ity of two extensions. Mostly, something.in creates something.out and something.log.; - [x] docs. Below is an example of output set at DEBUG with an extra `gradient()` call added to tu1; `>>> psi4 ../tests/tu1-h2o-energy/input.dat --loglevel=10 && cat ../tests/tu1-h2o-energy/input.log`; ```; 2022-03-28:21:06:46,635 INFO [psi4.driver.driver:603] Compute energy(): method=scf, basis=cc-pvdz, molecule=h2o, nre=9.168193296424349; 2022-03-28:21:06:46,644 DEBUG [psi4.driver.driver:604] {'elbl': array(['', '', ''], dtype='<U1'),; 'elea': array([16, 1, 1]),; 'elem': array(['O', 'H', 'H'], dtype='<U1'),; 'elez': array([8, 1, 1]),; 'fix_com': False,; 'fix_orientation': False,; 'fragment_charges': [0.0],; 'fragment_multiplicities': [1],; 'fragment_separators': [],; 'geom': array([ 0. , 0. , -0.06577557, 0. , -0.75906199,; 0.52195302, 0. , 0.75906199, 0.52195302]),; 'mass': array([15.99491462, 1.00782503, 1.00782503]),; 'molecular_charge': 0.0,; 'molecular_multiplicity': 1,; 'name': 'h2o',; 'provenance': {'creator': 'QCElemental', 'routine': 'qcelemental.molparse.from_string', 'version': 'v0.24.0'},; 'real': array([ True, True, True]),; 'units': 'Angstrom'}; 2022-03-28:21:06:47,79 INFO [psi4.driver.driver:606] Return energy(): -76.0266327350908; 2022-03-28:21:06:47,83 INFO [psi4.driver.driver:748] Compute gradient(): method=scf, basis=cc-pvdz, molecule=h2o, nre=9.168193296424349; 2022-03-28:21:06:47,86 DEBUG [psi4.driver.driver:749] {'elbl': array(['', '', ''], dtype='<U1'),; 'elea': array([16, 1, 1]),; 'elem': array(['O', 'H', 'H'], dtype='<U1'),; 'elez': array([8, 1, 1]),; 'fix_com': False,; 'fix_orientation': False,; 'fragment_charges': [0.0],; 'fragment_multiplicities': [1],; 'fragment_separators': [],; 'geom': array([ 0. , 0. , -0.06577557, 0. , -0.75906199,; 0.52195302, 0. , 0.75906199, 0.52195302]),; 'mass': array([15.99491462, 1.00782503, 1.00782503]),; 'molecular_charge': 0.0,; 'molecular_multiplicity': 1,; 'name': 'h2o',; 'provenance': {'creator': 'QCElemental', 'routin",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2512
https://github.com/psi4/psi4/pull/2512:2688,Integrability,rout,routine,2688," 0.75906199, 0.52195302]),; 'mass': array([15.99491462, 1.00782503, 1.00782503]),; 'molecular_charge': 0.0,; 'molecular_multiplicity': 1,; 'name': 'h2o',; 'provenance': {'creator': 'QCElemental', 'routine': 'qcelemental.molparse.from_string', 'version': 'v0.24.0'},; 'real': array([ True, True, True]),; 'units': 'Angstrom'}; 2022-03-28:21:06:47,79 INFO [psi4.driver.driver:606] Return energy(): -76.0266327350908; 2022-03-28:21:06:47,83 INFO [psi4.driver.driver:748] Compute gradient(): method=scf, basis=cc-pvdz, molecule=h2o, nre=9.168193296424349; 2022-03-28:21:06:47,86 DEBUG [psi4.driver.driver:749] {'elbl': array(['', '', ''], dtype='<U1'),; 'elea': array([16, 1, 1]),; 'elem': array(['O', 'H', 'H'], dtype='<U1'),; 'elez': array([8, 1, 1]),; 'fix_com': False,; 'fix_orientation': False,; 'fragment_charges': [0.0],; 'fragment_multiplicities': [1],; 'fragment_separators': [],; 'geom': array([ 0. , 0. , -0.06577557, 0. , -0.75906199,; 0.52195302, 0. , 0.75906199, 0.52195302]),; 'mass': array([15.99491462, 1.00782503, 1.00782503]),; 'molecular_charge': 0.0,; 'molecular_multiplicity': 1,; 'name': 'h2o',; 'provenance': {'creator': 'QCElemental', 'routine': 'qcelemental.molparse.from_string', 'version': 'v0.24.0'},; 'real': array([ True, True, True]),; 'units': 'Angstrom'}; 2022-03-28:21:06:47,455 INFO [psi4.driver.driver:751] Return gradient(): -76.02663273512434; 2022-03-28:21:06:47,455 INFO [psi4.driver.driver:752] [[-0. 0. -0.01764163]; [ 0. -0.01243841 0.00882081]; [-0. 0.01243841 0.00882081]]; ```. ## Questions; - [x] What should default loglevel be? Py default is WARN=30. That presently will produce an empty log file since psi4 starts with INFO=20. Present setup is 20 for psithon and 30 for psiapi. ANSWER: going with 20. ## Checklist; - [x] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2512
https://github.com/psi4/psi4/pull/2512:412,Testability,log,logger,412,"## Description; DDD in #1351 is nominally ready, but looking through the diff, I don't think I can answer close questioning on all the pieces. So I'm going to try to pick off some topics for coherent discussion. This is No. 1 of the DDD series, #1351. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] New `psi4.set_output_file` function to both set up a logger and call `psi4.core.set_output_file`; - [x] Added some brief logging in the driver. This doesn't look much like DDD, but it's something to work with.; - [x] output file naming has been changed up. outputs may have double extension (e.g., myfile.log.out) to cope with the oddity of two extensions. Mostly, something.in creates something.out and something.log.; - [x] docs. Below is an example of output set at DEBUG with an extra `gradient()` call added to tu1; `>>> psi4 ../tests/tu1-h2o-energy/input.dat --loglevel=10 && cat ../tests/tu1-h2o-energy/input.log`; ```; 2022-03-28:21:06:46,635 INFO [psi4.driver.driver:603] Compute energy(): method=scf, basis=cc-pvdz, molecule=h2o, nre=9.168193296424349; 2022-03-28:21:06:46,644 DEBUG [psi4.driver.driver:604] {'elbl': array(['', '', ''], dtype='<U1'),; 'elea': array([16, 1, 1]),; 'elem': array(['O', 'H', 'H'], dtype='<U1'),; 'elez': array([8, 1, 1]),; 'fix_com': False,; 'fix_orientation': False,; 'fragment_charges': [0.0],; 'fragment_multiplicities': [1],; 'fragment_separators': [],; 'geom': array([ 0. , 0. , -0.06577557, 0. , -0.75906199,; 0.52195302, 0. , 0.75906199, 0.52195302]),; 'mass': array([15.99491462, 1.00782503, 1.00782503]),; 'molecular_charge': 0.0,; 'molecular_multiplicity': 1,; 'name': 'h2o',; 'provenance': {'creator': 'QCElemental', 'routine': 'qcelemental.molparse.from_string', 'version': 'v0.24.0'},; 'real': array([ True, True, True]),; 'units': 'Angstrom'}; 2022-03-28:21:06:47,79 INFO [psi4.driver.driver:606] Return energy(): -76.0266327350908; 2022-03-28:21:06:47,83 INFO [psi4.driver.driver:748] Co",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2512
https://github.com/psi4/psi4/pull/2512:480,Testability,log,logging,480,"## Description; DDD in #1351 is nominally ready, but looking through the diff, I don't think I can answer close questioning on all the pieces. So I'm going to try to pick off some topics for coherent discussion. This is No. 1 of the DDD series, #1351. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] New `psi4.set_output_file` function to both set up a logger and call `psi4.core.set_output_file`; - [x] Added some brief logging in the driver. This doesn't look much like DDD, but it's something to work with.; - [x] output file naming has been changed up. outputs may have double extension (e.g., myfile.log.out) to cope with the oddity of two extensions. Mostly, something.in creates something.out and something.log.; - [x] docs. Below is an example of output set at DEBUG with an extra `gradient()` call added to tu1; `>>> psi4 ../tests/tu1-h2o-energy/input.dat --loglevel=10 && cat ../tests/tu1-h2o-energy/input.log`; ```; 2022-03-28:21:06:46,635 INFO [psi4.driver.driver:603] Compute energy(): method=scf, basis=cc-pvdz, molecule=h2o, nre=9.168193296424349; 2022-03-28:21:06:46,644 DEBUG [psi4.driver.driver:604] {'elbl': array(['', '', ''], dtype='<U1'),; 'elea': array([16, 1, 1]),; 'elem': array(['O', 'H', 'H'], dtype='<U1'),; 'elez': array([8, 1, 1]),; 'fix_com': False,; 'fix_orientation': False,; 'fragment_charges': [0.0],; 'fragment_multiplicities': [1],; 'fragment_separators': [],; 'geom': array([ 0. , 0. , -0.06577557, 0. , -0.75906199,; 0.52195302, 0. , 0.75906199, 0.52195302]),; 'mass': array([15.99491462, 1.00782503, 1.00782503]),; 'molecular_charge': 0.0,; 'molecular_multiplicity': 1,; 'name': 'h2o',; 'provenance': {'creator': 'QCElemental', 'routine': 'qcelemental.molparse.from_string', 'version': 'v0.24.0'},; 'real': array([ True, True, True]),; 'units': 'Angstrom'}; 2022-03-28:21:06:47,79 INFO [psi4.driver.driver:606] Return energy(): -76.0266327350908; 2022-03-28:21:06:47,83 INFO [psi4.driver.driver:748] Co",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2512
https://github.com/psi4/psi4/pull/2512:664,Testability,log,log,664,"## Description; DDD in #1351 is nominally ready, but looking through the diff, I don't think I can answer close questioning on all the pieces. So I'm going to try to pick off some topics for coherent discussion. This is No. 1 of the DDD series, #1351. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] New `psi4.set_output_file` function to both set up a logger and call `psi4.core.set_output_file`; - [x] Added some brief logging in the driver. This doesn't look much like DDD, but it's something to work with.; - [x] output file naming has been changed up. outputs may have double extension (e.g., myfile.log.out) to cope with the oddity of two extensions. Mostly, something.in creates something.out and something.log.; - [x] docs. Below is an example of output set at DEBUG with an extra `gradient()` call added to tu1; `>>> psi4 ../tests/tu1-h2o-energy/input.dat --loglevel=10 && cat ../tests/tu1-h2o-energy/input.log`; ```; 2022-03-28:21:06:46,635 INFO [psi4.driver.driver:603] Compute energy(): method=scf, basis=cc-pvdz, molecule=h2o, nre=9.168193296424349; 2022-03-28:21:06:46,644 DEBUG [psi4.driver.driver:604] {'elbl': array(['', '', ''], dtype='<U1'),; 'elea': array([16, 1, 1]),; 'elem': array(['O', 'H', 'H'], dtype='<U1'),; 'elez': array([8, 1, 1]),; 'fix_com': False,; 'fix_orientation': False,; 'fragment_charges': [0.0],; 'fragment_multiplicities': [1],; 'fragment_separators': [],; 'geom': array([ 0. , 0. , -0.06577557, 0. , -0.75906199,; 0.52195302, 0. , 0.75906199, 0.52195302]),; 'mass': array([15.99491462, 1.00782503, 1.00782503]),; 'molecular_charge': 0.0,; 'molecular_multiplicity': 1,; 'name': 'h2o',; 'provenance': {'creator': 'QCElemental', 'routine': 'qcelemental.molparse.from_string', 'version': 'v0.24.0'},; 'real': array([ True, True, True]),; 'units': 'Angstrom'}; 2022-03-28:21:06:47,79 INFO [psi4.driver.driver:606] Return energy(): -76.0266327350908; 2022-03-28:21:06:47,83 INFO [psi4.driver.driver:748] Co",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2512
https://github.com/psi4/psi4/pull/2512:773,Testability,log,log,773,"## Description; DDD in #1351 is nominally ready, but looking through the diff, I don't think I can answer close questioning on all the pieces. So I'm going to try to pick off some topics for coherent discussion. This is No. 1 of the DDD series, #1351. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] New `psi4.set_output_file` function to both set up a logger and call `psi4.core.set_output_file`; - [x] Added some brief logging in the driver. This doesn't look much like DDD, but it's something to work with.; - [x] output file naming has been changed up. outputs may have double extension (e.g., myfile.log.out) to cope with the oddity of two extensions. Mostly, something.in creates something.out and something.log.; - [x] docs. Below is an example of output set at DEBUG with an extra `gradient()` call added to tu1; `>>> psi4 ../tests/tu1-h2o-energy/input.dat --loglevel=10 && cat ../tests/tu1-h2o-energy/input.log`; ```; 2022-03-28:21:06:46,635 INFO [psi4.driver.driver:603] Compute energy(): method=scf, basis=cc-pvdz, molecule=h2o, nre=9.168193296424349; 2022-03-28:21:06:46,644 DEBUG [psi4.driver.driver:604] {'elbl': array(['', '', ''], dtype='<U1'),; 'elea': array([16, 1, 1]),; 'elem': array(['O', 'H', 'H'], dtype='<U1'),; 'elez': array([8, 1, 1]),; 'fix_com': False,; 'fix_orientation': False,; 'fragment_charges': [0.0],; 'fragment_multiplicities': [1],; 'fragment_separators': [],; 'geom': array([ 0. , 0. , -0.06577557, 0. , -0.75906199,; 0.52195302, 0. , 0.75906199, 0.52195302]),; 'mass': array([15.99491462, 1.00782503, 1.00782503]),; 'molecular_charge': 0.0,; 'molecular_multiplicity': 1,; 'name': 'h2o',; 'provenance': {'creator': 'QCElemental', 'routine': 'qcelemental.molparse.from_string', 'version': 'v0.24.0'},; 'real': array([ True, True, True]),; 'units': 'Angstrom'}; 2022-03-28:21:06:47,79 INFO [psi4.driver.driver:606] Return energy(): -76.0266327350908; 2022-03-28:21:06:47,83 INFO [psi4.driver.driver:748] Co",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2512
https://github.com/psi4/psi4/pull/2512:893,Testability,test,tests,893,"## Description; DDD in #1351 is nominally ready, but looking through the diff, I don't think I can answer close questioning on all the pieces. So I'm going to try to pick off some topics for coherent discussion. This is No. 1 of the DDD series, #1351. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] New `psi4.set_output_file` function to both set up a logger and call `psi4.core.set_output_file`; - [x] Added some brief logging in the driver. This doesn't look much like DDD, but it's something to work with.; - [x] output file naming has been changed up. outputs may have double extension (e.g., myfile.log.out) to cope with the oddity of two extensions. Mostly, something.in creates something.out and something.log.; - [x] docs. Below is an example of output set at DEBUG with an extra `gradient()` call added to tu1; `>>> psi4 ../tests/tu1-h2o-energy/input.dat --loglevel=10 && cat ../tests/tu1-h2o-energy/input.log`; ```; 2022-03-28:21:06:46,635 INFO [psi4.driver.driver:603] Compute energy(): method=scf, basis=cc-pvdz, molecule=h2o, nre=9.168193296424349; 2022-03-28:21:06:46,644 DEBUG [psi4.driver.driver:604] {'elbl': array(['', '', ''], dtype='<U1'),; 'elea': array([16, 1, 1]),; 'elem': array(['O', 'H', 'H'], dtype='<U1'),; 'elez': array([8, 1, 1]),; 'fix_com': False,; 'fix_orientation': False,; 'fragment_charges': [0.0],; 'fragment_multiplicities': [1],; 'fragment_separators': [],; 'geom': array([ 0. , 0. , -0.06577557, 0. , -0.75906199,; 0.52195302, 0. , 0.75906199, 0.52195302]),; 'mass': array([15.99491462, 1.00782503, 1.00782503]),; 'molecular_charge': 0.0,; 'molecular_multiplicity': 1,; 'name': 'h2o',; 'provenance': {'creator': 'QCElemental', 'routine': 'qcelemental.molparse.from_string', 'version': 'v0.24.0'},; 'real': array([ True, True, True]),; 'units': 'Angstrom'}; 2022-03-28:21:06:47,79 INFO [psi4.driver.driver:606] Return energy(): -76.0266327350908; 2022-03-28:21:06:47,83 INFO [psi4.driver.driver:748] Co",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2512
https://github.com/psi4/psi4/pull/2512:926,Testability,log,loglevel,926,"## Description; DDD in #1351 is nominally ready, but looking through the diff, I don't think I can answer close questioning on all the pieces. So I'm going to try to pick off some topics for coherent discussion. This is No. 1 of the DDD series, #1351. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] New `psi4.set_output_file` function to both set up a logger and call `psi4.core.set_output_file`; - [x] Added some brief logging in the driver. This doesn't look much like DDD, but it's something to work with.; - [x] output file naming has been changed up. outputs may have double extension (e.g., myfile.log.out) to cope with the oddity of two extensions. Mostly, something.in creates something.out and something.log.; - [x] docs. Below is an example of output set at DEBUG with an extra `gradient()` call added to tu1; `>>> psi4 ../tests/tu1-h2o-energy/input.dat --loglevel=10 && cat ../tests/tu1-h2o-energy/input.log`; ```; 2022-03-28:21:06:46,635 INFO [psi4.driver.driver:603] Compute energy(): method=scf, basis=cc-pvdz, molecule=h2o, nre=9.168193296424349; 2022-03-28:21:06:46,644 DEBUG [psi4.driver.driver:604] {'elbl': array(['', '', ''], dtype='<U1'),; 'elea': array([16, 1, 1]),; 'elem': array(['O', 'H', 'H'], dtype='<U1'),; 'elez': array([8, 1, 1]),; 'fix_com': False,; 'fix_orientation': False,; 'fragment_charges': [0.0],; 'fragment_multiplicities': [1],; 'fragment_separators': [],; 'geom': array([ 0. , 0. , -0.06577557, 0. , -0.75906199,; 0.52195302, 0. , 0.75906199, 0.52195302]),; 'mass': array([15.99491462, 1.00782503, 1.00782503]),; 'molecular_charge': 0.0,; 'molecular_multiplicity': 1,; 'name': 'h2o',; 'provenance': {'creator': 'QCElemental', 'routine': 'qcelemental.molparse.from_string', 'version': 'v0.24.0'},; 'real': array([ True, True, True]),; 'units': 'Angstrom'}; 2022-03-28:21:06:47,79 INFO [psi4.driver.driver:606] Return energy(): -76.0266327350908; 2022-03-28:21:06:47,83 INFO [psi4.driver.driver:748] Co",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2512
https://github.com/psi4/psi4/pull/2512:948,Testability,test,tests,948,"## Description; DDD in #1351 is nominally ready, but looking through the diff, I don't think I can answer close questioning on all the pieces. So I'm going to try to pick off some topics for coherent discussion. This is No. 1 of the DDD series, #1351. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] New `psi4.set_output_file` function to both set up a logger and call `psi4.core.set_output_file`; - [x] Added some brief logging in the driver. This doesn't look much like DDD, but it's something to work with.; - [x] output file naming has been changed up. outputs may have double extension (e.g., myfile.log.out) to cope with the oddity of two extensions. Mostly, something.in creates something.out and something.log.; - [x] docs. Below is an example of output set at DEBUG with an extra `gradient()` call added to tu1; `>>> psi4 ../tests/tu1-h2o-energy/input.dat --loglevel=10 && cat ../tests/tu1-h2o-energy/input.log`; ```; 2022-03-28:21:06:46,635 INFO [psi4.driver.driver:603] Compute energy(): method=scf, basis=cc-pvdz, molecule=h2o, nre=9.168193296424349; 2022-03-28:21:06:46,644 DEBUG [psi4.driver.driver:604] {'elbl': array(['', '', ''], dtype='<U1'),; 'elea': array([16, 1, 1]),; 'elem': array(['O', 'H', 'H'], dtype='<U1'),; 'elez': array([8, 1, 1]),; 'fix_com': False,; 'fix_orientation': False,; 'fragment_charges': [0.0],; 'fragment_multiplicities': [1],; 'fragment_separators': [],; 'geom': array([ 0. , 0. , -0.06577557, 0. , -0.75906199,; 0.52195302, 0. , 0.75906199, 0.52195302]),; 'mass': array([15.99491462, 1.00782503, 1.00782503]),; 'molecular_charge': 0.0,; 'molecular_multiplicity': 1,; 'name': 'h2o',; 'provenance': {'creator': 'QCElemental', 'routine': 'qcelemental.molparse.from_string', 'version': 'v0.24.0'},; 'real': array([ True, True, True]),; 'units': 'Angstrom'}; 2022-03-28:21:06:47,79 INFO [psi4.driver.driver:606] Return energy(): -76.0266327350908; 2022-03-28:21:06:47,83 INFO [psi4.driver.driver:748] Co",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2512
https://github.com/psi4/psi4/pull/2512:975,Testability,log,log,975,"## Description; DDD in #1351 is nominally ready, but looking through the diff, I don't think I can answer close questioning on all the pieces. So I'm going to try to pick off some topics for coherent discussion. This is No. 1 of the DDD series, #1351. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] New `psi4.set_output_file` function to both set up a logger and call `psi4.core.set_output_file`; - [x] Added some brief logging in the driver. This doesn't look much like DDD, but it's something to work with.; - [x] output file naming has been changed up. outputs may have double extension (e.g., myfile.log.out) to cope with the oddity of two extensions. Mostly, something.in creates something.out and something.log.; - [x] docs. Below is an example of output set at DEBUG with an extra `gradient()` call added to tu1; `>>> psi4 ../tests/tu1-h2o-energy/input.dat --loglevel=10 && cat ../tests/tu1-h2o-energy/input.log`; ```; 2022-03-28:21:06:46,635 INFO [psi4.driver.driver:603] Compute energy(): method=scf, basis=cc-pvdz, molecule=h2o, nre=9.168193296424349; 2022-03-28:21:06:46,644 DEBUG [psi4.driver.driver:604] {'elbl': array(['', '', ''], dtype='<U1'),; 'elea': array([16, 1, 1]),; 'elem': array(['O', 'H', 'H'], dtype='<U1'),; 'elez': array([8, 1, 1]),; 'fix_com': False,; 'fix_orientation': False,; 'fragment_charges': [0.0],; 'fragment_multiplicities': [1],; 'fragment_separators': [],; 'geom': array([ 0. , 0. , -0.06577557, 0. , -0.75906199,; 0.52195302, 0. , 0.75906199, 0.52195302]),; 'mass': array([15.99491462, 1.00782503, 1.00782503]),; 'molecular_charge': 0.0,; 'molecular_multiplicity': 1,; 'name': 'h2o',; 'provenance': {'creator': 'QCElemental', 'routine': 'qcelemental.molparse.from_string', 'version': 'v0.24.0'},; 'real': array([ True, True, True]),; 'units': 'Angstrom'}; 2022-03-28:21:06:47,79 INFO [psi4.driver.driver:606] Return energy(): -76.0266327350908; 2022-03-28:21:06:47,83 INFO [psi4.driver.driver:748] Co",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2512
https://github.com/psi4/psi4/pull/2512:3092,Testability,log,loglevel,3092," 0.75906199, 0.52195302]),; 'mass': array([15.99491462, 1.00782503, 1.00782503]),; 'molecular_charge': 0.0,; 'molecular_multiplicity': 1,; 'name': 'h2o',; 'provenance': {'creator': 'QCElemental', 'routine': 'qcelemental.molparse.from_string', 'version': 'v0.24.0'},; 'real': array([ True, True, True]),; 'units': 'Angstrom'}; 2022-03-28:21:06:47,79 INFO [psi4.driver.driver:606] Return energy(): -76.0266327350908; 2022-03-28:21:06:47,83 INFO [psi4.driver.driver:748] Compute gradient(): method=scf, basis=cc-pvdz, molecule=h2o, nre=9.168193296424349; 2022-03-28:21:06:47,86 DEBUG [psi4.driver.driver:749] {'elbl': array(['', '', ''], dtype='<U1'),; 'elea': array([16, 1, 1]),; 'elem': array(['O', 'H', 'H'], dtype='<U1'),; 'elez': array([8, 1, 1]),; 'fix_com': False,; 'fix_orientation': False,; 'fragment_charges': [0.0],; 'fragment_multiplicities': [1],; 'fragment_separators': [],; 'geom': array([ 0. , 0. , -0.06577557, 0. , -0.75906199,; 0.52195302, 0. , 0.75906199, 0.52195302]),; 'mass': array([15.99491462, 1.00782503, 1.00782503]),; 'molecular_charge': 0.0,; 'molecular_multiplicity': 1,; 'name': 'h2o',; 'provenance': {'creator': 'QCElemental', 'routine': 'qcelemental.molparse.from_string', 'version': 'v0.24.0'},; 'real': array([ True, True, True]),; 'units': 'Angstrom'}; 2022-03-28:21:06:47,455 INFO [psi4.driver.driver:751] Return gradient(): -76.02663273512434; 2022-03-28:21:06:47,455 INFO [psi4.driver.driver:752] [[-0. 0. -0.01764163]; [ 0. -0.01243841 0.00882081]; [-0. 0.01243841 0.00882081]]; ```. ## Questions; - [x] What should default loglevel be? Py default is WARN=30. That presently will produce an empty log file since psi4 starts with INFO=20. Present setup is 20 for psithon and 30 for psiapi. ANSWER: going with 20. ## Checklist; - [x] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2512
https://github.com/psi4/psi4/pull/2512:3165,Testability,log,log,3165," 0.75906199, 0.52195302]),; 'mass': array([15.99491462, 1.00782503, 1.00782503]),; 'molecular_charge': 0.0,; 'molecular_multiplicity': 1,; 'name': 'h2o',; 'provenance': {'creator': 'QCElemental', 'routine': 'qcelemental.molparse.from_string', 'version': 'v0.24.0'},; 'real': array([ True, True, True]),; 'units': 'Angstrom'}; 2022-03-28:21:06:47,79 INFO [psi4.driver.driver:606] Return energy(): -76.0266327350908; 2022-03-28:21:06:47,83 INFO [psi4.driver.driver:748] Compute gradient(): method=scf, basis=cc-pvdz, molecule=h2o, nre=9.168193296424349; 2022-03-28:21:06:47,86 DEBUG [psi4.driver.driver:749] {'elbl': array(['', '', ''], dtype='<U1'),; 'elea': array([16, 1, 1]),; 'elem': array(['O', 'H', 'H'], dtype='<U1'),; 'elez': array([8, 1, 1]),; 'fix_com': False,; 'fix_orientation': False,; 'fragment_charges': [0.0],; 'fragment_multiplicities': [1],; 'fragment_separators': [],; 'geom': array([ 0. , 0. , -0.06577557, 0. , -0.75906199,; 0.52195302, 0. , 0.75906199, 0.52195302]),; 'mass': array([15.99491462, 1.00782503, 1.00782503]),; 'molecular_charge': 0.0,; 'molecular_multiplicity': 1,; 'name': 'h2o',; 'provenance': {'creator': 'QCElemental', 'routine': 'qcelemental.molparse.from_string', 'version': 'v0.24.0'},; 'real': array([ True, True, True]),; 'units': 'Angstrom'}; 2022-03-28:21:06:47,455 INFO [psi4.driver.driver:751] Return gradient(): -76.02663273512434; 2022-03-28:21:06:47,455 INFO [psi4.driver.driver:752] [[-0. 0. -0.01764163]; [ 0. -0.01243841 0.00882081]; [-0. 0.01243841 0.00882081]]; ```. ## Questions; - [x] What should default loglevel be? Py default is WARN=30. That presently will produce an empty log file since psi4 starts with INFO=20. Present setup is 20 for psithon and 30 for psiapi. ANSWER: going with 20. ## Checklist; - [x] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2512
https://github.com/psi4/psi4/pull/2512:3301,Testability,Test,Tests,3301," 0.75906199, 0.52195302]),; 'mass': array([15.99491462, 1.00782503, 1.00782503]),; 'molecular_charge': 0.0,; 'molecular_multiplicity': 1,; 'name': 'h2o',; 'provenance': {'creator': 'QCElemental', 'routine': 'qcelemental.molparse.from_string', 'version': 'v0.24.0'},; 'real': array([ True, True, True]),; 'units': 'Angstrom'}; 2022-03-28:21:06:47,79 INFO [psi4.driver.driver:606] Return energy(): -76.0266327350908; 2022-03-28:21:06:47,83 INFO [psi4.driver.driver:748] Compute gradient(): method=scf, basis=cc-pvdz, molecule=h2o, nre=9.168193296424349; 2022-03-28:21:06:47,86 DEBUG [psi4.driver.driver:749] {'elbl': array(['', '', ''], dtype='<U1'),; 'elea': array([16, 1, 1]),; 'elem': array(['O', 'H', 'H'], dtype='<U1'),; 'elez': array([8, 1, 1]),; 'fix_com': False,; 'fix_orientation': False,; 'fragment_charges': [0.0],; 'fragment_multiplicities': [1],; 'fragment_separators': [],; 'geom': array([ 0. , 0. , -0.06577557, 0. , -0.75906199,; 0.52195302, 0. , 0.75906199, 0.52195302]),; 'mass': array([15.99491462, 1.00782503, 1.00782503]),; 'molecular_charge': 0.0,; 'molecular_multiplicity': 1,; 'name': 'h2o',; 'provenance': {'creator': 'QCElemental', 'routine': 'qcelemental.molparse.from_string', 'version': 'v0.24.0'},; 'real': array([ True, True, True]),; 'units': 'Angstrom'}; 2022-03-28:21:06:47,455 INFO [psi4.driver.driver:751] Return gradient(): -76.02663273512434; 2022-03-28:21:06:47,455 INFO [psi4.driver.driver:752] [[-0. 0. -0.01764163]; [ 0. -0.01243841 0.00882081]; [-0. 0.01243841 0.00882081]]; ```. ## Questions; - [x] What should default loglevel be? Py default is WARN=30. That presently will produce an empty log file since psi4 starts with INFO=20. Present setup is 20 for psithon and 30 for psiapi. ANSWER: going with 20. ## Checklist; - [x] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2512
https://github.com/psi4/psi4/pull/2512:3376,Testability,test,tests,3376," 0.75906199, 0.52195302]),; 'mass': array([15.99491462, 1.00782503, 1.00782503]),; 'molecular_charge': 0.0,; 'molecular_multiplicity': 1,; 'name': 'h2o',; 'provenance': {'creator': 'QCElemental', 'routine': 'qcelemental.molparse.from_string', 'version': 'v0.24.0'},; 'real': array([ True, True, True]),; 'units': 'Angstrom'}; 2022-03-28:21:06:47,79 INFO [psi4.driver.driver:606] Return energy(): -76.0266327350908; 2022-03-28:21:06:47,83 INFO [psi4.driver.driver:748] Compute gradient(): method=scf, basis=cc-pvdz, molecule=h2o, nre=9.168193296424349; 2022-03-28:21:06:47,86 DEBUG [psi4.driver.driver:749] {'elbl': array(['', '', ''], dtype='<U1'),; 'elea': array([16, 1, 1]),; 'elem': array(['O', 'H', 'H'], dtype='<U1'),; 'elez': array([8, 1, 1]),; 'fix_com': False,; 'fix_orientation': False,; 'fragment_charges': [0.0],; 'fragment_multiplicities': [1],; 'fragment_separators': [],; 'geom': array([ 0. , 0. , -0.06577557, 0. , -0.75906199,; 0.52195302, 0. , 0.75906199, 0.52195302]),; 'mass': array([15.99491462, 1.00782503, 1.00782503]),; 'molecular_charge': 0.0,; 'molecular_multiplicity': 1,; 'name': 'h2o',; 'provenance': {'creator': 'QCElemental', 'routine': 'qcelemental.molparse.from_string', 'version': 'v0.24.0'},; 'real': array([ True, True, True]),; 'units': 'Angstrom'}; 2022-03-28:21:06:47,455 INFO [psi4.driver.driver:751] Return gradient(): -76.02663273512434; 2022-03-28:21:06:47,455 INFO [psi4.driver.driver:752] [[-0. 0. -0.01764163]; [ 0. -0.01243841 0.00882081]; [-0. 0.01243841 0.00882081]]; ```. ## Questions; - [x] What should default loglevel be? Py default is WARN=30. That presently will produce an empty log file since psi4 starts with INFO=20. Present setup is 20 for psithon and 30 for psiapi. ANSWER: going with 20. ## Checklist; - [x] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2512
https://github.com/psi4/psi4/pull/2512:3467,Testability,test,tests,3467," 0.75906199, 0.52195302]),; 'mass': array([15.99491462, 1.00782503, 1.00782503]),; 'molecular_charge': 0.0,; 'molecular_multiplicity': 1,; 'name': 'h2o',; 'provenance': {'creator': 'QCElemental', 'routine': 'qcelemental.molparse.from_string', 'version': 'v0.24.0'},; 'real': array([ True, True, True]),; 'units': 'Angstrom'}; 2022-03-28:21:06:47,79 INFO [psi4.driver.driver:606] Return energy(): -76.0266327350908; 2022-03-28:21:06:47,83 INFO [psi4.driver.driver:748] Compute gradient(): method=scf, basis=cc-pvdz, molecule=h2o, nre=9.168193296424349; 2022-03-28:21:06:47,86 DEBUG [psi4.driver.driver:749] {'elbl': array(['', '', ''], dtype='<U1'),; 'elea': array([16, 1, 1]),; 'elem': array(['O', 'H', 'H'], dtype='<U1'),; 'elez': array([8, 1, 1]),; 'fix_com': False,; 'fix_orientation': False,; 'fragment_charges': [0.0],; 'fragment_multiplicities': [1],; 'fragment_separators': [],; 'geom': array([ 0. , 0. , -0.06577557, 0. , -0.75906199,; 0.52195302, 0. , 0.75906199, 0.52195302]),; 'mass': array([15.99491462, 1.00782503, 1.00782503]),; 'molecular_charge': 0.0,; 'molecular_multiplicity': 1,; 'name': 'h2o',; 'provenance': {'creator': 'QCElemental', 'routine': 'qcelemental.molparse.from_string', 'version': 'v0.24.0'},; 'real': array([ True, True, True]),; 'units': 'Angstrom'}; 2022-03-28:21:06:47,455 INFO [psi4.driver.driver:751] Return gradient(): -76.02663273512434; 2022-03-28:21:06:47,455 INFO [psi4.driver.driver:752] [[-0. 0. -0.01764163]; [ 0. -0.01243841 0.00882081]; [-0. 0.01243841 0.00882081]]; ```. ## Questions; - [x] What should default loglevel be? Py default is WARN=30. That presently will produce an empty log file since psi4 starts with INFO=20. Present setup is 20 for psithon and 30 for psiapi. ANSWER: going with 20. ## Checklist; - [x] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2512
https://github.com/psi4/psi4/pull/2513:238,Deployability,Update,Update,238,"## Description; `adcc` version of #2462, according to standard #2486. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Consolidate excitation energy/property variable names; - [x] Update tests:; - [x] port to pytest; - [x] test all access patterns; - [x] port PE-ADC tests; - [x] Update docs. ## Questions; - [x] Do I need to add the same kind of ""commented out"" lines as in #2462, @JonathonMisiewicz?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2513
https://github.com/psi4/psi4/pull/2513:338,Deployability,Update,Update,338,"## Description; `adcc` version of #2462, according to standard #2486. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Consolidate excitation energy/property variable names; - [x] Update tests:; - [x] port to pytest; - [x] test all access patterns; - [x] port PE-ADC tests; - [x] Update docs. ## Questions; - [x] Do I need to add the same kind of ""commented out"" lines as in #2462, @JonathonMisiewicz?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2513
https://github.com/psi4/psi4/pull/2513:200,Energy Efficiency,energy,energy,200,"## Description; `adcc` version of #2462, according to standard #2486. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Consolidate excitation energy/property variable names; - [x] Update tests:; - [x] port to pytest; - [x] test all access patterns; - [x] port PE-ADC tests; - [x] Update docs. ## Questions; - [x] Do I need to add the same kind of ""commented out"" lines as in #2462, @JonathonMisiewicz?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2513
https://github.com/psi4/psi4/pull/2513:216,Modifiability,variab,variable,216,"## Description; `adcc` version of #2462, according to standard #2486. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Consolidate excitation energy/property variable names; - [x] Update tests:; - [x] port to pytest; - [x] test all access patterns; - [x] port PE-ADC tests; - [x] Update docs. ## Questions; - [x] Do I need to add the same kind of ""commented out"" lines as in #2462, @JonathonMisiewicz?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2513
https://github.com/psi4/psi4/pull/2513:290,Security,access,access,290,"## Description; `adcc` version of #2462, according to standard #2486. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Consolidate excitation energy/property variable names; - [x] Update tests:; - [x] port to pytest; - [x] test all access patterns; - [x] port PE-ADC tests; - [x] Update docs. ## Questions; - [x] Do I need to add the same kind of ""commented out"" lines as in #2462, @JonathonMisiewicz?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2513
https://github.com/psi4/psi4/pull/2513:245,Testability,test,tests,245,"## Description; `adcc` version of #2462, according to standard #2486. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Consolidate excitation energy/property variable names; - [x] Update tests:; - [x] port to pytest; - [x] test all access patterns; - [x] port PE-ADC tests; - [x] Update docs. ## Questions; - [x] Do I need to add the same kind of ""commented out"" lines as in #2462, @JonathonMisiewicz?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2513
https://github.com/psi4/psi4/pull/2513:281,Testability,test,test,281,"## Description; `adcc` version of #2462, according to standard #2486. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Consolidate excitation energy/property variable names; - [x] Update tests:; - [x] port to pytest; - [x] test all access patterns; - [x] port PE-ADC tests; - [x] Update docs. ## Questions; - [x] Do I need to add the same kind of ""commented out"" lines as in #2462, @JonathonMisiewicz?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2513
https://github.com/psi4/psi4/pull/2513:325,Testability,test,tests,325,"## Description; `adcc` version of #2462, according to standard #2486. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Consolidate excitation energy/property variable names; - [x] Update tests:; - [x] port to pytest; - [x] test all access patterns; - [x] port PE-ADC tests; - [x] Update docs. ## Questions; - [x] Do I need to add the same kind of ""commented out"" lines as in #2462, @JonathonMisiewicz?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2513
https://github.com/psi4/psi4/pull/2513:481,Testability,Test,Tests,481,"## Description; `adcc` version of #2462, according to standard #2486. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Consolidate excitation energy/property variable names; - [x] Update tests:; - [x] port to pytest; - [x] test all access patterns; - [x] port PE-ADC tests; - [x] Update docs. ## Questions; - [x] Do I need to add the same kind of ""commented out"" lines as in #2462, @JonathonMisiewicz?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2513
https://github.com/psi4/psi4/pull/2513:555,Testability,test,tests,555,"## Description; `adcc` version of #2462, according to standard #2486. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Consolidate excitation energy/property variable names; - [x] Update tests:; - [x] port to pytest; - [x] test all access patterns; - [x] port PE-ADC tests; - [x] Update docs. ## Questions; - [x] Do I need to add the same kind of ""commented out"" lines as in #2462, @JonathonMisiewicz?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2513
https://github.com/psi4/psi4/pull/2513:646,Testability,test,tests,646,"## Description; `adcc` version of #2462, according to standard #2486. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Consolidate excitation energy/property variable names; - [x] Update tests:; - [x] port to pytest; - [x] test all access patterns; - [x] port PE-ADC tests; - [x] Update docs. ## Questions; - [x] Do I need to add the same kind of ""commented out"" lines as in #2462, @JonathonMisiewicz?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2513
https://github.com/psi4/psi4/pull/2514:207,Modifiability,variab,variable,207,"This PR exposes EOMCC oscillator strengths to psivars and makes other miscellaneous changes:. - Adds a comment to the TD-DFT code to disambiguate between eigenvectors of two different matrices.; - Renames a variable created earlier in the `cc` cleanup series.; - Makes the `oscillator_strength.cc` and `ex_oscillator_strength.cc` files more similar; - Begins changing `cc47` to newstyle.; - Adds refactor TODOs. **That said**, the EOMCC code currently only supports irrep-separated indexing. The irrep-combined indexing isn't easily obtainable due to the awkward way `cceom` passes information to `ccdensity`. While I could fix this, I'll save that until after `ccdensity` has a wavefunction, so the task becomes easier. I'm happy to make an issue so we don't forget. ## Checklist; - [x] Modified `cc47` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2514
https://github.com/psi4/psi4/pull/2514:396,Modifiability,refactor,refactor,396,"This PR exposes EOMCC oscillator strengths to psivars and makes other miscellaneous changes:. - Adds a comment to the TD-DFT code to disambiguate between eigenvectors of two different matrices.; - Renames a variable created earlier in the `cc` cleanup series.; - Makes the `oscillator_strength.cc` and `ex_oscillator_strength.cc` files more similar; - Begins changing `cc47` to newstyle.; - Adds refactor TODOs. **That said**, the EOMCC code currently only supports irrep-separated indexing. The irrep-combined indexing isn't easily obtainable due to the awkward way `cceom` passes information to `ccdensity`. While I could fix this, I'll save that until after `ccdensity` has a wavefunction, so the task becomes easier. I'm happy to make an issue so we don't forget. ## Checklist; - [x] Modified `cc47` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2514
https://github.com/psi4/psi4/pull/2514:8,Security,expose,exposes,8,"This PR exposes EOMCC oscillator strengths to psivars and makes other miscellaneous changes:. - Adds a comment to the TD-DFT code to disambiguate between eigenvectors of two different matrices.; - Renames a variable created earlier in the `cc` cleanup series.; - Makes the `oscillator_strength.cc` and `ex_oscillator_strength.cc` files more similar; - Begins changing `cc47` to newstyle.; - Adds refactor TODOs. **That said**, the EOMCC code currently only supports irrep-separated indexing. The irrep-combined indexing isn't easily obtainable due to the awkward way `cceom` passes information to `ccdensity`. While I could fix this, I'll save that until after `ccdensity` has a wavefunction, so the task becomes easier. I'm happy to make an issue so we don't forget. ## Checklist; - [x] Modified `cc47` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2514
https://github.com/psi4/psi4/pull/2515:1431,Deployability,update,update,1431,"where there's only one potential and both charges and locations are specified. Additionally, there's two related categories. F-SAPT can put _different_ external potentials on any of fragments A, B, C, which have been passed in as `energy(""fisapt"", external_potentials={""A"": extern, ...}, ...)`. Also nbody can take an array of charges (not locations) that replace fragments when the fragments are ghosted. These are passed as `energy(..., bsse_type=..., embedding_charges=[monoAchg, ...])`. Problems:; * formation of Python objects in the input file and special options setting doesn't translate to QCSchema, which is the sole means of communication for many calcs in DDD.; * the most common calc, the simple single extern has no kwarg-to-energy way to set; * the uncertainty in units of ExternalPotential can be confusing and has led to bugs. Also, in DDD, the spec order of mol and extern may not be so clear to set the units. This is No. 2 of the DDD series, #1351. ## Todos; - [x] Replace `QMMM()` with `QMMMbohr()` and issue an update guide if the former is called.; - [x] For the common single-extern case, switch to `energy(..., external_potentials=array` instead of `QMMM()` object. This tests whether the `external_potentials` value is an array for a single extern, which gets processed and set immediately, or a dict of externs, which gets handled by the run_fsapt later on.; - [x] relaxed the array spec by which externs are initialized. instead of `q, [x, y, z]` also allow `q, x, y, z`, which makes for very easy numpy processing for units transofmation.; - [x] removed all the units handling around ExternalPotential; - [x] docs . ## Questions; - [ ] ok to use external_potentials kwarg for both simple and fsapt multi frags use cases?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2515
https://github.com/psi4/psi4/pull/2515:77,Energy Efficiency,charge,charge,77,"## Description; The `psi4.core.ExternalPotential` object has long stored its charge locations in the same units as its BasisSet's Molecule. Also, the usual way of initializing it is by creating a `psi4.driver.qmmm.QMMM()` object and then doing the unusual `psi4.set_global_option_python(""EXTERN"", qmmmobj.extern)` to a field of that object. That's the situation for ""plain"" external charges calcs, where there's only one potential and both charges and locations are specified. Additionally, there's two related categories. F-SAPT can put _different_ external potentials on any of fragments A, B, C, which have been passed in as `energy(""fisapt"", external_potentials={""A"": extern, ...}, ...)`. Also nbody can take an array of charges (not locations) that replace fragments when the fragments are ghosted. These are passed as `energy(..., bsse_type=..., embedding_charges=[monoAchg, ...])`. Problems:; * formation of Python objects in the input file and special options setting doesn't translate to QCSchema, which is the sole means of communication for many calcs in DDD.; * the most common calc, the simple single extern has no kwarg-to-energy way to set; * the uncertainty in units of ExternalPotential can be confusing and has led to bugs. Also, in DDD, the spec order of mol and extern may not be so clear to set the units. This is No. 2 of the DDD series, #1351. ## Todos; - [x] Replace `QMMM()` with `QMMMbohr()` and issue an update guide if the former is called.; - [x] For the common single-extern case, switch to `energy(..., external_potentials=array` instead of `QMMM()` object. This tests whether the `external_potentials` value is an array for a single extern, which gets processed and set immediately, or a dict of externs, which gets handled by the run_fsapt later on.; - [x] relaxed the array spec by which externs are initialized. instead of `q, [x, y, z]` also allow `q, x, y, z`, which makes for very easy numpy processing for units transofmation.; - [x] removed all the units handli",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2515
https://github.com/psi4/psi4/pull/2515:383,Energy Efficiency,charge,charges,383,"## Description; The `psi4.core.ExternalPotential` object has long stored its charge locations in the same units as its BasisSet's Molecule. Also, the usual way of initializing it is by creating a `psi4.driver.qmmm.QMMM()` object and then doing the unusual `psi4.set_global_option_python(""EXTERN"", qmmmobj.extern)` to a field of that object. That's the situation for ""plain"" external charges calcs, where there's only one potential and both charges and locations are specified. Additionally, there's two related categories. F-SAPT can put _different_ external potentials on any of fragments A, B, C, which have been passed in as `energy(""fisapt"", external_potentials={""A"": extern, ...}, ...)`. Also nbody can take an array of charges (not locations) that replace fragments when the fragments are ghosted. These are passed as `energy(..., bsse_type=..., embedding_charges=[monoAchg, ...])`. Problems:; * formation of Python objects in the input file and special options setting doesn't translate to QCSchema, which is the sole means of communication for many calcs in DDD.; * the most common calc, the simple single extern has no kwarg-to-energy way to set; * the uncertainty in units of ExternalPotential can be confusing and has led to bugs. Also, in DDD, the spec order of mol and extern may not be so clear to set the units. This is No. 2 of the DDD series, #1351. ## Todos; - [x] Replace `QMMM()` with `QMMMbohr()` and issue an update guide if the former is called.; - [x] For the common single-extern case, switch to `energy(..., external_potentials=array` instead of `QMMM()` object. This tests whether the `external_potentials` value is an array for a single extern, which gets processed and set immediately, or a dict of externs, which gets handled by the run_fsapt later on.; - [x] relaxed the array spec by which externs are initialized. instead of `q, [x, y, z]` also allow `q, x, y, z`, which makes for very easy numpy processing for units transofmation.; - [x] removed all the units handli",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2515
https://github.com/psi4/psi4/pull/2515:440,Energy Efficiency,charge,charges,440,"## Description; The `psi4.core.ExternalPotential` object has long stored its charge locations in the same units as its BasisSet's Molecule. Also, the usual way of initializing it is by creating a `psi4.driver.qmmm.QMMM()` object and then doing the unusual `psi4.set_global_option_python(""EXTERN"", qmmmobj.extern)` to a field of that object. That's the situation for ""plain"" external charges calcs, where there's only one potential and both charges and locations are specified. Additionally, there's two related categories. F-SAPT can put _different_ external potentials on any of fragments A, B, C, which have been passed in as `energy(""fisapt"", external_potentials={""A"": extern, ...}, ...)`. Also nbody can take an array of charges (not locations) that replace fragments when the fragments are ghosted. These are passed as `energy(..., bsse_type=..., embedding_charges=[monoAchg, ...])`. Problems:; * formation of Python objects in the input file and special options setting doesn't translate to QCSchema, which is the sole means of communication for many calcs in DDD.; * the most common calc, the simple single extern has no kwarg-to-energy way to set; * the uncertainty in units of ExternalPotential can be confusing and has led to bugs. Also, in DDD, the spec order of mol and extern may not be so clear to set the units. This is No. 2 of the DDD series, #1351. ## Todos; - [x] Replace `QMMM()` with `QMMMbohr()` and issue an update guide if the former is called.; - [x] For the common single-extern case, switch to `energy(..., external_potentials=array` instead of `QMMM()` object. This tests whether the `external_potentials` value is an array for a single extern, which gets processed and set immediately, or a dict of externs, which gets handled by the run_fsapt later on.; - [x] relaxed the array spec by which externs are initialized. instead of `q, [x, y, z]` also allow `q, x, y, z`, which makes for very easy numpy processing for units transofmation.; - [x] removed all the units handli",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2515
https://github.com/psi4/psi4/pull/2515:629,Energy Efficiency,energy,energy,629,"## Description; The `psi4.core.ExternalPotential` object has long stored its charge locations in the same units as its BasisSet's Molecule. Also, the usual way of initializing it is by creating a `psi4.driver.qmmm.QMMM()` object and then doing the unusual `psi4.set_global_option_python(""EXTERN"", qmmmobj.extern)` to a field of that object. That's the situation for ""plain"" external charges calcs, where there's only one potential and both charges and locations are specified. Additionally, there's two related categories. F-SAPT can put _different_ external potentials on any of fragments A, B, C, which have been passed in as `energy(""fisapt"", external_potentials={""A"": extern, ...}, ...)`. Also nbody can take an array of charges (not locations) that replace fragments when the fragments are ghosted. These are passed as `energy(..., bsse_type=..., embedding_charges=[monoAchg, ...])`. Problems:; * formation of Python objects in the input file and special options setting doesn't translate to QCSchema, which is the sole means of communication for many calcs in DDD.; * the most common calc, the simple single extern has no kwarg-to-energy way to set; * the uncertainty in units of ExternalPotential can be confusing and has led to bugs. Also, in DDD, the spec order of mol and extern may not be so clear to set the units. This is No. 2 of the DDD series, #1351. ## Todos; - [x] Replace `QMMM()` with `QMMMbohr()` and issue an update guide if the former is called.; - [x] For the common single-extern case, switch to `energy(..., external_potentials=array` instead of `QMMM()` object. This tests whether the `external_potentials` value is an array for a single extern, which gets processed and set immediately, or a dict of externs, which gets handled by the run_fsapt later on.; - [x] relaxed the array spec by which externs are initialized. instead of `q, [x, y, z]` also allow `q, x, y, z`, which makes for very easy numpy processing for units transofmation.; - [x] removed all the units handli",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2515
https://github.com/psi4/psi4/pull/2515:725,Energy Efficiency,charge,charges,725,"## Description; The `psi4.core.ExternalPotential` object has long stored its charge locations in the same units as its BasisSet's Molecule. Also, the usual way of initializing it is by creating a `psi4.driver.qmmm.QMMM()` object and then doing the unusual `psi4.set_global_option_python(""EXTERN"", qmmmobj.extern)` to a field of that object. That's the situation for ""plain"" external charges calcs, where there's only one potential and both charges and locations are specified. Additionally, there's two related categories. F-SAPT can put _different_ external potentials on any of fragments A, B, C, which have been passed in as `energy(""fisapt"", external_potentials={""A"": extern, ...}, ...)`. Also nbody can take an array of charges (not locations) that replace fragments when the fragments are ghosted. These are passed as `energy(..., bsse_type=..., embedding_charges=[monoAchg, ...])`. Problems:; * formation of Python objects in the input file and special options setting doesn't translate to QCSchema, which is the sole means of communication for many calcs in DDD.; * the most common calc, the simple single extern has no kwarg-to-energy way to set; * the uncertainty in units of ExternalPotential can be confusing and has led to bugs. Also, in DDD, the spec order of mol and extern may not be so clear to set the units. This is No. 2 of the DDD series, #1351. ## Todos; - [x] Replace `QMMM()` with `QMMMbohr()` and issue an update guide if the former is called.; - [x] For the common single-extern case, switch to `energy(..., external_potentials=array` instead of `QMMM()` object. This tests whether the `external_potentials` value is an array for a single extern, which gets processed and set immediately, or a dict of externs, which gets handled by the run_fsapt later on.; - [x] relaxed the array spec by which externs are initialized. instead of `q, [x, y, z]` also allow `q, x, y, z`, which makes for very easy numpy processing for units transofmation.; - [x] removed all the units handli",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2515
https://github.com/psi4/psi4/pull/2515:825,Energy Efficiency,energy,energy,825,"## Description; The `psi4.core.ExternalPotential` object has long stored its charge locations in the same units as its BasisSet's Molecule. Also, the usual way of initializing it is by creating a `psi4.driver.qmmm.QMMM()` object and then doing the unusual `psi4.set_global_option_python(""EXTERN"", qmmmobj.extern)` to a field of that object. That's the situation for ""plain"" external charges calcs, where there's only one potential and both charges and locations are specified. Additionally, there's two related categories. F-SAPT can put _different_ external potentials on any of fragments A, B, C, which have been passed in as `energy(""fisapt"", external_potentials={""A"": extern, ...}, ...)`. Also nbody can take an array of charges (not locations) that replace fragments when the fragments are ghosted. These are passed as `energy(..., bsse_type=..., embedding_charges=[monoAchg, ...])`. Problems:; * formation of Python objects in the input file and special options setting doesn't translate to QCSchema, which is the sole means of communication for many calcs in DDD.; * the most common calc, the simple single extern has no kwarg-to-energy way to set; * the uncertainty in units of ExternalPotential can be confusing and has led to bugs. Also, in DDD, the spec order of mol and extern may not be so clear to set the units. This is No. 2 of the DDD series, #1351. ## Todos; - [x] Replace `QMMM()` with `QMMMbohr()` and issue an update guide if the former is called.; - [x] For the common single-extern case, switch to `energy(..., external_potentials=array` instead of `QMMM()` object. This tests whether the `external_potentials` value is an array for a single extern, which gets processed and set immediately, or a dict of externs, which gets handled by the run_fsapt later on.; - [x] relaxed the array spec by which externs are initialized. instead of `q, [x, y, z]` also allow `q, x, y, z`, which makes for very easy numpy processing for units transofmation.; - [x] removed all the units handli",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2515
https://github.com/psi4/psi4/pull/2515:1137,Energy Efficiency,energy,energy,1137," way of initializing it is by creating a `psi4.driver.qmmm.QMMM()` object and then doing the unusual `psi4.set_global_option_python(""EXTERN"", qmmmobj.extern)` to a field of that object. That's the situation for ""plain"" external charges calcs, where there's only one potential and both charges and locations are specified. Additionally, there's two related categories. F-SAPT can put _different_ external potentials on any of fragments A, B, C, which have been passed in as `energy(""fisapt"", external_potentials={""A"": extern, ...}, ...)`. Also nbody can take an array of charges (not locations) that replace fragments when the fragments are ghosted. These are passed as `energy(..., bsse_type=..., embedding_charges=[monoAchg, ...])`. Problems:; * formation of Python objects in the input file and special options setting doesn't translate to QCSchema, which is the sole means of communication for many calcs in DDD.; * the most common calc, the simple single extern has no kwarg-to-energy way to set; * the uncertainty in units of ExternalPotential can be confusing and has led to bugs. Also, in DDD, the spec order of mol and extern may not be so clear to set the units. This is No. 2 of the DDD series, #1351. ## Todos; - [x] Replace `QMMM()` with `QMMMbohr()` and issue an update guide if the former is called.; - [x] For the common single-extern case, switch to `energy(..., external_potentials=array` instead of `QMMM()` object. This tests whether the `external_potentials` value is an array for a single extern, which gets processed and set immediately, or a dict of externs, which gets handled by the run_fsapt later on.; - [x] relaxed the array spec by which externs are initialized. instead of `q, [x, y, z]` also allow `q, x, y, z`, which makes for very easy numpy processing for units transofmation.; - [x] removed all the units handling around ExternalPotential; - [x] docs . ## Questions; - [ ] ok to use external_potentials kwarg for both simple and fsapt multi frags use cases?. ## Chec",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2515
https://github.com/psi4/psi4/pull/2515:1522,Energy Efficiency,energy,energy,1522,"where there's only one potential and both charges and locations are specified. Additionally, there's two related categories. F-SAPT can put _different_ external potentials on any of fragments A, B, C, which have been passed in as `energy(""fisapt"", external_potentials={""A"": extern, ...}, ...)`. Also nbody can take an array of charges (not locations) that replace fragments when the fragments are ghosted. These are passed as `energy(..., bsse_type=..., embedding_charges=[monoAchg, ...])`. Problems:; * formation of Python objects in the input file and special options setting doesn't translate to QCSchema, which is the sole means of communication for many calcs in DDD.; * the most common calc, the simple single extern has no kwarg-to-energy way to set; * the uncertainty in units of ExternalPotential can be confusing and has led to bugs. Also, in DDD, the spec order of mol and extern may not be so clear to set the units. This is No. 2 of the DDD series, #1351. ## Todos; - [x] Replace `QMMM()` with `QMMMbohr()` and issue an update guide if the former is called.; - [x] For the common single-extern case, switch to `energy(..., external_potentials=array` instead of `QMMM()` object. This tests whether the `external_potentials` value is an array for a single extern, which gets processed and set immediately, or a dict of externs, which gets handled by the run_fsapt later on.; - [x] relaxed the array spec by which externs are initialized. instead of `q, [x, y, z]` also allow `q, x, y, z`, which makes for very easy numpy processing for units transofmation.; - [x] removed all the units handling around ExternalPotential; - [x] docs . ## Questions; - [ ] ok to use external_potentials kwarg for both simple and fsapt multi frags use cases?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2515
https://github.com/psi4/psi4/pull/2515:1594,Testability,test,tests,1594,"where there's only one potential and both charges and locations are specified. Additionally, there's two related categories. F-SAPT can put _different_ external potentials on any of fragments A, B, C, which have been passed in as `energy(""fisapt"", external_potentials={""A"": extern, ...}, ...)`. Also nbody can take an array of charges (not locations) that replace fragments when the fragments are ghosted. These are passed as `energy(..., bsse_type=..., embedding_charges=[monoAchg, ...])`. Problems:; * formation of Python objects in the input file and special options setting doesn't translate to QCSchema, which is the sole means of communication for many calcs in DDD.; * the most common calc, the simple single extern has no kwarg-to-energy way to set; * the uncertainty in units of ExternalPotential can be confusing and has led to bugs. Also, in DDD, the spec order of mol and extern may not be so clear to set the units. This is No. 2 of the DDD series, #1351. ## Todos; - [x] Replace `QMMM()` with `QMMMbohr()` and issue an update guide if the former is called.; - [x] For the common single-extern case, switch to `energy(..., external_potentials=array` instead of `QMMM()` object. This tests whether the `external_potentials` value is an array for a single extern, which gets processed and set immediately, or a dict of externs, which gets handled by the run_fsapt later on.; - [x] relaxed the array spec by which externs are initialized. instead of `q, [x, y, z]` also allow `q, x, y, z`, which makes for very easy numpy processing for units transofmation.; - [x] removed all the units handling around ExternalPotential; - [x] docs . ## Questions; - [ ] ok to use external_potentials kwarg for both simple and fsapt multi frags use cases?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2515
https://github.com/psi4/psi4/pull/2515:2169,Testability,Test,Tests,2169,"where there's only one potential and both charges and locations are specified. Additionally, there's two related categories. F-SAPT can put _different_ external potentials on any of fragments A, B, C, which have been passed in as `energy(""fisapt"", external_potentials={""A"": extern, ...}, ...)`. Also nbody can take an array of charges (not locations) that replace fragments when the fragments are ghosted. These are passed as `energy(..., bsse_type=..., embedding_charges=[monoAchg, ...])`. Problems:; * formation of Python objects in the input file and special options setting doesn't translate to QCSchema, which is the sole means of communication for many calcs in DDD.; * the most common calc, the simple single extern has no kwarg-to-energy way to set; * the uncertainty in units of ExternalPotential can be confusing and has led to bugs. Also, in DDD, the spec order of mol and extern may not be so clear to set the units. This is No. 2 of the DDD series, #1351. ## Todos; - [x] Replace `QMMM()` with `QMMMbohr()` and issue an update guide if the former is called.; - [x] For the common single-extern case, switch to `energy(..., external_potentials=array` instead of `QMMM()` object. This tests whether the `external_potentials` value is an array for a single extern, which gets processed and set immediately, or a dict of externs, which gets handled by the run_fsapt later on.; - [x] relaxed the array spec by which externs are initialized. instead of `q, [x, y, z]` also allow `q, x, y, z`, which makes for very easy numpy processing for units transofmation.; - [x] removed all the units handling around ExternalPotential; - [x] docs . ## Questions; - [ ] ok to use external_potentials kwarg for both simple and fsapt multi frags use cases?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2515
https://github.com/psi4/psi4/pull/2515:2243,Testability,test,tests,2243,"where there's only one potential and both charges and locations are specified. Additionally, there's two related categories. F-SAPT can put _different_ external potentials on any of fragments A, B, C, which have been passed in as `energy(""fisapt"", external_potentials={""A"": extern, ...}, ...)`. Also nbody can take an array of charges (not locations) that replace fragments when the fragments are ghosted. These are passed as `energy(..., bsse_type=..., embedding_charges=[monoAchg, ...])`. Problems:; * formation of Python objects in the input file and special options setting doesn't translate to QCSchema, which is the sole means of communication for many calcs in DDD.; * the most common calc, the simple single extern has no kwarg-to-energy way to set; * the uncertainty in units of ExternalPotential can be confusing and has led to bugs. Also, in DDD, the spec order of mol and extern may not be so clear to set the units. This is No. 2 of the DDD series, #1351. ## Todos; - [x] Replace `QMMM()` with `QMMMbohr()` and issue an update guide if the former is called.; - [x] For the common single-extern case, switch to `energy(..., external_potentials=array` instead of `QMMM()` object. This tests whether the `external_potentials` value is an array for a single extern, which gets processed and set immediately, or a dict of externs, which gets handled by the run_fsapt later on.; - [x] relaxed the array spec by which externs are initialized. instead of `q, [x, y, z]` also allow `q, x, y, z`, which makes for very easy numpy processing for units transofmation.; - [x] removed all the units handling around ExternalPotential; - [x] docs . ## Questions; - [ ] ok to use external_potentials kwarg for both simple and fsapt multi frags use cases?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2515
https://github.com/psi4/psi4/pull/2515:2334,Testability,test,tests,2334,"where there's only one potential and both charges and locations are specified. Additionally, there's two related categories. F-SAPT can put _different_ external potentials on any of fragments A, B, C, which have been passed in as `energy(""fisapt"", external_potentials={""A"": extern, ...}, ...)`. Also nbody can take an array of charges (not locations) that replace fragments when the fragments are ghosted. These are passed as `energy(..., bsse_type=..., embedding_charges=[monoAchg, ...])`. Problems:; * formation of Python objects in the input file and special options setting doesn't translate to QCSchema, which is the sole means of communication for many calcs in DDD.; * the most common calc, the simple single extern has no kwarg-to-energy way to set; * the uncertainty in units of ExternalPotential can be confusing and has led to bugs. Also, in DDD, the spec order of mol and extern may not be so clear to set the units. This is No. 2 of the DDD series, #1351. ## Todos; - [x] Replace `QMMM()` with `QMMMbohr()` and issue an update guide if the former is called.; - [x] For the common single-extern case, switch to `energy(..., external_potentials=array` instead of `QMMM()` object. This tests whether the `external_potentials` value is an array for a single extern, which gets processed and set immediately, or a dict of externs, which gets handled by the run_fsapt later on.; - [x] relaxed the array spec by which externs are initialized. instead of `q, [x, y, z]` also allow `q, x, y, z`, which makes for very easy numpy processing for units transofmation.; - [x] removed all the units handling around ExternalPotential; - [x] docs . ## Questions; - [ ] ok to use external_potentials kwarg for both simple and fsapt multi frags use cases?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2515
https://github.com/psi4/psi4/pull/2515:1100,Usability,simpl,simple,1100," way of initializing it is by creating a `psi4.driver.qmmm.QMMM()` object and then doing the unusual `psi4.set_global_option_python(""EXTERN"", qmmmobj.extern)` to a field of that object. That's the situation for ""plain"" external charges calcs, where there's only one potential and both charges and locations are specified. Additionally, there's two related categories. F-SAPT can put _different_ external potentials on any of fragments A, B, C, which have been passed in as `energy(""fisapt"", external_potentials={""A"": extern, ...}, ...)`. Also nbody can take an array of charges (not locations) that replace fragments when the fragments are ghosted. These are passed as `energy(..., bsse_type=..., embedding_charges=[monoAchg, ...])`. Problems:; * formation of Python objects in the input file and special options setting doesn't translate to QCSchema, which is the sole means of communication for many calcs in DDD.; * the most common calc, the simple single extern has no kwarg-to-energy way to set; * the uncertainty in units of ExternalPotential can be confusing and has led to bugs. Also, in DDD, the spec order of mol and extern may not be so clear to set the units. This is No. 2 of the DDD series, #1351. ## Todos; - [x] Replace `QMMM()` with `QMMMbohr()` and issue an update guide if the former is called.; - [x] For the common single-extern case, switch to `energy(..., external_potentials=array` instead of `QMMM()` object. This tests whether the `external_potentials` value is an array for a single extern, which gets processed and set immediately, or a dict of externs, which gets handled by the run_fsapt later on.; - [x] relaxed the array spec by which externs are initialized. instead of `q, [x, y, z]` also allow `q, x, y, z`, which makes for very easy numpy processing for units transofmation.; - [x] removed all the units handling around ExternalPotential; - [x] docs . ## Questions; - [ ] ok to use external_potentials kwarg for both simple and fsapt multi frags use cases?. ## Chec",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2515
https://github.com/psi4/psi4/pull/2515:1303,Usability,clear,clear,1303,"hon(""EXTERN"", qmmmobj.extern)` to a field of that object. That's the situation for ""plain"" external charges calcs, where there's only one potential and both charges and locations are specified. Additionally, there's two related categories. F-SAPT can put _different_ external potentials on any of fragments A, B, C, which have been passed in as `energy(""fisapt"", external_potentials={""A"": extern, ...}, ...)`. Also nbody can take an array of charges (not locations) that replace fragments when the fragments are ghosted. These are passed as `energy(..., bsse_type=..., embedding_charges=[monoAchg, ...])`. Problems:; * formation of Python objects in the input file and special options setting doesn't translate to QCSchema, which is the sole means of communication for many calcs in DDD.; * the most common calc, the simple single extern has no kwarg-to-energy way to set; * the uncertainty in units of ExternalPotential can be confusing and has led to bugs. Also, in DDD, the spec order of mol and extern may not be so clear to set the units. This is No. 2 of the DDD series, #1351. ## Todos; - [x] Replace `QMMM()` with `QMMMbohr()` and issue an update guide if the former is called.; - [x] For the common single-extern case, switch to `energy(..., external_potentials=array` instead of `QMMM()` object. This tests whether the `external_potentials` value is an array for a single extern, which gets processed and set immediately, or a dict of externs, which gets handled by the run_fsapt later on.; - [x] relaxed the array spec by which externs are initialized. instead of `q, [x, y, z]` also allow `q, x, y, z`, which makes for very easy numpy processing for units transofmation.; - [x] removed all the units handling around ExternalPotential; - [x] docs . ## Questions; - [ ] ok to use external_potentials kwarg for both simple and fsapt multi frags use cases?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2515
https://github.com/psi4/psi4/pull/2515:1438,Usability,guid,guide,1438,"where there's only one potential and both charges and locations are specified. Additionally, there's two related categories. F-SAPT can put _different_ external potentials on any of fragments A, B, C, which have been passed in as `energy(""fisapt"", external_potentials={""A"": extern, ...}, ...)`. Also nbody can take an array of charges (not locations) that replace fragments when the fragments are ghosted. These are passed as `energy(..., bsse_type=..., embedding_charges=[monoAchg, ...])`. Problems:; * formation of Python objects in the input file and special options setting doesn't translate to QCSchema, which is the sole means of communication for many calcs in DDD.; * the most common calc, the simple single extern has no kwarg-to-energy way to set; * the uncertainty in units of ExternalPotential can be confusing and has led to bugs. Also, in DDD, the spec order of mol and extern may not be so clear to set the units. This is No. 2 of the DDD series, #1351. ## Todos; - [x] Replace `QMMM()` with `QMMMbohr()` and issue an update guide if the former is called.; - [x] For the common single-extern case, switch to `energy(..., external_potentials=array` instead of `QMMM()` object. This tests whether the `external_potentials` value is an array for a single extern, which gets processed and set immediately, or a dict of externs, which gets handled by the run_fsapt later on.; - [x] relaxed the array spec by which externs are initialized. instead of `q, [x, y, z]` also allow `q, x, y, z`, which makes for very easy numpy processing for units transofmation.; - [x] removed all the units handling around ExternalPotential; - [x] docs . ## Questions; - [ ] ok to use external_potentials kwarg for both simple and fsapt multi frags use cases?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2515
https://github.com/psi4/psi4/pull/2515:2108,Usability,simpl,simple,2108,"where there's only one potential and both charges and locations are specified. Additionally, there's two related categories. F-SAPT can put _different_ external potentials on any of fragments A, B, C, which have been passed in as `energy(""fisapt"", external_potentials={""A"": extern, ...}, ...)`. Also nbody can take an array of charges (not locations) that replace fragments when the fragments are ghosted. These are passed as `energy(..., bsse_type=..., embedding_charges=[monoAchg, ...])`. Problems:; * formation of Python objects in the input file and special options setting doesn't translate to QCSchema, which is the sole means of communication for many calcs in DDD.; * the most common calc, the simple single extern has no kwarg-to-energy way to set; * the uncertainty in units of ExternalPotential can be confusing and has led to bugs. Also, in DDD, the spec order of mol and extern may not be so clear to set the units. This is No. 2 of the DDD series, #1351. ## Todos; - [x] Replace `QMMM()` with `QMMMbohr()` and issue an update guide if the former is called.; - [x] For the common single-extern case, switch to `energy(..., external_potentials=array` instead of `QMMM()` object. This tests whether the `external_potentials` value is an array for a single extern, which gets processed and set immediately, or a dict of externs, which gets handled by the run_fsapt later on.; - [x] relaxed the array spec by which externs are initialized. instead of `q, [x, y, z]` also allow `q, x, y, z`, which makes for very easy numpy processing for units transofmation.; - [x] removed all the units handling around ExternalPotential; - [x] docs . ## Questions; - [ ] ok to use external_potentials kwarg for both simple and fsapt multi frags use cases?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2515
https://github.com/psi4/psi4/pull/2517:364,Availability,avail,available,364,"## Description; This PR entirely removes the Obara-Saika code for one-electron integrals. Note that, as explained in #2473, the *unique* `PseudoSpectralInt` functionality (erf integrals) is not used anywhere in Psi right now, so it can be safely removed. Once the problems with L2 (which currently put #2473 on hold) are sorted out, this functionality will become available. **Merge button click** reserved for @andysim. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Remove `osrecur.{cc,h}`; - [x] Remove `PseudoSpectralInt` (will be reconciled in #2473). ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2517
https://github.com/psi4/psi4/pull/2517:239,Safety,safe,safely,239,"## Description; This PR entirely removes the Obara-Saika code for one-electron integrals. Note that, as explained in #2473, the *unique* `PseudoSpectralInt` functionality (erf integrals) is not used anywhere in Psi right now, so it can be safely removed. Once the problems with L2 (which currently put #2473 on hold) are sorted out, this functionality will become available. **Merge button click** reserved for @andysim. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Remove `osrecur.{cc,h}`; - [x] Remove `PseudoSpectralInt` (will be reconciled in #2473). ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2517
https://github.com/psi4/psi4/pull/2517:637,Testability,Test,Tests,637,"## Description; This PR entirely removes the Obara-Saika code for one-electron integrals. Note that, as explained in #2473, the *unique* `PseudoSpectralInt` functionality (erf integrals) is not used anywhere in Psi right now, so it can be safely removed. Once the problems with L2 (which currently put #2473 on hold) are sorted out, this functionality will become available. **Merge button click** reserved for @andysim. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Remove `osrecur.{cc,h}`; - [x] Remove `PseudoSpectralInt` (will be reconciled in #2473). ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2517
https://github.com/psi4/psi4/pull/2517:711,Testability,test,tests,711,"## Description; This PR entirely removes the Obara-Saika code for one-electron integrals. Note that, as explained in #2473, the *unique* `PseudoSpectralInt` functionality (erf integrals) is not used anywhere in Psi right now, so it can be safely removed. Once the problems with L2 (which currently put #2473 on hold) are sorted out, this functionality will become available. **Merge button click** reserved for @andysim. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Remove `osrecur.{cc,h}`; - [x] Remove `PseudoSpectralInt` (will be reconciled in #2473). ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2517
https://github.com/psi4/psi4/pull/2517:802,Testability,test,tests,802,"## Description; This PR entirely removes the Obara-Saika code for one-electron integrals. Note that, as explained in #2473, the *unique* `PseudoSpectralInt` functionality (erf integrals) is not used anywhere in Psi right now, so it can be safely removed. Once the problems with L2 (which currently put #2473 on hold) are sorted out, this functionality will become available. **Merge button click** reserved for @andysim. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Remove `osrecur.{cc,h}`; - [x] Remove `PseudoSpectralInt` (will be reconciled in #2473). ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2517
https://github.com/psi4/psi4/pull/2518:372,Testability,Test,Tests,372,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. This is No. 3 of the DDD series, #1351. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] hopefully gets Win conda pkg building again with right pytest; - [x] a few easy formatting improvements, typos from DDD PR. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) full suite passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2518
https://github.com/psi4/psi4/pull/2518:447,Testability,test,tests,447,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. This is No. 3 of the DDD series, #1351. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] hopefully gets Win conda pkg building again with right pytest; - [x] a few easy formatting improvements, typos from DDD PR. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) full suite passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2518
https://github.com/psi4/psi4/pull/2518:538,Testability,test,tests,538,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. This is No. 3 of the DDD series, #1351. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] hopefully gets Win conda pkg building again with right pytest; - [x] a few easy formatting improvements, typos from DDD PR. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) full suite passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2518
https://github.com/psi4/psi4/issues/2519:784,Integrability,depend,dependent,784,"The `cc` module [has](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/diis.cc) [a](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/diis_RHF.cc) [habit](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/diis_ROHF.cc) [of](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/diis_UHF.cc) [rewriting](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/cclambda/diis.cc) [DIIS](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccresponse/diis.cc) when they really should [just use `libdiis`.](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libdiis/diismanager.h). In addition to code cleanup, I predict an important practical benefit. The central code uses Rob Parrish tricks to treat linearly dependent matrices. In my experience during the DIIS refactor, these often arise close to convergence. So by refactoring this, we can allow for effective DIIS even for tight convergence of the `cc` equations. I have [reason to believe](https://github.com/psi4/psi4archive/commit/2b2eb6c5a710dde180b1ef7a050012069afeae8d) this has a great to deal to do with anomalies in `cc55`. Don't even think about taking this until after #943 is closed.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2519
https://github.com/psi4/psi4/issues/2519:837,Modifiability,refactor,refactor,837,"The `cc` module [has](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/diis.cc) [a](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/diis_RHF.cc) [habit](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/diis_ROHF.cc) [of](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/diis_UHF.cc) [rewriting](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/cclambda/diis.cc) [DIIS](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccresponse/diis.cc) when they really should [just use `libdiis`.](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libdiis/diismanager.h). In addition to code cleanup, I predict an important practical benefit. The central code uses Rob Parrish tricks to treat linearly dependent matrices. In my experience during the DIIS refactor, these often arise close to convergence. So by refactoring this, we can allow for effective DIIS even for tight convergence of the `cc` equations. I have [reason to believe](https://github.com/psi4/psi4archive/commit/2b2eb6c5a710dde180b1ef7a050012069afeae8d) this has a great to deal to do with anomalies in `cc55`. Don't even think about taking this until after #943 is closed.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2519
https://github.com/psi4/psi4/issues/2519:893,Modifiability,refactor,refactoring,893,"The `cc` module [has](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/diis.cc) [a](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/diis_RHF.cc) [habit](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/diis_ROHF.cc) [of](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/diis_UHF.cc) [rewriting](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/cclambda/diis.cc) [DIIS](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccresponse/diis.cc) when they really should [just use `libdiis`.](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libdiis/diismanager.h). In addition to code cleanup, I predict an important practical benefit. The central code uses Rob Parrish tricks to treat linearly dependent matrices. In my experience during the DIIS refactor, these often arise close to convergence. So by refactoring this, we can allow for effective DIIS even for tight convergence of the `cc` equations. I have [reason to believe](https://github.com/psi4/psi4archive/commit/2b2eb6c5a710dde180b1ef7a050012069afeae8d) this has a great to deal to do with anomalies in `cc55`. Don't even think about taking this until after #943 is closed.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2519
https://github.com/psi4/psi4/issues/2519:685,Safety,predict,predict,685,"The `cc` module [has](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/diis.cc) [a](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/diis_RHF.cc) [habit](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/diis_ROHF.cc) [of](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/diis_UHF.cc) [rewriting](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/cclambda/diis.cc) [DIIS](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccresponse/diis.cc) when they really should [just use `libdiis`.](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libdiis/diismanager.h). In addition to code cleanup, I predict an important practical benefit. The central code uses Rob Parrish tricks to treat linearly dependent matrices. In my experience during the DIIS refactor, these often arise close to convergence. So by refactoring this, we can allow for effective DIIS even for tight convergence of the `cc` equations. I have [reason to believe](https://github.com/psi4/psi4archive/commit/2b2eb6c5a710dde180b1ef7a050012069afeae8d) this has a great to deal to do with anomalies in `cc55`. Don't even think about taking this until after #943 is closed.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2519
https://github.com/psi4/psi4/issues/2520:198,Testability,test,tests,198,"The `cc` module [forcibly stops users](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L3149-L3152) from requesting tight convergence out of `cclambda`, so as not to [break tests](https://github.com/psi4/psi4archive/commit/2b2eb6c5a710dde180b1ef7a050012069afeae8d). That's bad. Deal with #2519 first.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2520
https://github.com/psi4/psi4/issues/2522:118,Testability,test,tests,118,"When doing multiple `cclambda` runs, the [closing RMS from the previous run](https://github.com/psi4/psi4/blob/master/tests/cc55/output.ref#L1113) is printed as the [opening RMS for the next run](https://github.com/psi4/psi4/blob/master/tests/cc55/output.ref#L1113). That's wrong. The opening RMS should just be zero, like it is for the first run. #943 first, yet again.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2522
https://github.com/psi4/psi4/issues/2522:237,Testability,test,tests,237,"When doing multiple `cclambda` runs, the [closing RMS from the previous run](https://github.com/psi4/psi4/blob/master/tests/cc55/output.ref#L1113) is printed as the [opening RMS for the next run](https://github.com/psi4/psi4/blob/master/tests/cc55/output.ref#L1113). That's wrong. The opening RMS should just be zero, like it is for the first run. #943 first, yet again.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2522
https://github.com/psi4/psi4/issues/2524:695,Usability,clear,clear,695,"Consider the following input:; ```; molecule h2o {; 1 2; O; H 1 1; H 1 1 2 104.5; }. set {; reference uhf; basis cc-pVDZ; freeze_core true; roots_per_irrep [0, 1, 1, 0]; }. wfn = properties('eom-ccsd', properties=['oscillator_strength'], return_wfn=True)[1]; ```. This calls for a B1 ground state, a B1 excited state, and an A2 excited state. The CC code prints out; `Oscillator Strength for 1 B2`; `Oscillator Strength for 1 A1`; `Oscillator Strength for 1 A1 to 1 B2`. Everything is expressed in terms of _transition_ symmetries. This took me a while to work out and is especially unhelpful for transitions between excited states. The symmetry labeling needs to be thoroughly scrubbed so it's clear when state symmetries are meant, and when transition symmetries are meant.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2524
https://github.com/psi4/psi4/pull/2525:24,Security,expose,exposes,24,"## Description; This PR exposes Einstein Coefficients and Rotary Strengths to `psivar`. As of this PR, cc tests 1-33, 35-45, 47, 49-53, 55-56 are ported. Four tests to go. I'm not ultimately happy with these tests (see the six issues I filed this evening), but it's as good as we have right now. ## Questions; - [x] **Please confirm the descriptions and units of the glossary additions.**. ## Checklist; - [x] Newly added tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2525
https://github.com/psi4/psi4/pull/2525:106,Testability,test,tests,106,"## Description; This PR exposes Einstein Coefficients and Rotary Strengths to `psivar`. As of this PR, cc tests 1-33, 35-45, 47, 49-53, 55-56 are ported. Four tests to go. I'm not ultimately happy with these tests (see the six issues I filed this evening), but it's as good as we have right now. ## Questions; - [x] **Please confirm the descriptions and units of the glossary additions.**. ## Checklist; - [x] Newly added tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2525
https://github.com/psi4/psi4/pull/2525:159,Testability,test,tests,159,"## Description; This PR exposes Einstein Coefficients and Rotary Strengths to `psivar`. As of this PR, cc tests 1-33, 35-45, 47, 49-53, 55-56 are ported. Four tests to go. I'm not ultimately happy with these tests (see the six issues I filed this evening), but it's as good as we have right now. ## Questions; - [x] **Please confirm the descriptions and units of the glossary additions.**. ## Checklist; - [x] Newly added tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2525
https://github.com/psi4/psi4/pull/2525:208,Testability,test,tests,208,"## Description; This PR exposes Einstein Coefficients and Rotary Strengths to `psivar`. As of this PR, cc tests 1-33, 35-45, 47, 49-53, 55-56 are ported. Four tests to go. I'm not ultimately happy with these tests (see the six issues I filed this evening), but it's as good as we have right now. ## Questions; - [x] **Please confirm the descriptions and units of the glossary additions.**. ## Checklist; - [x] Newly added tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2525
https://github.com/psi4/psi4/pull/2525:422,Testability,test,tests,422,"## Description; This PR exposes Einstein Coefficients and Rotary Strengths to `psivar`. As of this PR, cc tests 1-33, 35-45, 47, 49-53, 55-56 are ported. Four tests to go. I'm not ultimately happy with these tests (see the six issues I filed this evening), but it's as good as we have right now. ## Questions; - [x] **Please confirm the descriptions and units of the glossary additions.**. ## Checklist; - [x] Newly added tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2525
https://github.com/psi4/psi4/pull/2526:790,Testability,test,test,790,"## Description; Start rearranging CBS for DDD. This is No. 4 of the DDD series, #1351. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] DON'T LOOK AT THE FIRST COMMIT -- it's just moving code around. the second commit is a nice diff to review; - [x] add typing and consolidate the docstring improvements between master and ddd for the cbs xtpl fns; - [x] switch the array xtpl computation from core.Matrix to np.ndarray. here, the data enters and leaves as Matrix, but in ddd, it'll be pure ndarray; - [x] modernize and improve printing in xtpl fns. ## BugFix; - [x] @PeterKraus, you're confident on this bug https://github.com/psi4/psi4/pull/1351/files#r441933046 ? I've fixed it here and altered the reference values in the alpha test without investigating the correction. Applies to Karton 2-point SCF extrapolation. ## Checklist; - [x] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2526
https://github.com/psi4/psi4/pull/2526:899,Testability,Test,Tests,899,"## Description; Start rearranging CBS for DDD. This is No. 4 of the DDD series, #1351. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] DON'T LOOK AT THE FIRST COMMIT -- it's just moving code around. the second commit is a nice diff to review; - [x] add typing and consolidate the docstring improvements between master and ddd for the cbs xtpl fns; - [x] switch the array xtpl computation from core.Matrix to np.ndarray. here, the data enters and leaves as Matrix, but in ddd, it'll be pure ndarray; - [x] modernize and improve printing in xtpl fns. ## BugFix; - [x] @PeterKraus, you're confident on this bug https://github.com/psi4/psi4/pull/1351/files#r441933046 ? I've fixed it here and altered the reference values in the alpha test without investigating the correction. Applies to Karton 2-point SCF extrapolation. ## Checklist; - [x] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2526
https://github.com/psi4/psi4/pull/2526:974,Testability,test,tests,974,"## Description; Start rearranging CBS for DDD. This is No. 4 of the DDD series, #1351. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] DON'T LOOK AT THE FIRST COMMIT -- it's just moving code around. the second commit is a nice diff to review; - [x] add typing and consolidate the docstring improvements between master and ddd for the cbs xtpl fns; - [x] switch the array xtpl computation from core.Matrix to np.ndarray. here, the data enters and leaves as Matrix, but in ddd, it'll be pure ndarray; - [x] modernize and improve printing in xtpl fns. ## BugFix; - [x] @PeterKraus, you're confident on this bug https://github.com/psi4/psi4/pull/1351/files#r441933046 ? I've fixed it here and altered the reference values in the alpha test without investigating the correction. Applies to Karton 2-point SCF extrapolation. ## Checklist; - [x] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2526
https://github.com/psi4/psi4/pull/2526:1065,Testability,test,tests,1065,"## Description; Start rearranging CBS for DDD. This is No. 4 of the DDD series, #1351. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] DON'T LOOK AT THE FIRST COMMIT -- it's just moving code around. the second commit is a nice diff to review; - [x] add typing and consolidate the docstring improvements between master and ddd for the cbs xtpl fns; - [x] switch the array xtpl computation from core.Matrix to np.ndarray. here, the data enters and leaves as Matrix, but in ddd, it'll be pure ndarray; - [x] modernize and improve printing in xtpl fns. ## BugFix; - [x] @PeterKraus, you're confident on this bug https://github.com/psi4/psi4/pull/1351/files#r441933046 ? I've fixed it here and altered the reference values in the alpha test without investigating the correction. Applies to Karton 2-point SCF extrapolation. ## Checklist; - [x] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2526
https://github.com/psi4/psi4/pull/2527:42,Deployability,update,update,42,## Description; I think I owe everyone an update on the docs to answer the question: Which algorithm/implementation is used for which kind of one-electron integral? This PR adds a table to the integral documentation with all the necessary information. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Table added. ## Checklist; - [x] ~Tests added for any new features~; - [x] ~[All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests)~. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2527
https://github.com/psi4/psi4/pull/2527:393,Testability,Test,Tests,393,## Description; I think I owe everyone an update on the docs to answer the question: Which algorithm/implementation is used for which kind of one-electron integral? This PR adds a table to the integral documentation with all the necessary information. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Table added. ## Checklist; - [x] ~Tests added for any new features~; - [x] ~[All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests)~. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2527
https://github.com/psi4/psi4/pull/2527:469,Testability,test,tests,469,## Description; I think I owe everyone an update on the docs to answer the question: Which algorithm/implementation is used for which kind of one-electron integral? This PR adds a table to the integral documentation with all the necessary information. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Table added. ## Checklist; - [x] ~Tests added for any new features~; - [x] ~[All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests)~. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2527
https://github.com/psi4/psi4/pull/2527:560,Testability,test,tests,560,## Description; I think I owe everyone an update on the docs to answer the question: Which algorithm/implementation is used for which kind of one-electron integral? This PR adds a table to the integral documentation with all the necessary information. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Table added. ## Checklist; - [x] ~Tests added for any new features~; - [x] ~[All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests)~. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2527
https://github.com/psi4/psi4/pull/2529:1212,Integrability,depend,dependent,1212,"## Description; This PR makes two small improvements to the `JK` class and SCF code. These improvements simplify the addition of new JK algorithms to Psi4, particularly an upcoming semi-numerical exchange. The first change is transferring the responsibility of zeroing out the `J`, `K`, and `wK` matrices from the parent `JK` class to each derived `JK` class. This makes it easier to implement JK algorithms which build the fock matrix incrementally. (i.e. use the difference in density between SCF iterations to compute differences in J/K). With this change, much of the incremental fock code in the `DirectJK` class can be simplified. The second change is the addition of an `early_screening_` member variable to the `JK`. The idea is that some future JK algorithms will increase performance by using looser screening procedures/thresholds in early SCF iterations. Screening is then tightened as the SCF approaches convergence. This logic was added to the SCF driver. The `early_screening_` variable defaults to false for all existing JK classes, so there is currently. no change in behavior. ## Todos; - [x] Derived `JK` classes are responsible for zeroing their matrices; - [x] JK screening is SCF iteration dependent. ## Questions. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2529
https://github.com/psi4/psi4/pull/2529:703,Modifiability,variab,variable,703,"## Description; This PR makes two small improvements to the `JK` class and SCF code. These improvements simplify the addition of new JK algorithms to Psi4, particularly an upcoming semi-numerical exchange. The first change is transferring the responsibility of zeroing out the `J`, `K`, and `wK` matrices from the parent `JK` class to each derived `JK` class. This makes it easier to implement JK algorithms which build the fock matrix incrementally. (i.e. use the difference in density between SCF iterations to compute differences in J/K). With this change, much of the incremental fock code in the `DirectJK` class can be simplified. The second change is the addition of an `early_screening_` member variable to the `JK`. The idea is that some future JK algorithms will increase performance by using looser screening procedures/thresholds in early SCF iterations. Screening is then tightened as the SCF approaches convergence. This logic was added to the SCF driver. The `early_screening_` variable defaults to false for all existing JK classes, so there is currently. no change in behavior. ## Todos; - [x] Derived `JK` classes are responsible for zeroing their matrices; - [x] JK screening is SCF iteration dependent. ## Questions. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2529
https://github.com/psi4/psi4/pull/2529:993,Modifiability,variab,variable,993,"## Description; This PR makes two small improvements to the `JK` class and SCF code. These improvements simplify the addition of new JK algorithms to Psi4, particularly an upcoming semi-numerical exchange. The first change is transferring the responsibility of zeroing out the `J`, `K`, and `wK` matrices from the parent `JK` class to each derived `JK` class. This makes it easier to implement JK algorithms which build the fock matrix incrementally. (i.e. use the difference in density between SCF iterations to compute differences in J/K). With this change, much of the incremental fock code in the `DirectJK` class can be simplified. The second change is the addition of an `early_screening_` member variable to the `JK`. The idea is that some future JK algorithms will increase performance by using looser screening procedures/thresholds in early SCF iterations. Screening is then tightened as the SCF approaches convergence. This logic was added to the SCF driver. The `early_screening_` variable defaults to false for all existing JK classes, so there is currently. no change in behavior. ## Todos; - [x] Derived `JK` classes are responsible for zeroing their matrices; - [x] JK screening is SCF iteration dependent. ## Questions. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2529
https://github.com/psi4/psi4/pull/2529:782,Performance,perform,performance,782,"## Description; This PR makes two small improvements to the `JK` class and SCF code. These improvements simplify the addition of new JK algorithms to Psi4, particularly an upcoming semi-numerical exchange. The first change is transferring the responsibility of zeroing out the `J`, `K`, and `wK` matrices from the parent `JK` class to each derived `JK` class. This makes it easier to implement JK algorithms which build the fock matrix incrementally. (i.e. use the difference in density between SCF iterations to compute differences in J/K). With this change, much of the incremental fock code in the `DirectJK` class can be simplified. The second change is the addition of an `early_screening_` member variable to the `JK`. The idea is that some future JK algorithms will increase performance by using looser screening procedures/thresholds in early SCF iterations. Screening is then tightened as the SCF approaches convergence. This logic was added to the SCF driver. The `early_screening_` variable defaults to false for all existing JK classes, so there is currently. no change in behavior. ## Todos; - [x] Derived `JK` classes are responsible for zeroing their matrices; - [x] JK screening is SCF iteration dependent. ## Questions. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2529
https://github.com/psi4/psi4/pull/2529:935,Testability,log,logic,935,"## Description; This PR makes two small improvements to the `JK` class and SCF code. These improvements simplify the addition of new JK algorithms to Psi4, particularly an upcoming semi-numerical exchange. The first change is transferring the responsibility of zeroing out the `J`, `K`, and `wK` matrices from the parent `JK` class to each derived `JK` class. This makes it easier to implement JK algorithms which build the fock matrix incrementally. (i.e. use the difference in density between SCF iterations to compute differences in J/K). With this change, much of the incremental fock code in the `DirectJK` class can be simplified. The second change is the addition of an `early_screening_` member variable to the `JK`. The idea is that some future JK algorithms will increase performance by using looser screening procedures/thresholds in early SCF iterations. Screening is then tightened as the SCF approaches convergence. This logic was added to the SCF driver. The `early_screening_` variable defaults to false for all existing JK classes, so there is currently. no change in behavior. ## Todos; - [x] Derived `JK` classes are responsible for zeroing their matrices; - [x] JK screening is SCF iteration dependent. ## Questions. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2529
https://github.com/psi4/psi4/pull/2529:1257,Testability,Test,Tests,1257,"## Description; This PR makes two small improvements to the `JK` class and SCF code. These improvements simplify the addition of new JK algorithms to Psi4, particularly an upcoming semi-numerical exchange. The first change is transferring the responsibility of zeroing out the `J`, `K`, and `wK` matrices from the parent `JK` class to each derived `JK` class. This makes it easier to implement JK algorithms which build the fock matrix incrementally. (i.e. use the difference in density between SCF iterations to compute differences in J/K). With this change, much of the incremental fock code in the `DirectJK` class can be simplified. The second change is the addition of an `early_screening_` member variable to the `JK`. The idea is that some future JK algorithms will increase performance by using looser screening procedures/thresholds in early SCF iterations. Screening is then tightened as the SCF approaches convergence. This logic was added to the SCF driver. The `early_screening_` variable defaults to false for all existing JK classes, so there is currently. no change in behavior. ## Todos; - [x] Derived `JK` classes are responsible for zeroing their matrices; - [x] JK screening is SCF iteration dependent. ## Questions. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2529
https://github.com/psi4/psi4/pull/2529:1331,Testability,test,tests,1331,"## Description; This PR makes two small improvements to the `JK` class and SCF code. These improvements simplify the addition of new JK algorithms to Psi4, particularly an upcoming semi-numerical exchange. The first change is transferring the responsibility of zeroing out the `J`, `K`, and `wK` matrices from the parent `JK` class to each derived `JK` class. This makes it easier to implement JK algorithms which build the fock matrix incrementally. (i.e. use the difference in density between SCF iterations to compute differences in J/K). With this change, much of the incremental fock code in the `DirectJK` class can be simplified. The second change is the addition of an `early_screening_` member variable to the `JK`. The idea is that some future JK algorithms will increase performance by using looser screening procedures/thresholds in early SCF iterations. Screening is then tightened as the SCF approaches convergence. This logic was added to the SCF driver. The `early_screening_` variable defaults to false for all existing JK classes, so there is currently. no change in behavior. ## Todos; - [x] Derived `JK` classes are responsible for zeroing their matrices; - [x] JK screening is SCF iteration dependent. ## Questions. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2529
https://github.com/psi4/psi4/pull/2529:1422,Testability,test,tests,1422,"## Description; This PR makes two small improvements to the `JK` class and SCF code. These improvements simplify the addition of new JK algorithms to Psi4, particularly an upcoming semi-numerical exchange. The first change is transferring the responsibility of zeroing out the `J`, `K`, and `wK` matrices from the parent `JK` class to each derived `JK` class. This makes it easier to implement JK algorithms which build the fock matrix incrementally. (i.e. use the difference in density between SCF iterations to compute differences in J/K). With this change, much of the incremental fock code in the `DirectJK` class can be simplified. The second change is the addition of an `early_screening_` member variable to the `JK`. The idea is that some future JK algorithms will increase performance by using looser screening procedures/thresholds in early SCF iterations. Screening is then tightened as the SCF approaches convergence. This logic was added to the SCF driver. The `early_screening_` variable defaults to false for all existing JK classes, so there is currently. no change in behavior. ## Todos; - [x] Derived `JK` classes are responsible for zeroing their matrices; - [x] JK screening is SCF iteration dependent. ## Questions. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2529
https://github.com/psi4/psi4/pull/2529:104,Usability,simpl,simplify,104,"## Description; This PR makes two small improvements to the `JK` class and SCF code. These improvements simplify the addition of new JK algorithms to Psi4, particularly an upcoming semi-numerical exchange. The first change is transferring the responsibility of zeroing out the `J`, `K`, and `wK` matrices from the parent `JK` class to each derived `JK` class. This makes it easier to implement JK algorithms which build the fock matrix incrementally. (i.e. use the difference in density between SCF iterations to compute differences in J/K). With this change, much of the incremental fock code in the `DirectJK` class can be simplified. The second change is the addition of an `early_screening_` member variable to the `JK`. The idea is that some future JK algorithms will increase performance by using looser screening procedures/thresholds in early SCF iterations. Screening is then tightened as the SCF approaches convergence. This logic was added to the SCF driver. The `early_screening_` variable defaults to false for all existing JK classes, so there is currently. no change in behavior. ## Todos; - [x] Derived `JK` classes are responsible for zeroing their matrices; - [x] JK screening is SCF iteration dependent. ## Questions. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2529
https://github.com/psi4/psi4/pull/2529:625,Usability,simpl,simplified,625,"## Description; This PR makes two small improvements to the `JK` class and SCF code. These improvements simplify the addition of new JK algorithms to Psi4, particularly an upcoming semi-numerical exchange. The first change is transferring the responsibility of zeroing out the `J`, `K`, and `wK` matrices from the parent `JK` class to each derived `JK` class. This makes it easier to implement JK algorithms which build the fock matrix incrementally. (i.e. use the difference in density between SCF iterations to compute differences in J/K). With this change, much of the incremental fock code in the `DirectJK` class can be simplified. The second change is the addition of an `early_screening_` member variable to the `JK`. The idea is that some future JK algorithms will increase performance by using looser screening procedures/thresholds in early SCF iterations. Screening is then tightened as the SCF approaches convergence. This logic was added to the SCF driver. The `early_screening_` variable defaults to false for all existing JK classes, so there is currently. no change in behavior. ## Todos; - [x] Derived `JK` classes are responsible for zeroing their matrices; - [x] JK screening is SCF iteration dependent. ## Questions. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2529
https://github.com/psi4/psi4/pull/2530:603,Availability,toler,tolerant,603,"## Description; This is No. 5 of the DDD series, #1351. ## Todos; - [x] Add `psi4 --module` for find pymod. qcng already tries to use it; - [x] Add another mode to `prepare_options_for_modules` that instead of figuring out what options are active in a module (mediated mode, used previously for sow/reap, I think) now records the settings for reset (state mode, used in DDD). Added a context manager to ""hold and restore"" the options state.; - [x] Add `run_qcschema(..., postclean)` option that handles the trouble when this is called *from Psi4* of deleting the parent session's output file.; - [x] Be tolerant of missing files when cleaning numpy files. I don't remember why/if this was necessary, but on the whole, a missing numpy file isn't worth erroring on.; - [x] Aboid extra '/' in paths from psio. I don't remember if this was fixing an error or just aesthetic.; - [x] docstrings; - [x] ADDED: another attempt to fix Win conda package. ## Checklist; - [x] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2530
https://github.com/psi4/psi4/pull/2530:751,Availability,error,erroring,751,"## Description; This is No. 5 of the DDD series, #1351. ## Todos; - [x] Add `psi4 --module` for find pymod. qcng already tries to use it; - [x] Add another mode to `prepare_options_for_modules` that instead of figuring out what options are active in a module (mediated mode, used previously for sow/reap, I think) now records the settings for reset (state mode, used in DDD). Added a context manager to ""hold and restore"" the options state.; - [x] Add `run_qcschema(..., postclean)` option that handles the trouble when this is called *from Psi4* of deleting the parent session's output file.; - [x] Be tolerant of missing files when cleaning numpy files. I don't remember why/if this was necessary, but on the whole, a missing numpy file isn't worth erroring on.; - [x] Aboid extra '/' in paths from psio. I don't remember if this was fixing an error or just aesthetic.; - [x] docstrings; - [x] ADDED: another attempt to fix Win conda package. ## Checklist; - [x] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2530
https://github.com/psi4/psi4/pull/2530:846,Availability,error,error,846,"## Description; This is No. 5 of the DDD series, #1351. ## Todos; - [x] Add `psi4 --module` for find pymod. qcng already tries to use it; - [x] Add another mode to `prepare_options_for_modules` that instead of figuring out what options are active in a module (mediated mode, used previously for sow/reap, I think) now records the settings for reset (state mode, used in DDD). Added a context manager to ""hold and restore"" the options state.; - [x] Add `run_qcschema(..., postclean)` option that handles the trouble when this is called *from Psi4* of deleting the parent session's output file.; - [x] Be tolerant of missing files when cleaning numpy files. I don't remember why/if this was necessary, but on the whole, a missing numpy file isn't worth erroring on.; - [x] Aboid extra '/' in paths from psio. I don't remember if this was fixing an error or just aesthetic.; - [x] docstrings; - [x] ADDED: another attempt to fix Win conda package. ## Checklist; - [x] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2530
https://github.com/psi4/psi4/pull/2530:260,Integrability,mediat,mediated,260,"## Description; This is No. 5 of the DDD series, #1351. ## Todos; - [x] Add `psi4 --module` for find pymod. qcng already tries to use it; - [x] Add another mode to `prepare_options_for_modules` that instead of figuring out what options are active in a module (mediated mode, used previously for sow/reap, I think) now records the settings for reset (state mode, used in DDD). Added a context manager to ""hold and restore"" the options state.; - [x] Add `run_qcschema(..., postclean)` option that handles the trouble when this is called *from Psi4* of deleting the parent session's output file.; - [x] Be tolerant of missing files when cleaning numpy files. I don't remember why/if this was necessary, but on the whole, a missing numpy file isn't worth erroring on.; - [x] Aboid extra '/' in paths from psio. I don't remember if this was fixing an error or just aesthetic.; - [x] docstrings; - [x] ADDED: another attempt to fix Win conda package. ## Checklist; - [x] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2530
https://github.com/psi4/psi4/pull/2530:966,Testability,Test,Tests,966,"## Description; This is No. 5 of the DDD series, #1351. ## Todos; - [x] Add `psi4 --module` for find pymod. qcng already tries to use it; - [x] Add another mode to `prepare_options_for_modules` that instead of figuring out what options are active in a module (mediated mode, used previously for sow/reap, I think) now records the settings for reset (state mode, used in DDD). Added a context manager to ""hold and restore"" the options state.; - [x] Add `run_qcschema(..., postclean)` option that handles the trouble when this is called *from Psi4* of deleting the parent session's output file.; - [x] Be tolerant of missing files when cleaning numpy files. I don't remember why/if this was necessary, but on the whole, a missing numpy file isn't worth erroring on.; - [x] Aboid extra '/' in paths from psio. I don't remember if this was fixing an error or just aesthetic.; - [x] docstrings; - [x] ADDED: another attempt to fix Win conda package. ## Checklist; - [x] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2530
https://github.com/psi4/psi4/pull/2530:1041,Testability,test,tests,1041,"## Description; This is No. 5 of the DDD series, #1351. ## Todos; - [x] Add `psi4 --module` for find pymod. qcng already tries to use it; - [x] Add another mode to `prepare_options_for_modules` that instead of figuring out what options are active in a module (mediated mode, used previously for sow/reap, I think) now records the settings for reset (state mode, used in DDD). Added a context manager to ""hold and restore"" the options state.; - [x] Add `run_qcschema(..., postclean)` option that handles the trouble when this is called *from Psi4* of deleting the parent session's output file.; - [x] Be tolerant of missing files when cleaning numpy files. I don't remember why/if this was necessary, but on the whole, a missing numpy file isn't worth erroring on.; - [x] Aboid extra '/' in paths from psio. I don't remember if this was fixing an error or just aesthetic.; - [x] docstrings; - [x] ADDED: another attempt to fix Win conda package. ## Checklist; - [x] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2530
https://github.com/psi4/psi4/pull/2530:1132,Testability,test,tests,1132,"## Description; This is No. 5 of the DDD series, #1351. ## Todos; - [x] Add `psi4 --module` for find pymod. qcng already tries to use it; - [x] Add another mode to `prepare_options_for_modules` that instead of figuring out what options are active in a module (mediated mode, used previously for sow/reap, I think) now records the settings for reset (state mode, used in DDD). Added a context manager to ""hold and restore"" the options state.; - [x] Add `run_qcschema(..., postclean)` option that handles the trouble when this is called *from Psi4* of deleting the parent session's output file.; - [x] Be tolerant of missing files when cleaning numpy files. I don't remember why/if this was necessary, but on the whole, a missing numpy file isn't worth erroring on.; - [x] Aboid extra '/' in paths from psio. I don't remember if this was fixing an error or just aesthetic.; - [x] docstrings; - [x] ADDED: another attempt to fix Win conda package. ## Checklist; - [x] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2530
https://github.com/psi4/psi4/pull/2531:120,Modifiability,inherit,inherited,120,"## Description; This PR gets rid of the `TaskListComputer` base class, condensing it into `OEProp`, the only class that inherited from it. We gained nothing from having that class around. ## Checklist; - [x] Properties tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2531
https://github.com/psi4/psi4/pull/2531:219,Testability,test,tests,219,"## Description; This PR gets rid of the `TaskListComputer` base class, condensing it into `OEProp`, the only class that inherited from it. We gained nothing from having that class around. ## Checklist; - [x] Properties tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2531
https://github.com/psi4/psi4/pull/2532:908,Deployability,Update,UpdateHelpers,908,"## Description; These are the breaking, user-facing changes for cbs in DDD. That is, these changes aren't needed at present for the cbs back-end, but this is coercing the input front-end into the right syntax. This is No. 6 of the DDD series, #1351. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] All `fn(cbs)` and passing to extrapolation functions are changed over to `fn(""cbs"")` and passing the _names_ of extrapolation functions. This is making cbs behave more like other wrappers: findif you don't call directly, you use kwarg dertype and nbody you don't call directly, you use bsse_type. Functions are trickier to keep imported and don't serialize well, so in ddd, they're registered and replaced by strings, akin to the procedures dictionary.; - [x] alias functions are replaced with dict specification instead of kwarg specification; - [x] UpdateHelpers are added so that if you feed an existing input, it prompts you to make the fn -> str changes.; - [x] Fix bug where allen_focal_point wasn't working b/c used kwargs, not dict, specification for cbs, so the higher deltas were getting lopped off. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2532
https://github.com/psi4/psi4/pull/2532:536,Integrability,wrap,wrappers,536,"## Description; These are the breaking, user-facing changes for cbs in DDD. That is, these changes aren't needed at present for the cbs back-end, but this is coercing the input front-end into the right syntax. This is No. 6 of the DDD series, #1351. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] All `fn(cbs)` and passing to extrapolation functions are changed over to `fn(""cbs"")` and passing the _names_ of extrapolation functions. This is making cbs behave more like other wrappers: findif you don't call directly, you use kwarg dertype and nbody you don't call directly, you use bsse_type. Functions are trickier to keep imported and don't serialize well, so in ddd, they're registered and replaced by strings, akin to the procedures dictionary.; - [x] alias functions are replaced with dict specification instead of kwarg specification; - [x] UpdateHelpers are added so that if you feed an existing input, it prompts you to make the fn -> str changes.; - [x] Fix bug where allen_focal_point wasn't working b/c used kwargs, not dict, specification for cbs, so the higher deltas were getting lopped off. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2532
https://github.com/psi4/psi4/pull/2532:1187,Testability,Test,Tests,1187,"## Description; These are the breaking, user-facing changes for cbs in DDD. That is, these changes aren't needed at present for the cbs back-end, but this is coercing the input front-end into the right syntax. This is No. 6 of the DDD series, #1351. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] All `fn(cbs)` and passing to extrapolation functions are changed over to `fn(""cbs"")` and passing the _names_ of extrapolation functions. This is making cbs behave more like other wrappers: findif you don't call directly, you use kwarg dertype and nbody you don't call directly, you use bsse_type. Functions are trickier to keep imported and don't serialize well, so in ddd, they're registered and replaced by strings, akin to the procedures dictionary.; - [x] alias functions are replaced with dict specification instead of kwarg specification; - [x] UpdateHelpers are added so that if you feed an existing input, it prompts you to make the fn -> str changes.; - [x] Fix bug where allen_focal_point wasn't working b/c used kwargs, not dict, specification for cbs, so the higher deltas were getting lopped off. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2532
https://github.com/psi4/psi4/pull/2532:1261,Testability,test,tests,1261,"## Description; These are the breaking, user-facing changes for cbs in DDD. That is, these changes aren't needed at present for the cbs back-end, but this is coercing the input front-end into the right syntax. This is No. 6 of the DDD series, #1351. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] All `fn(cbs)` and passing to extrapolation functions are changed over to `fn(""cbs"")` and passing the _names_ of extrapolation functions. This is making cbs behave more like other wrappers: findif you don't call directly, you use kwarg dertype and nbody you don't call directly, you use bsse_type. Functions are trickier to keep imported and don't serialize well, so in ddd, they're registered and replaced by strings, akin to the procedures dictionary.; - [x] alias functions are replaced with dict specification instead of kwarg specification; - [x] UpdateHelpers are added so that if you feed an existing input, it prompts you to make the fn -> str changes.; - [x] Fix bug where allen_focal_point wasn't working b/c used kwargs, not dict, specification for cbs, so the higher deltas were getting lopped off. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2532
https://github.com/psi4/psi4/pull/2532:1352,Testability,test,tests,1352,"## Description; These are the breaking, user-facing changes for cbs in DDD. That is, these changes aren't needed at present for the cbs back-end, but this is coercing the input front-end into the right syntax. This is No. 6 of the DDD series, #1351. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] All `fn(cbs)` and passing to extrapolation functions are changed over to `fn(""cbs"")` and passing the _names_ of extrapolation functions. This is making cbs behave more like other wrappers: findif you don't call directly, you use kwarg dertype and nbody you don't call directly, you use bsse_type. Functions are trickier to keep imported and don't serialize well, so in ddd, they're registered and replaced by strings, akin to the procedures dictionary.; - [x] alias functions are replaced with dict specification instead of kwarg specification; - [x] UpdateHelpers are added so that if you feed an existing input, it prompts you to make the fn -> str changes.; - [x] Fix bug where allen_focal_point wasn't working b/c used kwargs, not dict, specification for cbs, so the higher deltas were getting lopped off. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2532
https://github.com/psi4/psi4/pull/2533:329,Availability,ping,ping,329,"## Description; PR #2022 labeled _ground-state_ properties with the method name... even when the method name included ""EOM-"". So even though `ccsd` and `eom-ccsd` compute the same ground state dipole, they weren't given the same name. This PR fixes that. More fixes to come, but the next PR will be heftier. Obligatory @bgpeyton ping. ## Checklist; - [x] `eom` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2533
https://github.com/psi4/psi4/pull/2533:361,Testability,test,tests,361,"## Description; PR #2022 labeled _ground-state_ properties with the method name... even when the method name included ""EOM-"". So even though `ccsd` and `eom-ccsd` compute the same ground state dipole, they weren't given the same name. This PR fixes that. More fixes to come, but the next PR will be heftier. Obligatory @bgpeyton ping. ## Checklist; - [x] `eom` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2533
https://github.com/psi4/psi4/pull/2534:51,Modifiability,variab,variables,51,"## Description; This PR changes how `OEProp` saves variables and fixes a bug where ""CC ROOT 0"" variables were not being set. Previously, OEProp overloaded `title_` to refer to both the name used for the density matrix (for print purposes) and for the name used for properties (as a prefix for variable saving purposes). Only one such name can be used.; Now, OEProp uses the density matrix's name as the density matrix's name (for print purposes) and for the names used for properties (for variable saving purposes, and with the generality of format strings). Multiples names can be used. With this, I can now save the CC dipoles as both ""CC DIPOLE"" and ""CC2 DIPOLE"", so ""CC DIPOLE"" can be found. The Psi code that tried to access this was never entered previously because it checked for a 'dipole' variable rather than a 'DIPOLE' variable. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] More flexibility in OEProp names; - [x] Previously missing CC property variables are set. ## Checklist; - [x] Properties tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2534
https://github.com/psi4/psi4/pull/2534:95,Modifiability,variab,variables,95,"## Description; This PR changes how `OEProp` saves variables and fixes a bug where ""CC ROOT 0"" variables were not being set. Previously, OEProp overloaded `title_` to refer to both the name used for the density matrix (for print purposes) and for the name used for properties (as a prefix for variable saving purposes). Only one such name can be used.; Now, OEProp uses the density matrix's name as the density matrix's name (for print purposes) and for the names used for properties (for variable saving purposes, and with the generality of format strings). Multiples names can be used. With this, I can now save the CC dipoles as both ""CC DIPOLE"" and ""CC2 DIPOLE"", so ""CC DIPOLE"" can be found. The Psi code that tried to access this was never entered previously because it checked for a 'dipole' variable rather than a 'DIPOLE' variable. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] More flexibility in OEProp names; - [x] Previously missing CC property variables are set. ## Checklist; - [x] Properties tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2534
https://github.com/psi4/psi4/pull/2534:293,Modifiability,variab,variable,293,"## Description; This PR changes how `OEProp` saves variables and fixes a bug where ""CC ROOT 0"" variables were not being set. Previously, OEProp overloaded `title_` to refer to both the name used for the density matrix (for print purposes) and for the name used for properties (as a prefix for variable saving purposes). Only one such name can be used.; Now, OEProp uses the density matrix's name as the density matrix's name (for print purposes) and for the names used for properties (for variable saving purposes, and with the generality of format strings). Multiples names can be used. With this, I can now save the CC dipoles as both ""CC DIPOLE"" and ""CC2 DIPOLE"", so ""CC DIPOLE"" can be found. The Psi code that tried to access this was never entered previously because it checked for a 'dipole' variable rather than a 'DIPOLE' variable. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] More flexibility in OEProp names; - [x] Previously missing CC property variables are set. ## Checklist; - [x] Properties tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2534
https://github.com/psi4/psi4/pull/2534:489,Modifiability,variab,variable,489,"## Description; This PR changes how `OEProp` saves variables and fixes a bug where ""CC ROOT 0"" variables were not being set. Previously, OEProp overloaded `title_` to refer to both the name used for the density matrix (for print purposes) and for the name used for properties (as a prefix for variable saving purposes). Only one such name can be used.; Now, OEProp uses the density matrix's name as the density matrix's name (for print purposes) and for the names used for properties (for variable saving purposes, and with the generality of format strings). Multiples names can be used. With this, I can now save the CC dipoles as both ""CC DIPOLE"" and ""CC2 DIPOLE"", so ""CC DIPOLE"" can be found. The Psi code that tried to access this was never entered previously because it checked for a 'dipole' variable rather than a 'DIPOLE' variable. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] More flexibility in OEProp names; - [x] Previously missing CC property variables are set. ## Checklist; - [x] Properties tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2534
https://github.com/psi4/psi4/pull/2534:798,Modifiability,variab,variable,798,"## Description; This PR changes how `OEProp` saves variables and fixes a bug where ""CC ROOT 0"" variables were not being set. Previously, OEProp overloaded `title_` to refer to both the name used for the density matrix (for print purposes) and for the name used for properties (as a prefix for variable saving purposes). Only one such name can be used.; Now, OEProp uses the density matrix's name as the density matrix's name (for print purposes) and for the names used for properties (for variable saving purposes, and with the generality of format strings). Multiples names can be used. With this, I can now save the CC dipoles as both ""CC DIPOLE"" and ""CC2 DIPOLE"", so ""CC DIPOLE"" can be found. The Psi code that tried to access this was never entered previously because it checked for a 'dipole' variable rather than a 'DIPOLE' variable. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] More flexibility in OEProp names; - [x] Previously missing CC property variables are set. ## Checklist; - [x] Properties tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2534
https://github.com/psi4/psi4/pull/2534:830,Modifiability,variab,variable,830,"## Description; This PR changes how `OEProp` saves variables and fixes a bug where ""CC ROOT 0"" variables were not being set. Previously, OEProp overloaded `title_` to refer to both the name used for the density matrix (for print purposes) and for the name used for properties (as a prefix for variable saving purposes). Only one such name can be used.; Now, OEProp uses the density matrix's name as the density matrix's name (for print purposes) and for the names used for properties (for variable saving purposes, and with the generality of format strings). Multiples names can be used. With this, I can now save the CC dipoles as both ""CC DIPOLE"" and ""CC2 DIPOLE"", so ""CC DIPOLE"" can be found. The Psi code that tried to access this was never entered previously because it checked for a 'dipole' variable rather than a 'DIPOLE' variable. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] More flexibility in OEProp names; - [x] Previously missing CC property variables are set. ## Checklist; - [x] Properties tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2534
https://github.com/psi4/psi4/pull/2534:1018,Modifiability,variab,variables,1018,"## Description; This PR changes how `OEProp` saves variables and fixes a bug where ""CC ROOT 0"" variables were not being set. Previously, OEProp overloaded `title_` to refer to both the name used for the density matrix (for print purposes) and for the name used for properties (as a prefix for variable saving purposes). Only one such name can be used.; Now, OEProp uses the density matrix's name as the density matrix's name (for print purposes) and for the names used for properties (for variable saving purposes, and with the generality of format strings). Multiples names can be used. With this, I can now save the CC dipoles as both ""CC DIPOLE"" and ""CC2 DIPOLE"", so ""CC DIPOLE"" can be found. The Psi code that tried to access this was never entered previously because it checked for a 'dipole' variable rather than a 'DIPOLE' variable. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] More flexibility in OEProp names; - [x] Previously missing CC property variables are set. ## Checklist; - [x] Properties tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2534
https://github.com/psi4/psi4/pull/2534:723,Security,access,access,723,"## Description; This PR changes how `OEProp` saves variables and fixes a bug where ""CC ROOT 0"" variables were not being set. Previously, OEProp overloaded `title_` to refer to both the name used for the density matrix (for print purposes) and for the name used for properties (as a prefix for variable saving purposes). Only one such name can be used.; Now, OEProp uses the density matrix's name as the density matrix's name (for print purposes) and for the names used for properties (for variable saving purposes, and with the generality of format strings). Multiples names can be used. With this, I can now save the CC dipoles as both ""CC DIPOLE"" and ""CC2 DIPOLE"", so ""CC DIPOLE"" can be found. The Psi code that tried to access this was never entered previously because it checked for a 'dipole' variable rather than a 'DIPOLE' variable. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] More flexibility in OEProp names; - [x] Previously missing CC property variables are set. ## Checklist; - [x] Properties tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2534
https://github.com/psi4/psi4/pull/2534:1068,Testability,test,tests,1068,"## Description; This PR changes how `OEProp` saves variables and fixes a bug where ""CC ROOT 0"" variables were not being set. Previously, OEProp overloaded `title_` to refer to both the name used for the density matrix (for print purposes) and for the name used for properties (as a prefix for variable saving purposes). Only one such name can be used.; Now, OEProp uses the density matrix's name as the density matrix's name (for print purposes) and for the names used for properties (for variable saving purposes, and with the generality of format strings). Multiples names can be used. With this, I can now save the CC dipoles as both ""CC DIPOLE"" and ""CC2 DIPOLE"", so ""CC DIPOLE"" can be found. The Psi code that tried to access this was never entered previously because it checked for a 'dipole' variable rather than a 'DIPOLE' variable. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] More flexibility in OEProp names; - [x] Previously missing CC property variables are set. ## Checklist; - [x] Properties tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2534
https://github.com/psi4/psi4/pull/2536:765,Availability,error,error,765,"## Description. This is No. 7 of the DDD series, #1351. ## Todos; - [x] test both old `run_json` and new `run_qcschema` modes and access patterns in the basic addons testing.; - [x] I don't remember in what order it came about, but `driver_util.py` had a function `negotiate_derivative_type` that was a simpler version (returned `analytic` and `1_0` for analytic and findif gradient, respectively) of the trio of functions in ddd (returns `(1, 1)` and `(1, 0)` for analytic and findif gradient, respectively) and was tested in `test_dertype.py` and was never run. This unused fn and its testing was removed and replaced by the ddd version.; - [x] the new `negotiate_derivative_type` function probes managed methods earlier than before, so it happens that the exact error names (not the text) expected by stdsuite change.; - [x] the new `negotiate_derivative_type` function is called early, so it now handles the methodname typo helper (""Did you mean?"") that FAE added. The independent `_method_exists()` fn removed.; - [x] the former function `_set_convergence_criterion` where you passed in 5 integers for the different E/D_CONVERGENCE values has been rewritten as `negotiate_convergence_criterion` where you pass in a tuple of the case (e.g., `(2, 1)` is Hessian by findif of gradients). In actual `driver.py`, the function calls have been switched out. The values set are the same, but the arguments like `(1, 0)` aren't necessarily appropriate in this non-ddd driver code routing.; - [x] the former function `_find_derivative_type` has been replaced by three functions headed up by `negotiate_derivative_type`. For both, the goal is to take a method name, the target derivative, and any user modifications and return the appropriate analytic or findif strategy or produce a helpful error. sounds simple, but managed methods and cbs specs complicate things. In ddd, this function is called early, not piecemeal throughout the driver, so more probing has been consolidated into the new function. In ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2536
https://github.com/psi4/psi4/pull/2536:1786,Availability,error,error,1786,"est_dertype.py` and was never run. This unused fn and its testing was removed and replaced by the ddd version.; - [x] the new `negotiate_derivative_type` function probes managed methods earlier than before, so it happens that the exact error names (not the text) expected by stdsuite change.; - [x] the new `negotiate_derivative_type` function is called early, so it now handles the methodname typo helper (""Did you mean?"") that FAE added. The independent `_method_exists()` fn removed.; - [x] the former function `_set_convergence_criterion` where you passed in 5 integers for the different E/D_CONVERGENCE values has been rewritten as `negotiate_convergence_criterion` where you pass in a tuple of the case (e.g., `(2, 1)` is Hessian by findif of gradients). In actual `driver.py`, the function calls have been switched out. The values set are the same, but the arguments like `(1, 0)` aren't necessarily appropriate in this non-ddd driver code routing.; - [x] the former function `_find_derivative_type` has been replaced by three functions headed up by `negotiate_derivative_type`. For both, the goal is to take a method name, the target derivative, and any user modifications and return the appropriate analytic or findif strategy or produce a helpful error. sounds simple, but managed methods and cbs specs complicate things. In ddd, this function is called early, not piecemeal throughout the driver, so more probing has been consolidated into the new function. In actual `driver.py`, the function calls have been switched out, but it's only using half the info due to differences in non-ddd driver code routing. To mirror ddd behavior, the function is called even for energy() and properties(), mostly to take the place of `_method_exists()`. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2536
https://github.com/psi4/psi4/pull/2536:2205,Energy Efficiency,energy,energy,2205,"est_dertype.py` and was never run. This unused fn and its testing was removed and replaced by the ddd version.; - [x] the new `negotiate_derivative_type` function probes managed methods earlier than before, so it happens that the exact error names (not the text) expected by stdsuite change.; - [x] the new `negotiate_derivative_type` function is called early, so it now handles the methodname typo helper (""Did you mean?"") that FAE added. The independent `_method_exists()` fn removed.; - [x] the former function `_set_convergence_criterion` where you passed in 5 integers for the different E/D_CONVERGENCE values has been rewritten as `negotiate_convergence_criterion` where you pass in a tuple of the case (e.g., `(2, 1)` is Hessian by findif of gradients). In actual `driver.py`, the function calls have been switched out. The values set are the same, but the arguments like `(1, 0)` aren't necessarily appropriate in this non-ddd driver code routing.; - [x] the former function `_find_derivative_type` has been replaced by three functions headed up by `negotiate_derivative_type`. For both, the goal is to take a method name, the target derivative, and any user modifications and return the appropriate analytic or findif strategy or produce a helpful error. sounds simple, but managed methods and cbs specs complicate things. In ddd, this function is called early, not piecemeal throughout the driver, so more probing has been consolidated into the new function. In actual `driver.py`, the function calls have been switched out, but it's only using half the info due to differences in non-ddd driver code routing. To mirror ddd behavior, the function is called even for energy() and properties(), mostly to take the place of `_method_exists()`. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2536
https://github.com/psi4/psi4/pull/2536:1476,Integrability,rout,routing,1476,"ons in ddd (returns `(1, 1)` and `(1, 0)` for analytic and findif gradient, respectively) and was tested in `test_dertype.py` and was never run. This unused fn and its testing was removed and replaced by the ddd version.; - [x] the new `negotiate_derivative_type` function probes managed methods earlier than before, so it happens that the exact error names (not the text) expected by stdsuite change.; - [x] the new `negotiate_derivative_type` function is called early, so it now handles the methodname typo helper (""Did you mean?"") that FAE added. The independent `_method_exists()` fn removed.; - [x] the former function `_set_convergence_criterion` where you passed in 5 integers for the different E/D_CONVERGENCE values has been rewritten as `negotiate_convergence_criterion` where you pass in a tuple of the case (e.g., `(2, 1)` is Hessian by findif of gradients). In actual `driver.py`, the function calls have been switched out. The values set are the same, but the arguments like `(1, 0)` aren't necessarily appropriate in this non-ddd driver code routing.; - [x] the former function `_find_derivative_type` has been replaced by three functions headed up by `negotiate_derivative_type`. For both, the goal is to take a method name, the target derivative, and any user modifications and return the appropriate analytic or findif strategy or produce a helpful error. sounds simple, but managed methods and cbs specs complicate things. In ddd, this function is called early, not piecemeal throughout the driver, so more probing has been consolidated into the new function. In actual `driver.py`, the function calls have been switched out, but it's only using half the info due to differences in non-ddd driver code routing. To mirror ddd behavior, the function is called even for energy() and properties(), mostly to take the place of `_method_exists()`. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/maste",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2536
https://github.com/psi4/psi4/pull/2536:2140,Integrability,rout,routing,2140,"est_dertype.py` and was never run. This unused fn and its testing was removed and replaced by the ddd version.; - [x] the new `negotiate_derivative_type` function probes managed methods earlier than before, so it happens that the exact error names (not the text) expected by stdsuite change.; - [x] the new `negotiate_derivative_type` function is called early, so it now handles the methodname typo helper (""Did you mean?"") that FAE added. The independent `_method_exists()` fn removed.; - [x] the former function `_set_convergence_criterion` where you passed in 5 integers for the different E/D_CONVERGENCE values has been rewritten as `negotiate_convergence_criterion` where you pass in a tuple of the case (e.g., `(2, 1)` is Hessian by findif of gradients). In actual `driver.py`, the function calls have been switched out. The values set are the same, but the arguments like `(1, 0)` aren't necessarily appropriate in this non-ddd driver code routing.; - [x] the former function `_find_derivative_type` has been replaced by three functions headed up by `negotiate_derivative_type`. For both, the goal is to take a method name, the target derivative, and any user modifications and return the appropriate analytic or findif strategy or produce a helpful error. sounds simple, but managed methods and cbs specs complicate things. In ddd, this function is called early, not piecemeal throughout the driver, so more probing has been consolidated into the new function. In actual `driver.py`, the function calls have been switched out, but it's only using half the info due to differences in non-ddd driver code routing. To mirror ddd behavior, the function is called even for energy() and properties(), mostly to take the place of `_method_exists()`. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2536
https://github.com/psi4/psi4/pull/2536:130,Security,access,access,130,"## Description. This is No. 7 of the DDD series, #1351. ## Todos; - [x] test both old `run_json` and new `run_qcschema` modes and access patterns in the basic addons testing.; - [x] I don't remember in what order it came about, but `driver_util.py` had a function `negotiate_derivative_type` that was a simpler version (returned `analytic` and `1_0` for analytic and findif gradient, respectively) of the trio of functions in ddd (returns `(1, 1)` and `(1, 0)` for analytic and findif gradient, respectively) and was tested in `test_dertype.py` and was never run. This unused fn and its testing was removed and replaced by the ddd version.; - [x] the new `negotiate_derivative_type` function probes managed methods earlier than before, so it happens that the exact error names (not the text) expected by stdsuite change.; - [x] the new `negotiate_derivative_type` function is called early, so it now handles the methodname typo helper (""Did you mean?"") that FAE added. The independent `_method_exists()` fn removed.; - [x] the former function `_set_convergence_criterion` where you passed in 5 integers for the different E/D_CONVERGENCE values has been rewritten as `negotiate_convergence_criterion` where you pass in a tuple of the case (e.g., `(2, 1)` is Hessian by findif of gradients). In actual `driver.py`, the function calls have been switched out. The values set are the same, but the arguments like `(1, 0)` aren't necessarily appropriate in this non-ddd driver code routing.; - [x] the former function `_find_derivative_type` has been replaced by three functions headed up by `negotiate_derivative_type`. For both, the goal is to take a method name, the target derivative, and any user modifications and return the appropriate analytic or findif strategy or produce a helpful error. sounds simple, but managed methods and cbs specs complicate things. In ddd, this function is called early, not piecemeal throughout the driver, so more probing has been consolidated into the new function. In ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2536
https://github.com/psi4/psi4/pull/2536:72,Testability,test,test,72,"## Description. This is No. 7 of the DDD series, #1351. ## Todos; - [x] test both old `run_json` and new `run_qcschema` modes and access patterns in the basic addons testing.; - [x] I don't remember in what order it came about, but `driver_util.py` had a function `negotiate_derivative_type` that was a simpler version (returned `analytic` and `1_0` for analytic and findif gradient, respectively) of the trio of functions in ddd (returns `(1, 1)` and `(1, 0)` for analytic and findif gradient, respectively) and was tested in `test_dertype.py` and was never run. This unused fn and its testing was removed and replaced by the ddd version.; - [x] the new `negotiate_derivative_type` function probes managed methods earlier than before, so it happens that the exact error names (not the text) expected by stdsuite change.; - [x] the new `negotiate_derivative_type` function is called early, so it now handles the methodname typo helper (""Did you mean?"") that FAE added. The independent `_method_exists()` fn removed.; - [x] the former function `_set_convergence_criterion` where you passed in 5 integers for the different E/D_CONVERGENCE values has been rewritten as `negotiate_convergence_criterion` where you pass in a tuple of the case (e.g., `(2, 1)` is Hessian by findif of gradients). In actual `driver.py`, the function calls have been switched out. The values set are the same, but the arguments like `(1, 0)` aren't necessarily appropriate in this non-ddd driver code routing.; - [x] the former function `_find_derivative_type` has been replaced by three functions headed up by `negotiate_derivative_type`. For both, the goal is to take a method name, the target derivative, and any user modifications and return the appropriate analytic or findif strategy or produce a helpful error. sounds simple, but managed methods and cbs specs complicate things. In ddd, this function is called early, not piecemeal throughout the driver, so more probing has been consolidated into the new function. In ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2536
https://github.com/psi4/psi4/pull/2536:166,Testability,test,testing,166,"## Description. This is No. 7 of the DDD series, #1351. ## Todos; - [x] test both old `run_json` and new `run_qcschema` modes and access patterns in the basic addons testing.; - [x] I don't remember in what order it came about, but `driver_util.py` had a function `negotiate_derivative_type` that was a simpler version (returned `analytic` and `1_0` for analytic and findif gradient, respectively) of the trio of functions in ddd (returns `(1, 1)` and `(1, 0)` for analytic and findif gradient, respectively) and was tested in `test_dertype.py` and was never run. This unused fn and its testing was removed and replaced by the ddd version.; - [x] the new `negotiate_derivative_type` function probes managed methods earlier than before, so it happens that the exact error names (not the text) expected by stdsuite change.; - [x] the new `negotiate_derivative_type` function is called early, so it now handles the methodname typo helper (""Did you mean?"") that FAE added. The independent `_method_exists()` fn removed.; - [x] the former function `_set_convergence_criterion` where you passed in 5 integers for the different E/D_CONVERGENCE values has been rewritten as `negotiate_convergence_criterion` where you pass in a tuple of the case (e.g., `(2, 1)` is Hessian by findif of gradients). In actual `driver.py`, the function calls have been switched out. The values set are the same, but the arguments like `(1, 0)` aren't necessarily appropriate in this non-ddd driver code routing.; - [x] the former function `_find_derivative_type` has been replaced by three functions headed up by `negotiate_derivative_type`. For both, the goal is to take a method name, the target derivative, and any user modifications and return the appropriate analytic or findif strategy or produce a helpful error. sounds simple, but managed methods and cbs specs complicate things. In ddd, this function is called early, not piecemeal throughout the driver, so more probing has been consolidated into the new function. In ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2536
https://github.com/psi4/psi4/pull/2536:517,Testability,test,tested,517,"## Description. This is No. 7 of the DDD series, #1351. ## Todos; - [x] test both old `run_json` and new `run_qcschema` modes and access patterns in the basic addons testing.; - [x] I don't remember in what order it came about, but `driver_util.py` had a function `negotiate_derivative_type` that was a simpler version (returned `analytic` and `1_0` for analytic and findif gradient, respectively) of the trio of functions in ddd (returns `(1, 1)` and `(1, 0)` for analytic and findif gradient, respectively) and was tested in `test_dertype.py` and was never run. This unused fn and its testing was removed and replaced by the ddd version.; - [x] the new `negotiate_derivative_type` function probes managed methods earlier than before, so it happens that the exact error names (not the text) expected by stdsuite change.; - [x] the new `negotiate_derivative_type` function is called early, so it now handles the methodname typo helper (""Did you mean?"") that FAE added. The independent `_method_exists()` fn removed.; - [x] the former function `_set_convergence_criterion` where you passed in 5 integers for the different E/D_CONVERGENCE values has been rewritten as `negotiate_convergence_criterion` where you pass in a tuple of the case (e.g., `(2, 1)` is Hessian by findif of gradients). In actual `driver.py`, the function calls have been switched out. The values set are the same, but the arguments like `(1, 0)` aren't necessarily appropriate in this non-ddd driver code routing.; - [x] the former function `_find_derivative_type` has been replaced by three functions headed up by `negotiate_derivative_type`. For both, the goal is to take a method name, the target derivative, and any user modifications and return the appropriate analytic or findif strategy or produce a helpful error. sounds simple, but managed methods and cbs specs complicate things. In ddd, this function is called early, not piecemeal throughout the driver, so more probing has been consolidated into the new function. In ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2536
https://github.com/psi4/psi4/pull/2536:587,Testability,test,testing,587,"## Description. This is No. 7 of the DDD series, #1351. ## Todos; - [x] test both old `run_json` and new `run_qcschema` modes and access patterns in the basic addons testing.; - [x] I don't remember in what order it came about, but `driver_util.py` had a function `negotiate_derivative_type` that was a simpler version (returned `analytic` and `1_0` for analytic and findif gradient, respectively) of the trio of functions in ddd (returns `(1, 1)` and `(1, 0)` for analytic and findif gradient, respectively) and was tested in `test_dertype.py` and was never run. This unused fn and its testing was removed and replaced by the ddd version.; - [x] the new `negotiate_derivative_type` function probes managed methods earlier than before, so it happens that the exact error names (not the text) expected by stdsuite change.; - [x] the new `negotiate_derivative_type` function is called early, so it now handles the methodname typo helper (""Did you mean?"") that FAE added. The independent `_method_exists()` fn removed.; - [x] the former function `_set_convergence_criterion` where you passed in 5 integers for the different E/D_CONVERGENCE values has been rewritten as `negotiate_convergence_criterion` where you pass in a tuple of the case (e.g., `(2, 1)` is Hessian by findif of gradients). In actual `driver.py`, the function calls have been switched out. The values set are the same, but the arguments like `(1, 0)` aren't necessarily appropriate in this non-ddd driver code routing.; - [x] the former function `_find_derivative_type` has been replaced by three functions headed up by `negotiate_derivative_type`. For both, the goal is to take a method name, the target derivative, and any user modifications and return the appropriate analytic or findif strategy or produce a helpful error. sounds simple, but managed methods and cbs specs complicate things. In ddd, this function is called early, not piecemeal throughout the driver, so more probing has been consolidated into the new function. In ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2536
https://github.com/psi4/psi4/pull/2536:2300,Testability,Test,Tests,2300,"est_dertype.py` and was never run. This unused fn and its testing was removed and replaced by the ddd version.; - [x] the new `negotiate_derivative_type` function probes managed methods earlier than before, so it happens that the exact error names (not the text) expected by stdsuite change.; - [x] the new `negotiate_derivative_type` function is called early, so it now handles the methodname typo helper (""Did you mean?"") that FAE added. The independent `_method_exists()` fn removed.; - [x] the former function `_set_convergence_criterion` where you passed in 5 integers for the different E/D_CONVERGENCE values has been rewritten as `negotiate_convergence_criterion` where you pass in a tuple of the case (e.g., `(2, 1)` is Hessian by findif of gradients). In actual `driver.py`, the function calls have been switched out. The values set are the same, but the arguments like `(1, 0)` aren't necessarily appropriate in this non-ddd driver code routing.; - [x] the former function `_find_derivative_type` has been replaced by three functions headed up by `negotiate_derivative_type`. For both, the goal is to take a method name, the target derivative, and any user modifications and return the appropriate analytic or findif strategy or produce a helpful error. sounds simple, but managed methods and cbs specs complicate things. In ddd, this function is called early, not piecemeal throughout the driver, so more probing has been consolidated into the new function. In actual `driver.py`, the function calls have been switched out, but it's only using half the info due to differences in non-ddd driver code routing. To mirror ddd behavior, the function is called even for energy() and properties(), mostly to take the place of `_method_exists()`. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2536
https://github.com/psi4/psi4/pull/2536:2374,Testability,test,tests,2374,"est_dertype.py` and was never run. This unused fn and its testing was removed and replaced by the ddd version.; - [x] the new `negotiate_derivative_type` function probes managed methods earlier than before, so it happens that the exact error names (not the text) expected by stdsuite change.; - [x] the new `negotiate_derivative_type` function is called early, so it now handles the methodname typo helper (""Did you mean?"") that FAE added. The independent `_method_exists()` fn removed.; - [x] the former function `_set_convergence_criterion` where you passed in 5 integers for the different E/D_CONVERGENCE values has been rewritten as `negotiate_convergence_criterion` where you pass in a tuple of the case (e.g., `(2, 1)` is Hessian by findif of gradients). In actual `driver.py`, the function calls have been switched out. The values set are the same, but the arguments like `(1, 0)` aren't necessarily appropriate in this non-ddd driver code routing.; - [x] the former function `_find_derivative_type` has been replaced by three functions headed up by `negotiate_derivative_type`. For both, the goal is to take a method name, the target derivative, and any user modifications and return the appropriate analytic or findif strategy or produce a helpful error. sounds simple, but managed methods and cbs specs complicate things. In ddd, this function is called early, not piecemeal throughout the driver, so more probing has been consolidated into the new function. In actual `driver.py`, the function calls have been switched out, but it's only using half the info due to differences in non-ddd driver code routing. To mirror ddd behavior, the function is called even for energy() and properties(), mostly to take the place of `_method_exists()`. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2536
https://github.com/psi4/psi4/pull/2536:2465,Testability,test,tests,2465,"est_dertype.py` and was never run. This unused fn and its testing was removed and replaced by the ddd version.; - [x] the new `negotiate_derivative_type` function probes managed methods earlier than before, so it happens that the exact error names (not the text) expected by stdsuite change.; - [x] the new `negotiate_derivative_type` function is called early, so it now handles the methodname typo helper (""Did you mean?"") that FAE added. The independent `_method_exists()` fn removed.; - [x] the former function `_set_convergence_criterion` where you passed in 5 integers for the different E/D_CONVERGENCE values has been rewritten as `negotiate_convergence_criterion` where you pass in a tuple of the case (e.g., `(2, 1)` is Hessian by findif of gradients). In actual `driver.py`, the function calls have been switched out. The values set are the same, but the arguments like `(1, 0)` aren't necessarily appropriate in this non-ddd driver code routing.; - [x] the former function `_find_derivative_type` has been replaced by three functions headed up by `negotiate_derivative_type`. For both, the goal is to take a method name, the target derivative, and any user modifications and return the appropriate analytic or findif strategy or produce a helpful error. sounds simple, but managed methods and cbs specs complicate things. In ddd, this function is called early, not piecemeal throughout the driver, so more probing has been consolidated into the new function. In actual `driver.py`, the function calls have been switched out, but it's only using half the info due to differences in non-ddd driver code routing. To mirror ddd behavior, the function is called even for energy() and properties(), mostly to take the place of `_method_exists()`. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2536
https://github.com/psi4/psi4/pull/2536:303,Usability,simpl,simpler,303,"## Description. This is No. 7 of the DDD series, #1351. ## Todos; - [x] test both old `run_json` and new `run_qcschema` modes and access patterns in the basic addons testing.; - [x] I don't remember in what order it came about, but `driver_util.py` had a function `negotiate_derivative_type` that was a simpler version (returned `analytic` and `1_0` for analytic and findif gradient, respectively) of the trio of functions in ddd (returns `(1, 1)` and `(1, 0)` for analytic and findif gradient, respectively) and was tested in `test_dertype.py` and was never run. This unused fn and its testing was removed and replaced by the ddd version.; - [x] the new `negotiate_derivative_type` function probes managed methods earlier than before, so it happens that the exact error names (not the text) expected by stdsuite change.; - [x] the new `negotiate_derivative_type` function is called early, so it now handles the methodname typo helper (""Did you mean?"") that FAE added. The independent `_method_exists()` fn removed.; - [x] the former function `_set_convergence_criterion` where you passed in 5 integers for the different E/D_CONVERGENCE values has been rewritten as `negotiate_convergence_criterion` where you pass in a tuple of the case (e.g., `(2, 1)` is Hessian by findif of gradients). In actual `driver.py`, the function calls have been switched out. The values set are the same, but the arguments like `(1, 0)` aren't necessarily appropriate in this non-ddd driver code routing.; - [x] the former function `_find_derivative_type` has been replaced by three functions headed up by `negotiate_derivative_type`. For both, the goal is to take a method name, the target derivative, and any user modifications and return the appropriate analytic or findif strategy or produce a helpful error. sounds simple, but managed methods and cbs specs complicate things. In ddd, this function is called early, not piecemeal throughout the driver, so more probing has been consolidated into the new function. In ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2536
https://github.com/psi4/psi4/pull/2536:1800,Usability,simpl,simple,1800,"est_dertype.py` and was never run. This unused fn and its testing was removed and replaced by the ddd version.; - [x] the new `negotiate_derivative_type` function probes managed methods earlier than before, so it happens that the exact error names (not the text) expected by stdsuite change.; - [x] the new `negotiate_derivative_type` function is called early, so it now handles the methodname typo helper (""Did you mean?"") that FAE added. The independent `_method_exists()` fn removed.; - [x] the former function `_set_convergence_criterion` where you passed in 5 integers for the different E/D_CONVERGENCE values has been rewritten as `negotiate_convergence_criterion` where you pass in a tuple of the case (e.g., `(2, 1)` is Hessian by findif of gradients). In actual `driver.py`, the function calls have been switched out. The values set are the same, but the arguments like `(1, 0)` aren't necessarily appropriate in this non-ddd driver code routing.; - [x] the former function `_find_derivative_type` has been replaced by three functions headed up by `negotiate_derivative_type`. For both, the goal is to take a method name, the target derivative, and any user modifications and return the appropriate analytic or findif strategy or produce a helpful error. sounds simple, but managed methods and cbs specs complicate things. In ddd, this function is called early, not piecemeal throughout the driver, so more probing has been consolidated into the new function. In actual `driver.py`, the function calls have been switched out, but it's only using half the info due to differences in non-ddd driver code routing. To mirror ddd behavior, the function is called even for energy() and properties(), mostly to take the place of `_method_exists()`. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2536
https://github.com/psi4/psi4/pull/2537:332,Deployability,release,release,332,"## Description; Kudos to @andysim for pointing out in January the exact 13 lines of code to change for the vast preponderance of the gaussian to standard ordering switch. As far as timeline, there's no particular reason this needs to be in for v1.6. But if we _could_ avoid hosting forever one fewer set of L2 packages for a single release, that'd be kind of nice. But fixing the output formats (i.e., fchk, qcsk, molden, fcidump) is likely to take some careful work. If anyone would like to tackle a part of this, go for it. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] current test status (pretty impressive, imo); - after g2g commit; - ctest: `99% tests passed, 3 tests failed out of 487`; - pytest: `12 failed, 2971 passed, 270 skipped, 269 xfailed`; - after first solidharmonics.cc commit; - ctest: ~`90% tests passed, 50 tests failed out of 487`~; - pytest: ~`43 failed, 2911 passed, 208 skipped, 269 xfailed`~; - [ ] only Linux in CI b/c only it has an appropriate L2 conda package built. - categories to examine; - [x] tdscf; - [x] cubeprop; - [ ] fchk; - [ ] qcsk atomicresult.wavefunction; - [x] mbis; - [ ] molden; - [ ] fcidump; - [ ] nbo. - fails pytest; - [x] tdscf; - [x] dft_block_schemes; - [ ] mcmurchie_davidson_consistency_angmom (fails because ref data are deposited in Gaussian ordering); - [ ] test_rhf_fchk[df-rhf-dft)]; - [ ] test_rhf_fchk[conv-rhf-dct]; - [ ] test_rhf_fchk[df-rhf-omp2]; - [ ] test_uhf_fchk[df-uhf-mp2]; - [ ] test_rhf_fchk[conv-rhf-ccsd] ; - [ ] test_uhf_fchk[df-uhf-dft]; - [ ] test_uhf_fchk[conv-uhf-ccsd]; - [ ] test_rhf_fchk[df-rhf-mp2]; - [ ] test_uhf_fchk[df-uhf]; - [ ] test_rhf_fchk[df-rhf)]; - [ ] test_rhf_fchk[conv-rhf-cc2]. - fails ctest; - [x]	103 - cubeprop (Failed); - [x]	104 - cubeprop-frontier (Failed); - [x]	123 - density-screen-2 (Timeout); - [x]	161 - dft-grad-lr1 (Failed); - [x]	162 - dft-grad-lr2 (Failed); - [x]	163 - dft-grad-lr3 (Failed); - [x]	168 - dft-b2plyp (Fail",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2537
https://github.com/psi4/psi4/pull/2537:268,Safety,avoid,avoid,268,"## Description; Kudos to @andysim for pointing out in January the exact 13 lines of code to change for the vast preponderance of the gaussian to standard ordering switch. As far as timeline, there's no particular reason this needs to be in for v1.6. But if we _could_ avoid hosting forever one fewer set of L2 packages for a single release, that'd be kind of nice. But fixing the output formats (i.e., fchk, qcsk, molden, fcidump) is likely to take some careful work. If anyone would like to tackle a part of this, go for it. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] current test status (pretty impressive, imo); - after g2g commit; - ctest: `99% tests passed, 3 tests failed out of 487`; - pytest: `12 failed, 2971 passed, 270 skipped, 269 xfailed`; - after first solidharmonics.cc commit; - ctest: ~`90% tests passed, 50 tests failed out of 487`~; - pytest: ~`43 failed, 2911 passed, 208 skipped, 269 xfailed`~; - [ ] only Linux in CI b/c only it has an appropriate L2 conda package built. - categories to examine; - [x] tdscf; - [x] cubeprop; - [ ] fchk; - [ ] qcsk atomicresult.wavefunction; - [x] mbis; - [ ] molden; - [ ] fcidump; - [ ] nbo. - fails pytest; - [x] tdscf; - [x] dft_block_schemes; - [ ] mcmurchie_davidson_consistency_angmom (fails because ref data are deposited in Gaussian ordering); - [ ] test_rhf_fchk[df-rhf-dft)]; - [ ] test_rhf_fchk[conv-rhf-dct]; - [ ] test_rhf_fchk[df-rhf-omp2]; - [ ] test_uhf_fchk[df-uhf-mp2]; - [ ] test_rhf_fchk[conv-rhf-ccsd] ; - [ ] test_uhf_fchk[df-uhf-dft]; - [ ] test_uhf_fchk[conv-uhf-ccsd]; - [ ] test_rhf_fchk[df-rhf-mp2]; - [ ] test_uhf_fchk[df-uhf]; - [ ] test_rhf_fchk[df-rhf)]; - [ ] test_rhf_fchk[conv-rhf-cc2]. - fails ctest; - [x]	103 - cubeprop (Failed); - [x]	104 - cubeprop-frontier (Failed); - [x]	123 - density-screen-2 (Timeout); - [x]	161 - dft-grad-lr1 (Failed); - [x]	162 - dft-grad-lr2 (Failed); - [x]	163 - dft-grad-lr3 (Failed); - [x]	168 - dft-b2plyp (Fail",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2537
https://github.com/psi4/psi4/pull/2537:1858,Safety,Timeout,Timeout,1858,t_rhf_fchk[df-rhf-mp2]; - [ ] test_uhf_fchk[df-uhf]; - [ ] test_rhf_fchk[df-rhf)]; - [ ] test_rhf_fchk[conv-rhf-cc2]. - fails ctest; - [x]	103 - cubeprop (Failed); - [x]	104 - cubeprop-frontier (Failed); - [x]	123 - density-screen-2 (Timeout); - [x]	161 - dft-grad-lr1 (Failed); - [x]	162 - dft-grad-lr2 (Failed); - [x]	163 - dft-grad-lr3 (Failed); - [x]	168 - dft-b2plyp (Failed); - [x]	170 - dft-ghost (Failed); - [x]	171 - dft-grad-meta (Failed); - [x]	173 - dft-freq-analytic (Failed); - [x]	174 - dft-grad1 (Failed); - [x]	175 - dft-grad2 (Failed); - [x]	177 - dft-b3lyp (Failed); - [x]	178 - dft1 (Failed); - [x]	179 - dft-vv10 (Failed); - [x]	180 - dft1-alt (Failed); - [x]	181 - dft2 (Failed); - [x]	182 - dft3 (Failed); - [x]	183 - dft-omega (Failed); - [x]	226 - frac-ip-fitting (Failed); - [x]	228 - frac-traverse (Failed); - [x]	234 - mbis-1 (Failed); - [x]	235 - mbis-2 (Failed); - [x]	236 - mbis-3 (Failed); - [x]	237 - mbis-4 (Failed); - [x]	238 - mbis-5 (Failed); - [x]	239 - mbis-6 (Failed); - [ ]	245 - mints3 (Failed) (fails because ref data are deposited in Gaussian ordering); - [x]	287 - olccd2 (Failed); - [x]	302 - omp3-3 (Failed); - [x]	307 - opt-lindep-change (Failed); - [x]	321 - opt13 (Failed); - [x]	348 - pywrap-checkrun-rhf (Failed); - [x]	350 - pywrap-checkrun-uhf (Failed); - [x]	366 - sapt-dft-api (Failed); - [x]	367 - sapt-dft-lrc (Failed); - [x]	390 - scf-level-shift-rks (Failed); - [x]	397 - soscf-dft (Failed); - [x]	401 - sapt-dft1 (Failed); - [x]	402 - sapt-dft2 (Failed); - [x]	405 - dft-custom (Failed); - [x]	425 - cubeprop-esp (Failed); - [ ]	434 - scf-coverage (Failed); - [x]	435 - dft-custom-dhdf (Failed); - [x]	437 - dft-custom-mgga (Failed); - [x]	438 - dft-custom-gga (Failed); - [x]	446 - tdscf-3 (Failed); - [x]	447 - tdscf-4 (Failed); - [x]	449 - tdscf-6 (Failed); - [x] 459 - linK-2 (Timeout); - [ ] 324 - opt-irc-2 (Failed). ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psic,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2537
https://github.com/psi4/psi4/pull/2537:3466,Safety,Timeout,Timeout,3466,t_rhf_fchk[df-rhf-mp2]; - [ ] test_uhf_fchk[df-uhf]; - [ ] test_rhf_fchk[df-rhf)]; - [ ] test_rhf_fchk[conv-rhf-cc2]. - fails ctest; - [x]	103 - cubeprop (Failed); - [x]	104 - cubeprop-frontier (Failed); - [x]	123 - density-screen-2 (Timeout); - [x]	161 - dft-grad-lr1 (Failed); - [x]	162 - dft-grad-lr2 (Failed); - [x]	163 - dft-grad-lr3 (Failed); - [x]	168 - dft-b2plyp (Failed); - [x]	170 - dft-ghost (Failed); - [x]	171 - dft-grad-meta (Failed); - [x]	173 - dft-freq-analytic (Failed); - [x]	174 - dft-grad1 (Failed); - [x]	175 - dft-grad2 (Failed); - [x]	177 - dft-b3lyp (Failed); - [x]	178 - dft1 (Failed); - [x]	179 - dft-vv10 (Failed); - [x]	180 - dft1-alt (Failed); - [x]	181 - dft2 (Failed); - [x]	182 - dft3 (Failed); - [x]	183 - dft-omega (Failed); - [x]	226 - frac-ip-fitting (Failed); - [x]	228 - frac-traverse (Failed); - [x]	234 - mbis-1 (Failed); - [x]	235 - mbis-2 (Failed); - [x]	236 - mbis-3 (Failed); - [x]	237 - mbis-4 (Failed); - [x]	238 - mbis-5 (Failed); - [x]	239 - mbis-6 (Failed); - [ ]	245 - mints3 (Failed) (fails because ref data are deposited in Gaussian ordering); - [x]	287 - olccd2 (Failed); - [x]	302 - omp3-3 (Failed); - [x]	307 - opt-lindep-change (Failed); - [x]	321 - opt13 (Failed); - [x]	348 - pywrap-checkrun-rhf (Failed); - [x]	350 - pywrap-checkrun-uhf (Failed); - [x]	366 - sapt-dft-api (Failed); - [x]	367 - sapt-dft-lrc (Failed); - [x]	390 - scf-level-shift-rks (Failed); - [x]	397 - soscf-dft (Failed); - [x]	401 - sapt-dft1 (Failed); - [x]	402 - sapt-dft2 (Failed); - [x]	405 - dft-custom (Failed); - [x]	425 - cubeprop-esp (Failed); - [ ]	434 - scf-coverage (Failed); - [x]	435 - dft-custom-dhdf (Failed); - [x]	437 - dft-custom-mgga (Failed); - [x]	438 - dft-custom-gga (Failed); - [x]	446 - tdscf-3 (Failed); - [x]	447 - tdscf-4 (Failed); - [x]	449 - tdscf-6 (Failed); - [x] 459 - linK-2 (Timeout); - [ ] 324 - opt-irc-2 (Failed). ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psic,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2537
https://github.com/psi4/psi4/pull/2537:641,Testability,test,test,641,"## Description; Kudos to @andysim for pointing out in January the exact 13 lines of code to change for the vast preponderance of the gaussian to standard ordering switch. As far as timeline, there's no particular reason this needs to be in for v1.6. But if we _could_ avoid hosting forever one fewer set of L2 packages for a single release, that'd be kind of nice. But fixing the output formats (i.e., fchk, qcsk, molden, fcidump) is likely to take some careful work. If anyone would like to tackle a part of this, go for it. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] current test status (pretty impressive, imo); - after g2g commit; - ctest: `99% tests passed, 3 tests failed out of 487`; - pytest: `12 failed, 2971 passed, 270 skipped, 269 xfailed`; - after first solidharmonics.cc commit; - ctest: ~`90% tests passed, 50 tests failed out of 487`~; - pytest: ~`43 failed, 2911 passed, 208 skipped, 269 xfailed`~; - [ ] only Linux in CI b/c only it has an appropriate L2 conda package built. - categories to examine; - [x] tdscf; - [x] cubeprop; - [ ] fchk; - [ ] qcsk atomicresult.wavefunction; - [x] mbis; - [ ] molden; - [ ] fcidump; - [ ] nbo. - fails pytest; - [x] tdscf; - [x] dft_block_schemes; - [ ] mcmurchie_davidson_consistency_angmom (fails because ref data are deposited in Gaussian ordering); - [ ] test_rhf_fchk[df-rhf-dft)]; - [ ] test_rhf_fchk[conv-rhf-dct]; - [ ] test_rhf_fchk[df-rhf-omp2]; - [ ] test_uhf_fchk[df-uhf-mp2]; - [ ] test_rhf_fchk[conv-rhf-ccsd] ; - [ ] test_uhf_fchk[df-uhf-dft]; - [ ] test_uhf_fchk[conv-uhf-ccsd]; - [ ] test_rhf_fchk[df-rhf-mp2]; - [ ] test_uhf_fchk[df-uhf]; - [ ] test_rhf_fchk[df-rhf)]; - [ ] test_rhf_fchk[conv-rhf-cc2]. - fails ctest; - [x]	103 - cubeprop (Failed); - [x]	104 - cubeprop-frontier (Failed); - [x]	123 - density-screen-2 (Timeout); - [x]	161 - dft-grad-lr1 (Failed); - [x]	162 - dft-grad-lr2 (Failed); - [x]	163 - dft-grad-lr3 (Failed); - [x]	168 - dft-b2plyp (Fail",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2537
https://github.com/psi4/psi4/pull/2537:713,Testability,test,tests,713,"## Description; Kudos to @andysim for pointing out in January the exact 13 lines of code to change for the vast preponderance of the gaussian to standard ordering switch. As far as timeline, there's no particular reason this needs to be in for v1.6. But if we _could_ avoid hosting forever one fewer set of L2 packages for a single release, that'd be kind of nice. But fixing the output formats (i.e., fchk, qcsk, molden, fcidump) is likely to take some careful work. If anyone would like to tackle a part of this, go for it. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] current test status (pretty impressive, imo); - after g2g commit; - ctest: `99% tests passed, 3 tests failed out of 487`; - pytest: `12 failed, 2971 passed, 270 skipped, 269 xfailed`; - after first solidharmonics.cc commit; - ctest: ~`90% tests passed, 50 tests failed out of 487`~; - pytest: ~`43 failed, 2911 passed, 208 skipped, 269 xfailed`~; - [ ] only Linux in CI b/c only it has an appropriate L2 conda package built. - categories to examine; - [x] tdscf; - [x] cubeprop; - [ ] fchk; - [ ] qcsk atomicresult.wavefunction; - [x] mbis; - [ ] molden; - [ ] fcidump; - [ ] nbo. - fails pytest; - [x] tdscf; - [x] dft_block_schemes; - [ ] mcmurchie_davidson_consistency_angmom (fails because ref data are deposited in Gaussian ordering); - [ ] test_rhf_fchk[df-rhf-dft)]; - [ ] test_rhf_fchk[conv-rhf-dct]; - [ ] test_rhf_fchk[df-rhf-omp2]; - [ ] test_uhf_fchk[df-uhf-mp2]; - [ ] test_rhf_fchk[conv-rhf-ccsd] ; - [ ] test_uhf_fchk[df-uhf-dft]; - [ ] test_uhf_fchk[conv-uhf-ccsd]; - [ ] test_rhf_fchk[df-rhf-mp2]; - [ ] test_uhf_fchk[df-uhf]; - [ ] test_rhf_fchk[df-rhf)]; - [ ] test_rhf_fchk[conv-rhf-cc2]. - fails ctest; - [x]	103 - cubeprop (Failed); - [x]	104 - cubeprop-frontier (Failed); - [x]	123 - density-screen-2 (Timeout); - [x]	161 - dft-grad-lr1 (Failed); - [x]	162 - dft-grad-lr2 (Failed); - [x]	163 - dft-grad-lr3 (Failed); - [x]	168 - dft-b2plyp (Fail",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2537
https://github.com/psi4/psi4/pull/2537:729,Testability,test,tests,729,"## Description; Kudos to @andysim for pointing out in January the exact 13 lines of code to change for the vast preponderance of the gaussian to standard ordering switch. As far as timeline, there's no particular reason this needs to be in for v1.6. But if we _could_ avoid hosting forever one fewer set of L2 packages for a single release, that'd be kind of nice. But fixing the output formats (i.e., fchk, qcsk, molden, fcidump) is likely to take some careful work. If anyone would like to tackle a part of this, go for it. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] current test status (pretty impressive, imo); - after g2g commit; - ctest: `99% tests passed, 3 tests failed out of 487`; - pytest: `12 failed, 2971 passed, 270 skipped, 269 xfailed`; - after first solidharmonics.cc commit; - ctest: ~`90% tests passed, 50 tests failed out of 487`~; - pytest: ~`43 failed, 2911 passed, 208 skipped, 269 xfailed`~; - [ ] only Linux in CI b/c only it has an appropriate L2 conda package built. - categories to examine; - [x] tdscf; - [x] cubeprop; - [ ] fchk; - [ ] qcsk atomicresult.wavefunction; - [x] mbis; - [ ] molden; - [ ] fcidump; - [ ] nbo. - fails pytest; - [x] tdscf; - [x] dft_block_schemes; - [ ] mcmurchie_davidson_consistency_angmom (fails because ref data are deposited in Gaussian ordering); - [ ] test_rhf_fchk[df-rhf-dft)]; - [ ] test_rhf_fchk[conv-rhf-dct]; - [ ] test_rhf_fchk[df-rhf-omp2]; - [ ] test_uhf_fchk[df-uhf-mp2]; - [ ] test_rhf_fchk[conv-rhf-ccsd] ; - [ ] test_uhf_fchk[df-uhf-dft]; - [ ] test_uhf_fchk[conv-uhf-ccsd]; - [ ] test_rhf_fchk[df-rhf-mp2]; - [ ] test_uhf_fchk[df-uhf]; - [ ] test_rhf_fchk[df-rhf)]; - [ ] test_rhf_fchk[conv-rhf-cc2]. - fails ctest; - [x]	103 - cubeprop (Failed); - [x]	104 - cubeprop-frontier (Failed); - [x]	123 - density-screen-2 (Timeout); - [x]	161 - dft-grad-lr1 (Failed); - [x]	162 - dft-grad-lr2 (Failed); - [x]	163 - dft-grad-lr3 (Failed); - [x]	168 - dft-b2plyp (Fail",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2537
https://github.com/psi4/psi4/pull/2537:872,Testability,test,tests,872,"## Description; Kudos to @andysim for pointing out in January the exact 13 lines of code to change for the vast preponderance of the gaussian to standard ordering switch. As far as timeline, there's no particular reason this needs to be in for v1.6. But if we _could_ avoid hosting forever one fewer set of L2 packages for a single release, that'd be kind of nice. But fixing the output formats (i.e., fchk, qcsk, molden, fcidump) is likely to take some careful work. If anyone would like to tackle a part of this, go for it. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] current test status (pretty impressive, imo); - after g2g commit; - ctest: `99% tests passed, 3 tests failed out of 487`; - pytest: `12 failed, 2971 passed, 270 skipped, 269 xfailed`; - after first solidharmonics.cc commit; - ctest: ~`90% tests passed, 50 tests failed out of 487`~; - pytest: ~`43 failed, 2911 passed, 208 skipped, 269 xfailed`~; - [ ] only Linux in CI b/c only it has an appropriate L2 conda package built. - categories to examine; - [x] tdscf; - [x] cubeprop; - [ ] fchk; - [ ] qcsk atomicresult.wavefunction; - [x] mbis; - [ ] molden; - [ ] fcidump; - [ ] nbo. - fails pytest; - [x] tdscf; - [x] dft_block_schemes; - [ ] mcmurchie_davidson_consistency_angmom (fails because ref data are deposited in Gaussian ordering); - [ ] test_rhf_fchk[df-rhf-dft)]; - [ ] test_rhf_fchk[conv-rhf-dct]; - [ ] test_rhf_fchk[df-rhf-omp2]; - [ ] test_uhf_fchk[df-uhf-mp2]; - [ ] test_rhf_fchk[conv-rhf-ccsd] ; - [ ] test_uhf_fchk[df-uhf-dft]; - [ ] test_uhf_fchk[conv-uhf-ccsd]; - [ ] test_rhf_fchk[df-rhf-mp2]; - [ ] test_uhf_fchk[df-uhf]; - [ ] test_rhf_fchk[df-rhf)]; - [ ] test_rhf_fchk[conv-rhf-cc2]. - fails ctest; - [x]	103 - cubeprop (Failed); - [x]	104 - cubeprop-frontier (Failed); - [x]	123 - density-screen-2 (Timeout); - [x]	161 - dft-grad-lr1 (Failed); - [x]	162 - dft-grad-lr2 (Failed); - [x]	163 - dft-grad-lr3 (Failed); - [x]	168 - dft-b2plyp (Fail",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2537
https://github.com/psi4/psi4/pull/2537:889,Testability,test,tests,889,"## Description; Kudos to @andysim for pointing out in January the exact 13 lines of code to change for the vast preponderance of the gaussian to standard ordering switch. As far as timeline, there's no particular reason this needs to be in for v1.6. But if we _could_ avoid hosting forever one fewer set of L2 packages for a single release, that'd be kind of nice. But fixing the output formats (i.e., fchk, qcsk, molden, fcidump) is likely to take some careful work. If anyone would like to tackle a part of this, go for it. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] current test status (pretty impressive, imo); - after g2g commit; - ctest: `99% tests passed, 3 tests failed out of 487`; - pytest: `12 failed, 2971 passed, 270 skipped, 269 xfailed`; - after first solidharmonics.cc commit; - ctest: ~`90% tests passed, 50 tests failed out of 487`~; - pytest: ~`43 failed, 2911 passed, 208 skipped, 269 xfailed`~; - [ ] only Linux in CI b/c only it has an appropriate L2 conda package built. - categories to examine; - [x] tdscf; - [x] cubeprop; - [ ] fchk; - [ ] qcsk atomicresult.wavefunction; - [x] mbis; - [ ] molden; - [ ] fcidump; - [ ] nbo. - fails pytest; - [x] tdscf; - [x] dft_block_schemes; - [ ] mcmurchie_davidson_consistency_angmom (fails because ref data are deposited in Gaussian ordering); - [ ] test_rhf_fchk[df-rhf-dft)]; - [ ] test_rhf_fchk[conv-rhf-dct]; - [ ] test_rhf_fchk[df-rhf-omp2]; - [ ] test_uhf_fchk[df-uhf-mp2]; - [ ] test_rhf_fchk[conv-rhf-ccsd] ; - [ ] test_uhf_fchk[df-uhf-dft]; - [ ] test_uhf_fchk[conv-uhf-ccsd]; - [ ] test_rhf_fchk[df-rhf-mp2]; - [ ] test_uhf_fchk[df-uhf]; - [ ] test_rhf_fchk[df-rhf)]; - [ ] test_rhf_fchk[conv-rhf-cc2]. - fails ctest; - [x]	103 - cubeprop (Failed); - [x]	104 - cubeprop-frontier (Failed); - [x]	123 - density-screen-2 (Timeout); - [x]	161 - dft-grad-lr1 (Failed); - [x]	162 - dft-grad-lr2 (Failed); - [x]	163 - dft-grad-lr3 (Failed); - [x]	168 - dft-b2plyp (Fail",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2537
https://github.com/psi4/psi4/pull/2537:3528,Testability,Test,Tests,3528,- [x]	103 - cubeprop (Failed); - [x]	104 - cubeprop-frontier (Failed); - [x]	123 - density-screen-2 (Timeout); - [x]	161 - dft-grad-lr1 (Failed); - [x]	162 - dft-grad-lr2 (Failed); - [x]	163 - dft-grad-lr3 (Failed); - [x]	168 - dft-b2plyp (Failed); - [x]	170 - dft-ghost (Failed); - [x]	171 - dft-grad-meta (Failed); - [x]	173 - dft-freq-analytic (Failed); - [x]	174 - dft-grad1 (Failed); - [x]	175 - dft-grad2 (Failed); - [x]	177 - dft-b3lyp (Failed); - [x]	178 - dft1 (Failed); - [x]	179 - dft-vv10 (Failed); - [x]	180 - dft1-alt (Failed); - [x]	181 - dft2 (Failed); - [x]	182 - dft3 (Failed); - [x]	183 - dft-omega (Failed); - [x]	226 - frac-ip-fitting (Failed); - [x]	228 - frac-traverse (Failed); - [x]	234 - mbis-1 (Failed); - [x]	235 - mbis-2 (Failed); - [x]	236 - mbis-3 (Failed); - [x]	237 - mbis-4 (Failed); - [x]	238 - mbis-5 (Failed); - [x]	239 - mbis-6 (Failed); - [ ]	245 - mints3 (Failed) (fails because ref data are deposited in Gaussian ordering); - [x]	287 - olccd2 (Failed); - [x]	302 - omp3-3 (Failed); - [x]	307 - opt-lindep-change (Failed); - [x]	321 - opt13 (Failed); - [x]	348 - pywrap-checkrun-rhf (Failed); - [x]	350 - pywrap-checkrun-uhf (Failed); - [x]	366 - sapt-dft-api (Failed); - [x]	367 - sapt-dft-lrc (Failed); - [x]	390 - scf-level-shift-rks (Failed); - [x]	397 - soscf-dft (Failed); - [x]	401 - sapt-dft1 (Failed); - [x]	402 - sapt-dft2 (Failed); - [x]	405 - dft-custom (Failed); - [x]	425 - cubeprop-esp (Failed); - [ ]	434 - scf-coverage (Failed); - [x]	435 - dft-custom-dhdf (Failed); - [x]	437 - dft-custom-mgga (Failed); - [x]	438 - dft-custom-gga (Failed); - [x]	446 - tdscf-3 (Failed); - [x]	447 - tdscf-4 (Failed); - [x]	449 - tdscf-6 (Failed); - [x] 459 - linK-2 (Timeout); - [ ] 324 - opt-irc-2 (Failed). ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2537
https://github.com/psi4/psi4/pull/2537:3602,Testability,test,tests,3602,- [x]	103 - cubeprop (Failed); - [x]	104 - cubeprop-frontier (Failed); - [x]	123 - density-screen-2 (Timeout); - [x]	161 - dft-grad-lr1 (Failed); - [x]	162 - dft-grad-lr2 (Failed); - [x]	163 - dft-grad-lr3 (Failed); - [x]	168 - dft-b2plyp (Failed); - [x]	170 - dft-ghost (Failed); - [x]	171 - dft-grad-meta (Failed); - [x]	173 - dft-freq-analytic (Failed); - [x]	174 - dft-grad1 (Failed); - [x]	175 - dft-grad2 (Failed); - [x]	177 - dft-b3lyp (Failed); - [x]	178 - dft1 (Failed); - [x]	179 - dft-vv10 (Failed); - [x]	180 - dft1-alt (Failed); - [x]	181 - dft2 (Failed); - [x]	182 - dft3 (Failed); - [x]	183 - dft-omega (Failed); - [x]	226 - frac-ip-fitting (Failed); - [x]	228 - frac-traverse (Failed); - [x]	234 - mbis-1 (Failed); - [x]	235 - mbis-2 (Failed); - [x]	236 - mbis-3 (Failed); - [x]	237 - mbis-4 (Failed); - [x]	238 - mbis-5 (Failed); - [x]	239 - mbis-6 (Failed); - [ ]	245 - mints3 (Failed) (fails because ref data are deposited in Gaussian ordering); - [x]	287 - olccd2 (Failed); - [x]	302 - omp3-3 (Failed); - [x]	307 - opt-lindep-change (Failed); - [x]	321 - opt13 (Failed); - [x]	348 - pywrap-checkrun-rhf (Failed); - [x]	350 - pywrap-checkrun-uhf (Failed); - [x]	366 - sapt-dft-api (Failed); - [x]	367 - sapt-dft-lrc (Failed); - [x]	390 - scf-level-shift-rks (Failed); - [x]	397 - soscf-dft (Failed); - [x]	401 - sapt-dft1 (Failed); - [x]	402 - sapt-dft2 (Failed); - [x]	405 - dft-custom (Failed); - [x]	425 - cubeprop-esp (Failed); - [ ]	434 - scf-coverage (Failed); - [x]	435 - dft-custom-dhdf (Failed); - [x]	437 - dft-custom-mgga (Failed); - [x]	438 - dft-custom-gga (Failed); - [x]	446 - tdscf-3 (Failed); - [x]	447 - tdscf-4 (Failed); - [x]	449 - tdscf-6 (Failed); - [x] 459 - linK-2 (Timeout); - [ ] 324 - opt-irc-2 (Failed). ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2537
https://github.com/psi4/psi4/pull/2537:3693,Testability,test,tests,3693,- [x]	103 - cubeprop (Failed); - [x]	104 - cubeprop-frontier (Failed); - [x]	123 - density-screen-2 (Timeout); - [x]	161 - dft-grad-lr1 (Failed); - [x]	162 - dft-grad-lr2 (Failed); - [x]	163 - dft-grad-lr3 (Failed); - [x]	168 - dft-b2plyp (Failed); - [x]	170 - dft-ghost (Failed); - [x]	171 - dft-grad-meta (Failed); - [x]	173 - dft-freq-analytic (Failed); - [x]	174 - dft-grad1 (Failed); - [x]	175 - dft-grad2 (Failed); - [x]	177 - dft-b3lyp (Failed); - [x]	178 - dft1 (Failed); - [x]	179 - dft-vv10 (Failed); - [x]	180 - dft1-alt (Failed); - [x]	181 - dft2 (Failed); - [x]	182 - dft3 (Failed); - [x]	183 - dft-omega (Failed); - [x]	226 - frac-ip-fitting (Failed); - [x]	228 - frac-traverse (Failed); - [x]	234 - mbis-1 (Failed); - [x]	235 - mbis-2 (Failed); - [x]	236 - mbis-3 (Failed); - [x]	237 - mbis-4 (Failed); - [x]	238 - mbis-5 (Failed); - [x]	239 - mbis-6 (Failed); - [ ]	245 - mints3 (Failed) (fails because ref data are deposited in Gaussian ordering); - [x]	287 - olccd2 (Failed); - [x]	302 - omp3-3 (Failed); - [x]	307 - opt-lindep-change (Failed); - [x]	321 - opt13 (Failed); - [x]	348 - pywrap-checkrun-rhf (Failed); - [x]	350 - pywrap-checkrun-uhf (Failed); - [x]	366 - sapt-dft-api (Failed); - [x]	367 - sapt-dft-lrc (Failed); - [x]	390 - scf-level-shift-rks (Failed); - [x]	397 - soscf-dft (Failed); - [x]	401 - sapt-dft1 (Failed); - [x]	402 - sapt-dft2 (Failed); - [x]	405 - dft-custom (Failed); - [x]	425 - cubeprop-esp (Failed); - [ ]	434 - scf-coverage (Failed); - [x]	435 - dft-custom-dhdf (Failed); - [x]	437 - dft-custom-mgga (Failed); - [x]	438 - dft-custom-gga (Failed); - [x]	446 - tdscf-3 (Failed); - [x]	447 - tdscf-4 (Failed); - [x]	449 - tdscf-6 (Failed); - [x] 459 - linK-2 (Timeout); - [ ] 324 - opt-irc-2 (Failed). ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2537
https://github.com/psi4/psi4/pull/2538:158,Energy Efficiency,adapt,adapt,158,"## Description; This PR adds support for the remaining access patterns for EOM oscillator strengths and einstein coefficients. The pieces are now in place to adapt densities and multipoles as well. I'm hopeful that will be the next PR, which should be enough to get 3 of the 4 remaining cc tests ported over. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Infrastructure Change: `ccdensity` and `cceom` now require an incoming `CCEnergyWavefunction`; - [x] Infrastructure Change: `CCEnergyWavefunction` now has a field to store excited state symmetry labels; - [x] Infrastructure Change: Some SharedWavefunction arguments became refernces to CCEnergyWavefunction; - [x] Fully moved `cceom` internal vars to new standard. ## Checklist; - [x] `eom` ctests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2538
https://github.com/psi4/psi4/pull/2538:158,Modifiability,adapt,adapt,158,"## Description; This PR adds support for the remaining access patterns for EOM oscillator strengths and einstein coefficients. The pieces are now in place to adapt densities and multipoles as well. I'm hopeful that will be the next PR, which should be enough to get 3 of the 4 remaining cc tests ported over. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Infrastructure Change: `ccdensity` and `cceom` now require an incoming `CCEnergyWavefunction`; - [x] Infrastructure Change: `CCEnergyWavefunction` now has a field to store excited state symmetry labels; - [x] Infrastructure Change: Some SharedWavefunction arguments became refernces to CCEnergyWavefunction; - [x] Fully moved `cceom` internal vars to new standard. ## Checklist; - [x] `eom` ctests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2538
https://github.com/psi4/psi4/pull/2538:55,Security,access,access,55,"## Description; This PR adds support for the remaining access patterns for EOM oscillator strengths and einstein coefficients. The pieces are now in place to adapt densities and multipoles as well. I'm hopeful that will be the next PR, which should be enough to get 3 of the 4 remaining cc tests ported over. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Infrastructure Change: `ccdensity` and `cceom` now require an incoming `CCEnergyWavefunction`; - [x] Infrastructure Change: `CCEnergyWavefunction` now has a field to store excited state symmetry labels; - [x] Infrastructure Change: Some SharedWavefunction arguments became refernces to CCEnergyWavefunction; - [x] Fully moved `cceom` internal vars to new standard. ## Checklist; - [x] `eom` ctests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2538
https://github.com/psi4/psi4/pull/2538:290,Testability,test,tests,290,"## Description; This PR adds support for the remaining access patterns for EOM oscillator strengths and einstein coefficients. The pieces are now in place to adapt densities and multipoles as well. I'm hopeful that will be the next PR, which should be enough to get 3 of the 4 remaining cc tests ported over. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Infrastructure Change: `ccdensity` and `cceom` now require an incoming `CCEnergyWavefunction`; - [x] Infrastructure Change: `CCEnergyWavefunction` now has a field to store excited state symmetry labels; - [x] Infrastructure Change: Some SharedWavefunction arguments became refernces to CCEnergyWavefunction; - [x] Fully moved `cceom` internal vars to new standard. ## Checklist; - [x] `eom` ctests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2538
https://github.com/psi4/psi4/pull/2539:98,Testability,test,test,98,## Description; Fixes the documentation build because I forgot to remove the deleted `adcc` cmake test dir from `doc/sphinxman/document_tests.pl`. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2539
https://github.com/psi4/psi4/pull/2539:331,Testability,Test,Tests,331,## Description; Fixes the documentation build because I forgot to remove the deleted `adcc` cmake test dir from `doc/sphinxman/document_tests.pl`. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2539
https://github.com/psi4/psi4/pull/2539:405,Testability,test,tests,405,## Description; Fixes the documentation build because I forgot to remove the deleted `adcc` cmake test dir from `doc/sphinxman/document_tests.pl`. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2539
https://github.com/psi4/psi4/pull/2539:496,Testability,test,tests,496,## Description; Fixes the documentation build because I forgot to remove the deleted `adcc` cmake test dir from `doc/sphinxman/document_tests.pl`. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2539
https://github.com/psi4/psi4/pull/2540:159,Deployability,install,installing,159,"## Description; believe it or not, every ""fix windows conda package"" commit in the past week has actually fixed the problem at hand. for this round, let's try installing databases on windows and anchoring scripts from module. EDIT:; - [x] confirmed to actually fix windows conda-build; - [x] pytest 7 now on defaults, so let's try lifting constraints. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2540
https://github.com/psi4/psi4/pull/2541:132,Deployability,Update,Updated,132,"## Description; More `cc` tests ported over. There's one `autotest` test left. ## Todos; - [x] Documented several CC psivars; - [x] Updated dipole size managing functions to work with new ""DIPOLE -"" syntax; - [x] cc density variables renamed to new syntax; - [x] cc dipole/quadrupole variables renamed to new syntax . ## Checklist; - [x] ctests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2541
https://github.com/psi4/psi4/pull/2541:224,Modifiability,variab,variables,224,"## Description; More `cc` tests ported over. There's one `autotest` test left. ## Todos; - [x] Documented several CC psivars; - [x] Updated dipole size managing functions to work with new ""DIPOLE -"" syntax; - [x] cc density variables renamed to new syntax; - [x] cc dipole/quadrupole variables renamed to new syntax . ## Checklist; - [x] ctests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2541
https://github.com/psi4/psi4/pull/2541:284,Modifiability,variab,variables,284,"## Description; More `cc` tests ported over. There's one `autotest` test left. ## Todos; - [x] Documented several CC psivars; - [x] Updated dipole size managing functions to work with new ""DIPOLE -"" syntax; - [x] cc density variables renamed to new syntax; - [x] cc dipole/quadrupole variables renamed to new syntax . ## Checklist; - [x] ctests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2541
https://github.com/psi4/psi4/pull/2541:26,Testability,test,tests,26,"## Description; More `cc` tests ported over. There's one `autotest` test left. ## Todos; - [x] Documented several CC psivars; - [x] Updated dipole size managing functions to work with new ""DIPOLE -"" syntax; - [x] cc density variables renamed to new syntax; - [x] cc dipole/quadrupole variables renamed to new syntax . ## Checklist; - [x] ctests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2541
https://github.com/psi4/psi4/pull/2541:68,Testability,test,test,68,"## Description; More `cc` tests ported over. There's one `autotest` test left. ## Todos; - [x] Documented several CC psivars; - [x] Updated dipole size managing functions to work with new ""DIPOLE -"" syntax; - [x] cc density variables renamed to new syntax; - [x] cc dipole/quadrupole variables renamed to new syntax . ## Checklist; - [x] ctests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2541
https://github.com/psi4/psi4/issues/2542:134,Availability,fault,fault,134,"Dear Psi4 developers,. I recently created a new conda env and found that a code that previously has been working gave me segmentation fault. I added break points in my code and found the errors came from ERI. The simplified version of the codes (I only extracted the minimal part to reproduce the error) is below:; ```; import sys; import numpy as np; import psi4. basisname = ""def2-tzvp""; auxbasis = ""def2-tzvp""; theory = ""scf"". psi4.set_memory('4 GB'); psi4.set_num_threads(1); psi4.core.set_output_file('output.dat', False). ang2bohr = 1.88973; bohr2ang = 1/ang2bohr. molstr = ""H -0.5187926292419434 7.475999355316162 -5.560068130493164\nH 0.8894014358520508 6.672944068908691 -4.7793121337890625\nO 0.4382983446121216 7.725281715393066 -4.912882328033447\nsymmetry c1\nno_reorient\nno_com""; mol = psi4.geometry(molstr). print(""Computing "" + theory + "" gradient...""); grad, wfn = psi4.gradient('{}/{}'.format(theory,basisname), return_wfn=True). orbital_basis = wfn.basisset(); aux_basis = psi4.core.BasisSet.build(mol, ""DF_BASIS_SCF"", """", ""JKFIT"", auxbasis); print(aux_basis.nbf()). zero_basis = psi4.core.BasisSet.zero_ao_basis_set(); mints = psi4.core.MintsHelper(orbital_basis). abQ = mints.ao_eri(orbital_basis, orbital_basis, aux_basis, zero_basis) # This line causes the error; ```. Previously I was using psi4=1.3.2+ecbda83 and psi4=1.4a2.dev723+fb499f4. The current version that gives me segmentation fault is psi4=1.5+e9f4d6d. The error is; ```; forrtl: severe (174): SIGSEGV, segmentation fault occurred; Image PC Routine Line Source; libgdma.so 00007F9CA744F17B for__signal_handl Unknown Unknown; libpthread-2.17.s 00007F9CC324B630 Unknown Unknown Unknown; libgdma.so 00007F9CA744ED5C for__signal_handl Unknown Unknown; libpthread-2.17.s 00007F9CC324B630 Unknown Unknown Unknown; ```. Could you let me know what may cause this error and what changes may be ascribed to it?. Best regards,; Chenru",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2542
https://github.com/psi4/psi4/issues/2542:187,Availability,error,errors,187,"Dear Psi4 developers,. I recently created a new conda env and found that a code that previously has been working gave me segmentation fault. I added break points in my code and found the errors came from ERI. The simplified version of the codes (I only extracted the minimal part to reproduce the error) is below:; ```; import sys; import numpy as np; import psi4. basisname = ""def2-tzvp""; auxbasis = ""def2-tzvp""; theory = ""scf"". psi4.set_memory('4 GB'); psi4.set_num_threads(1); psi4.core.set_output_file('output.dat', False). ang2bohr = 1.88973; bohr2ang = 1/ang2bohr. molstr = ""H -0.5187926292419434 7.475999355316162 -5.560068130493164\nH 0.8894014358520508 6.672944068908691 -4.7793121337890625\nO 0.4382983446121216 7.725281715393066 -4.912882328033447\nsymmetry c1\nno_reorient\nno_com""; mol = psi4.geometry(molstr). print(""Computing "" + theory + "" gradient...""); grad, wfn = psi4.gradient('{}/{}'.format(theory,basisname), return_wfn=True). orbital_basis = wfn.basisset(); aux_basis = psi4.core.BasisSet.build(mol, ""DF_BASIS_SCF"", """", ""JKFIT"", auxbasis); print(aux_basis.nbf()). zero_basis = psi4.core.BasisSet.zero_ao_basis_set(); mints = psi4.core.MintsHelper(orbital_basis). abQ = mints.ao_eri(orbital_basis, orbital_basis, aux_basis, zero_basis) # This line causes the error; ```. Previously I was using psi4=1.3.2+ecbda83 and psi4=1.4a2.dev723+fb499f4. The current version that gives me segmentation fault is psi4=1.5+e9f4d6d. The error is; ```; forrtl: severe (174): SIGSEGV, segmentation fault occurred; Image PC Routine Line Source; libgdma.so 00007F9CA744F17B for__signal_handl Unknown Unknown; libpthread-2.17.s 00007F9CC324B630 Unknown Unknown Unknown; libgdma.so 00007F9CA744ED5C for__signal_handl Unknown Unknown; libpthread-2.17.s 00007F9CC324B630 Unknown Unknown Unknown; ```. Could you let me know what may cause this error and what changes may be ascribed to it?. Best regards,; Chenru",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2542
https://github.com/psi4/psi4/issues/2542:297,Availability,error,error,297,"Dear Psi4 developers,. I recently created a new conda env and found that a code that previously has been working gave me segmentation fault. I added break points in my code and found the errors came from ERI. The simplified version of the codes (I only extracted the minimal part to reproduce the error) is below:; ```; import sys; import numpy as np; import psi4. basisname = ""def2-tzvp""; auxbasis = ""def2-tzvp""; theory = ""scf"". psi4.set_memory('4 GB'); psi4.set_num_threads(1); psi4.core.set_output_file('output.dat', False). ang2bohr = 1.88973; bohr2ang = 1/ang2bohr. molstr = ""H -0.5187926292419434 7.475999355316162 -5.560068130493164\nH 0.8894014358520508 6.672944068908691 -4.7793121337890625\nO 0.4382983446121216 7.725281715393066 -4.912882328033447\nsymmetry c1\nno_reorient\nno_com""; mol = psi4.geometry(molstr). print(""Computing "" + theory + "" gradient...""); grad, wfn = psi4.gradient('{}/{}'.format(theory,basisname), return_wfn=True). orbital_basis = wfn.basisset(); aux_basis = psi4.core.BasisSet.build(mol, ""DF_BASIS_SCF"", """", ""JKFIT"", auxbasis); print(aux_basis.nbf()). zero_basis = psi4.core.BasisSet.zero_ao_basis_set(); mints = psi4.core.MintsHelper(orbital_basis). abQ = mints.ao_eri(orbital_basis, orbital_basis, aux_basis, zero_basis) # This line causes the error; ```. Previously I was using psi4=1.3.2+ecbda83 and psi4=1.4a2.dev723+fb499f4. The current version that gives me segmentation fault is psi4=1.5+e9f4d6d. The error is; ```; forrtl: severe (174): SIGSEGV, segmentation fault occurred; Image PC Routine Line Source; libgdma.so 00007F9CA744F17B for__signal_handl Unknown Unknown; libpthread-2.17.s 00007F9CC324B630 Unknown Unknown Unknown; libgdma.so 00007F9CA744ED5C for__signal_handl Unknown Unknown; libpthread-2.17.s 00007F9CC324B630 Unknown Unknown Unknown; ```. Could you let me know what may cause this error and what changes may be ascribed to it?. Best regards,; Chenru",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2542
https://github.com/psi4/psi4/issues/2542:1281,Availability,error,error,1281,"Dear Psi4 developers,. I recently created a new conda env and found that a code that previously has been working gave me segmentation fault. I added break points in my code and found the errors came from ERI. The simplified version of the codes (I only extracted the minimal part to reproduce the error) is below:; ```; import sys; import numpy as np; import psi4. basisname = ""def2-tzvp""; auxbasis = ""def2-tzvp""; theory = ""scf"". psi4.set_memory('4 GB'); psi4.set_num_threads(1); psi4.core.set_output_file('output.dat', False). ang2bohr = 1.88973; bohr2ang = 1/ang2bohr. molstr = ""H -0.5187926292419434 7.475999355316162 -5.560068130493164\nH 0.8894014358520508 6.672944068908691 -4.7793121337890625\nO 0.4382983446121216 7.725281715393066 -4.912882328033447\nsymmetry c1\nno_reorient\nno_com""; mol = psi4.geometry(molstr). print(""Computing "" + theory + "" gradient...""); grad, wfn = psi4.gradient('{}/{}'.format(theory,basisname), return_wfn=True). orbital_basis = wfn.basisset(); aux_basis = psi4.core.BasisSet.build(mol, ""DF_BASIS_SCF"", """", ""JKFIT"", auxbasis); print(aux_basis.nbf()). zero_basis = psi4.core.BasisSet.zero_ao_basis_set(); mints = psi4.core.MintsHelper(orbital_basis). abQ = mints.ao_eri(orbital_basis, orbital_basis, aux_basis, zero_basis) # This line causes the error; ```. Previously I was using psi4=1.3.2+ecbda83 and psi4=1.4a2.dev723+fb499f4. The current version that gives me segmentation fault is psi4=1.5+e9f4d6d. The error is; ```; forrtl: severe (174): SIGSEGV, segmentation fault occurred; Image PC Routine Line Source; libgdma.so 00007F9CA744F17B for__signal_handl Unknown Unknown; libpthread-2.17.s 00007F9CC324B630 Unknown Unknown Unknown; libgdma.so 00007F9CA744ED5C for__signal_handl Unknown Unknown; libpthread-2.17.s 00007F9CC324B630 Unknown Unknown Unknown; ```. Could you let me know what may cause this error and what changes may be ascribed to it?. Best regards,; Chenru",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2542
https://github.com/psi4/psi4/issues/2542:1413,Availability,fault,fault,1413,"Dear Psi4 developers,. I recently created a new conda env and found that a code that previously has been working gave me segmentation fault. I added break points in my code and found the errors came from ERI. The simplified version of the codes (I only extracted the minimal part to reproduce the error) is below:; ```; import sys; import numpy as np; import psi4. basisname = ""def2-tzvp""; auxbasis = ""def2-tzvp""; theory = ""scf"". psi4.set_memory('4 GB'); psi4.set_num_threads(1); psi4.core.set_output_file('output.dat', False). ang2bohr = 1.88973; bohr2ang = 1/ang2bohr. molstr = ""H -0.5187926292419434 7.475999355316162 -5.560068130493164\nH 0.8894014358520508 6.672944068908691 -4.7793121337890625\nO 0.4382983446121216 7.725281715393066 -4.912882328033447\nsymmetry c1\nno_reorient\nno_com""; mol = psi4.geometry(molstr). print(""Computing "" + theory + "" gradient...""); grad, wfn = psi4.gradient('{}/{}'.format(theory,basisname), return_wfn=True). orbital_basis = wfn.basisset(); aux_basis = psi4.core.BasisSet.build(mol, ""DF_BASIS_SCF"", """", ""JKFIT"", auxbasis); print(aux_basis.nbf()). zero_basis = psi4.core.BasisSet.zero_ao_basis_set(); mints = psi4.core.MintsHelper(orbital_basis). abQ = mints.ao_eri(orbital_basis, orbital_basis, aux_basis, zero_basis) # This line causes the error; ```. Previously I was using psi4=1.3.2+ecbda83 and psi4=1.4a2.dev723+fb499f4. The current version that gives me segmentation fault is psi4=1.5+e9f4d6d. The error is; ```; forrtl: severe (174): SIGSEGV, segmentation fault occurred; Image PC Routine Line Source; libgdma.so 00007F9CA744F17B for__signal_handl Unknown Unknown; libpthread-2.17.s 00007F9CC324B630 Unknown Unknown Unknown; libgdma.so 00007F9CA744ED5C for__signal_handl Unknown Unknown; libpthread-2.17.s 00007F9CC324B630 Unknown Unknown Unknown; ```. Could you let me know what may cause this error and what changes may be ascribed to it?. Best regards,; Chenru",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2542
https://github.com/psi4/psi4/issues/2542:1444,Availability,error,error,1444,"Dear Psi4 developers,. I recently created a new conda env and found that a code that previously has been working gave me segmentation fault. I added break points in my code and found the errors came from ERI. The simplified version of the codes (I only extracted the minimal part to reproduce the error) is below:; ```; import sys; import numpy as np; import psi4. basisname = ""def2-tzvp""; auxbasis = ""def2-tzvp""; theory = ""scf"". psi4.set_memory('4 GB'); psi4.set_num_threads(1); psi4.core.set_output_file('output.dat', False). ang2bohr = 1.88973; bohr2ang = 1/ang2bohr. molstr = ""H -0.5187926292419434 7.475999355316162 -5.560068130493164\nH 0.8894014358520508 6.672944068908691 -4.7793121337890625\nO 0.4382983446121216 7.725281715393066 -4.912882328033447\nsymmetry c1\nno_reorient\nno_com""; mol = psi4.geometry(molstr). print(""Computing "" + theory + "" gradient...""); grad, wfn = psi4.gradient('{}/{}'.format(theory,basisname), return_wfn=True). orbital_basis = wfn.basisset(); aux_basis = psi4.core.BasisSet.build(mol, ""DF_BASIS_SCF"", """", ""JKFIT"", auxbasis); print(aux_basis.nbf()). zero_basis = psi4.core.BasisSet.zero_ao_basis_set(); mints = psi4.core.MintsHelper(orbital_basis). abQ = mints.ao_eri(orbital_basis, orbital_basis, aux_basis, zero_basis) # This line causes the error; ```. Previously I was using psi4=1.3.2+ecbda83 and psi4=1.4a2.dev723+fb499f4. The current version that gives me segmentation fault is psi4=1.5+e9f4d6d. The error is; ```; forrtl: severe (174): SIGSEGV, segmentation fault occurred; Image PC Routine Line Source; libgdma.so 00007F9CA744F17B for__signal_handl Unknown Unknown; libpthread-2.17.s 00007F9CC324B630 Unknown Unknown Unknown; libgdma.so 00007F9CA744ED5C for__signal_handl Unknown Unknown; libpthread-2.17.s 00007F9CC324B630 Unknown Unknown Unknown; ```. Could you let me know what may cause this error and what changes may be ascribed to it?. Best regards,; Chenru",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2542
https://github.com/psi4/psi4/issues/2542:1503,Availability,fault,fault,1503,"Dear Psi4 developers,. I recently created a new conda env and found that a code that previously has been working gave me segmentation fault. I added break points in my code and found the errors came from ERI. The simplified version of the codes (I only extracted the minimal part to reproduce the error) is below:; ```; import sys; import numpy as np; import psi4. basisname = ""def2-tzvp""; auxbasis = ""def2-tzvp""; theory = ""scf"". psi4.set_memory('4 GB'); psi4.set_num_threads(1); psi4.core.set_output_file('output.dat', False). ang2bohr = 1.88973; bohr2ang = 1/ang2bohr. molstr = ""H -0.5187926292419434 7.475999355316162 -5.560068130493164\nH 0.8894014358520508 6.672944068908691 -4.7793121337890625\nO 0.4382983446121216 7.725281715393066 -4.912882328033447\nsymmetry c1\nno_reorient\nno_com""; mol = psi4.geometry(molstr). print(""Computing "" + theory + "" gradient...""); grad, wfn = psi4.gradient('{}/{}'.format(theory,basisname), return_wfn=True). orbital_basis = wfn.basisset(); aux_basis = psi4.core.BasisSet.build(mol, ""DF_BASIS_SCF"", """", ""JKFIT"", auxbasis); print(aux_basis.nbf()). zero_basis = psi4.core.BasisSet.zero_ao_basis_set(); mints = psi4.core.MintsHelper(orbital_basis). abQ = mints.ao_eri(orbital_basis, orbital_basis, aux_basis, zero_basis) # This line causes the error; ```. Previously I was using psi4=1.3.2+ecbda83 and psi4=1.4a2.dev723+fb499f4. The current version that gives me segmentation fault is psi4=1.5+e9f4d6d. The error is; ```; forrtl: severe (174): SIGSEGV, segmentation fault occurred; Image PC Routine Line Source; libgdma.so 00007F9CA744F17B for__signal_handl Unknown Unknown; libpthread-2.17.s 00007F9CC324B630 Unknown Unknown Unknown; libgdma.so 00007F9CA744ED5C for__signal_handl Unknown Unknown; libpthread-2.17.s 00007F9CC324B630 Unknown Unknown Unknown; ```. Could you let me know what may cause this error and what changes may be ascribed to it?. Best regards,; Chenru",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2542
https://github.com/psi4/psi4/issues/2542:1842,Availability,error,error,1842,"Dear Psi4 developers,. I recently created a new conda env and found that a code that previously has been working gave me segmentation fault. I added break points in my code and found the errors came from ERI. The simplified version of the codes (I only extracted the minimal part to reproduce the error) is below:; ```; import sys; import numpy as np; import psi4. basisname = ""def2-tzvp""; auxbasis = ""def2-tzvp""; theory = ""scf"". psi4.set_memory('4 GB'); psi4.set_num_threads(1); psi4.core.set_output_file('output.dat', False). ang2bohr = 1.88973; bohr2ang = 1/ang2bohr. molstr = ""H -0.5187926292419434 7.475999355316162 -5.560068130493164\nH 0.8894014358520508 6.672944068908691 -4.7793121337890625\nO 0.4382983446121216 7.725281715393066 -4.912882328033447\nsymmetry c1\nno_reorient\nno_com""; mol = psi4.geometry(molstr). print(""Computing "" + theory + "" gradient...""); grad, wfn = psi4.gradient('{}/{}'.format(theory,basisname), return_wfn=True). orbital_basis = wfn.basisset(); aux_basis = psi4.core.BasisSet.build(mol, ""DF_BASIS_SCF"", """", ""JKFIT"", auxbasis); print(aux_basis.nbf()). zero_basis = psi4.core.BasisSet.zero_ao_basis_set(); mints = psi4.core.MintsHelper(orbital_basis). abQ = mints.ao_eri(orbital_basis, orbital_basis, aux_basis, zero_basis) # This line causes the error; ```. Previously I was using psi4=1.3.2+ecbda83 and psi4=1.4a2.dev723+fb499f4. The current version that gives me segmentation fault is psi4=1.5+e9f4d6d. The error is; ```; forrtl: severe (174): SIGSEGV, segmentation fault occurred; Image PC Routine Line Source; libgdma.so 00007F9CA744F17B for__signal_handl Unknown Unknown; libpthread-2.17.s 00007F9CC324B630 Unknown Unknown Unknown; libgdma.so 00007F9CA744ED5C for__signal_handl Unknown Unknown; libpthread-2.17.s 00007F9CC324B630 Unknown Unknown Unknown; ```. Could you let me know what may cause this error and what changes may be ascribed to it?. Best regards,; Chenru",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2542
https://github.com/psi4/psi4/issues/2542:1528,Integrability,Rout,Routine,1528,"Dear Psi4 developers,. I recently created a new conda env and found that a code that previously has been working gave me segmentation fault. I added break points in my code and found the errors came from ERI. The simplified version of the codes (I only extracted the minimal part to reproduce the error) is below:; ```; import sys; import numpy as np; import psi4. basisname = ""def2-tzvp""; auxbasis = ""def2-tzvp""; theory = ""scf"". psi4.set_memory('4 GB'); psi4.set_num_threads(1); psi4.core.set_output_file('output.dat', False). ang2bohr = 1.88973; bohr2ang = 1/ang2bohr. molstr = ""H -0.5187926292419434 7.475999355316162 -5.560068130493164\nH 0.8894014358520508 6.672944068908691 -4.7793121337890625\nO 0.4382983446121216 7.725281715393066 -4.912882328033447\nsymmetry c1\nno_reorient\nno_com""; mol = psi4.geometry(molstr). print(""Computing "" + theory + "" gradient...""); grad, wfn = psi4.gradient('{}/{}'.format(theory,basisname), return_wfn=True). orbital_basis = wfn.basisset(); aux_basis = psi4.core.BasisSet.build(mol, ""DF_BASIS_SCF"", """", ""JKFIT"", auxbasis); print(aux_basis.nbf()). zero_basis = psi4.core.BasisSet.zero_ao_basis_set(); mints = psi4.core.MintsHelper(orbital_basis). abQ = mints.ao_eri(orbital_basis, orbital_basis, aux_basis, zero_basis) # This line causes the error; ```. Previously I was using psi4=1.3.2+ecbda83 and psi4=1.4a2.dev723+fb499f4. The current version that gives me segmentation fault is psi4=1.5+e9f4d6d. The error is; ```; forrtl: severe (174): SIGSEGV, segmentation fault occurred; Image PC Routine Line Source; libgdma.so 00007F9CA744F17B for__signal_handl Unknown Unknown; libpthread-2.17.s 00007F9CC324B630 Unknown Unknown Unknown; libgdma.so 00007F9CA744ED5C for__signal_handl Unknown Unknown; libpthread-2.17.s 00007F9CC324B630 Unknown Unknown Unknown; ```. Could you let me know what may cause this error and what changes may be ascribed to it?. Best regards,; Chenru",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2542
https://github.com/psi4/psi4/issues/2542:213,Usability,simpl,simplified,213,"Dear Psi4 developers,. I recently created a new conda env and found that a code that previously has been working gave me segmentation fault. I added break points in my code and found the errors came from ERI. The simplified version of the codes (I only extracted the minimal part to reproduce the error) is below:; ```; import sys; import numpy as np; import psi4. basisname = ""def2-tzvp""; auxbasis = ""def2-tzvp""; theory = ""scf"". psi4.set_memory('4 GB'); psi4.set_num_threads(1); psi4.core.set_output_file('output.dat', False). ang2bohr = 1.88973; bohr2ang = 1/ang2bohr. molstr = ""H -0.5187926292419434 7.475999355316162 -5.560068130493164\nH 0.8894014358520508 6.672944068908691 -4.7793121337890625\nO 0.4382983446121216 7.725281715393066 -4.912882328033447\nsymmetry c1\nno_reorient\nno_com""; mol = psi4.geometry(molstr). print(""Computing "" + theory + "" gradient...""); grad, wfn = psi4.gradient('{}/{}'.format(theory,basisname), return_wfn=True). orbital_basis = wfn.basisset(); aux_basis = psi4.core.BasisSet.build(mol, ""DF_BASIS_SCF"", """", ""JKFIT"", auxbasis); print(aux_basis.nbf()). zero_basis = psi4.core.BasisSet.zero_ao_basis_set(); mints = psi4.core.MintsHelper(orbital_basis). abQ = mints.ao_eri(orbital_basis, orbital_basis, aux_basis, zero_basis) # This line causes the error; ```. Previously I was using psi4=1.3.2+ecbda83 and psi4=1.4a2.dev723+fb499f4. The current version that gives me segmentation fault is psi4=1.5+e9f4d6d. The error is; ```; forrtl: severe (174): SIGSEGV, segmentation fault occurred; Image PC Routine Line Source; libgdma.so 00007F9CA744F17B for__signal_handl Unknown Unknown; libpthread-2.17.s 00007F9CC324B630 Unknown Unknown Unknown; libgdma.so 00007F9CA744ED5C for__signal_handl Unknown Unknown; libpthread-2.17.s 00007F9CC324B630 Unknown Unknown Unknown; ```. Could you let me know what may cause this error and what changes may be ascribed to it?. Best regards,; Chenru",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2542
https://github.com/psi4/psi4/pull/2543:498,Modifiability,extend,extended,498,"## Description; Follow-up PR to #2359. This PR implements the direct-density fitted J algorithm (https://pubs.rsc.org/en/content/articlelanding/2002/cp/b204199p) to be used with LinK to allow for performance gains. A new code infrastructure is also introduced that allows for split J/K build algorithms, through the Composite JK class (not callable by user, but a reroute by the developer). Example of how to call my new code:; ```; scf_type direct_df_linK; ```. ### NOTES:; - Composite JK will be extended with other Split JK algorithms in the future (CFMM @andyj10224, and Chain-of-Spheres K @zachglick). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Introduction of Composite JK class; - [x] Implementation of Direct-DF-J algorithm; - [x] Refactor of LinK algorithm into Composite JK framework. ## Questions; - [x]. ## Checklist; - [x] Tests added for any new features; - [x] Docs added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge. ## Table of Contents (Suggested Review Order); ### 1.) LinK Refactor; - [Removal of LinK from DirectJK](https://github.com/psi4/psi4/pull/2543#discussion_r848777136); - [LinK Class Header Information](https://github.com/psi4/psi4/pull/2543#discussion_r848776564); - [New Home of LinK Algorithm](https://github.com/psi4/psi4/pull/2543#discussion_r848777810). ### 2.) DirectDFJ Algorithm; - [DirectDFJ Header File](https://github.com/psi4/psi4/pull/2543#discussion_r848778214); - [Home of DirectDFJ Algorithm](https://github.com/psi4/psi4/pull/2543#discussion_r848778585). ### 3.) CompositeJK Structure; - [CompositeJK Header Information](https://github.com/psi4/psi4/pull/2543#discussion_r848779185); - [SplitJK Base Class Header Information](https://github.com/psi4/psi4/pull/2543#discussion_r848779584); - [Calling my code from jk",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2543
https://github.com/psi4/psi4/pull/2543:803,Modifiability,Refactor,Refactor,803,"## Description; Follow-up PR to #2359. This PR implements the direct-density fitted J algorithm (https://pubs.rsc.org/en/content/articlelanding/2002/cp/b204199p) to be used with LinK to allow for performance gains. A new code infrastructure is also introduced that allows for split J/K build algorithms, through the Composite JK class (not callable by user, but a reroute by the developer). Example of how to call my new code:; ```; scf_type direct_df_linK; ```. ### NOTES:; - Composite JK will be extended with other Split JK algorithms in the future (CFMM @andyj10224, and Chain-of-Spheres K @zachglick). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Introduction of Composite JK class; - [x] Implementation of Direct-DF-J algorithm; - [x] Refactor of LinK algorithm into Composite JK framework. ## Questions; - [x]. ## Checklist; - [x] Tests added for any new features; - [x] Docs added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge. ## Table of Contents (Suggested Review Order); ### 1.) LinK Refactor; - [Removal of LinK from DirectJK](https://github.com/psi4/psi4/pull/2543#discussion_r848777136); - [LinK Class Header Information](https://github.com/psi4/psi4/pull/2543#discussion_r848776564); - [New Home of LinK Algorithm](https://github.com/psi4/psi4/pull/2543#discussion_r848777810). ### 2.) DirectDFJ Algorithm; - [DirectDFJ Header File](https://github.com/psi4/psi4/pull/2543#discussion_r848778214); - [Home of DirectDFJ Algorithm](https://github.com/psi4/psi4/pull/2543#discussion_r848778585). ### 3.) CompositeJK Structure; - [CompositeJK Header Information](https://github.com/psi4/psi4/pull/2543#discussion_r848779185); - [SplitJK Base Class Header Information](https://github.com/psi4/psi4/pull/2543#discussion_r848779584); - [Calling my code from jk",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2543
https://github.com/psi4/psi4/pull/2543:1230,Modifiability,Refactor,Refactor,1230,"t-density fitted J algorithm (https://pubs.rsc.org/en/content/articlelanding/2002/cp/b204199p) to be used with LinK to allow for performance gains. A new code infrastructure is also introduced that allows for split J/K build algorithms, through the Composite JK class (not callable by user, but a reroute by the developer). Example of how to call my new code:; ```; scf_type direct_df_linK; ```. ### NOTES:; - Composite JK will be extended with other Split JK algorithms in the future (CFMM @andyj10224, and Chain-of-Spheres K @zachglick). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Introduction of Composite JK class; - [x] Implementation of Direct-DF-J algorithm; - [x] Refactor of LinK algorithm into Composite JK framework. ## Questions; - [x]. ## Checklist; - [x] Tests added for any new features; - [x] Docs added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge. ## Table of Contents (Suggested Review Order); ### 1.) LinK Refactor; - [Removal of LinK from DirectJK](https://github.com/psi4/psi4/pull/2543#discussion_r848777136); - [LinK Class Header Information](https://github.com/psi4/psi4/pull/2543#discussion_r848776564); - [New Home of LinK Algorithm](https://github.com/psi4/psi4/pull/2543#discussion_r848777810). ### 2.) DirectDFJ Algorithm; - [DirectDFJ Header File](https://github.com/psi4/psi4/pull/2543#discussion_r848778214); - [Home of DirectDFJ Algorithm](https://github.com/psi4/psi4/pull/2543#discussion_r848778585). ### 3.) CompositeJK Structure; - [CompositeJK Header Information](https://github.com/psi4/psi4/pull/2543#discussion_r848779185); - [SplitJK Base Class Header Information](https://github.com/psi4/psi4/pull/2543#discussion_r848779584); - [Calling my code from jk.cc](https://github.com/psi4/psi4/pull/2543#discussion_r848780442)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2543
https://github.com/psi4/psi4/pull/2543:196,Performance,perform,performance,196,"## Description; Follow-up PR to #2359. This PR implements the direct-density fitted J algorithm (https://pubs.rsc.org/en/content/articlelanding/2002/cp/b204199p) to be used with LinK to allow for performance gains. A new code infrastructure is also introduced that allows for split J/K build algorithms, through the Composite JK class (not callable by user, but a reroute by the developer). Example of how to call my new code:; ```; scf_type direct_df_linK; ```. ### NOTES:; - Composite JK will be extended with other Split JK algorithms in the future (CFMM @andyj10224, and Chain-of-Spheres K @zachglick). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Introduction of Composite JK class; - [x] Implementation of Direct-DF-J algorithm; - [x] Refactor of LinK algorithm into Composite JK framework. ## Questions; - [x]. ## Checklist; - [x] Tests added for any new features; - [x] Docs added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge. ## Table of Contents (Suggested Review Order); ### 1.) LinK Refactor; - [Removal of LinK from DirectJK](https://github.com/psi4/psi4/pull/2543#discussion_r848777136); - [LinK Class Header Information](https://github.com/psi4/psi4/pull/2543#discussion_r848776564); - [New Home of LinK Algorithm](https://github.com/psi4/psi4/pull/2543#discussion_r848777810). ### 2.) DirectDFJ Algorithm; - [DirectDFJ Header File](https://github.com/psi4/psi4/pull/2543#discussion_r848778214); - [Home of DirectDFJ Algorithm](https://github.com/psi4/psi4/pull/2543#discussion_r848778585). ### 3.) CompositeJK Structure; - [CompositeJK Header Information](https://github.com/psi4/psi4/pull/2543#discussion_r848779185); - [SplitJK Base Class Header Information](https://github.com/psi4/psi4/pull/2543#discussion_r848779584); - [Calling my code from jk",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2543
https://github.com/psi4/psi4/pull/2543:900,Testability,Test,Tests,900,"## Description; Follow-up PR to #2359. This PR implements the direct-density fitted J algorithm (https://pubs.rsc.org/en/content/articlelanding/2002/cp/b204199p) to be used with LinK to allow for performance gains. A new code infrastructure is also introduced that allows for split J/K build algorithms, through the Composite JK class (not callable by user, but a reroute by the developer). Example of how to call my new code:; ```; scf_type direct_df_linK; ```. ### NOTES:; - Composite JK will be extended with other Split JK algorithms in the future (CFMM @andyj10224, and Chain-of-Spheres K @zachglick). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Introduction of Composite JK class; - [x] Implementation of Direct-DF-J algorithm; - [x] Refactor of LinK algorithm into Composite JK framework. ## Questions; - [x]. ## Checklist; - [x] Tests added for any new features; - [x] Docs added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge. ## Table of Contents (Suggested Review Order); ### 1.) LinK Refactor; - [Removal of LinK from DirectJK](https://github.com/psi4/psi4/pull/2543#discussion_r848777136); - [LinK Class Header Information](https://github.com/psi4/psi4/pull/2543#discussion_r848776564); - [New Home of LinK Algorithm](https://github.com/psi4/psi4/pull/2543#discussion_r848777810). ### 2.) DirectDFJ Algorithm; - [DirectDFJ Header File](https://github.com/psi4/psi4/pull/2543#discussion_r848778214); - [Home of DirectDFJ Algorithm](https://github.com/psi4/psi4/pull/2543#discussion_r848778585). ### 3.) CompositeJK Structure; - [CompositeJK Header Information](https://github.com/psi4/psi4/pull/2543#discussion_r848779185); - [SplitJK Base Class Header Information](https://github.com/psi4/psi4/pull/2543#discussion_r848779584); - [Calling my code from jk",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2543
https://github.com/psi4/psi4/pull/2543:1013,Testability,test,tests,1013,"## Description; Follow-up PR to #2359. This PR implements the direct-density fitted J algorithm (https://pubs.rsc.org/en/content/articlelanding/2002/cp/b204199p) to be used with LinK to allow for performance gains. A new code infrastructure is also introduced that allows for split J/K build algorithms, through the Composite JK class (not callable by user, but a reroute by the developer). Example of how to call my new code:; ```; scf_type direct_df_linK; ```. ### NOTES:; - Composite JK will be extended with other Split JK algorithms in the future (CFMM @andyj10224, and Chain-of-Spheres K @zachglick). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Introduction of Composite JK class; - [x] Implementation of Direct-DF-J algorithm; - [x] Refactor of LinK algorithm into Composite JK framework. ## Questions; - [x]. ## Checklist; - [x] Tests added for any new features; - [x] Docs added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge. ## Table of Contents (Suggested Review Order); ### 1.) LinK Refactor; - [Removal of LinK from DirectJK](https://github.com/psi4/psi4/pull/2543#discussion_r848777136); - [LinK Class Header Information](https://github.com/psi4/psi4/pull/2543#discussion_r848776564); - [New Home of LinK Algorithm](https://github.com/psi4/psi4/pull/2543#discussion_r848777810). ### 2.) DirectDFJ Algorithm; - [DirectDFJ Header File](https://github.com/psi4/psi4/pull/2543#discussion_r848778214); - [Home of DirectDFJ Algorithm](https://github.com/psi4/psi4/pull/2543#discussion_r848778585). ### 3.) CompositeJK Structure; - [CompositeJK Header Information](https://github.com/psi4/psi4/pull/2543#discussion_r848779185); - [SplitJK Base Class Header Information](https://github.com/psi4/psi4/pull/2543#discussion_r848779584); - [Calling my code from jk",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2543
https://github.com/psi4/psi4/pull/2543:1104,Testability,test,tests,1104,"t-density fitted J algorithm (https://pubs.rsc.org/en/content/articlelanding/2002/cp/b204199p) to be used with LinK to allow for performance gains. A new code infrastructure is also introduced that allows for split J/K build algorithms, through the Composite JK class (not callable by user, but a reroute by the developer). Example of how to call my new code:; ```; scf_type direct_df_linK; ```. ### NOTES:; - Composite JK will be extended with other Split JK algorithms in the future (CFMM @andyj10224, and Chain-of-Spheres K @zachglick). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Introduction of Composite JK class; - [x] Implementation of Direct-DF-J algorithm; - [x] Refactor of LinK algorithm into Composite JK framework. ## Questions; - [x]. ## Checklist; - [x] Tests added for any new features; - [x] Docs added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge. ## Table of Contents (Suggested Review Order); ### 1.) LinK Refactor; - [Removal of LinK from DirectJK](https://github.com/psi4/psi4/pull/2543#discussion_r848777136); - [LinK Class Header Information](https://github.com/psi4/psi4/pull/2543#discussion_r848776564); - [New Home of LinK Algorithm](https://github.com/psi4/psi4/pull/2543#discussion_r848777810). ### 2.) DirectDFJ Algorithm; - [DirectDFJ Header File](https://github.com/psi4/psi4/pull/2543#discussion_r848778214); - [Home of DirectDFJ Algorithm](https://github.com/psi4/psi4/pull/2543#discussion_r848778585). ### 3.) CompositeJK Structure; - [CompositeJK Header Information](https://github.com/psi4/psi4/pull/2543#discussion_r848779185); - [SplitJK Base Class Header Information](https://github.com/psi4/psi4/pull/2543#discussion_r848779584); - [Calling my code from jk.cc](https://github.com/psi4/psi4/pull/2543#discussion_r848780442)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2543
https://github.com/psi4/psi4/pull/2544:141,Integrability,wrap,wrappers,141,"## Description; This is No. 8 of the DDD series, #1351. ## Todos; - [x] qcvars `FINDIF NUMBER` and `NBODY NUMBER` are handy to confirm those wrappers are planning correctly. This PR forward-ports more tests of those vars; - [x] two more detailed nbody tests are forward-ported. one is a copy of a ctest only run through qcschema. the other checks the total vs ie return that was wrong in nbody for a while and solved by #2221.; - [x] add ""nbody"" label/mark to ctests and pytests systematically. make all nbody tests runable through pytest. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2544
https://github.com/psi4/psi4/pull/2544:201,Testability,test,tests,201,"## Description; This is No. 8 of the DDD series, #1351. ## Todos; - [x] qcvars `FINDIF NUMBER` and `NBODY NUMBER` are handy to confirm those wrappers are planning correctly. This PR forward-ports more tests of those vars; - [x] two more detailed nbody tests are forward-ported. one is a copy of a ctest only run through qcschema. the other checks the total vs ie return that was wrong in nbody for a while and solved by #2221.; - [x] add ""nbody"" label/mark to ctests and pytests systematically. make all nbody tests runable through pytest. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2544
https://github.com/psi4/psi4/pull/2544:252,Testability,test,tests,252,"## Description; This is No. 8 of the DDD series, #1351. ## Todos; - [x] qcvars `FINDIF NUMBER` and `NBODY NUMBER` are handy to confirm those wrappers are planning correctly. This PR forward-ports more tests of those vars; - [x] two more detailed nbody tests are forward-ported. one is a copy of a ctest only run through qcschema. the other checks the total vs ie return that was wrong in nbody for a while and solved by #2221.; - [x] add ""nbody"" label/mark to ctests and pytests systematically. make all nbody tests runable through pytest. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2544
https://github.com/psi4/psi4/pull/2544:510,Testability,test,tests,510,"## Description; This is No. 8 of the DDD series, #1351. ## Todos; - [x] qcvars `FINDIF NUMBER` and `NBODY NUMBER` are handy to confirm those wrappers are planning correctly. This PR forward-ports more tests of those vars; - [x] two more detailed nbody tests are forward-ported. one is a copy of a ctest only run through qcschema. the other checks the total vs ie return that was wrong in nbody for a while and solved by #2221.; - [x] add ""nbody"" label/mark to ctests and pytests systematically. make all nbody tests runable through pytest. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2544
https://github.com/psi4/psi4/pull/2544:560,Testability,Test,Tests,560,"## Description; This is No. 8 of the DDD series, #1351. ## Todos; - [x] qcvars `FINDIF NUMBER` and `NBODY NUMBER` are handy to confirm those wrappers are planning correctly. This PR forward-ports more tests of those vars; - [x] two more detailed nbody tests are forward-ported. one is a copy of a ctest only run through qcschema. the other checks the total vs ie return that was wrong in nbody for a while and solved by #2221.; - [x] add ""nbody"" label/mark to ctests and pytests systematically. make all nbody tests runable through pytest. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2544
https://github.com/psi4/psi4/pull/2544:634,Testability,test,tests,634,"## Description; This is No. 8 of the DDD series, #1351. ## Todos; - [x] qcvars `FINDIF NUMBER` and `NBODY NUMBER` are handy to confirm those wrappers are planning correctly. This PR forward-ports more tests of those vars; - [x] two more detailed nbody tests are forward-ported. one is a copy of a ctest only run through qcschema. the other checks the total vs ie return that was wrong in nbody for a while and solved by #2221.; - [x] add ""nbody"" label/mark to ctests and pytests systematically. make all nbody tests runable through pytest. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2544
https://github.com/psi4/psi4/pull/2544:725,Testability,test,tests,725,"## Description; This is No. 8 of the DDD series, #1351. ## Todos; - [x] qcvars `FINDIF NUMBER` and `NBODY NUMBER` are handy to confirm those wrappers are planning correctly. This PR forward-ports more tests of those vars; - [x] two more detailed nbody tests are forward-ported. one is a copy of a ctest only run through qcschema. the other checks the total vs ie return that was wrong in nbody for a while and solved by #2221.; - [x] add ""nbody"" label/mark to ctests and pytests systematically. make all nbody tests runable through pytest. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2544
https://github.com/psi4/psi4/pull/2545:174,Availability,down,downstream,174,"## Description; For large systems it's often sensible to freeze HF orbitals, rather than dumping a very large FCIDUMP file, only to be slowly read in again and frozen in the downstream program. However, I noticed that the `fcidump` functionality isn't handling the frozen keywords in the expected way (the MO slice goes from `frzcpi` to `active_mopi`, when it should obviously go to `frzcpi+active_mopi`). I've also added a test in `tests/fcidump/input.dat` to check this. The added test would fail on the current master. Additionally, for some reason the patch in #2277 stopped working, and in the current master, the 1/0 e integrals are again 1 space wider than the 2e integrals. This patch also fixes it. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2545
https://github.com/psi4/psi4/pull/2545:556,Deployability,patch,patch,556,"## Description; For large systems it's often sensible to freeze HF orbitals, rather than dumping a very large FCIDUMP file, only to be slowly read in again and frozen in the downstream program. However, I noticed that the `fcidump` functionality isn't handling the frozen keywords in the expected way (the MO slice goes from `frzcpi` to `active_mopi`, when it should obviously go to `frzcpi+active_mopi`). I've also added a test in `tests/fcidump/input.dat` to check this. The added test would fail on the current master. Additionally, for some reason the patch in #2277 stopped working, and in the current master, the 1/0 e integrals are again 1 space wider than the 2e integrals. This patch also fixes it. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2545
https://github.com/psi4/psi4/pull/2545:687,Deployability,patch,patch,687,"## Description; For large systems it's often sensible to freeze HF orbitals, rather than dumping a very large FCIDUMP file, only to be slowly read in again and frozen in the downstream program. However, I noticed that the `fcidump` functionality isn't handling the frozen keywords in the expected way (the MO slice goes from `frzcpi` to `active_mopi`, when it should obviously go to `frzcpi+active_mopi`). I've also added a test in `tests/fcidump/input.dat` to check this. The added test would fail on the current master. Additionally, for some reason the patch in #2277 stopped working, and in the current master, the 1/0 e integrals are again 1 space wider than the 2e integrals. This patch also fixes it. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2545
https://github.com/psi4/psi4/pull/2545:424,Testability,test,test,424,"## Description; For large systems it's often sensible to freeze HF orbitals, rather than dumping a very large FCIDUMP file, only to be slowly read in again and frozen in the downstream program. However, I noticed that the `fcidump` functionality isn't handling the frozen keywords in the expected way (the MO slice goes from `frzcpi` to `active_mopi`, when it should obviously go to `frzcpi+active_mopi`). I've also added a test in `tests/fcidump/input.dat` to check this. The added test would fail on the current master. Additionally, for some reason the patch in #2277 stopped working, and in the current master, the 1/0 e integrals are again 1 space wider than the 2e integrals. This patch also fixes it. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2545
https://github.com/psi4/psi4/pull/2545:433,Testability,test,tests,433,"## Description; For large systems it's often sensible to freeze HF orbitals, rather than dumping a very large FCIDUMP file, only to be slowly read in again and frozen in the downstream program. However, I noticed that the `fcidump` functionality isn't handling the frozen keywords in the expected way (the MO slice goes from `frzcpi` to `active_mopi`, when it should obviously go to `frzcpi+active_mopi`). I've also added a test in `tests/fcidump/input.dat` to check this. The added test would fail on the current master. Additionally, for some reason the patch in #2277 stopped working, and in the current master, the 1/0 e integrals are again 1 space wider than the 2e integrals. This patch also fixes it. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2545
https://github.com/psi4/psi4/pull/2545:483,Testability,test,test,483,"## Description; For large systems it's often sensible to freeze HF orbitals, rather than dumping a very large FCIDUMP file, only to be slowly read in again and frozen in the downstream program. However, I noticed that the `fcidump` functionality isn't handling the frozen keywords in the expected way (the MO slice goes from `frzcpi` to `active_mopi`, when it should obviously go to `frzcpi+active_mopi`). I've also added a test in `tests/fcidump/input.dat` to check this. The added test would fail on the current master. Additionally, for some reason the patch in #2277 stopped working, and in the current master, the 1/0 e integrals are again 1 space wider than the 2e integrals. This patch also fixes it. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2545
https://github.com/psi4/psi4/pull/2546:199,Deployability,update,updated,199,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; - [x] Psi doesn't use ambit directly so never has required a version. Now that it's had its python interface updated (kill the boost!), most uses in the presence of Psi4 will need the new version, so let's not let lingering old versions pass.; - [x] The ecosystem GHA seems to have settled in nicely to testing addons, so let's remove that responsibility from the Azure CI lanes.; - leaving dftd3 and gcp since they're fast, easy, and important; - now addons tested with less compiler variety on Linux, but I don't think that's too big a problem. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2546
https://github.com/psi4/psi4/pull/2546:189,Integrability,interface,interface,189,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; - [x] Psi doesn't use ambit directly so never has required a version. Now that it's had its python interface updated (kill the boost!), most uses in the presence of Psi4 will need the new version, so let's not let lingering old versions pass.; - [x] The ecosystem GHA seems to have settled in nicely to testing addons, so let's remove that responsibility from the Azure CI lanes.; - leaving dftd3 and gcp since they're fast, easy, and important; - now addons tested with less compiler variety on Linux, but I don't think that's too big a problem. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2546
https://github.com/psi4/psi4/pull/2546:393,Testability,test,testing,393,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; - [x] Psi doesn't use ambit directly so never has required a version. Now that it's had its python interface updated (kill the boost!), most uses in the presence of Psi4 will need the new version, so let's not let lingering old versions pass.; - [x] The ecosystem GHA seems to have settled in nicely to testing addons, so let's remove that responsibility from the Azure CI lanes.; - leaving dftd3 and gcp since they're fast, easy, and important; - now addons tested with less compiler variety on Linux, but I don't think that's too big a problem. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2546
https://github.com/psi4/psi4/pull/2546:549,Testability,test,tested,549,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; - [x] Psi doesn't use ambit directly so never has required a version. Now that it's had its python interface updated (kill the boost!), most uses in the presence of Psi4 will need the new version, so let's not let lingering old versions pass.; - [x] The ecosystem GHA seems to have settled in nicely to testing addons, so let's remove that responsibility from the Azure CI lanes.; - leaving dftd3 and gcp since they're fast, easy, and important; - now addons tested with less compiler variety on Linux, but I don't think that's too big a problem. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2546
https://github.com/psi4/psi4/pull/2547:179,Availability,avail,available,179,"## Description; This PR is the first in a series of planned PRs designed to remove density screening from the TwoBodyAOInt object and into the JK object. Having density screening available in TwoBodyAOInt runs the risk of applying density screening to algorithms where density screening doesn't make sense. Thus, it would be a good idea to move the logic of density screening to where it is more correctly applied, i.e., the JK object. This PR solves two issues simultaneously:. 1. The primary purpose of this PR is to change the test_erisieve.py tests to work with the planned future density screening refactor. One issue that moving density screening from TwoBodyAOInt to JK currently brings up, is that it causes the tests on density screening within the pytest test_erisieve.py to fail. These failures occur because test_erisieve.py performs its screening tests directly using an ERI object generated by IntegralFactory. With density screening being removed from the TwoBodyAOInt object, this method of density screening testing can no longer be done. The current PR is designed to address this issue for when the density screening refactor happens. The aforementioned issue is addressed by implementing a new variable to the HF wavefunction, computed_shells_per_iter_, which keeps track of the number of shell quartets computed per SCF iteration. The computed_shells_per_iter_ variable is accessible to the user via Python, and thus can be used to conduct screening tests. In this way, density screening tests can be performed without the need for an ERI object. 2. As a bonus from the changes introduced by this PR, the DirectJK algorithm no longer has a need to print computed shell quartet counts to bench.dat. Bench.dat is used exclusively by the DirectJK object to dump the number of shell quartets computed per SCF iteration somewhere. That data is now accessible to the user in a cleaner fashion - it can be accessed through Python, in a manipulatable format. ## Notes; 1. Note that the ch",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2547
https://github.com/psi4/psi4/pull/2547:797,Availability,failure,failures,797,"## Description; This PR is the first in a series of planned PRs designed to remove density screening from the TwoBodyAOInt object and into the JK object. Having density screening available in TwoBodyAOInt runs the risk of applying density screening to algorithms where density screening doesn't make sense. Thus, it would be a good idea to move the logic of density screening to where it is more correctly applied, i.e., the JK object. This PR solves two issues simultaneously:. 1. The primary purpose of this PR is to change the test_erisieve.py tests to work with the planned future density screening refactor. One issue that moving density screening from TwoBodyAOInt to JK currently brings up, is that it causes the tests on density screening within the pytest test_erisieve.py to fail. These failures occur because test_erisieve.py performs its screening tests directly using an ERI object generated by IntegralFactory. With density screening being removed from the TwoBodyAOInt object, this method of density screening testing can no longer be done. The current PR is designed to address this issue for when the density screening refactor happens. The aforementioned issue is addressed by implementing a new variable to the HF wavefunction, computed_shells_per_iter_, which keeps track of the number of shell quartets computed per SCF iteration. The computed_shells_per_iter_ variable is accessible to the user via Python, and thus can be used to conduct screening tests. In this way, density screening tests can be performed without the need for an ERI object. 2. As a bonus from the changes introduced by this PR, the DirectJK algorithm no longer has a need to print computed shell quartet counts to bench.dat. Bench.dat is used exclusively by the DirectJK object to dump the number of shell quartets computed per SCF iteration somewhere. That data is now accessible to the user in a cleaner fashion - it can be accessed through Python, in a manipulatable format. ## Notes; 1. Note that the ch",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2547
https://github.com/psi4/psi4/pull/2547:2301,Deployability,update,update,2301,"r_, which keeps track of the number of shell quartets computed per SCF iteration. The computed_shells_per_iter_ variable is accessible to the user via Python, and thus can be used to conduct screening tests. In this way, density screening tests can be performed without the need for an ERI object. 2. As a bonus from the changes introduced by this PR, the DirectJK algorithm no longer has a need to print computed shell quartet counts to bench.dat. Bench.dat is used exclusively by the DirectJK object to dump the number of shell quartets computed per SCF iteration somewhere. That data is now accessible to the user in a cleaner fashion - it can be accessed through Python, in a manipulatable format. ## Notes; 1. Note that the changes in this PR have not been applied to the LinK portion of the DirectJK code. This is intentional, as Andy is planning on moving LinK out of DirectJK entirely, and editing the LinK code within DirectJK would interfere with that. Thus, the changes in this branch will be applied to LinK in a later update.; ; ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ X ] Addition of computed_shells_ member to JK object, which keeps track of number of shells computed during the JK build process.; - [ X ] Addition of computed_shells_per_iter_ member to HF wavefunction objects, which keep track of number of shells computed during each SCF iteration. This information can be accessed by the user via Python.; - [ X ] Modification of density screening tests in test_erisieve.py using the above class changes to allow the tests to run without construction of an ERI object. ## Questions; - [ ] Currently, only the density screening tests in test_erisieve.py use the new computed_shells_per_iter_ framework to test screening. Other tests in test_erisieve.py perform their tests using a generated ERI object. Should use of computed_shells_per_iter_ comparisons be applied to other tests in test_erisieve.py, as well?. ## Ch",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2547
https://github.com/psi4/psi4/pull/2547:603,Modifiability,refactor,refactor,603,"## Description; This PR is the first in a series of planned PRs designed to remove density screening from the TwoBodyAOInt object and into the JK object. Having density screening available in TwoBodyAOInt runs the risk of applying density screening to algorithms where density screening doesn't make sense. Thus, it would be a good idea to move the logic of density screening to where it is more correctly applied, i.e., the JK object. This PR solves two issues simultaneously:. 1. The primary purpose of this PR is to change the test_erisieve.py tests to work with the planned future density screening refactor. One issue that moving density screening from TwoBodyAOInt to JK currently brings up, is that it causes the tests on density screening within the pytest test_erisieve.py to fail. These failures occur because test_erisieve.py performs its screening tests directly using an ERI object generated by IntegralFactory. With density screening being removed from the TwoBodyAOInt object, this method of density screening testing can no longer be done. The current PR is designed to address this issue for when the density screening refactor happens. The aforementioned issue is addressed by implementing a new variable to the HF wavefunction, computed_shells_per_iter_, which keeps track of the number of shell quartets computed per SCF iteration. The computed_shells_per_iter_ variable is accessible to the user via Python, and thus can be used to conduct screening tests. In this way, density screening tests can be performed without the need for an ERI object. 2. As a bonus from the changes introduced by this PR, the DirectJK algorithm no longer has a need to print computed shell quartet counts to bench.dat. Bench.dat is used exclusively by the DirectJK object to dump the number of shell quartets computed per SCF iteration somewhere. That data is now accessible to the user in a cleaner fashion - it can be accessed through Python, in a manipulatable format. ## Notes; 1. Note that the ch",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2547
https://github.com/psi4/psi4/pull/2547:1136,Modifiability,refactor,refactor,1136,"m the TwoBodyAOInt object and into the JK object. Having density screening available in TwoBodyAOInt runs the risk of applying density screening to algorithms where density screening doesn't make sense. Thus, it would be a good idea to move the logic of density screening to where it is more correctly applied, i.e., the JK object. This PR solves two issues simultaneously:. 1. The primary purpose of this PR is to change the test_erisieve.py tests to work with the planned future density screening refactor. One issue that moving density screening from TwoBodyAOInt to JK currently brings up, is that it causes the tests on density screening within the pytest test_erisieve.py to fail. These failures occur because test_erisieve.py performs its screening tests directly using an ERI object generated by IntegralFactory. With density screening being removed from the TwoBodyAOInt object, this method of density screening testing can no longer be done. The current PR is designed to address this issue for when the density screening refactor happens. The aforementioned issue is addressed by implementing a new variable to the HF wavefunction, computed_shells_per_iter_, which keeps track of the number of shell quartets computed per SCF iteration. The computed_shells_per_iter_ variable is accessible to the user via Python, and thus can be used to conduct screening tests. In this way, density screening tests can be performed without the need for an ERI object. 2. As a bonus from the changes introduced by this PR, the DirectJK algorithm no longer has a need to print computed shell quartet counts to bench.dat. Bench.dat is used exclusively by the DirectJK object to dump the number of shell quartets computed per SCF iteration somewhere. That data is now accessible to the user in a cleaner fashion - it can be accessed through Python, in a manipulatable format. ## Notes; 1. Note that the changes in this PR have not been applied to the LinK portion of the DirectJK code. This is intentional, a",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2547
https://github.com/psi4/psi4/pull/2547:1214,Modifiability,variab,variable,1214,"algorithms where density screening doesn't make sense. Thus, it would be a good idea to move the logic of density screening to where it is more correctly applied, i.e., the JK object. This PR solves two issues simultaneously:. 1. The primary purpose of this PR is to change the test_erisieve.py tests to work with the planned future density screening refactor. One issue that moving density screening from TwoBodyAOInt to JK currently brings up, is that it causes the tests on density screening within the pytest test_erisieve.py to fail. These failures occur because test_erisieve.py performs its screening tests directly using an ERI object generated by IntegralFactory. With density screening being removed from the TwoBodyAOInt object, this method of density screening testing can no longer be done. The current PR is designed to address this issue for when the density screening refactor happens. The aforementioned issue is addressed by implementing a new variable to the HF wavefunction, computed_shells_per_iter_, which keeps track of the number of shell quartets computed per SCF iteration. The computed_shells_per_iter_ variable is accessible to the user via Python, and thus can be used to conduct screening tests. In this way, density screening tests can be performed without the need for an ERI object. 2. As a bonus from the changes introduced by this PR, the DirectJK algorithm no longer has a need to print computed shell quartet counts to bench.dat. Bench.dat is used exclusively by the DirectJK object to dump the number of shell quartets computed per SCF iteration somewhere. That data is now accessible to the user in a cleaner fashion - it can be accessed through Python, in a manipulatable format. ## Notes; 1. Note that the changes in this PR have not been applied to the LinK portion of the DirectJK code. This is intentional, as Andy is planning on moving LinK out of DirectJK entirely, and editing the LinK code within DirectJK would interfere with that. Thus, the changes i",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2547
https://github.com/psi4/psi4/pull/2547:1382,Modifiability,variab,variable,1382," i.e., the JK object. This PR solves two issues simultaneously:. 1. The primary purpose of this PR is to change the test_erisieve.py tests to work with the planned future density screening refactor. One issue that moving density screening from TwoBodyAOInt to JK currently brings up, is that it causes the tests on density screening within the pytest test_erisieve.py to fail. These failures occur because test_erisieve.py performs its screening tests directly using an ERI object generated by IntegralFactory. With density screening being removed from the TwoBodyAOInt object, this method of density screening testing can no longer be done. The current PR is designed to address this issue for when the density screening refactor happens. The aforementioned issue is addressed by implementing a new variable to the HF wavefunction, computed_shells_per_iter_, which keeps track of the number of shell quartets computed per SCF iteration. The computed_shells_per_iter_ variable is accessible to the user via Python, and thus can be used to conduct screening tests. In this way, density screening tests can be performed without the need for an ERI object. 2. As a bonus from the changes introduced by this PR, the DirectJK algorithm no longer has a need to print computed shell quartet counts to bench.dat. Bench.dat is used exclusively by the DirectJK object to dump the number of shell quartets computed per SCF iteration somewhere. That data is now accessible to the user in a cleaner fashion - it can be accessed through Python, in a manipulatable format. ## Notes; 1. Note that the changes in this PR have not been applied to the LinK portion of the DirectJK code. This is intentional, as Andy is planning on moving LinK out of DirectJK entirely, and editing the LinK code within DirectJK would interfere with that. Thus, the changes in this branch will be applied to LinK in a later update.; ; ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; -",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2547
https://github.com/psi4/psi4/pull/2547:837,Performance,perform,performs,837,"## Description; This PR is the first in a series of planned PRs designed to remove density screening from the TwoBodyAOInt object and into the JK object. Having density screening available in TwoBodyAOInt runs the risk of applying density screening to algorithms where density screening doesn't make sense. Thus, it would be a good idea to move the logic of density screening to where it is more correctly applied, i.e., the JK object. This PR solves two issues simultaneously:. 1. The primary purpose of this PR is to change the test_erisieve.py tests to work with the planned future density screening refactor. One issue that moving density screening from TwoBodyAOInt to JK currently brings up, is that it causes the tests on density screening within the pytest test_erisieve.py to fail. These failures occur because test_erisieve.py performs its screening tests directly using an ERI object generated by IntegralFactory. With density screening being removed from the TwoBodyAOInt object, this method of density screening testing can no longer be done. The current PR is designed to address this issue for when the density screening refactor happens. The aforementioned issue is addressed by implementing a new variable to the HF wavefunction, computed_shells_per_iter_, which keeps track of the number of shell quartets computed per SCF iteration. The computed_shells_per_iter_ variable is accessible to the user via Python, and thus can be used to conduct screening tests. In this way, density screening tests can be performed without the need for an ERI object. 2. As a bonus from the changes introduced by this PR, the DirectJK algorithm no longer has a need to print computed shell quartet counts to bench.dat. Bench.dat is used exclusively by the DirectJK object to dump the number of shell quartets computed per SCF iteration somewhere. That data is now accessible to the user in a cleaner fashion - it can be accessed through Python, in a manipulatable format. ## Notes; 1. Note that the ch",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2547
https://github.com/psi4/psi4/pull/2547:1522,Performance,perform,performed,1522,"nge the test_erisieve.py tests to work with the planned future density screening refactor. One issue that moving density screening from TwoBodyAOInt to JK currently brings up, is that it causes the tests on density screening within the pytest test_erisieve.py to fail. These failures occur because test_erisieve.py performs its screening tests directly using an ERI object generated by IntegralFactory. With density screening being removed from the TwoBodyAOInt object, this method of density screening testing can no longer be done. The current PR is designed to address this issue for when the density screening refactor happens. The aforementioned issue is addressed by implementing a new variable to the HF wavefunction, computed_shells_per_iter_, which keeps track of the number of shell quartets computed per SCF iteration. The computed_shells_per_iter_ variable is accessible to the user via Python, and thus can be used to conduct screening tests. In this way, density screening tests can be performed without the need for an ERI object. 2. As a bonus from the changes introduced by this PR, the DirectJK algorithm no longer has a need to print computed shell quartet counts to bench.dat. Bench.dat is used exclusively by the DirectJK object to dump the number of shell quartets computed per SCF iteration somewhere. That data is now accessible to the user in a cleaner fashion - it can be accessed through Python, in a manipulatable format. ## Notes; 1. Note that the changes in this PR have not been applied to the LinK portion of the DirectJK code. This is intentional, as Andy is planning on moving LinK out of DirectJK entirely, and editing the LinK code within DirectJK would interfere with that. Thus, the changes in this branch will be applied to LinK in a later update.; ; ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ X ] Addition of computed_shells_ member to JK object, which keeps track of number of shells computed duri",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2547
https://github.com/psi4/psi4/pull/2547:3106,Performance,perform,perform,3106,"bject. 2. As a bonus from the changes introduced by this PR, the DirectJK algorithm no longer has a need to print computed shell quartet counts to bench.dat. Bench.dat is used exclusively by the DirectJK object to dump the number of shell quartets computed per SCF iteration somewhere. That data is now accessible to the user in a cleaner fashion - it can be accessed through Python, in a manipulatable format. ## Notes; 1. Note that the changes in this PR have not been applied to the LinK portion of the DirectJK code. This is intentional, as Andy is planning on moving LinK out of DirectJK entirely, and editing the LinK code within DirectJK would interfere with that. Thus, the changes in this branch will be applied to LinK in a later update.; ; ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ X ] Addition of computed_shells_ member to JK object, which keeps track of number of shells computed during the JK build process.; - [ X ] Addition of computed_shells_per_iter_ member to HF wavefunction objects, which keep track of number of shells computed during each SCF iteration. This information can be accessed by the user via Python.; - [ X ] Modification of density screening tests in test_erisieve.py using the above class changes to allow the tests to run without construction of an ERI object. ## Questions; - [ ] Currently, only the density screening tests in test_erisieve.py use the new computed_shells_per_iter_ framework to test screening. Other tests in test_erisieve.py perform their tests using a generated ERI object. Should use of computed_shells_per_iter_ comparisons be applied to other tests in test_erisieve.py, as well?. ## Checklist; - [ X ] Tests added for any new features; - [ X ] Docs added for any new features; - [ X ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ X ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2547
https://github.com/psi4/psi4/pull/2547:214,Safety,risk,risk,214,"## Description; This PR is the first in a series of planned PRs designed to remove density screening from the TwoBodyAOInt object and into the JK object. Having density screening available in TwoBodyAOInt runs the risk of applying density screening to algorithms where density screening doesn't make sense. Thus, it would be a good idea to move the logic of density screening to where it is more correctly applied, i.e., the JK object. This PR solves two issues simultaneously:. 1. The primary purpose of this PR is to change the test_erisieve.py tests to work with the planned future density screening refactor. One issue that moving density screening from TwoBodyAOInt to JK currently brings up, is that it causes the tests on density screening within the pytest test_erisieve.py to fail. These failures occur because test_erisieve.py performs its screening tests directly using an ERI object generated by IntegralFactory. With density screening being removed from the TwoBodyAOInt object, this method of density screening testing can no longer be done. The current PR is designed to address this issue for when the density screening refactor happens. The aforementioned issue is addressed by implementing a new variable to the HF wavefunction, computed_shells_per_iter_, which keeps track of the number of shell quartets computed per SCF iteration. The computed_shells_per_iter_ variable is accessible to the user via Python, and thus can be used to conduct screening tests. In this way, density screening tests can be performed without the need for an ERI object. 2. As a bonus from the changes introduced by this PR, the DirectJK algorithm no longer has a need to print computed shell quartet counts to bench.dat. Bench.dat is used exclusively by the DirectJK object to dump the number of shell quartets computed per SCF iteration somewhere. That data is now accessible to the user in a cleaner fashion - it can be accessed through Python, in a manipulatable format. ## Notes; 1. Note that the ch",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2547
https://github.com/psi4/psi4/pull/2547:1394,Security,access,accessible,1394," i.e., the JK object. This PR solves two issues simultaneously:. 1. The primary purpose of this PR is to change the test_erisieve.py tests to work with the planned future density screening refactor. One issue that moving density screening from TwoBodyAOInt to JK currently brings up, is that it causes the tests on density screening within the pytest test_erisieve.py to fail. These failures occur because test_erisieve.py performs its screening tests directly using an ERI object generated by IntegralFactory. With density screening being removed from the TwoBodyAOInt object, this method of density screening testing can no longer be done. The current PR is designed to address this issue for when the density screening refactor happens. The aforementioned issue is addressed by implementing a new variable to the HF wavefunction, computed_shells_per_iter_, which keeps track of the number of shell quartets computed per SCF iteration. The computed_shells_per_iter_ variable is accessible to the user via Python, and thus can be used to conduct screening tests. In this way, density screening tests can be performed without the need for an ERI object. 2. As a bonus from the changes introduced by this PR, the DirectJK algorithm no longer has a need to print computed shell quartet counts to bench.dat. Bench.dat is used exclusively by the DirectJK object to dump the number of shell quartets computed per SCF iteration somewhere. That data is now accessible to the user in a cleaner fashion - it can be accessed through Python, in a manipulatable format. ## Notes; 1. Note that the changes in this PR have not been applied to the LinK portion of the DirectJK code. This is intentional, as Andy is planning on moving LinK out of DirectJK entirely, and editing the LinK code within DirectJK would interfere with that. Thus, the changes in this branch will be applied to LinK in a later update.; ; ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; -",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2547
https://github.com/psi4/psi4/pull/2547:1864,Security,access,accessible,1864,"IntegralFactory. With density screening being removed from the TwoBodyAOInt object, this method of density screening testing can no longer be done. The current PR is designed to address this issue for when the density screening refactor happens. The aforementioned issue is addressed by implementing a new variable to the HF wavefunction, computed_shells_per_iter_, which keeps track of the number of shell quartets computed per SCF iteration. The computed_shells_per_iter_ variable is accessible to the user via Python, and thus can be used to conduct screening tests. In this way, density screening tests can be performed without the need for an ERI object. 2. As a bonus from the changes introduced by this PR, the DirectJK algorithm no longer has a need to print computed shell quartet counts to bench.dat. Bench.dat is used exclusively by the DirectJK object to dump the number of shell quartets computed per SCF iteration somewhere. That data is now accessible to the user in a cleaner fashion - it can be accessed through Python, in a manipulatable format. ## Notes; 1. Note that the changes in this PR have not been applied to the LinK portion of the DirectJK code. This is intentional, as Andy is planning on moving LinK out of DirectJK entirely, and editing the LinK code within DirectJK would interfere with that. Thus, the changes in this branch will be applied to LinK in a later update.; ; ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ X ] Addition of computed_shells_ member to JK object, which keeps track of number of shells computed during the JK build process.; - [ X ] Addition of computed_shells_per_iter_ member to HF wavefunction objects, which keep track of number of shells computed during each SCF iteration. This information can be accessed by the user via Python.; - [ X ] Modification of density screening tests in test_erisieve.py using the above class changes to allow the tests to run without construction of a",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2547
https://github.com/psi4/psi4/pull/2547:1920,Security,access,accessed,1920,"IntegralFactory. With density screening being removed from the TwoBodyAOInt object, this method of density screening testing can no longer be done. The current PR is designed to address this issue for when the density screening refactor happens. The aforementioned issue is addressed by implementing a new variable to the HF wavefunction, computed_shells_per_iter_, which keeps track of the number of shell quartets computed per SCF iteration. The computed_shells_per_iter_ variable is accessible to the user via Python, and thus can be used to conduct screening tests. In this way, density screening tests can be performed without the need for an ERI object. 2. As a bonus from the changes introduced by this PR, the DirectJK algorithm no longer has a need to print computed shell quartet counts to bench.dat. Bench.dat is used exclusively by the DirectJK object to dump the number of shell quartets computed per SCF iteration somewhere. That data is now accessible to the user in a cleaner fashion - it can be accessed through Python, in a manipulatable format. ## Notes; 1. Note that the changes in this PR have not been applied to the LinK portion of the DirectJK code. This is intentional, as Andy is planning on moving LinK out of DirectJK entirely, and editing the LinK code within DirectJK would interfere with that. Thus, the changes in this branch will be applied to LinK in a later update.; ; ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ X ] Addition of computed_shells_ member to JK object, which keeps track of number of shells computed during the JK build process.; - [ X ] Addition of computed_shells_per_iter_ member to HF wavefunction objects, which keep track of number of shells computed during each SCF iteration. This information can be accessed by the user via Python.; - [ X ] Modification of density screening tests in test_erisieve.py using the above class changes to allow the tests to run without construction of a",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2547
https://github.com/psi4/psi4/pull/2547:2726,Security,access,accessed,2726,"bject. 2. As a bonus from the changes introduced by this PR, the DirectJK algorithm no longer has a need to print computed shell quartet counts to bench.dat. Bench.dat is used exclusively by the DirectJK object to dump the number of shell quartets computed per SCF iteration somewhere. That data is now accessible to the user in a cleaner fashion - it can be accessed through Python, in a manipulatable format. ## Notes; 1. Note that the changes in this PR have not been applied to the LinK portion of the DirectJK code. This is intentional, as Andy is planning on moving LinK out of DirectJK entirely, and editing the LinK code within DirectJK would interfere with that. Thus, the changes in this branch will be applied to LinK in a later update.; ; ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ X ] Addition of computed_shells_ member to JK object, which keeps track of number of shells computed during the JK build process.; - [ X ] Addition of computed_shells_per_iter_ member to HF wavefunction objects, which keep track of number of shells computed during each SCF iteration. This information can be accessed by the user via Python.; - [ X ] Modification of density screening tests in test_erisieve.py using the above class changes to allow the tests to run without construction of an ERI object. ## Questions; - [ ] Currently, only the density screening tests in test_erisieve.py use the new computed_shells_per_iter_ framework to test screening. Other tests in test_erisieve.py perform their tests using a generated ERI object. Should use of computed_shells_per_iter_ comparisons be applied to other tests in test_erisieve.py, as well?. ## Checklist; - [ X ] Tests added for any new features; - [ X ] Docs added for any new features; - [ X ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ X ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2547
https://github.com/psi4/psi4/pull/2547:349,Testability,log,logic,349,"## Description; This PR is the first in a series of planned PRs designed to remove density screening from the TwoBodyAOInt object and into the JK object. Having density screening available in TwoBodyAOInt runs the risk of applying density screening to algorithms where density screening doesn't make sense. Thus, it would be a good idea to move the logic of density screening to where it is more correctly applied, i.e., the JK object. This PR solves two issues simultaneously:. 1. The primary purpose of this PR is to change the test_erisieve.py tests to work with the planned future density screening refactor. One issue that moving density screening from TwoBodyAOInt to JK currently brings up, is that it causes the tests on density screening within the pytest test_erisieve.py to fail. These failures occur because test_erisieve.py performs its screening tests directly using an ERI object generated by IntegralFactory. With density screening being removed from the TwoBodyAOInt object, this method of density screening testing can no longer be done. The current PR is designed to address this issue for when the density screening refactor happens. The aforementioned issue is addressed by implementing a new variable to the HF wavefunction, computed_shells_per_iter_, which keeps track of the number of shell quartets computed per SCF iteration. The computed_shells_per_iter_ variable is accessible to the user via Python, and thus can be used to conduct screening tests. In this way, density screening tests can be performed without the need for an ERI object. 2. As a bonus from the changes introduced by this PR, the DirectJK algorithm no longer has a need to print computed shell quartet counts to bench.dat. Bench.dat is used exclusively by the DirectJK object to dump the number of shell quartets computed per SCF iteration somewhere. That data is now accessible to the user in a cleaner fashion - it can be accessed through Python, in a manipulatable format. ## Notes; 1. Note that the ch",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2547
https://github.com/psi4/psi4/pull/2547:547,Testability,test,tests,547,"## Description; This PR is the first in a series of planned PRs designed to remove density screening from the TwoBodyAOInt object and into the JK object. Having density screening available in TwoBodyAOInt runs the risk of applying density screening to algorithms where density screening doesn't make sense. Thus, it would be a good idea to move the logic of density screening to where it is more correctly applied, i.e., the JK object. This PR solves two issues simultaneously:. 1. The primary purpose of this PR is to change the test_erisieve.py tests to work with the planned future density screening refactor. One issue that moving density screening from TwoBodyAOInt to JK currently brings up, is that it causes the tests on density screening within the pytest test_erisieve.py to fail. These failures occur because test_erisieve.py performs its screening tests directly using an ERI object generated by IntegralFactory. With density screening being removed from the TwoBodyAOInt object, this method of density screening testing can no longer be done. The current PR is designed to address this issue for when the density screening refactor happens. The aforementioned issue is addressed by implementing a new variable to the HF wavefunction, computed_shells_per_iter_, which keeps track of the number of shell quartets computed per SCF iteration. The computed_shells_per_iter_ variable is accessible to the user via Python, and thus can be used to conduct screening tests. In this way, density screening tests can be performed without the need for an ERI object. 2. As a bonus from the changes introduced by this PR, the DirectJK algorithm no longer has a need to print computed shell quartet counts to bench.dat. Bench.dat is used exclusively by the DirectJK object to dump the number of shell quartets computed per SCF iteration somewhere. That data is now accessible to the user in a cleaner fashion - it can be accessed through Python, in a manipulatable format. ## Notes; 1. Note that the ch",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2547
https://github.com/psi4/psi4/pull/2547:720,Testability,test,tests,720,"## Description; This PR is the first in a series of planned PRs designed to remove density screening from the TwoBodyAOInt object and into the JK object. Having density screening available in TwoBodyAOInt runs the risk of applying density screening to algorithms where density screening doesn't make sense. Thus, it would be a good idea to move the logic of density screening to where it is more correctly applied, i.e., the JK object. This PR solves two issues simultaneously:. 1. The primary purpose of this PR is to change the test_erisieve.py tests to work with the planned future density screening refactor. One issue that moving density screening from TwoBodyAOInt to JK currently brings up, is that it causes the tests on density screening within the pytest test_erisieve.py to fail. These failures occur because test_erisieve.py performs its screening tests directly using an ERI object generated by IntegralFactory. With density screening being removed from the TwoBodyAOInt object, this method of density screening testing can no longer be done. The current PR is designed to address this issue for when the density screening refactor happens. The aforementioned issue is addressed by implementing a new variable to the HF wavefunction, computed_shells_per_iter_, which keeps track of the number of shell quartets computed per SCF iteration. The computed_shells_per_iter_ variable is accessible to the user via Python, and thus can be used to conduct screening tests. In this way, density screening tests can be performed without the need for an ERI object. 2. As a bonus from the changes introduced by this PR, the DirectJK algorithm no longer has a need to print computed shell quartet counts to bench.dat. Bench.dat is used exclusively by the DirectJK object to dump the number of shell quartets computed per SCF iteration somewhere. That data is now accessible to the user in a cleaner fashion - it can be accessed through Python, in a manipulatable format. ## Notes; 1. Note that the ch",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2547
https://github.com/psi4/psi4/pull/2547:860,Testability,test,tests,860,"## Description; This PR is the first in a series of planned PRs designed to remove density screening from the TwoBodyAOInt object and into the JK object. Having density screening available in TwoBodyAOInt runs the risk of applying density screening to algorithms where density screening doesn't make sense. Thus, it would be a good idea to move the logic of density screening to where it is more correctly applied, i.e., the JK object. This PR solves two issues simultaneously:. 1. The primary purpose of this PR is to change the test_erisieve.py tests to work with the planned future density screening refactor. One issue that moving density screening from TwoBodyAOInt to JK currently brings up, is that it causes the tests on density screening within the pytest test_erisieve.py to fail. These failures occur because test_erisieve.py performs its screening tests directly using an ERI object generated by IntegralFactory. With density screening being removed from the TwoBodyAOInt object, this method of density screening testing can no longer be done. The current PR is designed to address this issue for when the density screening refactor happens. The aforementioned issue is addressed by implementing a new variable to the HF wavefunction, computed_shells_per_iter_, which keeps track of the number of shell quartets computed per SCF iteration. The computed_shells_per_iter_ variable is accessible to the user via Python, and thus can be used to conduct screening tests. In this way, density screening tests can be performed without the need for an ERI object. 2. As a bonus from the changes introduced by this PR, the DirectJK algorithm no longer has a need to print computed shell quartet counts to bench.dat. Bench.dat is used exclusively by the DirectJK object to dump the number of shell quartets computed per SCF iteration somewhere. That data is now accessible to the user in a cleaner fashion - it can be accessed through Python, in a manipulatable format. ## Notes; 1. Note that the ch",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2547
https://github.com/psi4/psi4/pull/2547:1025,Testability,test,testing,1025,"## Description; This PR is the first in a series of planned PRs designed to remove density screening from the TwoBodyAOInt object and into the JK object. Having density screening available in TwoBodyAOInt runs the risk of applying density screening to algorithms where density screening doesn't make sense. Thus, it would be a good idea to move the logic of density screening to where it is more correctly applied, i.e., the JK object. This PR solves two issues simultaneously:. 1. The primary purpose of this PR is to change the test_erisieve.py tests to work with the planned future density screening refactor. One issue that moving density screening from TwoBodyAOInt to JK currently brings up, is that it causes the tests on density screening within the pytest test_erisieve.py to fail. These failures occur because test_erisieve.py performs its screening tests directly using an ERI object generated by IntegralFactory. With density screening being removed from the TwoBodyAOInt object, this method of density screening testing can no longer be done. The current PR is designed to address this issue for when the density screening refactor happens. The aforementioned issue is addressed by implementing a new variable to the HF wavefunction, computed_shells_per_iter_, which keeps track of the number of shell quartets computed per SCF iteration. The computed_shells_per_iter_ variable is accessible to the user via Python, and thus can be used to conduct screening tests. In this way, density screening tests can be performed without the need for an ERI object. 2. As a bonus from the changes introduced by this PR, the DirectJK algorithm no longer has a need to print computed shell quartet counts to bench.dat. Bench.dat is used exclusively by the DirectJK object to dump the number of shell quartets computed per SCF iteration somewhere. That data is now accessible to the user in a cleaner fashion - it can be accessed through Python, in a manipulatable format. ## Notes; 1. Note that the ch",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2547
https://github.com/psi4/psi4/pull/2547:1471,Testability,test,tests,1471," i.e., the JK object. This PR solves two issues simultaneously:. 1. The primary purpose of this PR is to change the test_erisieve.py tests to work with the planned future density screening refactor. One issue that moving density screening from TwoBodyAOInt to JK currently brings up, is that it causes the tests on density screening within the pytest test_erisieve.py to fail. These failures occur because test_erisieve.py performs its screening tests directly using an ERI object generated by IntegralFactory. With density screening being removed from the TwoBodyAOInt object, this method of density screening testing can no longer be done. The current PR is designed to address this issue for when the density screening refactor happens. The aforementioned issue is addressed by implementing a new variable to the HF wavefunction, computed_shells_per_iter_, which keeps track of the number of shell quartets computed per SCF iteration. The computed_shells_per_iter_ variable is accessible to the user via Python, and thus can be used to conduct screening tests. In this way, density screening tests can be performed without the need for an ERI object. 2. As a bonus from the changes introduced by this PR, the DirectJK algorithm no longer has a need to print computed shell quartet counts to bench.dat. Bench.dat is used exclusively by the DirectJK object to dump the number of shell quartets computed per SCF iteration somewhere. That data is now accessible to the user in a cleaner fashion - it can be accessed through Python, in a manipulatable format. ## Notes; 1. Note that the changes in this PR have not been applied to the LinK portion of the DirectJK code. This is intentional, as Andy is planning on moving LinK out of DirectJK entirely, and editing the LinK code within DirectJK would interfere with that. Thus, the changes in this branch will be applied to LinK in a later update.; ; ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; -",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2547
https://github.com/psi4/psi4/pull/2547:1509,Testability,test,tests,1509,"nge the test_erisieve.py tests to work with the planned future density screening refactor. One issue that moving density screening from TwoBodyAOInt to JK currently brings up, is that it causes the tests on density screening within the pytest test_erisieve.py to fail. These failures occur because test_erisieve.py performs its screening tests directly using an ERI object generated by IntegralFactory. With density screening being removed from the TwoBodyAOInt object, this method of density screening testing can no longer be done. The current PR is designed to address this issue for when the density screening refactor happens. The aforementioned issue is addressed by implementing a new variable to the HF wavefunction, computed_shells_per_iter_, which keeps track of the number of shell quartets computed per SCF iteration. The computed_shells_per_iter_ variable is accessible to the user via Python, and thus can be used to conduct screening tests. In this way, density screening tests can be performed without the need for an ERI object. 2. As a bonus from the changes introduced by this PR, the DirectJK algorithm no longer has a need to print computed shell quartet counts to bench.dat. Bench.dat is used exclusively by the DirectJK object to dump the number of shell quartets computed per SCF iteration somewhere. That data is now accessible to the user in a cleaner fashion - it can be accessed through Python, in a manipulatable format. ## Notes; 1. Note that the changes in this PR have not been applied to the LinK portion of the DirectJK code. This is intentional, as Andy is planning on moving LinK out of DirectJK entirely, and editing the LinK code within DirectJK would interfere with that. Thus, the changes in this branch will be applied to LinK in a later update.; ; ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ X ] Addition of computed_shells_ member to JK object, which keeps track of number of shells computed duri",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2547
https://github.com/psi4/psi4/pull/2547:2802,Testability,test,tests,2802,"bject. 2. As a bonus from the changes introduced by this PR, the DirectJK algorithm no longer has a need to print computed shell quartet counts to bench.dat. Bench.dat is used exclusively by the DirectJK object to dump the number of shell quartets computed per SCF iteration somewhere. That data is now accessible to the user in a cleaner fashion - it can be accessed through Python, in a manipulatable format. ## Notes; 1. Note that the changes in this PR have not been applied to the LinK portion of the DirectJK code. This is intentional, as Andy is planning on moving LinK out of DirectJK entirely, and editing the LinK code within DirectJK would interfere with that. Thus, the changes in this branch will be applied to LinK in a later update.; ; ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ X ] Addition of computed_shells_ member to JK object, which keeps track of number of shells computed during the JK build process.; - [ X ] Addition of computed_shells_per_iter_ member to HF wavefunction objects, which keep track of number of shells computed during each SCF iteration. This information can be accessed by the user via Python.; - [ X ] Modification of density screening tests in test_erisieve.py using the above class changes to allow the tests to run without construction of an ERI object. ## Questions; - [ ] Currently, only the density screening tests in test_erisieve.py use the new computed_shells_per_iter_ framework to test screening. Other tests in test_erisieve.py perform their tests using a generated ERI object. Should use of computed_shells_per_iter_ comparisons be applied to other tests in test_erisieve.py, as well?. ## Checklist; - [ X ] Tests added for any new features; - [ X ] Docs added for any new features; - [ X ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ X ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2547
https://github.com/psi4/psi4/pull/2547:2871,Testability,test,tests,2871,"bject. 2. As a bonus from the changes introduced by this PR, the DirectJK algorithm no longer has a need to print computed shell quartet counts to bench.dat. Bench.dat is used exclusively by the DirectJK object to dump the number of shell quartets computed per SCF iteration somewhere. That data is now accessible to the user in a cleaner fashion - it can be accessed through Python, in a manipulatable format. ## Notes; 1. Note that the changes in this PR have not been applied to the LinK portion of the DirectJK code. This is intentional, as Andy is planning on moving LinK out of DirectJK entirely, and editing the LinK code within DirectJK would interfere with that. Thus, the changes in this branch will be applied to LinK in a later update.; ; ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ X ] Addition of computed_shells_ member to JK object, which keeps track of number of shells computed during the JK build process.; - [ X ] Addition of computed_shells_per_iter_ member to HF wavefunction objects, which keep track of number of shells computed during each SCF iteration. This information can be accessed by the user via Python.; - [ X ] Modification of density screening tests in test_erisieve.py using the above class changes to allow the tests to run without construction of an ERI object. ## Questions; - [ ] Currently, only the density screening tests in test_erisieve.py use the new computed_shells_per_iter_ framework to test screening. Other tests in test_erisieve.py perform their tests using a generated ERI object. Should use of computed_shells_per_iter_ comparisons be applied to other tests in test_erisieve.py, as well?. ## Checklist; - [ X ] Tests added for any new features; - [ X ] Docs added for any new features; - [ X ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ X ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2547
https://github.com/psi4/psi4/pull/2547:2981,Testability,test,tests,2981,"bject. 2. As a bonus from the changes introduced by this PR, the DirectJK algorithm no longer has a need to print computed shell quartet counts to bench.dat. Bench.dat is used exclusively by the DirectJK object to dump the number of shell quartets computed per SCF iteration somewhere. That data is now accessible to the user in a cleaner fashion - it can be accessed through Python, in a manipulatable format. ## Notes; 1. Note that the changes in this PR have not been applied to the LinK portion of the DirectJK code. This is intentional, as Andy is planning on moving LinK out of DirectJK entirely, and editing the LinK code within DirectJK would interfere with that. Thus, the changes in this branch will be applied to LinK in a later update.; ; ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ X ] Addition of computed_shells_ member to JK object, which keeps track of number of shells computed during the JK build process.; - [ X ] Addition of computed_shells_per_iter_ member to HF wavefunction objects, which keep track of number of shells computed during each SCF iteration. This information can be accessed by the user via Python.; - [ X ] Modification of density screening tests in test_erisieve.py using the above class changes to allow the tests to run without construction of an ERI object. ## Questions; - [ ] Currently, only the density screening tests in test_erisieve.py use the new computed_shells_per_iter_ framework to test screening. Other tests in test_erisieve.py perform their tests using a generated ERI object. Should use of computed_shells_per_iter_ comparisons be applied to other tests in test_erisieve.py, as well?. ## Checklist; - [ X ] Tests added for any new features; - [ X ] Docs added for any new features; - [ X ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ X ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2547
https://github.com/psi4/psi4/pull/2547:3058,Testability,test,test,3058,"bject. 2. As a bonus from the changes introduced by this PR, the DirectJK algorithm no longer has a need to print computed shell quartet counts to bench.dat. Bench.dat is used exclusively by the DirectJK object to dump the number of shell quartets computed per SCF iteration somewhere. That data is now accessible to the user in a cleaner fashion - it can be accessed through Python, in a manipulatable format. ## Notes; 1. Note that the changes in this PR have not been applied to the LinK portion of the DirectJK code. This is intentional, as Andy is planning on moving LinK out of DirectJK entirely, and editing the LinK code within DirectJK would interfere with that. Thus, the changes in this branch will be applied to LinK in a later update.; ; ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ X ] Addition of computed_shells_ member to JK object, which keeps track of number of shells computed during the JK build process.; - [ X ] Addition of computed_shells_per_iter_ member to HF wavefunction objects, which keep track of number of shells computed during each SCF iteration. This information can be accessed by the user via Python.; - [ X ] Modification of density screening tests in test_erisieve.py using the above class changes to allow the tests to run without construction of an ERI object. ## Questions; - [ ] Currently, only the density screening tests in test_erisieve.py use the new computed_shells_per_iter_ framework to test screening. Other tests in test_erisieve.py perform their tests using a generated ERI object. Should use of computed_shells_per_iter_ comparisons be applied to other tests in test_erisieve.py, as well?. ## Checklist; - [ X ] Tests added for any new features; - [ X ] Docs added for any new features; - [ X ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ X ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2547
https://github.com/psi4/psi4/pull/2547:3080,Testability,test,tests,3080,"bject. 2. As a bonus from the changes introduced by this PR, the DirectJK algorithm no longer has a need to print computed shell quartet counts to bench.dat. Bench.dat is used exclusively by the DirectJK object to dump the number of shell quartets computed per SCF iteration somewhere. That data is now accessible to the user in a cleaner fashion - it can be accessed through Python, in a manipulatable format. ## Notes; 1. Note that the changes in this PR have not been applied to the LinK portion of the DirectJK code. This is intentional, as Andy is planning on moving LinK out of DirectJK entirely, and editing the LinK code within DirectJK would interfere with that. Thus, the changes in this branch will be applied to LinK in a later update.; ; ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ X ] Addition of computed_shells_ member to JK object, which keeps track of number of shells computed during the JK build process.; - [ X ] Addition of computed_shells_per_iter_ member to HF wavefunction objects, which keep track of number of shells computed during each SCF iteration. This information can be accessed by the user via Python.; - [ X ] Modification of density screening tests in test_erisieve.py using the above class changes to allow the tests to run without construction of an ERI object. ## Questions; - [ ] Currently, only the density screening tests in test_erisieve.py use the new computed_shells_per_iter_ framework to test screening. Other tests in test_erisieve.py perform their tests using a generated ERI object. Should use of computed_shells_per_iter_ comparisons be applied to other tests in test_erisieve.py, as well?. ## Checklist; - [ X ] Tests added for any new features; - [ X ] Docs added for any new features; - [ X ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ X ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2547
https://github.com/psi4/psi4/pull/2547:3120,Testability,test,tests,3120,"bject. 2. As a bonus from the changes introduced by this PR, the DirectJK algorithm no longer has a need to print computed shell quartet counts to bench.dat. Bench.dat is used exclusively by the DirectJK object to dump the number of shell quartets computed per SCF iteration somewhere. That data is now accessible to the user in a cleaner fashion - it can be accessed through Python, in a manipulatable format. ## Notes; 1. Note that the changes in this PR have not been applied to the LinK portion of the DirectJK code. This is intentional, as Andy is planning on moving LinK out of DirectJK entirely, and editing the LinK code within DirectJK would interfere with that. Thus, the changes in this branch will be applied to LinK in a later update.; ; ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ X ] Addition of computed_shells_ member to JK object, which keeps track of number of shells computed during the JK build process.; - [ X ] Addition of computed_shells_per_iter_ member to HF wavefunction objects, which keep track of number of shells computed during each SCF iteration. This information can be accessed by the user via Python.; - [ X ] Modification of density screening tests in test_erisieve.py using the above class changes to allow the tests to run without construction of an ERI object. ## Questions; - [ ] Currently, only the density screening tests in test_erisieve.py use the new computed_shells_per_iter_ framework to test screening. Other tests in test_erisieve.py perform their tests using a generated ERI object. Should use of computed_shells_per_iter_ comparisons be applied to other tests in test_erisieve.py, as well?. ## Checklist; - [ X ] Tests added for any new features; - [ X ] Docs added for any new features; - [ X ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ X ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2547
https://github.com/psi4/psi4/pull/2547:3228,Testability,test,tests,3228,"bject. 2. As a bonus from the changes introduced by this PR, the DirectJK algorithm no longer has a need to print computed shell quartet counts to bench.dat. Bench.dat is used exclusively by the DirectJK object to dump the number of shell quartets computed per SCF iteration somewhere. That data is now accessible to the user in a cleaner fashion - it can be accessed through Python, in a manipulatable format. ## Notes; 1. Note that the changes in this PR have not been applied to the LinK portion of the DirectJK code. This is intentional, as Andy is planning on moving LinK out of DirectJK entirely, and editing the LinK code within DirectJK would interfere with that. Thus, the changes in this branch will be applied to LinK in a later update.; ; ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ X ] Addition of computed_shells_ member to JK object, which keeps track of number of shells computed during the JK build process.; - [ X ] Addition of computed_shells_per_iter_ member to HF wavefunction objects, which keep track of number of shells computed during each SCF iteration. This information can be accessed by the user via Python.; - [ X ] Modification of density screening tests in test_erisieve.py using the above class changes to allow the tests to run without construction of an ERI object. ## Questions; - [ ] Currently, only the density screening tests in test_erisieve.py use the new computed_shells_per_iter_ framework to test screening. Other tests in test_erisieve.py perform their tests using a generated ERI object. Should use of computed_shells_per_iter_ comparisons be applied to other tests in test_erisieve.py, as well?. ## Checklist; - [ X ] Tests added for any new features; - [ X ] Docs added for any new features; - [ X ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ X ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2547
https://github.com/psi4/psi4/pull/2547:3287,Testability,Test,Tests,3287,"bject. 2. As a bonus from the changes introduced by this PR, the DirectJK algorithm no longer has a need to print computed shell quartet counts to bench.dat. Bench.dat is used exclusively by the DirectJK object to dump the number of shell quartets computed per SCF iteration somewhere. That data is now accessible to the user in a cleaner fashion - it can be accessed through Python, in a manipulatable format. ## Notes; 1. Note that the changes in this PR have not been applied to the LinK portion of the DirectJK code. This is intentional, as Andy is planning on moving LinK out of DirectJK entirely, and editing the LinK code within DirectJK would interfere with that. Thus, the changes in this branch will be applied to LinK in a later update.; ; ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ X ] Addition of computed_shells_ member to JK object, which keeps track of number of shells computed during the JK build process.; - [ X ] Addition of computed_shells_per_iter_ member to HF wavefunction objects, which keep track of number of shells computed during each SCF iteration. This information can be accessed by the user via Python.; - [ X ] Modification of density screening tests in test_erisieve.py using the above class changes to allow the tests to run without construction of an ERI object. ## Questions; - [ ] Currently, only the density screening tests in test_erisieve.py use the new computed_shells_per_iter_ framework to test screening. Other tests in test_erisieve.py perform their tests using a generated ERI object. Should use of computed_shells_per_iter_ comparisons be applied to other tests in test_erisieve.py, as well?. ## Checklist; - [ X ] Tests added for any new features; - [ X ] Docs added for any new features; - [ X ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ X ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2547
https://github.com/psi4/psi4/pull/2547:3404,Testability,test,tests,3404,"bject. 2. As a bonus from the changes introduced by this PR, the DirectJK algorithm no longer has a need to print computed shell quartet counts to bench.dat. Bench.dat is used exclusively by the DirectJK object to dump the number of shell quartets computed per SCF iteration somewhere. That data is now accessible to the user in a cleaner fashion - it can be accessed through Python, in a manipulatable format. ## Notes; 1. Note that the changes in this PR have not been applied to the LinK portion of the DirectJK code. This is intentional, as Andy is planning on moving LinK out of DirectJK entirely, and editing the LinK code within DirectJK would interfere with that. Thus, the changes in this branch will be applied to LinK in a later update.; ; ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ X ] Addition of computed_shells_ member to JK object, which keeps track of number of shells computed during the JK build process.; - [ X ] Addition of computed_shells_per_iter_ member to HF wavefunction objects, which keep track of number of shells computed during each SCF iteration. This information can be accessed by the user via Python.; - [ X ] Modification of density screening tests in test_erisieve.py using the above class changes to allow the tests to run without construction of an ERI object. ## Questions; - [ ] Currently, only the density screening tests in test_erisieve.py use the new computed_shells_per_iter_ framework to test screening. Other tests in test_erisieve.py perform their tests using a generated ERI object. Should use of computed_shells_per_iter_ comparisons be applied to other tests in test_erisieve.py, as well?. ## Checklist; - [ X ] Tests added for any new features; - [ X ] Docs added for any new features; - [ X ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ X ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2547
https://github.com/psi4/psi4/pull/2547:3495,Testability,test,tests,3495,"bject. 2. As a bonus from the changes introduced by this PR, the DirectJK algorithm no longer has a need to print computed shell quartet counts to bench.dat. Bench.dat is used exclusively by the DirectJK object to dump the number of shell quartets computed per SCF iteration somewhere. That data is now accessible to the user in a cleaner fashion - it can be accessed through Python, in a manipulatable format. ## Notes; 1. Note that the changes in this PR have not been applied to the LinK portion of the DirectJK code. This is intentional, as Andy is planning on moving LinK out of DirectJK entirely, and editing the LinK code within DirectJK would interfere with that. Thus, the changes in this branch will be applied to LinK in a later update.; ; ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ X ] Addition of computed_shells_ member to JK object, which keeps track of number of shells computed during the JK build process.; - [ X ] Addition of computed_shells_per_iter_ member to HF wavefunction objects, which keep track of number of shells computed during each SCF iteration. This information can be accessed by the user via Python.; - [ X ] Modification of density screening tests in test_erisieve.py using the above class changes to allow the tests to run without construction of an ERI object. ## Questions; - [ ] Currently, only the density screening tests in test_erisieve.py use the new computed_shells_per_iter_ framework to test screening. Other tests in test_erisieve.py perform their tests using a generated ERI object. Should use of computed_shells_per_iter_ comparisons be applied to other tests in test_erisieve.py, as well?. ## Checklist; - [ X ] Tests added for any new features; - [ X ] Docs added for any new features; - [ X ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ X ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2547
https://github.com/psi4/psi4/issues/2548:2069,Availability,avail,available,2069,"re/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 2420, in run_scf_gradient; ref_wfn = run_scf(name, **kwargs); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 2325, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1543, in scf_helper; disp_energy = scf_wfn._disp_functor.compute_energy(scf_wfn.molecule(), scf_wfn); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/empirical_dispersion.py"", line 210, in compute_energy; jobrec = qcng.compute(; File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/qcengine/compute.py"", line 83, in compute; config = get_config(local_options=local_options); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/qcengine/config.py"", line 308, in get_config; raise KeyError(""Number of jobs per node exceeds the number of available cores.""); KeyError: 'Number of jobs per node exceeds the number of available cores.'. ```. This job is submitted on a SLURM cluster with the following script:; ```; #!/bin/bash. #SBATCH --partition=compute-16core-64gb-preemptible; #SBATCH --nodes=1; #SBATCH --ntasks-per-node=1; #SBATCH --output=C2c_I2T_ACETAC_1_57_selected_nbody_1_clusters.slurm.out; #SBATCH --job-name=test-C2c_I2T_ACETAC_1_57_selected_nbody_1_clusters. source /home/jacobson/software/setup.psi4; export PSI_SCRATCH=/scratch/jacobson/; export OMP_NUM_THREADS=1; export MPI_NUM_THREADS=1; echo psi4 scratch set to $PSI_SCRATCH; fname=C2c_I2T_ACETAC_1_57_selected_nbody_1_clusters; python /home/jacobson/bin/psi4_wb97xd3_def2tzvp.py $fname"".xyz"" > $fname"".log""; ```. one cpu is available for the job. I tracked the issue to qcengine/config.py which seems not to recognize my host and then set a default of 2 for jobs_per_node. Then ncores / jobs_per_node is zero and a KeyError is rai",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2548
https://github.com/psi4/psi4/issues/2548:2146,Availability,avail,available,2146,"si4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 2420, in run_scf_gradient; ref_wfn = run_scf(name, **kwargs); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 2325, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1543, in scf_helper; disp_energy = scf_wfn._disp_functor.compute_energy(scf_wfn.molecule(), scf_wfn); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/empirical_dispersion.py"", line 210, in compute_energy; jobrec = qcng.compute(; File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/qcengine/compute.py"", line 83, in compute; config = get_config(local_options=local_options); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/qcengine/config.py"", line 308, in get_config; raise KeyError(""Number of jobs per node exceeds the number of available cores.""); KeyError: 'Number of jobs per node exceeds the number of available cores.'. ```. This job is submitted on a SLURM cluster with the following script:; ```; #!/bin/bash. #SBATCH --partition=compute-16core-64gb-preemptible; #SBATCH --nodes=1; #SBATCH --ntasks-per-node=1; #SBATCH --output=C2c_I2T_ACETAC_1_57_selected_nbody_1_clusters.slurm.out; #SBATCH --job-name=test-C2c_I2T_ACETAC_1_57_selected_nbody_1_clusters. source /home/jacobson/software/setup.psi4; export PSI_SCRATCH=/scratch/jacobson/; export OMP_NUM_THREADS=1; export MPI_NUM_THREADS=1; echo psi4 scratch set to $PSI_SCRATCH; fname=C2c_I2T_ACETAC_1_57_selected_nbody_1_clusters; python /home/jacobson/bin/psi4_wb97xd3_def2tzvp.py $fname"".xyz"" > $fname"".log""; ```. one cpu is available for the job. I tracked the issue to qcengine/config.py which seems not to recognize my host and then set a default of 2 for jobs_per_node. Then ncores / jobs_per_node is zero and a KeyError is raised.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2548
https://github.com/psi4/psi4/issues/2548:2637,Availability,echo,echo,2637,"si4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 2420, in run_scf_gradient; ref_wfn = run_scf(name, **kwargs); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 2325, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1543, in scf_helper; disp_energy = scf_wfn._disp_functor.compute_energy(scf_wfn.molecule(), scf_wfn); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/empirical_dispersion.py"", line 210, in compute_energy; jobrec = qcng.compute(; File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/qcengine/compute.py"", line 83, in compute; config = get_config(local_options=local_options); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/qcengine/config.py"", line 308, in get_config; raise KeyError(""Number of jobs per node exceeds the number of available cores.""); KeyError: 'Number of jobs per node exceeds the number of available cores.'. ```. This job is submitted on a SLURM cluster with the following script:; ```; #!/bin/bash. #SBATCH --partition=compute-16core-64gb-preemptible; #SBATCH --nodes=1; #SBATCH --ntasks-per-node=1; #SBATCH --output=C2c_I2T_ACETAC_1_57_selected_nbody_1_clusters.slurm.out; #SBATCH --job-name=test-C2c_I2T_ACETAC_1_57_selected_nbody_1_clusters. source /home/jacobson/software/setup.psi4; export PSI_SCRATCH=/scratch/jacobson/; export OMP_NUM_THREADS=1; export MPI_NUM_THREADS=1; echo psi4 scratch set to $PSI_SCRATCH; fname=C2c_I2T_ACETAC_1_57_selected_nbody_1_clusters; python /home/jacobson/bin/psi4_wb97xd3_def2tzvp.py $fname"".xyz"" > $fname"".log""; ```. one cpu is available for the job. I tracked the issue to qcengine/config.py which seems not to recognize my host and then set a default of 2 for jobs_per_node. Then ncores / jobs_per_node is zero and a KeyError is raised.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2548
https://github.com/psi4/psi4/issues/2548:2825,Availability,avail,available,2825,"si4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 2420, in run_scf_gradient; ref_wfn = run_scf(name, **kwargs); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 2325, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1543, in scf_helper; disp_energy = scf_wfn._disp_functor.compute_energy(scf_wfn.molecule(), scf_wfn); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/empirical_dispersion.py"", line 210, in compute_energy; jobrec = qcng.compute(; File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/qcengine/compute.py"", line 83, in compute; config = get_config(local_options=local_options); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/qcengine/config.py"", line 308, in get_config; raise KeyError(""Number of jobs per node exceeds the number of available cores.""); KeyError: 'Number of jobs per node exceeds the number of available cores.'. ```. This job is submitted on a SLURM cluster with the following script:; ```; #!/bin/bash. #SBATCH --partition=compute-16core-64gb-preemptible; #SBATCH --nodes=1; #SBATCH --ntasks-per-node=1; #SBATCH --output=C2c_I2T_ACETAC_1_57_selected_nbody_1_clusters.slurm.out; #SBATCH --job-name=test-C2c_I2T_ACETAC_1_57_selected_nbody_1_clusters. source /home/jacobson/software/setup.psi4; export PSI_SCRATCH=/scratch/jacobson/; export OMP_NUM_THREADS=1; export MPI_NUM_THREADS=1; echo psi4 scratch set to $PSI_SCRATCH; fname=C2c_I2T_ACETAC_1_57_selected_nbody_1_clusters; python /home/jacobson/bin/psi4_wb97xd3_def2tzvp.py $fname"".xyz"" > $fname"".log""; ```. one cpu is available for the job. I tracked the issue to qcengine/config.py which seems not to recognize my host and then set a default of 2 for jobs_per_node. Then ncores / jobs_per_node is zero and a KeyError is raised.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2548
https://github.com/psi4/psi4/issues/2548:1843,Modifiability,config,config,1843,"driver/driver.py"", line 716, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 2420, in run_scf_gradient; ref_wfn = run_scf(name, **kwargs); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 2325, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1543, in scf_helper; disp_energy = scf_wfn._disp_functor.compute_energy(scf_wfn.molecule(), scf_wfn); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/empirical_dispersion.py"", line 210, in compute_energy; jobrec = qcng.compute(; File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/qcengine/compute.py"", line 83, in compute; config = get_config(local_options=local_options); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/qcengine/config.py"", line 308, in get_config; raise KeyError(""Number of jobs per node exceeds the number of available cores.""); KeyError: 'Number of jobs per node exceeds the number of available cores.'. ```. This job is submitted on a SLURM cluster with the following script:; ```; #!/bin/bash. #SBATCH --partition=compute-16core-64gb-preemptible; #SBATCH --nodes=1; #SBATCH --ntasks-per-node=1; #SBATCH --output=C2c_I2T_ACETAC_1_57_selected_nbody_1_clusters.slurm.out; #SBATCH --job-name=test-C2c_I2T_ACETAC_1_57_selected_nbody_1_clusters. source /home/jacobson/software/setup.psi4; export PSI_SCRATCH=/scratch/jacobson/; export OMP_NUM_THREADS=1; export MPI_NUM_THREADS=1; echo psi4 scratch set to $PSI_SCRATCH; fname=C2c_I2T_ACETAC_1_57_selected_nbody_1_clusters; python /home/jacobson/bin/psi4_wb97xd3_def2tzvp.py $fname"".xyz"" > $fname"".log""; ```. one cpu is available for the job. I tracked the issue to qcengine/c",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2548
https://github.com/psi4/psi4/issues/2548:1970,Modifiability,config,config,1970,"](lowername, molecule=molecule, **kwargs); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 2420, in run_scf_gradient; ref_wfn = run_scf(name, **kwargs); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 2325, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1543, in scf_helper; disp_energy = scf_wfn._disp_functor.compute_energy(scf_wfn.molecule(), scf_wfn); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/empirical_dispersion.py"", line 210, in compute_energy; jobrec = qcng.compute(; File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/qcengine/compute.py"", line 83, in compute; config = get_config(local_options=local_options); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/qcengine/config.py"", line 308, in get_config; raise KeyError(""Number of jobs per node exceeds the number of available cores.""); KeyError: 'Number of jobs per node exceeds the number of available cores.'. ```. This job is submitted on a SLURM cluster with the following script:; ```; #!/bin/bash. #SBATCH --partition=compute-16core-64gb-preemptible; #SBATCH --nodes=1; #SBATCH --ntasks-per-node=1; #SBATCH --output=C2c_I2T_ACETAC_1_57_selected_nbody_1_clusters.slurm.out; #SBATCH --job-name=test-C2c_I2T_ACETAC_1_57_selected_nbody_1_clusters. source /home/jacobson/software/setup.psi4; export PSI_SCRATCH=/scratch/jacobson/; export OMP_NUM_THREADS=1; export MPI_NUM_THREADS=1; echo psi4 scratch set to $PSI_SCRATCH; fname=C2c_I2T_ACETAC_1_57_selected_nbody_1_clusters; python /home/jacobson/bin/psi4_wb97xd3_def2tzvp.py $fname"".xyz"" > $fname"".log""; ```. one cpu is available for the job. I tracked the issue to qcengine/config.py which seems not to recognize my host and then set a default of 2 for jo",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2548
https://github.com/psi4/psi4/issues/2548:2880,Modifiability,config,config,2880,"si4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 2420, in run_scf_gradient; ref_wfn = run_scf(name, **kwargs); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 2325, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1543, in scf_helper; disp_energy = scf_wfn._disp_functor.compute_energy(scf_wfn.molecule(), scf_wfn); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/empirical_dispersion.py"", line 210, in compute_energy; jobrec = qcng.compute(; File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/qcengine/compute.py"", line 83, in compute; config = get_config(local_options=local_options); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/qcengine/config.py"", line 308, in get_config; raise KeyError(""Number of jobs per node exceeds the number of available cores.""); KeyError: 'Number of jobs per node exceeds the number of available cores.'. ```. This job is submitted on a SLURM cluster with the following script:; ```; #!/bin/bash. #SBATCH --partition=compute-16core-64gb-preemptible; #SBATCH --nodes=1; #SBATCH --ntasks-per-node=1; #SBATCH --output=C2c_I2T_ACETAC_1_57_selected_nbody_1_clusters.slurm.out; #SBATCH --job-name=test-C2c_I2T_ACETAC_1_57_selected_nbody_1_clusters. source /home/jacobson/software/setup.psi4; export PSI_SCRATCH=/scratch/jacobson/; export OMP_NUM_THREADS=1; export MPI_NUM_THREADS=1; echo psi4 scratch set to $PSI_SCRATCH; fname=C2c_I2T_ACETAC_1_57_selected_nbody_1_clusters; python /home/jacobson/bin/psi4_wb97xd3_def2tzvp.py $fname"".xyz"" > $fname"".log""; ```. one cpu is available for the job. I tracked the issue to qcengine/config.py which seems not to recognize my host and then set a default of 2 for jobs_per_node. Then ncores / jobs_per_node is zero and a KeyError is raised.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2548
https://github.com/psi4/psi4/issues/2548:2451,Testability,test,test-,2451,"si4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 2420, in run_scf_gradient; ref_wfn = run_scf(name, **kwargs); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 2325, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1543, in scf_helper; disp_energy = scf_wfn._disp_functor.compute_energy(scf_wfn.molecule(), scf_wfn); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/empirical_dispersion.py"", line 210, in compute_energy; jobrec = qcng.compute(; File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/qcengine/compute.py"", line 83, in compute; config = get_config(local_options=local_options); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/qcengine/config.py"", line 308, in get_config; raise KeyError(""Number of jobs per node exceeds the number of available cores.""); KeyError: 'Number of jobs per node exceeds the number of available cores.'. ```. This job is submitted on a SLURM cluster with the following script:; ```; #!/bin/bash. #SBATCH --partition=compute-16core-64gb-preemptible; #SBATCH --nodes=1; #SBATCH --ntasks-per-node=1; #SBATCH --output=C2c_I2T_ACETAC_1_57_selected_nbody_1_clusters.slurm.out; #SBATCH --job-name=test-C2c_I2T_ACETAC_1_57_selected_nbody_1_clusters. source /home/jacobson/software/setup.psi4; export PSI_SCRATCH=/scratch/jacobson/; export OMP_NUM_THREADS=1; export MPI_NUM_THREADS=1; echo psi4 scratch set to $PSI_SCRATCH; fname=C2c_I2T_ACETAC_1_57_selected_nbody_1_clusters; python /home/jacobson/bin/psi4_wb97xd3_def2tzvp.py $fname"".xyz"" > $fname"".log""; ```. one cpu is available for the job. I tracked the issue to qcengine/config.py which seems not to recognize my host and then set a default of 2 for jobs_per_node. Then ncores / jobs_per_node is zero and a KeyError is raised.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2548
https://github.com/psi4/psi4/issues/2548:2803,Testability,log,log,2803,"si4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 2420, in run_scf_gradient; ref_wfn = run_scf(name, **kwargs); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 2325, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1543, in scf_helper; disp_energy = scf_wfn._disp_functor.compute_energy(scf_wfn.molecule(), scf_wfn); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/empirical_dispersion.py"", line 210, in compute_energy; jobrec = qcng.compute(; File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/qcengine/compute.py"", line 83, in compute; config = get_config(local_options=local_options); File ""/home/jacobson/software/psi4conda/lib/python3.8/site-packages/qcengine/config.py"", line 308, in get_config; raise KeyError(""Number of jobs per node exceeds the number of available cores.""); KeyError: 'Number of jobs per node exceeds the number of available cores.'. ```. This job is submitted on a SLURM cluster with the following script:; ```; #!/bin/bash. #SBATCH --partition=compute-16core-64gb-preemptible; #SBATCH --nodes=1; #SBATCH --ntasks-per-node=1; #SBATCH --output=C2c_I2T_ACETAC_1_57_selected_nbody_1_clusters.slurm.out; #SBATCH --job-name=test-C2c_I2T_ACETAC_1_57_selected_nbody_1_clusters. source /home/jacobson/software/setup.psi4; export PSI_SCRATCH=/scratch/jacobson/; export OMP_NUM_THREADS=1; export MPI_NUM_THREADS=1; echo psi4 scratch set to $PSI_SCRATCH; fname=C2c_I2T_ACETAC_1_57_selected_nbody_1_clusters; python /home/jacobson/bin/psi4_wb97xd3_def2tzvp.py $fname"".xyz"" > $fname"".log""; ```. one cpu is available for the job. I tracked the issue to qcengine/config.py which seems not to recognize my host and then set a default of 2 for jobs_per_node. Then ncores / jobs_per_node is zero and a KeyError is raised.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2548
https://github.com/psi4/psi4/pull/2549:442,Deployability,install,installed,442,"## Description; A few testing bugs and completing the pytest access route. Nothing controversial. Most of this PR is autogenerated. Due diligence on review can be achieved by examining:; * `empirical_dispersion.py`; * `addons.py`; * `extern1/input.dat`; * `tester.py`; * `test_addons.py`. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] fixed bug that wouldn't allow plain pytest of installed `psi4/` b/c would bring in incorrectly configured qcdb tests. workaround was to pytest `psi4/tests/`; - [x] add a couple corrections I had promised to #2536 but had forgotten to push; - [x] fixes #2548 by passing psi4's `-n` to qcng for dftd3/gcp/mp2d; - [x] corrects `dfmp2-freq2` ctest was registered as `dfmp2-freq1`; - [x] I realized externalpotentials weren't getting unset after a energy/grad/etc. command. This is probably a new bug after #2515 but didn't confirm. It's healed in DDD, but the solution didn't port, so I added the test and temporary workaround to extern1; - [x] Added feature to ctest_runner to allow directory structure to be copied into test scratch for psithon2. This is proven to work but needs a couple lines added to qcengine, so hidden for now.; - [x] Fixed resp addon tests that always failed in parallel. these write to fixed-name files that aren't configurable, so they need to be chdir'd, if not run serially.; - [x] Added a script tester.py that checks some config stuff and writes out missing `test_input.py`. See the goals there for details. Running it produces a list of flaws like the below. I'll post this to an issue for later attention. Someday this can be hooked up to GHA and replace the perl script.; ```; Complaints; ----------; - [ ] 1. cc5: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 2. cookbook/manual-sow-reap: missing cmake directory registration. `vi cookbook/CMakeLists.txt`; - [ ] 3. cookbook/manual-sow-reap: missing CMakeLists. `vi cookbook/manual-sow-reap/CMakeLists.txt",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2549
https://github.com/psi4/psi4/pull/2549:839,Energy Efficiency,energy,energy,839,"## Description; A few testing bugs and completing the pytest access route. Nothing controversial. Most of this PR is autogenerated. Due diligence on review can be achieved by examining:; * `empirical_dispersion.py`; * `addons.py`; * `extern1/input.dat`; * `tester.py`; * `test_addons.py`. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] fixed bug that wouldn't allow plain pytest of installed `psi4/` b/c would bring in incorrectly configured qcdb tests. workaround was to pytest `psi4/tests/`; - [x] add a couple corrections I had promised to #2536 but had forgotten to push; - [x] fixes #2548 by passing psi4's `-n` to qcng for dftd3/gcp/mp2d; - [x] corrects `dfmp2-freq2` ctest was registered as `dfmp2-freq1`; - [x] I realized externalpotentials weren't getting unset after a energy/grad/etc. command. This is probably a new bug after #2515 but didn't confirm. It's healed in DDD, but the solution didn't port, so I added the test and temporary workaround to extern1; - [x] Added feature to ctest_runner to allow directory structure to be copied into test scratch for psithon2. This is proven to work but needs a couple lines added to qcengine, so hidden for now.; - [x] Fixed resp addon tests that always failed in parallel. these write to fixed-name files that aren't configurable, so they need to be chdir'd, if not run serially.; - [x] Added a script tester.py that checks some config stuff and writes out missing `test_input.py`. See the goals there for details. Running it produces a list of flaws like the below. I'll post this to an issue for later attention. Someday this can be hooked up to GHA and replace the perl script.; ```; Complaints; ----------; - [ ] 1. cc5: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 2. cookbook/manual-sow-reap: missing cmake directory registration. `vi cookbook/CMakeLists.txt`; - [ ] 3. cookbook/manual-sow-reap: missing CMakeLists. `vi cookbook/manual-sow-reap/CMakeLists.txt",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2549
https://github.com/psi4/psi4/pull/2549:3261,Energy Efficiency,energy,energy-large,3261,"v2rdm_casscf/v2rdm7: mismatched marks ctest (opt;v2rdm) and pytest (opt). `vi v2rdm_casscf/v2rdm7/CMakeLists.txt v2rdm_casscf/v2rdm7/test_input.py`; - [ ] 74. x2c-perturb-h: mismatched directory (x2c-perturb-h) and ctest registration name (x2c-perturb_h). `vi x2c-perturb-h/CMakeLists.txt`; ```; - [x] Filled in the rest of the test_input's as generated from script. There's ~3 hidden, but otherwise, the full test suite can be run from pytest. On 20 cores, I get `0 failed, 3660 passed, 96 skipped, 272 xfailed, 4 xpassed, 312 warnings in 2011.32s (0:33:31)`. For interest, the culprits over 2 minutes are:; ```; =========================================================================================================== slowest 50 durations ============================================================================================================; 937.48s call tests/linK-2/test_input.py::test_linK_2; 875.59s call tests/snsmp2/cc-cc/test_input.py::test_snsmp2_cc_cc; 855.00s call tests/fd-freq-energy-large/test_input.py::test_fd_freq_energy_large; 569.12s call tests/density-screen-2/test_input.py::test_density_screen_2; 499.66s call tests/fsapt1/test_input.py::test_fsapt1; 242.29s call tests/snsmp2/cf-o/test_input.py::test_snsmp2_cf_o; 229.90s call tests/opt13/test_input.py::test_opt13; 221.20s call tests/sapt-exch-ind30-inf/test_input.py::test_sapt_exch_ind30_inf; 204.84s call tests/chemps2/caspt2-n2/test_input.py::test_chemps2_caspt2_n2; 197.04s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97M-V- - ]; 193.31s call tests/cbs-xtpl-func/test_input.py::test_cbs_xtpl_func; 189.76s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[LC-VV10- - ]; 183.86s call tests/isapt1/test_input.py::test_isapt1; 181.63s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97X-V- - ]; 174.31s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[B97M-V- - ]; 171.48s call tests/sapt4/test_input.py::test_sapt4; 169.47s call tests/test_dft_benchmark",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2549
https://github.com/psi4/psi4/pull/2549:68,Integrability,rout,route,68,"## Description; A few testing bugs and completing the pytest access route. Nothing controversial. Most of this PR is autogenerated. Due diligence on review can be achieved by examining:; * `empirical_dispersion.py`; * `addons.py`; * `extern1/input.dat`; * `tester.py`; * `test_addons.py`. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] fixed bug that wouldn't allow plain pytest of installed `psi4/` b/c would bring in incorrectly configured qcdb tests. workaround was to pytest `psi4/tests/`; - [x] add a couple corrections I had promised to #2536 but had forgotten to push; - [x] fixes #2548 by passing psi4's `-n` to qcng for dftd3/gcp/mp2d; - [x] corrects `dfmp2-freq2` ctest was registered as `dfmp2-freq1`; - [x] I realized externalpotentials weren't getting unset after a energy/grad/etc. command. This is probably a new bug after #2515 but didn't confirm. It's healed in DDD, but the solution didn't port, so I added the test and temporary workaround to extern1; - [x] Added feature to ctest_runner to allow directory structure to be copied into test scratch for psithon2. This is proven to work but needs a couple lines added to qcengine, so hidden for now.; - [x] Fixed resp addon tests that always failed in parallel. these write to fixed-name files that aren't configurable, so they need to be chdir'd, if not run serially.; - [x] Added a script tester.py that checks some config stuff and writes out missing `test_input.py`. See the goals there for details. Running it produces a list of flaws like the below. I'll post this to an issue for later attention. Someday this can be hooked up to GHA and replace the perl script.; ```; Complaints; ----------; - [ ] 1. cc5: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 2. cookbook/manual-sow-reap: missing cmake directory registration. `vi cookbook/CMakeLists.txt`; - [ ] 3. cookbook/manual-sow-reap: missing CMakeLists. `vi cookbook/manual-sow-reap/CMakeLists.txt",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2549
https://github.com/psi4/psi4/pull/2549:491,Modifiability,config,configured,491,"## Description; A few testing bugs and completing the pytest access route. Nothing controversial. Most of this PR is autogenerated. Due diligence on review can be achieved by examining:; * `empirical_dispersion.py`; * `addons.py`; * `extern1/input.dat`; * `tester.py`; * `test_addons.py`. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] fixed bug that wouldn't allow plain pytest of installed `psi4/` b/c would bring in incorrectly configured qcdb tests. workaround was to pytest `psi4/tests/`; - [x] add a couple corrections I had promised to #2536 but had forgotten to push; - [x] fixes #2548 by passing psi4's `-n` to qcng for dftd3/gcp/mp2d; - [x] corrects `dfmp2-freq2` ctest was registered as `dfmp2-freq1`; - [x] I realized externalpotentials weren't getting unset after a energy/grad/etc. command. This is probably a new bug after #2515 but didn't confirm. It's healed in DDD, but the solution didn't port, so I added the test and temporary workaround to extern1; - [x] Added feature to ctest_runner to allow directory structure to be copied into test scratch for psithon2. This is proven to work but needs a couple lines added to qcengine, so hidden for now.; - [x] Fixed resp addon tests that always failed in parallel. these write to fixed-name files that aren't configurable, so they need to be chdir'd, if not run serially.; - [x] Added a script tester.py that checks some config stuff and writes out missing `test_input.py`. See the goals there for details. Running it produces a list of flaws like the below. I'll post this to an issue for later attention. Someday this can be hooked up to GHA and replace the perl script.; ```; Complaints; ----------; - [ ] 1. cc5: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 2. cookbook/manual-sow-reap: missing cmake directory registration. `vi cookbook/CMakeLists.txt`; - [ ] 3. cookbook/manual-sow-reap: missing CMakeLists. `vi cookbook/manual-sow-reap/CMakeLists.txt",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2549
https://github.com/psi4/psi4/pull/2549:1333,Modifiability,config,configurable,1333,"erest) that this PR has or will accomplish. -->; - [x] fixed bug that wouldn't allow plain pytest of installed `psi4/` b/c would bring in incorrectly configured qcdb tests. workaround was to pytest `psi4/tests/`; - [x] add a couple corrections I had promised to #2536 but had forgotten to push; - [x] fixes #2548 by passing psi4's `-n` to qcng for dftd3/gcp/mp2d; - [x] corrects `dfmp2-freq2` ctest was registered as `dfmp2-freq1`; - [x] I realized externalpotentials weren't getting unset after a energy/grad/etc. command. This is probably a new bug after #2515 but didn't confirm. It's healed in DDD, but the solution didn't port, so I added the test and temporary workaround to extern1; - [x] Added feature to ctest_runner to allow directory structure to be copied into test scratch for psithon2. This is proven to work but needs a couple lines added to qcengine, so hidden for now.; - [x] Fixed resp addon tests that always failed in parallel. these write to fixed-name files that aren't configurable, so they need to be chdir'd, if not run serially.; - [x] Added a script tester.py that checks some config stuff and writes out missing `test_input.py`. See the goals there for details. Running it produces a list of flaws like the below. I'll post this to an issue for later attention. Someday this can be hooked up to GHA and replace the perl script.; ```; Complaints; ----------; - [ ] 1. cc5: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 2. cookbook/manual-sow-reap: missing cmake directory registration. `vi cookbook/CMakeLists.txt`; - [ ] 3. cookbook/manual-sow-reap: missing CMakeLists. `vi cookbook/manual-sow-reap/CMakeLists.txt`; - [ ] 4. dfmp2-freq1: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 5. dfmp2-freq2: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 6. dfomp2p5-1: missing ctest registration. `vi dfomp2p5-1/CMakeLists.txt` ...; - [ ] 73. v2rdm_casscf/v2rdm7: mismatched marks ctest (opt;v2rdm) and pytest (opt). `vi v2r",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2549
https://github.com/psi4/psi4/pull/2549:1445,Modifiability,config,config,1445," b/c would bring in incorrectly configured qcdb tests. workaround was to pytest `psi4/tests/`; - [x] add a couple corrections I had promised to #2536 but had forgotten to push; - [x] fixes #2548 by passing psi4's `-n` to qcng for dftd3/gcp/mp2d; - [x] corrects `dfmp2-freq2` ctest was registered as `dfmp2-freq1`; - [x] I realized externalpotentials weren't getting unset after a energy/grad/etc. command. This is probably a new bug after #2515 but didn't confirm. It's healed in DDD, but the solution didn't port, so I added the test and temporary workaround to extern1; - [x] Added feature to ctest_runner to allow directory structure to be copied into test scratch for psithon2. This is proven to work but needs a couple lines added to qcengine, so hidden for now.; - [x] Fixed resp addon tests that always failed in parallel. these write to fixed-name files that aren't configurable, so they need to be chdir'd, if not run serially.; - [x] Added a script tester.py that checks some config stuff and writes out missing `test_input.py`. See the goals there for details. Running it produces a list of flaws like the below. I'll post this to an issue for later attention. Someday this can be hooked up to GHA and replace the perl script.; ```; Complaints; ----------; - [ ] 1. cc5: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 2. cookbook/manual-sow-reap: missing cmake directory registration. `vi cookbook/CMakeLists.txt`; - [ ] 3. cookbook/manual-sow-reap: missing CMakeLists. `vi cookbook/manual-sow-reap/CMakeLists.txt`; - [ ] 4. dfmp2-freq1: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 5. dfmp2-freq2: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 6. dfomp2p5-1: missing ctest registration. `vi dfomp2p5-1/CMakeLists.txt` ...; - [ ] 73. v2rdm_casscf/v2rdm7: mismatched marks ctest (opt;v2rdm) and pytest (opt). `vi v2rdm_casscf/v2rdm7/CMakeLists.txt v2rdm_casscf/v2rdm7/test_input.py`; - [ ] 74. x2c-perturb-h: mismatched directory (x2",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2549
https://github.com/psi4/psi4/pull/2549:61,Security,access,access,61,"## Description; A few testing bugs and completing the pytest access route. Nothing controversial. Most of this PR is autogenerated. Due diligence on review can be achieved by examining:; * `empirical_dispersion.py`; * `addons.py`; * `extern1/input.dat`; * `tester.py`; * `test_addons.py`. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] fixed bug that wouldn't allow plain pytest of installed `psi4/` b/c would bring in incorrectly configured qcdb tests. workaround was to pytest `psi4/tests/`; - [x] add a couple corrections I had promised to #2536 but had forgotten to push; - [x] fixes #2548 by passing psi4's `-n` to qcng for dftd3/gcp/mp2d; - [x] corrects `dfmp2-freq2` ctest was registered as `dfmp2-freq1`; - [x] I realized externalpotentials weren't getting unset after a energy/grad/etc. command. This is probably a new bug after #2515 but didn't confirm. It's healed in DDD, but the solution didn't port, so I added the test and temporary workaround to extern1; - [x] Added feature to ctest_runner to allow directory structure to be copied into test scratch for psithon2. This is proven to work but needs a couple lines added to qcengine, so hidden for now.; - [x] Fixed resp addon tests that always failed in parallel. these write to fixed-name files that aren't configurable, so they need to be chdir'd, if not run serially.; - [x] Added a script tester.py that checks some config stuff and writes out missing `test_input.py`. See the goals there for details. Running it produces a list of flaws like the below. I'll post this to an issue for later attention. Someday this can be hooked up to GHA and replace the perl script.; ```; Complaints; ----------; - [ ] 1. cc5: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 2. cookbook/manual-sow-reap: missing cmake directory registration. `vi cookbook/CMakeLists.txt`; - [ ] 3. cookbook/manual-sow-reap: missing CMakeLists. `vi cookbook/manual-sow-reap/CMakeLists.txt",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2549
https://github.com/psi4/psi4/pull/2549:22,Testability,test,testing,22,"## Description; A few testing bugs and completing the pytest access route. Nothing controversial. Most of this PR is autogenerated. Due diligence on review can be achieved by examining:; * `empirical_dispersion.py`; * `addons.py`; * `extern1/input.dat`; * `tester.py`; * `test_addons.py`. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] fixed bug that wouldn't allow plain pytest of installed `psi4/` b/c would bring in incorrectly configured qcdb tests. workaround was to pytest `psi4/tests/`; - [x] add a couple corrections I had promised to #2536 but had forgotten to push; - [x] fixes #2548 by passing psi4's `-n` to qcng for dftd3/gcp/mp2d; - [x] corrects `dfmp2-freq2` ctest was registered as `dfmp2-freq1`; - [x] I realized externalpotentials weren't getting unset after a energy/grad/etc. command. This is probably a new bug after #2515 but didn't confirm. It's healed in DDD, but the solution didn't port, so I added the test and temporary workaround to extern1; - [x] Added feature to ctest_runner to allow directory structure to be copied into test scratch for psithon2. This is proven to work but needs a couple lines added to qcengine, so hidden for now.; - [x] Fixed resp addon tests that always failed in parallel. these write to fixed-name files that aren't configurable, so they need to be chdir'd, if not run serially.; - [x] Added a script tester.py that checks some config stuff and writes out missing `test_input.py`. See the goals there for details. Running it produces a list of flaws like the below. I'll post this to an issue for later attention. Someday this can be hooked up to GHA and replace the perl script.; ```; Complaints; ----------; - [ ] 1. cc5: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 2. cookbook/manual-sow-reap: missing cmake directory registration. `vi cookbook/CMakeLists.txt`; - [ ] 3. cookbook/manual-sow-reap: missing CMakeLists. `vi cookbook/manual-sow-reap/CMakeLists.txt",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2549
https://github.com/psi4/psi4/pull/2549:257,Testability,test,tester,257,"## Description; A few testing bugs and completing the pytest access route. Nothing controversial. Most of this PR is autogenerated. Due diligence on review can be achieved by examining:; * `empirical_dispersion.py`; * `addons.py`; * `extern1/input.dat`; * `tester.py`; * `test_addons.py`. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] fixed bug that wouldn't allow plain pytest of installed `psi4/` b/c would bring in incorrectly configured qcdb tests. workaround was to pytest `psi4/tests/`; - [x] add a couple corrections I had promised to #2536 but had forgotten to push; - [x] fixes #2548 by passing psi4's `-n` to qcng for dftd3/gcp/mp2d; - [x] corrects `dfmp2-freq2` ctest was registered as `dfmp2-freq1`; - [x] I realized externalpotentials weren't getting unset after a energy/grad/etc. command. This is probably a new bug after #2515 but didn't confirm. It's healed in DDD, but the solution didn't port, so I added the test and temporary workaround to extern1; - [x] Added feature to ctest_runner to allow directory structure to be copied into test scratch for psithon2. This is proven to work but needs a couple lines added to qcengine, so hidden for now.; - [x] Fixed resp addon tests that always failed in parallel. these write to fixed-name files that aren't configurable, so they need to be chdir'd, if not run serially.; - [x] Added a script tester.py that checks some config stuff and writes out missing `test_input.py`. See the goals there for details. Running it produces a list of flaws like the below. I'll post this to an issue for later attention. Someday this can be hooked up to GHA and replace the perl script.; ```; Complaints; ----------; - [ ] 1. cc5: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 2. cookbook/manual-sow-reap: missing cmake directory registration. `vi cookbook/CMakeLists.txt`; - [ ] 3. cookbook/manual-sow-reap: missing CMakeLists. `vi cookbook/manual-sow-reap/CMakeLists.txt",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2549
https://github.com/psi4/psi4/pull/2549:507,Testability,test,tests,507,"## Description; A few testing bugs and completing the pytest access route. Nothing controversial. Most of this PR is autogenerated. Due diligence on review can be achieved by examining:; * `empirical_dispersion.py`; * `addons.py`; * `extern1/input.dat`; * `tester.py`; * `test_addons.py`. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] fixed bug that wouldn't allow plain pytest of installed `psi4/` b/c would bring in incorrectly configured qcdb tests. workaround was to pytest `psi4/tests/`; - [x] add a couple corrections I had promised to #2536 but had forgotten to push; - [x] fixes #2548 by passing psi4's `-n` to qcng for dftd3/gcp/mp2d; - [x] corrects `dfmp2-freq2` ctest was registered as `dfmp2-freq1`; - [x] I realized externalpotentials weren't getting unset after a energy/grad/etc. command. This is probably a new bug after #2515 but didn't confirm. It's healed in DDD, but the solution didn't port, so I added the test and temporary workaround to extern1; - [x] Added feature to ctest_runner to allow directory structure to be copied into test scratch for psithon2. This is proven to work but needs a couple lines added to qcengine, so hidden for now.; - [x] Fixed resp addon tests that always failed in parallel. these write to fixed-name files that aren't configurable, so they need to be chdir'd, if not run serially.; - [x] Added a script tester.py that checks some config stuff and writes out missing `test_input.py`. See the goals there for details. Running it produces a list of flaws like the below. I'll post this to an issue for later attention. Someday this can be hooked up to GHA and replace the perl script.; ```; Complaints; ----------; - [ ] 1. cc5: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 2. cookbook/manual-sow-reap: missing cmake directory registration. `vi cookbook/CMakeLists.txt`; - [ ] 3. cookbook/manual-sow-reap: missing CMakeLists. `vi cookbook/manual-sow-reap/CMakeLists.txt",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2549
https://github.com/psi4/psi4/pull/2549:545,Testability,test,tests,545,"## Description; A few testing bugs and completing the pytest access route. Nothing controversial. Most of this PR is autogenerated. Due diligence on review can be achieved by examining:; * `empirical_dispersion.py`; * `addons.py`; * `extern1/input.dat`; * `tester.py`; * `test_addons.py`. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] fixed bug that wouldn't allow plain pytest of installed `psi4/` b/c would bring in incorrectly configured qcdb tests. workaround was to pytest `psi4/tests/`; - [x] add a couple corrections I had promised to #2536 but had forgotten to push; - [x] fixes #2548 by passing psi4's `-n` to qcng for dftd3/gcp/mp2d; - [x] corrects `dfmp2-freq2` ctest was registered as `dfmp2-freq1`; - [x] I realized externalpotentials weren't getting unset after a energy/grad/etc. command. This is probably a new bug after #2515 but didn't confirm. It's healed in DDD, but the solution didn't port, so I added the test and temporary workaround to extern1; - [x] Added feature to ctest_runner to allow directory structure to be copied into test scratch for psithon2. This is proven to work but needs a couple lines added to qcengine, so hidden for now.; - [x] Fixed resp addon tests that always failed in parallel. these write to fixed-name files that aren't configurable, so they need to be chdir'd, if not run serially.; - [x] Added a script tester.py that checks some config stuff and writes out missing `test_input.py`. See the goals there for details. Running it produces a list of flaws like the below. I'll post this to an issue for later attention. Someday this can be hooked up to GHA and replace the perl script.; ```; Complaints; ----------; - [ ] 1. cc5: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 2. cookbook/manual-sow-reap: missing cmake directory registration. `vi cookbook/CMakeLists.txt`; - [ ] 3. cookbook/manual-sow-reap: missing CMakeLists. `vi cookbook/manual-sow-reap/CMakeLists.txt",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2549
https://github.com/psi4/psi4/pull/2549:989,Testability,test,test,989,"ugs and completing the pytest access route. Nothing controversial. Most of this PR is autogenerated. Due diligence on review can be achieved by examining:; * `empirical_dispersion.py`; * `addons.py`; * `extern1/input.dat`; * `tester.py`; * `test_addons.py`. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] fixed bug that wouldn't allow plain pytest of installed `psi4/` b/c would bring in incorrectly configured qcdb tests. workaround was to pytest `psi4/tests/`; - [x] add a couple corrections I had promised to #2536 but had forgotten to push; - [x] fixes #2548 by passing psi4's `-n` to qcng for dftd3/gcp/mp2d; - [x] corrects `dfmp2-freq2` ctest was registered as `dfmp2-freq1`; - [x] I realized externalpotentials weren't getting unset after a energy/grad/etc. command. This is probably a new bug after #2515 but didn't confirm. It's healed in DDD, but the solution didn't port, so I added the test and temporary workaround to extern1; - [x] Added feature to ctest_runner to allow directory structure to be copied into test scratch for psithon2. This is proven to work but needs a couple lines added to qcengine, so hidden for now.; - [x] Fixed resp addon tests that always failed in parallel. these write to fixed-name files that aren't configurable, so they need to be chdir'd, if not run serially.; - [x] Added a script tester.py that checks some config stuff and writes out missing `test_input.py`. See the goals there for details. Running it produces a list of flaws like the below. I'll post this to an issue for later attention. Someday this can be hooked up to GHA and replace the perl script.; ```; Complaints; ----------; - [ ] 1. cc5: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 2. cookbook/manual-sow-reap: missing cmake directory registration. `vi cookbook/CMakeLists.txt`; - [ ] 3. cookbook/manual-sow-reap: missing CMakeLists. `vi cookbook/manual-sow-reap/CMakeLists.txt`; - [ ] 4. dfmp2-freq1: missin",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2549
https://github.com/psi4/psi4/pull/2549:1114,Testability,test,test,1114,"ugs and completing the pytest access route. Nothing controversial. Most of this PR is autogenerated. Due diligence on review can be achieved by examining:; * `empirical_dispersion.py`; * `addons.py`; * `extern1/input.dat`; * `tester.py`; * `test_addons.py`. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] fixed bug that wouldn't allow plain pytest of installed `psi4/` b/c would bring in incorrectly configured qcdb tests. workaround was to pytest `psi4/tests/`; - [x] add a couple corrections I had promised to #2536 but had forgotten to push; - [x] fixes #2548 by passing psi4's `-n` to qcng for dftd3/gcp/mp2d; - [x] corrects `dfmp2-freq2` ctest was registered as `dfmp2-freq1`; - [x] I realized externalpotentials weren't getting unset after a energy/grad/etc. command. This is probably a new bug after #2515 but didn't confirm. It's healed in DDD, but the solution didn't port, so I added the test and temporary workaround to extern1; - [x] Added feature to ctest_runner to allow directory structure to be copied into test scratch for psithon2. This is proven to work but needs a couple lines added to qcengine, so hidden for now.; - [x] Fixed resp addon tests that always failed in parallel. these write to fixed-name files that aren't configurable, so they need to be chdir'd, if not run serially.; - [x] Added a script tester.py that checks some config stuff and writes out missing `test_input.py`. See the goals there for details. Running it produces a list of flaws like the below. I'll post this to an issue for later attention. Someday this can be hooked up to GHA and replace the perl script.; ```; Complaints; ----------; - [ ] 1. cc5: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 2. cookbook/manual-sow-reap: missing cmake directory registration. `vi cookbook/CMakeLists.txt`; - [ ] 3. cookbook/manual-sow-reap: missing CMakeLists. `vi cookbook/manual-sow-reap/CMakeLists.txt`; - [ ] 4. dfmp2-freq1: missin",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2549
https://github.com/psi4/psi4/pull/2549:1251,Testability,test,tests,1251,"tester.py`; * `test_addons.py`. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] fixed bug that wouldn't allow plain pytest of installed `psi4/` b/c would bring in incorrectly configured qcdb tests. workaround was to pytest `psi4/tests/`; - [x] add a couple corrections I had promised to #2536 but had forgotten to push; - [x] fixes #2548 by passing psi4's `-n` to qcng for dftd3/gcp/mp2d; - [x] corrects `dfmp2-freq2` ctest was registered as `dfmp2-freq1`; - [x] I realized externalpotentials weren't getting unset after a energy/grad/etc. command. This is probably a new bug after #2515 but didn't confirm. It's healed in DDD, but the solution didn't port, so I added the test and temporary workaround to extern1; - [x] Added feature to ctest_runner to allow directory structure to be copied into test scratch for psithon2. This is proven to work but needs a couple lines added to qcengine, so hidden for now.; - [x] Fixed resp addon tests that always failed in parallel. these write to fixed-name files that aren't configurable, so they need to be chdir'd, if not run serially.; - [x] Added a script tester.py that checks some config stuff and writes out missing `test_input.py`. See the goals there for details. Running it produces a list of flaws like the below. I'll post this to an issue for later attention. Someday this can be hooked up to GHA and replace the perl script.; ```; Complaints; ----------; - [ ] 1. cc5: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 2. cookbook/manual-sow-reap: missing cmake directory registration. `vi cookbook/CMakeLists.txt`; - [ ] 3. cookbook/manual-sow-reap: missing CMakeLists. `vi cookbook/manual-sow-reap/CMakeLists.txt`; - [ ] 4. dfmp2-freq1: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 5. dfmp2-freq2: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 6. dfomp2p5-1: missing ctest registration. `vi dfomp2p5-1/CMakeLists.txt` ...; - [ ] ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2549
https://github.com/psi4/psi4/pull/2549:1418,Testability,test,tester,1418," wouldn't allow plain pytest of installed `psi4/` b/c would bring in incorrectly configured qcdb tests. workaround was to pytest `psi4/tests/`; - [x] add a couple corrections I had promised to #2536 but had forgotten to push; - [x] fixes #2548 by passing psi4's `-n` to qcng for dftd3/gcp/mp2d; - [x] corrects `dfmp2-freq2` ctest was registered as `dfmp2-freq1`; - [x] I realized externalpotentials weren't getting unset after a energy/grad/etc. command. This is probably a new bug after #2515 but didn't confirm. It's healed in DDD, but the solution didn't port, so I added the test and temporary workaround to extern1; - [x] Added feature to ctest_runner to allow directory structure to be copied into test scratch for psithon2. This is proven to work but needs a couple lines added to qcengine, so hidden for now.; - [x] Fixed resp addon tests that always failed in parallel. these write to fixed-name files that aren't configurable, so they need to be chdir'd, if not run serially.; - [x] Added a script tester.py that checks some config stuff and writes out missing `test_input.py`. See the goals there for details. Running it produces a list of flaws like the below. I'll post this to an issue for later attention. Someday this can be hooked up to GHA and replace the perl script.; ```; Complaints; ----------; - [ ] 1. cc5: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 2. cookbook/manual-sow-reap: missing cmake directory registration. `vi cookbook/CMakeLists.txt`; - [ ] 3. cookbook/manual-sow-reap: missing CMakeLists. `vi cookbook/manual-sow-reap/CMakeLists.txt`; - [ ] 4. dfmp2-freq1: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 5. dfmp2-freq2: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 6. dfomp2p5-1: missing ctest registration. `vi dfomp2p5-1/CMakeLists.txt` ...; - [ ] 73. v2rdm_casscf/v2rdm7: mismatched marks ctest (opt;v2rdm) and pytest (opt). `vi v2rdm_casscf/v2rdm7/CMakeLists.txt v2rdm_casscf/v2rdm7/test_input.py`; ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2549
https://github.com/psi4/psi4/pull/2549:2671,Testability,test,test,2671,"A and replace the perl script.; ```; Complaints; ----------; - [ ] 1. cc5: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 2. cookbook/manual-sow-reap: missing cmake directory registration. `vi cookbook/CMakeLists.txt`; - [ ] 3. cookbook/manual-sow-reap: missing CMakeLists. `vi cookbook/manual-sow-reap/CMakeLists.txt`; - [ ] 4. dfmp2-freq1: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 5. dfmp2-freq2: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 6. dfomp2p5-1: missing ctest registration. `vi dfomp2p5-1/CMakeLists.txt` ...; - [ ] 73. v2rdm_casscf/v2rdm7: mismatched marks ctest (opt;v2rdm) and pytest (opt). `vi v2rdm_casscf/v2rdm7/CMakeLists.txt v2rdm_casscf/v2rdm7/test_input.py`; - [ ] 74. x2c-perturb-h: mismatched directory (x2c-perturb-h) and ctest registration name (x2c-perturb_h). `vi x2c-perturb-h/CMakeLists.txt`; ```; - [x] Filled in the rest of the test_input's as generated from script. There's ~3 hidden, but otherwise, the full test suite can be run from pytest. On 20 cores, I get `0 failed, 3660 passed, 96 skipped, 272 xfailed, 4 xpassed, 312 warnings in 2011.32s (0:33:31)`. For interest, the culprits over 2 minutes are:; ```; =========================================================================================================== slowest 50 durations ============================================================================================================; 937.48s call tests/linK-2/test_input.py::test_linK_2; 875.59s call tests/snsmp2/cc-cc/test_input.py::test_snsmp2_cc_cc; 855.00s call tests/fd-freq-energy-large/test_input.py::test_fd_freq_energy_large; 569.12s call tests/density-screen-2/test_input.py::test_density_screen_2; 499.66s call tests/fsapt1/test_input.py::test_fsapt1; 242.29s call tests/snsmp2/cf-o/test_input.py::test_snsmp2_cf_o; 229.90s call tests/opt13/test_input.py::test_opt13; 221.20s call tests/sapt-exch-ind30-inf/test_input.py::test_sapt_exch_ind30_inf; 204.84s call tests/chemps2",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2549
https://github.com/psi4/psi4/pull/2549:3127,Testability,test,tests,3127,"istration. `vi CMakeLists.txt`; - [ ] 6. dfomp2p5-1: missing ctest registration. `vi dfomp2p5-1/CMakeLists.txt` ...; - [ ] 73. v2rdm_casscf/v2rdm7: mismatched marks ctest (opt;v2rdm) and pytest (opt). `vi v2rdm_casscf/v2rdm7/CMakeLists.txt v2rdm_casscf/v2rdm7/test_input.py`; - [ ] 74. x2c-perturb-h: mismatched directory (x2c-perturb-h) and ctest registration name (x2c-perturb_h). `vi x2c-perturb-h/CMakeLists.txt`; ```; - [x] Filled in the rest of the test_input's as generated from script. There's ~3 hidden, but otherwise, the full test suite can be run from pytest. On 20 cores, I get `0 failed, 3660 passed, 96 skipped, 272 xfailed, 4 xpassed, 312 warnings in 2011.32s (0:33:31)`. For interest, the culprits over 2 minutes are:; ```; =========================================================================================================== slowest 50 durations ============================================================================================================; 937.48s call tests/linK-2/test_input.py::test_linK_2; 875.59s call tests/snsmp2/cc-cc/test_input.py::test_snsmp2_cc_cc; 855.00s call tests/fd-freq-energy-large/test_input.py::test_fd_freq_energy_large; 569.12s call tests/density-screen-2/test_input.py::test_density_screen_2; 499.66s call tests/fsapt1/test_input.py::test_fsapt1; 242.29s call tests/snsmp2/cf-o/test_input.py::test_snsmp2_cf_o; 229.90s call tests/opt13/test_input.py::test_opt13; 221.20s call tests/sapt-exch-ind30-inf/test_input.py::test_sapt_exch_ind30_inf; 204.84s call tests/chemps2/caspt2-n2/test_input.py::test_chemps2_caspt2_n2; 197.04s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97M-V- - ]; 193.31s call tests/cbs-xtpl-func/test_input.py::test_cbs_xtpl_func; 189.76s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[LC-VV10- - ]; 183.86s call tests/isapt1/test_input.py::test_isapt1; 181.63s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97X-V- - ]; 174.31s call tests/test_dft_benchmarks.py::te",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2549
https://github.com/psi4/psi4/pull/2549:3181,Testability,test,tests,3181,"ing ctest registration. `vi dfomp2p5-1/CMakeLists.txt` ...; - [ ] 73. v2rdm_casscf/v2rdm7: mismatched marks ctest (opt;v2rdm) and pytest (opt). `vi v2rdm_casscf/v2rdm7/CMakeLists.txt v2rdm_casscf/v2rdm7/test_input.py`; - [ ] 74. x2c-perturb-h: mismatched directory (x2c-perturb-h) and ctest registration name (x2c-perturb_h). `vi x2c-perturb-h/CMakeLists.txt`; ```; - [x] Filled in the rest of the test_input's as generated from script. There's ~3 hidden, but otherwise, the full test suite can be run from pytest. On 20 cores, I get `0 failed, 3660 passed, 96 skipped, 272 xfailed, 4 xpassed, 312 warnings in 2011.32s (0:33:31)`. For interest, the culprits over 2 minutes are:; ```; =========================================================================================================== slowest 50 durations ============================================================================================================; 937.48s call tests/linK-2/test_input.py::test_linK_2; 875.59s call tests/snsmp2/cc-cc/test_input.py::test_snsmp2_cc_cc; 855.00s call tests/fd-freq-energy-large/test_input.py::test_fd_freq_energy_large; 569.12s call tests/density-screen-2/test_input.py::test_density_screen_2; 499.66s call tests/fsapt1/test_input.py::test_fsapt1; 242.29s call tests/snsmp2/cf-o/test_input.py::test_snsmp2_cf_o; 229.90s call tests/opt13/test_input.py::test_opt13; 221.20s call tests/sapt-exch-ind30-inf/test_input.py::test_sapt_exch_ind30_inf; 204.84s call tests/chemps2/caspt2-n2/test_input.py::test_chemps2_caspt2_n2; 197.04s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97M-V- - ]; 193.31s call tests/cbs-xtpl-func/test_input.py::test_cbs_xtpl_func; 189.76s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[LC-VV10- - ]; 183.86s call tests/isapt1/test_input.py::test_isapt1; 181.63s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97X-V- - ]; 174.31s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[B97M-V- - ]; 171.48s call tests/",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2549
https://github.com/psi4/psi4/pull/2549:3247,Testability,test,tests,3247,"v2rdm_casscf/v2rdm7: mismatched marks ctest (opt;v2rdm) and pytest (opt). `vi v2rdm_casscf/v2rdm7/CMakeLists.txt v2rdm_casscf/v2rdm7/test_input.py`; - [ ] 74. x2c-perturb-h: mismatched directory (x2c-perturb-h) and ctest registration name (x2c-perturb_h). `vi x2c-perturb-h/CMakeLists.txt`; ```; - [x] Filled in the rest of the test_input's as generated from script. There's ~3 hidden, but otherwise, the full test suite can be run from pytest. On 20 cores, I get `0 failed, 3660 passed, 96 skipped, 272 xfailed, 4 xpassed, 312 warnings in 2011.32s (0:33:31)`. For interest, the culprits over 2 minutes are:; ```; =========================================================================================================== slowest 50 durations ============================================================================================================; 937.48s call tests/linK-2/test_input.py::test_linK_2; 875.59s call tests/snsmp2/cc-cc/test_input.py::test_snsmp2_cc_cc; 855.00s call tests/fd-freq-energy-large/test_input.py::test_fd_freq_energy_large; 569.12s call tests/density-screen-2/test_input.py::test_density_screen_2; 499.66s call tests/fsapt1/test_input.py::test_fsapt1; 242.29s call tests/snsmp2/cf-o/test_input.py::test_snsmp2_cf_o; 229.90s call tests/opt13/test_input.py::test_opt13; 221.20s call tests/sapt-exch-ind30-inf/test_input.py::test_sapt_exch_ind30_inf; 204.84s call tests/chemps2/caspt2-n2/test_input.py::test_chemps2_caspt2_n2; 197.04s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97M-V- - ]; 193.31s call tests/cbs-xtpl-func/test_input.py::test_cbs_xtpl_func; 189.76s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[LC-VV10- - ]; 183.86s call tests/isapt1/test_input.py::test_isapt1; 181.63s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97X-V- - ]; 174.31s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[B97M-V- - ]; 171.48s call tests/sapt4/test_input.py::test_sapt4; 169.47s call tests/test_dft_benchmark",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2549
https://github.com/psi4/psi4/pull/2549:3329,Testability,test,tests,3329,"rdm_casscf/v2rdm7/CMakeLists.txt v2rdm_casscf/v2rdm7/test_input.py`; - [ ] 74. x2c-perturb-h: mismatched directory (x2c-perturb-h) and ctest registration name (x2c-perturb_h). `vi x2c-perturb-h/CMakeLists.txt`; ```; - [x] Filled in the rest of the test_input's as generated from script. There's ~3 hidden, but otherwise, the full test suite can be run from pytest. On 20 cores, I get `0 failed, 3660 passed, 96 skipped, 272 xfailed, 4 xpassed, 312 warnings in 2011.32s (0:33:31)`. For interest, the culprits over 2 minutes are:; ```; =========================================================================================================== slowest 50 durations ============================================================================================================; 937.48s call tests/linK-2/test_input.py::test_linK_2; 875.59s call tests/snsmp2/cc-cc/test_input.py::test_snsmp2_cc_cc; 855.00s call tests/fd-freq-energy-large/test_input.py::test_fd_freq_energy_large; 569.12s call tests/density-screen-2/test_input.py::test_density_screen_2; 499.66s call tests/fsapt1/test_input.py::test_fsapt1; 242.29s call tests/snsmp2/cf-o/test_input.py::test_snsmp2_cf_o; 229.90s call tests/opt13/test_input.py::test_opt13; 221.20s call tests/sapt-exch-ind30-inf/test_input.py::test_sapt_exch_ind30_inf; 204.84s call tests/chemps2/caspt2-n2/test_input.py::test_chemps2_caspt2_n2; 197.04s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97M-V- - ]; 193.31s call tests/cbs-xtpl-func/test_input.py::test_cbs_xtpl_func; 189.76s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[LC-VV10- - ]; 183.86s call tests/isapt1/test_input.py::test_isapt1; 181.63s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97X-V- - ]; 174.31s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[B97M-V- - ]; 171.48s call tests/sapt4/test_input.py::test_sapt4; 169.47s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[VV10- - ]; 160.20s call tests/fd-freq-gradient-",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2549
https://github.com/psi4/psi4/pull/2549:3403,Testability,test,tests,3403,"- [ ] 74. x2c-perturb-h: mismatched directory (x2c-perturb-h) and ctest registration name (x2c-perturb_h). `vi x2c-perturb-h/CMakeLists.txt`; ```; - [x] Filled in the rest of the test_input's as generated from script. There's ~3 hidden, but otherwise, the full test suite can be run from pytest. On 20 cores, I get `0 failed, 3660 passed, 96 skipped, 272 xfailed, 4 xpassed, 312 warnings in 2011.32s (0:33:31)`. For interest, the culprits over 2 minutes are:; ```; =========================================================================================================== slowest 50 durations ============================================================================================================; 937.48s call tests/linK-2/test_input.py::test_linK_2; 875.59s call tests/snsmp2/cc-cc/test_input.py::test_snsmp2_cc_cc; 855.00s call tests/fd-freq-energy-large/test_input.py::test_fd_freq_energy_large; 569.12s call tests/density-screen-2/test_input.py::test_density_screen_2; 499.66s call tests/fsapt1/test_input.py::test_fsapt1; 242.29s call tests/snsmp2/cf-o/test_input.py::test_snsmp2_cf_o; 229.90s call tests/opt13/test_input.py::test_opt13; 221.20s call tests/sapt-exch-ind30-inf/test_input.py::test_sapt_exch_ind30_inf; 204.84s call tests/chemps2/caspt2-n2/test_input.py::test_chemps2_caspt2_n2; 197.04s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97M-V- - ]; 193.31s call tests/cbs-xtpl-func/test_input.py::test_cbs_xtpl_func; 189.76s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[LC-VV10- - ]; 183.86s call tests/isapt1/test_input.py::test_isapt1; 181.63s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97X-V- - ]; 174.31s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[B97M-V- - ]; 171.48s call tests/sapt4/test_input.py::test_sapt4; 169.47s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[VV10- - ]; 160.20s call tests/fd-freq-gradient-large/test_input.py::test_fd_freq_gradient_large; 157.12s call tests/",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2549
https://github.com/psi4/psi4/pull/2549:3457,Testability,test,tests,3457,"b-h) and ctest registration name (x2c-perturb_h). `vi x2c-perturb-h/CMakeLists.txt`; ```; - [x] Filled in the rest of the test_input's as generated from script. There's ~3 hidden, but otherwise, the full test suite can be run from pytest. On 20 cores, I get `0 failed, 3660 passed, 96 skipped, 272 xfailed, 4 xpassed, 312 warnings in 2011.32s (0:33:31)`. For interest, the culprits over 2 minutes are:; ```; =========================================================================================================== slowest 50 durations ============================================================================================================; 937.48s call tests/linK-2/test_input.py::test_linK_2; 875.59s call tests/snsmp2/cc-cc/test_input.py::test_snsmp2_cc_cc; 855.00s call tests/fd-freq-energy-large/test_input.py::test_fd_freq_energy_large; 569.12s call tests/density-screen-2/test_input.py::test_density_screen_2; 499.66s call tests/fsapt1/test_input.py::test_fsapt1; 242.29s call tests/snsmp2/cf-o/test_input.py::test_snsmp2_cf_o; 229.90s call tests/opt13/test_input.py::test_opt13; 221.20s call tests/sapt-exch-ind30-inf/test_input.py::test_sapt_exch_ind30_inf; 204.84s call tests/chemps2/caspt2-n2/test_input.py::test_chemps2_caspt2_n2; 197.04s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97M-V- - ]; 193.31s call tests/cbs-xtpl-func/test_input.py::test_cbs_xtpl_func; 189.76s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[LC-VV10- - ]; 183.86s call tests/isapt1/test_input.py::test_isapt1; 181.63s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97X-V- - ]; 174.31s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[B97M-V- - ]; 171.48s call tests/sapt4/test_input.py::test_sapt4; 169.47s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[VV10- - ]; 160.20s call tests/fd-freq-gradient-large/test_input.py::test_fd_freq_gradient_large; 157.12s call tests/nbody-hessian/test_input.py::test_nbody_hessian; 135.53s",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2549
https://github.com/psi4/psi4/pull/2549:3521,Testability,test,tests,3521,"turb-h/CMakeLists.txt`; ```; - [x] Filled in the rest of the test_input's as generated from script. There's ~3 hidden, but otherwise, the full test suite can be run from pytest. On 20 cores, I get `0 failed, 3660 passed, 96 skipped, 272 xfailed, 4 xpassed, 312 warnings in 2011.32s (0:33:31)`. For interest, the culprits over 2 minutes are:; ```; =========================================================================================================== slowest 50 durations ============================================================================================================; 937.48s call tests/linK-2/test_input.py::test_linK_2; 875.59s call tests/snsmp2/cc-cc/test_input.py::test_snsmp2_cc_cc; 855.00s call tests/fd-freq-energy-large/test_input.py::test_fd_freq_energy_large; 569.12s call tests/density-screen-2/test_input.py::test_density_screen_2; 499.66s call tests/fsapt1/test_input.py::test_fsapt1; 242.29s call tests/snsmp2/cf-o/test_input.py::test_snsmp2_cf_o; 229.90s call tests/opt13/test_input.py::test_opt13; 221.20s call tests/sapt-exch-ind30-inf/test_input.py::test_sapt_exch_ind30_inf; 204.84s call tests/chemps2/caspt2-n2/test_input.py::test_chemps2_caspt2_n2; 197.04s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97M-V- - ]; 193.31s call tests/cbs-xtpl-func/test_input.py::test_cbs_xtpl_func; 189.76s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[LC-VV10- - ]; 183.86s call tests/isapt1/test_input.py::test_isapt1; 181.63s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97X-V- - ]; 174.31s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[B97M-V- - ]; 171.48s call tests/sapt4/test_input.py::test_sapt4; 169.47s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[VV10- - ]; 160.20s call tests/fd-freq-gradient-large/test_input.py::test_fd_freq_gradient_large; 157.12s call tests/nbody-hessian/test_input.py::test_nbody_hessian; 135.53s call tests/cc13a/test_input.py::test_cc13a; ```; - [x] ADDED",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2549
https://github.com/psi4/psi4/pull/2549:3573,Testability,test,tests,3573,"e test_input's as generated from script. There's ~3 hidden, but otherwise, the full test suite can be run from pytest. On 20 cores, I get `0 failed, 3660 passed, 96 skipped, 272 xfailed, 4 xpassed, 312 warnings in 2011.32s (0:33:31)`. For interest, the culprits over 2 minutes are:; ```; =========================================================================================================== slowest 50 durations ============================================================================================================; 937.48s call tests/linK-2/test_input.py::test_linK_2; 875.59s call tests/snsmp2/cc-cc/test_input.py::test_snsmp2_cc_cc; 855.00s call tests/fd-freq-energy-large/test_input.py::test_fd_freq_energy_large; 569.12s call tests/density-screen-2/test_input.py::test_density_screen_2; 499.66s call tests/fsapt1/test_input.py::test_fsapt1; 242.29s call tests/snsmp2/cf-o/test_input.py::test_snsmp2_cf_o; 229.90s call tests/opt13/test_input.py::test_opt13; 221.20s call tests/sapt-exch-ind30-inf/test_input.py::test_sapt_exch_ind30_inf; 204.84s call tests/chemps2/caspt2-n2/test_input.py::test_chemps2_caspt2_n2; 197.04s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97M-V- - ]; 193.31s call tests/cbs-xtpl-func/test_input.py::test_cbs_xtpl_func; 189.76s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[LC-VV10- - ]; 183.86s call tests/isapt1/test_input.py::test_isapt1; 181.63s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97X-V- - ]; 174.31s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[B97M-V- - ]; 171.48s call tests/sapt4/test_input.py::test_sapt4; 169.47s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[VV10- - ]; 160.20s call tests/fd-freq-gradient-large/test_input.py::test_fd_freq_gradient_large; 157.12s call tests/nbody-hessian/test_input.py::test_nbody_hessian; 135.53s call tests/cc13a/test_input.py::test_cc13a; ```; - [x] ADDED: remove the remains of sowreap testing closes #2554 ; - In",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2549
https://github.com/psi4/psi4/pull/2549:3653,Testability,test,tests,3653,"full test suite can be run from pytest. On 20 cores, I get `0 failed, 3660 passed, 96 skipped, 272 xfailed, 4 xpassed, 312 warnings in 2011.32s (0:33:31)`. For interest, the culprits over 2 minutes are:; ```; =========================================================================================================== slowest 50 durations ============================================================================================================; 937.48s call tests/linK-2/test_input.py::test_linK_2; 875.59s call tests/snsmp2/cc-cc/test_input.py::test_snsmp2_cc_cc; 855.00s call tests/fd-freq-energy-large/test_input.py::test_fd_freq_energy_large; 569.12s call tests/density-screen-2/test_input.py::test_density_screen_2; 499.66s call tests/fsapt1/test_input.py::test_fsapt1; 242.29s call tests/snsmp2/cf-o/test_input.py::test_snsmp2_cf_o; 229.90s call tests/opt13/test_input.py::test_opt13; 221.20s call tests/sapt-exch-ind30-inf/test_input.py::test_sapt_exch_ind30_inf; 204.84s call tests/chemps2/caspt2-n2/test_input.py::test_chemps2_caspt2_n2; 197.04s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97M-V- - ]; 193.31s call tests/cbs-xtpl-func/test_input.py::test_cbs_xtpl_func; 189.76s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[LC-VV10- - ]; 183.86s call tests/isapt1/test_input.py::test_isapt1; 181.63s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97X-V- - ]; 174.31s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[B97M-V- - ]; 171.48s call tests/sapt4/test_input.py::test_sapt4; 169.47s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[VV10- - ]; 160.20s call tests/fd-freq-gradient-large/test_input.py::test_fd_freq_gradient_large; 157.12s call tests/nbody-hessian/test_input.py::test_nbody_hessian; 135.53s call tests/cc13a/test_input.py::test_cc13a; ```; - [x] ADDED: remove the remains of sowreap testing closes #2554 ; - In future PR, the CI should be adjusted so CTest is running, say, smoke tests, an",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2549
https://github.com/psi4/psi4/pull/2549:3729,Testability,test,tests,3729,"660 passed, 96 skipped, 272 xfailed, 4 xpassed, 312 warnings in 2011.32s (0:33:31)`. For interest, the culprits over 2 minutes are:; ```; =========================================================================================================== slowest 50 durations ============================================================================================================; 937.48s call tests/linK-2/test_input.py::test_linK_2; 875.59s call tests/snsmp2/cc-cc/test_input.py::test_snsmp2_cc_cc; 855.00s call tests/fd-freq-energy-large/test_input.py::test_fd_freq_energy_large; 569.12s call tests/density-screen-2/test_input.py::test_density_screen_2; 499.66s call tests/fsapt1/test_input.py::test_fsapt1; 242.29s call tests/snsmp2/cf-o/test_input.py::test_snsmp2_cf_o; 229.90s call tests/opt13/test_input.py::test_opt13; 221.20s call tests/sapt-exch-ind30-inf/test_input.py::test_sapt_exch_ind30_inf; 204.84s call tests/chemps2/caspt2-n2/test_input.py::test_chemps2_caspt2_n2; 197.04s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97M-V- - ]; 193.31s call tests/cbs-xtpl-func/test_input.py::test_cbs_xtpl_func; 189.76s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[LC-VV10- - ]; 183.86s call tests/isapt1/test_input.py::test_isapt1; 181.63s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97X-V- - ]; 174.31s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[B97M-V- - ]; 171.48s call tests/sapt4/test_input.py::test_sapt4; 169.47s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[VV10- - ]; 160.20s call tests/fd-freq-gradient-large/test_input.py::test_fd_freq_gradient_large; 157.12s call tests/nbody-hessian/test_input.py::test_nbody_hessian; 135.53s call tests/cc13a/test_input.py::test_cc13a; ```; - [x] ADDED: remove the remains of sowreap testing closes #2554 ; - In future PR, the CI should be adjusted so CTest is running, say, smoke tests, and pytest is running quick. Otherwise there'll be double testing. ## Chec",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2549
https://github.com/psi4/psi4/pull/2549:3813,Testability,test,tests,3813,"r interest, the culprits over 2 minutes are:; ```; =========================================================================================================== slowest 50 durations ============================================================================================================; 937.48s call tests/linK-2/test_input.py::test_linK_2; 875.59s call tests/snsmp2/cc-cc/test_input.py::test_snsmp2_cc_cc; 855.00s call tests/fd-freq-energy-large/test_input.py::test_fd_freq_energy_large; 569.12s call tests/density-screen-2/test_input.py::test_density_screen_2; 499.66s call tests/fsapt1/test_input.py::test_fsapt1; 242.29s call tests/snsmp2/cf-o/test_input.py::test_snsmp2_cf_o; 229.90s call tests/opt13/test_input.py::test_opt13; 221.20s call tests/sapt-exch-ind30-inf/test_input.py::test_sapt_exch_ind30_inf; 204.84s call tests/chemps2/caspt2-n2/test_input.py::test_chemps2_caspt2_n2; 197.04s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97M-V- - ]; 193.31s call tests/cbs-xtpl-func/test_input.py::test_cbs_xtpl_func; 189.76s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[LC-VV10- - ]; 183.86s call tests/isapt1/test_input.py::test_isapt1; 181.63s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97X-V- - ]; 174.31s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[B97M-V- - ]; 171.48s call tests/sapt4/test_input.py::test_sapt4; 169.47s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[VV10- - ]; 160.20s call tests/fd-freq-gradient-large/test_input.py::test_fd_freq_gradient_large; 157.12s call tests/nbody-hessian/test_input.py::test_nbody_hessian; 135.53s call tests/cc13a/test_input.py::test_cc13a; ```; - [x] ADDED: remove the remains of sowreap testing closes #2554 ; - In future PR, the CI should be adjusted so CTest is running, say, smoke tests, and pytest is running quick. Otherwise there'll be double testing. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2549
https://github.com/psi4/psi4/pull/2549:3881,Testability,test,tests,3881,"============================================================================================= slowest 50 durations ============================================================================================================; 937.48s call tests/linK-2/test_input.py::test_linK_2; 875.59s call tests/snsmp2/cc-cc/test_input.py::test_snsmp2_cc_cc; 855.00s call tests/fd-freq-energy-large/test_input.py::test_fd_freq_energy_large; 569.12s call tests/density-screen-2/test_input.py::test_density_screen_2; 499.66s call tests/fsapt1/test_input.py::test_fsapt1; 242.29s call tests/snsmp2/cf-o/test_input.py::test_snsmp2_cf_o; 229.90s call tests/opt13/test_input.py::test_opt13; 221.20s call tests/sapt-exch-ind30-inf/test_input.py::test_sapt_exch_ind30_inf; 204.84s call tests/chemps2/caspt2-n2/test_input.py::test_chemps2_caspt2_n2; 197.04s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97M-V- - ]; 193.31s call tests/cbs-xtpl-func/test_input.py::test_cbs_xtpl_func; 189.76s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[LC-VV10- - ]; 183.86s call tests/isapt1/test_input.py::test_isapt1; 181.63s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97X-V- - ]; 174.31s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[B97M-V- - ]; 171.48s call tests/sapt4/test_input.py::test_sapt4; 169.47s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[VV10- - ]; 160.20s call tests/fd-freq-gradient-large/test_input.py::test_fd_freq_gradient_large; 157.12s call tests/nbody-hessian/test_input.py::test_nbody_hessian; 135.53s call tests/cc13a/test_input.py::test_cc13a; ```; - [x] ADDED: remove the remains of sowreap testing closes #2554 ; - In future PR, the CI should be adjusted so CTest is running, say, smoke tests, and pytest is running quick. Otherwise there'll be double testing. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.ht",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2549
https://github.com/psi4/psi4/pull/2549:3965,Testability,test,tests,3965,"========== slowest 50 durations ============================================================================================================; 937.48s call tests/linK-2/test_input.py::test_linK_2; 875.59s call tests/snsmp2/cc-cc/test_input.py::test_snsmp2_cc_cc; 855.00s call tests/fd-freq-energy-large/test_input.py::test_fd_freq_energy_large; 569.12s call tests/density-screen-2/test_input.py::test_density_screen_2; 499.66s call tests/fsapt1/test_input.py::test_fsapt1; 242.29s call tests/snsmp2/cf-o/test_input.py::test_snsmp2_cf_o; 229.90s call tests/opt13/test_input.py::test_opt13; 221.20s call tests/sapt-exch-ind30-inf/test_input.py::test_sapt_exch_ind30_inf; 204.84s call tests/chemps2/caspt2-n2/test_input.py::test_chemps2_caspt2_n2; 197.04s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97M-V- - ]; 193.31s call tests/cbs-xtpl-func/test_input.py::test_cbs_xtpl_func; 189.76s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[LC-VV10- - ]; 183.86s call tests/isapt1/test_input.py::test_isapt1; 181.63s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97X-V- - ]; 174.31s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[B97M-V- - ]; 171.48s call tests/sapt4/test_input.py::test_sapt4; 169.47s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[VV10- - ]; 160.20s call tests/fd-freq-gradient-large/test_input.py::test_fd_freq_gradient_large; 157.12s call tests/nbody-hessian/test_input.py::test_nbody_hessian; 135.53s call tests/cc13a/test_input.py::test_cc13a; ```; - [x] ADDED: remove the remains of sowreap testing closes #2554 ; - In future PR, the CI should be adjusted so CTest is running, say, smoke tests, and pytest is running quick. Otherwise there'll be double testing. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready fo",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2549
https://github.com/psi4/psi4/pull/2549:4019,Testability,test,tests,4019,"== slowest 50 durations ============================================================================================================; 937.48s call tests/linK-2/test_input.py::test_linK_2; 875.59s call tests/snsmp2/cc-cc/test_input.py::test_snsmp2_cc_cc; 855.00s call tests/fd-freq-energy-large/test_input.py::test_fd_freq_energy_large; 569.12s call tests/density-screen-2/test_input.py::test_density_screen_2; 499.66s call tests/fsapt1/test_input.py::test_fsapt1; 242.29s call tests/snsmp2/cf-o/test_input.py::test_snsmp2_cf_o; 229.90s call tests/opt13/test_input.py::test_opt13; 221.20s call tests/sapt-exch-ind30-inf/test_input.py::test_sapt_exch_ind30_inf; 204.84s call tests/chemps2/caspt2-n2/test_input.py::test_chemps2_caspt2_n2; 197.04s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97M-V- - ]; 193.31s call tests/cbs-xtpl-func/test_input.py::test_cbs_xtpl_func; 189.76s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[LC-VV10- - ]; 183.86s call tests/isapt1/test_input.py::test_isapt1; 181.63s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97X-V- - ]; 174.31s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[B97M-V- - ]; 171.48s call tests/sapt4/test_input.py::test_sapt4; 169.47s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[VV10- - ]; 160.20s call tests/fd-freq-gradient-large/test_input.py::test_fd_freq_gradient_large; 157.12s call tests/nbody-hessian/test_input.py::test_nbody_hessian; 135.53s call tests/cc13a/test_input.py::test_cc13a; ```; - [x] ADDED: remove the remains of sowreap testing closes #2554 ; - In future PR, the CI should be adjusted so CTest is running, say, smoke tests, and pytest is running quick. Otherwise there'll be double testing. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2549
https://github.com/psi4/psi4/pull/2549:4103,Testability,test,tests,4103,"== slowest 50 durations ============================================================================================================; 937.48s call tests/linK-2/test_input.py::test_linK_2; 875.59s call tests/snsmp2/cc-cc/test_input.py::test_snsmp2_cc_cc; 855.00s call tests/fd-freq-energy-large/test_input.py::test_fd_freq_energy_large; 569.12s call tests/density-screen-2/test_input.py::test_density_screen_2; 499.66s call tests/fsapt1/test_input.py::test_fsapt1; 242.29s call tests/snsmp2/cf-o/test_input.py::test_snsmp2_cf_o; 229.90s call tests/opt13/test_input.py::test_opt13; 221.20s call tests/sapt-exch-ind30-inf/test_input.py::test_sapt_exch_ind30_inf; 204.84s call tests/chemps2/caspt2-n2/test_input.py::test_chemps2_caspt2_n2; 197.04s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97M-V- - ]; 193.31s call tests/cbs-xtpl-func/test_input.py::test_cbs_xtpl_func; 189.76s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[LC-VV10- - ]; 183.86s call tests/isapt1/test_input.py::test_isapt1; 181.63s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97X-V- - ]; 174.31s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[B97M-V- - ]; 171.48s call tests/sapt4/test_input.py::test_sapt4; 169.47s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[VV10- - ]; 160.20s call tests/fd-freq-gradient-large/test_input.py::test_fd_freq_gradient_large; 157.12s call tests/nbody-hessian/test_input.py::test_nbody_hessian; 135.53s call tests/cc13a/test_input.py::test_cc13a; ```; - [x] ADDED: remove the remains of sowreap testing closes #2554 ; - In future PR, the CI should be adjusted so CTest is running, say, smoke tests, and pytest is running quick. Otherwise there'll be double testing. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2549
https://github.com/psi4/psi4/pull/2549:4186,Testability,test,tests,4186,"== slowest 50 durations ============================================================================================================; 937.48s call tests/linK-2/test_input.py::test_linK_2; 875.59s call tests/snsmp2/cc-cc/test_input.py::test_snsmp2_cc_cc; 855.00s call tests/fd-freq-energy-large/test_input.py::test_fd_freq_energy_large; 569.12s call tests/density-screen-2/test_input.py::test_density_screen_2; 499.66s call tests/fsapt1/test_input.py::test_fsapt1; 242.29s call tests/snsmp2/cf-o/test_input.py::test_snsmp2_cf_o; 229.90s call tests/opt13/test_input.py::test_opt13; 221.20s call tests/sapt-exch-ind30-inf/test_input.py::test_sapt_exch_ind30_inf; 204.84s call tests/chemps2/caspt2-n2/test_input.py::test_chemps2_caspt2_n2; 197.04s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97M-V- - ]; 193.31s call tests/cbs-xtpl-func/test_input.py::test_cbs_xtpl_func; 189.76s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[LC-VV10- - ]; 183.86s call tests/isapt1/test_input.py::test_isapt1; 181.63s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97X-V- - ]; 174.31s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[B97M-V- - ]; 171.48s call tests/sapt4/test_input.py::test_sapt4; 169.47s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[VV10- - ]; 160.20s call tests/fd-freq-gradient-large/test_input.py::test_fd_freq_gradient_large; 157.12s call tests/nbody-hessian/test_input.py::test_nbody_hessian; 135.53s call tests/cc13a/test_input.py::test_cc13a; ```; - [x] ADDED: remove the remains of sowreap testing closes #2554 ; - In future PR, the CI should be adjusted so CTest is running, say, smoke tests, and pytest is running quick. Otherwise there'll be double testing. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2549
https://github.com/psi4/psi4/pull/2549:4238,Testability,test,tests,4238,"== slowest 50 durations ============================================================================================================; 937.48s call tests/linK-2/test_input.py::test_linK_2; 875.59s call tests/snsmp2/cc-cc/test_input.py::test_snsmp2_cc_cc; 855.00s call tests/fd-freq-energy-large/test_input.py::test_fd_freq_energy_large; 569.12s call tests/density-screen-2/test_input.py::test_density_screen_2; 499.66s call tests/fsapt1/test_input.py::test_fsapt1; 242.29s call tests/snsmp2/cf-o/test_input.py::test_snsmp2_cf_o; 229.90s call tests/opt13/test_input.py::test_opt13; 221.20s call tests/sapt-exch-ind30-inf/test_input.py::test_sapt_exch_ind30_inf; 204.84s call tests/chemps2/caspt2-n2/test_input.py::test_chemps2_caspt2_n2; 197.04s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97M-V- - ]; 193.31s call tests/cbs-xtpl-func/test_input.py::test_cbs_xtpl_func; 189.76s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[LC-VV10- - ]; 183.86s call tests/isapt1/test_input.py::test_isapt1; 181.63s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97X-V- - ]; 174.31s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[B97M-V- - ]; 171.48s call tests/sapt4/test_input.py::test_sapt4; 169.47s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[VV10- - ]; 160.20s call tests/fd-freq-gradient-large/test_input.py::test_fd_freq_gradient_large; 157.12s call tests/nbody-hessian/test_input.py::test_nbody_hessian; 135.53s call tests/cc13a/test_input.py::test_cc13a; ```; - [x] ADDED: remove the remains of sowreap testing closes #2554 ; - In future PR, the CI should be adjusted so CTest is running, say, smoke tests, and pytest is running quick. Otherwise there'll be double testing. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2549
https://github.com/psi4/psi4/pull/2549:4319,Testability,test,tests,4319,"== slowest 50 durations ============================================================================================================; 937.48s call tests/linK-2/test_input.py::test_linK_2; 875.59s call tests/snsmp2/cc-cc/test_input.py::test_snsmp2_cc_cc; 855.00s call tests/fd-freq-energy-large/test_input.py::test_fd_freq_energy_large; 569.12s call tests/density-screen-2/test_input.py::test_density_screen_2; 499.66s call tests/fsapt1/test_input.py::test_fsapt1; 242.29s call tests/snsmp2/cf-o/test_input.py::test_snsmp2_cf_o; 229.90s call tests/opt13/test_input.py::test_opt13; 221.20s call tests/sapt-exch-ind30-inf/test_input.py::test_sapt_exch_ind30_inf; 204.84s call tests/chemps2/caspt2-n2/test_input.py::test_chemps2_caspt2_n2; 197.04s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97M-V- - ]; 193.31s call tests/cbs-xtpl-func/test_input.py::test_cbs_xtpl_func; 189.76s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[LC-VV10- - ]; 183.86s call tests/isapt1/test_input.py::test_isapt1; 181.63s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97X-V- - ]; 174.31s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[B97M-V- - ]; 171.48s call tests/sapt4/test_input.py::test_sapt4; 169.47s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[VV10- - ]; 160.20s call tests/fd-freq-gradient-large/test_input.py::test_fd_freq_gradient_large; 157.12s call tests/nbody-hessian/test_input.py::test_nbody_hessian; 135.53s call tests/cc13a/test_input.py::test_cc13a; ```; - [x] ADDED: remove the remains of sowreap testing closes #2554 ; - In future PR, the CI should be adjusted so CTest is running, say, smoke tests, and pytest is running quick. Otherwise there'll be double testing. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2549
https://github.com/psi4/psi4/pull/2549:4405,Testability,test,tests,4405,"== slowest 50 durations ============================================================================================================; 937.48s call tests/linK-2/test_input.py::test_linK_2; 875.59s call tests/snsmp2/cc-cc/test_input.py::test_snsmp2_cc_cc; 855.00s call tests/fd-freq-energy-large/test_input.py::test_fd_freq_energy_large; 569.12s call tests/density-screen-2/test_input.py::test_density_screen_2; 499.66s call tests/fsapt1/test_input.py::test_fsapt1; 242.29s call tests/snsmp2/cf-o/test_input.py::test_snsmp2_cf_o; 229.90s call tests/opt13/test_input.py::test_opt13; 221.20s call tests/sapt-exch-ind30-inf/test_input.py::test_sapt_exch_ind30_inf; 204.84s call tests/chemps2/caspt2-n2/test_input.py::test_chemps2_caspt2_n2; 197.04s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97M-V- - ]; 193.31s call tests/cbs-xtpl-func/test_input.py::test_cbs_xtpl_func; 189.76s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[LC-VV10- - ]; 183.86s call tests/isapt1/test_input.py::test_isapt1; 181.63s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97X-V- - ]; 174.31s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[B97M-V- - ]; 171.48s call tests/sapt4/test_input.py::test_sapt4; 169.47s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[VV10- - ]; 160.20s call tests/fd-freq-gradient-large/test_input.py::test_fd_freq_gradient_large; 157.12s call tests/nbody-hessian/test_input.py::test_nbody_hessian; 135.53s call tests/cc13a/test_input.py::test_cc13a; ```; - [x] ADDED: remove the remains of sowreap testing closes #2554 ; - In future PR, the CI should be adjusted so CTest is running, say, smoke tests, and pytest is running quick. Otherwise there'll be double testing. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2549
https://github.com/psi4/psi4/pull/2549:4473,Testability,test,tests,4473,"== slowest 50 durations ============================================================================================================; 937.48s call tests/linK-2/test_input.py::test_linK_2; 875.59s call tests/snsmp2/cc-cc/test_input.py::test_snsmp2_cc_cc; 855.00s call tests/fd-freq-energy-large/test_input.py::test_fd_freq_energy_large; 569.12s call tests/density-screen-2/test_input.py::test_density_screen_2; 499.66s call tests/fsapt1/test_input.py::test_fsapt1; 242.29s call tests/snsmp2/cf-o/test_input.py::test_snsmp2_cf_o; 229.90s call tests/opt13/test_input.py::test_opt13; 221.20s call tests/sapt-exch-ind30-inf/test_input.py::test_sapt_exch_ind30_inf; 204.84s call tests/chemps2/caspt2-n2/test_input.py::test_chemps2_caspt2_n2; 197.04s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97M-V- - ]; 193.31s call tests/cbs-xtpl-func/test_input.py::test_cbs_xtpl_func; 189.76s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[LC-VV10- - ]; 183.86s call tests/isapt1/test_input.py::test_isapt1; 181.63s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97X-V- - ]; 174.31s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[B97M-V- - ]; 171.48s call tests/sapt4/test_input.py::test_sapt4; 169.47s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[VV10- - ]; 160.20s call tests/fd-freq-gradient-large/test_input.py::test_fd_freq_gradient_large; 157.12s call tests/nbody-hessian/test_input.py::test_nbody_hessian; 135.53s call tests/cc13a/test_input.py::test_cc13a; ```; - [x] ADDED: remove the remains of sowreap testing closes #2554 ; - In future PR, the CI should be adjusted so CTest is running, say, smoke tests, and pytest is running quick. Otherwise there'll be double testing. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2549
https://github.com/psi4/psi4/pull/2549:4560,Testability,test,testing,4560,"== slowest 50 durations ============================================================================================================; 937.48s call tests/linK-2/test_input.py::test_linK_2; 875.59s call tests/snsmp2/cc-cc/test_input.py::test_snsmp2_cc_cc; 855.00s call tests/fd-freq-energy-large/test_input.py::test_fd_freq_energy_large; 569.12s call tests/density-screen-2/test_input.py::test_density_screen_2; 499.66s call tests/fsapt1/test_input.py::test_fsapt1; 242.29s call tests/snsmp2/cf-o/test_input.py::test_snsmp2_cf_o; 229.90s call tests/opt13/test_input.py::test_opt13; 221.20s call tests/sapt-exch-ind30-inf/test_input.py::test_sapt_exch_ind30_inf; 204.84s call tests/chemps2/caspt2-n2/test_input.py::test_chemps2_caspt2_n2; 197.04s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97M-V- - ]; 193.31s call tests/cbs-xtpl-func/test_input.py::test_cbs_xtpl_func; 189.76s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[LC-VV10- - ]; 183.86s call tests/isapt1/test_input.py::test_isapt1; 181.63s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97X-V- - ]; 174.31s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[B97M-V- - ]; 171.48s call tests/sapt4/test_input.py::test_sapt4; 169.47s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[VV10- - ]; 160.20s call tests/fd-freq-gradient-large/test_input.py::test_fd_freq_gradient_large; 157.12s call tests/nbody-hessian/test_input.py::test_nbody_hessian; 135.53s call tests/cc13a/test_input.py::test_cc13a; ```; - [x] ADDED: remove the remains of sowreap testing closes #2554 ; - In future PR, the CI should be adjusted so CTest is running, say, smoke tests, and pytest is running quick. Otherwise there'll be double testing. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2549
https://github.com/psi4/psi4/pull/2549:4657,Testability,test,tests,4657,"== slowest 50 durations ============================================================================================================; 937.48s call tests/linK-2/test_input.py::test_linK_2; 875.59s call tests/snsmp2/cc-cc/test_input.py::test_snsmp2_cc_cc; 855.00s call tests/fd-freq-energy-large/test_input.py::test_fd_freq_energy_large; 569.12s call tests/density-screen-2/test_input.py::test_density_screen_2; 499.66s call tests/fsapt1/test_input.py::test_fsapt1; 242.29s call tests/snsmp2/cf-o/test_input.py::test_snsmp2_cf_o; 229.90s call tests/opt13/test_input.py::test_opt13; 221.20s call tests/sapt-exch-ind30-inf/test_input.py::test_sapt_exch_ind30_inf; 204.84s call tests/chemps2/caspt2-n2/test_input.py::test_chemps2_caspt2_n2; 197.04s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97M-V- - ]; 193.31s call tests/cbs-xtpl-func/test_input.py::test_cbs_xtpl_func; 189.76s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[LC-VV10- - ]; 183.86s call tests/isapt1/test_input.py::test_isapt1; 181.63s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97X-V- - ]; 174.31s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[B97M-V- - ]; 171.48s call tests/sapt4/test_input.py::test_sapt4; 169.47s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[VV10- - ]; 160.20s call tests/fd-freq-gradient-large/test_input.py::test_fd_freq_gradient_large; 157.12s call tests/nbody-hessian/test_input.py::test_nbody_hessian; 135.53s call tests/cc13a/test_input.py::test_cc13a; ```; - [x] ADDED: remove the remains of sowreap testing closes #2554 ; - In future PR, the CI should be adjusted so CTest is running, say, smoke tests, and pytest is running quick. Otherwise there'll be double testing. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2549
https://github.com/psi4/psi4/pull/2549:4722,Testability,test,testing,4722,"== slowest 50 durations ============================================================================================================; 937.48s call tests/linK-2/test_input.py::test_linK_2; 875.59s call tests/snsmp2/cc-cc/test_input.py::test_snsmp2_cc_cc; 855.00s call tests/fd-freq-energy-large/test_input.py::test_fd_freq_energy_large; 569.12s call tests/density-screen-2/test_input.py::test_density_screen_2; 499.66s call tests/fsapt1/test_input.py::test_fsapt1; 242.29s call tests/snsmp2/cf-o/test_input.py::test_snsmp2_cf_o; 229.90s call tests/opt13/test_input.py::test_opt13; 221.20s call tests/sapt-exch-ind30-inf/test_input.py::test_sapt_exch_ind30_inf; 204.84s call tests/chemps2/caspt2-n2/test_input.py::test_chemps2_caspt2_n2; 197.04s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97M-V- - ]; 193.31s call tests/cbs-xtpl-func/test_input.py::test_cbs_xtpl_func; 189.76s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[LC-VV10- - ]; 183.86s call tests/isapt1/test_input.py::test_isapt1; 181.63s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97X-V- - ]; 174.31s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[B97M-V- - ]; 171.48s call tests/sapt4/test_input.py::test_sapt4; 169.47s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[VV10- - ]; 160.20s call tests/fd-freq-gradient-large/test_input.py::test_fd_freq_gradient_large; 157.12s call tests/nbody-hessian/test_input.py::test_nbody_hessian; 135.53s call tests/cc13a/test_input.py::test_cc13a; ```; - [x] ADDED: remove the remains of sowreap testing closes #2554 ; - In future PR, the CI should be adjusted so CTest is running, say, smoke tests, and pytest is running quick. Otherwise there'll be double testing. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2549
https://github.com/psi4/psi4/pull/2549:4751,Testability,Test,Tests,4751,"== slowest 50 durations ============================================================================================================; 937.48s call tests/linK-2/test_input.py::test_linK_2; 875.59s call tests/snsmp2/cc-cc/test_input.py::test_snsmp2_cc_cc; 855.00s call tests/fd-freq-energy-large/test_input.py::test_fd_freq_energy_large; 569.12s call tests/density-screen-2/test_input.py::test_density_screen_2; 499.66s call tests/fsapt1/test_input.py::test_fsapt1; 242.29s call tests/snsmp2/cf-o/test_input.py::test_snsmp2_cf_o; 229.90s call tests/opt13/test_input.py::test_opt13; 221.20s call tests/sapt-exch-ind30-inf/test_input.py::test_sapt_exch_ind30_inf; 204.84s call tests/chemps2/caspt2-n2/test_input.py::test_chemps2_caspt2_n2; 197.04s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97M-V- - ]; 193.31s call tests/cbs-xtpl-func/test_input.py::test_cbs_xtpl_func; 189.76s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[LC-VV10- - ]; 183.86s call tests/isapt1/test_input.py::test_isapt1; 181.63s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97X-V- - ]; 174.31s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[B97M-V- - ]; 171.48s call tests/sapt4/test_input.py::test_sapt4; 169.47s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[VV10- - ]; 160.20s call tests/fd-freq-gradient-large/test_input.py::test_fd_freq_gradient_large; 157.12s call tests/nbody-hessian/test_input.py::test_nbody_hessian; 135.53s call tests/cc13a/test_input.py::test_cc13a; ```; - [x] ADDED: remove the remains of sowreap testing closes #2554 ; - In future PR, the CI should be adjusted so CTest is running, say, smoke tests, and pytest is running quick. Otherwise there'll be double testing. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2549
https://github.com/psi4/psi4/pull/2549:4825,Testability,test,tests,4825,"== slowest 50 durations ============================================================================================================; 937.48s call tests/linK-2/test_input.py::test_linK_2; 875.59s call tests/snsmp2/cc-cc/test_input.py::test_snsmp2_cc_cc; 855.00s call tests/fd-freq-energy-large/test_input.py::test_fd_freq_energy_large; 569.12s call tests/density-screen-2/test_input.py::test_density_screen_2; 499.66s call tests/fsapt1/test_input.py::test_fsapt1; 242.29s call tests/snsmp2/cf-o/test_input.py::test_snsmp2_cf_o; 229.90s call tests/opt13/test_input.py::test_opt13; 221.20s call tests/sapt-exch-ind30-inf/test_input.py::test_sapt_exch_ind30_inf; 204.84s call tests/chemps2/caspt2-n2/test_input.py::test_chemps2_caspt2_n2; 197.04s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97M-V- - ]; 193.31s call tests/cbs-xtpl-func/test_input.py::test_cbs_xtpl_func; 189.76s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[LC-VV10- - ]; 183.86s call tests/isapt1/test_input.py::test_isapt1; 181.63s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97X-V- - ]; 174.31s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[B97M-V- - ]; 171.48s call tests/sapt4/test_input.py::test_sapt4; 169.47s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[VV10- - ]; 160.20s call tests/fd-freq-gradient-large/test_input.py::test_fd_freq_gradient_large; 157.12s call tests/nbody-hessian/test_input.py::test_nbody_hessian; 135.53s call tests/cc13a/test_input.py::test_cc13a; ```; - [x] ADDED: remove the remains of sowreap testing closes #2554 ; - In future PR, the CI should be adjusted so CTest is running, say, smoke tests, and pytest is running quick. Otherwise there'll be double testing. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2549
https://github.com/psi4/psi4/pull/2549:4916,Testability,test,tests,4916,"== slowest 50 durations ============================================================================================================; 937.48s call tests/linK-2/test_input.py::test_linK_2; 875.59s call tests/snsmp2/cc-cc/test_input.py::test_snsmp2_cc_cc; 855.00s call tests/fd-freq-energy-large/test_input.py::test_fd_freq_energy_large; 569.12s call tests/density-screen-2/test_input.py::test_density_screen_2; 499.66s call tests/fsapt1/test_input.py::test_fsapt1; 242.29s call tests/snsmp2/cf-o/test_input.py::test_snsmp2_cf_o; 229.90s call tests/opt13/test_input.py::test_opt13; 221.20s call tests/sapt-exch-ind30-inf/test_input.py::test_sapt_exch_ind30_inf; 204.84s call tests/chemps2/caspt2-n2/test_input.py::test_chemps2_caspt2_n2; 197.04s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97M-V- - ]; 193.31s call tests/cbs-xtpl-func/test_input.py::test_cbs_xtpl_func; 189.76s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[LC-VV10- - ]; 183.86s call tests/isapt1/test_input.py::test_isapt1; 181.63s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97X-V- - ]; 174.31s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[B97M-V- - ]; 171.48s call tests/sapt4/test_input.py::test_sapt4; 169.47s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[VV10- - ]; 160.20s call tests/fd-freq-gradient-large/test_input.py::test_fd_freq_gradient_large; 157.12s call tests/nbody-hessian/test_input.py::test_nbody_hessian; 135.53s call tests/cc13a/test_input.py::test_cc13a; ```; - [x] ADDED: remove the remains of sowreap testing closes #2554 ; - In future PR, the CI should be adjusted so CTest is running, say, smoke tests, and pytest is running quick. Otherwise there'll be double testing. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2549
https://github.com/psi4/psi4/pull/2551:339,Energy Efficiency,energy,energy,339,"## Description; Closes #943: the last of the `cc` tests is expressed in terms of psivars instead of the autotest mechanism. The last test moved required adding psivars about pair energies for RHF CC computations. I want a review from Zach for pair energies, from TDC for CC, and from Lori for psivars. ## Todos; - [x] Adds MP2 and CC pair energy psivars; - [x] Removes `autotest` capabilities . ## Questions; - [ ] If you close a ""mugworthy"" PR but already have a mug, what then?. ## Checklist; - [x] `cc43` still passes; - [x] quick tests still pass . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2551
https://github.com/psi4/psi4/pull/2551:50,Testability,test,tests,50,"## Description; Closes #943: the last of the `cc` tests is expressed in terms of psivars instead of the autotest mechanism. The last test moved required adding psivars about pair energies for RHF CC computations. I want a review from Zach for pair energies, from TDC for CC, and from Lori for psivars. ## Todos; - [x] Adds MP2 and CC pair energy psivars; - [x] Removes `autotest` capabilities . ## Questions; - [ ] If you close a ""mugworthy"" PR but already have a mug, what then?. ## Checklist; - [x] `cc43` still passes; - [x] quick tests still pass . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2551
https://github.com/psi4/psi4/pull/2551:133,Testability,test,test,133,"## Description; Closes #943: the last of the `cc` tests is expressed in terms of psivars instead of the autotest mechanism. The last test moved required adding psivars about pair energies for RHF CC computations. I want a review from Zach for pair energies, from TDC for CC, and from Lori for psivars. ## Todos; - [x] Adds MP2 and CC pair energy psivars; - [x] Removes `autotest` capabilities . ## Questions; - [ ] If you close a ""mugworthy"" PR but already have a mug, what then?. ## Checklist; - [x] `cc43` still passes; - [x] quick tests still pass . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2551
https://github.com/psi4/psi4/pull/2551:534,Testability,test,tests,534,"## Description; Closes #943: the last of the `cc` tests is expressed in terms of psivars instead of the autotest mechanism. The last test moved required adding psivars about pair energies for RHF CC computations. I want a review from Zach for pair energies, from TDC for CC, and from Lori for psivars. ## Todos; - [x] Adds MP2 and CC pair energy psivars; - [x] Removes `autotest` capabilities . ## Questions; - [ ] If you close a ""mugworthy"" PR but already have a mug, what then?. ## Checklist; - [x] `cc43` still passes; - [x] quick tests still pass . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2551
https://github.com/psi4/psi4/pull/2552:49,Energy Efficiency,reduce,reduced,49,"## Description; The first eight DDD extracts PRs reduced the delta from; 99 changed files, and 5,314 additions and 2,946 deletions. c. dgasmith:recursive to; 59 changed files, and 3,408 additions and 1,885 deletions. c. loriab:recursive62; so here's No. 9 of the DDD series, #1351. ## Todos; - [x] This is the non-class parts of changes to finite difference. Mostly; * using pieces from Mol, rather than mol, to reduce dependence on psi objects; * use more numpy, less Matrix; * consolidate printing so can go to logging; * start to pass finite difference options (points, steps, projection) as kwargs rather than having findif consult global options; - [x] added in the dipder from dipole but it's not used; - closes #1683; - [x] along the way, psimrcc-fd-freq1 failed. as far as I can judge now, this is an existing bug. part of the old output is below. psi is evaulating the gradient, finding it over the cutoff, and so recommending not projecting rotations. then, because of https://github.com/psi4/psi4/blob/master/psi4/driver/driver.py#L1613, that setting of FD_PROJECT gets tossed, and findif runs projecting rotations, and the test passes. I'm calling this a bug and setting fd_project in the input to force the array dimensions to match and the test to pass. glad to hear other interpretations. ```. Based on options and gradient (rms=3.60E-02), recommend projecting translations and not projecting rotations.; hessian() will perform frequency computation by finite difference of analytic energies. ----------------------------------------------------------; FINDIF; R. A. King and Jonathon Misiewicz; ---------------------------------------------------------. Using finite-differences of gradients to determine vibrational frequencies and; normal modes. Resulting frequencies are only valid at stationary points.; Generating geometries for use with 5-point formula.; Displacement size will be 1.00e-02.; Number of atoms is 2.; Number of irreps is 8.; Number of SALCs is 1.; Translations proj",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2552
https://github.com/psi4/psi4/pull/2552:412,Energy Efficiency,reduce,reduce,412,"## Description; The first eight DDD extracts PRs reduced the delta from; 99 changed files, and 5,314 additions and 2,946 deletions. c. dgasmith:recursive to; 59 changed files, and 3,408 additions and 1,885 deletions. c. loriab:recursive62; so here's No. 9 of the DDD series, #1351. ## Todos; - [x] This is the non-class parts of changes to finite difference. Mostly; * using pieces from Mol, rather than mol, to reduce dependence on psi objects; * use more numpy, less Matrix; * consolidate printing so can go to logging; * start to pass finite difference options (points, steps, projection) as kwargs rather than having findif consult global options; - [x] added in the dipder from dipole but it's not used; - closes #1683; - [x] along the way, psimrcc-fd-freq1 failed. as far as I can judge now, this is an existing bug. part of the old output is below. psi is evaulating the gradient, finding it over the cutoff, and so recommending not projecting rotations. then, because of https://github.com/psi4/psi4/blob/master/psi4/driver/driver.py#L1613, that setting of FD_PROJECT gets tossed, and findif runs projecting rotations, and the test passes. I'm calling this a bug and setting fd_project in the input to force the array dimensions to match and the test to pass. glad to hear other interpretations. ```. Based on options and gradient (rms=3.60E-02), recommend projecting translations and not projecting rotations.; hessian() will perform frequency computation by finite difference of analytic energies. ----------------------------------------------------------; FINDIF; R. A. King and Jonathon Misiewicz; ---------------------------------------------------------. Using finite-differences of gradients to determine vibrational frequencies and; normal modes. Resulting frequencies are only valid at stationary points.; Generating geometries for use with 5-point formula.; Displacement size will be 1.00e-02.; Number of atoms is 2.; Number of irreps is 8.; Number of SALCs is 1.; Translations proj",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2552
https://github.com/psi4/psi4/pull/2552:419,Integrability,depend,dependence,419,"## Description; The first eight DDD extracts PRs reduced the delta from; 99 changed files, and 5,314 additions and 2,946 deletions. c. dgasmith:recursive to; 59 changed files, and 3,408 additions and 1,885 deletions. c. loriab:recursive62; so here's No. 9 of the DDD series, #1351. ## Todos; - [x] This is the non-class parts of changes to finite difference. Mostly; * using pieces from Mol, rather than mol, to reduce dependence on psi objects; * use more numpy, less Matrix; * consolidate printing so can go to logging; * start to pass finite difference options (points, steps, projection) as kwargs rather than having findif consult global options; - [x] added in the dipder from dipole but it's not used; - closes #1683; - [x] along the way, psimrcc-fd-freq1 failed. as far as I can judge now, this is an existing bug. part of the old output is below. psi is evaulating the gradient, finding it over the cutoff, and so recommending not projecting rotations. then, because of https://github.com/psi4/psi4/blob/master/psi4/driver/driver.py#L1613, that setting of FD_PROJECT gets tossed, and findif runs projecting rotations, and the test passes. I'm calling this a bug and setting fd_project in the input to force the array dimensions to match and the test to pass. glad to hear other interpretations. ```. Based on options and gradient (rms=3.60E-02), recommend projecting translations and not projecting rotations.; hessian() will perform frequency computation by finite difference of analytic energies. ----------------------------------------------------------; FINDIF; R. A. King and Jonathon Misiewicz; ---------------------------------------------------------. Using finite-differences of gradients to determine vibrational frequencies and; normal modes. Resulting frequencies are only valid at stationary points.; Generating geometries for use with 5-point formula.; Displacement size will be 1.00e-02.; Number of atoms is 2.; Number of irreps is 8.; Number of SALCs is 1.; Translations proj",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2552
https://github.com/psi4/psi4/pull/2552:1435,Performance,perform,perform,1435,"l, to reduce dependence on psi objects; * use more numpy, less Matrix; * consolidate printing so can go to logging; * start to pass finite difference options (points, steps, projection) as kwargs rather than having findif consult global options; - [x] added in the dipder from dipole but it's not used; - closes #1683; - [x] along the way, psimrcc-fd-freq1 failed. as far as I can judge now, this is an existing bug. part of the old output is below. psi is evaulating the gradient, finding it over the cutoff, and so recommending not projecting rotations. then, because of https://github.com/psi4/psi4/blob/master/psi4/driver/driver.py#L1613, that setting of FD_PROJECT gets tossed, and findif runs projecting rotations, and the test passes. I'm calling this a bug and setting fd_project in the input to force the array dimensions to match and the test to pass. glad to hear other interpretations. ```. Based on options and gradient (rms=3.60E-02), recommend projecting translations and not projecting rotations.; hessian() will perform frequency computation by finite difference of analytic energies. ----------------------------------------------------------; FINDIF; R. A. King and Jonathon Misiewicz; ---------------------------------------------------------. Using finite-differences of gradients to determine vibrational frequencies and; normal modes. Resulting frequencies are only valid at stationary points.; Generating geometries for use with 5-point formula.; Displacement size will be 1.00e-02.; Number of atoms is 2.; Number of irreps is 8.; Number of SALCs is 1.; Translations projected? 1. Rotations projected? 1.; Index of SALCs per irrep:; ```; - [x] ADDED: moved the write_hessian fn and collected write_gradient into a matching fn. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2552
https://github.com/psi4/psi4/pull/2552:513,Testability,log,logging,513,"## Description; The first eight DDD extracts PRs reduced the delta from; 99 changed files, and 5,314 additions and 2,946 deletions. c. dgasmith:recursive to; 59 changed files, and 3,408 additions and 1,885 deletions. c. loriab:recursive62; so here's No. 9 of the DDD series, #1351. ## Todos; - [x] This is the non-class parts of changes to finite difference. Mostly; * using pieces from Mol, rather than mol, to reduce dependence on psi objects; * use more numpy, less Matrix; * consolidate printing so can go to logging; * start to pass finite difference options (points, steps, projection) as kwargs rather than having findif consult global options; - [x] added in the dipder from dipole but it's not used; - closes #1683; - [x] along the way, psimrcc-fd-freq1 failed. as far as I can judge now, this is an existing bug. part of the old output is below. psi is evaulating the gradient, finding it over the cutoff, and so recommending not projecting rotations. then, because of https://github.com/psi4/psi4/blob/master/psi4/driver/driver.py#L1613, that setting of FD_PROJECT gets tossed, and findif runs projecting rotations, and the test passes. I'm calling this a bug and setting fd_project in the input to force the array dimensions to match and the test to pass. glad to hear other interpretations. ```. Based on options and gradient (rms=3.60E-02), recommend projecting translations and not projecting rotations.; hessian() will perform frequency computation by finite difference of analytic energies. ----------------------------------------------------------; FINDIF; R. A. King and Jonathon Misiewicz; ---------------------------------------------------------. Using finite-differences of gradients to determine vibrational frequencies and; normal modes. Resulting frequencies are only valid at stationary points.; Generating geometries for use with 5-point formula.; Displacement size will be 1.00e-02.; Number of atoms is 2.; Number of irreps is 8.; Number of SALCs is 1.; Translations proj",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2552
https://github.com/psi4/psi4/pull/2552:1135,Testability,test,test,1135,"d 5,314 additions and 2,946 deletions. c. dgasmith:recursive to; 59 changed files, and 3,408 additions and 1,885 deletions. c. loriab:recursive62; so here's No. 9 of the DDD series, #1351. ## Todos; - [x] This is the non-class parts of changes to finite difference. Mostly; * using pieces from Mol, rather than mol, to reduce dependence on psi objects; * use more numpy, less Matrix; * consolidate printing so can go to logging; * start to pass finite difference options (points, steps, projection) as kwargs rather than having findif consult global options; - [x] added in the dipder from dipole but it's not used; - closes #1683; - [x] along the way, psimrcc-fd-freq1 failed. as far as I can judge now, this is an existing bug. part of the old output is below. psi is evaulating the gradient, finding it over the cutoff, and so recommending not projecting rotations. then, because of https://github.com/psi4/psi4/blob/master/psi4/driver/driver.py#L1613, that setting of FD_PROJECT gets tossed, and findif runs projecting rotations, and the test passes. I'm calling this a bug and setting fd_project in the input to force the array dimensions to match and the test to pass. glad to hear other interpretations. ```. Based on options and gradient (rms=3.60E-02), recommend projecting translations and not projecting rotations.; hessian() will perform frequency computation by finite difference of analytic energies. ----------------------------------------------------------; FINDIF; R. A. King and Jonathon Misiewicz; ---------------------------------------------------------. Using finite-differences of gradients to determine vibrational frequencies and; normal modes. Resulting frequencies are only valid at stationary points.; Generating geometries for use with 5-point formula.; Displacement size will be 1.00e-02.; Number of atoms is 2.; Number of irreps is 8.; Number of SALCs is 1.; Translations projected? 1. Rotations projected? 1.; Index of SALCs per irrep:; ```; - [x] ADDED: moved the wr",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2552
https://github.com/psi4/psi4/pull/2552:1254,Testability,test,test,1254,"eletions. c. loriab:recursive62; so here's No. 9 of the DDD series, #1351. ## Todos; - [x] This is the non-class parts of changes to finite difference. Mostly; * using pieces from Mol, rather than mol, to reduce dependence on psi objects; * use more numpy, less Matrix; * consolidate printing so can go to logging; * start to pass finite difference options (points, steps, projection) as kwargs rather than having findif consult global options; - [x] added in the dipder from dipole but it's not used; - closes #1683; - [x] along the way, psimrcc-fd-freq1 failed. as far as I can judge now, this is an existing bug. part of the old output is below. psi is evaulating the gradient, finding it over the cutoff, and so recommending not projecting rotations. then, because of https://github.com/psi4/psi4/blob/master/psi4/driver/driver.py#L1613, that setting of FD_PROJECT gets tossed, and findif runs projecting rotations, and the test passes. I'm calling this a bug and setting fd_project in the input to force the array dimensions to match and the test to pass. glad to hear other interpretations. ```. Based on options and gradient (rms=3.60E-02), recommend projecting translations and not projecting rotations.; hessian() will perform frequency computation by finite difference of analytic energies. ----------------------------------------------------------; FINDIF; R. A. King and Jonathon Misiewicz; ---------------------------------------------------------. Using finite-differences of gradients to determine vibrational frequencies and; normal modes. Resulting frequencies are only valid at stationary points.; Generating geometries for use with 5-point formula.; Displacement size will be 1.00e-02.; Number of atoms is 2.; Number of irreps is 8.; Number of SALCs is 1.; Translations projected? 1. Rotations projected? 1.; Index of SALCs per irrep:; ```; - [x] ADDED: moved the write_hessian fn and collected write_gradient into a matching fn. ## Checklist; - [x] Tests added for any new featur",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2552
https://github.com/psi4/psi4/pull/2552:2177,Testability,Test,Tests,2177,"l, to reduce dependence on psi objects; * use more numpy, less Matrix; * consolidate printing so can go to logging; * start to pass finite difference options (points, steps, projection) as kwargs rather than having findif consult global options; - [x] added in the dipder from dipole but it's not used; - closes #1683; - [x] along the way, psimrcc-fd-freq1 failed. as far as I can judge now, this is an existing bug. part of the old output is below. psi is evaulating the gradient, finding it over the cutoff, and so recommending not projecting rotations. then, because of https://github.com/psi4/psi4/blob/master/psi4/driver/driver.py#L1613, that setting of FD_PROJECT gets tossed, and findif runs projecting rotations, and the test passes. I'm calling this a bug and setting fd_project in the input to force the array dimensions to match and the test to pass. glad to hear other interpretations. ```. Based on options and gradient (rms=3.60E-02), recommend projecting translations and not projecting rotations.; hessian() will perform frequency computation by finite difference of analytic energies. ----------------------------------------------------------; FINDIF; R. A. King and Jonathon Misiewicz; ---------------------------------------------------------. Using finite-differences of gradients to determine vibrational frequencies and; normal modes. Resulting frequencies are only valid at stationary points.; Generating geometries for use with 5-point formula.; Displacement size will be 1.00e-02.; Number of atoms is 2.; Number of irreps is 8.; Number of SALCs is 1.; Translations projected? 1. Rotations projected? 1.; Index of SALCs per irrep:; ```; - [x] ADDED: moved the write_hessian fn and collected write_gradient into a matching fn. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2552
https://github.com/psi4/psi4/pull/2552:2251,Testability,test,tests,2251,"l, to reduce dependence on psi objects; * use more numpy, less Matrix; * consolidate printing so can go to logging; * start to pass finite difference options (points, steps, projection) as kwargs rather than having findif consult global options; - [x] added in the dipder from dipole but it's not used; - closes #1683; - [x] along the way, psimrcc-fd-freq1 failed. as far as I can judge now, this is an existing bug. part of the old output is below. psi is evaulating the gradient, finding it over the cutoff, and so recommending not projecting rotations. then, because of https://github.com/psi4/psi4/blob/master/psi4/driver/driver.py#L1613, that setting of FD_PROJECT gets tossed, and findif runs projecting rotations, and the test passes. I'm calling this a bug and setting fd_project in the input to force the array dimensions to match and the test to pass. glad to hear other interpretations. ```. Based on options and gradient (rms=3.60E-02), recommend projecting translations and not projecting rotations.; hessian() will perform frequency computation by finite difference of analytic energies. ----------------------------------------------------------; FINDIF; R. A. King and Jonathon Misiewicz; ---------------------------------------------------------. Using finite-differences of gradients to determine vibrational frequencies and; normal modes. Resulting frequencies are only valid at stationary points.; Generating geometries for use with 5-point formula.; Displacement size will be 1.00e-02.; Number of atoms is 2.; Number of irreps is 8.; Number of SALCs is 1.; Translations projected? 1. Rotations projected? 1.; Index of SALCs per irrep:; ```; - [x] ADDED: moved the write_hessian fn and collected write_gradient into a matching fn. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2552
https://github.com/psi4/psi4/pull/2552:2342,Testability,test,tests,2342,"l, to reduce dependence on psi objects; * use more numpy, less Matrix; * consolidate printing so can go to logging; * start to pass finite difference options (points, steps, projection) as kwargs rather than having findif consult global options; - [x] added in the dipder from dipole but it's not used; - closes #1683; - [x] along the way, psimrcc-fd-freq1 failed. as far as I can judge now, this is an existing bug. part of the old output is below. psi is evaulating the gradient, finding it over the cutoff, and so recommending not projecting rotations. then, because of https://github.com/psi4/psi4/blob/master/psi4/driver/driver.py#L1613, that setting of FD_PROJECT gets tossed, and findif runs projecting rotations, and the test passes. I'm calling this a bug and setting fd_project in the input to force the array dimensions to match and the test to pass. glad to hear other interpretations. ```. Based on options and gradient (rms=3.60E-02), recommend projecting translations and not projecting rotations.; hessian() will perform frequency computation by finite difference of analytic energies. ----------------------------------------------------------; FINDIF; R. A. King and Jonathon Misiewicz; ---------------------------------------------------------. Using finite-differences of gradients to determine vibrational frequencies and; normal modes. Resulting frequencies are only valid at stationary points.; Generating geometries for use with 5-point formula.; Displacement size will be 1.00e-02.; Number of atoms is 2.; Number of irreps is 8.; Number of SALCs is 1.; Translations projected? 1. Rotations projected? 1.; Index of SALCs per irrep:; ```; - [x] ADDED: moved the write_hessian fn and collected write_gradient into a matching fn. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2552
https://github.com/psi4/psi4/issues/2553:119,Availability,down,down,119,"Is it possible to write the geometry of a molecule in python via a function?. For example, I want to take an SDF, chop down to only the coordinates of the atoms, then plug those coordinates into ""psi4.geometry(...)"" all without leaving python. Currently, it looks like ""psi4.geometry(...)"" only takes comments as an input, so it's impossible to write the coordinates via a function. I know I can work around this by writing in bash and running a calculation on a stand alone input file, but this makes life more difficult because if I want to run multiple calculations I would either collect 10^x in/output files or write over preceding ones limiting me to non-parallel computing.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2553
https://github.com/psi4/psi4/issues/2554:37,Testability,test,testing,37,"`sowreap` should be removed from the testing machinery, following the example of [this commit](https://github.com/psi4/psi4/pull/2551/commits/8461a9be3bf8c67af9244d8f51216c5f26331b18). The analogue of `psitest.pl` that may need to be removed, are some [commented out tests in CMakeLists.txt](https://github.com/psi4/psi4/blob/master/tests/CMakeLists.txt#L31-L33) along with the tests themselves.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2554
https://github.com/psi4/psi4/issues/2554:267,Testability,test,tests,267,"`sowreap` should be removed from the testing machinery, following the example of [this commit](https://github.com/psi4/psi4/pull/2551/commits/8461a9be3bf8c67af9244d8f51216c5f26331b18). The analogue of `psitest.pl` that may need to be removed, are some [commented out tests in CMakeLists.txt](https://github.com/psi4/psi4/blob/master/tests/CMakeLists.txt#L31-L33) along with the tests themselves.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2554
https://github.com/psi4/psi4/issues/2554:333,Testability,test,tests,333,"`sowreap` should be removed from the testing machinery, following the example of [this commit](https://github.com/psi4/psi4/pull/2551/commits/8461a9be3bf8c67af9244d8f51216c5f26331b18). The analogue of `psitest.pl` that may need to be removed, are some [commented out tests in CMakeLists.txt](https://github.com/psi4/psi4/blob/master/tests/CMakeLists.txt#L31-L33) along with the tests themselves.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2554
https://github.com/psi4/psi4/issues/2554:378,Testability,test,tests,378,"`sowreap` should be removed from the testing machinery, following the example of [this commit](https://github.com/psi4/psi4/pull/2551/commits/8461a9be3bf8c67af9244d8f51216c5f26331b18). The analogue of `psitest.pl` that may need to be removed, are some [commented out tests in CMakeLists.txt](https://github.com/psi4/psi4/blob/master/tests/CMakeLists.txt#L31-L33) along with the tests themselves.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2554
https://github.com/psi4/psi4/issues/2555:4236,Modifiability,plugin,plugins,4236, 31. optking/beran: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 32. optking/beran: missing docs comment. `vi optking/beran/input.dat`; - [ ] 33. optking/beran: missing CMakeLists. `vi optking/beran/CMakeLists.txt`; - [ ] 34. optking/dlpc: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 35. optking/dlpc: missing docs comment. `vi optking/dlpc/input.dat`; - [ ] 36. optking/dlpc: missing CMakeLists. `vi optking/dlpc/CMakeLists.txt`; - [ ] 37. optking/h2o: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 38. optking/h2o: missing docs comment. `vi optking/h2o/input.dat`; - [ ] 39. optking/h2o: missing CMakeLists. `vi optking/h2o/CMakeLists.txt`; - [ ] 40. optking/h2os: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 41. optking/h2os: missing docs comment. `vi optking/h2os/input.dat`; - [ ] 42. optking/h2os: missing CMakeLists. `vi optking/h2os/CMakeLists.txt`; - [ ] 43. plugins/skeleton: missing docs comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skelet,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2555
https://github.com/psi4/psi4/issues/2555:4280,Modifiability,plugin,plugins,4280,directory registration. `vi optking/CMakeLists.txt`; - [ ] 32. optking/beran: missing docs comment. `vi optking/beran/input.dat`; - [ ] 33. optking/beran: missing CMakeLists. `vi optking/beran/CMakeLists.txt`; - [ ] 34. optking/dlpc: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 35. optking/dlpc: missing docs comment. `vi optking/dlpc/input.dat`; - [ ] 36. optking/dlpc: missing CMakeLists. `vi optking/dlpc/CMakeLists.txt`; - [ ] 37. optking/h2o: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 38. optking/h2o: missing docs comment. `vi optking/h2o/input.dat`; - [ ] 39. optking/h2o: missing CMakeLists. `vi optking/h2o/CMakeLists.txt`; - [ ] 40. optking/h2os: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 41. optking/h2os: missing docs comment. `vi optking/h2os/input.dat`; - [ ] 42. optking/h2os: missing CMakeLists. `vi optking/h2os/CMakeLists.txt`; - [ ] 43. plugins/skeleton: missing docs comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs commen,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2555
https://github.com/psi4/psi4/issues/2555:4319,Modifiability,plugin,plugins,4319, - [ ] 32. optking/beran: missing docs comment. `vi optking/beran/input.dat`; - [ ] 33. optking/beran: missing CMakeLists. `vi optking/beran/CMakeLists.txt`; - [ ] 34. optking/dlpc: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 35. optking/dlpc: missing docs comment. `vi optking/dlpc/input.dat`; - [ ] 36. optking/dlpc: missing CMakeLists. `vi optking/dlpc/CMakeLists.txt`; - [ ] 37. optking/h2o: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 38. optking/h2o: missing docs comment. `vi optking/h2o/input.dat`; - [ ] 39. optking/h2o: missing CMakeLists. `vi optking/h2o/CMakeLists.txt`; - [ ] 40. optking/h2os: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 41. optking/h2os: missing docs comment. `vi optking/h2os/input.dat`; - [ ] 42. optking/h2os: missing CMakeLists. `vi optking/h2os/CMakeLists.txt`; - [ ] 43. plugins/skeleton: missing docs comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ],MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2555
https://github.com/psi4/psi4/issues/2555:4369,Modifiability,plugin,plugins,4369,comment. `vi optking/beran/input.dat`; - [ ] 33. optking/beran: missing CMakeLists. `vi optking/beran/CMakeLists.txt`; - [ ] 34. optking/dlpc: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 35. optking/dlpc: missing docs comment. `vi optking/dlpc/input.dat`; - [ ] 36. optking/dlpc: missing CMakeLists. `vi optking/dlpc/CMakeLists.txt`; - [ ] 37. optking/h2o: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 38. optking/h2o: missing docs comment. `vi optking/h2o/input.dat`; - [ ] 39. optking/h2o: missing CMakeLists. `vi optking/h2o/CMakeLists.txt`; - [ ] 40. optking/h2os: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 41. optking/h2os: missing docs comment. `vi optking/h2os/input.dat`; - [ ] 42. optking/h2os: missing CMakeLists. `vi optking/h2os/CMakeLists.txt`; - [ ] 43. plugins/skeleton: missing docs comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missin,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2555
https://github.com/psi4/psi4/issues/2555:4413,Modifiability,plugin,plugins,4413,beran: missing CMakeLists. `vi optking/beran/CMakeLists.txt`; - [ ] 34. optking/dlpc: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 35. optking/dlpc: missing docs comment. `vi optking/dlpc/input.dat`; - [ ] 36. optking/dlpc: missing CMakeLists. `vi optking/dlpc/CMakeLists.txt`; - [ ] 37. optking/h2o: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 38. optking/h2o: missing docs comment. `vi optking/h2o/input.dat`; - [ ] 39. optking/h2o: missing CMakeLists. `vi optking/h2o/CMakeLists.txt`; - [ ] 40. optking/h2os: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 41. optking/h2os: missing docs comment. `vi optking/h2os/input.dat`; - [ ] 42. optking/h2os: missing CMakeLists. `vi optking/h2os/CMakeLists.txt`; - [ ] 43. plugins/skeleton: missing docs comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMa,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2555
https://github.com/psi4/psi4/issues/2555:4468,Modifiability,plugin,plugins,4468,CMakeLists.txt`; - [ ] 34. optking/dlpc: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 35. optking/dlpc: missing docs comment. `vi optking/dlpc/input.dat`; - [ ] 36. optking/dlpc: missing CMakeLists. `vi optking/dlpc/CMakeLists.txt`; - [ ] 37. optking/h2o: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 38. optking/h2o: missing docs comment. `vi optking/h2o/input.dat`; - [ ] 39. optking/h2o: missing CMakeLists. `vi optking/h2o/CMakeLists.txt`; - [ ] 40. optking/h2os: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 41. optking/h2os: missing docs comment. `vi optking/h2os/input.dat`; - [ ] 42. optking/h2os: missing CMakeLists. `vi optking/h2os/CMakeLists.txt`; - [ ] 43. plugins/skeleton: missing docs comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavef,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2555
https://github.com/psi4/psi4/issues/2555:4518,Modifiability,plugin,plugins,4518,y registration. `vi optking/CMakeLists.txt`; - [ ] 35. optking/dlpc: missing docs comment. `vi optking/dlpc/input.dat`; - [ ] 36. optking/dlpc: missing CMakeLists. `vi optking/dlpc/CMakeLists.txt`; - [ ] 37. optking/h2o: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 38. optking/h2o: missing docs comment. `vi optking/h2o/input.dat`; - [ ] 39. optking/h2o: missing CMakeLists. `vi optking/h2o/CMakeLists.txt`; - [ ] 40. optking/h2os: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 41. optking/h2os: missing docs comment. `vi optking/h2os/input.dat`; - [ ] 42. optking/h2os: missing CMakeLists. `vi optking/h2os/CMakeLists.txt`; - [ ] 43. plugins/skeleton: missing docs comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2555
https://github.com/psi4/psi4/issues/2555:4579,Modifiability,plugin,plugins,4579,35. optking/dlpc: missing docs comment. `vi optking/dlpc/input.dat`; - [ ] 36. optking/dlpc: missing CMakeLists. `vi optking/dlpc/CMakeLists.txt`; - [ ] 37. optking/h2o: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 38. optking/h2o: missing docs comment. `vi optking/h2o/input.dat`; - [ ] 39. optking/h2o: missing CMakeLists. `vi optking/h2o/CMakeLists.txt`; - [ ] 40. optking/h2os: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 41. optking/h2os: missing docs comment. `vi optking/h2os/input.dat`; - [ ] 42. optking/h2os: missing CMakeLists. `vi optking/h2os/CMakeLists.txt`; - [ ] 43. plugins/skeleton: missing docs comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunctio,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2555
https://github.com/psi4/psi4/issues/2555:4634,Modifiability,plugin,plugins,4634,put.dat`; - [ ] 36. optking/dlpc: missing CMakeLists. `vi optking/dlpc/CMakeLists.txt`; - [ ] 37. optking/h2o: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 38. optking/h2o: missing docs comment. `vi optking/h2o/input.dat`; - [ ] 39. optking/h2o: missing CMakeLists. `vi optking/h2o/CMakeLists.txt`; - [ ] 40. optking/h2os: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 41. optking/h2os: missing docs comment. `vi optking/h2os/input.dat`; - [ ] 42. optking/h2os: missing CMakeLists. `vi optking/h2os/CMakeLists.txt`; - [ ] 43. plugins/skeleton: missing docs comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunction: missing ctest registration. `vi plugins/skeletonwavefunct,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2555
https://github.com/psi4/psi4/issues/2555:4683,Modifiability,plugin,plugins,4683,ng CMakeLists. `vi optking/dlpc/CMakeLists.txt`; - [ ] 37. optking/h2o: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 38. optking/h2o: missing docs comment. `vi optking/h2o/input.dat`; - [ ] 39. optking/h2o: missing CMakeLists. `vi optking/h2o/CMakeLists.txt`; - [ ] 40. optking/h2os: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 41. optking/h2os: missing docs comment. `vi optking/h2os/input.dat`; - [ ] 42. optking/h2os: missing CMakeLists. `vi optking/h2os/CMakeLists.txt`; - [ ] 43. plugins/skeleton: missing docs comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunction: missing ctest registration. `vi plugins/skeletonwavefunction/CMakeLists.txt`; - [ ] 57. props4: ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2555
https://github.com/psi4/psi4/issues/2555:4727,Modifiability,plugin,plugins,4727,. optking/h2o: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 38. optking/h2o: missing docs comment. `vi optking/h2o/input.dat`; - [ ] 39. optking/h2o: missing CMakeLists. `vi optking/h2o/CMakeLists.txt`; - [ ] 40. optking/h2os: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 41. optking/h2os: missing docs comment. `vi optking/h2os/input.dat`; - [ ] 42. optking/h2os: missing CMakeLists. `vi optking/h2os/CMakeLists.txt`; - [ ] 43. plugins/skeleton: missing docs comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunction: missing ctest registration. `vi plugins/skeletonwavefunction/CMakeLists.txt`; - [ ] 57. props4: missing cmake directory registration. `vi CMakeLists.txt`,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2555
https://github.com/psi4/psi4/issues/2555:4782,Modifiability,plugin,plugins,4782,ration. `vi optking/CMakeLists.txt`; - [ ] 38. optking/h2o: missing docs comment. `vi optking/h2o/input.dat`; - [ ] 39. optking/h2o: missing CMakeLists. `vi optking/h2o/CMakeLists.txt`; - [ ] 40. optking/h2os: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 41. optking/h2os: missing docs comment. `vi optking/h2os/input.dat`; - [ ] 42. optking/h2os: missing CMakeLists. `vi optking/h2os/CMakeLists.txt`; - [ ] 43. plugins/skeleton: missing docs comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunction: missing ctest registration. `vi plugins/skeletonwavefunction/CMakeLists.txt`; - [ ] 57. props4: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 58. python/cc-amps: mismatched direc,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2555
https://github.com/psi4/psi4/issues/2555:4831,Modifiability,plugin,plugins,4831, missing docs comment. `vi optking/h2o/input.dat`; - [ ] 39. optking/h2o: missing CMakeLists. `vi optking/h2o/CMakeLists.txt`; - [ ] 40. optking/h2os: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 41. optking/h2os: missing docs comment. `vi optking/h2os/input.dat`; - [ ] 42. optking/h2os: missing CMakeLists. `vi optking/h2os/CMakeLists.txt`; - [ ] 43. plugins/skeleton: missing docs comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunction: missing ctest registration. `vi plugins/skeletonwavefunction/CMakeLists.txt`; - [ ] 57. props4: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest registration name (python-cc,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2555
https://github.com/psi4/psi4/issues/2555:4886,Modifiability,plugin,plugins,4886,dat`; - [ ] 39. optking/h2o: missing CMakeLists. `vi optking/h2o/CMakeLists.txt`; - [ ] 40. optking/h2os: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 41. optking/h2os: missing docs comment. `vi optking/h2os/input.dat`; - [ ] 42. optking/h2os: missing CMakeLists. `vi optking/h2os/CMakeLists.txt`; - [ ] 43. plugins/skeleton: missing docs comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunction: missing ctest registration. `vi plugins/skeletonwavefunction/CMakeLists.txt`; - [ ] 57. props4: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest registration name (python-cc_amps). `vi python/cc-amps/CMakeLists.txt`; -,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2555
https://github.com/psi4/psi4/issues/2555:4936,Modifiability,plugin,plugins,4936,o/CMakeLists.txt`; - [ ] 40. optking/h2os: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 41. optking/h2os: missing docs comment. `vi optking/h2os/input.dat`; - [ ] 42. optking/h2os: missing CMakeLists. `vi optking/h2os/CMakeLists.txt`; - [ ] 43. plugins/skeleton: missing docs comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunction: missing ctest registration. `vi plugins/skeletonwavefunction/CMakeLists.txt`; - [ ] 57. props4: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest registration name (python-cc_amps). `vi python/cc-amps/CMakeLists.txt`; - [ ] 59. python/mints13: missing pytest input generated. check ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2555
https://github.com/psi4/psi4/issues/2555:4997,Modifiability,plugin,plugins,4997,cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 41. optking/h2os: missing docs comment. `vi optking/h2os/input.dat`; - [ ] 42. optking/h2os: missing CMakeLists. `vi optking/h2os/CMakeLists.txt`; - [ ] 43. plugins/skeleton: missing docs comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunction: missing ctest registration. `vi plugins/skeletonwavefunction/CMakeLists.txt`; - [ ] 57. props4: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest registration name (python-cc_amps). `vi python/cc-amps/CMakeLists.txt`; - [ ] 59. python/mints13: missing pytest input generated. check it! `vi python/mints13/test_input.py`; - [ ] 60. p,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2555
https://github.com/psi4/psi4/issues/2555:5052,Modifiability,plugin,plugins,5052, - [ ] 41. optking/h2os: missing docs comment. `vi optking/h2os/input.dat`; - [ ] 42. optking/h2os: missing CMakeLists. `vi optking/h2os/CMakeLists.txt`; - [ ] 43. plugins/skeleton: missing docs comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunction: missing ctest registration. `vi plugins/skeletonwavefunction/CMakeLists.txt`; - [ ] 57. props4: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest registration name (python-cc_amps). `vi python/cc-amps/CMakeLists.txt`; - [ ] 59. python/mints13: missing pytest input generated. check it! `vi python/mints13/test_input.py`; - [ ] 60. pywrap-db2: missing cmake directory registration. `vi CMakeL,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2555
https://github.com/psi4/psi4/issues/2555:5099,Modifiability,plugin,plugins,5099, comment. `vi optking/h2os/input.dat`; - [ ] 42. optking/h2os: missing CMakeLists. `vi optking/h2os/CMakeLists.txt`; - [ ] 43. plugins/skeleton: missing docs comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunction: missing ctest registration. `vi plugins/skeletonwavefunction/CMakeLists.txt`; - [ ] 57. props4: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest registration name (python-cc_amps). `vi python/cc-amps/CMakeLists.txt`; - [ ] 59. python/mints13: missing pytest input generated. check it! `vi python/mints13/test_input.py`; - [ ] 60. pywrap-db2: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 61. pywrap-freq-e-so,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2555
https://github.com/psi4/psi4/issues/2555:5141,Modifiability,plugin,plugins,5141,g/h2os: missing CMakeLists. `vi optking/h2os/CMakeLists.txt`; - [ ] 43. plugins/skeleton: missing docs comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunction: missing ctest registration. `vi plugins/skeletonwavefunction/CMakeLists.txt`; - [ ] 57. props4: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest registration name (python-cc_amps). `vi python/cc-amps/CMakeLists.txt`; - [ ] 59. python/mints13: missing pytest input generated. check it! `vi python/mints13/test_input.py`; - [ ] 60. pywrap-db2: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 61. pywrap-freq-e-sowreap: missing cmake directory registration. `vi CMakeL,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2555
https://github.com/psi4/psi4/issues/2555:5194,Modifiability,plugin,plugins,5194,s/CMakeLists.txt`; - [ ] 43. plugins/skeleton: missing docs comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunction: missing ctest registration. `vi plugins/skeletonwavefunction/CMakeLists.txt`; - [ ] 57. props4: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest registration name (python-cc_amps). `vi python/cc-amps/CMakeLists.txt`; - [ ] 59. python/mints13: missing pytest input generated. check it! `vi python/mints13/test_input.py`; - [ ] 60. pywrap-db2: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 61. pywrap-freq-e-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 62. pywrap-freq-g-sowreap,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2555
https://github.com/psi4/psi4/issues/2555:5241,Modifiability,plugin,plugins,5241,s comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunction: missing ctest registration. `vi plugins/skeletonwavefunction/CMakeLists.txt`; - [ ] 57. props4: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest registration name (python-cc_amps). `vi python/cc-amps/CMakeLists.txt`; - [ ] 59. python/mints13: missing pytest input generated. check it! `vi python/mints13/test_input.py`; - [ ] 60. pywrap-db2: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 61. pywrap-freq-e-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 62. pywrap-freq-g-sowreap: missing cmake directory registration. `vi CMakeLists.txt`,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2555
https://github.com/psi4/psi4/issues/2555:5296,Modifiability,plugin,plugins,5296, [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunction: missing ctest registration. `vi plugins/skeletonwavefunction/CMakeLists.txt`; - [ ] 57. props4: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest registration name (python-cc_amps). `vi python/cc-amps/CMakeLists.txt`; - [ ] 59. python/mints13: missing pytest input generated. check it! `vi python/mints13/test_input.py`; - [ ] 60. pywrap-db2: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 61. pywrap-freq-e-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 62. pywrap-freq-g-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 63. pywrap-opt-sowreap: missing cmake,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2555
https://github.com/psi4/psi4/issues/2555:5346,Modifiability,plugin,plugins,5346,ins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunction: missing ctest registration. `vi plugins/skeletonwavefunction/CMakeLists.txt`; - [ ] 57. props4: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest registration name (python-cc_amps). `vi python/cc-amps/CMakeLists.txt`; - [ ] 59. python/mints13: missing pytest input generated. check it! `vi python/mints13/test_input.py`; - [ ] 60. pywrap-db2: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 61. pywrap-freq-e-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 62. pywrap-freq-g-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 63. pywrap-opt-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 64. scf11-f,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2555
https://github.com/psi4/psi4/issues/2555:5407,Modifiability,plugin,plugins,5407,letonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunction: missing ctest registration. `vi plugins/skeletonwavefunction/CMakeLists.txt`; - [ ] 57. props4: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest registration name (python-cc_amps). `vi python/cc-amps/CMakeLists.txt`; - [ ] 59. python/mints13: missing pytest input generated. check it! `vi python/mints13/test_input.py`; - [ ] 60. pywrap-db2: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 61. pywrap-freq-e-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 62. pywrap-freq-g-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 63. pywrap-opt-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 64. scf11-freq-from-energies: missing cmake directory registr,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2555
https://github.com/psi4/psi4/issues/2555:5462,Modifiability,plugin,plugins,5462,ntegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunction: missing ctest registration. `vi plugins/skeletonwavefunction/CMakeLists.txt`; - [ ] 57. props4: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest registration name (python-cc_amps). `vi python/cc-amps/CMakeLists.txt`; - [ ] 59. python/mints13: missing pytest input generated. check it! `vi python/mints13/test_input.py`; - [ ] 60. pywrap-db2: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 61. pywrap-freq-e-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 62. pywrap-freq-g-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 63. pywrap-opt-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 64. scf11-freq-from-energies: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 65. snsmp2/cc-cc: mismatched ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2555
https://github.com/psi4/psi4/issues/2555:5518,Modifiability,plugin,plugins,5518,naointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunction: missing ctest registration. `vi plugins/skeletonwavefunction/CMakeLists.txt`; - [ ] 57. props4: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest registration name (python-cc_amps). `vi python/cc-amps/CMakeLists.txt`; - [ ] 59. python/mints13: missing pytest input generated. check it! `vi python/mints13/test_input.py`; - [ ] 60. pywrap-db2: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 61. pywrap-freq-e-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 62. pywrap-freq-g-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 63. pywrap-opt-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 64. scf11-freq-from-energies: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 65. snsmp2/cc-cc: mismatched marks ctest (longtests;snsmp;cart) and pytest ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2555
https://github.com/psi4/psi4/issues/2555:5569,Modifiability,plugin,plugins,5569,integrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunction: missing ctest registration. `vi plugins/skeletonwavefunction/CMakeLists.txt`; - [ ] 57. props4: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest registration name (python-cc_amps). `vi python/cc-amps/CMakeLists.txt`; - [ ] 59. python/mints13: missing pytest input generated. check it! `vi python/mints13/test_input.py`; - [ ] 60. pywrap-db2: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 61. pywrap-freq-e-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 62. pywrap-freq-g-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 63. pywrap-opt-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 64. scf11-freq-from-energies: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 65. snsmp2/cc-cc: mismatched marks ctest (longtests;snsmp;cart) and pytest (long;cart). `vi snsmp2/cc-cc/CMakeLists.txt snsmp2/cc-cc/test_i,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2555
https://github.com/psi4/psi4/issues/2555:5631,Modifiability,plugin,plugins,5631,ondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunction: missing ctest registration. `vi plugins/skeletonwavefunction/CMakeLists.txt`; - [ ] 57. props4: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest registration name (python-cc_amps). `vi python/cc-amps/CMakeLists.txt`; - [ ] 59. python/mints13: missing pytest input generated. check it! `vi python/mints13/test_input.py`; - [ ] 60. pywrap-db2: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 61. pywrap-freq-e-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 62. pywrap-freq-g-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 63. pywrap-opt-sowreap: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 64. scf11-freq-from-energies: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 65. snsmp2/cc-cc: mismatched marks ctest (longtests;snsmp;cart) and pytest (long;cart). `vi snsmp2/cc-cc/CMakeLists.txt snsmp2/cc-cc/test_input.py`; - [ ] 66. snsmp2/cf-o: mismatched marks ct,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2555
https://github.com/psi4/psi4/issues/2555:341,Performance,optimiz,optimizer,341,"after #2549, the list from `python tester.py` looks like the below. Most of these are easily healed by figuring out if they're intended to be a test or not. Nots should be removed to an attic or deleted. Also related is #2234 . don't rely on the below -- rerun tester.py as needed. @psi-rking, do you prefer attic or deletion for the un-run optimizer tests?. Complaints; ----------; - [ ] 1. cc5: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 2. cookbook/manual-sow-reap: missing cmake directory registration. `vi cookbook/CMakeLists.txt`; - [ ] 3. cookbook/manual-sow-reap: missing CMakeLists. `vi cookbook/manual-sow-reap/CMakeLists.txt`; - [ ] 4. dfmp2-freq1: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 5. dfmp2-freq2: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 6. dfomp2p5-1: missing ctest registration. `vi dfomp2p5-1/CMakeLists.txt`; - [ ] 7. dfomp2p5-2: missing ctest registration. `vi dfomp2p5-2/CMakeLists.txt`; - [ ] 8. dfomp2p5-grad1: missing ctest registration. `vi dfomp2p5-grad1/CMakeLists.txt`; - [ ] 9. dfomp2p5-grad2: missing ctest registration. `vi dfomp2p5-grad2/CMakeLists.txt`; - [ ] 10. dft-dldf: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 11. dft-dsd: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 12. dft-pbe0-2: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 13. explicit-am-basis: mismatched directory (explicit-am-basis) and ctest registration name (explicit_am_basis). `vi explicit-am-basis/CMakeLists.txt`; - [ ] 14. fsapt-diff1: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 15. fsapt-diff1: missing CMakeLists. `vi fsapt-diff1/CMakeLists.txt`; - [ ] 16. gcp/hf3c-gradient: mismatched marks ctest () and pytest (gradient). `vi gcp/hf3c-gradient/CMakeLists.txt gcp/hf3c-gradient/test_input.py`; - [ ] 17. gcp/hf3c-hessian: mismatched marks ctest () and pytest (hessian). `vi gcp/hf3c-hessian/CMakeLists.txt gcp/hf3c-hessian/test_in",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2555
https://github.com/psi4/psi4/issues/2555:35,Testability,test,tester,35,"after #2549, the list from `python tester.py` looks like the below. Most of these are easily healed by figuring out if they're intended to be a test or not. Nots should be removed to an attic or deleted. Also related is #2234 . don't rely on the below -- rerun tester.py as needed. @psi-rking, do you prefer attic or deletion for the un-run optimizer tests?. Complaints; ----------; - [ ] 1. cc5: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 2. cookbook/manual-sow-reap: missing cmake directory registration. `vi cookbook/CMakeLists.txt`; - [ ] 3. cookbook/manual-sow-reap: missing CMakeLists. `vi cookbook/manual-sow-reap/CMakeLists.txt`; - [ ] 4. dfmp2-freq1: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 5. dfmp2-freq2: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 6. dfomp2p5-1: missing ctest registration. `vi dfomp2p5-1/CMakeLists.txt`; - [ ] 7. dfomp2p5-2: missing ctest registration. `vi dfomp2p5-2/CMakeLists.txt`; - [ ] 8. dfomp2p5-grad1: missing ctest registration. `vi dfomp2p5-grad1/CMakeLists.txt`; - [ ] 9. dfomp2p5-grad2: missing ctest registration. `vi dfomp2p5-grad2/CMakeLists.txt`; - [ ] 10. dft-dldf: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 11. dft-dsd: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 12. dft-pbe0-2: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 13. explicit-am-basis: mismatched directory (explicit-am-basis) and ctest registration name (explicit_am_basis). `vi explicit-am-basis/CMakeLists.txt`; - [ ] 14. fsapt-diff1: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 15. fsapt-diff1: missing CMakeLists. `vi fsapt-diff1/CMakeLists.txt`; - [ ] 16. gcp/hf3c-gradient: mismatched marks ctest () and pytest (gradient). `vi gcp/hf3c-gradient/CMakeLists.txt gcp/hf3c-gradient/test_input.py`; - [ ] 17. gcp/hf3c-hessian: mismatched marks ctest () and pytest (hessian). `vi gcp/hf3c-hessian/CMakeLists.txt gcp/hf3c-hessian/test_in",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2555
https://github.com/psi4/psi4/issues/2555:144,Testability,test,test,144,"after #2549, the list from `python tester.py` looks like the below. Most of these are easily healed by figuring out if they're intended to be a test or not. Nots should be removed to an attic or deleted. Also related is #2234 . don't rely on the below -- rerun tester.py as needed. @psi-rking, do you prefer attic or deletion for the un-run optimizer tests?. Complaints; ----------; - [ ] 1. cc5: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 2. cookbook/manual-sow-reap: missing cmake directory registration. `vi cookbook/CMakeLists.txt`; - [ ] 3. cookbook/manual-sow-reap: missing CMakeLists. `vi cookbook/manual-sow-reap/CMakeLists.txt`; - [ ] 4. dfmp2-freq1: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 5. dfmp2-freq2: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 6. dfomp2p5-1: missing ctest registration. `vi dfomp2p5-1/CMakeLists.txt`; - [ ] 7. dfomp2p5-2: missing ctest registration. `vi dfomp2p5-2/CMakeLists.txt`; - [ ] 8. dfomp2p5-grad1: missing ctest registration. `vi dfomp2p5-grad1/CMakeLists.txt`; - [ ] 9. dfomp2p5-grad2: missing ctest registration. `vi dfomp2p5-grad2/CMakeLists.txt`; - [ ] 10. dft-dldf: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 11. dft-dsd: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 12. dft-pbe0-2: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 13. explicit-am-basis: mismatched directory (explicit-am-basis) and ctest registration name (explicit_am_basis). `vi explicit-am-basis/CMakeLists.txt`; - [ ] 14. fsapt-diff1: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 15. fsapt-diff1: missing CMakeLists. `vi fsapt-diff1/CMakeLists.txt`; - [ ] 16. gcp/hf3c-gradient: mismatched marks ctest () and pytest (gradient). `vi gcp/hf3c-gradient/CMakeLists.txt gcp/hf3c-gradient/test_input.py`; - [ ] 17. gcp/hf3c-hessian: mismatched marks ctest () and pytest (hessian). `vi gcp/hf3c-hessian/CMakeLists.txt gcp/hf3c-hessian/test_in",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2555
https://github.com/psi4/psi4/issues/2555:261,Testability,test,tester,261,"after #2549, the list from `python tester.py` looks like the below. Most of these are easily healed by figuring out if they're intended to be a test or not. Nots should be removed to an attic or deleted. Also related is #2234 . don't rely on the below -- rerun tester.py as needed. @psi-rking, do you prefer attic or deletion for the un-run optimizer tests?. Complaints; ----------; - [ ] 1. cc5: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 2. cookbook/manual-sow-reap: missing cmake directory registration. `vi cookbook/CMakeLists.txt`; - [ ] 3. cookbook/manual-sow-reap: missing CMakeLists. `vi cookbook/manual-sow-reap/CMakeLists.txt`; - [ ] 4. dfmp2-freq1: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 5. dfmp2-freq2: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 6. dfomp2p5-1: missing ctest registration. `vi dfomp2p5-1/CMakeLists.txt`; - [ ] 7. dfomp2p5-2: missing ctest registration. `vi dfomp2p5-2/CMakeLists.txt`; - [ ] 8. dfomp2p5-grad1: missing ctest registration. `vi dfomp2p5-grad1/CMakeLists.txt`; - [ ] 9. dfomp2p5-grad2: missing ctest registration. `vi dfomp2p5-grad2/CMakeLists.txt`; - [ ] 10. dft-dldf: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 11. dft-dsd: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 12. dft-pbe0-2: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 13. explicit-am-basis: mismatched directory (explicit-am-basis) and ctest registration name (explicit_am_basis). `vi explicit-am-basis/CMakeLists.txt`; - [ ] 14. fsapt-diff1: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 15. fsapt-diff1: missing CMakeLists. `vi fsapt-diff1/CMakeLists.txt`; - [ ] 16. gcp/hf3c-gradient: mismatched marks ctest () and pytest (gradient). `vi gcp/hf3c-gradient/CMakeLists.txt gcp/hf3c-gradient/test_input.py`; - [ ] 17. gcp/hf3c-hessian: mismatched marks ctest () and pytest (hessian). `vi gcp/hf3c-hessian/CMakeLists.txt gcp/hf3c-hessian/test_in",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2555
https://github.com/psi4/psi4/issues/2555:351,Testability,test,tests,351,"after #2549, the list from `python tester.py` looks like the below. Most of these are easily healed by figuring out if they're intended to be a test or not. Nots should be removed to an attic or deleted. Also related is #2234 . don't rely on the below -- rerun tester.py as needed. @psi-rking, do you prefer attic or deletion for the un-run optimizer tests?. Complaints; ----------; - [ ] 1. cc5: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 2. cookbook/manual-sow-reap: missing cmake directory registration. `vi cookbook/CMakeLists.txt`; - [ ] 3. cookbook/manual-sow-reap: missing CMakeLists. `vi cookbook/manual-sow-reap/CMakeLists.txt`; - [ ] 4. dfmp2-freq1: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 5. dfmp2-freq2: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 6. dfomp2p5-1: missing ctest registration. `vi dfomp2p5-1/CMakeLists.txt`; - [ ] 7. dfomp2p5-2: missing ctest registration. `vi dfomp2p5-2/CMakeLists.txt`; - [ ] 8. dfomp2p5-grad1: missing ctest registration. `vi dfomp2p5-grad1/CMakeLists.txt`; - [ ] 9. dfomp2p5-grad2: missing ctest registration. `vi dfomp2p5-grad2/CMakeLists.txt`; - [ ] 10. dft-dldf: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 11. dft-dsd: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 12. dft-pbe0-2: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 13. explicit-am-basis: mismatched directory (explicit-am-basis) and ctest registration name (explicit_am_basis). `vi explicit-am-basis/CMakeLists.txt`; - [ ] 14. fsapt-diff1: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 15. fsapt-diff1: missing CMakeLists. `vi fsapt-diff1/CMakeLists.txt`; - [ ] 16. gcp/hf3c-gradient: mismatched marks ctest () and pytest (gradient). `vi gcp/hf3c-gradient/CMakeLists.txt gcp/hf3c-gradient/test_input.py`; - [ ] 17. gcp/hf3c-hessian: mismatched marks ctest () and pytest (hessian). `vi gcp/hf3c-hessian/CMakeLists.txt gcp/hf3c-hessian/test_in",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2555
https://github.com/psi4/psi4/pull/2557:120,Energy Efficiency,reduce,reduce,120,"## Description; This is No. 10 of the DDD series, #1351. ## Todos; - mostly a few little differences with ddd that will reduce the changed line overhead; - [x] add logging printing, minimize imports; - [x] `mol = core.Molecule.from_schema(molschemus, nonphysical=True)` allows freq-masses test to run in ddd. nonphysical flag allows user-set atomic masses outside the known isotope range. the schema runner shouldn't be the block to this.; - [x] in tests add some alternate ref values. sometimes these are conventional, which can be handy reusing a test in a non-df program; - [x] adding deprecation warnings is good, but we don't often actually delete the fn promptly at the version we say it will stop working at. this is harmless, in my opinion, as it gives people longer to adapt, and developers can clear away the old fns when they actually become inconvenient. to better reflect this state of affairs, the standard message ""Using blah is deprecated, and in version it will stop working"" has been changed to ""Using blah is deprecated, and as soon as version it will stop working"". this also removes the temptation to keep incrementing <version>, which gives a misleading impression about how long ago users were warned. have backtracked on run_json accordingly from 1.7 to 1.5. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2557
https://github.com/psi4/psi4/pull/2557:778,Energy Efficiency,adapt,adapt,778,"## Description; This is No. 10 of the DDD series, #1351. ## Todos; - mostly a few little differences with ddd that will reduce the changed line overhead; - [x] add logging printing, minimize imports; - [x] `mol = core.Molecule.from_schema(molschemus, nonphysical=True)` allows freq-masses test to run in ddd. nonphysical flag allows user-set atomic masses outside the known isotope range. the schema runner shouldn't be the block to this.; - [x] in tests add some alternate ref values. sometimes these are conventional, which can be handy reusing a test in a non-df program; - [x] adding deprecation warnings is good, but we don't often actually delete the fn promptly at the version we say it will stop working at. this is harmless, in my opinion, as it gives people longer to adapt, and developers can clear away the old fns when they actually become inconvenient. to better reflect this state of affairs, the standard message ""Using blah is deprecated, and in version it will stop working"" has been changed to ""Using blah is deprecated, and as soon as version it will stop working"". this also removes the temptation to keep incrementing <version>, which gives a misleading impression about how long ago users were warned. have backtracked on run_json accordingly from 1.7 to 1.5. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2557
https://github.com/psi4/psi4/pull/2557:921,Integrability,message,message,921,"## Description; This is No. 10 of the DDD series, #1351. ## Todos; - mostly a few little differences with ddd that will reduce the changed line overhead; - [x] add logging printing, minimize imports; - [x] `mol = core.Molecule.from_schema(molschemus, nonphysical=True)` allows freq-masses test to run in ddd. nonphysical flag allows user-set atomic masses outside the known isotope range. the schema runner shouldn't be the block to this.; - [x] in tests add some alternate ref values. sometimes these are conventional, which can be handy reusing a test in a non-df program; - [x] adding deprecation warnings is good, but we don't often actually delete the fn promptly at the version we say it will stop working at. this is harmless, in my opinion, as it gives people longer to adapt, and developers can clear away the old fns when they actually become inconvenient. to better reflect this state of affairs, the standard message ""Using blah is deprecated, and in version it will stop working"" has been changed to ""Using blah is deprecated, and as soon as version it will stop working"". this also removes the temptation to keep incrementing <version>, which gives a misleading impression about how long ago users were warned. have backtracked on run_json accordingly from 1.7 to 1.5. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2557
https://github.com/psi4/psi4/pull/2557:778,Modifiability,adapt,adapt,778,"## Description; This is No. 10 of the DDD series, #1351. ## Todos; - mostly a few little differences with ddd that will reduce the changed line overhead; - [x] add logging printing, minimize imports; - [x] `mol = core.Molecule.from_schema(molschemus, nonphysical=True)` allows freq-masses test to run in ddd. nonphysical flag allows user-set atomic masses outside the known isotope range. the schema runner shouldn't be the block to this.; - [x] in tests add some alternate ref values. sometimes these are conventional, which can be handy reusing a test in a non-df program; - [x] adding deprecation warnings is good, but we don't often actually delete the fn promptly at the version we say it will stop working at. this is harmless, in my opinion, as it gives people longer to adapt, and developers can clear away the old fns when they actually become inconvenient. to better reflect this state of affairs, the standard message ""Using blah is deprecated, and in version it will stop working"" has been changed to ""Using blah is deprecated, and as soon as version it will stop working"". this also removes the temptation to keep incrementing <version>, which gives a misleading impression about how long ago users were warned. have backtracked on run_json accordingly from 1.7 to 1.5. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2557
https://github.com/psi4/psi4/pull/2557:164,Testability,log,logging,164,"## Description; This is No. 10 of the DDD series, #1351. ## Todos; - mostly a few little differences with ddd that will reduce the changed line overhead; - [x] add logging printing, minimize imports; - [x] `mol = core.Molecule.from_schema(molschemus, nonphysical=True)` allows freq-masses test to run in ddd. nonphysical flag allows user-set atomic masses outside the known isotope range. the schema runner shouldn't be the block to this.; - [x] in tests add some alternate ref values. sometimes these are conventional, which can be handy reusing a test in a non-df program; - [x] adding deprecation warnings is good, but we don't often actually delete the fn promptly at the version we say it will stop working at. this is harmless, in my opinion, as it gives people longer to adapt, and developers can clear away the old fns when they actually become inconvenient. to better reflect this state of affairs, the standard message ""Using blah is deprecated, and in version it will stop working"" has been changed to ""Using blah is deprecated, and as soon as version it will stop working"". this also removes the temptation to keep incrementing <version>, which gives a misleading impression about how long ago users were warned. have backtracked on run_json accordingly from 1.7 to 1.5. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2557
https://github.com/psi4/psi4/pull/2557:289,Testability,test,test,289,"## Description; This is No. 10 of the DDD series, #1351. ## Todos; - mostly a few little differences with ddd that will reduce the changed line overhead; - [x] add logging printing, minimize imports; - [x] `mol = core.Molecule.from_schema(molschemus, nonphysical=True)` allows freq-masses test to run in ddd. nonphysical flag allows user-set atomic masses outside the known isotope range. the schema runner shouldn't be the block to this.; - [x] in tests add some alternate ref values. sometimes these are conventional, which can be handy reusing a test in a non-df program; - [x] adding deprecation warnings is good, but we don't often actually delete the fn promptly at the version we say it will stop working at. this is harmless, in my opinion, as it gives people longer to adapt, and developers can clear away the old fns when they actually become inconvenient. to better reflect this state of affairs, the standard message ""Using blah is deprecated, and in version it will stop working"" has been changed to ""Using blah is deprecated, and as soon as version it will stop working"". this also removes the temptation to keep incrementing <version>, which gives a misleading impression about how long ago users were warned. have backtracked on run_json accordingly from 1.7 to 1.5. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2557
https://github.com/psi4/psi4/pull/2557:449,Testability,test,tests,449,"## Description; This is No. 10 of the DDD series, #1351. ## Todos; - mostly a few little differences with ddd that will reduce the changed line overhead; - [x] add logging printing, minimize imports; - [x] `mol = core.Molecule.from_schema(molschemus, nonphysical=True)` allows freq-masses test to run in ddd. nonphysical flag allows user-set atomic masses outside the known isotope range. the schema runner shouldn't be the block to this.; - [x] in tests add some alternate ref values. sometimes these are conventional, which can be handy reusing a test in a non-df program; - [x] adding deprecation warnings is good, but we don't often actually delete the fn promptly at the version we say it will stop working at. this is harmless, in my opinion, as it gives people longer to adapt, and developers can clear away the old fns when they actually become inconvenient. to better reflect this state of affairs, the standard message ""Using blah is deprecated, and in version it will stop working"" has been changed to ""Using blah is deprecated, and as soon as version it will stop working"". this also removes the temptation to keep incrementing <version>, which gives a misleading impression about how long ago users were warned. have backtracked on run_json accordingly from 1.7 to 1.5. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2557
https://github.com/psi4/psi4/pull/2557:549,Testability,test,test,549,"## Description; This is No. 10 of the DDD series, #1351. ## Todos; - mostly a few little differences with ddd that will reduce the changed line overhead; - [x] add logging printing, minimize imports; - [x] `mol = core.Molecule.from_schema(molschemus, nonphysical=True)` allows freq-masses test to run in ddd. nonphysical flag allows user-set atomic masses outside the known isotope range. the schema runner shouldn't be the block to this.; - [x] in tests add some alternate ref values. sometimes these are conventional, which can be handy reusing a test in a non-df program; - [x] adding deprecation warnings is good, but we don't often actually delete the fn promptly at the version we say it will stop working at. this is harmless, in my opinion, as it gives people longer to adapt, and developers can clear away the old fns when they actually become inconvenient. to better reflect this state of affairs, the standard message ""Using blah is deprecated, and in version it will stop working"" has been changed to ""Using blah is deprecated, and as soon as version it will stop working"". this also removes the temptation to keep incrementing <version>, which gives a misleading impression about how long ago users were warned. have backtracked on run_json accordingly from 1.7 to 1.5. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2557
https://github.com/psi4/psi4/pull/2557:1303,Testability,Test,Tests,1303,"## Description; This is No. 10 of the DDD series, #1351. ## Todos; - mostly a few little differences with ddd that will reduce the changed line overhead; - [x] add logging printing, minimize imports; - [x] `mol = core.Molecule.from_schema(molschemus, nonphysical=True)` allows freq-masses test to run in ddd. nonphysical flag allows user-set atomic masses outside the known isotope range. the schema runner shouldn't be the block to this.; - [x] in tests add some alternate ref values. sometimes these are conventional, which can be handy reusing a test in a non-df program; - [x] adding deprecation warnings is good, but we don't often actually delete the fn promptly at the version we say it will stop working at. this is harmless, in my opinion, as it gives people longer to adapt, and developers can clear away the old fns when they actually become inconvenient. to better reflect this state of affairs, the standard message ""Using blah is deprecated, and in version it will stop working"" has been changed to ""Using blah is deprecated, and as soon as version it will stop working"". this also removes the temptation to keep incrementing <version>, which gives a misleading impression about how long ago users were warned. have backtracked on run_json accordingly from 1.7 to 1.5. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2557
https://github.com/psi4/psi4/pull/2557:1377,Testability,test,tests,1377,"## Description; This is No. 10 of the DDD series, #1351. ## Todos; - mostly a few little differences with ddd that will reduce the changed line overhead; - [x] add logging printing, minimize imports; - [x] `mol = core.Molecule.from_schema(molschemus, nonphysical=True)` allows freq-masses test to run in ddd. nonphysical flag allows user-set atomic masses outside the known isotope range. the schema runner shouldn't be the block to this.; - [x] in tests add some alternate ref values. sometimes these are conventional, which can be handy reusing a test in a non-df program; - [x] adding deprecation warnings is good, but we don't often actually delete the fn promptly at the version we say it will stop working at. this is harmless, in my opinion, as it gives people longer to adapt, and developers can clear away the old fns when they actually become inconvenient. to better reflect this state of affairs, the standard message ""Using blah is deprecated, and in version it will stop working"" has been changed to ""Using blah is deprecated, and as soon as version it will stop working"". this also removes the temptation to keep incrementing <version>, which gives a misleading impression about how long ago users were warned. have backtracked on run_json accordingly from 1.7 to 1.5. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2557
https://github.com/psi4/psi4/pull/2557:1468,Testability,test,tests,1468,"## Description; This is No. 10 of the DDD series, #1351. ## Todos; - mostly a few little differences with ddd that will reduce the changed line overhead; - [x] add logging printing, minimize imports; - [x] `mol = core.Molecule.from_schema(molschemus, nonphysical=True)` allows freq-masses test to run in ddd. nonphysical flag allows user-set atomic masses outside the known isotope range. the schema runner shouldn't be the block to this.; - [x] in tests add some alternate ref values. sometimes these are conventional, which can be handy reusing a test in a non-df program; - [x] adding deprecation warnings is good, but we don't often actually delete the fn promptly at the version we say it will stop working at. this is harmless, in my opinion, as it gives people longer to adapt, and developers can clear away the old fns when they actually become inconvenient. to better reflect this state of affairs, the standard message ""Using blah is deprecated, and in version it will stop working"" has been changed to ""Using blah is deprecated, and as soon as version it will stop working"". this also removes the temptation to keep incrementing <version>, which gives a misleading impression about how long ago users were warned. have backtracked on run_json accordingly from 1.7 to 1.5. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2557
https://github.com/psi4/psi4/pull/2557:804,Usability,clear,clear,804,"## Description; This is No. 10 of the DDD series, #1351. ## Todos; - mostly a few little differences with ddd that will reduce the changed line overhead; - [x] add logging printing, minimize imports; - [x] `mol = core.Molecule.from_schema(molschemus, nonphysical=True)` allows freq-masses test to run in ddd. nonphysical flag allows user-set atomic masses outside the known isotope range. the schema runner shouldn't be the block to this.; - [x] in tests add some alternate ref values. sometimes these are conventional, which can be handy reusing a test in a non-df program; - [x] adding deprecation warnings is good, but we don't often actually delete the fn promptly at the version we say it will stop working at. this is harmless, in my opinion, as it gives people longer to adapt, and developers can clear away the old fns when they actually become inconvenient. to better reflect this state of affairs, the standard message ""Using blah is deprecated, and in version it will stop working"" has been changed to ""Using blah is deprecated, and as soon as version it will stop working"". this also removes the temptation to keep incrementing <version>, which gives a misleading impression about how long ago users were warned. have backtracked on run_json accordingly from 1.7 to 1.5. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2557
https://github.com/psi4/psi4/issues/2559:321,Usability,simpl,simple,321,"Carried forward from [forum request](http://forum.psicode.org/t/calculations-with-custom-basis-sets-run-slower-with-multiple-threads/2461). According to the reporter, upon using a custom gbs file (provided in the issue), increasing the number of threads causes an SCF gradient computation to take _longer_ on a system as simple as water. I haven't reproduced this yet, but this is serious if true.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2559
https://github.com/psi4/psi4/issues/2560:836,Availability,ping,ping,836,"Pair energies computed by `fnocc` have some issues:. 1. They're not computed consistently across methods. DF-CCSD has them, but non-DF methods do not, for some reason.; 2. `fnocc` computes spin-summed pair energies. The convention we agreed upon at the conference call was to separate same-spin and opposite-spin pair energies.; 3. `fnocc` stores the pair energies with the convention that \sum_{ij} e_ij should equal the correlation energy. As agreed upon at the conference call, we want e_ij to be the total energy of the (i, j) pair. If i != j, the current convention is off by a factor of 2.; 4. The `fnocc` pair energies do not include the delta MP2 correction, so \sum_{ij} e_ij does not equal the correlation energy if FNOs are used. I'll be the one to deal with at least the three items on this list, but obligatory @edeprince3 ping.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2560
https://github.com/psi4/psi4/issues/2560:434,Energy Efficiency,energy,energy,434,"Pair energies computed by `fnocc` have some issues:. 1. They're not computed consistently across methods. DF-CCSD has them, but non-DF methods do not, for some reason.; 2. `fnocc` computes spin-summed pair energies. The convention we agreed upon at the conference call was to separate same-spin and opposite-spin pair energies.; 3. `fnocc` stores the pair energies with the convention that \sum_{ij} e_ij should equal the correlation energy. As agreed upon at the conference call, we want e_ij to be the total energy of the (i, j) pair. If i != j, the current convention is off by a factor of 2.; 4. The `fnocc` pair energies do not include the delta MP2 correction, so \sum_{ij} e_ij does not equal the correlation energy if FNOs are used. I'll be the one to deal with at least the three items on this list, but obligatory @edeprince3 ping.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2560
https://github.com/psi4/psi4/issues/2560:510,Energy Efficiency,energy,energy,510,"Pair energies computed by `fnocc` have some issues:. 1. They're not computed consistently across methods. DF-CCSD has them, but non-DF methods do not, for some reason.; 2. `fnocc` computes spin-summed pair energies. The convention we agreed upon at the conference call was to separate same-spin and opposite-spin pair energies.; 3. `fnocc` stores the pair energies with the convention that \sum_{ij} e_ij should equal the correlation energy. As agreed upon at the conference call, we want e_ij to be the total energy of the (i, j) pair. If i != j, the current convention is off by a factor of 2.; 4. The `fnocc` pair energies do not include the delta MP2 correction, so \sum_{ij} e_ij does not equal the correlation energy if FNOs are used. I'll be the one to deal with at least the three items on this list, but obligatory @edeprince3 ping.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2560
https://github.com/psi4/psi4/issues/2560:716,Energy Efficiency,energy,energy,716,"Pair energies computed by `fnocc` have some issues:. 1. They're not computed consistently across methods. DF-CCSD has them, but non-DF methods do not, for some reason.; 2. `fnocc` computes spin-summed pair energies. The convention we agreed upon at the conference call was to separate same-spin and opposite-spin pair energies.; 3. `fnocc` stores the pair energies with the convention that \sum_{ij} e_ij should equal the correlation energy. As agreed upon at the conference call, we want e_ij to be the total energy of the (i, j) pair. If i != j, the current convention is off by a factor of 2.; 4. The `fnocc` pair energies do not include the delta MP2 correction, so \sum_{ij} e_ij does not equal the correlation energy if FNOs are used. I'll be the one to deal with at least the three items on this list, but obligatory @edeprince3 ping.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2560
https://github.com/psi4/psi4/pull/2561:407,Availability,ping,ping,407,"## Description; Some miscellaneous code cleanup from my first attempt at fixing #2560. There will be a follow-up PR that renames many variables in this code before I can resume the attempt. Note that although I create Same-Spin and Opposite-Spin matrices, those are currently unused, but will be needed for the #2560 fix. Quick review appreciated, so I can continue the `fnocc` push. Obligatory @edeprince3 ping. ## Todos; - [x] Code cleanup; - [x] Introduced framework for modernizing pair energies in `fnocc`. ## Checklist; - [x] `fnocc` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2561
https://github.com/psi4/psi4/pull/2561:134,Modifiability,variab,variables,134,"## Description; Some miscellaneous code cleanup from my first attempt at fixing #2560. There will be a follow-up PR that renames many variables in this code before I can resume the attempt. Note that although I create Same-Spin and Opposite-Spin matrices, those are currently unused, but will be needed for the #2560 fix. Quick review appreciated, so I can continue the `fnocc` push. Obligatory @edeprince3 ping. ## Todos; - [x] Code cleanup; - [x] Introduced framework for modernizing pair energies in `fnocc`. ## Checklist; - [x] `fnocc` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2561
https://github.com/psi4/psi4/pull/2561:540,Testability,test,tests,540,"## Description; Some miscellaneous code cleanup from my first attempt at fixing #2560. There will be a follow-up PR that renames many variables in this code before I can resume the attempt. Note that although I create Same-Spin and Opposite-Spin matrices, those are currently unused, but will be needed for the #2560 fix. Quick review appreciated, so I can continue the `fnocc` push. Obligatory @edeprince3 ping. ## Todos; - [x] Code cleanup; - [x] Introduced framework for modernizing pair energies in `fnocc`. ## Checklist; - [x] `fnocc` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2561
https://github.com/psi4/psi4/pull/2561:170,Usability,resume,resume,170,"## Description; Some miscellaneous code cleanup from my first attempt at fixing #2560. There will be a follow-up PR that renames many variables in this code before I can resume the attempt. Note that although I create Same-Spin and Opposite-Spin matrices, those are currently unused, but will be needed for the #2560 fix. Quick review appreciated, so I can continue the `fnocc` push. Obligatory @edeprince3 ping. ## Todos; - [x] Code cleanup; - [x] Introduced framework for modernizing pair energies in `fnocc`. ## Checklist; - [x] `fnocc` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2561
https://github.com/psi4/psi4/issues/2564:71,Testability,test,testing,71,"Hello to my dear friends at PSI4. Nick Stair (@nstair) and I were just testing a brand new GPU implementation of ECPs, and ended up needing three codes to do the test. In many cases, all three codes match to the machine epsilon. However, for L+1 = F-type ECPs I'm afraid PySCF and Tachyon match and PSI4 out of the box does not. We see silent differences of O(1.0) au. So while I am not 100% certain, I have a strong suspicion that the F-type ECPs and higher are broke in PSI4. Maybe it is as simple as cranking the compiled L up one in the ECP library? I'm just worried about users silently running broke deep cores. Beer for you all if it is on our end, but thought it was worth raising. . Tech note: Note that the tests below are of the spectra of the V_pq matrices in the AO basis because Nick is too lazy/clever to reorder the PySCF basis functions. We also have tests lower in L of the PSI4 <-> Tachyon matrix elements (same basis ordering, of course!!) that match to mach eps. . ![image](https://user-images.githubusercontent.com/43890147/165858988-c31c42fa-9c58-4068-993a-5648bec9baaf.png)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2564
https://github.com/psi4/psi4/issues/2564:162,Testability,test,test,162,"Hello to my dear friends at PSI4. Nick Stair (@nstair) and I were just testing a brand new GPU implementation of ECPs, and ended up needing three codes to do the test. In many cases, all three codes match to the machine epsilon. However, for L+1 = F-type ECPs I'm afraid PySCF and Tachyon match and PSI4 out of the box does not. We see silent differences of O(1.0) au. So while I am not 100% certain, I have a strong suspicion that the F-type ECPs and higher are broke in PSI4. Maybe it is as simple as cranking the compiled L up one in the ECP library? I'm just worried about users silently running broke deep cores. Beer for you all if it is on our end, but thought it was worth raising. . Tech note: Note that the tests below are of the spectra of the V_pq matrices in the AO basis because Nick is too lazy/clever to reorder the PySCF basis functions. We also have tests lower in L of the PSI4 <-> Tachyon matrix elements (same basis ordering, of course!!) that match to mach eps. . ![image](https://user-images.githubusercontent.com/43890147/165858988-c31c42fa-9c58-4068-993a-5648bec9baaf.png)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2564
https://github.com/psi4/psi4/issues/2564:717,Testability,test,tests,717,"Hello to my dear friends at PSI4. Nick Stair (@nstair) and I were just testing a brand new GPU implementation of ECPs, and ended up needing three codes to do the test. In many cases, all three codes match to the machine epsilon. However, for L+1 = F-type ECPs I'm afraid PySCF and Tachyon match and PSI4 out of the box does not. We see silent differences of O(1.0) au. So while I am not 100% certain, I have a strong suspicion that the F-type ECPs and higher are broke in PSI4. Maybe it is as simple as cranking the compiled L up one in the ECP library? I'm just worried about users silently running broke deep cores. Beer for you all if it is on our end, but thought it was worth raising. . Tech note: Note that the tests below are of the spectra of the V_pq matrices in the AO basis because Nick is too lazy/clever to reorder the PySCF basis functions. We also have tests lower in L of the PSI4 <-> Tachyon matrix elements (same basis ordering, of course!!) that match to mach eps. . ![image](https://user-images.githubusercontent.com/43890147/165858988-c31c42fa-9c58-4068-993a-5648bec9baaf.png)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2564
https://github.com/psi4/psi4/issues/2564:868,Testability,test,tests,868,"Hello to my dear friends at PSI4. Nick Stair (@nstair) and I were just testing a brand new GPU implementation of ECPs, and ended up needing three codes to do the test. In many cases, all three codes match to the machine epsilon. However, for L+1 = F-type ECPs I'm afraid PySCF and Tachyon match and PSI4 out of the box does not. We see silent differences of O(1.0) au. So while I am not 100% certain, I have a strong suspicion that the F-type ECPs and higher are broke in PSI4. Maybe it is as simple as cranking the compiled L up one in the ECP library? I'm just worried about users silently running broke deep cores. Beer for you all if it is on our end, but thought it was worth raising. . Tech note: Note that the tests below are of the spectra of the V_pq matrices in the AO basis because Nick is too lazy/clever to reorder the PySCF basis functions. We also have tests lower in L of the PSI4 <-> Tachyon matrix elements (same basis ordering, of course!!) that match to mach eps. . ![image](https://user-images.githubusercontent.com/43890147/165858988-c31c42fa-9c58-4068-993a-5648bec9baaf.png)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2564
https://github.com/psi4/psi4/issues/2564:493,Usability,simpl,simple,493,"Hello to my dear friends at PSI4. Nick Stair (@nstair) and I were just testing a brand new GPU implementation of ECPs, and ended up needing three codes to do the test. In many cases, all three codes match to the machine epsilon. However, for L+1 = F-type ECPs I'm afraid PySCF and Tachyon match and PSI4 out of the box does not. We see silent differences of O(1.0) au. So while I am not 100% certain, I have a strong suspicion that the F-type ECPs and higher are broke in PSI4. Maybe it is as simple as cranking the compiled L up one in the ECP library? I'm just worried about users silently running broke deep cores. Beer for you all if it is on our end, but thought it was worth raising. . Tech note: Note that the tests below are of the spectra of the V_pq matrices in the AO basis because Nick is too lazy/clever to reorder the PySCF basis functions. We also have tests lower in L of the PSI4 <-> Tachyon matrix elements (same basis ordering, of course!!) that match to mach eps. . ![image](https://user-images.githubusercontent.com/43890147/165858988-c31c42fa-9c58-4068-993a-5648bec9baaf.png)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2564
https://github.com/psi4/psi4/issues/2565:291,Usability,clear,clear,291,"Carried forward from [forum topic](http://forum.psicode.org/t/cisd-quadrupoles/2464/6?u=jmisiewicz). `properties('cisd')` should probably save property names as `CISD` in addition to `CI`. In this case, it's probably also worth saving as `CI UNRELAXED` and `CISD UNRELAXED`, to make crystal clear that these include no orbital response terms.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2565
https://github.com/psi4/psi4/pull/2567:3176,Availability,down,down,3176,"on of one-electron integrals on a quadrature grid. Therefore, there are a number of improvements to be made, in order of increasing difficulty:. - Do a better job at screening small integrals before they're computed (like [these](https://aip.scitation.org/doi/pdf/10.1063/1.5048491)); - Use better grids (such as [here](https://aip.scitation.org/doi/full/10.1063/1.5049435)); - Compute individual integrals faster. This could be done by reusing intermediates in the recursion for integrals involving the same shell-pair and different grid points. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Implement semi-numerical exchange in the `DFCOSK` class; - [x] Add tests & docs. ## Questions; - [x] What do we want the `SCF_TYPE` keyword for this algorithm to be? It's currently `COSK`. It could also be `DFJCOSK`. It might make more sense to call the algorithm `SNK` (for semi-numerical exchange) over `COSK`, as the latter is more general, and will still be accurate even if we change the screening procedure. (The former refers to a very specific screening procedure).; - [x] For anyone who regularly uses COSK: do you have a preference for how the tightness of the integration grids are specified? Currently, the user gives the number of spherical/angular points. We could also predefine a set of allowed spherical/angular combos. That might be easier for users (they don't have to know about lebedev numbers, for example), but it sacrifices flexibility.; - [x] This is less a question and more of a note: the `DFTGrid` class is in serious need of a refactor so that it does not read from global options. This PR kicks the can down the road by adding another constructor to the class, which takes `double`-type options. I'd be happy to hear any thoughts on what to do with this class, though that probably deserves its own issue. ## Checklist; - [x] Tests added for any new features. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2567
https://github.com/psi4/psi4/pull/2567:2714,Deployability,integrat,integration,2714,"on of one-electron integrals on a quadrature grid. Therefore, there are a number of improvements to be made, in order of increasing difficulty:. - Do a better job at screening small integrals before they're computed (like [these](https://aip.scitation.org/doi/pdf/10.1063/1.5048491)); - Use better grids (such as [here](https://aip.scitation.org/doi/full/10.1063/1.5049435)); - Compute individual integrals faster. This could be done by reusing intermediates in the recursion for integrals involving the same shell-pair and different grid points. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Implement semi-numerical exchange in the `DFCOSK` class; - [x] Add tests & docs. ## Questions; - [x] What do we want the `SCF_TYPE` keyword for this algorithm to be? It's currently `COSK`. It could also be `DFJCOSK`. It might make more sense to call the algorithm `SNK` (for semi-numerical exchange) over `COSK`, as the latter is more general, and will still be accurate even if we change the screening procedure. (The former refers to a very specific screening procedure).; - [x] For anyone who regularly uses COSK: do you have a preference for how the tightness of the integration grids are specified? Currently, the user gives the number of spherical/angular points. We could also predefine a set of allowed spherical/angular combos. That might be easier for users (they don't have to know about lebedev numbers, for example), but it sacrifices flexibility.; - [x] This is less a question and more of a note: the `DFTGrid` class is in serious need of a refactor so that it does not read from global options. This PR kicks the can down the road by adding another constructor to the class, which takes `double`-type options. I'd be happy to hear any thoughts on what to do with this class, though that probably deserves its own issue. ## Checklist; - [x] Tests added for any new features. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2567
https://github.com/psi4/psi4/pull/2567:915,Integrability,depend,dependent,915,"## Description; This PR implements a semi-numerical algorithm for computing the exchange (K) matrix as described in [this paper](https://doi.org/10.1016/j.chemphys.2008.10.036) and [this paper](https://doi.org/10.1063/1.3646921) as ""Chain of Spheres"" exchange or COSK. The implementation is added to a new `JK` class, `DFJCOSK`, which combines COSK with a simple direct density-fitted J algorithm. COSK is easily parallelized, completely in-core, and has good scaling--between O(N^1) and O(N^2)--making it ideal for HF/DFT calculations on large systems, particularly calculations for which the `DF` algorithm must store integrals on disk. The low scaling comes at the cost of a large pre-factor, so it shouldn't be used on small systems. In my benchmarking, `DFJCOSK` is almost always faster than `DIRECT` (even with density screening and incremental fock construction). The crossover between `DFJCOSK` and `DF` is dependent on the system, basis, CPU, memory, etc. but I've observed it as early as <3000 basis functions. I've attached a performance comparison of the `DFJCOSK`, `DIRECT`, and `DF` algorithms on a set of linear alkanes in which it's clear that `DFJCOSK` outperforms the other two algorithms for large systems. ![alkanes](https://user-images.githubusercontent.com/16376046/166322946-172d8fee-3ce3-4811-9633-db094219d17e.png). An encouraging fact about these results is that this implementation is far from optimal. The cost of the COSK algorithm is dominated by the evaluation of one-electron integrals on a quadrature grid. Therefore, there are a number of improvements to be made, in order of increasing difficulty:. - Do a better job at screening small integrals before they're computed (like [these](https://aip.scitation.org/doi/pdf/10.1063/1.5048491)); - Use better grids (such as [here](https://aip.scitation.org/doi/full/10.1063/1.5049435)); - Compute individual integrals faster. This could be done by reusing intermediates in the recursion for integrals involving the same she",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2567
https://github.com/psi4/psi4/pull/2567:2714,Integrability,integrat,integration,2714,"on of one-electron integrals on a quadrature grid. Therefore, there are a number of improvements to be made, in order of increasing difficulty:. - Do a better job at screening small integrals before they're computed (like [these](https://aip.scitation.org/doi/pdf/10.1063/1.5048491)); - Use better grids (such as [here](https://aip.scitation.org/doi/full/10.1063/1.5049435)); - Compute individual integrals faster. This could be done by reusing intermediates in the recursion for integrals involving the same shell-pair and different grid points. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Implement semi-numerical exchange in the `DFCOSK` class; - [x] Add tests & docs. ## Questions; - [x] What do we want the `SCF_TYPE` keyword for this algorithm to be? It's currently `COSK`. It could also be `DFJCOSK`. It might make more sense to call the algorithm `SNK` (for semi-numerical exchange) over `COSK`, as the latter is more general, and will still be accurate even if we change the screening procedure. (The former refers to a very specific screening procedure).; - [x] For anyone who regularly uses COSK: do you have a preference for how the tightness of the integration grids are specified? Currently, the user gives the number of spherical/angular points. We could also predefine a set of allowed spherical/angular combos. That might be easier for users (they don't have to know about lebedev numbers, for example), but it sacrifices flexibility.; - [x] This is less a question and more of a note: the `DFTGrid` class is in serious need of a refactor so that it does not read from global options. This PR kicks the can down the road by adding another constructor to the class, which takes `double`-type options. I'd be happy to hear any thoughts on what to do with this class, though that probably deserves its own issue. ## Checklist; - [x] Tests added for any new features. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2567
https://github.com/psi4/psi4/pull/2567:3099,Modifiability,refactor,refactor,3099,"on of one-electron integrals on a quadrature grid. Therefore, there are a number of improvements to be made, in order of increasing difficulty:. - Do a better job at screening small integrals before they're computed (like [these](https://aip.scitation.org/doi/pdf/10.1063/1.5048491)); - Use better grids (such as [here](https://aip.scitation.org/doi/full/10.1063/1.5049435)); - Compute individual integrals faster. This could be done by reusing intermediates in the recursion for integrals involving the same shell-pair and different grid points. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Implement semi-numerical exchange in the `DFCOSK` class; - [x] Add tests & docs. ## Questions; - [x] What do we want the `SCF_TYPE` keyword for this algorithm to be? It's currently `COSK`. It could also be `DFJCOSK`. It might make more sense to call the algorithm `SNK` (for semi-numerical exchange) over `COSK`, as the latter is more general, and will still be accurate even if we change the screening procedure. (The former refers to a very specific screening procedure).; - [x] For anyone who regularly uses COSK: do you have a preference for how the tightness of the integration grids are specified? Currently, the user gives the number of spherical/angular points. We could also predefine a set of allowed spherical/angular combos. That might be easier for users (they don't have to know about lebedev numbers, for example), but it sacrifices flexibility.; - [x] This is less a question and more of a note: the `DFTGrid` class is in serious need of a refactor so that it does not read from global options. This PR kicks the can down the road by adding another constructor to the class, which takes `double`-type options. I'd be happy to hear any thoughts on what to do with this class, though that probably deserves its own issue. ## Checklist; - [x] Tests added for any new features. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2567
https://github.com/psi4/psi4/pull/2567:1037,Performance,perform,performance,1037,"paper](https://doi.org/10.1016/j.chemphys.2008.10.036) and [this paper](https://doi.org/10.1063/1.3646921) as ""Chain of Spheres"" exchange or COSK. The implementation is added to a new `JK` class, `DFJCOSK`, which combines COSK with a simple direct density-fitted J algorithm. COSK is easily parallelized, completely in-core, and has good scaling--between O(N^1) and O(N^2)--making it ideal for HF/DFT calculations on large systems, particularly calculations for which the `DF` algorithm must store integrals on disk. The low scaling comes at the cost of a large pre-factor, so it shouldn't be used on small systems. In my benchmarking, `DFJCOSK` is almost always faster than `DIRECT` (even with density screening and incremental fock construction). The crossover between `DFJCOSK` and `DF` is dependent on the system, basis, CPU, memory, etc. but I've observed it as early as <3000 basis functions. I've attached a performance comparison of the `DFJCOSK`, `DIRECT`, and `DF` algorithms on a set of linear alkanes in which it's clear that `DFJCOSK` outperforms the other two algorithms for large systems. ![alkanes](https://user-images.githubusercontent.com/16376046/166322946-172d8fee-3ce3-4811-9633-db094219d17e.png). An encouraging fact about these results is that this implementation is far from optimal. The cost of the COSK algorithm is dominated by the evaluation of one-electron integrals on a quadrature grid. Therefore, there are a number of improvements to be made, in order of increasing difficulty:. - Do a better job at screening small integrals before they're computed (like [these](https://aip.scitation.org/doi/pdf/10.1063/1.5048491)); - Use better grids (such as [here](https://aip.scitation.org/doi/full/10.1063/1.5049435)); - Compute individual integrals faster. This could be done by reusing intermediates in the recursion for integrals involving the same shell-pair and different grid points. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will acc",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2567
https://github.com/psi4/psi4/pull/2567:744,Testability,benchmark,benchmarking,744,"## Description; This PR implements a semi-numerical algorithm for computing the exchange (K) matrix as described in [this paper](https://doi.org/10.1016/j.chemphys.2008.10.036) and [this paper](https://doi.org/10.1063/1.3646921) as ""Chain of Spheres"" exchange or COSK. The implementation is added to a new `JK` class, `DFJCOSK`, which combines COSK with a simple direct density-fitted J algorithm. COSK is easily parallelized, completely in-core, and has good scaling--between O(N^1) and O(N^2)--making it ideal for HF/DFT calculations on large systems, particularly calculations for which the `DF` algorithm must store integrals on disk. The low scaling comes at the cost of a large pre-factor, so it shouldn't be used on small systems. In my benchmarking, `DFJCOSK` is almost always faster than `DIRECT` (even with density screening and incremental fock construction). The crossover between `DFJCOSK` and `DF` is dependent on the system, basis, CPU, memory, etc. but I've observed it as early as <3000 basis functions. I've attached a performance comparison of the `DFJCOSK`, `DIRECT`, and `DF` algorithms on a set of linear alkanes in which it's clear that `DFJCOSK` outperforms the other two algorithms for large systems. ![alkanes](https://user-images.githubusercontent.com/16376046/166322946-172d8fee-3ce3-4811-9633-db094219d17e.png). An encouraging fact about these results is that this implementation is far from optimal. The cost of the COSK algorithm is dominated by the evaluation of one-electron integrals on a quadrature grid. Therefore, there are a number of improvements to be made, in order of increasing difficulty:. - Do a better job at screening small integrals before they're computed (like [these](https://aip.scitation.org/doi/pdf/10.1063/1.5048491)); - Use better grids (such as [here](https://aip.scitation.org/doi/full/10.1063/1.5049435)); - Compute individual integrals faster. This could be done by reusing intermediates in the recursion for integrals involving the same she",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2567
https://github.com/psi4/psi4/pull/2567:2210,Testability,test,tests,2210,"orms the other two algorithms for large systems. ![alkanes](https://user-images.githubusercontent.com/16376046/166322946-172d8fee-3ce3-4811-9633-db094219d17e.png). An encouraging fact about these results is that this implementation is far from optimal. The cost of the COSK algorithm is dominated by the evaluation of one-electron integrals on a quadrature grid. Therefore, there are a number of improvements to be made, in order of increasing difficulty:. - Do a better job at screening small integrals before they're computed (like [these](https://aip.scitation.org/doi/pdf/10.1063/1.5048491)); - Use better grids (such as [here](https://aip.scitation.org/doi/full/10.1063/1.5049435)); - Compute individual integrals faster. This could be done by reusing intermediates in the recursion for integrals involving the same shell-pair and different grid points. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Implement semi-numerical exchange in the `DFCOSK` class; - [x] Add tests & docs. ## Questions; - [x] What do we want the `SCF_TYPE` keyword for this algorithm to be? It's currently `COSK`. It could also be `DFJCOSK`. It might make more sense to call the algorithm `SNK` (for semi-numerical exchange) over `COSK`, as the latter is more general, and will still be accurate even if we change the screening procedure. (The former refers to a very specific screening procedure).; - [x] For anyone who regularly uses COSK: do you have a preference for how the tightness of the integration grids are specified? Currently, the user gives the number of spherical/angular points. We could also predefine a set of allowed spherical/angular combos. That might be easier for users (they don't have to know about lebedev numbers, for example), but it sacrifices flexibility.; - [x] This is less a question and more of a note: the `DFTGrid` class is in serious need of a refactor so that it does not read from global options. This PR kicks the can d",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2567
https://github.com/psi4/psi4/pull/2567:3399,Testability,Test,Tests,3399,"on of one-electron integrals on a quadrature grid. Therefore, there are a number of improvements to be made, in order of increasing difficulty:. - Do a better job at screening small integrals before they're computed (like [these](https://aip.scitation.org/doi/pdf/10.1063/1.5048491)); - Use better grids (such as [here](https://aip.scitation.org/doi/full/10.1063/1.5049435)); - Compute individual integrals faster. This could be done by reusing intermediates in the recursion for integrals involving the same shell-pair and different grid points. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Implement semi-numerical exchange in the `DFCOSK` class; - [x] Add tests & docs. ## Questions; - [x] What do we want the `SCF_TYPE` keyword for this algorithm to be? It's currently `COSK`. It could also be `DFJCOSK`. It might make more sense to call the algorithm `SNK` (for semi-numerical exchange) over `COSK`, as the latter is more general, and will still be accurate even if we change the screening procedure. (The former refers to a very specific screening procedure).; - [x] For anyone who regularly uses COSK: do you have a preference for how the tightness of the integration grids are specified? Currently, the user gives the number of spherical/angular points. We could also predefine a set of allowed spherical/angular combos. That might be easier for users (they don't have to know about lebedev numbers, for example), but it sacrifices flexibility.; - [x] This is less a question and more of a note: the `DFTGrid` class is in serious need of a refactor so that it does not read from global options. This PR kicks the can down the road by adding another constructor to the class, which takes `double`-type options. I'd be happy to hear any thoughts on what to do with this class, though that probably deserves its own issue. ## Checklist; - [x] Tests added for any new features. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2567
https://github.com/psi4/psi4/pull/2567:356,Usability,simpl,simple,356,"## Description; This PR implements a semi-numerical algorithm for computing the exchange (K) matrix as described in [this paper](https://doi.org/10.1016/j.chemphys.2008.10.036) and [this paper](https://doi.org/10.1063/1.3646921) as ""Chain of Spheres"" exchange or COSK. The implementation is added to a new `JK` class, `DFJCOSK`, which combines COSK with a simple direct density-fitted J algorithm. COSK is easily parallelized, completely in-core, and has good scaling--between O(N^1) and O(N^2)--making it ideal for HF/DFT calculations on large systems, particularly calculations for which the `DF` algorithm must store integrals on disk. The low scaling comes at the cost of a large pre-factor, so it shouldn't be used on small systems. In my benchmarking, `DFJCOSK` is almost always faster than `DIRECT` (even with density screening and incremental fock construction). The crossover between `DFJCOSK` and `DF` is dependent on the system, basis, CPU, memory, etc. but I've observed it as early as <3000 basis functions. I've attached a performance comparison of the `DFJCOSK`, `DIRECT`, and `DF` algorithms on a set of linear alkanes in which it's clear that `DFJCOSK` outperforms the other two algorithms for large systems. ![alkanes](https://user-images.githubusercontent.com/16376046/166322946-172d8fee-3ce3-4811-9633-db094219d17e.png). An encouraging fact about these results is that this implementation is far from optimal. The cost of the COSK algorithm is dominated by the evaluation of one-electron integrals on a quadrature grid. Therefore, there are a number of improvements to be made, in order of increasing difficulty:. - Do a better job at screening small integrals before they're computed (like [these](https://aip.scitation.org/doi/pdf/10.1063/1.5048491)); - Use better grids (such as [here](https://aip.scitation.org/doi/full/10.1063/1.5049435)); - Compute individual integrals faster. This could be done by reusing intermediates in the recursion for integrals involving the same she",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2567
https://github.com/psi4/psi4/pull/2567:1149,Usability,clear,clear,1149,"paper](https://doi.org/10.1016/j.chemphys.2008.10.036) and [this paper](https://doi.org/10.1063/1.3646921) as ""Chain of Spheres"" exchange or COSK. The implementation is added to a new `JK` class, `DFJCOSK`, which combines COSK with a simple direct density-fitted J algorithm. COSK is easily parallelized, completely in-core, and has good scaling--between O(N^1) and O(N^2)--making it ideal for HF/DFT calculations on large systems, particularly calculations for which the `DF` algorithm must store integrals on disk. The low scaling comes at the cost of a large pre-factor, so it shouldn't be used on small systems. In my benchmarking, `DFJCOSK` is almost always faster than `DIRECT` (even with density screening and incremental fock construction). The crossover between `DFJCOSK` and `DF` is dependent on the system, basis, CPU, memory, etc. but I've observed it as early as <3000 basis functions. I've attached a performance comparison of the `DFJCOSK`, `DIRECT`, and `DF` algorithms on a set of linear alkanes in which it's clear that `DFJCOSK` outperforms the other two algorithms for large systems. ![alkanes](https://user-images.githubusercontent.com/16376046/166322946-172d8fee-3ce3-4811-9633-db094219d17e.png). An encouraging fact about these results is that this implementation is far from optimal. The cost of the COSK algorithm is dominated by the evaluation of one-electron integrals on a quadrature grid. Therefore, there are a number of improvements to be made, in order of increasing difficulty:. - Do a better job at screening small integrals before they're computed (like [these](https://aip.scitation.org/doi/pdf/10.1063/1.5048491)); - Use better grids (such as [here](https://aip.scitation.org/doi/full/10.1063/1.5049435)); - Compute individual integrals faster. This could be done by reusing intermediates in the recursion for integrals involving the same shell-pair and different grid points. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will acc",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2567
https://github.com/psi4/psi4/pull/2568:145,Energy Efficiency,adapt,adapted,145,"## Description; This PR moves `fnocc`'s pair energies to the same standard used by `cc`: report MP2 and CC, separate by spin, and construct spin-adapted pair energies as well. The diff is mostly changes in the reference file, so the LoC count is inflated. ## Todos; - [x] Standardize `cc` pair energies. ## Checklist; - [x] `fnocc` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2568
https://github.com/psi4/psi4/pull/2568:145,Modifiability,adapt,adapted,145,"## Description; This PR moves `fnocc`'s pair energies to the same standard used by `cc`: report MP2 and CC, separate by spin, and construct spin-adapted pair energies as well. The diff is mostly changes in the reference file, so the LoC count is inflated. ## Todos; - [x] Standardize `cc` pair energies. ## Checklist; - [x] `fnocc` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2568
https://github.com/psi4/psi4/pull/2568:332,Testability,test,tests,332,"## Description; This PR moves `fnocc`'s pair energies to the same standard used by `cc`: report MP2 and CC, separate by spin, and construct spin-adapted pair energies as well. The diff is mostly changes in the reference file, so the LoC count is inflated. ## Todos; - [x] Standardize `cc` pair energies. ## Checklist; - [x] `fnocc` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2568
https://github.com/psi4/psi4/pull/2569:83,Modifiability,variab,variable,83,"## Description; This _will eventually_ conclude the standardizing of excited state variable names across all of Psi and the docs. Right now, this just standardizes TD-DFT psivars for final comments. This is a short-and-sweet spec of the new standard that I'm putting up for comments. (Largely from @loriab). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Excited state psivar final cleanup. ## Checklist; - [x] TDDFT tests pass; - [x] ADC tests pass; - [x] EOM tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2569
https://github.com/psi4/psi4/pull/2569:477,Testability,test,tests,477,"## Description; This _will eventually_ conclude the standardizing of excited state variable names across all of Psi and the docs. Right now, this just standardizes TD-DFT psivars for final comments. This is a short-and-sweet spec of the new standard that I'm putting up for comments. (Largely from @loriab). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Excited state psivar final cleanup. ## Checklist; - [x] TDDFT tests pass; - [x] ADC tests pass; - [x] EOM tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2569
https://github.com/psi4/psi4/pull/2569:499,Testability,test,tests,499,"## Description; This _will eventually_ conclude the standardizing of excited state variable names across all of Psi and the docs. Right now, this just standardizes TD-DFT psivars for final comments. This is a short-and-sweet spec of the new standard that I'm putting up for comments. (Largely from @loriab). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Excited state psivar final cleanup. ## Checklist; - [x] TDDFT tests pass; - [x] ADC tests pass; - [x] EOM tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2569
https://github.com/psi4/psi4/pull/2569:521,Testability,test,tests,521,"## Description; This _will eventually_ conclude the standardizing of excited state variable names across all of Psi and the docs. Right now, this just standardizes TD-DFT psivars for final comments. This is a short-and-sweet spec of the new standard that I'm putting up for comments. (Largely from @loriab). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Excited state psivar final cleanup. ## Checklist; - [x] TDDFT tests pass; - [x] ADC tests pass; - [x] EOM tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2569
https://github.com/psi4/psi4/pull/2570:302,Testability,test,test,302,## Description; DMRG density to wavefunction. Closes #2558. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] DMRG density on wavefunction; - [x] Experimental alpha and beta density fields are combined. ## Questions; - [ ] Suggestions on how to test this? The best idea I've got is comparing an FCI and a DMRG density. ## Checklist; - [x] chemps2 tests pass; - [x] eom tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2570
https://github.com/psi4/psi4/pull/2570:404,Testability,test,tests,404,## Description; DMRG density to wavefunction. Closes #2558. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] DMRG density on wavefunction; - [x] Experimental alpha and beta density fields are combined. ## Questions; - [ ] Suggestions on how to test this? The best idea I've got is comparing an FCI and a DMRG density. ## Checklist; - [x] chemps2 tests pass; - [x] eom tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2570
https://github.com/psi4/psi4/pull/2570:426,Testability,test,tests,426,## Description; DMRG density to wavefunction. Closes #2558. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] DMRG density on wavefunction; - [x] Experimental alpha and beta density fields are combined. ## Questions; - [ ] Suggestions on how to test this? The best idea I've got is comparing an FCI and a DMRG density. ## Checklist; - [x] chemps2 tests pass; - [x] eom tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2570
https://github.com/psi4/psi4/issues/2571:1664,Availability,error,error,1664,".81057 2.57479; H -0.26633 0.85763 1.80344; H 2.16195 0.28247 -0.96305; H 1.24281 1.54792 -0.09693; H -1.24645 -1.58985 0.04960; H -2.69979 -0.44218 0.33707; H -1.53347 1.35513 -0.87676; }. nrg, wfn = energy('M06-2X', return_wfn=True); wfn.to_file(""test_restart""); ```. This creates a ""test_restart.npy"" file. I then try to compute the energy for the same molecule using this test_restart.npy file and a different input file:. ```py; set_num_threads(8); basis {; assign def2-SVP; }. molecule {; 0 1; C 1.13408 -0.39513 0.82671; C 0.24384 -0.10727 1.77918; C 1.25947 0.48184 -0.37564; C -1.70320 -0.60897 -0.07371; C -1.08313 0.35853 -0.75350; O 0.15798 0.21455 -1.28105; H 1.61155 -1.37871 0.79725; H -0.00411 -0.81057 2.57479; H -0.26633 0.85763 1.80344; H 2.16195 0.28247 -0.96305; H 1.24281 1.54792 -0.09693; H -1.24645 -1.58985 0.04960; H -2.69979 -0.44218 0.33707; H -1.53347 1.35513 -0.87676; }. nrg, wfn = energy('M06-2X', return_wfn=True, restart_file=""test_restart""); ```. However, I get the following error :. ```; Traceback (most recent call last):; File ""/home/tony/psi4conda/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 44, in <module>; File ""/home/tony/psi4conda/lib//python3.8/site-packages/psi4/driver/driver.py"", line 599, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/tony/psi4conda/lib//python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 2390, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/tony/psi4conda/lib//python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1520, in scf_helper; old_wfn = core.Wavefunction.from_file(read_filename); File ""/home/tony/psi4conda/lib//python3.8/site-packages/psi4/driver/p4util/python_helpers.py"", line 196, in _core_wavefunction_from_file; basisset = core.BasisSet.build(molecule, 'ORBITAL', basis_name, puream=basis_puream); File ""/home/tony/psi4conda/lib//python3.8/site-packages/psi4/driver/p4util/python_h",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2571
https://github.com/psi4/psi4/issues/2571:4442,Availability,error,error,4442,"6, in _core_wavefunction_from_file; basisset = core.BasisSet.build(molecule, 'ORBITAL', basis_name, puream=basis_puream); File ""/home/tony/psi4conda/lib//python3.8/site-packages/psi4/driver/p4util/python_helpers.py"", line 84, in _pybuild_basis; bs, basisdict = qcdb.BasisSet.pyconstruct(mol.to_dict(),; File ""/home/tony/psi4conda/lib//python3.8/site-packages/psi4/driver/qcdb/libmintsbasisset.py"", line 696, in pyconstruct; bs, msg, ecp = BasisSet.construct(parser, mol,; File ""/home/tony/psi4conda/lib//python3.8/site-packages/psi4/driver/qcdb/libmintsbasisset.py"", line 918, in construct; raise BasisSetNotFound('BasisSet::construct: Unable to find a basis set for atom %d for key %s among:\n%s' % \. psi4.driver.qcdb.exceptions.BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; Shell Entries: ['C']; Basis Sets: [('ANONYMOUS5AA41DFC', 'ANONYMOUS5AA41DFC', None)]; File Path: /home/tony/test_psi4_jobs/test_restart, /home/tony/test_psi4_jobs/test_restart, /home/tony/psi4conda/share/psi4/basis; Input Blocks:. Printing out the relevant lines from the Psithon --> Python processed input file:; H -1.24645 -1.58985 0.04960; H -2.69979 -0.44218 0.33707; H -1.53347 1.35513 -0.87676; """"""); core.IO.set_default_namespace(""""); --> nrg, wfn = energy('M06-2X', return_wfn=True, restart_file=""test_restart""). !----------------------------------------------------------------------------------!; ! !; ! BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among: !; ! Shell Entries: ['C'] !; ! Basis Sets: [('ANONYMOUS5AA41DFC', 'ANONYMOUS5AA41DFC', None)] !; ! File Path: /home/tony/test_psi4_jobs/test_restart, !; ! /home/tony/test_psi4_jobs/test_restart, !; ! /home/tony/psi4conda/share/psi4/basis !; ! Input Blocks: !; ! !; !----------------------------------------------------------------------------------!; ```. The documentation indicates that this should work. I've tried it with ""scf"" instead of M06-2X, and I get the same error.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2571
https://github.com/psi4/psi4/issues/2571:356,Energy Efficiency,energy,energy,356,"I'm trying to use the orbitals from one SCF as the guess for computations on similar structures. I'm trying to follow this procedure: [https://psicode.org/psi4manual/master/scf.html#restarting-the-scf](https://psicode.org/psi4manual/master/scf.html#restarting-the-scf). I'm using Psi4 1.5 e9f4d6d on windows subsystem linux. The input file for the initial energy is:; ```py; set_num_threads(8); basis {; assign def2-SVP; }. molecule {; 0 1; C 1.13408 -0.39513 0.82671; C 0.24384 -0.10727 1.77918; C 1.25947 0.48184 -0.37564; C -1.70320 -0.60897 -0.07371; C -1.08313 0.35853 -0.75350; O 0.15798 0.21455 -1.28105; H 1.61155 -1.37871 0.79725; H -0.00411 -0.81057 2.57479; H -0.26633 0.85763 1.80344; H 2.16195 0.28247 -0.96305; H 1.24281 1.54792 -0.09693; H -1.24645 -1.58985 0.04960; H -2.69979 -0.44218 0.33707; H -1.53347 1.35513 -0.87676; }. nrg, wfn = energy('M06-2X', return_wfn=True); wfn.to_file(""test_restart""); ```. This creates a ""test_restart.npy"" file. I then try to compute the energy for the same molecule using this test_restart.npy file and a different input file:. ```py; set_num_threads(8); basis {; assign def2-SVP; }. molecule {; 0 1; C 1.13408 -0.39513 0.82671; C 0.24384 -0.10727 1.77918; C 1.25947 0.48184 -0.37564; C -1.70320 -0.60897 -0.07371; C -1.08313 0.35853 -0.75350; O 0.15798 0.21455 -1.28105; H 1.61155 -1.37871 0.79725; H -0.00411 -0.81057 2.57479; H -0.26633 0.85763 1.80344; H 2.16195 0.28247 -0.96305; H 1.24281 1.54792 -0.09693; H -1.24645 -1.58985 0.04960; H -2.69979 -0.44218 0.33707; H -1.53347 1.35513 -0.87676; }. nrg, wfn = energy('M06-2X', return_wfn=True, restart_file=""test_restart""); ```. However, I get the following error :. ```; Traceback (most recent call last):; File ""/home/tony/psi4conda/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 44, in <module>; File ""/home/tony/psi4conda/lib//python3.8/site-packages/psi4/driver/driver.py"", line 599, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **k",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2571
https://github.com/psi4/psi4/issues/2571:854,Energy Efficiency,energy,energy,854,"I'm trying to use the orbitals from one SCF as the guess for computations on similar structures. I'm trying to follow this procedure: [https://psicode.org/psi4manual/master/scf.html#restarting-the-scf](https://psicode.org/psi4manual/master/scf.html#restarting-the-scf). I'm using Psi4 1.5 e9f4d6d on windows subsystem linux. The input file for the initial energy is:; ```py; set_num_threads(8); basis {; assign def2-SVP; }. molecule {; 0 1; C 1.13408 -0.39513 0.82671; C 0.24384 -0.10727 1.77918; C 1.25947 0.48184 -0.37564; C -1.70320 -0.60897 -0.07371; C -1.08313 0.35853 -0.75350; O 0.15798 0.21455 -1.28105; H 1.61155 -1.37871 0.79725; H -0.00411 -0.81057 2.57479; H -0.26633 0.85763 1.80344; H 2.16195 0.28247 -0.96305; H 1.24281 1.54792 -0.09693; H -1.24645 -1.58985 0.04960; H -2.69979 -0.44218 0.33707; H -1.53347 1.35513 -0.87676; }. nrg, wfn = energy('M06-2X', return_wfn=True); wfn.to_file(""test_restart""); ```. This creates a ""test_restart.npy"" file. I then try to compute the energy for the same molecule using this test_restart.npy file and a different input file:. ```py; set_num_threads(8); basis {; assign def2-SVP; }. molecule {; 0 1; C 1.13408 -0.39513 0.82671; C 0.24384 -0.10727 1.77918; C 1.25947 0.48184 -0.37564; C -1.70320 -0.60897 -0.07371; C -1.08313 0.35853 -0.75350; O 0.15798 0.21455 -1.28105; H 1.61155 -1.37871 0.79725; H -0.00411 -0.81057 2.57479; H -0.26633 0.85763 1.80344; H 2.16195 0.28247 -0.96305; H 1.24281 1.54792 -0.09693; H -1.24645 -1.58985 0.04960; H -2.69979 -0.44218 0.33707; H -1.53347 1.35513 -0.87676; }. nrg, wfn = energy('M06-2X', return_wfn=True, restart_file=""test_restart""); ```. However, I get the following error :. ```; Traceback (most recent call last):; File ""/home/tony/psi4conda/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 44, in <module>; File ""/home/tony/psi4conda/lib//python3.8/site-packages/psi4/driver/driver.py"", line 599, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **k",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2571
https://github.com/psi4/psi4/issues/2571:989,Energy Efficiency,energy,energy,989,"m trying to use the orbitals from one SCF as the guess for computations on similar structures. I'm trying to follow this procedure: [https://psicode.org/psi4manual/master/scf.html#restarting-the-scf](https://psicode.org/psi4manual/master/scf.html#restarting-the-scf). I'm using Psi4 1.5 e9f4d6d on windows subsystem linux. The input file for the initial energy is:; ```py; set_num_threads(8); basis {; assign def2-SVP; }. molecule {; 0 1; C 1.13408 -0.39513 0.82671; C 0.24384 -0.10727 1.77918; C 1.25947 0.48184 -0.37564; C -1.70320 -0.60897 -0.07371; C -1.08313 0.35853 -0.75350; O 0.15798 0.21455 -1.28105; H 1.61155 -1.37871 0.79725; H -0.00411 -0.81057 2.57479; H -0.26633 0.85763 1.80344; H 2.16195 0.28247 -0.96305; H 1.24281 1.54792 -0.09693; H -1.24645 -1.58985 0.04960; H -2.69979 -0.44218 0.33707; H -1.53347 1.35513 -0.87676; }. nrg, wfn = energy('M06-2X', return_wfn=True); wfn.to_file(""test_restart""); ```. This creates a ""test_restart.npy"" file. I then try to compute the energy for the same molecule using this test_restart.npy file and a different input file:. ```py; set_num_threads(8); basis {; assign def2-SVP; }. molecule {; 0 1; C 1.13408 -0.39513 0.82671; C 0.24384 -0.10727 1.77918; C 1.25947 0.48184 -0.37564; C -1.70320 -0.60897 -0.07371; C -1.08313 0.35853 -0.75350; O 0.15798 0.21455 -1.28105; H 1.61155 -1.37871 0.79725; H -0.00411 -0.81057 2.57479; H -0.26633 0.85763 1.80344; H 2.16195 0.28247 -0.96305; H 1.24281 1.54792 -0.09693; H -1.24645 -1.58985 0.04960; H -2.69979 -0.44218 0.33707; H -1.53347 1.35513 -0.87676; }. nrg, wfn = energy('M06-2X', return_wfn=True, restart_file=""test_restart""); ```. However, I get the following error :. ```; Traceback (most recent call last):; File ""/home/tony/psi4conda/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 44, in <module>; File ""/home/tony/psi4conda/lib//python3.8/site-packages/psi4/driver/driver.py"", line 599, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kw",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2571
https://github.com/psi4/psi4/issues/2571:1566,Energy Efficiency,energy,energy,1566,"0.21455 -1.28105; H 1.61155 -1.37871 0.79725; H -0.00411 -0.81057 2.57479; H -0.26633 0.85763 1.80344; H 2.16195 0.28247 -0.96305; H 1.24281 1.54792 -0.09693; H -1.24645 -1.58985 0.04960; H -2.69979 -0.44218 0.33707; H -1.53347 1.35513 -0.87676; }. nrg, wfn = energy('M06-2X', return_wfn=True); wfn.to_file(""test_restart""); ```. This creates a ""test_restart.npy"" file. I then try to compute the energy for the same molecule using this test_restart.npy file and a different input file:. ```py; set_num_threads(8); basis {; assign def2-SVP; }. molecule {; 0 1; C 1.13408 -0.39513 0.82671; C 0.24384 -0.10727 1.77918; C 1.25947 0.48184 -0.37564; C -1.70320 -0.60897 -0.07371; C -1.08313 0.35853 -0.75350; O 0.15798 0.21455 -1.28105; H 1.61155 -1.37871 0.79725; H -0.00411 -0.81057 2.57479; H -0.26633 0.85763 1.80344; H 2.16195 0.28247 -0.96305; H 1.24281 1.54792 -0.09693; H -1.24645 -1.58985 0.04960; H -2.69979 -0.44218 0.33707; H -1.53347 1.35513 -0.87676; }. nrg, wfn = energy('M06-2X', return_wfn=True, restart_file=""test_restart""); ```. However, I get the following error :. ```; Traceback (most recent call last):; File ""/home/tony/psi4conda/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 44, in <module>; File ""/home/tony/psi4conda/lib//python3.8/site-packages/psi4/driver/driver.py"", line 599, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/tony/psi4conda/lib//python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 2390, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/tony/psi4conda/lib//python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1520, in scf_helper; old_wfn = core.Wavefunction.from_file(read_filename); File ""/home/tony/psi4conda/lib//python3.8/site-packages/psi4/driver/p4util/python_helpers.py"", line 196, in _core_wavefunction_from_file; basisset = core.BasisSet.build(molecule, 'ORBITAL', basis_name, puream=basis_puream); File ""/home/tony/psi4con",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2571
https://github.com/psi4/psi4/issues/2571:1922,Energy Efficiency,energy,energy,1922," compute the energy for the same molecule using this test_restart.npy file and a different input file:. ```py; set_num_threads(8); basis {; assign def2-SVP; }. molecule {; 0 1; C 1.13408 -0.39513 0.82671; C 0.24384 -0.10727 1.77918; C 1.25947 0.48184 -0.37564; C -1.70320 -0.60897 -0.07371; C -1.08313 0.35853 -0.75350; O 0.15798 0.21455 -1.28105; H 1.61155 -1.37871 0.79725; H -0.00411 -0.81057 2.57479; H -0.26633 0.85763 1.80344; H 2.16195 0.28247 -0.96305; H 1.24281 1.54792 -0.09693; H -1.24645 -1.58985 0.04960; H -2.69979 -0.44218 0.33707; H -1.53347 1.35513 -0.87676; }. nrg, wfn = energy('M06-2X', return_wfn=True, restart_file=""test_restart""); ```. However, I get the following error :. ```; Traceback (most recent call last):; File ""/home/tony/psi4conda/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 44, in <module>; File ""/home/tony/psi4conda/lib//python3.8/site-packages/psi4/driver/driver.py"", line 599, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/tony/psi4conda/lib//python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 2390, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/tony/psi4conda/lib//python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1520, in scf_helper; old_wfn = core.Wavefunction.from_file(read_filename); File ""/home/tony/psi4conda/lib//python3.8/site-packages/psi4/driver/p4util/python_helpers.py"", line 196, in _core_wavefunction_from_file; basisset = core.BasisSet.build(molecule, 'ORBITAL', basis_name, puream=basis_puream); File ""/home/tony/psi4conda/lib//python3.8/site-packages/psi4/driver/p4util/python_helpers.py"", line 84, in _pybuild_basis; bs, basisdict = qcdb.BasisSet.pyconstruct(mol.to_dict(),; File ""/home/tony/psi4conda/lib//python3.8/site-packages/psi4/driver/qcdb/libmintsbasisset.py"", line 696, in pyconstruct; bs, msg, ecp = BasisSet.construct(parser, mol,; File ""/home/tony/psi4conda/lib//python3.8/site-packages/p",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2571
https://github.com/psi4/psi4/issues/2571:1948,Energy Efficiency,energy,energy,1948," compute the energy for the same molecule using this test_restart.npy file and a different input file:. ```py; set_num_threads(8); basis {; assign def2-SVP; }. molecule {; 0 1; C 1.13408 -0.39513 0.82671; C 0.24384 -0.10727 1.77918; C 1.25947 0.48184 -0.37564; C -1.70320 -0.60897 -0.07371; C -1.08313 0.35853 -0.75350; O 0.15798 0.21455 -1.28105; H 1.61155 -1.37871 0.79725; H -0.00411 -0.81057 2.57479; H -0.26633 0.85763 1.80344; H 2.16195 0.28247 -0.96305; H 1.24281 1.54792 -0.09693; H -1.24645 -1.58985 0.04960; H -2.69979 -0.44218 0.33707; H -1.53347 1.35513 -0.87676; }. nrg, wfn = energy('M06-2X', return_wfn=True, restart_file=""test_restart""); ```. However, I get the following error :. ```; Traceback (most recent call last):; File ""/home/tony/psi4conda/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 44, in <module>; File ""/home/tony/psi4conda/lib//python3.8/site-packages/psi4/driver/driver.py"", line 599, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/tony/psi4conda/lib//python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 2390, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/tony/psi4conda/lib//python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1520, in scf_helper; old_wfn = core.Wavefunction.from_file(read_filename); File ""/home/tony/psi4conda/lib//python3.8/site-packages/psi4/driver/p4util/python_helpers.py"", line 196, in _core_wavefunction_from_file; basisset = core.BasisSet.build(molecule, 'ORBITAL', basis_name, puream=basis_puream); File ""/home/tony/psi4conda/lib//python3.8/site-packages/psi4/driver/p4util/python_helpers.py"", line 84, in _pybuild_basis; bs, basisdict = qcdb.BasisSet.pyconstruct(mol.to_dict(),; File ""/home/tony/psi4conda/lib//python3.8/site-packages/psi4/driver/qcdb/libmintsbasisset.py"", line 696, in pyconstruct; bs, msg, ecp = BasisSet.construct(parser, mol,; File ""/home/tony/psi4conda/lib//python3.8/site-packages/p",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2571
https://github.com/psi4/psi4/issues/2571:3735,Energy Efficiency,energy,energy,3735,"6, in _core_wavefunction_from_file; basisset = core.BasisSet.build(molecule, 'ORBITAL', basis_name, puream=basis_puream); File ""/home/tony/psi4conda/lib//python3.8/site-packages/psi4/driver/p4util/python_helpers.py"", line 84, in _pybuild_basis; bs, basisdict = qcdb.BasisSet.pyconstruct(mol.to_dict(),; File ""/home/tony/psi4conda/lib//python3.8/site-packages/psi4/driver/qcdb/libmintsbasisset.py"", line 696, in pyconstruct; bs, msg, ecp = BasisSet.construct(parser, mol,; File ""/home/tony/psi4conda/lib//python3.8/site-packages/psi4/driver/qcdb/libmintsbasisset.py"", line 918, in construct; raise BasisSetNotFound('BasisSet::construct: Unable to find a basis set for atom %d for key %s among:\n%s' % \. psi4.driver.qcdb.exceptions.BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; Shell Entries: ['C']; Basis Sets: [('ANONYMOUS5AA41DFC', 'ANONYMOUS5AA41DFC', None)]; File Path: /home/tony/test_psi4_jobs/test_restart, /home/tony/test_psi4_jobs/test_restart, /home/tony/psi4conda/share/psi4/basis; Input Blocks:. Printing out the relevant lines from the Psithon --> Python processed input file:; H -1.24645 -1.58985 0.04960; H -2.69979 -0.44218 0.33707; H -1.53347 1.35513 -0.87676; """"""); core.IO.set_default_namespace(""""); --> nrg, wfn = energy('M06-2X', return_wfn=True, restart_file=""test_restart""). !----------------------------------------------------------------------------------!; ! !; ! BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among: !; ! Shell Entries: ['C'] !; ! Basis Sets: [('ANONYMOUS5AA41DFC', 'ANONYMOUS5AA41DFC', None)] !; ! File Path: /home/tony/test_psi4_jobs/test_restart, !; ! /home/tony/test_psi4_jobs/test_restart, !; ! /home/tony/psi4conda/share/psi4/basis !; ! Input Blocks: !; ! !; !----------------------------------------------------------------------------------!; ```. The documentation indicates that this should work. I've tried it with ""scf"" instead of M06-2X, and I get the same error.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2571
https://github.com/psi4/psi4/issues/2572:786,Availability,error,error,786,"Dear PSI4 developers,; the current state of the master branch (last included commit: 97761b111b68c56e3763ad7b471ec603da90ed25) of psi4 fails to build at the linking step. The last lines of the output of `make` are; ```/usr/lib64/gcc/x86_64-suse-linux/11/../../../../x86_64-suse-linux/bin/ld: /scr/behnle/psi4_clean_cmake_3.19/psi4/objdir/stage/lib/libint2.a(unity_0_cxx.cxx.o): relocation R_X86_64_32 against `.bss' can not be used when making a shared object; recompile with -fPIC; /usr/lib64/gcc/x86_64-suse-linux/11/../../../../x86_64-suse-linux/bin/ld: /scr/behnle/psi4_clean_cmake_3.19/psi4/objdir/stage/lib/libint2.a(unity_1811_cxx.cxx.o): warning: relocation against `CR_aB_h010__0___CartesianMultipole_sB_0_c_0_c_0_Sb__p100__0___Ab__up_' in read-only section `.text'; collect2: error: ld returned 1 exit status; make[5]: *** [src/CMakeFiles/core.dir/build.make:408: src/core.cpython-39-x86_64-linux-gnu.so] Error 1; make[4]: *** [CMakeFiles/Makefile2:1259: src/CMakeFiles/core.dir/all] Error 2; make[3]: *** [Makefile:149: all] Error 2; make[2]: *** [CMakeFiles/psi4-core.dir/build.make:137: psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/Makefile2:11978: CMakeFiles/psi4-core.dir/all] Error 2; make: *** [Makefile:160: all] Error 2```; Steps to reproduce:; - clone the current repository to a new directory; - configure with cmake (i tried both cmake 3.19.4 and 3.23.1). I used `cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=~/prog/psi4/master -DPython_EXECUTABLE=/usr/bin/python3.9 -DBLAS_TYPE=OPENBLAS -DPython_LIBRARY=/usr/lib/python3.9 -DPython_INCLUDE_DIR=/usr/include/python3.9`; - change to objdir, run `make` and grab a coffee; - I tried it both with gcc 10.3.0 and gcc 11.2.1, the result is identical. The issue sees to be related to libint2. The strange thing i that at the beginning of the compilation step of libint, there is a warning; ```; ...; CMake Warning:; Manually-specified variables were not used by the project:. BUILD_FPIC; ENABLE_X",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2572
https://github.com/psi4/psi4/issues/2572:915,Availability,Error,Error,915,"Dear PSI4 developers,; the current state of the master branch (last included commit: 97761b111b68c56e3763ad7b471ec603da90ed25) of psi4 fails to build at the linking step. The last lines of the output of `make` are; ```/usr/lib64/gcc/x86_64-suse-linux/11/../../../../x86_64-suse-linux/bin/ld: /scr/behnle/psi4_clean_cmake_3.19/psi4/objdir/stage/lib/libint2.a(unity_0_cxx.cxx.o): relocation R_X86_64_32 against `.bss' can not be used when making a shared object; recompile with -fPIC; /usr/lib64/gcc/x86_64-suse-linux/11/../../../../x86_64-suse-linux/bin/ld: /scr/behnle/psi4_clean_cmake_3.19/psi4/objdir/stage/lib/libint2.a(unity_1811_cxx.cxx.o): warning: relocation against `CR_aB_h010__0___CartesianMultipole_sB_0_c_0_c_0_Sb__p100__0___Ab__up_' in read-only section `.text'; collect2: error: ld returned 1 exit status; make[5]: *** [src/CMakeFiles/core.dir/build.make:408: src/core.cpython-39-x86_64-linux-gnu.so] Error 1; make[4]: *** [CMakeFiles/Makefile2:1259: src/CMakeFiles/core.dir/all] Error 2; make[3]: *** [Makefile:149: all] Error 2; make[2]: *** [CMakeFiles/psi4-core.dir/build.make:137: psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/Makefile2:11978: CMakeFiles/psi4-core.dir/all] Error 2; make: *** [Makefile:160: all] Error 2```; Steps to reproduce:; - clone the current repository to a new directory; - configure with cmake (i tried both cmake 3.19.4 and 3.23.1). I used `cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=~/prog/psi4/master -DPython_EXECUTABLE=/usr/bin/python3.9 -DBLAS_TYPE=OPENBLAS -DPython_LIBRARY=/usr/lib/python3.9 -DPython_INCLUDE_DIR=/usr/include/python3.9`; - change to objdir, run `make` and grab a coffee; - I tried it both with gcc 10.3.0 and gcc 11.2.1, the result is identical. The issue sees to be related to libint2. The strange thing i that at the beginning of the compilation step of libint, there is a warning; ```; ...; CMake Warning:; Manually-specified variables were not used by the project:. BUILD_FPIC; ENABLE_X",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2572
https://github.com/psi4/psi4/issues/2572:994,Availability,Error,Error,994,"nt state of the master branch (last included commit: 97761b111b68c56e3763ad7b471ec603da90ed25) of psi4 fails to build at the linking step. The last lines of the output of `make` are; ```/usr/lib64/gcc/x86_64-suse-linux/11/../../../../x86_64-suse-linux/bin/ld: /scr/behnle/psi4_clean_cmake_3.19/psi4/objdir/stage/lib/libint2.a(unity_0_cxx.cxx.o): relocation R_X86_64_32 against `.bss' can not be used when making a shared object; recompile with -fPIC; /usr/lib64/gcc/x86_64-suse-linux/11/../../../../x86_64-suse-linux/bin/ld: /scr/behnle/psi4_clean_cmake_3.19/psi4/objdir/stage/lib/libint2.a(unity_1811_cxx.cxx.o): warning: relocation against `CR_aB_h010__0___CartesianMultipole_sB_0_c_0_c_0_Sb__p100__0___Ab__up_' in read-only section `.text'; collect2: error: ld returned 1 exit status; make[5]: *** [src/CMakeFiles/core.dir/build.make:408: src/core.cpython-39-x86_64-linux-gnu.so] Error 1; make[4]: *** [CMakeFiles/Makefile2:1259: src/CMakeFiles/core.dir/all] Error 2; make[3]: *** [Makefile:149: all] Error 2; make[2]: *** [CMakeFiles/psi4-core.dir/build.make:137: psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/Makefile2:11978: CMakeFiles/psi4-core.dir/all] Error 2; make: *** [Makefile:160: all] Error 2```; Steps to reproduce:; - clone the current repository to a new directory; - configure with cmake (i tried both cmake 3.19.4 and 3.23.1). I used `cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=~/prog/psi4/master -DPython_EXECUTABLE=/usr/bin/python3.9 -DBLAS_TYPE=OPENBLAS -DPython_LIBRARY=/usr/lib/python3.9 -DPython_INCLUDE_DIR=/usr/include/python3.9`; - change to objdir, run `make` and grab a coffee; - I tried it both with gcc 10.3.0 and gcc 11.2.1, the result is identical. The issue sees to be related to libint2. The strange thing i that at the beginning of the compilation step of libint, there is a warning; ```; ...; CMake Warning:; Manually-specified variables were not used by the project:. BUILD_FPIC; ENABLE_XHOST. -- Build files have been w",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2572
https://github.com/psi4/psi4/issues/2572:1036,Availability,Error,Error,1036,"nt state of the master branch (last included commit: 97761b111b68c56e3763ad7b471ec603da90ed25) of psi4 fails to build at the linking step. The last lines of the output of `make` are; ```/usr/lib64/gcc/x86_64-suse-linux/11/../../../../x86_64-suse-linux/bin/ld: /scr/behnle/psi4_clean_cmake_3.19/psi4/objdir/stage/lib/libint2.a(unity_0_cxx.cxx.o): relocation R_X86_64_32 against `.bss' can not be used when making a shared object; recompile with -fPIC; /usr/lib64/gcc/x86_64-suse-linux/11/../../../../x86_64-suse-linux/bin/ld: /scr/behnle/psi4_clean_cmake_3.19/psi4/objdir/stage/lib/libint2.a(unity_1811_cxx.cxx.o): warning: relocation against `CR_aB_h010__0___CartesianMultipole_sB_0_c_0_c_0_Sb__p100__0___Ab__up_' in read-only section `.text'; collect2: error: ld returned 1 exit status; make[5]: *** [src/CMakeFiles/core.dir/build.make:408: src/core.cpython-39-x86_64-linux-gnu.so] Error 1; make[4]: *** [CMakeFiles/Makefile2:1259: src/CMakeFiles/core.dir/all] Error 2; make[3]: *** [Makefile:149: all] Error 2; make[2]: *** [CMakeFiles/psi4-core.dir/build.make:137: psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/Makefile2:11978: CMakeFiles/psi4-core.dir/all] Error 2; make: *** [Makefile:160: all] Error 2```; Steps to reproduce:; - clone the current repository to a new directory; - configure with cmake (i tried both cmake 3.19.4 and 3.23.1). I used `cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=~/prog/psi4/master -DPython_EXECUTABLE=/usr/bin/python3.9 -DBLAS_TYPE=OPENBLAS -DPython_LIBRARY=/usr/lib/python3.9 -DPython_INCLUDE_DIR=/usr/include/python3.9`; - change to objdir, run `make` and grab a coffee; - I tried it both with gcc 10.3.0 and gcc 11.2.1, the result is identical. The issue sees to be related to libint2. The strange thing i that at the beginning of the compilation step of libint, there is a warning; ```; ...; CMake Warning:; Manually-specified variables were not used by the project:. BUILD_FPIC; ENABLE_XHOST. -- Build files have been w",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2572
https://github.com/psi4/psi4/issues/2572:1154,Availability,Error,Error,1154,"inking step. The last lines of the output of `make` are; ```/usr/lib64/gcc/x86_64-suse-linux/11/../../../../x86_64-suse-linux/bin/ld: /scr/behnle/psi4_clean_cmake_3.19/psi4/objdir/stage/lib/libint2.a(unity_0_cxx.cxx.o): relocation R_X86_64_32 against `.bss' can not be used when making a shared object; recompile with -fPIC; /usr/lib64/gcc/x86_64-suse-linux/11/../../../../x86_64-suse-linux/bin/ld: /scr/behnle/psi4_clean_cmake_3.19/psi4/objdir/stage/lib/libint2.a(unity_1811_cxx.cxx.o): warning: relocation against `CR_aB_h010__0___CartesianMultipole_sB_0_c_0_c_0_Sb__p100__0___Ab__up_' in read-only section `.text'; collect2: error: ld returned 1 exit status; make[5]: *** [src/CMakeFiles/core.dir/build.make:408: src/core.cpython-39-x86_64-linux-gnu.so] Error 1; make[4]: *** [CMakeFiles/Makefile2:1259: src/CMakeFiles/core.dir/all] Error 2; make[3]: *** [Makefile:149: all] Error 2; make[2]: *** [CMakeFiles/psi4-core.dir/build.make:137: psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/Makefile2:11978: CMakeFiles/psi4-core.dir/all] Error 2; make: *** [Makefile:160: all] Error 2```; Steps to reproduce:; - clone the current repository to a new directory; - configure with cmake (i tried both cmake 3.19.4 and 3.23.1). I used `cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=~/prog/psi4/master -DPython_EXECUTABLE=/usr/bin/python3.9 -DBLAS_TYPE=OPENBLAS -DPython_LIBRARY=/usr/lib/python3.9 -DPython_INCLUDE_DIR=/usr/include/python3.9`; - change to objdir, run `make` and grab a coffee; - I tried it both with gcc 10.3.0 and gcc 11.2.1, the result is identical. The issue sees to be related to libint2. The strange thing i that at the beginning of the compilation step of libint, there is a warning; ```; ...; CMake Warning:; Manually-specified variables were not used by the project:. BUILD_FPIC; ENABLE_XHOST. -- Build files have been written to: /scr/behnle/psi4_clean_cmake_3.19/psi4/objdir/external/upstream/libint2/libint2_external-prefix/src/libint2_extern",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2572
https://github.com/psi4/psi4/issues/2572:1235,Availability,Error,Error,1235,"_cmake_3.19/psi4/objdir/stage/lib/libint2.a(unity_0_cxx.cxx.o): relocation R_X86_64_32 against `.bss' can not be used when making a shared object; recompile with -fPIC; /usr/lib64/gcc/x86_64-suse-linux/11/../../../../x86_64-suse-linux/bin/ld: /scr/behnle/psi4_clean_cmake_3.19/psi4/objdir/stage/lib/libint2.a(unity_1811_cxx.cxx.o): warning: relocation against `CR_aB_h010__0___CartesianMultipole_sB_0_c_0_c_0_Sb__p100__0___Ab__up_' in read-only section `.text'; collect2: error: ld returned 1 exit status; make[5]: *** [src/CMakeFiles/core.dir/build.make:408: src/core.cpython-39-x86_64-linux-gnu.so] Error 1; make[4]: *** [CMakeFiles/Makefile2:1259: src/CMakeFiles/core.dir/all] Error 2; make[3]: *** [Makefile:149: all] Error 2; make[2]: *** [CMakeFiles/psi4-core.dir/build.make:137: psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/Makefile2:11978: CMakeFiles/psi4-core.dir/all] Error 2; make: *** [Makefile:160: all] Error 2```; Steps to reproduce:; - clone the current repository to a new directory; - configure with cmake (i tried both cmake 3.19.4 and 3.23.1). I used `cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=~/prog/psi4/master -DPython_EXECUTABLE=/usr/bin/python3.9 -DBLAS_TYPE=OPENBLAS -DPython_LIBRARY=/usr/lib/python3.9 -DPython_INCLUDE_DIR=/usr/include/python3.9`; - change to objdir, run `make` and grab a coffee; - I tried it both with gcc 10.3.0 and gcc 11.2.1, the result is identical. The issue sees to be related to libint2. The strange thing i that at the beginning of the compilation step of libint, there is a warning; ```; ...; CMake Warning:; Manually-specified variables were not used by the project:. BUILD_FPIC; ENABLE_XHOST. -- Build files have been written to: /scr/behnle/psi4_clean_cmake_3.19/psi4/objdir/external/upstream/libint2/libint2_external-prefix/src/libint2_external-build; [ 82%] Performing build step for 'libint2_external'; Scanning dependencies of target int-obj; [ 0%] Building CXX object CMakeFiles/int-obj.dir/Unit",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2572
https://github.com/psi4/psi4/issues/2572:1274,Availability,Error,Error,1274,"_cmake_3.19/psi4/objdir/stage/lib/libint2.a(unity_0_cxx.cxx.o): relocation R_X86_64_32 against `.bss' can not be used when making a shared object; recompile with -fPIC; /usr/lib64/gcc/x86_64-suse-linux/11/../../../../x86_64-suse-linux/bin/ld: /scr/behnle/psi4_clean_cmake_3.19/psi4/objdir/stage/lib/libint2.a(unity_1811_cxx.cxx.o): warning: relocation against `CR_aB_h010__0___CartesianMultipole_sB_0_c_0_c_0_Sb__p100__0___Ab__up_' in read-only section `.text'; collect2: error: ld returned 1 exit status; make[5]: *** [src/CMakeFiles/core.dir/build.make:408: src/core.cpython-39-x86_64-linux-gnu.so] Error 1; make[4]: *** [CMakeFiles/Makefile2:1259: src/CMakeFiles/core.dir/all] Error 2; make[3]: *** [Makefile:149: all] Error 2; make[2]: *** [CMakeFiles/psi4-core.dir/build.make:137: psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/Makefile2:11978: CMakeFiles/psi4-core.dir/all] Error 2; make: *** [Makefile:160: all] Error 2```; Steps to reproduce:; - clone the current repository to a new directory; - configure with cmake (i tried both cmake 3.19.4 and 3.23.1). I used `cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=~/prog/psi4/master -DPython_EXECUTABLE=/usr/bin/python3.9 -DBLAS_TYPE=OPENBLAS -DPython_LIBRARY=/usr/lib/python3.9 -DPython_INCLUDE_DIR=/usr/include/python3.9`; - change to objdir, run `make` and grab a coffee; - I tried it both with gcc 10.3.0 and gcc 11.2.1, the result is identical. The issue sees to be related to libint2. The strange thing i that at the beginning of the compilation step of libint, there is a warning; ```; ...; CMake Warning:; Manually-specified variables were not used by the project:. BUILD_FPIC; ENABLE_XHOST. -- Build files have been written to: /scr/behnle/psi4_clean_cmake_3.19/psi4/objdir/external/upstream/libint2/libint2_external-prefix/src/libint2_external-build; [ 82%] Performing build step for 'libint2_external'; Scanning dependencies of target int-obj; [ 0%] Building CXX object CMakeFiles/int-obj.dir/Unit",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2572
https://github.com/psi4/psi4/issues/2572:2711,Availability,error,error,2711,"x-gnu.so] Error 1; make[4]: *** [CMakeFiles/Makefile2:1259: src/CMakeFiles/core.dir/all] Error 2; make[3]: *** [Makefile:149: all] Error 2; make[2]: *** [CMakeFiles/psi4-core.dir/build.make:137: psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/Makefile2:11978: CMakeFiles/psi4-core.dir/all] Error 2; make: *** [Makefile:160: all] Error 2```; Steps to reproduce:; - clone the current repository to a new directory; - configure with cmake (i tried both cmake 3.19.4 and 3.23.1). I used `cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=~/prog/psi4/master -DPython_EXECUTABLE=/usr/bin/python3.9 -DBLAS_TYPE=OPENBLAS -DPython_LIBRARY=/usr/lib/python3.9 -DPython_INCLUDE_DIR=/usr/include/python3.9`; - change to objdir, run `make` and grab a coffee; - I tried it both with gcc 10.3.0 and gcc 11.2.1, the result is identical. The issue sees to be related to libint2. The strange thing i that at the beginning of the compilation step of libint, there is a warning; ```; ...; CMake Warning:; Manually-specified variables were not used by the project:. BUILD_FPIC; ENABLE_XHOST. -- Build files have been written to: /scr/behnle/psi4_clean_cmake_3.19/psi4/objdir/external/upstream/libint2/libint2_external-prefix/src/libint2_external-build; [ 82%] Performing build step for 'libint2_external'; Scanning dependencies of target int-obj; [ 0%] Building CXX object CMakeFiles/int-obj.dir/Unity/unity_2001_cxx.cxx.o; ...; ```. Full outputs of cmake and make are attached. There is furthermore an issue with the adcc plugin. This plugin cannot be built anymore with -DENABLE_adcc=ON as on one hand, PSI4 requires a C++-17 compiler (and this standard seems to be enforced), on the other hand, there is code in the adcc plugin which violates the C++-17 standard (some `throw()` with variable error message) which leads to compilation errors. Best; Stefan. [make.log](https://github.com/psi4/psi4/files/8651531/make.log); [cmake.log](https://github.com/psi4/psi4/files/8651538/cmake.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2572
https://github.com/psi4/psi4/issues/2572:2753,Availability,error,errors,2753,"x-gnu.so] Error 1; make[4]: *** [CMakeFiles/Makefile2:1259: src/CMakeFiles/core.dir/all] Error 2; make[3]: *** [Makefile:149: all] Error 2; make[2]: *** [CMakeFiles/psi4-core.dir/build.make:137: psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/Makefile2:11978: CMakeFiles/psi4-core.dir/all] Error 2; make: *** [Makefile:160: all] Error 2```; Steps to reproduce:; - clone the current repository to a new directory; - configure with cmake (i tried both cmake 3.19.4 and 3.23.1). I used `cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=~/prog/psi4/master -DPython_EXECUTABLE=/usr/bin/python3.9 -DBLAS_TYPE=OPENBLAS -DPython_LIBRARY=/usr/lib/python3.9 -DPython_INCLUDE_DIR=/usr/include/python3.9`; - change to objdir, run `make` and grab a coffee; - I tried it both with gcc 10.3.0 and gcc 11.2.1, the result is identical. The issue sees to be related to libint2. The strange thing i that at the beginning of the compilation step of libint, there is a warning; ```; ...; CMake Warning:; Manually-specified variables were not used by the project:. BUILD_FPIC; ENABLE_XHOST. -- Build files have been written to: /scr/behnle/psi4_clean_cmake_3.19/psi4/objdir/external/upstream/libint2/libint2_external-prefix/src/libint2_external-build; [ 82%] Performing build step for 'libint2_external'; Scanning dependencies of target int-obj; [ 0%] Building CXX object CMakeFiles/int-obj.dir/Unity/unity_2001_cxx.cxx.o; ...; ```. Full outputs of cmake and make are attached. There is furthermore an issue with the adcc plugin. This plugin cannot be built anymore with -DENABLE_adcc=ON as on one hand, PSI4 requires a C++-17 compiler (and this standard seems to be enforced), on the other hand, there is code in the adcc plugin which violates the C++-17 standard (some `throw()` with variable error message) which leads to compilation errors. Best; Stefan. [make.log](https://github.com/psi4/psi4/files/8651531/make.log); [cmake.log](https://github.com/psi4/psi4/files/8651538/cmake.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2572
https://github.com/psi4/psi4/issues/2572:2230,Integrability,depend,dependencies,2230,"x-gnu.so] Error 1; make[4]: *** [CMakeFiles/Makefile2:1259: src/CMakeFiles/core.dir/all] Error 2; make[3]: *** [Makefile:149: all] Error 2; make[2]: *** [CMakeFiles/psi4-core.dir/build.make:137: psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/Makefile2:11978: CMakeFiles/psi4-core.dir/all] Error 2; make: *** [Makefile:160: all] Error 2```; Steps to reproduce:; - clone the current repository to a new directory; - configure with cmake (i tried both cmake 3.19.4 and 3.23.1). I used `cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=~/prog/psi4/master -DPython_EXECUTABLE=/usr/bin/python3.9 -DBLAS_TYPE=OPENBLAS -DPython_LIBRARY=/usr/lib/python3.9 -DPython_INCLUDE_DIR=/usr/include/python3.9`; - change to objdir, run `make` and grab a coffee; - I tried it both with gcc 10.3.0 and gcc 11.2.1, the result is identical. The issue sees to be related to libint2. The strange thing i that at the beginning of the compilation step of libint, there is a warning; ```; ...; CMake Warning:; Manually-specified variables were not used by the project:. BUILD_FPIC; ENABLE_XHOST. -- Build files have been written to: /scr/behnle/psi4_clean_cmake_3.19/psi4/objdir/external/upstream/libint2/libint2_external-prefix/src/libint2_external-build; [ 82%] Performing build step for 'libint2_external'; Scanning dependencies of target int-obj; [ 0%] Building CXX object CMakeFiles/int-obj.dir/Unity/unity_2001_cxx.cxx.o; ...; ```. Full outputs of cmake and make are attached. There is furthermore an issue with the adcc plugin. This plugin cannot be built anymore with -DENABLE_adcc=ON as on one hand, PSI4 requires a C++-17 compiler (and this standard seems to be enforced), on the other hand, there is code in the adcc plugin which violates the C++-17 standard (some `throw()` with variable error message) which leads to compilation errors. Best; Stefan. [make.log](https://github.com/psi4/psi4/files/8651531/make.log); [cmake.log](https://github.com/psi4/psi4/files/8651538/cmake.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2572
https://github.com/psi4/psi4/issues/2572:2717,Integrability,message,message,2717,"x-gnu.so] Error 1; make[4]: *** [CMakeFiles/Makefile2:1259: src/CMakeFiles/core.dir/all] Error 2; make[3]: *** [Makefile:149: all] Error 2; make[2]: *** [CMakeFiles/psi4-core.dir/build.make:137: psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/Makefile2:11978: CMakeFiles/psi4-core.dir/all] Error 2; make: *** [Makefile:160: all] Error 2```; Steps to reproduce:; - clone the current repository to a new directory; - configure with cmake (i tried both cmake 3.19.4 and 3.23.1). I used `cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=~/prog/psi4/master -DPython_EXECUTABLE=/usr/bin/python3.9 -DBLAS_TYPE=OPENBLAS -DPython_LIBRARY=/usr/lib/python3.9 -DPython_INCLUDE_DIR=/usr/include/python3.9`; - change to objdir, run `make` and grab a coffee; - I tried it both with gcc 10.3.0 and gcc 11.2.1, the result is identical. The issue sees to be related to libint2. The strange thing i that at the beginning of the compilation step of libint, there is a warning; ```; ...; CMake Warning:; Manually-specified variables were not used by the project:. BUILD_FPIC; ENABLE_XHOST. -- Build files have been written to: /scr/behnle/psi4_clean_cmake_3.19/psi4/objdir/external/upstream/libint2/libint2_external-prefix/src/libint2_external-build; [ 82%] Performing build step for 'libint2_external'; Scanning dependencies of target int-obj; [ 0%] Building CXX object CMakeFiles/int-obj.dir/Unity/unity_2001_cxx.cxx.o; ...; ```. Full outputs of cmake and make are attached. There is furthermore an issue with the adcc plugin. This plugin cannot be built anymore with -DENABLE_adcc=ON as on one hand, PSI4 requires a C++-17 compiler (and this standard seems to be enforced), on the other hand, there is code in the adcc plugin which violates the C++-17 standard (some `throw()` with variable error message) which leads to compilation errors. Best; Stefan. [make.log](https://github.com/psi4/psi4/files/8651531/make.log); [cmake.log](https://github.com/psi4/psi4/files/8651538/cmake.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2572
https://github.com/psi4/psi4/issues/2572:1360,Modifiability,config,configure,1360,"_cmake_3.19/psi4/objdir/stage/lib/libint2.a(unity_0_cxx.cxx.o): relocation R_X86_64_32 against `.bss' can not be used when making a shared object; recompile with -fPIC; /usr/lib64/gcc/x86_64-suse-linux/11/../../../../x86_64-suse-linux/bin/ld: /scr/behnle/psi4_clean_cmake_3.19/psi4/objdir/stage/lib/libint2.a(unity_1811_cxx.cxx.o): warning: relocation against `CR_aB_h010__0___CartesianMultipole_sB_0_c_0_c_0_Sb__p100__0___Ab__up_' in read-only section `.text'; collect2: error: ld returned 1 exit status; make[5]: *** [src/CMakeFiles/core.dir/build.make:408: src/core.cpython-39-x86_64-linux-gnu.so] Error 1; make[4]: *** [CMakeFiles/Makefile2:1259: src/CMakeFiles/core.dir/all] Error 2; make[3]: *** [Makefile:149: all] Error 2; make[2]: *** [CMakeFiles/psi4-core.dir/build.make:137: psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/Makefile2:11978: CMakeFiles/psi4-core.dir/all] Error 2; make: *** [Makefile:160: all] Error 2```; Steps to reproduce:; - clone the current repository to a new directory; - configure with cmake (i tried both cmake 3.19.4 and 3.23.1). I used `cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=~/prog/psi4/master -DPython_EXECUTABLE=/usr/bin/python3.9 -DBLAS_TYPE=OPENBLAS -DPython_LIBRARY=/usr/lib/python3.9 -DPython_INCLUDE_DIR=/usr/include/python3.9`; - change to objdir, run `make` and grab a coffee; - I tried it both with gcc 10.3.0 and gcc 11.2.1, the result is identical. The issue sees to be related to libint2. The strange thing i that at the beginning of the compilation step of libint, there is a warning; ```; ...; CMake Warning:; Manually-specified variables were not used by the project:. BUILD_FPIC; ENABLE_XHOST. -- Build files have been written to: /scr/behnle/psi4_clean_cmake_3.19/psi4/objdir/external/upstream/libint2/libint2_external-prefix/src/libint2_external-build; [ 82%] Performing build step for 'libint2_external'; Scanning dependencies of target int-obj; [ 0%] Building CXX object CMakeFiles/int-obj.dir/Unit",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2572
https://github.com/psi4/psi4/issues/2572:1940,Modifiability,variab,variables,1940,"x-gnu.so] Error 1; make[4]: *** [CMakeFiles/Makefile2:1259: src/CMakeFiles/core.dir/all] Error 2; make[3]: *** [Makefile:149: all] Error 2; make[2]: *** [CMakeFiles/psi4-core.dir/build.make:137: psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/Makefile2:11978: CMakeFiles/psi4-core.dir/all] Error 2; make: *** [Makefile:160: all] Error 2```; Steps to reproduce:; - clone the current repository to a new directory; - configure with cmake (i tried both cmake 3.19.4 and 3.23.1). I used `cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=~/prog/psi4/master -DPython_EXECUTABLE=/usr/bin/python3.9 -DBLAS_TYPE=OPENBLAS -DPython_LIBRARY=/usr/lib/python3.9 -DPython_INCLUDE_DIR=/usr/include/python3.9`; - change to objdir, run `make` and grab a coffee; - I tried it both with gcc 10.3.0 and gcc 11.2.1, the result is identical. The issue sees to be related to libint2. The strange thing i that at the beginning of the compilation step of libint, there is a warning; ```; ...; CMake Warning:; Manually-specified variables were not used by the project:. BUILD_FPIC; ENABLE_XHOST. -- Build files have been written to: /scr/behnle/psi4_clean_cmake_3.19/psi4/objdir/external/upstream/libint2/libint2_external-prefix/src/libint2_external-build; [ 82%] Performing build step for 'libint2_external'; Scanning dependencies of target int-obj; [ 0%] Building CXX object CMakeFiles/int-obj.dir/Unity/unity_2001_cxx.cxx.o; ...; ```. Full outputs of cmake and make are attached. There is furthermore an issue with the adcc plugin. This plugin cannot be built anymore with -DENABLE_adcc=ON as on one hand, PSI4 requires a C++-17 compiler (and this standard seems to be enforced), on the other hand, there is code in the adcc plugin which violates the C++-17 standard (some `throw()` with variable error message) which leads to compilation errors. Best; Stefan. [make.log](https://github.com/psi4/psi4/files/8651531/make.log); [cmake.log](https://github.com/psi4/psi4/files/8651538/cmake.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2572
https://github.com/psi4/psi4/issues/2572:2438,Modifiability,plugin,plugin,2438,"x-gnu.so] Error 1; make[4]: *** [CMakeFiles/Makefile2:1259: src/CMakeFiles/core.dir/all] Error 2; make[3]: *** [Makefile:149: all] Error 2; make[2]: *** [CMakeFiles/psi4-core.dir/build.make:137: psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/Makefile2:11978: CMakeFiles/psi4-core.dir/all] Error 2; make: *** [Makefile:160: all] Error 2```; Steps to reproduce:; - clone the current repository to a new directory; - configure with cmake (i tried both cmake 3.19.4 and 3.23.1). I used `cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=~/prog/psi4/master -DPython_EXECUTABLE=/usr/bin/python3.9 -DBLAS_TYPE=OPENBLAS -DPython_LIBRARY=/usr/lib/python3.9 -DPython_INCLUDE_DIR=/usr/include/python3.9`; - change to objdir, run `make` and grab a coffee; - I tried it both with gcc 10.3.0 and gcc 11.2.1, the result is identical. The issue sees to be related to libint2. The strange thing i that at the beginning of the compilation step of libint, there is a warning; ```; ...; CMake Warning:; Manually-specified variables were not used by the project:. BUILD_FPIC; ENABLE_XHOST. -- Build files have been written to: /scr/behnle/psi4_clean_cmake_3.19/psi4/objdir/external/upstream/libint2/libint2_external-prefix/src/libint2_external-build; [ 82%] Performing build step for 'libint2_external'; Scanning dependencies of target int-obj; [ 0%] Building CXX object CMakeFiles/int-obj.dir/Unity/unity_2001_cxx.cxx.o; ...; ```. Full outputs of cmake and make are attached. There is furthermore an issue with the adcc plugin. This plugin cannot be built anymore with -DENABLE_adcc=ON as on one hand, PSI4 requires a C++-17 compiler (and this standard seems to be enforced), on the other hand, there is code in the adcc plugin which violates the C++-17 standard (some `throw()` with variable error message) which leads to compilation errors. Best; Stefan. [make.log](https://github.com/psi4/psi4/files/8651531/make.log); [cmake.log](https://github.com/psi4/psi4/files/8651538/cmake.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2572
https://github.com/psi4/psi4/issues/2572:2451,Modifiability,plugin,plugin,2451,"x-gnu.so] Error 1; make[4]: *** [CMakeFiles/Makefile2:1259: src/CMakeFiles/core.dir/all] Error 2; make[3]: *** [Makefile:149: all] Error 2; make[2]: *** [CMakeFiles/psi4-core.dir/build.make:137: psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/Makefile2:11978: CMakeFiles/psi4-core.dir/all] Error 2; make: *** [Makefile:160: all] Error 2```; Steps to reproduce:; - clone the current repository to a new directory; - configure with cmake (i tried both cmake 3.19.4 and 3.23.1). I used `cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=~/prog/psi4/master -DPython_EXECUTABLE=/usr/bin/python3.9 -DBLAS_TYPE=OPENBLAS -DPython_LIBRARY=/usr/lib/python3.9 -DPython_INCLUDE_DIR=/usr/include/python3.9`; - change to objdir, run `make` and grab a coffee; - I tried it both with gcc 10.3.0 and gcc 11.2.1, the result is identical. The issue sees to be related to libint2. The strange thing i that at the beginning of the compilation step of libint, there is a warning; ```; ...; CMake Warning:; Manually-specified variables were not used by the project:. BUILD_FPIC; ENABLE_XHOST. -- Build files have been written to: /scr/behnle/psi4_clean_cmake_3.19/psi4/objdir/external/upstream/libint2/libint2_external-prefix/src/libint2_external-build; [ 82%] Performing build step for 'libint2_external'; Scanning dependencies of target int-obj; [ 0%] Building CXX object CMakeFiles/int-obj.dir/Unity/unity_2001_cxx.cxx.o; ...; ```. Full outputs of cmake and make are attached. There is furthermore an issue with the adcc plugin. This plugin cannot be built anymore with -DENABLE_adcc=ON as on one hand, PSI4 requires a C++-17 compiler (and this standard seems to be enforced), on the other hand, there is code in the adcc plugin which violates the C++-17 standard (some `throw()` with variable error message) which leads to compilation errors. Best; Stefan. [make.log](https://github.com/psi4/psi4/files/8651531/make.log); [cmake.log](https://github.com/psi4/psi4/files/8651538/cmake.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2572
https://github.com/psi4/psi4/issues/2572:2639,Modifiability,plugin,plugin,2639,"x-gnu.so] Error 1; make[4]: *** [CMakeFiles/Makefile2:1259: src/CMakeFiles/core.dir/all] Error 2; make[3]: *** [Makefile:149: all] Error 2; make[2]: *** [CMakeFiles/psi4-core.dir/build.make:137: psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/Makefile2:11978: CMakeFiles/psi4-core.dir/all] Error 2; make: *** [Makefile:160: all] Error 2```; Steps to reproduce:; - clone the current repository to a new directory; - configure with cmake (i tried both cmake 3.19.4 and 3.23.1). I used `cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=~/prog/psi4/master -DPython_EXECUTABLE=/usr/bin/python3.9 -DBLAS_TYPE=OPENBLAS -DPython_LIBRARY=/usr/lib/python3.9 -DPython_INCLUDE_DIR=/usr/include/python3.9`; - change to objdir, run `make` and grab a coffee; - I tried it both with gcc 10.3.0 and gcc 11.2.1, the result is identical. The issue sees to be related to libint2. The strange thing i that at the beginning of the compilation step of libint, there is a warning; ```; ...; CMake Warning:; Manually-specified variables were not used by the project:. BUILD_FPIC; ENABLE_XHOST. -- Build files have been written to: /scr/behnle/psi4_clean_cmake_3.19/psi4/objdir/external/upstream/libint2/libint2_external-prefix/src/libint2_external-build; [ 82%] Performing build step for 'libint2_external'; Scanning dependencies of target int-obj; [ 0%] Building CXX object CMakeFiles/int-obj.dir/Unity/unity_2001_cxx.cxx.o; ...; ```. Full outputs of cmake and make are attached. There is furthermore an issue with the adcc plugin. This plugin cannot be built anymore with -DENABLE_adcc=ON as on one hand, PSI4 requires a C++-17 compiler (and this standard seems to be enforced), on the other hand, there is code in the adcc plugin which violates the C++-17 standard (some `throw()` with variable error message) which leads to compilation errors. Best; Stefan. [make.log](https://github.com/psi4/psi4/files/8651531/make.log); [cmake.log](https://github.com/psi4/psi4/files/8651538/cmake.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2572
https://github.com/psi4/psi4/issues/2572:2702,Modifiability,variab,variable,2702,"x-gnu.so] Error 1; make[4]: *** [CMakeFiles/Makefile2:1259: src/CMakeFiles/core.dir/all] Error 2; make[3]: *** [Makefile:149: all] Error 2; make[2]: *** [CMakeFiles/psi4-core.dir/build.make:137: psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/Makefile2:11978: CMakeFiles/psi4-core.dir/all] Error 2; make: *** [Makefile:160: all] Error 2```; Steps to reproduce:; - clone the current repository to a new directory; - configure with cmake (i tried both cmake 3.19.4 and 3.23.1). I used `cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=~/prog/psi4/master -DPython_EXECUTABLE=/usr/bin/python3.9 -DBLAS_TYPE=OPENBLAS -DPython_LIBRARY=/usr/lib/python3.9 -DPython_INCLUDE_DIR=/usr/include/python3.9`; - change to objdir, run `make` and grab a coffee; - I tried it both with gcc 10.3.0 and gcc 11.2.1, the result is identical. The issue sees to be related to libint2. The strange thing i that at the beginning of the compilation step of libint, there is a warning; ```; ...; CMake Warning:; Manually-specified variables were not used by the project:. BUILD_FPIC; ENABLE_XHOST. -- Build files have been written to: /scr/behnle/psi4_clean_cmake_3.19/psi4/objdir/external/upstream/libint2/libint2_external-prefix/src/libint2_external-build; [ 82%] Performing build step for 'libint2_external'; Scanning dependencies of target int-obj; [ 0%] Building CXX object CMakeFiles/int-obj.dir/Unity/unity_2001_cxx.cxx.o; ...; ```. Full outputs of cmake and make are attached. There is furthermore an issue with the adcc plugin. This plugin cannot be built anymore with -DENABLE_adcc=ON as on one hand, PSI4 requires a C++-17 compiler (and this standard seems to be enforced), on the other hand, there is code in the adcc plugin which violates the C++-17 standard (some `throw()` with variable error message) which leads to compilation errors. Best; Stefan. [make.log](https://github.com/psi4/psi4/files/8651531/make.log); [cmake.log](https://github.com/psi4/psi4/files/8651538/cmake.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2572
https://github.com/psi4/psi4/issues/2572:2175,Performance,Perform,Performing,2175,"x-gnu.so] Error 1; make[4]: *** [CMakeFiles/Makefile2:1259: src/CMakeFiles/core.dir/all] Error 2; make[3]: *** [Makefile:149: all] Error 2; make[2]: *** [CMakeFiles/psi4-core.dir/build.make:137: psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/Makefile2:11978: CMakeFiles/psi4-core.dir/all] Error 2; make: *** [Makefile:160: all] Error 2```; Steps to reproduce:; - clone the current repository to a new directory; - configure with cmake (i tried both cmake 3.19.4 and 3.23.1). I used `cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=~/prog/psi4/master -DPython_EXECUTABLE=/usr/bin/python3.9 -DBLAS_TYPE=OPENBLAS -DPython_LIBRARY=/usr/lib/python3.9 -DPython_INCLUDE_DIR=/usr/include/python3.9`; - change to objdir, run `make` and grab a coffee; - I tried it both with gcc 10.3.0 and gcc 11.2.1, the result is identical. The issue sees to be related to libint2. The strange thing i that at the beginning of the compilation step of libint, there is a warning; ```; ...; CMake Warning:; Manually-specified variables were not used by the project:. BUILD_FPIC; ENABLE_XHOST. -- Build files have been written to: /scr/behnle/psi4_clean_cmake_3.19/psi4/objdir/external/upstream/libint2/libint2_external-prefix/src/libint2_external-build; [ 82%] Performing build step for 'libint2_external'; Scanning dependencies of target int-obj; [ 0%] Building CXX object CMakeFiles/int-obj.dir/Unity/unity_2001_cxx.cxx.o; ...; ```. Full outputs of cmake and make are attached. There is furthermore an issue with the adcc plugin. This plugin cannot be built anymore with -DENABLE_adcc=ON as on one hand, PSI4 requires a C++-17 compiler (and this standard seems to be enforced), on the other hand, there is code in the adcc plugin which violates the C++-17 standard (some `throw()` with variable error message) which leads to compilation errors. Best; Stefan. [make.log](https://github.com/psi4/psi4/files/8651531/make.log); [cmake.log](https://github.com/psi4/psi4/files/8651538/cmake.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2572
https://github.com/psi4/psi4/issues/2572:2781,Testability,log,log,2781,"x-gnu.so] Error 1; make[4]: *** [CMakeFiles/Makefile2:1259: src/CMakeFiles/core.dir/all] Error 2; make[3]: *** [Makefile:149: all] Error 2; make[2]: *** [CMakeFiles/psi4-core.dir/build.make:137: psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/Makefile2:11978: CMakeFiles/psi4-core.dir/all] Error 2; make: *** [Makefile:160: all] Error 2```; Steps to reproduce:; - clone the current repository to a new directory; - configure with cmake (i tried both cmake 3.19.4 and 3.23.1). I used `cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=~/prog/psi4/master -DPython_EXECUTABLE=/usr/bin/python3.9 -DBLAS_TYPE=OPENBLAS -DPython_LIBRARY=/usr/lib/python3.9 -DPython_INCLUDE_DIR=/usr/include/python3.9`; - change to objdir, run `make` and grab a coffee; - I tried it both with gcc 10.3.0 and gcc 11.2.1, the result is identical. The issue sees to be related to libint2. The strange thing i that at the beginning of the compilation step of libint, there is a warning; ```; ...; CMake Warning:; Manually-specified variables were not used by the project:. BUILD_FPIC; ENABLE_XHOST. -- Build files have been written to: /scr/behnle/psi4_clean_cmake_3.19/psi4/objdir/external/upstream/libint2/libint2_external-prefix/src/libint2_external-build; [ 82%] Performing build step for 'libint2_external'; Scanning dependencies of target int-obj; [ 0%] Building CXX object CMakeFiles/int-obj.dir/Unity/unity_2001_cxx.cxx.o; ...; ```. Full outputs of cmake and make are attached. There is furthermore an issue with the adcc plugin. This plugin cannot be built anymore with -DENABLE_adcc=ON as on one hand, PSI4 requires a C++-17 compiler (and this standard seems to be enforced), on the other hand, there is code in the adcc plugin which violates the C++-17 standard (some `throw()` with variable error message) which leads to compilation errors. Best; Stefan. [make.log](https://github.com/psi4/psi4/files/8651531/make.log); [cmake.log](https://github.com/psi4/psi4/files/8651538/cmake.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2572
https://github.com/psi4/psi4/issues/2572:2834,Testability,log,log,2834,"x-gnu.so] Error 1; make[4]: *** [CMakeFiles/Makefile2:1259: src/CMakeFiles/core.dir/all] Error 2; make[3]: *** [Makefile:149: all] Error 2; make[2]: *** [CMakeFiles/psi4-core.dir/build.make:137: psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/Makefile2:11978: CMakeFiles/psi4-core.dir/all] Error 2; make: *** [Makefile:160: all] Error 2```; Steps to reproduce:; - clone the current repository to a new directory; - configure with cmake (i tried both cmake 3.19.4 and 3.23.1). I used `cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=~/prog/psi4/master -DPython_EXECUTABLE=/usr/bin/python3.9 -DBLAS_TYPE=OPENBLAS -DPython_LIBRARY=/usr/lib/python3.9 -DPython_INCLUDE_DIR=/usr/include/python3.9`; - change to objdir, run `make` and grab a coffee; - I tried it both with gcc 10.3.0 and gcc 11.2.1, the result is identical. The issue sees to be related to libint2. The strange thing i that at the beginning of the compilation step of libint, there is a warning; ```; ...; CMake Warning:; Manually-specified variables were not used by the project:. BUILD_FPIC; ENABLE_XHOST. -- Build files have been written to: /scr/behnle/psi4_clean_cmake_3.19/psi4/objdir/external/upstream/libint2/libint2_external-prefix/src/libint2_external-build; [ 82%] Performing build step for 'libint2_external'; Scanning dependencies of target int-obj; [ 0%] Building CXX object CMakeFiles/int-obj.dir/Unity/unity_2001_cxx.cxx.o; ...; ```. Full outputs of cmake and make are attached. There is furthermore an issue with the adcc plugin. This plugin cannot be built anymore with -DENABLE_adcc=ON as on one hand, PSI4 requires a C++-17 compiler (and this standard seems to be enforced), on the other hand, there is code in the adcc plugin which violates the C++-17 standard (some `throw()` with variable error message) which leads to compilation errors. Best; Stefan. [make.log](https://github.com/psi4/psi4/files/8651531/make.log); [cmake.log](https://github.com/psi4/psi4/files/8651538/cmake.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2572
https://github.com/psi4/psi4/issues/2572:2847,Testability,log,log,2847,"x-gnu.so] Error 1; make[4]: *** [CMakeFiles/Makefile2:1259: src/CMakeFiles/core.dir/all] Error 2; make[3]: *** [Makefile:149: all] Error 2; make[2]: *** [CMakeFiles/psi4-core.dir/build.make:137: psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/Makefile2:11978: CMakeFiles/psi4-core.dir/all] Error 2; make: *** [Makefile:160: all] Error 2```; Steps to reproduce:; - clone the current repository to a new directory; - configure with cmake (i tried both cmake 3.19.4 and 3.23.1). I used `cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=~/prog/psi4/master -DPython_EXECUTABLE=/usr/bin/python3.9 -DBLAS_TYPE=OPENBLAS -DPython_LIBRARY=/usr/lib/python3.9 -DPython_INCLUDE_DIR=/usr/include/python3.9`; - change to objdir, run `make` and grab a coffee; - I tried it both with gcc 10.3.0 and gcc 11.2.1, the result is identical. The issue sees to be related to libint2. The strange thing i that at the beginning of the compilation step of libint, there is a warning; ```; ...; CMake Warning:; Manually-specified variables were not used by the project:. BUILD_FPIC; ENABLE_XHOST. -- Build files have been written to: /scr/behnle/psi4_clean_cmake_3.19/psi4/objdir/external/upstream/libint2/libint2_external-prefix/src/libint2_external-build; [ 82%] Performing build step for 'libint2_external'; Scanning dependencies of target int-obj; [ 0%] Building CXX object CMakeFiles/int-obj.dir/Unity/unity_2001_cxx.cxx.o; ...; ```. Full outputs of cmake and make are attached. There is furthermore an issue with the adcc plugin. This plugin cannot be built anymore with -DENABLE_adcc=ON as on one hand, PSI4 requires a C++-17 compiler (and this standard seems to be enforced), on the other hand, there is code in the adcc plugin which violates the C++-17 standard (some `throw()` with variable error message) which leads to compilation errors. Best; Stefan. [make.log](https://github.com/psi4/psi4/files/8651531/make.log); [cmake.log](https://github.com/psi4/psi4/files/8651538/cmake.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2572
https://github.com/psi4/psi4/issues/2572:2901,Testability,log,log,2901,"x-gnu.so] Error 1; make[4]: *** [CMakeFiles/Makefile2:1259: src/CMakeFiles/core.dir/all] Error 2; make[3]: *** [Makefile:149: all] Error 2; make[2]: *** [CMakeFiles/psi4-core.dir/build.make:137: psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; make[1]: *** [CMakeFiles/Makefile2:11978: CMakeFiles/psi4-core.dir/all] Error 2; make: *** [Makefile:160: all] Error 2```; Steps to reproduce:; - clone the current repository to a new directory; - configure with cmake (i tried both cmake 3.19.4 and 3.23.1). I used `cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=~/prog/psi4/master -DPython_EXECUTABLE=/usr/bin/python3.9 -DBLAS_TYPE=OPENBLAS -DPython_LIBRARY=/usr/lib/python3.9 -DPython_INCLUDE_DIR=/usr/include/python3.9`; - change to objdir, run `make` and grab a coffee; - I tried it both with gcc 10.3.0 and gcc 11.2.1, the result is identical. The issue sees to be related to libint2. The strange thing i that at the beginning of the compilation step of libint, there is a warning; ```; ...; CMake Warning:; Manually-specified variables were not used by the project:. BUILD_FPIC; ENABLE_XHOST. -- Build files have been written to: /scr/behnle/psi4_clean_cmake_3.19/psi4/objdir/external/upstream/libint2/libint2_external-prefix/src/libint2_external-build; [ 82%] Performing build step for 'libint2_external'; Scanning dependencies of target int-obj; [ 0%] Building CXX object CMakeFiles/int-obj.dir/Unity/unity_2001_cxx.cxx.o; ...; ```. Full outputs of cmake and make are attached. There is furthermore an issue with the adcc plugin. This plugin cannot be built anymore with -DENABLE_adcc=ON as on one hand, PSI4 requires a C++-17 compiler (and this standard seems to be enforced), on the other hand, there is code in the adcc plugin which violates the C++-17 standard (some `throw()` with variable error message) which leads to compilation errors. Best; Stefan. [make.log](https://github.com/psi4/psi4/files/8651531/make.log); [cmake.log](https://github.com/psi4/psi4/files/8651538/cmake.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2572
https://github.com/psi4/psi4/issues/2573:69,Availability,error,error-writing-to-file,69,"After a recent [forum report](http://forum.psicode.org/t/sapt0-d3mbj-error-writing-to-file/2474/6), @zachglick had the excellent suggestion of having _some_ way to warn the user when the user doesn't set the scratch space. What exactly this should look like is unclear. Suggestions that have been raised:. * Auto-exit if scratch hasn't been set and memory demand is large; * Print warning to output file when scratch hasn't been set and memory demand is large; * Edit the PSIO errors for read/write when scratch hasn't been set",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2573
https://github.com/psi4/psi4/issues/2573:477,Availability,error,errors,477,"After a recent [forum report](http://forum.psicode.org/t/sapt0-d3mbj-error-writing-to-file/2474/6), @zachglick had the excellent suggestion of having _some_ way to warn the user when the user doesn't set the scratch space. What exactly this should look like is unclear. Suggestions that have been raised:. * Auto-exit if scratch hasn't been set and memory demand is large; * Print warning to output file when scratch hasn't been set and memory demand is large; * Edit the PSIO errors for read/write when scratch hasn't been set",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2573
https://github.com/psi4/psi4/pull/2575:4520,Availability,error,errors,4520,"Instead assuming unsafe. Can pass ref_gradient array to test on or `set findif fd_project` T/F explicitly to control.; - [x] `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. json_ret is now an object, so `.` access, not dictionary. The old schema runner uses a schema circa pre-2018 and we've warned it's deprecated for about a year, so I went ahead and updated all the tests to the new/current run_qcschema.; - [x] Pre-ddd, CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. With ddd, this is no longer happening, so for occasional string modelchem calcs (that is, `energy|gradient|hessian(""mtd/bas"")` only), you may need to add a clean in the input. A few test cases now sport extra cleans. Signatures of this problem are PSIO errors and, in an obscure case, CC amplitudes being all zeros when called as mtd/bas. An example is shown below, collected by modifying steps 6 & 7 of `cbs-xtpl-energy-conv` test:. | | master (pre-v1.6) | ddd (v1.6) |; |-------------------------------------|---------------------------------------------|---------------------------------------------|; | set basis bas; energy(mtd); clean() | ok | ok |; | set basis bas; energy(mtd) | `PSIO_ERROR: (Incorrect block end address)` | `PSIO_ERROR: (Incorrect block end address)` |; | energy(mtd/bas); clean() | ok | ok |; | energy(mtd/bas) | ok | `PSIO_ERROR: (Incorrect block end address)` |. - [x] Output file in continuous mode now looks much as it normally does in the master branch, except there's a few more headers printed and the individual cbs/findif/nbody `AtomicResult` outputs aren't added in real time. Running through QCFractal, the output file is expected to break down, but this hasn't been tried.; - [x] A Logging file has been introduced. All its contents shoul",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2575
https://github.com/psi4/psi4/pull/2575:5445,Availability,down,down,5445,"in the input. A few test cases now sport extra cleans. Signatures of this problem are PSIO errors and, in an obscure case, CC amplitudes being all zeros when called as mtd/bas. An example is shown below, collected by modifying steps 6 & 7 of `cbs-xtpl-energy-conv` test:. | | master (pre-v1.6) | ddd (v1.6) |; |-------------------------------------|---------------------------------------------|---------------------------------------------|; | set basis bas; energy(mtd); clean() | ok | ok |; | set basis bas; energy(mtd) | `PSIO_ERROR: (Incorrect block end address)` | `PSIO_ERROR: (Incorrect block end address)` |; | energy(mtd/bas); clean() | ok | ok |; | energy(mtd/bas) | ok | `PSIO_ERROR: (Incorrect block end address)` |. - [x] Output file in continuous mode now looks much as it normally does in the master branch, except there's a few more headers printed and the individual cbs/findif/nbody `AtomicResult` outputs aren't added in real time. Running through QCFractal, the output file is expected to break down, but this hasn't been tried.; - [x] A Logging file has been introduced. All its contents should be considered experimental and subject to change.; - [x] Dipole derivatives through finite difference of dipoles added, so IR intensities available; - [x] The dummy wavefunctions returned from wrappers always had some questionable properties (e.g., single method for mixed method, largeset HF basis for cbs wavefunction) can be even less realistic (e.g., always def2-svp basis for cbs).; - [x] n-body qcvars renamed (grace period applies); ```; ""CP-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""CP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""NOCP-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""NOCP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""VMFC-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""VMFC-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""COUNTERPOISE CORRECTED TOTAL ENERGY"": (""CP-CORRECTED TOTAL ENERGY"", 1.7),; ""COUNTERPOISE CORRECTED INTERACTION ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2575
https://github.com/psi4/psi4/pull/2575:5684,Availability,avail,available,5684," test:. | | master (pre-v1.6) | ddd (v1.6) |; |-------------------------------------|---------------------------------------------|---------------------------------------------|; | set basis bas; energy(mtd); clean() | ok | ok |; | set basis bas; energy(mtd) | `PSIO_ERROR: (Incorrect block end address)` | `PSIO_ERROR: (Incorrect block end address)` |; | energy(mtd/bas); clean() | ok | ok |; | energy(mtd/bas) | ok | `PSIO_ERROR: (Incorrect block end address)` |. - [x] Output file in continuous mode now looks much as it normally does in the master branch, except there's a few more headers printed and the individual cbs/findif/nbody `AtomicResult` outputs aren't added in real time. Running through QCFractal, the output file is expected to break down, but this hasn't been tried.; - [x] A Logging file has been introduced. All its contents should be considered experimental and subject to change.; - [x] Dipole derivatives through finite difference of dipoles added, so IR intensities available; - [x] The dummy wavefunctions returned from wrappers always had some questionable properties (e.g., single method for mixed method, largeset HF basis for cbs wavefunction) can be even less realistic (e.g., always def2-svp basis for cbs).; - [x] n-body qcvars renamed (grace period applies); ```; ""CP-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""CP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""NOCP-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""NOCP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""VMFC-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""VMFC-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""COUNTERPOISE CORRECTED TOTAL ENERGY"": (""CP-CORRECTED TOTAL ENERGY"", 1.7),; ""COUNTERPOISE CORRECTED INTERACTION ENERGY"": (""CP-CORRECTED INTERACTION ENERGY"", 1.7),; ""NON-COUNTERPOISE CORRECTED TOTAL ENERGY"": (""NOCP-CORRECTED TOTAL ENERGY"", 1.7),; ""NON-COUNTERPOISE CORRECTED INTERACTION ENERGY"": (""NOCP-CORRECTED INTERACTION ENERGY"", 1.7),; ""VALIRON-MAYER FUNCTION COUTERPOISE ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2575
https://github.com/psi4/psi4/pull/2575:154,Deployability,integrat,integrate,154,"## Description; Change the Psi4 driver from being recursive to being based on compute classes that have planning, computing and querying functions. Then, integrate the new driver with the QCArchive project for parallelizing nbody, CBS and findif. Don't panic -- 55k of the lines added are an output.ref. See #1351 for history and bite-sized extractions. What's left here is the gory core. Because code is moving around, there's no good way to review it. The plain code file is often easier to read than the diff. Below are the 6 key files.; * `driver.py` — mostly deletions. notice that the main e/g/h functions instead of having several layers when you enter and ""bounce"" to other fns now have a single plan/compute/proceed-to-analytic decision step.; * `task_planner.py` — new file. all that complexity of figuring out which of cbs/findif/nbody are active (including simple things like `energy(""mp2/cc-pvdz"")` parsing) has landed here. at least it's no longer repeated in several functions. the main goal is to take user info from where user is accustomed to supplying it (options or kwargs) and use it to initialize a tree of ""computers"" whose leaves are all AtomicComputers (analytic single-points). you can see some examples of the planner's work in `tests/pytests/test_task_planner.py`; * `task_base.py` — new file. fairly simple. how to store the pieces of a single job in a qcschema AtomicInput and how to call qcengine to run psi4 (in api, not cli, mode) to turn that into an AtomicResult. all jobs that aren't analytic single-points pass through this file.; * `driver_findif.py` — moderately modified, mostly additions. this is the least-changed wrapper. a pydantic class has been added to link the planning and assembly steps instead of a function and code that used to live in driver.py. the main idea for wrappers is that everything should be generic python except for translation from qcschema to psi4.wfn at the end (finidf does poorly in this b/c salcs call libmints). at the top of th",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2575
https://github.com/psi4/psi4/pull/2575:3964,Deployability,update,updated,3964,"icating in schema; - [x] any fns mirroring `sherrill_gold_standard` or `allen_focal_point` need to be reformatted and registered with `register_composite_function`; - [x] extrapolation functions for composite need to be registered with register_xtpl_function; - [x] CBS and xtpl functions need to be called as strings, not objects. So `energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3')` not `energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3)`.; - [x] no longer always evaluating gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass ref_gradient array to test on or `set findif fd_project` T/F explicitly to control.; - [x] `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. json_ret is now an object, so `.` access, not dictionary. The old schema runner uses a schema circa pre-2018 and we've warned it's deprecated for about a year, so I went ahead and updated all the tests to the new/current run_qcschema.; - [x] Pre-ddd, CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. With ddd, this is no longer happening, so for occasional string modelchem calcs (that is, `energy|gradient|hessian(""mtd/bas"")` only), you may need to add a clean in the input. A few test cases now sport extra cleans. Signatures of this problem are PSIO errors and, in an obscure case, CC amplitudes being all zeros when called as mtd/bas. An example is shown below, collected by modifying steps 6 & 7 of `cbs-xtpl-energy-conv` test:. | | master (pre-v1.6) | ddd (v1.6) |; |-------------------------------------|---------------------------------------------|---------------------------------------------|; | set basis bas; energy(mtd); clean() | ok | ok |; | set b",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2575
https://github.com/psi4/psi4/pull/2575:5180,Deployability,continuous,continuous,5180,"th ddd, this is no longer happening, so for occasional string modelchem calcs (that is, `energy|gradient|hessian(""mtd/bas"")` only), you may need to add a clean in the input. A few test cases now sport extra cleans. Signatures of this problem are PSIO errors and, in an obscure case, CC amplitudes being all zeros when called as mtd/bas. An example is shown below, collected by modifying steps 6 & 7 of `cbs-xtpl-energy-conv` test:. | | master (pre-v1.6) | ddd (v1.6) |; |-------------------------------------|---------------------------------------------|---------------------------------------------|; | set basis bas; energy(mtd); clean() | ok | ok |; | set basis bas; energy(mtd) | `PSIO_ERROR: (Incorrect block end address)` | `PSIO_ERROR: (Incorrect block end address)` |; | energy(mtd/bas); clean() | ok | ok |; | energy(mtd/bas) | ok | `PSIO_ERROR: (Incorrect block end address)` |. - [x] Output file in continuous mode now looks much as it normally does in the master branch, except there's a few more headers printed and the individual cbs/findif/nbody `AtomicResult` outputs aren't added in real time. Running through QCFractal, the output file is expected to break down, but this hasn't been tried.; - [x] A Logging file has been introduced. All its contents should be considered experimental and subject to change.; - [x] Dipole derivatives through finite difference of dipoles added, so IR intensities available; - [x] The dummy wavefunctions returned from wrappers always had some questionable properties (e.g., single method for mixed method, largeset HF basis for cbs wavefunction) can be even less realistic (e.g., always def2-svp basis for cbs).; - [x] n-body qcvars renamed (grace period applies); ```; ""CP-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""CP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""NOCP-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""NOCP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""VMFC-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""VMFC-CORRECTE",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2575
https://github.com/psi4/psi4/pull/2575:7332,Deployability,continuous,continuous,7332,"NTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""VMFC-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""VMFC-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""COUNTERPOISE CORRECTED TOTAL ENERGY"": (""CP-CORRECTED TOTAL ENERGY"", 1.7),; ""COUNTERPOISE CORRECTED INTERACTION ENERGY"": (""CP-CORRECTED INTERACTION ENERGY"", 1.7),; ""NON-COUNTERPOISE CORRECTED TOTAL ENERGY"": (""NOCP-CORRECTED TOTAL ENERGY"", 1.7),; ""NON-COUNTERPOISE CORRECTED INTERACTION ENERGY"": (""NOCP-CORRECTED INTERACTION ENERGY"", 1.7),; ""VALIRON-MAYER FUNCTION COUTERPOISE TOTAL ENERGY"": (""VALIRON-MAYER FUNCTION COUNTERPOISE TOTAL ENERGY"", 1.7), # note misspelling; ""VALIRON-MAYER FUNCTION COUTERPOISE INTERACTION ENERGY"": (""VMFC-CORRECTED INTERACTION ENERGY"", 1.7),; ``` ; - [x] added managed mode for scf gradient. it's not wholly effective at consolidating code, though, since only triggers for `gradient(""hf"")`, not `gradient(correlated)`. digits to compare has to be relaxed, but this has been seen with other qc programs, too.; - [x] Distributed driver should not be advertised for use with QCFractal at this time. It hasn't been tested in a while, and mem, cores, etc. setting may need tweaking in a non-continuous mode. Use it experimentally and report back.; - [x] n-body wrapper can no longer do embedding with internally calculated Mulliken charges. Charges must now be provided with `embedding_charges` kwarg.; - [x] stdsuite: consolidated the caller fn to remove duplicate code. added HF Hessian testing, through DF can't be uncommented until refs released in qcng.; - [x] the addition of ccsd iterations qcvar to dfocc could maybe be reverted. ## Questions; - [x] Any critical eye or independent tests that you can bring to the manybody wrapper much appreciated, @jeffschriber. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2575
https://github.com/psi4/psi4/pull/2575:7682,Deployability,release,released,7682,"NTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""VMFC-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""VMFC-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""COUNTERPOISE CORRECTED TOTAL ENERGY"": (""CP-CORRECTED TOTAL ENERGY"", 1.7),; ""COUNTERPOISE CORRECTED INTERACTION ENERGY"": (""CP-CORRECTED INTERACTION ENERGY"", 1.7),; ""NON-COUNTERPOISE CORRECTED TOTAL ENERGY"": (""NOCP-CORRECTED TOTAL ENERGY"", 1.7),; ""NON-COUNTERPOISE CORRECTED INTERACTION ENERGY"": (""NOCP-CORRECTED INTERACTION ENERGY"", 1.7),; ""VALIRON-MAYER FUNCTION COUTERPOISE TOTAL ENERGY"": (""VALIRON-MAYER FUNCTION COUNTERPOISE TOTAL ENERGY"", 1.7), # note misspelling; ""VALIRON-MAYER FUNCTION COUTERPOISE INTERACTION ENERGY"": (""VMFC-CORRECTED INTERACTION ENERGY"", 1.7),; ``` ; - [x] added managed mode for scf gradient. it's not wholly effective at consolidating code, though, since only triggers for `gradient(""hf"")`, not `gradient(correlated)`. digits to compare has to be relaxed, but this has been seen with other qc programs, too.; - [x] Distributed driver should not be advertised for use with QCFractal at this time. It hasn't been tested in a while, and mem, cores, etc. setting may need tweaking in a non-continuous mode. Use it experimentally and report back.; - [x] n-body wrapper can no longer do embedding with internally calculated Mulliken charges. Charges must now be provided with `embedding_charges` kwarg.; - [x] stdsuite: consolidated the caller fn to remove duplicate code. added HF Hessian testing, through DF can't be uncommented until refs released in qcng.; - [x] the addition of ccsd iterations qcvar to dfocc could maybe be reverted. ## Questions; - [x] Any critical eye or independent tests that you can bring to the manybody wrapper much appreciated, @jeffschriber. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2575
https://github.com/psi4/psi4/pull/2575:889,Energy Efficiency,energy,energy,889,"## Description; Change the Psi4 driver from being recursive to being based on compute classes that have planning, computing and querying functions. Then, integrate the new driver with the QCArchive project for parallelizing nbody, CBS and findif. Don't panic -- 55k of the lines added are an output.ref. See #1351 for history and bite-sized extractions. What's left here is the gory core. Because code is moving around, there's no good way to review it. The plain code file is often easier to read than the diff. Below are the 6 key files.; * `driver.py` — mostly deletions. notice that the main e/g/h functions instead of having several layers when you enter and ""bounce"" to other fns now have a single plan/compute/proceed-to-analytic decision step.; * `task_planner.py` — new file. all that complexity of figuring out which of cbs/findif/nbody are active (including simple things like `energy(""mp2/cc-pvdz"")` parsing) has landed here. at least it's no longer repeated in several functions. the main goal is to take user info from where user is accustomed to supplying it (options or kwargs) and use it to initialize a tree of ""computers"" whose leaves are all AtomicComputers (analytic single-points). you can see some examples of the planner's work in `tests/pytests/test_task_planner.py`; * `task_base.py` — new file. fairly simple. how to store the pieces of a single job in a qcschema AtomicInput and how to call qcengine to run psi4 (in api, not cli, mode) to turn that into an AtomicResult. all jobs that aren't analytic single-points pass through this file.; * `driver_findif.py` — moderately modified, mostly additions. this is the least-changed wrapper. a pydantic class has been added to link the planning and assembly steps instead of a function and code that used to live in driver.py. the main idea for wrappers is that everything should be generic python except for translation from qcschema to psi4.wfn at the end (finidf does poorly in this b/c salcs call libmints). at the top of th",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2575
https://github.com/psi4/psi4/pull/2575:3265,Energy Efficiency,energy,energy,3265,"ing to narrow the points of data transfer. again, there's an outline at the top of the file.; * `driver_nbody.py` — big modifications, might be net deletion of code lines. Lots of renaming of variables. Some bugs fixed -- I can only hope more than were added. Docstrings and code outline should be current. I didn't rework multilevel (separate file) except to make gradient run and allow different order of keys in user `levels` kwarg. I wouldn't bother with the diff. . ## Todos. - [x] `msgpack-python` added as req'd dependency. this keeps numpy arrays serialized when communicating in schema; - [x] any fns mirroring `sherrill_gold_standard` or `allen_focal_point` need to be reformatted and registered with `register_composite_function`; - [x] extrapolation functions for composite need to be registered with register_xtpl_function; - [x] CBS and xtpl functions need to be called as strings, not objects. So `energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3')` not `energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3)`.; - [x] no longer always evaluating gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass ref_gradient array to test on or `set findif fd_project` T/F explicitly to control.; - [x] `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. json_ret is now an object, so `.` access, not dictionary. The old schema runner uses a schema circa pre-2018 and we've warned it's deprecated for about a year, so I went ahead and updated all the tests to the new/current run_qcschema.; - [x] Pre-ddd, CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. With ddd, this is no longer happening, so for occasional string modelchem calcs (that",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2575
https://github.com/psi4/psi4/pull/2575:3359,Energy Efficiency,energy,energy,3359,"ing to narrow the points of data transfer. again, there's an outline at the top of the file.; * `driver_nbody.py` — big modifications, might be net deletion of code lines. Lots of renaming of variables. Some bugs fixed -- I can only hope more than were added. Docstrings and code outline should be current. I didn't rework multilevel (separate file) except to make gradient run and allow different order of keys in user `levels` kwarg. I wouldn't bother with the diff. . ## Todos. - [x] `msgpack-python` added as req'd dependency. this keeps numpy arrays serialized when communicating in schema; - [x] any fns mirroring `sherrill_gold_standard` or `allen_focal_point` need to be reformatted and registered with `register_composite_function`; - [x] extrapolation functions for composite need to be registered with register_xtpl_function; - [x] CBS and xtpl functions need to be called as strings, not objects. So `energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3')` not `energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3)`.; - [x] no longer always evaluating gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass ref_gradient array to test on or `set findif fd_project` T/F explicitly to control.; - [x] `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. json_ret is now an object, so `.` access, not dictionary. The old schema runner uses a schema circa pre-2018 and we've warned it's deprecated for about a year, so I went ahead and updated all the tests to the new/current run_qcschema.; - [x] Pre-ddd, CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. With ddd, this is no longer happening, so for occasional string modelchem calcs (that",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2575
https://github.com/psi4/psi4/pull/2575:4113,Energy Efficiency,energy,energy,4113,"er_xtpl_function; - [x] CBS and xtpl functions need to be called as strings, not objects. So `energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3')` not `energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3)`.; - [x] no longer always evaluating gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass ref_gradient array to test on or `set findif fd_project` T/F explicitly to control.; - [x] `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. json_ret is now an object, so `.` access, not dictionary. The old schema runner uses a schema circa pre-2018 and we've warned it's deprecated for about a year, so I went ahead and updated all the tests to the new/current run_qcschema.; - [x] Pre-ddd, CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. With ddd, this is no longer happening, so for occasional string modelchem calcs (that is, `energy|gradient|hessian(""mtd/bas"")` only), you may need to add a clean in the input. A few test cases now sport extra cleans. Signatures of this problem are PSIO errors and, in an obscure case, CC amplitudes being all zeros when called as mtd/bas. An example is shown below, collected by modifying steps 6 & 7 of `cbs-xtpl-energy-conv` test:. | | master (pre-v1.6) | ddd (v1.6) |; |-------------------------------------|---------------------------------------------|---------------------------------------------|; | set basis bas; energy(mtd); clean() | ok | ok |; | set basis bas; energy(mtd) | `PSIO_ERROR: (Incorrect block end address)` | `PSIO_ERROR: (Incorrect block end address)` |; | energy(mtd/bas); clean() | ok | ok |; | energy(mtd/bas) | ok | `PSIO_ERROR: (Incorrect block end address)` |. - [x] Output ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2575
https://github.com/psi4/psi4/pull/2575:4252,Energy Efficiency,energy,energy,4252,"er_xtpl_function; - [x] CBS and xtpl functions need to be called as strings, not objects. So `energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3')` not `energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3)`.; - [x] no longer always evaluating gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass ref_gradient array to test on or `set findif fd_project` T/F explicitly to control.; - [x] `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. json_ret is now an object, so `.` access, not dictionary. The old schema runner uses a schema circa pre-2018 and we've warned it's deprecated for about a year, so I went ahead and updated all the tests to the new/current run_qcschema.; - [x] Pre-ddd, CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. With ddd, this is no longer happening, so for occasional string modelchem calcs (that is, `energy|gradient|hessian(""mtd/bas"")` only), you may need to add a clean in the input. A few test cases now sport extra cleans. Signatures of this problem are PSIO errors and, in an obscure case, CC amplitudes being all zeros when called as mtd/bas. An example is shown below, collected by modifying steps 6 & 7 of `cbs-xtpl-energy-conv` test:. | | master (pre-v1.6) | ddd (v1.6) |; |-------------------------------------|---------------------------------------------|---------------------------------------------|; | set basis bas; energy(mtd); clean() | ok | ok |; | set basis bas; energy(mtd) | `PSIO_ERROR: (Incorrect block end address)` | `PSIO_ERROR: (Incorrect block end address)` |; | energy(mtd/bas); clean() | ok | ok |; | energy(mtd/bas) | ok | `PSIO_ERROR: (Incorrect block end address)` |. - [x] Output ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2575
https://github.com/psi4/psi4/pull/2575:4358,Energy Efficiency,energy,energy,4358,"not `energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3)`.; - [x] no longer always evaluating gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass ref_gradient array to test on or `set findif fd_project` T/F explicitly to control.; - [x] `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. json_ret is now an object, so `.` access, not dictionary. The old schema runner uses a schema circa pre-2018 and we've warned it's deprecated for about a year, so I went ahead and updated all the tests to the new/current run_qcschema.; - [x] Pre-ddd, CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. With ddd, this is no longer happening, so for occasional string modelchem calcs (that is, `energy|gradient|hessian(""mtd/bas"")` only), you may need to add a clean in the input. A few test cases now sport extra cleans. Signatures of this problem are PSIO errors and, in an obscure case, CC amplitudes being all zeros when called as mtd/bas. An example is shown below, collected by modifying steps 6 & 7 of `cbs-xtpl-energy-conv` test:. | | master (pre-v1.6) | ddd (v1.6) |; |-------------------------------------|---------------------------------------------|---------------------------------------------|; | set basis bas; energy(mtd); clean() | ok | ok |; | set basis bas; energy(mtd) | `PSIO_ERROR: (Incorrect block end address)` | `PSIO_ERROR: (Incorrect block end address)` |; | energy(mtd/bas); clean() | ok | ok |; | energy(mtd/bas) | ok | `PSIO_ERROR: (Incorrect block end address)` |. - [x] Output file in continuous mode now looks much as it normally does in the master branch, except there's a few more headers printed and the individual cbs/findif/nbody `AtomicResult` outputs ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2575
https://github.com/psi4/psi4/pull/2575:4681,Energy Efficiency,energy,energy-conv,4681," control.; - [x] `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. json_ret is now an object, so `.` access, not dictionary. The old schema runner uses a schema circa pre-2018 and we've warned it's deprecated for about a year, so I went ahead and updated all the tests to the new/current run_qcschema.; - [x] Pre-ddd, CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. With ddd, this is no longer happening, so for occasional string modelchem calcs (that is, `energy|gradient|hessian(""mtd/bas"")` only), you may need to add a clean in the input. A few test cases now sport extra cleans. Signatures of this problem are PSIO errors and, in an obscure case, CC amplitudes being all zeros when called as mtd/bas. An example is shown below, collected by modifying steps 6 & 7 of `cbs-xtpl-energy-conv` test:. | | master (pre-v1.6) | ddd (v1.6) |; |-------------------------------------|---------------------------------------------|---------------------------------------------|; | set basis bas; energy(mtd); clean() | ok | ok |; | set basis bas; energy(mtd) | `PSIO_ERROR: (Incorrect block end address)` | `PSIO_ERROR: (Incorrect block end address)` |; | energy(mtd/bas); clean() | ok | ok |; | energy(mtd/bas) | ok | `PSIO_ERROR: (Incorrect block end address)` |. - [x] Output file in continuous mode now looks much as it normally does in the master branch, except there's a few more headers printed and the individual cbs/findif/nbody `AtomicResult` outputs aren't added in real time. Running through QCFractal, the output file is expected to break down, but this hasn't been tried.; - [x] A Logging file has been introduced. All its contents should be considered experimental and subject to change.; - [x] Dipole derivatives through finite difference of di",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2575
https://github.com/psi4/psi4/pull/2575:4889,Energy Efficiency,energy,energy,4889,"o I went ahead and updated all the tests to the new/current run_qcschema.; - [x] Pre-ddd, CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. With ddd, this is no longer happening, so for occasional string modelchem calcs (that is, `energy|gradient|hessian(""mtd/bas"")` only), you may need to add a clean in the input. A few test cases now sport extra cleans. Signatures of this problem are PSIO errors and, in an obscure case, CC amplitudes being all zeros when called as mtd/bas. An example is shown below, collected by modifying steps 6 & 7 of `cbs-xtpl-energy-conv` test:. | | master (pre-v1.6) | ddd (v1.6) |; |-------------------------------------|---------------------------------------------|---------------------------------------------|; | set basis bas; energy(mtd); clean() | ok | ok |; | set basis bas; energy(mtd) | `PSIO_ERROR: (Incorrect block end address)` | `PSIO_ERROR: (Incorrect block end address)` |; | energy(mtd/bas); clean() | ok | ok |; | energy(mtd/bas) | ok | `PSIO_ERROR: (Incorrect block end address)` |. - [x] Output file in continuous mode now looks much as it normally does in the master branch, except there's a few more headers printed and the individual cbs/findif/nbody `AtomicResult` outputs aren't added in real time. Running through QCFractal, the output file is expected to break down, but this hasn't been tried.; - [x] A Logging file has been introduced. All its contents should be considered experimental and subject to change.; - [x] Dipole derivatives through finite difference of dipoles added, so IR intensities available; - [x] The dummy wavefunctions returned from wrappers always had some questionable properties (e.g., single method for mixed method, largeset HF basis for cbs wavefunction) can be even less realistic (e.g., always def2-svp basis for cbs).; - [x] n-body",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2575
https://github.com/psi4/psi4/pull/2575:4940,Energy Efficiency,energy,energy,4940,"o I went ahead and updated all the tests to the new/current run_qcschema.; - [x] Pre-ddd, CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. With ddd, this is no longer happening, so for occasional string modelchem calcs (that is, `energy|gradient|hessian(""mtd/bas"")` only), you may need to add a clean in the input. A few test cases now sport extra cleans. Signatures of this problem are PSIO errors and, in an obscure case, CC amplitudes being all zeros when called as mtd/bas. An example is shown below, collected by modifying steps 6 & 7 of `cbs-xtpl-energy-conv` test:. | | master (pre-v1.6) | ddd (v1.6) |; |-------------------------------------|---------------------------------------------|---------------------------------------------|; | set basis bas; energy(mtd); clean() | ok | ok |; | set basis bas; energy(mtd) | `PSIO_ERROR: (Incorrect block end address)` | `PSIO_ERROR: (Incorrect block end address)` |; | energy(mtd/bas); clean() | ok | ok |; | energy(mtd/bas) | ok | `PSIO_ERROR: (Incorrect block end address)` |. - [x] Output file in continuous mode now looks much as it normally does in the master branch, except there's a few more headers printed and the individual cbs/findif/nbody `AtomicResult` outputs aren't added in real time. Running through QCFractal, the output file is expected to break down, but this hasn't been tried.; - [x] A Logging file has been introduced. All its contents should be considered experimental and subject to change.; - [x] Dipole derivatives through finite difference of dipoles added, so IR intensities available; - [x] The dummy wavefunctions returned from wrappers always had some questionable properties (e.g., single method for mixed method, largeset HF basis for cbs wavefunction) can be even less realistic (e.g., always def2-svp basis for cbs).; - [x] n-body",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2575
