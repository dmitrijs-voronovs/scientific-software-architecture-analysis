id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCWin64EH.cpp:34,Availability,mask,mask,34,"// If we don't have chaining, the mask could still include r11,; // expressed as part of IntRegs Instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCWin64EH.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCWin64EH.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCWin64EH.cpp:85,Testability,log,logic,85,"// Clear the unwind codes in the EpilogMap, so that they don't get output; // in the logic below.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCWin64EH.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCWin64EH.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCWin64EH.cpp:3,Usability,Clear,Clear,3,"// Clear the unwind codes in the EpilogMap, so that they don't get output; // in the logic below.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCWin64EH.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCWin64EH.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCWin64EH.cpp:85,Testability,log,logic,85,"// Clear the unwind codes in the EpilogMap, so that they don't get output; // in the logic below.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCWin64EH.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCWin64EH.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCWin64EH.cpp:3,Usability,Clear,Clear,3,"// Clear the unwind codes in the EpilogMap, so that they don't get output; // in the logic below.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCWin64EH.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCWin64EH.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCWin64EH.cpp:3,Modifiability,Extend,Extended,3,"// Extended Code Words, Extended Epilog Count",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCWin64EH.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCWin64EH.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCWin64EH.cpp:24,Modifiability,Extend,Extended,24,"// Extended Code Words, Extended Epilog Count",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCWin64EH.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCWin64EH.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCWin64EH.cpp:29,Usability,clear,clears,29,"// ARM64EmitUnwindInfo above clears the info struct, so we can't check; // empty here. But if a Symbol is set, we should create the corresponding; // pdata entry.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCWin64EH.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCWin64EH.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCWin64EH.cpp:27,Usability,clear,clears,27,"// ARMEmitUnwindInfo above clears the info struct, so we can't check; // empty here. But if a Symbol is set, we should create the corresponding; // pdata entry.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCWin64EH.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCWin64EH.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCWinCOFFStreamer.cpp:3,Safety,Safe,SafeSEH,3,// SafeSEH is a feature specific to 32-bit x86. It does not exist (and is; // unnecessary) on all platforms which use table-based exception dispatch.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCWinCOFFStreamer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCWinCOFFStreamer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCXCOFFStreamer.cpp:42,Modifiability,variab,variable,42,// Emit the alignment and storage for the variable to the section.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCXCOFFStreamer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCXCOFFStreamer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/SPIRVObjectWriter.cpp:100,Modifiability,refactor,refactoring,100,// TODO: set the version on a min-necessary basis (just like the translator; // does) requires some refactoring of MCAssembler::VersionInfoType.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/SPIRVObjectWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/SPIRVObjectWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/StringTableBuilder.cpp:70,Performance,optimiz,optimization,70,"// multikeySort(Vec.slice(I, J - I), Pos + 1), but with; // tail call optimization.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/StringTableBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/StringTableBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/StringTableBuilder.cpp:2,Performance,Optimiz,Optimize,2,/*Optimize=*/,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/StringTableBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/StringTableBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/StringTableBuilder.cpp:2,Performance,Optimiz,Optimize,2,/*Optimize=*/,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/StringTableBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/StringTableBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/TargetRegistry.cpp:37,Performance,race condition,race conditions,37,// Clients are responsible for avoid race conditions in registration.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/TargetRegistry.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/TargetRegistry.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/TargetRegistry.cpp:31,Safety,avoid,avoid,31,// Clients are responsible for avoid race conditions in registration.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/TargetRegistry.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/TargetRegistry.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/TargetRegistry.cpp:3,Energy Efficiency,Allocate,Allocate,3,"// Allocate target machine. First, check whether the user has explicitly; // specified an architecture to compile for. If so we have to look it up by; // name, because it might be a backend that has no mapping to a target triple.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/TargetRegistry.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/TargetRegistry.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/WasmObjectWriter.cpp:7,Deployability,patch,patching,7,"// For patching purposes, we need to remember where each section starts, both; // for patching up the section size field, and for patching up references to; // locations within the section.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/WasmObjectWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/WasmObjectWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/WasmObjectWriter.cpp:86,Deployability,patch,patching,86,"// For patching purposes, we need to remember where each section starts, both; // for patching up the section size field, and for patching up references to; // locations within the section.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/WasmObjectWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/WasmObjectWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/WasmObjectWriter.cpp:130,Deployability,patch,patching,130,"// For patching purposes, we need to remember where each section starts, both; // for patching up the section size field, and for patching up references to; // locations within the section.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/WasmObjectWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/WasmObjectWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/WasmObjectWriter.cpp:90,Deployability,patch,patching,90,"// Write Value as an (unsigned) LEB value at offset Offset in Stream, padded; // to allow patching.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/WasmObjectWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/WasmObjectWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/WasmObjectWriter.cpp:86,Deployability,patch,patching,86,"// Write Value as an signed LEB value at offset Offset in Stream, padded; // to allow patching.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/WasmObjectWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/WasmObjectWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/WasmObjectWriter.cpp:64,Deployability,patch,patchable,64,// end anonymous namespace; // Write out a section header and a patchable section size field.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/WasmObjectWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/WasmObjectWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/WasmObjectWriter.cpp:105,Deployability,patch,patch,105,"// The section size. We don't know the size yet, so reserve enough space; // for any 32-bit value; we'll patch it later.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/WasmObjectWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/WasmObjectWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/WasmObjectWriter.cpp:15,Security,hash,hashtable,15,// The on-disk hashtable in clangast needs to be aligned by 4 bytes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/WasmObjectWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/WasmObjectWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/WasmObjectWriter.cpp:63,Deployability,patch,patch,63,"// Now that the section is complete and we know how big it is, patch up the; // section size field at the start of the section.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/WasmObjectWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/WasmObjectWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/WasmObjectWriter.cpp:88,Deployability,patch,patching,88,// /dev/null doesn't support seek/tell and can report offset of 0.; // Simply skip this patching in that case.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/WasmObjectWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/WasmObjectWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/WasmObjectWriter.cpp:71,Usability,Simpl,Simply,71,// /dev/null doesn't support seek/tell and can report offset of 0.; // Simply skip this patching in that case.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/WasmObjectWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/WasmObjectWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/WasmObjectWriter.cpp:87,Integrability,wrap,wrapping,87,"// Put any constant offset in an addend. Offsets can be negative, and; // LLVM expects wrapping, in contrast to wasm's immediates which can't; // be negative and don't wrap.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/WasmObjectWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/WasmObjectWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/WasmObjectWriter.cpp:168,Integrability,wrap,wrap,168,"// Put any constant offset in an addend. Offsets can be negative, and; // LLVM expects wrapping, in contrast to wasm's immediates which can't; // be negative and don't wrap.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/WasmObjectWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/WasmObjectWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/WasmObjectWriter.cpp:112,Testability,test,test,112,// Absolute offset within a section or a function.; // Currently only supported for metadata sections.; // See: test/MC/WebAssembly/blockaddress.ll,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/WasmObjectWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/WasmObjectWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/WasmObjectWriter.cpp:63,Integrability,wrap,wrap,63,// Ignore overflow. LLVM allows address arithmetic to silently wrap.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/WasmObjectWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/WasmObjectWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/WasmObjectWriter.cpp:49,Performance,load,loads,49,"// For now, always emit the memory import, since loads and stores are not; // valid without it. In the future, we could perhaps be more clever and omit; // it if there are no loads or stores.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/WasmObjectWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/WasmObjectWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/WasmObjectWriter.cpp:175,Performance,load,loads,175,"// For now, always emit the memory import, since loads and stores are not; // valid without it. In the future, we could perhaps be more clever and omit; // it if there are no loads or stores.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/WasmObjectWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/WasmObjectWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/WasmObjectWriter.cpp:32,Availability,avail,available,32,// Collect information from the available symbols.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/WasmObjectWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/WasmObjectWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/WinCOFFObjectWriter.cpp:18,Integrability,interface,interface,18,// MCObjectWriter interface implementation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/WinCOFFObjectWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/WinCOFFObjectWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/WinCOFFObjectWriter.cpp:3,Deployability,Update,Update,3,// Update the section definition auxiliary symbol to record the CRC.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/WinCOFFObjectWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/WinCOFFObjectWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/WinCOFFObjectWriter.cpp:85,Safety,avoid,avoid,85,"// Although it is not explicitly requested by the Microsoft COFF spec,; // we should avoid emitting forward associative section references,; // because MSVC link.exe as of 2017 cannot handle that.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/WinCOFFObjectWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/WinCOFFObjectWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/WinCOFFObjectWriter.cpp:78,Performance,perform,perform,78,"// IMAGE_REL_BRANCH20T, IMAGE_REL_ARM_BRANCH24T, IMAGE_REL_ARM_BLX23T all; // perform a 4 byte adjustment to the relocation. Relative branches are; // offset by 4 on ARM, however, because there is no RELA relocations, all; // branches are offset by 4.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/WinCOFFObjectWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/WinCOFFObjectWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/WinCOFFObjectWriter.cpp:3,Deployability,Update,Update,3,// Update section number & offset for symbols that have them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/WinCOFFObjectWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/WinCOFFObjectWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/WinCOFFObjectWriter.cpp:3,Deployability,Update,Update,3,// Update auxiliary symbol info.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/WinCOFFObjectWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/WinCOFFObjectWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/WinCOFFObjectWriter.cpp:11,Availability,error,error,11,// It's an error to try to associate with an undefined symbol or a symbol; // without a section.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/WinCOFFObjectWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/WinCOFFObjectWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/WinCOFFObjectWriter.cpp:227,Integrability,interface,interface,227,//------------------------------------------------------------------------------; // WinCOFFObjectWriter class implementation; ////////////////////////////////////////////////////////////////////////////////; // MCObjectWriter interface implementations,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/WinCOFFObjectWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/WinCOFFObjectWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/WinCOFFObjectWriter.cpp:128,Integrability,depend,depend,128,"// Don't drop relocations between functions, even if they are in the same text; // section. Multiple Visual C++ linker features depend on having the; // relocations present. The /INCREMENTAL flag will cause these relocations to; // point to thunks, and the /GUARD:CF flag assumes that it can use relocations; // to approximate the set of all address taken functions. LLD's implementation; // of /GUARD:CF also relies on the existance of these relocations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/WinCOFFObjectWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/WinCOFFObjectWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/XCOFFObjectWriter.cpp:3,Integrability,Wrap,Wrapper,3,// Wrapper around an MCSymbolXCOFF.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/XCOFFObjectWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/XCOFFObjectWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/XCOFFObjectWriter.cpp:3,Integrability,Wrap,Wrapper,3,// Wrapper for an MCSectionXCOFF.; // It can be a Csect or debug section or DWARF section and so on.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/XCOFFObjectWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/XCOFFObjectWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/XCOFFObjectWriter.cpp:40,Energy Efficiency,allocate,allocated,40,// Virtual sections do not need storage allocated in the object file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/XCOFFObjectWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/XCOFFObjectWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/XCOFFObjectWriter.cpp:3,Usability,Clear,Clear,3,// Clear any csects we have stored.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/XCOFFObjectWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/XCOFFObjectWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/XCOFFObjectWriter.cpp:31,Performance,Load,Loadable,31,"// TODO: Remove this override. Loadable sections (e.g., .text, .data) may need; // to be aligned. Other sections generally don't need any alignment, but if; // they're aligned, the RawPointer should be adjusted before writing the; // section. Then a dwarf-specific function wouldn't be needed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/XCOFFObjectWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/XCOFFObjectWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/XCOFFObjectWriter.cpp:75,Integrability,wrap,wrapper,75,// Maps the MCSection representation to its corresponding XCOFFSection; // wrapper. Needed for finding the XCOFFSection to insert an MCSymbol into; // from its containing MCSectionXCOFF.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/XCOFFObjectWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/XCOFFObjectWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/XCOFFObjectWriter.cpp:3,Usability,Clear,Clear,3,// Clear the mappings we created.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/XCOFFObjectWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/XCOFFObjectWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/XCOFFObjectWriter.cpp:85,Performance,load,load,85,// The FixedValue should always be zero since the region handle is only; // known at load time.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/XCOFFObjectWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/XCOFFObjectWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/XCOFFObjectWriter.cpp:8,Availability,Error,Error,8,// TODO Error check that the number of symbol table entries fits in 32-bits; // signed ...,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/XCOFFObjectWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/XCOFFObjectWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/XCOFFObjectWriter.cpp:13,Testability,log,log,13,"// Takes the log base 2 of the alignment and shifts the result into the 5 most; // significant bits of a byte, then or's in the csect type into the least; // significant 3 bits.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/XCOFFObjectWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/XCOFFObjectWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.cpp:56,Integrability,Interface,Interface,56,"//===-- lib/MC/Disassembler.cpp - Disassembler Public C Interface ---------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.cpp:207,Availability,avail,available,207,"/// Gets latency information for \p Inst from the itinerary; /// scheduling model, based on \p DC information.; /// \return The maximum expected latency over all the operands or -1; /// if no information is available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.cpp:65,Energy Efficiency,schedul,scheduling,65,"/// Gets latency information for \p Inst from the itinerary; /// scheduling model, based on \p DC information.; /// \return The maximum expected latency over all the operands or -1; /// if no information is available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.cpp:9,Performance,latency,latency,9,"/// Gets latency information for \p Inst from the itinerary; /// scheduling model, based on \p DC information.; /// \return The maximum expected latency over all the operands or -1; /// if no information is available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.cpp:145,Performance,latency,latency,145,"/// Gets latency information for \p Inst from the itinerary; /// scheduling model, based on \p DC information.; /// \return The maximum expected latency over all the operands or -1; /// if no information is available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.cpp:11,Energy Efficiency,schedul,scheduling,11,// Get the scheduling class of the requested instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.cpp:169,Availability,avail,available,169,"/// Gets latency information for \p Inst, based on \p DC information.; /// \return The maximum expected latency over all the definitions or -1; /// if no information is available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.cpp:9,Performance,latency,latency,9,"/// Gets latency information for \p Inst, based on \p DC information.; /// \return The maximum expected latency over all the definitions or -1; /// if no information is available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.cpp:104,Performance,latency,latency,104,"/// Gets latency information for \p Inst, based on \p DC information.; /// \return The maximum expected latency over all the definitions or -1; /// if no information is available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.cpp:18,Energy Efficiency,schedul,scheduling,18,// Try to compute scheduling information.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.cpp:22,Energy Efficiency,schedul,scheduling,22,// Check if we have a scheduling model for instructions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.cpp:50,Energy Efficiency,schedul,scheduling,50,// Try to fall back to the itinerary model if the scheduling model doesn't; // have a scheduling table. Note the default does not have a table.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.cpp:86,Energy Efficiency,schedul,scheduling,86,// Try to fall back to the itinerary model if the scheduling model doesn't; // have a scheduling table. Note the default does not have a table.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.cpp:11,Energy Efficiency,schedul,scheduling,11,// Get the scheduling class of the requested instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.cpp:18,Performance,latency,latency,18,// Compute output latency.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.cpp:33,Performance,latency,latency,33,// Lookup the definition's write latency in SubtargetInfo.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.cpp:94,Availability,avail,available,94,"/// Emits latency information in DC->CommentStream for \p Inst, based; /// on the information available in \p DC.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.cpp:10,Performance,latency,latency,10,"/// Emits latency information in DC->CommentStream for \p Inst, based; /// on the information available in \p DC.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.cpp:3,Integrability,Wrap,Wrap,3,"// Wrap the pointer to the Bytes, BytesSize and PC in a MemoryObject.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.cpp:42,Availability,failure,failure,42,// FIXME: Do something different for soft failure modes?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.h:405,Integrability,interface,interface,405,"//===------------- Disassembler.h - LLVM Disassembler -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the interface for the Disassembly library's disassembler; // context. The disassembler is responsible for producing strings for; // individual instructions according to a given architecture and disassembly; // syntax.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.h:229,Availability,error,error,229,//; // The objects created and saved by LLVMCreateDisasm() then used by; // LLVMDisasmInstruction().; //; // The LLVM target corresponding to the disassembler.; // FIXME: using std::unique_ptr<const llvm::Target> causes a malloc error; // when this LLVMDisasmContext is deleted.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCDisassembler/Disassembler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCDisassembler/MCDisassembler.cpp:41,Integrability,interface,interface,41,"//===- MCDisassembler.cpp - Disassembler interface ------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCDisassembler/MCDisassembler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCDisassembler/MCDisassembler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCDisassembler/MCExternalSymbolizer.cpp:3,Usability,Clear,Clear,3,// Clear SymbolicOp.Value from above and also all other fields.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCDisassembler/MCExternalSymbolizer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCDisassembler/MCExternalSymbolizer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCDisassembler/MCExternalSymbolizer.cpp:76,Performance,load,load,76,// This function tries to add a comment as to what is being referenced by a load; // instruction with the base register that is the Pc. These can often be values; // in a literal pool near the Address of the instruction. The Address of the; // instruction and its immediate Value are used as a possible literal pool entry.; // The SymbolLookUp call back will return the name of a symbol referenced by the; // literal pool's entry if the referenced address is that of a symbol. Or it; // will return a pointer to a literal 'C' string if the referenced address of; // the literal pool's entry is an address into a section with C string literals.; // Or if the reference is to an Objective-C data structure it will return a; // specific reference type for it and a string.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCDisassembler/MCExternalSymbolizer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCDisassembler/MCExternalSymbolizer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmLexer.cpp:26,Availability,error,error,26,/// ReturnError - Set the error to the specified string at the specified; /// location. This is defined to always return AsmToken::Error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmLexer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmLexer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmLexer.cpp:131,Availability,Error,Error,131,/// ReturnError - Set the error to the specified string at the specified; /// location. This is defined to always return AsmToken::Error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmLexer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmLexer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmLexer.cpp:52,Security,hash,hash,52,"// If this starts with a '#', this may be a cpp; // hash directive and otherwise a line comment.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmLexer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmLexer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmLexer.cpp:158,Integrability,depend,dependent,158,"// Handle identifier: [a-zA-Z_.$@#?][a-zA-Z0-9_.$@#?]*; // Whether or not the lexer accepts '$', '@', '#' and '?' at the start of; // an identifier is target-dependent. These characters are handled in the; // respective switch cases.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmLexer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmLexer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmLexer.cpp:30,Availability,error,error,30,"// Unknown character, emit an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmLexer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmLexer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:36,Usability,resume,resume,36,/// The buffer where parsing should resume upon instantiation completion.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:38,Usability,resume,resume,38,/// The location where parsing should resume upon instantiation completion.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:17,Availability,error,error,17,/// Was there an error parsing the inline assembly?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:40,Security,hash,hash,40,/// The values from the last parsed cpp hash file line comment if any.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:36,Security,hash,hash,36,"/// The filename from the first cpp hash file line comment, if any.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:9,Integrability,rout,routine,9,"/// This routine uses the target specific ParseInstruction function to; /// parse an instruction into Operands, and then call the target specific; /// MatchAndEmit function to match and emit the instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:22,Integrability,Interface,Interface,22,/// @name MCAsmParser Interface; /// {,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:51,Availability,failure,failure,51,/// Enter the specified file. This returns true on failure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:84,Availability,failure,failure,84,/// Process the specified file for the .incbin directive.; /// This returns true on failure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:5,Safety,abort,abort,5,"// "".abort""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:22,Integrability,depend,depending,22,"// "".ifb"" or "".ifnb"", depending on ExpectBlank.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:22,Integrability,depend,depending,22,"// "".ifc"" or "".ifnc"", depending on ExpectEqual.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:25,Integrability,depend,depending,25,"// "".ifeqs"" or "".ifnes"", depending on ExpectEqual.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:26,Integrability,depend,depending,26,"// "".ifdef"" or "".ifndef"", depending on expect_defined",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:15,Availability,error,error,15,"// "".err"" or "".error""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:177,Availability,failure,failure,177,/// Process the specified .incbin file by searching for it in the include paths; /// then just emitting the byte contents of the file to the streamer. This; /// returns true on failure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:89,Security,checksum,checksum,89,"// Use the first #line directive for this, if any. It's preprocessed, so; // there is no checksum, and of course no source directive.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:22,Availability,Error,Error,22,// If we have a Lexer Error we are on an Error Token. Load in Lexer Error; // for printing ErrMsg via Lex() only if no (presumably better) parser error; // exists.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:41,Availability,Error,Error,41,// If we have a Lexer Error we are on an Error Token. Load in Lexer Error; // for printing ErrMsg via Lex() only if no (presumably better) parser error; // exists.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:68,Availability,Error,Error,68,// If we have a Lexer Error we are on an Error Token. Load in Lexer Error; // for printing ErrMsg via Lex() only if no (presumably better) parser error; // exists.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:146,Availability,error,error,146,// If we have a Lexer Error we are on an Error Token. Load in Lexer Error; // for printing ErrMsg via Lex() only if no (presumably better) parser error; // exists.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:54,Performance,Load,Load,54,// If we have a Lexer Error we are on an Error Token. Load in Lexer Error; // for printing ErrMsg via Lex() only if no (presumably better) parser error; // exists.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:55,Availability,error,error,55,// parseStatement returned true so may need to emit an error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:7,Availability,error,errors,7,// All errors should have been emitted.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:3,Modifiability,Variab,Variable,3,"// Variable symbols may not be marked as defined, so check those; // explicitly. If we know it's a variable, we have a definition for; // the purposes of this check.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:99,Modifiability,variab,variable,99,"// Variable symbols may not be marked as defined, so check those; // explicitly. If we know it's a variable, we have a definition for; // the purposes of this check.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:46,Availability,error,errors,46,// Finalize the output stream if there are no errors and if the client wants; // us to.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:40,Testability,test,testing,40,/// Throw away the rest of the line for testing purposes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:17,Availability,error,error,17,// If we have an error assume that we've already handled it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:26,Modifiability,variab,variable,26,"// If this is an absolute variable reference, substitute it now to preserve; // semantics in the face of reassignment.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:44,Safety,safe,safely,44,// if this is a line comment we can drop it safely,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:29,Modifiability,variab,variable,29,// Diagnose attempt to use a variable as a label.; //; // FIXME: Diagnostics. Note the location of the definition as a label.; // FIXME: This doesn't diagnose assignment to a symbol which has been; // implicitly marked as external.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:102,Availability,avail,available,102,// End of Labels should be treated as end of line for lexing; // purposes but that information is not available to the Lexer who; // does not understand Labels. This may cause us to see a Hash; // here instead of a preprocessor line comment.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:188,Security,Hash,Hash,188,// End of Labels should be treated as end of line for lexing; // purposes but that information is not available to the Lexer who; // does not understand Labels. This may cause us to see a Hash; // here instead of a preprocessor line comment.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:54,Safety,avoid,avoid,54,"// Consume any end of statement token, if present, to avoid spurious; // addBlankLine calls().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:33,Security,hash,hash,33,// If we previously parsed a cpp hash file line comment then make sure the; // current Dwarf File is for the CppHashFilename if not then emit the; // Dwarf File table for it and adjust the line number for the .loc.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:143,Availability,error,error,143,// Eat the hash token.; // Lexer only ever emits HashDirective if it fully formed if it's; // done the checking already so this is an internal error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:11,Security,hash,hash,11,// Eat the hash token.; // Lexer only ever emits HashDirective if it fully formed if it's; // done the checking already so this is an internal error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:49,Security,Hash,HashDirective,49,// Eat the hash token.; // Lexer only ever emits HashDirective if it fully formed if it's; // done the checking already so this is an internal error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:33,Security,hash,hash,33,/// will use the last parsed cpp hash line filename comment; /// for the Filename and LineNo if any in the diagnostic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:100,Integrability,message,message,100,// Like SourceMgr::printMessage() we need to print the include stack if any; // before printing the message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:31,Security,hash,hash,31,// If we have not parsed a cpp hash line filename comment or the source; // manager changed or buffer changed (like in a nested include) then just; // print the normal diagnostic using its Filename and LineNo.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:27,Modifiability,variab,variable,27,// Check for the \@ pseudo-variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:23,Security,validat,validated,23,// Only Token that was validated as a string and begins with '<'; // is considered altMacroString!!!,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:3,Deployability,Update,Update,3,// Update the scan point.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:93,Availability,error,error,93,"// In the case where we parse an expression starting with a '.', we will; // not generate an error, nor will we create a symbol. In this case we; // should just return out.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:272,Integrability,depend,dependent,272,"// The assembler has relaxed rules for accepting identifiers, in particular we; // allow things like '.globl $foo' and '.def @feat.00', which would normally be; // separate tokens. At this level, we have already lexed so we cannot (currently); // handle this as a context dependent token, instead we detect adjacent tokens; // and return the combined identifier.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:300,Safety,detect,detect,300,"// The assembler has relaxed rules for accepting identifiers, in particular we; // allow things like '.globl $foo' and '.def @feat.00', which would normally be; // separate tokens. At this level, we have already lexed so we cannot (currently); // handle this as a context dependent token, instead we detect adjacent tokens; // and return the combined identifier.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:54,Availability,error,error,54,// Always emit an alignment here even if we thrown an error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:42,Energy Efficiency,power,power,42,"// Reject alignments that aren't either a power of two or zero,; // for gas compatibility. Alignment of zero is silently rounded; // up to one.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:95,Security,checksum,checksum,95,/// parseDirectiveFile; /// ::= .file filename; /// ::= .file number [directory] filename [md5 checksum] [source source-text],MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:127,Modifiability,portab,portability,127,// Ignore the directive if there is no number and the target doesn't support; // numberless .file directives. This allows some portability of assembler; // between different object file formats.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:3,Deployability,Upgrade,Upgrade,3,// Upgrade to Version 5 for assembly actions like clang -c a.s.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:60,Security,checksum,checksum,60,/// parseDirectiveCVFile; /// ::= .cv_file number filename [checksum] [checksumkind],MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:71,Security,checksum,checksumkind,71,/// parseDirectiveCVFile; /// ::= .cv_file number filename [checksum] [checksumkind],MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:56,Usability,simpl,simple,56,/// parseDirectiveCFIStartProc; /// ::= .cfi_startproc [simple],MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:11,Availability,error,error,11,// Emit an error if two (or more) named parameters share the same name,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:62,Availability,Error,Errors,62,"// Consuming deferred text, so use Lexer.Lex to ignore Lexing Errors",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:17,Availability,error,errors,17,// Ignore Lexing errors in macros.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:942,Usability,simpl,simply,942,"/// checkForBadMacro; ///; /// With the support added for named parameters there may be code out there that; /// is transitioning from positional parameters. In versions of gas that did; /// not support named parameters they would be ignored on the macro definition.; /// But to support both styles of parameters this is not possible so if a macro; /// definition has named parameters but does not use them and has what appears; /// to be positional parameters, strings like $1, $2, ... and $n, then issue a; /// warning that the positional parameter found in body which have no effect.; /// Hoping the developer will either remove the named parameters from the macro; /// definition so the positional parameters get used if that was what was; /// intended or change the macro to use the named parameters. It is possible; /// this warning will trigger when the none of the named parameters are used; /// and the strings like $1 are infact to simply to be passed trough unchanged.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:3,Deployability,Update,Update,3,// Update the scan point.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:54,Security,validat,validate,54,// If this target takes alignments in bytes (not log) validate and convert.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:49,Testability,log,log,49,// If this target takes alignments in bytes (not log) validate and convert.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:45,Integrability,message,message,45,/// parseDirectiveAbort; /// ::= .abort [... message ...],MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:34,Safety,abort,abort,34,/// parseDirectiveAbort; /// ::= .abort [... message ...],MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:19,Safety,abort,abort,19,// FIXME: Actually abort assembly here.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:97,Safety,avoid,avoid,97,// Attempt to switch the lexer to the included file before consuming the; // end of statement to avoid losing it when we switch.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:48,Availability,error,error,48,/// parseDirectiveError; /// ::= .err; /// ::= .error [string],MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:85,Usability,undo,undocumented,85,"// Note that the AtPseudoVariable is enabled for instantiations of .irp.; // This is undocumented, but GAS seems to support it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:86,Usability,undo,undocumented,86,"// Note that the AtPseudoVariable is enabled for instantiations of .irpc.; // This is undocumented, but GAS seems to support it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:29,Usability,GUID,GUID,29,// Parse inline stack like @ GUID:11:12 @ GUID:1:11 @ GUID:3:21,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:42,Usability,GUID,GUID,42,// Parse inline stack like @ GUID:11:12 @ GUID:1:11 @ GUID:3:21,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:54,Usability,GUID,GUID,54,// Parse inline stack like @ GUID:11:12 @ GUID:1:11 @ GUID:3:21,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:80,Modifiability,rewrite,rewrite,80,"// It's possible to have a SizeDirective, Imm/ImmPrefix and an Input/Output; // rewrite to the same location. Make sure the SizeDirective rewrite is; // performed first, then the Imm/ImmPrefix and finally the Input/Output. This; // ensures the sort algorithm is stable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:138,Modifiability,rewrite,rewrite,138,"// It's possible to have a SizeDirective, Imm/ImmPrefix and an Input/Output; // rewrite to the same location. Make sure the SizeDirective rewrite is; // performed first, then the Imm/ImmPrefix and finally the Input/Output. This; // ensures the sort algorithm is stable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:153,Performance,perform,performed,153,"// It's possible to have a SizeDirective, Imm/ImmPrefix and an Input/Output; // rewrite to the same location. Make sure the SizeDirective rewrite is; // performed first, then the Imm/ImmPrefix and finally the Input/Output. This; // ensures the sort algorithm is stable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:16,Availability,error,errors,16,// Emit pending errors if any exist.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:14,Availability,error,error,14,// No pending error should exist here.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:53,Modifiability,rewrite,rewrite,53,// Check if this has already been covered by another rewrite...,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:3,Modifiability,Rewrite,Rewrite,3,// Rewrite expressions in $N notation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:13,Modifiability,rewrite,rewrite,13,"// Fuse this rewrite with a rewrite of the offset name, if present.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:28,Modifiability,rewrite,rewrite,28,"// Fuse this rewrite with a rewrite of the offset name, if present.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:11,Security,validat,validated,11,// We have validated whether the token is an Identifier.; // Now we have to validate whether the token is a; // valid HLASM Label.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:76,Security,validat,validate,76,// We have validated whether the token is an Identifier.; // Now we have to validate whether the token is a; // valid HLASM Label.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:44,Safety,safe,safely,44,// if this is a line comment we can drop it safely,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:77,Safety,safe,safely,77,// We have established how to parse the inline asm statement.; // Now we can safely lex any leading spaces to get to the; // first token.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:21,Availability,error,errors,21,"// If there were any errors while handling and emitting the label,; // early return.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:39,Usability,simpl,simply,39,"// If we know we've failed in parsing, simply eat until end of the; // statement. This ensures that we don't process any other statements.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:44,Modifiability,variab,variable,44,"// Validate that the LHS is allowed to be a variable (either it has not been; // used as a symbol, or it is an absolute symbol).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:3,Security,Validat,Validate,3,"// Validate that the LHS is allowed to be a variable (either it has not been; // used as a symbol, or it is an absolute symbol).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp:26,Modifiability,variab,variables,26,// Allow redefinitions of variables that haven't yet been used.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/AsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/COFFAsmParser.cpp:18,Performance,load,loaded,18,// section is not loaded,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/COFFAsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/COFFAsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/COFFAsmParser.cpp:420,Usability,clear,clears,420,"// .section name [, ""flags""] [, identifier [ identifier ], identifier]; // .pushsection <same as above>; //; // Supported flags:; // a: Ignored.; // b: BSS section (uninitialized data); // d: data section (initialized data); // n: ""noload"" section (removed by linker); // D: Discardable section; // r: Readable section; // s: Shared section; // w: Writable section; // x: Executable section; // y: Not-readable section (clears 'r'); //; // Subsections are not supported.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/COFFAsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/COFFAsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/COFFMasmParser.cpp:35,Safety,safe,safeseh,35,// popcontext; // pushcontext; // .safeseh; // Procedure directives,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/COFFMasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/COFFMasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/COFFMasmParser.cpp:3,Usability,Simpl,Simplified,3,// Simplified segment directives,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/COFFMasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/COFFMasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/COFFMasmParser.cpp:20,Usability,simpl,simple,20,// Define symbol as simple external function,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/COFFMasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/COFFMasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/DarwinAsmParser.cpp:49,Performance,load,load,49,"/// parseDirectiveDumpOrLoad; /// ::= ( .dump | .load ) ""filename""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/DarwinAsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/DarwinAsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/DarwinAsmParser.cpp:29,Performance,load,load,29,// FIXME: If/when .dump and .load are implemented they will be done in the; // the assembly parser and not have any need for an MCStreamer API.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/DarwinAsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/DarwinAsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/DarwinAsmParser.cpp:40,Energy Efficiency,power,powerpc,40,// Issue a warning if the target is not powerpc and Section is a *coal* section.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/DarwinAsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/DarwinAsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/DarwinAsmParser.cpp:66,Integrability,message,message,66,/// ParseDirectiveSecureLogUnique; /// ::= .secure_log_unique ... message ...,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/DarwinAsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/DarwinAsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/DarwinAsmParser.cpp:11,Security,secur,secure,11,// Get the secure log path.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/DarwinAsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/DarwinAsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/DarwinAsmParser.cpp:18,Testability,log,log,18,// Get the secure log path.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/DarwinAsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/DarwinAsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/DarwinAsmParser.cpp:12,Security,secur,secure,12,// Open the secure log file if we haven't already.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/DarwinAsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/DarwinAsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/DarwinAsmParser.cpp:19,Testability,log,log,19,// Open the secure log file if we haven't already.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/DarwinAsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/DarwinAsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/DarwinAsmParser.cpp:13,Integrability,message,message,13,// Write the message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/DarwinAsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/DarwinAsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/DarwinAsmParser.cpp:45,Energy Efficiency,power,power,45,"// NOTE: The alignment in the directive is a power of 2 value, the assembler; // may internally end up wanting an alignment in bytes.; // FIXME: Diagnose overflow.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/DarwinAsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/DarwinAsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/DarwinAsmParser.cpp:11,Deployability,update,update,11,"// Get the update level, if specified",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/DarwinAsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/DarwinAsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/ELFAsmParser.cpp:104,Security,access,access,104,// FIXME: Part of this logic is duplicated in the MCELFStreamer. What is; // the best way for us to get access to it?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/ELFAsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/ELFAsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/ELFAsmParser.cpp:23,Testability,log,logic,23,// FIXME: Part of this logic is duplicated in the MCELFStreamer. What is; // the best way for us to get access to it?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/ELFAsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/ELFAsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/ELFAsmParser.cpp:154,Availability,error,error,154,"// x86-64 psABI names SHT_X86_64_UNWIND as the canonical type for .eh_frame,; // but GNU as emits SHT_PROGBITS .eh_frame for .cfi_* directives. Don't; // error for SHT_PROGBITS .eh_frame",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/ELFAsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/ELFAsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:36,Usability,resume,resume,36,/// The buffer where parsing should resume upon instantiation completion.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:38,Usability,resume,resume,38,/// The location where parsing should resume upon instantiation completion.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:17,Availability,error,error,17,/// Was there an error parsing the inline assembly?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:23,Modifiability,variab,variable,23,/// maps assembly-time variable names to variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:41,Modifiability,variab,variables,41,/// maps assembly-time variable names to variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:40,Security,hash,hash,40,/// The values from the last parsed cpp hash file line comment if any.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:36,Security,hash,hash,36,"/// The filename from the first cpp hash file line comment, if any.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:22,Integrability,Interface,Interface,22,/// @name MCAsmParser Interface; /// {,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:51,Availability,failure,failure,51,/// Enter the specified file. This returns true on failure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:20,Integrability,depend,depending,20,"// ""ifb"" or ""ifnb"", depending on ExpectBlank.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:44,Integrability,depend,depending,44,"// ""ifidn"", ""ifdif"", ""ifidni"", or ""ifdifi"", depending on ExpectEqual and; // CaseInsensitive.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:24,Integrability,depend,depending,24,"// ""ifdef"" or ""ifndef"", depending on expect_defined",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:28,Integrability,depend,depending,28,"// ""elseifb"" or ""elseifnb"", depending on ExpectBlank.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:34,Integrability,depend,depending,34,"// "".elseifdef"" or "".elseifndef"", depending on expect_defined",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:60,Integrability,depend,depending,60,"// ""elseifidn"", ""elseifdif"", ""elseifidni"", or ""elseifdifi"", depending on; // ExpectEqual and CaseInsensitive.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:24,Integrability,depend,depending,24,"// "".errb"" or "".errnb"", depending on ExpectBlank.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:28,Integrability,depend,depending,28,"// "".errdef"" or "".errndef"", depending on ExpectBlank.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:52,Integrability,depend,depending,52,"// "".erridn"", "".errdif"", "".erridni"", or "".errdifi"", depending on ExpectEqual; // and CaseInsensitive.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:24,Integrability,depend,depending,24,"// "".erre"" or "".errnz"", depending on ExpectZero.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:4,Availability,echo,echo,4,"// ""echo""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:89,Security,checksum,checksum,89,"// Use the first #line directive for this, if any. It's preprocessed, so; // there is no checksum, and of course no source directive.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:22,Availability,Error,Error,22,// If we have a Lexer Error we are on an Error Token. Load in Lexer Error; // for printing ErrMsg via Lex() only if no (presumably better) parser error; // exists.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:41,Availability,Error,Error,41,// If we have a Lexer Error we are on an Error Token. Load in Lexer Error; // for printing ErrMsg via Lex() only if no (presumably better) parser error; // exists.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:68,Availability,Error,Error,68,// If we have a Lexer Error we are on an Error Token. Load in Lexer Error; // for printing ErrMsg via Lex() only if no (presumably better) parser error; // exists.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:146,Availability,error,error,146,// If we have a Lexer Error we are on an Error Token. Load in Lexer Error; // for printing ErrMsg via Lex() only if no (presumably better) parser error; // exists.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:54,Performance,Load,Load,54,// If we have a Lexer Error we are on an Error Token. Load in Lexer Error; // for printing ErrMsg via Lex() only if no (presumably better) parser error; // exists.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:55,Availability,error,error,55,// parseStatement returned true so may need to emit an error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:7,Availability,error,errors,7,// All errors should have been emitted.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:3,Modifiability,Variab,Variable,3,"// Variable symbols may not be marked as defined, so check those; // explicitly. If we know it's a variable, we have a definition for; // the purposes of this check.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:99,Modifiability,variab,variable,99,"// Variable symbols may not be marked as defined, so check those; // explicitly. If we know it's a variable, we have a definition for; // the purposes of this check.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:46,Availability,error,errors,46,// Finalize the output stream if there are no errors and if the client wants; // us to.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:40,Testability,test,testing,40,/// Throw away the rest of the line for testing purposes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:17,Availability,error,error,17,// If we have an error assume that we've already handled it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:3,Modifiability,Variab,Variables,3,"// Variables use case-insensitive symbol names; if this is a variable, we; // find the symbol using its canonical name.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:61,Modifiability,variab,variable,61,"// Variables use case-insensitive symbol names; if this is a variable, we; // find the symbol using its canonical name.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:26,Modifiability,variab,variable,26,"// If this is an absolute variable reference, substitute it now to preserve; // semantics in the face of reassignment.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:44,Safety,safe,safely,44,// If this is a line comment we can drop it safely.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:29,Modifiability,variab,variable,29,// Diagnose attempt to use a variable as a label.; //; // FIXME: Diagnostics. Note the location of the definition as a label.; // FIXME: This doesn't diagnose assignment to a symbol which has been; // implicitly marked as external.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:102,Availability,avail,available,102,// End of Labels should be treated as end of line for lexing; // purposes but that information is not available to the Lexer who; // does not understand Labels. This may cause us to see a Hash; // here instead of a preprocessor line comment.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:188,Security,Hash,Hash,188,// End of Labels should be treated as end of line for lexing; // purposes but that information is not available to the Lexer who; // does not understand Labels. This may cause us to see a Hash; // here instead of a preprocessor line comment.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:54,Safety,avoid,avoid,54,"// Consume any end of statement token, if present, to avoid spurious; // addBlankLine calls().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:45,Modifiability,variab,variable,45,"// Finally, we check if this is allocating a variable with user-defined type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:33,Security,hash,hash,33,// If we previously parsed a cpp hash file line comment then make sure the; // current Dwarf File is for the CppHashFilename if not then emit the; // Dwarf File table for it and adjust the line number for the .loc.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:143,Availability,error,error,143,// Eat the hash token.; // Lexer only ever emits HashDirective if it fully formed if it's; // done the checking already so this is an internal error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:11,Security,hash,hash,11,// Eat the hash token.; // Lexer only ever emits HashDirective if it fully formed if it's; // done the checking already so this is an internal error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:49,Security,Hash,HashDirective,49,// Eat the hash token.; // Lexer only ever emits HashDirective if it fully formed if it's; // done the checking already so this is an internal error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:33,Security,hash,hash,33,/// will use the last parsed cpp hash line filename comment; /// for the Filename and LineNo if any in the diagnostic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:100,Integrability,message,message,100,// Like SourceMgr::printMessage() we need to print the include stack if any; // before printing the message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:31,Security,hash,hash,31,// If we have not parsed a cpp hash line filename comment or the source; // manager changed or buffer changed (like in a nested include) then just; // print the normal diagnostic using its Filename and LineNo.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:3,Deployability,Update,Update,3,// Update the scan point.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:22,Availability,Error,Error,22,// If we have a Lexer Error we are on an Error Token. Load in Lexer Error; // for printing ErrMsg via Lex() only if no (presumably better) parser error; // exists.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:41,Availability,Error,Error,41,// If we have a Lexer Error we are on an Error Token. Load in Lexer Error; // for printing ErrMsg via Lex() only if no (presumably better) parser error; // exists.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:68,Availability,Error,Error,68,// If we have a Lexer Error we are on an Error Token. Load in Lexer Error; // for printing ErrMsg via Lex() only if no (presumably better) parser error; // exists.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:146,Availability,error,error,146,// If we have a Lexer Error we are on an Error Token. Load in Lexer Error; // for printing ErrMsg via Lex() only if no (presumably better) parser error; // exists.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:54,Performance,Load,Load,54,// If we have a Lexer Error we are on an Error Token. Load in Lexer Error; // for printing ErrMsg via Lex() only if no (presumably better) parser error; // exists.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:55,Availability,error,error,55,// parseStatement returned true so may need to emit an error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:272,Integrability,depend,dependent,272,"// The assembler has relaxed rules for accepting identifiers, in particular we; // allow things like '.globl $foo' and '.def @feat.00', which would normally; // be separate tokens. At this level, we have already lexed so we cannot; // (currently) handle this as a context dependent token, instead we detect; // adjacent tokens and return the combined identifier.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:300,Safety,detect,detect,300,"// The assembler has relaxed rules for accepting identifiers, in particular we; // allow things like '.globl $foo' and '.def @feat.00', which would normally; // be separate tokens. At this level, we have already lexed so we cannot; // (currently) handle this as a context dependent token, instead we detect; // adjacent tokens and return the combined identifier.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:69,Safety,avoid,avoid,69,"// Consume the identifier token - but if parsing certain directives, avoid; // lexical expansion of the next token.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:23,Modifiability,variab,variable,23,// Try to resolve as a variable text macro,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:113,Availability,error,error,113,"// Not a text macro; not usable in TextItem context. Since we haven't used; // the token, put it back for better error recovery.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:119,Availability,recover,recovery,119,"// Not a text macro; not usable in TextItem context. Since we haven't used; // the token, put it back for better error recovery.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:119,Safety,recover,recovery,119,"// Not a text macro; not usable in TextItem context. Since we haven't used; // the token, put it back for better error recovery.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:25,Usability,usab,usable,25,"// Not a text macro; not usable in TextItem context. Since we haven't used; // the token, put it back for better error recovery.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:100,Security,access,accesses,100,"// We ignore NONUNIQUE; we do not support OPTION M510 or OPTION OLDSTRUCTS; // anyway, so all field accesses must be qualified.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:53,Availability,error,error,53,// Always emit an alignment here even if we throw an error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:42,Energy Efficiency,power,power,42,"// Reject alignments that aren't either a power of two or zero, for ML.exe; // compatibility. Alignment of zero is silently rounded up to one.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:95,Security,checksum,checksum,95,/// parseDirectiveFile; /// ::= .file filename; /// ::= .file number [directory] filename [md5 checksum] [source source-text],MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:127,Modifiability,portab,portability,127,// Ignore the directive if there is no number and the target doesn't support; // numberless .file directives. This allows some portability of assembler; // between different object file formats.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:60,Security,checksum,checksum,60,/// parseDirectiveCVFile; /// ::= .cv_file number filename [checksum] [checksumkind],MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:71,Security,checksum,checksumkind,71,/// parseDirectiveCVFile; /// ::= .cv_file number filename [checksum] [checksumkind],MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:56,Usability,simpl,simple,56,/// parseDirectiveCFIStartProc; /// ::= .cfi_startproc [simple],MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:11,Availability,error,error,11,// Emit an error if two (or more) named parameters share the same name.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:62,Availability,Error,Errors,62,"// Consuming deferred text, so use Lexer.Lex to ignore Lexing Errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:17,Availability,error,errors,17,// Ignore Lexing errors in macros.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:54,Security,validat,validate,54,// If this target takes alignments in bytes (not log) validate and convert.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:49,Testability,log,log,49,// If this target takes alignments in bytes (not log) validate and convert.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:45,Energy Efficiency,power,power,45,"// NOTE: The alignment in the directive is a power of 2 value, the assembler; // may internally end up wanting an alignment in bytes.; // FIXME: Diagnose overflow.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:97,Safety,avoid,avoid,97,// Attempt to switch the lexer to the included file before consuming the; // end of statement to avoid losing it when we switch.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:59,Modifiability,variab,variable,59,/// parseDirectiveIfdef; /// ::= ifdef symbol; /// | ifdef variable,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:71,Modifiability,variab,variable,71,/// parseDirectiveElseIfdef; /// ::= elseifdef symbol; /// | elseifdef variable,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:39,Integrability,message,message,39,/// parseDirectiveError; /// ::= .err [message],MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:53,Integrability,message,message,53,"/// parseDirectiveErrorIfb; /// ::= .errb textitem[, message]",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:53,Integrability,message,message,53,"/// parseDirectiveErrorIfdef; /// ::= .errdef name[, message]",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:67,Integrability,message,message,67,"/// parseDirectiveErrorIfidn; /// ::= .erridn textitem, textitem[, message]",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:55,Integrability,message,message,55,"/// parseDirectiveErrorIfe; /// ::= .erre expression[, message]",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:31,Usability,resume,resume,31,"// Instantiate the macro, then resume at this directive to recheck the; // condition.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:33,Availability,echo,echo,33,"/// parseDirectiveEcho; /// ::= ""echo"" message",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:39,Integrability,message,message,39,"/// parseDirectiveEcho; /// ::= ""echo"" message",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:80,Modifiability,rewrite,rewrite,80,"// It's possible to have a SizeDirective, Imm/ImmPrefix and an Input/Output; // rewrite to the same location. Make sure the SizeDirective rewrite is; // performed first, then the Imm/ImmPrefix and finally the Input/Output. This; // ensures the sort algorithm is stable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:138,Modifiability,rewrite,rewrite,138,"// It's possible to have a SizeDirective, Imm/ImmPrefix and an Input/Output; // rewrite to the same location. Make sure the SizeDirective rewrite is; // performed first, then the Imm/ImmPrefix and finally the Input/Output. This; // ensures the sort algorithm is stable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:153,Performance,perform,performed,153,"// It's possible to have a SizeDirective, Imm/ImmPrefix and an Input/Output; // rewrite to the same location. Make sure the SizeDirective rewrite is; // performed first, then the Imm/ImmPrefix and finally the Input/Output. This; // ensures the sort algorithm is stable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:16,Availability,error,errors,16,// Emit pending errors if any exist.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:14,Availability,error,error,14,// No pending error should exist here.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:53,Modifiability,rewrite,rewrite,53,// Check if this has already been covered by another rewrite...,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:3,Modifiability,Rewrite,Rewrite,3,// Rewrite expressions in $N notation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:13,Modifiability,rewrite,rewrite,13,"// Fuse this rewrite with a rewrite of the offset name, if present.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:28,Modifiability,rewrite,rewrite,28,"// Fuse this rewrite with a rewrite of the offset name, if present.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp:83,Integrability,interface,interface,83,"// Numeric built-ins; // BuiltinSymbolMap[""@cpu""] = BI_CPU;; // BuiltinSymbolMap[""@interface""] = BI_INTERFACE;; // BuiltinSymbolMap[""@wordsize""] = BI_WORDSIZE;; // BuiltinSymbolMap[""@codesize""] = BI_CODESIZE;; // BuiltinSymbolMap[""@datasize""] = BI_DATASIZE;; // BuiltinSymbolMap[""@model""] = BI_MODEL;; // Text built-ins; // BuiltinSymbolMap[""@code""] = BI_CODE;; // BuiltinSymbolMap[""@data""] = BI_DATA;; // BuiltinSymbolMap[""@fardata?""] = BI_FARDATA;; // BuiltinSymbolMap[""@stack""] = BI_STACK;",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MasmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MCAsmLexer.cpp:43,Integrability,Interface,Interface,43,"//===- MCAsmLexer.cpp - Abstract Asm Lexer Interface ----------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MCAsmLexer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MCAsmLexer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MCAsmParser.cpp:46,Integrability,Interface,Interface,46,"//===-- MCAsmParser.cpp - Abstract Asm Parser Interface -------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MCAsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MCAsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MCAsmParser.cpp:28,Availability,error,error,28,"// If we threw this parsing error after a lexing error, this should; // supercede the lexing error and so we remove it from the Lexer; // before it can propagate",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MCAsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MCAsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MCAsmParser.cpp:49,Availability,error,error,49,"// If we threw this parsing error after a lexing error, this should; // supercede the lexing error and so we remove it from the Lexer; // before it can propagate",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MCAsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MCAsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MCAsmParser.cpp:93,Availability,error,error,93,"// If we threw this parsing error after a lexing error, this should; // supercede the lexing error and so we remove it from the Lexer; // before it can propagate",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MCAsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MCAsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MCAsmParser.cpp:20,Availability,error,errors,20,// Make sure lexing errors have propagated to the parser.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MCAsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MCAsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MCAsmParser.cpp:53,Deployability,release,release,53,// Cannot completely remove virtual function even in release mode.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MCAsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MCAsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MCTargetAsmParser.cpp:61,Availability,error,error,61,// Some targets erroneously report success after emitting an error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MCTargetAsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MCTargetAsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MCTargetAsmParser.cpp:47,Availability,error,error,47,"// ParseDirective returns true if there was an error or if the directive is; // not target-specific. Disambiguate the two cases by comparing position of; // the lexer before and after calling the method: if no tokens were consumed,; // there was no match, otherwise there was a failure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MCTargetAsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MCTargetAsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MCTargetAsmParser.cpp:278,Availability,failure,failure,278,"// ParseDirective returns true if there was an error or if the directive is; // not target-specific. Disambiguate the two cases by comparing position of; // the lexer before and after calling the method: if no tokens were consumed,; // there was no match, otherwise there was a failure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/MCTargetAsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/MCTargetAsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/WasmAsmParser.cpp:599,Integrability,depend,depend,599,"//===- WasmAsmParser.cpp - Wasm Assembly Parser -----------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; // --; //; // Note, this is for wasm, the binary format (analogous to ELF), not wasm,; // the instruction set (analogous to x86), for which parsing code lives in; // WebAssemblyAsmParser.; //; // This file contains processing for generic directives implemented using; // MCTargetStreamer, the ones that depend on WebAssemblyTargetStreamer are in; // WebAssemblyAsmParser.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/WasmAsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/WasmAsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/WasmAsmParser.cpp:3,Deployability,Update,Update,3,// Update section flags if present in this .section directive,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MC/MCParser/WasmAsmParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MC/MCParser/WasmAsmParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Context.cpp:573,Deployability,pipeline,pipeline,573,"//===---------------------------- Context.cpp -------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file defines a class for holding ownership of various simulated; /// hardware units. A Context also provides a utility routine for constructing; /// a default out-of-order pipeline with fetch, dispatch, execute, and retire; /// stages.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Context.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Context.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Context.cpp:520,Integrability,rout,routine,520,"//===---------------------------- Context.cpp -------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file defines a class for holding ownership of various simulated; /// hardware units. A Context also provides a utility routine for constructing; /// a default out-of-order pipeline with fetch, dispatch, execute, and retire; /// stages.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Context.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Context.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Context.cpp:14,Deployability,pipeline,pipeline,14,// Create the pipeline stages.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Context.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Context.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Context.cpp:13,Deployability,pipeline,pipeline,13,// Build the pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Context.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Context.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Context.cpp:14,Deployability,pipeline,pipeline,14,// Create the pipeline stages.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Context.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Context.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Context.cpp:13,Deployability,pipeline,pipeline,13,// Build the pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Context.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Context.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/CustomBehaviour.cpp:450,Integrability,interface,interface,450,"//===--------------------- CustomBehaviour.cpp ------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file implements methods from the CustomBehaviour interface.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/CustomBehaviour.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/CustomBehaviour.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/CustomBehaviour.cpp:33,Safety,hazard,hazards,33,// 0 signifies that there are no hazards that need to be waited on,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/CustomBehaviour.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/CustomBehaviour.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp:434,Integrability,interface,interface,434,"//===--------------------- InstrBuilder.cpp ---------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file implements the InstrBuilder interface.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp:727,Availability,mask,mask,727,"// Track cycles contributed by resources that are in a ""Super"" relationship.; // This is required if we want to correctly match the behavior of method; // SubtargetEmitter::ExpandProcResource() in Tablegen. When computing the set; // of ""consumed"" processor resources and resource cycles, the logic in; // ExpandProcResource() doesn't update the number of resource cycles; // contributed by a ""Super"" resource to a group.; // We need to take this into account when we find that a processor resource is; // part of a group, and it is also used as the ""Super"" of other resources.; // This map stores the number of cycles contributed by sub-resources that are; // part of a ""Super"" resource. The key value is the ""Super"" resource mask ID.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp:335,Deployability,update,update,335,"// Track cycles contributed by resources that are in a ""Super"" relationship.; // This is required if we want to correctly match the behavior of method; // SubtargetEmitter::ExpandProcResource() in Tablegen. When computing the set; // of ""consumed"" processor resources and resource cycles, the logic in; // ExpandProcResource() doesn't update the number of resource cycles; // contributed by a ""Super"" resource to a group.; // We need to take this into account when we find that a processor resource is; // part of a group, and it is also used as the ""Super"" of other resources.; // This map stores the number of cycles contributed by sub-resources that are; // part of a ""Super"" resource. The key value is the ""Super"" resource mask ID.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp:293,Testability,log,logic,293,"// Track cycles contributed by resources that are in a ""Super"" relationship.; // This is required if we want to correctly match the behavior of method; // SubtargetEmitter::ExpandProcResource() in Tablegen. When computing the set; // of ""consumed"" processor resources and resource cycles, the logic in; // ExpandProcResource() doesn't update the number of resource cycles; // contributed by a ""Super"" resource to a group.; // We need to take this into account when we find that a processor resource is; // part of a group, and it is also used as the ""Super"" of other resources.; // This map stores the number of cycles contributed by sub-resources that are; // part of a ""Super"" resource. The key value is the ""Super"" resource mask ID.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp:20,Availability,mask,mask,20,"// Sort elements by mask popcount, so that we prioritize resource units over; // resource groups, and smaller groups over larger groups.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp:48,Availability,mask,mask,48,// Remove the leading 1 from the resource group mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp:194,Deployability,Release,ReleaseAtCycles,194,"// A SchedWrite may specify a number of cycles in which a resource group; // is reserved. For example (on target x86; cpu Haswell):; //; // SchedWriteRes<[HWPort0, HWPort1, HWPort01]> {; // let ReleaseAtCycles = [2, 2, 3];; // }; //; // This means:; // Resource units HWPort0 and HWPort1 are both used for 2cy.; // Resource group HWPort01 is the union of HWPort0 and HWPort1.; // Since this write touches both HWPort0 and HWPort1 for 2cy, HWPort01; // will not be usable for 2 entire cycles from instruction issue.; //; // On top of those 2cy, SchedWriteRes explicitly specifies an extra latency; // of 3 cycles for HWPort01. This tool assumes that the 3cy latency is an; // extra delay on top of the 2 cycles latency.; // During those extra cycles, HWPort01 is not usable by other instructions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp:588,Performance,latency,latency,588,"// A SchedWrite may specify a number of cycles in which a resource group; // is reserved. For example (on target x86; cpu Haswell):; //; // SchedWriteRes<[HWPort0, HWPort1, HWPort01]> {; // let ReleaseAtCycles = [2, 2, 3];; // }; //; // This means:; // Resource units HWPort0 and HWPort1 are both used for 2cy.; // Resource group HWPort01 is the union of HWPort0 and HWPort1.; // Since this write touches both HWPort0 and HWPort1 for 2cy, HWPort01; // will not be usable for 2 entire cycles from instruction issue.; //; // On top of those 2cy, SchedWriteRes explicitly specifies an extra latency; // of 3 cycles for HWPort01. This tool assumes that the 3cy latency is an; // extra delay on top of the 2 cycles latency.; // During those extra cycles, HWPort01 is not usable by other instructions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp:657,Performance,latency,latency,657,"// A SchedWrite may specify a number of cycles in which a resource group; // is reserved. For example (on target x86; cpu Haswell):; //; // SchedWriteRes<[HWPort0, HWPort1, HWPort01]> {; // let ReleaseAtCycles = [2, 2, 3];; // }; //; // This means:; // Resource units HWPort0 and HWPort1 are both used for 2cy.; // Resource group HWPort01 is the union of HWPort0 and HWPort1.; // Since this write touches both HWPort0 and HWPort1 for 2cy, HWPort01; // will not be usable for 2 entire cycles from instruction issue.; //; // On top of those 2cy, SchedWriteRes explicitly specifies an extra latency; // of 3 cycles for HWPort01. This tool assumes that the 3cy latency is an; // extra delay on top of the 2 cycles latency.; // During those extra cycles, HWPort01 is not usable by other instructions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp:710,Performance,latency,latency,710,"// A SchedWrite may specify a number of cycles in which a resource group; // is reserved. For example (on target x86; cpu Haswell):; //; // SchedWriteRes<[HWPort0, HWPort1, HWPort01]> {; // let ReleaseAtCycles = [2, 2, 3];; // }; //; // This means:; // Resource units HWPort0 and HWPort1 are both used for 2cy.; // Resource group HWPort01 is the union of HWPort0 and HWPort1.; // Since this write touches both HWPort0 and HWPort1 for 2cy, HWPort01; // will not be usable for 2 entire cycles from instruction issue.; //; // On top of those 2cy, SchedWriteRes explicitly specifies an extra latency; // of 3 cycles for HWPort01. This tool assumes that the 3cy latency is an; // extra delay on top of the 2 cycles latency.; // During those extra cycles, HWPort01 is not usable by other instructions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp:464,Usability,usab,usable,464,"// A SchedWrite may specify a number of cycles in which a resource group; // is reserved. For example (on target x86; cpu Haswell):; //; // SchedWriteRes<[HWPort0, HWPort1, HWPort01]> {; // let ReleaseAtCycles = [2, 2, 3];; // }; //; // This means:; // Resource units HWPort0 and HWPort1 are both used for 2cy.; // Resource group HWPort01 is the union of HWPort0 and HWPort1.; // Since this write touches both HWPort0 and HWPort1 for 2cy, HWPort01; // will not be usable for 2 entire cycles from instruction issue.; //; // On top of those 2cy, SchedWriteRes explicitly specifies an extra latency; // of 3 cycles for HWPort01. This tool assumes that the 3cy latency is an; // extra delay on top of the 2 cycles latency.; // During those extra cycles, HWPort01 is not usable by other instructions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp:766,Usability,usab,usable,766,"// A SchedWrite may specify a number of cycles in which a resource group; // is reserved. For example (on target x86; cpu Haswell):; //; // SchedWriteRes<[HWPort0, HWPort1, HWPort01]> {; // let ReleaseAtCycles = [2, 2, 3];; // }; //; // This means:; // Resource units HWPort0 and HWPort1 are both used for 2cy.; // Resource group HWPort01 is the union of HWPort0 and HWPort1.; // Since this write touches both HWPort0 and HWPort1 for 2cy, HWPort01; // will not be usable for 2 entire cycles from instruction issue.; //; // On top of those 2cy, SchedWriteRes explicitly specifies an extra latency; // of 3 cycles for HWPort01. This tool assumes that the 3cy latency is an; // extra delay on top of the 2 cycles latency.; // During those extra cycles, HWPort01 is not usable by other instructions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp:48,Availability,mask,mask,48,// Remove the leading 1 from the resource group mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp:93,Performance,latency,latency,93,// We cannot estimate how long this call will take.; // Artificially set an arbitrarily high latency (100cy).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp:6,Performance,latency,latency,6,"// If latency is unknown, then conservatively assume a MaxLatency of 100cy.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp:767,Testability,log,logic,767,"// Assumptions made by this algorithm:; // 1. The number of explicit and implicit register definitions in a MCInst; // matches the number of explicit and implicit definitions according to; // the opcode descriptor (MCInstrDesc).; // 2. Uses start at index #(MCDesc.getNumDefs()).; // 3. There can only be a single optional register definition, an it is; // either the last operand of the sequence (excluding extra operands; // contributed by variadic opcodes) or one of the explicit register; // definitions. The latter occurs for some Thumb1 instructions.; //; // These assumptions work quite well for most out-of-order in-tree targets; // like x86. This is mainly because the vast majority of instructions is; // expanded to MCInst using a straightforward lowering logic that preserves; // the ordering of the operands.; //; // About assumption 1.; // The algorithm allows non-register operands between register operand; // definitions. This helps to handle some special ARM instructions with; // implicit operand increment (-mtriple=armv7):; //; // vld1.32 {d18, d19}, [r1]! @ <MCInst #1463 VLD1q32wb_fixed; // @ <MCOperand Reg:59>; // @ <MCOperand Imm:0> (!!); // @ <MCOperand Reg:67>; // @ <MCOperand Imm:0>; // @ <MCOperand Imm:14>; // @ <MCOperand Reg:0>>; //; // MCDesc reports:; // 6 explicit operands.; // 1 optional definition; // 2 explicit definitions (!!); //; // The presence of an 'Imm' operand between the two register definitions; // breaks the assumption that ""register definitions are always at the; // beginning of the operand sequence"".; //; // To workaround this issue, this algorithm ignores (i.e. skips) any; // non-register operands between register definitions. The optional; // definition is still at index #(NumOperands-1).; //; // According to assumption 2. register reads start at #(NumExplicitDefs-1).; // That means, register R1 from the example is both read and written.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp:20,Performance,latency,latency,20,// Assign a default latency for this write.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp:20,Performance,latency,latency,20,// Assign a default latency for this write.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp:20,Performance,latency,latency,20,// Assign a default latency for this write.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp:20,Performance,latency,latency,20,// Assign a default latency for this write.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp:111,Deployability,update,updated,111,"// For the purpose of ReadAdvance, implicit uses come directly after explicit; // uses. The ""UseIndex"" must be updated according to that implicit layout.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp:19,Energy Efficiency,schedul,scheduling,19,// Then obtain the scheduling class information from the instruction.; // Allow InstrumentManager to override and use a different SchedClassID,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp:24,Energy Efficiency,schedul,scheduling,24,// Try to solve variant scheduling classes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp:64,Availability,error,error,64,"// Check if this instruction is supported. Otherwise, report an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp:3,Security,Validat,Validation,3,// Validation check on the instruction descriptor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp:3,Performance,Cache,Cache,3,// Cache lookup using SchedClassID from Instrumentation,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp:22,Integrability,depend,dependency,22,// Check if this is a dependency breaking instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp:5,Availability,mask,mask,5,// A mask of all zeroes means: explicit input operands are not; // independent.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp:63,Availability,Mask,Mask,63,"// Check if this register operand is independent according to `Mask`.; // Note that Mask may not have enough bits to describe all explicit and; // implicit input operands. If this register operand doesn't have a; // corresponding bit in Mask, then conservatively assume that it is; // dependent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp:84,Availability,Mask,Mask,84,"// Check if this register operand is independent according to `Mask`.; // Note that Mask may not have enough bits to describe all explicit and; // implicit input operands. If this register operand doesn't have a; // corresponding bit in Mask, then conservatively assume that it is; // dependent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp:237,Availability,Mask,Mask,237,"// Check if this register operand is independent according to `Mask`.; // Note that Mask may not have enough bits to describe all explicit and; // implicit input operands. If this register operand doesn't have a; // corresponding bit in Mask, then conservatively assume that it is; // dependent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp:285,Integrability,depend,dependent,285,"// Check if this register operand is independent according to `Mask`.; // Note that Mask may not have enough bits to describe all explicit and; // implicit input operands. If this register operand doesn't have a; // corresponding bit in Mask, then conservatively assume that it is; // dependent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp:41,Usability,clear,clear,41,// Track register writes that implicitly clear the upper portion of the; // underlying super-registers using an APInt.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp:105,Usability,clear,clear,105,// Now query the MCInstrAnalysis object to obtain information about which; // register writes implicitly clear the upper portion of a super-register.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp:3,Usability,Clear,ClearsSuperRegs,3,/* ClearsSuperRegs */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp:3,Usability,Clear,ClearsSuperRegs,3,/* ClearsSuperRegs */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/InstrBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Instruction.cpp:426,Deployability,Pipeline,Pipeline,426,"//===--------------------- Instruction.cpp ----------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines abstractions used by the Pipeline to model register reads,; // register writes and instructions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Instruction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Instruction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Instruction.cpp:184,Deployability,update,update,184,"// This read may be dependent on more than one write. This typically occurs; // when a definition is the result of multiple writes where at least one; // write does a partial register update.; // The HW is forced to do some extra bookkeeping to track of all the; // dependent writes, and implement a merging scheme for the partial writes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Instruction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Instruction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Instruction.cpp:20,Integrability,depend,dependent,20,"// This read may be dependent on more than one write. This typically occurs; // when a definition is the result of multiple writes where at least one; // write does a partial register update.; // The HW is forced to do some extra bookkeeping to track of all the; // dependent writes, and implement a merging scheme for the partial writes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Instruction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Instruction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Instruction.cpp:266,Integrability,depend,dependent,266,"// This read may be dependent on more than one write. This typically occurs; // when a definition is the result of multiple writes where at least one; // write does a partial register update.; // The HW is forced to do some extra bookkeeping to track of all the; // dependent writes, and implement a merging scheme for the partial writes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Instruction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Instruction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Instruction.cpp:3,Deployability,Update,Update,3,// Update the number of cycles left based on the WriteDescriptor info.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Instruction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Instruction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Instruction.cpp:41,Integrability,depend,dependency,41,// Notify any writes that are in a false dependency with this write.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Instruction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Instruction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Instruction.cpp:65,Deployability,update,update,65,"// If CyclesLeft is different than -1, then we don't need to; // update the list of users. We can just notify the user with; // the actual number of cycles left (which may be zero).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Instruction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Instruction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Instruction.cpp:55,Availability,error,error,55,// Note: CyclesLeft can be a negative number. It is an error to; // make it an unsigned quantity because users of this write may; // specify a negative ReadAdvance.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Instruction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Instruction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Instruction.cpp:3,Deployability,Update,Update,3,// Update the total number of cycles.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Instruction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Instruction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Instruction.cpp:24,Usability,clear,clear,24,// Note that this won't clear read/write descriptors; // or other non-trivial fields,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Instruction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Instruction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Instruction.cpp:39,Availability,avail,available,39,// Check if input operands are already available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Instruction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Instruction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Instruction.cpp:56,Performance,latency,latency,56,"// Transition to the ""executed"" stage if this is a zero-latency instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Instruction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Instruction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Instruction.cpp:53,Integrability,depend,dependent,53,// A partial register write cannot complete before a dependent write.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Instruction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Instruction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Instruction.cpp:53,Integrability,depend,dependent,53,// A partial register write cannot complete before a dependent write.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Instruction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Instruction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Pipeline.cpp:27,Deployability,Pipeline,Pipeline,27,"//===--------------------- Pipeline.cpp -------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file implements an ordered container of stages that simulate the; /// pipeline of a hardware backend.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Pipeline.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Pipeline.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Pipeline.cpp:471,Deployability,pipeline,pipeline,471,"//===--------------------- Pipeline.cpp -------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file implements an ordered container of stages that simulate the; /// pipeline of a hardware backend.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Pipeline.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Pipeline.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Pipeline.cpp:3,Deployability,Update,Update,3,// Update stages before we start processing new instructions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Pipeline.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Pipeline.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Pipeline.cpp:3,Deployability,Update,Update,3,// Update stages in preparation for a new cycle.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Pipeline.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Pipeline.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Support.cpp:456,Deployability,pipeline,pipeline,456,"//===--------------------- Support.cpp --------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file implements a few helper functions used by various pipeline; /// components.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Support.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Support.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Support.cpp:60,Availability,mask,mask,60,// Resource at index 0 is the 'InvalidUnit'. Set an invalid mask for it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Support.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Support.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Support.cpp:13,Performance,throughput,throughput,13,// The block throughput is bounded from above by the hardware dispatch; // throughput. That is because the DispatchWidth is an upper bound on the; // number of opcodes that can be part of a single dispatch group.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Support.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Support.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Support.cpp:75,Performance,throughput,throughput,75,// The block throughput is bounded from above by the hardware dispatch; // throughput. That is because the DispatchWidth is an upper bound on the; // number of opcodes that can be part of a single dispatch group.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Support.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Support.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Support.cpp:97,Availability,avail,available,97,"// The block throughput is also limited by the amount of hardware parallelism.; // The number of available resource units affects the resource pressure; // distribution, as well as how many blocks can be executed every cycle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Support.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Support.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Support.cpp:13,Performance,throughput,throughput,13,"// The block throughput is also limited by the amount of hardware parallelism.; // The number of available resource units affects the resource pressure; // distribution, as well as how many blocks can be executed every cycle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Support.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Support.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Support.cpp:116,Deployability,Release,ReleaseAtCycles,116,// The block reciprocal throughput is computed as the MAX of:; // - (NumMicroOps / DispatchWidth); // - (NumUnits / ReleaseAtCycles) for every consumed processor resource.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Support.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Support.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Support.cpp:24,Performance,throughput,throughput,24,// The block reciprocal throughput is computed as the MAX of:; // - (NumMicroOps / DispatchWidth); // - (NumUnits / ReleaseAtCycles) for every consumed processor resource.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Support.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Support.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp:398,Performance,Load,Load-Store,398,"//===----------------------- LSUnit.cpp --------------------------*- C++-*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// A Load-Store Unit for the llvm-mca tool.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp:35,Performance,load,load,35,// A store may not pass a previous load or load barrier.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp:43,Performance,load,load,43,// A store may not pass a previous load or load barrier.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp:362,Integrability,depend,depends,362,"// A new load group is created if we are in one of the following situations:; // 1) This is a load barrier (by construction, a load barrier is always; // assigned to a different memory group).; // 2) There is no load in flight (by construction we always keep loads and; // stores into separate memory groups).; // 3) There is a load barrier in flight. This load depends on it.; // 4) There is an intervening store between the last load dispatched to the; // LSU and this load. We always create a new group even if this load; // does not alias the last dispatched store.; // 5) There is no intervening store and there is an active load group.; // However that group has already started execution, so we cannot add; // this load to it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp:9,Performance,load,load,9,"// A new load group is created if we are in one of the following situations:; // 1) This is a load barrier (by construction, a load barrier is always; // assigned to a different memory group).; // 2) There is no load in flight (by construction we always keep loads and; // stores into separate memory groups).; // 3) There is a load barrier in flight. This load depends on it.; // 4) There is an intervening store between the last load dispatched to the; // LSU and this load. We always create a new group even if this load; // does not alias the last dispatched store.; // 5) There is no intervening store and there is an active load group.; // However that group has already started execution, so we cannot add; // this load to it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp:94,Performance,load,load,94,"// A new load group is created if we are in one of the following situations:; // 1) This is a load barrier (by construction, a load barrier is always; // assigned to a different memory group).; // 2) There is no load in flight (by construction we always keep loads and; // stores into separate memory groups).; // 3) There is a load barrier in flight. This load depends on it.; // 4) There is an intervening store between the last load dispatched to the; // LSU and this load. We always create a new group even if this load; // does not alias the last dispatched store.; // 5) There is no intervening store and there is an active load group.; // However that group has already started execution, so we cannot add; // this load to it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp:127,Performance,load,load,127,"// A new load group is created if we are in one of the following situations:; // 1) This is a load barrier (by construction, a load barrier is always; // assigned to a different memory group).; // 2) There is no load in flight (by construction we always keep loads and; // stores into separate memory groups).; // 3) There is a load barrier in flight. This load depends on it.; // 4) There is an intervening store between the last load dispatched to the; // LSU and this load. We always create a new group even if this load; // does not alias the last dispatched store.; // 5) There is no intervening store and there is an active load group.; // However that group has already started execution, so we cannot add; // this load to it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp:212,Performance,load,load,212,"// A new load group is created if we are in one of the following situations:; // 1) This is a load barrier (by construction, a load barrier is always; // assigned to a different memory group).; // 2) There is no load in flight (by construction we always keep loads and; // stores into separate memory groups).; // 3) There is a load barrier in flight. This load depends on it.; // 4) There is an intervening store between the last load dispatched to the; // LSU and this load. We always create a new group even if this load; // does not alias the last dispatched store.; // 5) There is no intervening store and there is an active load group.; // However that group has already started execution, so we cannot add; // this load to it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp:259,Performance,load,loads,259,"// A new load group is created if we are in one of the following situations:; // 1) This is a load barrier (by construction, a load barrier is always; // assigned to a different memory group).; // 2) There is no load in flight (by construction we always keep loads and; // stores into separate memory groups).; // 3) There is a load barrier in flight. This load depends on it.; // 4) There is an intervening store between the last load dispatched to the; // LSU and this load. We always create a new group even if this load; // does not alias the last dispatched store.; // 5) There is no intervening store and there is an active load group.; // However that group has already started execution, so we cannot add; // this load to it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp:328,Performance,load,load,328,"// A new load group is created if we are in one of the following situations:; // 1) This is a load barrier (by construction, a load barrier is always; // assigned to a different memory group).; // 2) There is no load in flight (by construction we always keep loads and; // stores into separate memory groups).; // 3) There is a load barrier in flight. This load depends on it.; // 4) There is an intervening store between the last load dispatched to the; // LSU and this load. We always create a new group even if this load; // does not alias the last dispatched store.; // 5) There is no intervening store and there is an active load group.; // However that group has already started execution, so we cannot add; // this load to it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp:357,Performance,load,load,357,"// A new load group is created if we are in one of the following situations:; // 1) This is a load barrier (by construction, a load barrier is always; // assigned to a different memory group).; // 2) There is no load in flight (by construction we always keep loads and; // stores into separate memory groups).; // 3) There is a load barrier in flight. This load depends on it.; // 4) There is an intervening store between the last load dispatched to the; // LSU and this load. We always create a new group even if this load; // does not alias the last dispatched store.; // 5) There is no intervening store and there is an active load group.; // However that group has already started execution, so we cannot add; // this load to it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp:431,Performance,load,load,431,"// A new load group is created if we are in one of the following situations:; // 1) This is a load barrier (by construction, a load barrier is always; // assigned to a different memory group).; // 2) There is no load in flight (by construction we always keep loads and; // stores into separate memory groups).; // 3) There is a load barrier in flight. This load depends on it.; // 4) There is an intervening store between the last load dispatched to the; // LSU and this load. We always create a new group even if this load; // does not alias the last dispatched store.; // 5) There is no intervening store and there is an active load group.; // However that group has already started execution, so we cannot add; // this load to it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp:471,Performance,load,load,471,"// A new load group is created if we are in one of the following situations:; // 1) This is a load barrier (by construction, a load barrier is always; // assigned to a different memory group).; // 2) There is no load in flight (by construction we always keep loads and; // stores into separate memory groups).; // 3) There is a load barrier in flight. This load depends on it.; // 4) There is an intervening store between the last load dispatched to the; // LSU and this load. We always create a new group even if this load; // does not alias the last dispatched store.; // 5) There is no intervening store and there is an active load group.; // However that group has already started execution, so we cannot add; // this load to it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp:519,Performance,load,load,519,"// A new load group is created if we are in one of the following situations:; // 1) This is a load barrier (by construction, a load barrier is always; // assigned to a different memory group).; // 2) There is no load in flight (by construction we always keep loads and; // stores into separate memory groups).; // 3) There is a load barrier in flight. This load depends on it.; // 4) There is an intervening store between the last load dispatched to the; // LSU and this load. We always create a new group even if this load; // does not alias the last dispatched store.; // 5) There is no intervening store and there is an active load group.; // However that group has already started execution, so we cannot add; // this load to it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp:630,Performance,load,load,630,"// A new load group is created if we are in one of the following situations:; // 1) This is a load barrier (by construction, a load barrier is always; // assigned to a different memory group).; // 2) There is no load in flight (by construction we always keep loads and; // stores into separate memory groups).; // 3) There is a load barrier in flight. This load depends on it.; // 4) There is an intervening store between the last load dispatched to the; // LSU and this load. We always create a new group even if this load; // does not alias the last dispatched store.; // 5) There is no intervening store and there is an active load group.; // However that group has already started execution, so we cannot add; // this load to it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp:722,Performance,load,load,722,"// A new load group is created if we are in one of the following situations:; // 1) This is a load barrier (by construction, a load barrier is always; // assigned to a different memory group).; // 2) There is no load in flight (by construction we always keep loads and; // stores into separate memory groups).; // 3) There is a load barrier in flight. This load depends on it.; // 4) There is an intervening store between the last load dispatched to the; // LSU and this load. We always create a new group even if this load; // does not alias the last dispatched store.; // 5) There is no intervening store and there is an active load group.; // However that group has already started execution, so we cannot add; // this load to it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp:5,Performance,load,load,5,// A load may not pass a previous store or store barrier; // unless flag 'NoAlias' is set.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp:5,Performance,load,load,5,// A load barrier may not pass a previous load or load barrier.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp:42,Performance,load,load,42,// A load barrier may not pass a previous load or load barrier.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp:50,Performance,load,load,50,// A load barrier may not pass a previous load or load barrier.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp:13,Performance,load,load,13,// A younger load cannot pass a older load barrier.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp:38,Performance,load,load,38,// A younger load cannot pass a older load barrier.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp:5,Performance,load,load,5,// A load may pass a previous load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp:30,Performance,load,load,30,// A load may pass a previous load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/LSUnit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp:538,Integrability,depend,dependencies,538,"//===--------------------- RegisterFile.cpp ---------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file defines a register mapping file class. This class is responsible; /// for managing hardware register files and the tracking of data dependencies; /// between registers.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp:40,Energy Efficiency,allocate,allocate,40,"// For each user defined register file, allocate a RegisterMappingTracker; // object. The size of every register file, as well as the mapping between; // register files and register classes is specified via tablegen.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp:100,Energy Efficiency,allocate,allocated,100,// The cost of a register definition is equivalent to the number of; // physical registers that are allocated at register renaming stage.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp:212,Availability,avail,available,212,// A default register file is always allocated at index #0. That register file; // is mainly used to count the total number of mappings created by all; // register files at runtime. Users can limit the number of available physical; // registers in register file #0 through the command line flag; // `-register-file-size`.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp:37,Energy Efficiency,allocate,allocated,37,// A default register file is always allocated at index #0. That register file; // is mainly used to count the total number of mappings created by all; // register files at runtime. Users can limit the number of available physical; // registers in register file #0 through the command line flag; // `-register-file-size`.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp:390,Testability,log,logical,390,// Special case where there is no register class identifier in the set.; // An empty set of register classes means: this register file contains all; // the physical registers specified by the target.; // We optimistically assume that a register can be renamed at the cost of a; // single physical register. The constructor of RegisterFile ensures that; // a RegisterMapping exists for each logical register defined by the Target.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp:7,Deployability,update,update,7,// Now update the cost of individual registers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp:7,Deployability,update,update,7,// Now update the default register mapping tracker.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp:7,Deployability,update,update,7,// Now update the default register mapping tracker.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp:91,Integrability,depend,dependencies,91,"// If RenameAs is equal to RegID, then RegID is subject to register renaming; // and false dependencies on RegID are all eliminated.; // If RenameAs references the invalid register, then we optimistically assume; // that it can be renamed. In the absence of tablegen descriptors for register; // files, RenameAs is always set to the invalid register ID. In all other; // cases, RenameAs must be either equal to RegID, or it must reference a; // super-register of RegID.; // If RenameAs is a super-register of RegID, then a write to RegID has always; // a false dependency on RenameAs. The only exception is for when the write; // implicitly clears the upper portion of the underlying register.; // If a write clears its super-registers, then it is renamed as `RenameAs`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp:561,Integrability,depend,dependency,561,"// If RenameAs is equal to RegID, then RegID is subject to register renaming; // and false dependencies on RegID are all eliminated.; // If RenameAs references the invalid register, then we optimistically assume; // that it can be renamed. In the absence of tablegen descriptors for register; // files, RenameAs is always set to the invalid register ID. In all other; // cases, RenameAs must be either equal to RegID, or it must reference a; // super-register of RegID.; // If RenameAs is a super-register of RegID, then a write to RegID has always; // a false dependency on RenameAs. The only exception is for when the write; // implicitly clears the upper portion of the underlying register.; // If a write clears its super-registers, then it is renamed as `RenameAs`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp:641,Usability,clear,clears,641,"// If RenameAs is equal to RegID, then RegID is subject to register renaming; // and false dependencies on RegID are all eliminated.; // If RenameAs references the invalid register, then we optimistically assume; // that it can be renamed. In the absence of tablegen descriptors for register; // files, RenameAs is always set to the invalid register ID. In all other; // cases, RenameAs must be either equal to RegID, or it must reference a; // super-register of RegID.; // If RenameAs is a super-register of RegID, then a write to RegID has always; // a false dependency on RenameAs. The only exception is for when the write; // implicitly clears the upper portion of the underlying register.; // If a write clears its super-registers, then it is renamed as `RenameAs`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp:709,Usability,clear,clears,709,"// If RenameAs is equal to RegID, then RegID is subject to register renaming; // and false dependencies on RegID are all eliminated.; // If RenameAs references the invalid register, then we optimistically assume; // that it can be renamed. In the absence of tablegen descriptors for register; // files, RenameAs is always set to the invalid register ID. In all other; // cases, RenameAs must be either equal to RegID, or it must reference a; // super-register of RegID.; // If RenameAs is a super-register of RegID, then a write to RegID has always; // a false dependency on RenameAs. The only exception is for when the write; // implicitly clears the upper portion of the underlying register.; // If a write clears its super-registers, then it is renamed as `RenameAs`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp:157,Energy Efficiency,allocate,allocated,157,"// The processor keeps the definition of `RegID` together with register; // `RenameAs`. Since this partial write is not renamed, no physical; // register is allocated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp:34,Integrability,depend,dependency,34,// This partial write has a false dependency on RenameAs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp:3,Deployability,Update,Update,3,// Update zero registers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp:96,Deployability,update,updated,96,"// If this move has been eliminated, then method tryEliminateMoveOrSwap should; // have already updated all the register mappings.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp:43,Performance,perform,performed,43,// Check if this is one of multiple writes performed by this; // instruction to register RegID.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp:3,Deployability,Update,Update,3,// Update the mapping for register RegID including its sub-registers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp:29,Energy Efficiency,allocate,allocated,29,"// No physical registers are allocated for instructions that are optimized; // in hardware. For example, zero-latency data-dependency breaking; // instructions don't consume physical registers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp:123,Integrability,depend,dependency,123,"// No physical registers are allocated for instructions that are optimized; // in hardware. For example, zero-latency data-dependency breaking; // instructions don't consume physical registers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp:65,Performance,optimiz,optimized,65,"// No physical registers are allocated for instructions that are optimized; // in hardware. For example, zero-latency data-dependency breaking; // instructions don't consume physical registers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp:110,Performance,latency,latency,110,"// No physical registers are allocated for instructions that are optimized; // in hardware. For example, zero-latency data-dependency breaking; // instructions don't consume physical registers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp:50,Deployability,update,update,50,"// We only allow move elimination for writes that update a full physical; // register. On X86, move elimination is possible with 32-bit general purpose; // registers because writes to those registers are not partial writes. If a; // register move is a partial write, then we conservatively assume that move; // elimination fails, since it would either trigger a partial update, or the; // issue of a merge opcode.; //; // Note that this constraint may be lifted in future. For example, we could; // make this model more flexible, and let users customize the set of registers; // (i.e. register classes) that allow move elimination.; //; // For now, we assume that there is a strong correlation between registers; // that allow move elimination, and how those same registers are renamed in; // hardware.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp:370,Deployability,update,update,370,"// We only allow move elimination for writes that update a full physical; // register. On X86, move elimination is possible with 32-bit general purpose; // registers because writes to those registers are not partial writes. If a; // register move is a partial write, then we conservatively assume that move; // elimination fails, since it would either trigger a partial update, or the; // issue of a merge opcode.; //; // Note that this constraint may be lifted in future. For example, we could; // make this model more flexible, and let users customize the set of registers; // (i.e. register classes) that allow move elimination.; //; // For now, we assume that there is a strong correlation between registers; // that allow move elimination, and how those same registers are renamed in; // hardware.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp:520,Modifiability,flexible,flexible,520,"// We only allow move elimination for writes that update a full physical; // register. On X86, move elimination is possible with 32-bit general purpose; // registers because writes to those registers are not partial writes. If a; // register move is a partial write, then we conservatively assume that move; // elimination fails, since it would either trigger a partial update, or the; // issue of a merge opcode.; //; // Note that this constraint may be lifted in future. For example, we could; // make this model more flexible, and let users customize the set of registers; // (i.e. register classes) that allow move elimination.; //; // For now, we assume that there is a strong correlation between registers; // that allow move elimination, and how those same registers are renamed in; // hardware.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp:8,Testability,log,logic,8,"// This logic assumes that writes and reads are contributed by a register move; // or a register swap operation. In particular, it assumes a simple register; // move if there is only one write. It assumes a swap operation if there are; // exactly two writes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp:141,Usability,simpl,simple,141,"// This logic assumes that writes and reads are contributed by a register move; // or a register swap operation. In particular, it assumes a simple register; // move if there is only one write. It assumes a swap operation if there are; // exactly two writes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp:37,Deployability,update,updates,37,// Handle potential partial register updates.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp:200,Availability,avail,available,200,"// We know that this read depends on all the writes in DependentWrites.; // For each write, check if we have ReadAdvance information, and use it; // to figure out in how many cycles this read will be available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp:26,Integrability,depend,depends,26,"// We know that this read depends on all the writes in DependentWrites.; // For each write, check if we have ReadAdvance information, and use it; // to figure out in how many cycles this read will be available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp:55,Integrability,Depend,DependentWrites,55,"// We know that this read depends on all the writes in DependentWrites.; // For each write, check if we have ReadAdvance information, and use it; // to figure out in how many cycles this read will be available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp:201,Energy Efficiency,schedul,scheduling,201,"// The current register file is too small. This may occur if the number of; // microarchitectural registers in register file #0 was changed by the; // users via flag -reg-file-size. Alternatively, the scheduling model; // specified a too small number of registers for this register file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp:216,Energy Efficiency,schedul,scheduling,216,"// FIXME: Normalize the instruction register count to match the; // NumPhysRegs value. This is a highly unusual case, and is not expected; // to occur. This normalization is hiding an inconsistency in either the; // scheduling model or in the value that the user might have specified; // for NumPhysRegs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RegisterFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/ResourceManager.cpp:517,Energy Efficiency,Schedul,Scheduler,517,"//===--------------------- ResourceManager.cpp ------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// The classes here represent processor resource units and their management; /// strategy. These classes are managed by the Scheduler.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/ResourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/ResourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/ResourceManager.cpp:15,Deployability,update,update,15,// Remember to update the resource strategy for non-group resources with; // multiple units.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/ResourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/ResourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/ResourceManager.cpp:22,Availability,avail,available,22,"// If there are still available units in RR.first,; // then we are done.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/ResourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/ResourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/ResourceManager.cpp:44,Availability,avail,available,44,// Notify groups that RR.first is no longer available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/ResourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/ResourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/ResourceManager.cpp:38,Availability,avail,available,38,// Notify groups that RR.first is now available again.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/ResourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/ResourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/ResourceManager.cpp:106,Availability,avail,available,106,"// Reserve this buffer now, and release it once pipeline resources; // consumed by the instruction become available again.; // We do this to simulate an in-order dispatch/issue of instructions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/ResourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/ResourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/ResourceManager.cpp:32,Deployability,release,release,32,"// Reserve this buffer now, and release it once pipeline resources; // consumed by the instruction become available again.; // We do this to simulate an in-order dispatch/issue of instructions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/ResourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/ResourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/ResourceManager.cpp:48,Deployability,pipeline,pipeline,48,"// Reserve this buffer now, and release it once pipeline resources; // consumed by the instruction become available again.; // We do this to simulate an in-order dispatch/issue of instructions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/ResourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/ResourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/ResourceManager.cpp:73,Deployability,pipeline,pipeline,73,// Do not unreserve dispatch hazard resource buffers. Wait until all; // pipeline resources have been freed too.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/ResourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/ResourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/ResourceManager.cpp:29,Safety,hazard,hazard,29,// Do not unreserve dispatch hazard resource buffers. Wait until all; // pipeline resources have been freed too.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/ResourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/ResourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/ResourceManager.cpp:3,Deployability,Release,Release,3,// Release this resource.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/ResourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/ResourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/ResourceManager.cpp:21,Deployability,release,release,21,// Now it is safe to release dispatch/issue resources.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/ResourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/ResourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/ResourceManager.cpp:13,Safety,safe,safe,13,// Now it is safe to release dispatch/issue resources.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/ResourceManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/ResourceManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RetireControlUnit.cpp:16,Energy Efficiency,schedul,scheduling,16,"// Check if the scheduling model provides extra information about the machine; // processor. If so, then use that information to set the reorder buffer size; // and the maximum number of instructions retired per cycle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RetireControlUnit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RetireControlUnit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RetireControlUnit.cpp:3,Deployability,Update,Update,3,// Update the slot index to be the next item in the circular queue.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RetireControlUnit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RetireControlUnit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RetireControlUnit.cpp:61,Performance,queue,queue,61,// Update the slot index to be the next item in the circular queue.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RetireControlUnit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/RetireControlUnit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp:27,Energy Efficiency,Schedul,Scheduler,27,"//===--------------------- Scheduler.cpp ------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // A scheduler for processor resource units and processor resource groups.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp:385,Energy Efficiency,schedul,scheduler,385,"//===--------------------- Scheduler.cpp ------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // A scheduler for processor resource units and processor resource groups.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp:24,Energy Efficiency,Schedul,SchedulerStrategy,24,// Anchor the vtable of SchedulerStrategy and DefaultSchedulerStrategy.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp:62,Deployability,update,updates,62,// Notify the instruction that it started executing.; // This updates the internal state of each write.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp:3,Deployability,Release,Release,3,// Release the buffered resources and issue the instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp:87,Integrability,depend,dependent,87,// Instructions that have been issued during this cycle might have unblocked; // other dependent instructions. Dependent instructions may be issued during; // this same cycle if operands have ReadAdvance entries. Promote those; // instructions to the ReadySet and notify the caller that those are ready.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp:111,Integrability,Depend,Dependent,111,// Instructions that have been issued during this cycle might have unblocked; // other dependent instructions. Dependent instructions may be issued during; // this same cycle if operands have ReadAdvance entries. Promote those; // instructions to the ReadySet and notify the caller that those are ready.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp:40,Integrability,depend,dependencies,40,// Check if there are unsolved register dependencies.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp:38,Integrability,depend,dependencies,38,// Check if there are unsolved memory dependencies.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp:98,Deployability,update,updateDispatched,98,"// Check if this instruction is now ready. In case, force; // a transition in state using method 'updateDispatched()'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp:3,Deployability,Release,Release,3,// Release consumed resources.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp:109,Deployability,pipeline,pipeline,109,// Instructions that use an in-order dispatch/issue processor resource must be; // issued immediately to the pipeline(s). Any other in-order buffered; // resources (i.e. BufferSize=1) is consumed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp:25,Performance,queue,queue,25,"// If necessary, reserve queue entries in the load-store unit (LSU).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp:46,Performance,load,load-store,46,"// If necessary, reserve queue entries in the load-store unit (LSU).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp:111,Energy Efficiency,schedul,scheduler,111,"// Don't add a zero-latency instruction to the Ready queue.; // A zero-latency instruction doesn't consume any scheduler resources. That is; // because it doesn't need to be executed, and it is often removed at register; // renaming stage. For example, register-register moves are often optimized at; // register renaming stage by simply updating register aliases. On some; // targets, zero-idiom instructions (for example: a xor that clears the value; // of a register) are treated specially, and are often eliminated at register; // renaming stage.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp:20,Performance,latency,latency,20,"// Don't add a zero-latency instruction to the Ready queue.; // A zero-latency instruction doesn't consume any scheduler resources. That is; // because it doesn't need to be executed, and it is often removed at register; // renaming stage. For example, register-register moves are often optimized at; // register renaming stage by simply updating register aliases. On some; // targets, zero-idiom instructions (for example: a xor that clears the value; // of a register) are treated specially, and are often eliminated at register; // renaming stage.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp:53,Performance,queue,queue,53,"// Don't add a zero-latency instruction to the Ready queue.; // A zero-latency instruction doesn't consume any scheduler resources. That is; // because it doesn't need to be executed, and it is often removed at register; // renaming stage. For example, register-register moves are often optimized at; // register renaming stage by simply updating register aliases. On some; // targets, zero-idiom instructions (for example: a xor that clears the value; // of a register) are treated specially, and are often eliminated at register; // renaming stage.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp:71,Performance,latency,latency,71,"// Don't add a zero-latency instruction to the Ready queue.; // A zero-latency instruction doesn't consume any scheduler resources. That is; // because it doesn't need to be executed, and it is often removed at register; // renaming stage. For example, register-register moves are often optimized at; // register renaming stage by simply updating register aliases. On some; // targets, zero-idiom instructions (for example: a xor that clears the value; // of a register) are treated specially, and are often eliminated at register; // renaming stage.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp:287,Performance,optimiz,optimized,287,"// Don't add a zero-latency instruction to the Ready queue.; // A zero-latency instruction doesn't consume any scheduler resources. That is; // because it doesn't need to be executed, and it is often removed at register; // renaming stage. For example, register-register moves are often optimized at; // register renaming stage by simply updating register aliases. On some; // targets, zero-idiom instructions (for example: a xor that clears the value; // of a register) are treated specially, and are often eliminated at register; // renaming stage.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp:331,Usability,simpl,simply,331,"// Don't add a zero-latency instruction to the Ready queue.; // A zero-latency instruction doesn't consume any scheduler resources. That is; // because it doesn't need to be executed, and it is often removed at register; // renaming stage. For example, register-register moves are often optimized at; // register renaming stage by simply updating register aliases. On some; // targets, zero-idiom instructions (for example: a xor that clears the value; // of a register) are treated specially, and are often eliminated at register; // renaming stage.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp:435,Usability,clear,clears,435,"// Don't add a zero-latency instruction to the Ready queue.; // A zero-latency instruction doesn't consume any scheduler resources. That is; // because it doesn't need to be executed, and it is often removed at register; // renaming stage. For example, register-register moves are often optimized at; // register renaming stage by simply updating register aliases. On some; // targets, zero-idiom instructions (for example: a xor that clears the value; // of a register) are treated specially, and are often eliminated at register; // renaming stage.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/HardwareUnits/Scheduler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp:454,Deployability,pipeline,pipeline,454,"//===--------------------- DispatchStage.cpp --------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file models the dispatch component of an instruction pipeline.; ///; /// The DispatchStage is responsible for updating instruction dependencies; /// and communicating to the simulated instruction scheduler that an instruction; /// is ready to be scheduled for execution.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp:597,Energy Efficiency,schedul,scheduler,597,"//===--------------------- DispatchStage.cpp --------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file models the dispatch component of an instruction pipeline.; ///; /// The DispatchStage is responsible for updating instruction dependencies; /// and communicating to the simulated instruction scheduler that an instruction; /// is ready to be scheduled for execution.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp:647,Energy Efficiency,schedul,scheduled,647,"//===--------------------- DispatchStage.cpp --------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file models the dispatch component of an instruction pipeline.; ///; /// The DispatchStage is responsible for updating instruction dependencies; /// and communicating to the simulated instruction scheduler that an instruction; /// is ready to be scheduled for execution.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp:532,Integrability,depend,dependencies,532,"//===--------------------- DispatchStage.cpp --------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file models the dispatch component of an instruction pipeline.; ///; /// The DispatchStage is responsible for updating instruction dependencies; /// and communicating to the simulated instruction scheduler that an instruction; /// is ready to be scheduled for execution.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp:5,Availability,mask,mask,5,// A mask with all zeroes means: register files are available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp:52,Availability,avail,available,52,// A mask with all zeroes means: register files are available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp:23,Performance,optimiz,optimizable,23,// Check if this is an optimizable reg-reg move or an XCHG-like instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp:152,Deployability,Update,Update,152,"// A dependency-breaking instruction doesn't have to wait on the register; // input operands, and it is often optimized at register renaming stage.; // Update RAW dependencies if this instruction is not a dependency-breaking; // instruction. A dependency-breaking instruction is a zero-latency; // instruction that doesn't consume hardware resources.; // An example of dependency-breaking instruction on X86 is a zero-idiom XOR.; //; // We also don't update data dependencies for instructions that have been; // eliminated at register renaming stage.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp:451,Deployability,update,update,451,"// A dependency-breaking instruction doesn't have to wait on the register; // input operands, and it is often optimized at register renaming stage.; // Update RAW dependencies if this instruction is not a dependency-breaking; // instruction. A dependency-breaking instruction is a zero-latency; // instruction that doesn't consume hardware resources.; // An example of dependency-breaking instruction on X86 is a zero-idiom XOR.; //; // We also don't update data dependencies for instructions that have been; // eliminated at register renaming stage.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp:5,Integrability,depend,dependency-breaking,5,"// A dependency-breaking instruction doesn't have to wait on the register; // input operands, and it is often optimized at register renaming stage.; // Update RAW dependencies if this instruction is not a dependency-breaking; // instruction. A dependency-breaking instruction is a zero-latency; // instruction that doesn't consume hardware resources.; // An example of dependency-breaking instruction on X86 is a zero-idiom XOR.; //; // We also don't update data dependencies for instructions that have been; // eliminated at register renaming stage.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp:163,Integrability,depend,dependencies,163,"// A dependency-breaking instruction doesn't have to wait on the register; // input operands, and it is often optimized at register renaming stage.; // Update RAW dependencies if this instruction is not a dependency-breaking; // instruction. A dependency-breaking instruction is a zero-latency; // instruction that doesn't consume hardware resources.; // An example of dependency-breaking instruction on X86 is a zero-idiom XOR.; //; // We also don't update data dependencies for instructions that have been; // eliminated at register renaming stage.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp:205,Integrability,depend,dependency-breaking,205,"// A dependency-breaking instruction doesn't have to wait on the register; // input operands, and it is often optimized at register renaming stage.; // Update RAW dependencies if this instruction is not a dependency-breaking; // instruction. A dependency-breaking instruction is a zero-latency; // instruction that doesn't consume hardware resources.; // An example of dependency-breaking instruction on X86 is a zero-idiom XOR.; //; // We also don't update data dependencies for instructions that have been; // eliminated at register renaming stage.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp:244,Integrability,depend,dependency-breaking,244,"// A dependency-breaking instruction doesn't have to wait on the register; // input operands, and it is often optimized at register renaming stage.; // Update RAW dependencies if this instruction is not a dependency-breaking; // instruction. A dependency-breaking instruction is a zero-latency; // instruction that doesn't consume hardware resources.; // An example of dependency-breaking instruction on X86 is a zero-idiom XOR.; //; // We also don't update data dependencies for instructions that have been; // eliminated at register renaming stage.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp:369,Integrability,depend,dependency-breaking,369,"// A dependency-breaking instruction doesn't have to wait on the register; // input operands, and it is often optimized at register renaming stage.; // Update RAW dependencies if this instruction is not a dependency-breaking; // instruction. A dependency-breaking instruction is a zero-latency; // instruction that doesn't consume hardware resources.; // An example of dependency-breaking instruction on X86 is a zero-idiom XOR.; //; // We also don't update data dependencies for instructions that have been; // eliminated at register renaming stage.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp:463,Integrability,depend,dependencies,463,"// A dependency-breaking instruction doesn't have to wait on the register; // input operands, and it is often optimized at register renaming stage.; // Update RAW dependencies if this instruction is not a dependency-breaking; // instruction. A dependency-breaking instruction is a zero-latency; // instruction that doesn't consume hardware resources.; // An example of dependency-breaking instruction on X86 is a zero-idiom XOR.; //; // We also don't update data dependencies for instructions that have been; // eliminated at register renaming stage.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp:110,Performance,optimiz,optimized,110,"// A dependency-breaking instruction doesn't have to wait on the register; // input operands, and it is often optimized at register renaming stage.; // Update RAW dependencies if this instruction is not a dependency-breaking; // instruction. A dependency-breaking instruction is a zero-latency; // instruction that doesn't consume hardware resources.; // An example of dependency-breaking instruction on X86 is a zero-idiom XOR.; //; // We also don't update data dependencies for instructions that have been; // eliminated at register renaming stage.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp:286,Performance,latency,latency,286,"// A dependency-breaking instruction doesn't have to wait on the register; // input operands, and it is often optimized at register renaming stage.; // Update RAW dependencies if this instruction is not a dependency-breaking; // instruction. A dependency-breaking instruction is a zero-latency; // instruction that doesn't consume hardware resources.; // An example of dependency-breaking instruction on X86 is a zero-idiom XOR.; //; // We also don't update data dependencies for instructions that have been; // eliminated at register renaming stage.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp:144,Energy Efficiency,allocate,allocated,144,"// By default, a dependency-breaking zero-idiom is expected to be optimized; // at register renaming stage. That means, no physical register is allocated; // to the instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp:17,Integrability,depend,dependency-breaking,17,"// By default, a dependency-breaking zero-idiom is expected to be optimized; // at register renaming stage. That means, no physical register is allocated; // to the instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp:66,Performance,optimiz,optimized,66,"// By default, a dependency-breaking zero-idiom is expected to be optimized; // at register renaming stage. That means, no physical register is allocated; // to the instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp:43,Availability,avail,available,43,// Conservatively bail out if there are no available dispatch entries.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp:16,Testability,log,logic,16,// The dispatch logic doesn't internally buffer instructions. It only accepts; // instructions that can be successfully moved to the next stage during this; // same cycle.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/DispatchStage.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/EntryStage.cpp:448,Deployability,pipeline,pipeline,448,"//===---------------------- EntryStage.cpp ----------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file defines the Fetch stage of an instruction pipeline. Its sole; /// purpose in life is to produce instructions for the rest of the pipeline.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Stages/EntryStage.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/EntryStage.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/EntryStage.cpp:535,Deployability,pipeline,pipeline,535,"//===---------------------- EntryStage.cpp ----------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file defines the Fetch stage of an instruction pipeline. Its sole; /// purpose in life is to produce instructions for the rest of the pipeline.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Stages/EntryStage.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/EntryStage.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/ExecuteStage.cpp:452,Deployability,pipeline,pipeline,452,"//===---------------------- ExecuteStage.cpp --------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file defines the execution stage of an instruction pipeline.; ///; /// The ExecuteStage is responsible for managing the hardware scheduler; /// and issuing notifications that an instruction has been executed.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Stages/ExecuteStage.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/ExecuteStage.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/ExecuteStage.cpp:530,Energy Efficiency,schedul,scheduler,530,"//===---------------------- ExecuteStage.cpp --------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file defines the execution stage of an instruction pipeline.; ///; /// The ExecuteStage is responsible for managing the hardware scheduler; /// and issuing notifications that an instruction has been executed.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Stages/ExecuteStage.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/ExecuteStage.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/ExecuteStage.cpp:113,Energy Efficiency,schedul,scheduler,113,// Always conservatively report any backpressure events if the dispatch logic; // was stalled due to unavailable scheduler resources.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Stages/ExecuteStage.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/ExecuteStage.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/ExecuteStage.cpp:72,Testability,log,logic,72,// Always conservatively report any backpressure events if the dispatch logic; // was stalled due to unavailable scheduler resources.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Stages/ExecuteStage.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/ExecuteStage.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/ExecuteStage.cpp:3,Energy Efficiency,Schedul,Schedule,3,// Schedule the instruction for execution on the hardware.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Stages/ExecuteStage.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/ExecuteStage.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/ExecuteStage.cpp:62,Performance,queue,queues,62,// Ensure that the HWS has not stored this instruction in its queues.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Stages/ExecuteStage.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/ExecuteStage.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/ExecuteStage.cpp:151,Deployability,release,released,151,"// Reserve a slot in each buffered resource. Also, mark units with; // BufferSize=0 as reserved. Resources with a buffer size of zero will only; // be released after MCIS is issued, and all the ReleaseAtCycles for those; // units have been consumed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Stages/ExecuteStage.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/ExecuteStage.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/ExecuteStage.cpp:194,Deployability,Release,ReleaseAtCycles,194,"// Reserve a slot in each buffered resource. Also, mark units with; // BufferSize=0 as reserved. Resources with a buffer size of zero will only; // be released after MCIS is issued, and all the ReleaseAtCycles for those; // units have been consumed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Stages/ExecuteStage.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/ExecuteStage.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/ExecuteStage.cpp:40,Energy Efficiency,schedul,scheduler,40,"// If we did not return early, then the scheduler is ready for execution.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Stages/ExecuteStage.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/ExecuteStage.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/ExecuteStage.cpp:68,Performance,queue,queue,68,"// If we cannot issue immediately, the HWS will add IR to its ready queue for; // execution later, so we must return early here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Stages/ExecuteStage.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/ExecuteStage.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/ExecuteStage.cpp:30,Deployability,pipeline,pipelines,30,// Issue IR to the underlying pipelines.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Stages/ExecuteStage.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/ExecuteStage.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/ExecuteStage.cpp:20,Availability,mask,masks,20,// Replace resource masks with valid resource processor IDs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Stages/ExecuteStage.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/ExecuteStage.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/InOrderIssueStage.cpp:447,Deployability,pipeline,pipeline,447,"//===---------------------- InOrderIssueStage.cpp ---------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// InOrderIssueStage implements an in-order execution pipeline.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Stages/InOrderIssueStage.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/InOrderIssueStage.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/InOrderIssueStage.cpp:8,Performance,load,load,8,// This load (store) aliases with a preceding store (load). Delay; // it until the depenency is cleared.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Stages/InOrderIssueStage.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/InOrderIssueStage.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/InOrderIssueStage.cpp:53,Performance,load,load,53,// This load (store) aliases with a preceding store (load). Delay; // it until the depenency is cleared.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Stages/InOrderIssueStage.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/InOrderIssueStage.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/InOrderIssueStage.cpp:96,Usability,clear,cleared,96,// This load (store) aliases with a preceding store (load). Delay; // it until the depenency is cleared.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Stages/InOrderIssueStage.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/InOrderIssueStage.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/InOrderIssueStage.cpp:20,Availability,mask,masks,20,// Replace resource masks with valid resource processor IDs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Stages/InOrderIssueStage.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/InOrderIssueStage.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/InOrderIssueStage.cpp:28,Performance,latency,latency,28,"// If the instruction has a latency of 0, we need to handle; // the execution and retirement now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Stages/InOrderIssueStage.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/InOrderIssueStage.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/InOrderIssueStage.cpp:3,Deployability,Update,Update,3,// Update other instructions. Executed instructions will be retired during the; // next cycle.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Stages/InOrderIssueStage.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/InOrderIssueStage.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/InOrderIssueStage.cpp:3,Deployability,Release,Release,3,// Release consumed resources.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Stages/InOrderIssueStage.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/InOrderIssueStage.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/InOrderIssueStage.cpp:22,Energy Efficiency,schedul,scheduled,22,// Issue instructions scheduled for this cycle,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Stages/InOrderIssueStage.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/InOrderIssueStage.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/InOrderIssueStage.cpp:110,Usability,clear,clear,110,"// Make a copy of the reference, and try issue it again.; // Do not take the instruction reference because SI.clear() will; // invalidate it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Stages/InOrderIssueStage.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/InOrderIssueStage.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/InstructionTables.cpp:562,Availability,avail,available,562,"//===--------------------- InstructionTables.cpp ----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file implements the method InstructionTables::execute().; /// Method execute() prints a theoretical resource pressure distribution based; /// on the information available in the scheduling model, and without running; /// the pipeline.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Stages/InstructionTables.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/InstructionTables.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/InstructionTables.cpp:626,Deployability,pipeline,pipeline,626,"//===--------------------- InstructionTables.cpp ----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file implements the method InstructionTables::execute().; /// Method execute() prints a theoretical resource pressure distribution based; /// on the information available in the scheduling model, and without running; /// the pipeline.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Stages/InstructionTables.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/InstructionTables.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/InstructionTables.cpp:579,Energy Efficiency,schedul,scheduling,579,"//===--------------------- InstructionTables.cpp ----------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file implements the method InstructionTables::execute().; /// Method execute() prints a theoretical resource pressure distribution based; /// on the information available in the scheduling model, and without running; /// the pipeline.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Stages/InstructionTables.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/InstructionTables.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/RetireStage.cpp:449,Deployability,pipeline,pipeline,449,"//===---------------------- RetireStage.cpp ---------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file defines the retire stage of an instruction pipeline.; /// The RetireStage represents the process logic that interacts with the; /// simulated RetireControlUnit hardware.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Stages/RetireStage.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/RetireStage.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/RetireStage.cpp:503,Testability,log,logic,503,"//===---------------------- RetireStage.cpp ---------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file defines the retire stage of an instruction pipeline.; /// The RetireStage represents the process logic that interacts with the; /// simulated RetireControlUnit hardware.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Stages/RetireStage.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/RetireStage.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/RetireStage.cpp:3,Deployability,Release,Release,3,// Release the load/store queue entries.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Stages/RetireStage.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/RetireStage.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/RetireStage.cpp:15,Performance,load,load,15,// Release the load/store queue entries.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Stages/RetireStage.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/RetireStage.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/RetireStage.cpp:26,Performance,queue,queue,26,// Release the load/store queue entries.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Stages/RetireStage.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/RetireStage.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/Stage.cpp:469,Deployability,pipeline,pipeline,469,"//===---------------------- Stage.cpp ---------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file defines a stage.; /// A chain of stages compose an instruction pipeline.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/MCA/Stages/Stage.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/MCA/Stages/Stage.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/Archive.cpp:38,Usability,simpl,simply,38,"// For regular archives this function simply calls llvm::writeArchive,; // For thin archives it writes the archive file itself as well as its members.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/Archive.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/Archive.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/Archive.cpp:315,Safety,avoid,avoided,315,"// For regular files (as is the case for deepWriteArchive),; // FileOutputBuffer::create will return OnDiskBuffer.; // OnDiskBuffer uses a temporary file and then renames it. So in reality; // there is no inefficiency / duplicated in-memory buffers in this case. For; // now in-memory buffers can not be completely avoided since; // NewArchiveMember still requires them even though writeArchive does not; // write them on disk.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/Archive.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/Archive.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/Archive.h:48,Modifiability,Config,Config,48,/// Applies the transformations described by \p Config to; /// each member in archive \p Ar.; /// \returns Vector of transformed archive members.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/Archive.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/Archive.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/CommonConfig.cpp:50,Availability,error,error,50,"// If we couldn't create it as a glob, report the error, but try again; // with a literal if the error reporting is non-fatal.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/CommonConfig.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/CommonConfig.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/CommonConfig.cpp:97,Availability,error,error,97,"// If we couldn't create it as a glob, report the error, but try again; // with a literal if the error reporting is non-fatal.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/CommonConfig.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/CommonConfig.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ConfigManager.cpp:7,Modifiability,Config,ConfigManager,7,"//===- ConfigManager.cpp --------------------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/ConfigManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ConfigManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/COFF/COFFObjcopy.cpp:3,Performance,Perform,Perform,3,// Perform the actual section removals.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/COFF/COFFObjcopy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/COFF/COFFObjcopy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/COFF/COFFObjcopy.cpp:49,Availability,error,error,49,// Explicitly removing a referenced symbol is an error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/COFF/COFFObjcopy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/COFF/COFFObjcopy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/COFF/COFFObject.h:45,Deployability,Update,Update,45,// Allow a UniqueId 0 to mean undefined.; // Update SymbolMap.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/COFF/COFFObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/COFF/COFFObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/COFF/COFFObject.h:3,Deployability,Update,Update,3,// Update SectionMap and Index in each Section.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/COFF/COFFObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/COFF/COFFObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/COFF/COFFWriter.cpp:3,Deployability,Update,Update,3,// Update the section definition with the new section number.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/COFF/COFFWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/COFF/COFFWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/COFF/COFFWriter.cpp:26,Security,checksum,checksum,26,"// If the PE header had a checksum, clear it, since it isn't valid; // any longer. (We don't calculate a new one.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/COFF/COFFWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/COFF/COFFWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/COFF/COFFWriter.cpp:36,Usability,clear,clear,36,"// If the PE header had a checksum, clear it, since it isn't valid; // any longer. (We don't calculate a new one.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/COFF/COFFWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/COFF/COFFWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/COFF/COFFWriter.cpp:29,Deployability,patch,patched,29,"// Debug directory found and patched, all done.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/COFF/COFFWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/COFF/COFFWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObjcopy.cpp:112,Integrability,depend,dependant,112,"// Preserve some flags which should not be dropped when setting flags.; // Also, preserve anything OS/processor dependant.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObjcopy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObjcopy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObjcopy.cpp:3,Integrability,Depend,Depending,3,// Depending on the initial ELFT and OutputFormat we need a different Writer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObjcopy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObjcopy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObjcopy.cpp:9,Deployability,update,update,9,// TODO: update or remove symbols only if there is an option that affects; // them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObjcopy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObjcopy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObjcopy.cpp:130,Deployability,patch,patchset,130,// We keep the .ARM.attribute section to maintain compatibility; // with Debian derived distributions. This is a bug in their; // patchset as documented here:; // https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=943798,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObjcopy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObjcopy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObjcopy.cpp:172,Deployability,update,updated,172,"// This has to be the last predicate assignment.; // If the option --keep-symbol has been specified; // and at least one of those symbols is present; // (equivalently, the updated symbol table is not empty); // the symbol table and the string table should not be removed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObjcopy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObjcopy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObjcopy.cpp:401,Integrability,depend,depend,401,"// This function handles the high level operations of GNU objcopy including; // handling command line options. It's important to outline certain properties; // we expect to hold of the command line operations. Any operation that ""keeps""; // should keep regardless of a remove. Additionally any removal should respect; // any previous removals. Lastly whether or not something is removed shouldn't; // depend a) on the order the options occur in or b) on some opaque priority; // system. The only priority is that keeps/copies overrule removes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObjcopy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObjcopy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObjcopy.cpp:193,Availability,error,errors,193,"// It is important to remove the sections first. For example, we want to; // remove the relocation sections before removing the symbols. That allows; // us to avoid reporting the inappropriate errors about removing symbols; // named in relocations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObjcopy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObjcopy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObjcopy.cpp:159,Safety,avoid,avoid,159,"// It is important to remove the sections first. For example, we want to; // remove the relocation sections before removing the symbols. That allows; // us to avoid reporting the inappropriate errors about removing symbols; // named in relocations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObjcopy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObjcopy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObjcopy.cpp:19,Energy Efficiency,allocate,allocated,19,// Add a prefix to allocated sections and their relocation sections. This; // should be done after renaming the section by Config.SectionToRename to; // imitate the GNU objcopy behavior.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObjcopy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObjcopy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObjcopy.cpp:123,Modifiability,Config,Config,123,// Add a prefix to allocated sections and their relocation sections. This; // should be done after renaming the section by Config.SectionToRename to; // imitate the GNU objcopy behavior.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObjcopy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObjcopy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObjcopy.cpp:48,Energy Efficiency,allocate,allocated,48,"// Rename relocation sections associated to the allocated sections.; // For example, if we rename .text to .prefix.text, we also rename; // .rel.text to .rel.prefix.text.; //; // Dynamic relocation sections (SHT_REL[A] with SHF_ALLOC) are handled; // above, e.g., .rela.plt is renamed to .prefix.rela.plt, not; // .rela.prefix.plt since GNU objcopy does so.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObjcopy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObjcopy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObjcopy.cpp:80,Modifiability,Config,Config,80,"// If the relocation section comes *after* the target section, we; // don't add Config.AllocSectionsPrefix because we've already added; // the prefix to TargetSec->Name. Otherwise, if the relocation; // section comes *before* the target section, we add the prefix.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObjcopy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObjcopy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp:8,Modifiability,extend,extended,8,// Sign extended 32 bit addresses (e.g 0xFFFFFFFF80000000) are ok,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp:35,Security,Checksum,Checksum,35,// ':' + Length + Address + Type + Checksum with empty data ':LLAAAATTCC',MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp:9,Modifiability,extend,extended,9,"// Write extended address record, zeroing segment address; // if needed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp:3,Deployability,Update,Update,3,// Update the target section if it was replaced.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp:243,Testability,assert,assert,243,"// SecToApplyRel contains a section referenced by sh_info field. It keeps; // a section to which the relocation section applies. When we remove any; // sections we also remove their relocation sections. Since we do that much; // earlier, this assert should never be triggered.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp:70,Security,validat,validated,70,// Adds sections from IHEX data file. Data should have been; // fully validated by this time.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp:101,Safety,avoid,avoid,101,// Every segment will overlap with itself but we don't want a segment to; // be its own parent so we avoid that situation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp:24,Energy Efficiency,allocate,allocated,24,// If a string table is allocated we don't want to mess with it. That would; // mean altering the memory image. There are no special link types or; // anything so we can just use a Section.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp:3,Security,Hash,Hash,3,// Hash tables should refer to SHT_DYNSYM which we're not going to change.; // Because of this we don't need to mess with the hash tables either.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp:126,Security,hash,hash,126,// Hash tables should refer to SHT_DYNSYM which we're not going to change.; // Because of this we don't need to mess with the hash tables either.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp:150,Performance,load,loadable,150,"// The ELFFile whose ELF headers and program headers are copied into the; // output file. Normally the same as ElfFile, but if we're extracting a; // loadable partition it will point to the partition's headers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp:33,Energy Efficiency,charge,charge,33,// The segment writer will be in charge of updating these contents.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp:160,Availability,error,error,160,// Now make sure there are no remaining references to the sections that will; // be removed. Sometimes it is impossible to remove a reference so we emit; // an error here instead.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp:33,Availability,alive,alive,33,"// For each section that remains alive, we want to remove the dead references.; // This either might update the content of the section (e.g. remove symbols; // from symbol table that belongs to removed section) or trigger an error if; // a live section critically depends on a section being removed somehow; // (e.g. the removed section is referenced by a relocation).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp:225,Availability,error,error,225,"// For each section that remains alive, we want to remove the dead references.; // This either might update the content of the section (e.g. remove symbols; // from symbol table that belongs to removed section) or trigger an error if; // a live section critically depends on a section being removed somehow; // (e.g. the removed section is referenced by a relocation).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp:101,Deployability,update,update,101,"// For each section that remains alive, we want to remove the dead references.; // This either might update the content of the section (e.g. remove symbols; // from symbol table that belongs to removed section) or trigger an error if; // a live section critically depends on a section being removed somehow; // (e.g. the removed section is referenced by a relocation).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp:264,Integrability,depend,depends,264,"// For each section that remains alive, we want to remove the dead references.; // This either might update the content of the section (e.g. remove symbols; // from symbol table that belongs to removed section) or trigger an error if; // a live section critically depends on a section being removed somehow; // (e.g. the removed section is referenced by a relocation).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp:192,Usability,simpl,simply,192,"// The only way a segment should move is if a section was between two; // segments and that section was removed. If that section isn't in a segment; // then it's acceptable, but not ideal, to simply move it to after the; // segments. So we can simply layout segments one after the other accounting; // for alignment.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp:244,Usability,simpl,simply,244,"// The only way a segment should move is if a section was between two; // segments and that section was removed. If that section isn't in a segment; // then it's acceptable, but not ideal, to simply move it to after the; // segments. So we can simply layout segments one after the other accounting; // for alignment.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp:3,Modifiability,Rewrite,Rewrite,3,// Rewrite sh_offset after some sections are changed to SHT_NOBITS and thus; // occupy no space in the file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp:94,Deployability,update,updated,94,// Rewrite p_offset and p_filesz of non-PT_PHDR segments after sh_offset values; // have been updated.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp:3,Modifiability,Rewrite,Rewrite,3,// Rewrite p_offset and p_filesz of non-PT_PHDR segments after sh_offset values; // have been updated.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp:109,Modifiability,rewrite,rewrite,109,"// For --only-keep-debug, the sections that did not preserve contents were; // changed to SHT_NOBITS. We now rewrite sh_offset fields of sections, and; // then rewrite p_offset/p_filesz of program headers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp:160,Modifiability,rewrite,rewrite,160,"// For --only-keep-debug, the sections that did not preserve contents were; // changed to SHT_NOBITS. We now rewrite sh_offset fields of sections, and; // then rewrite p_offset/p_filesz of program headers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp:132,Availability,error,error,132,// It could happen that SectionNames has been removed and yet the user wants; // a section header table output. We need to throw an error if a user tries; // to do that.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp:39,Performance,perform,perform,39,// We need to assign indexes before we perform layout because we need to know; // if we need large indexes or not. We can assign indexes first and check as; // we go to see if we will actully need large indexes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp:29,Deployability,update,update,29,"// The symbol table does not update all other sections on update. For; // instance, symbol names are not added as new symbols are added. This means; // that some sections, like .strtab, don't yet have their final size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp:58,Deployability,update,update,58,"// The symbol table does not update all other sections on update. For; // instance, symbol names are not added as new symbols are added. This means; // that some sections, like .strtab, don't yet have their final size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.h:14,Security,checksum,checksum,14,// Calculates checksum of stringified record representation; // S must NOT contain leading ':' and trailing whitespace; // characters,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.h:189,Performance,load,loaded,189,"// The address field is 0000 (not used) and the byte count is always 04.; // The four data bytes represent a 32-bit address value. In the case of; // 80386 and higher CPUs, this address is loaded into the EIP register.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.h:3,Modifiability,Extend,Extended,3,// Extended linear address,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.h:9,Modifiability,extend,extended,9,// Write extended linear (base) address corresponding to 'Addr',MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.h:125,Energy Efficiency,allocate,allocated,125,"// There are two types of string tables that can exist, dynamic and not dynamic.; // In the dynamic case the string table is allocated. Changing a dynamic string; // table would mean altering virtual addresses and thus the memory image. So; // dynamic string tables should not have an interface to modify them or; // reconstruct them. This type lets us reconstruct a string table. To avoid; // this class being used for dynamic string tables (which has happened) the; // classof method checks that the particular instance is not allocated. This; // then agrees with the makeSection method used to construct most sections.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.h:529,Energy Efficiency,allocate,allocated,529,"// There are two types of string tables that can exist, dynamic and not dynamic.; // In the dynamic case the string table is allocated. Changing a dynamic string; // table would mean altering virtual addresses and thus the memory image. So; // dynamic string tables should not have an interface to modify them or; // reconstruct them. This type lets us reconstruct a string table. To avoid; // this class being used for dynamic string tables (which has happened) the; // classof method checks that the particular instance is not allocated. This; // then agrees with the makeSection method used to construct most sections.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.h:285,Integrability,interface,interface,285,"// There are two types of string tables that can exist, dynamic and not dynamic.; // In the dynamic case the string table is allocated. Changing a dynamic string; // table would mean altering virtual addresses and thus the memory image. So; // dynamic string tables should not have an interface to modify them or; // reconstruct them. This type lets us reconstruct a string table. To avoid; // this class being used for dynamic string tables (which has happened) the; // classof method checks that the particular instance is not allocated. This; // then agrees with the makeSection method used to construct most sections.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.h:384,Safety,avoid,avoid,384,"// There are two types of string tables that can exist, dynamic and not dynamic.; // In the dynamic case the string table is allocated. Changing a dynamic string; // table would mean altering virtual addresses and thus the memory image. So; // dynamic string tables should not have an interface to modify them or; // reconstruct them. This type lets us reconstruct a string table. To avoid; // this class being used for dynamic string tables (which has happened) the; // classof method checks that the particular instance is not allocated. This; // then agrees with the makeSection method used to construct most sections.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.h:382,Integrability,interface,interface,382,"// All relocation sections denote relocations to apply to another section.; // However, some relocation sections use a dynamic symbol table and others use; // a regular symbol table. Because the types of the two symbol tables differ in; // our system (because they should behave differently) we can't uniformly; // represent all relocations with the same base class if we expose an interface; // that mentions the symbol table type. So we split the two base types into two; // different classes, one which handles the section the relocation is applied to; // and another which handles the symbol table type. The symbol table type is; // taken as a type parameter to the class (see RelocSectionWithSymtabBase).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.h:372,Security,expose,expose,372,"// All relocation sections denote relocations to apply to another section.; // However, some relocation sections use a dynamic symbol table and others use; // a regular symbol table. Because the types of the two symbol tables differ in; // our system (because they should behave differently) we can't uniformly; // represent all relocations with the same base class if we expose an interface; // that mentions the symbol table type. So we split the two base types into two; // different classes, one which handles the section the relocation is applied to; // and another which handles the symbol table type. The symbol table type is; // taken as a type parameter to the class (see RelocSectionWithSymtabBase).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.h:87,Modifiability,refactor,refactored,87,// TODO: Contents is present in several classes of the hierarchy.; // This needs to be refactored to avoid duplication.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.h:101,Safety,avoid,avoid,101,// TODO: Contents is present in several classes of the hierarchy.; // This needs to be refactored to avoid duplication.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/ELF/ELFObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.cpp:3,Deployability,Update,Updates,3,// Updates the index and the number of local/external/undefined symbols.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.cpp:18,Deployability,update,updates,18,// Recomputes and updates offset and size fields in load commands and sections; // since they could be modified.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.cpp:52,Performance,load,load,52,// Recomputes and updates offset and size fields in load commands and sections; // since they could be modified.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.cpp:6,Deployability,update,update,6,// We update the __LINKEDIT segment later (in layoutTail).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.cpp:3,Deployability,Update,Update,3,// Update file offsets and sizes of sections.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.cpp:82,Performance,perform,performed,82,// Note: These calculations are to be kept in sync with the same; // calculations performed in LLD's CodeSignatureSection.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.cpp:84,Deployability,Update,Update,84,// Now we have determined the layout of the contents of the __LINKEDIT; // segment. Update its load command.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.cpp:95,Performance,load,load,95,// Now we have determined the layout of the contents of the __LINKEDIT; // segment. Update its load command.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.cpp:409,Deployability,update,update,409,"// Note that LC_ENCRYPTION_INFO.cryptoff despite its name and the comment in; // <mach-o/loader.h> is not an offset in the binary file, instead, it is a; // relative virtual address. At the moment modification of the __TEXT; // segment of executables isn't supported anyway (e.g. data in code entries; // are not recalculated). Moreover, in general; // LC_ENCRYPT_INFO/LC_ENCRYPTION_INFO_64 are nontrivial to update because; // without making additional assumptions (e.g. that the entire __TEXT; // segment should be encrypted) we do not know how to recalculate the; // boundaries of the encrypted part. For now just copy over these load; // commands until we encounter a real world usecase where; // LC_ENCRYPT_INFO/LC_ENCRYPTION_INFO_64 need to be adjusted.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.cpp:89,Performance,load,loader,89,"// Note that LC_ENCRYPTION_INFO.cryptoff despite its name and the comment in; // <mach-o/loader.h> is not an offset in the binary file, instead, it is a; // relative virtual address. At the moment modification of the __TEXT; // segment of executables isn't supported anyway (e.g. data in code entries; // are not recalculated). Moreover, in general; // LC_ENCRYPT_INFO/LC_ENCRYPTION_INFO_64 are nontrivial to update because; // without making additional assumptions (e.g. that the entire __TEXT; // segment should be encrypted) we do not know how to recalculate the; // boundaries of the encrypted part. For now just copy over these load; // commands until we encounter a real world usecase where; // LC_ENCRYPT_INFO/LC_ENCRYPTION_INFO_64 need to be adjusted.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.cpp:633,Performance,load,load,633,"// Note that LC_ENCRYPTION_INFO.cryptoff despite its name and the comment in; // <mach-o/loader.h> is not an offset in the binary file, instead, it is a; // relative virtual address. At the moment modification of the __TEXT; // segment of executables isn't supported anyway (e.g. data in code entries; // are not recalculated). Moreover, in general; // LC_ENCRYPT_INFO/LC_ENCRYPTION_INFO_64 are nontrivial to update because; // without making additional assumptions (e.g. that the entire __TEXT; // segment should be encrypted) we do not know how to recalculate the; // boundaries of the encrypted part. For now just copy over these load; // commands until we encounter a real world usecase where; // LC_ENCRYPT_INFO/LC_ENCRYPTION_INFO_64 need to be adjusted.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.cpp:517,Security,encrypt,encrypted,517,"// Note that LC_ENCRYPTION_INFO.cryptoff despite its name and the comment in; // <mach-o/loader.h> is not an offset in the binary file, instead, it is a; // relative virtual address. At the moment modification of the __TEXT; // segment of executables isn't supported anyway (e.g. data in code entries; // are not recalculated). Moreover, in general; // LC_ENCRYPT_INFO/LC_ENCRYPTION_INFO_64 are nontrivial to update because; // without making additional assumptions (e.g. that the entire __TEXT; // segment should be encrypted) we do not know how to recalculate the; // boundaries of the encrypted part. For now just copy over these load; // commands until we encounter a real world usecase where; // LC_ENCRYPT_INFO/LC_ENCRYPTION_INFO_64 need to be adjusted.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.cpp:588,Security,encrypt,encrypted,588,"// Note that LC_ENCRYPTION_INFO.cryptoff despite its name and the comment in; // <mach-o/loader.h> is not an offset in the binary file, instead, it is a; // relative virtual address. At the moment modification of the __TEXT; // segment of executables isn't supported anyway (e.g. data in code entries; // are not recalculated). Moreover, in general; // LC_ENCRYPT_INFO/LC_ENCRYPTION_INFO_64 are nontrivial to update because; // without making additional assumptions (e.g. that the entire __TEXT; // segment should be encrypted) we do not know how to recalculate the; // boundaries of the encrypted part. For now just copy over these load; // commands until we encounter a real world usecase where; // LC_ENCRYPT_INFO/LC_ENCRYPTION_INFO_64 need to be adjusted.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.cpp:14,Deployability,update,update,14,// Nothing to update.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.cpp:3,Safety,Abort,Abort,3,// Abort if it's unsupported in order to prevent corrupting the object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.h:52,Performance,load,load,52,"/// When MachO binaries include a LC_CODE_SIGNATURE load command,; /// the __LINKEDIT data segment will include a section corresponding; /// to the LC_CODE_SIGNATURE load command. This section serves as a signature; /// for the binary. Included in the CodeSignature section is a header followed; /// by a hash of the binary. If present, the CodeSignature section is the; /// last component of the binary.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.h:166,Performance,load,load,166,"/// When MachO binaries include a LC_CODE_SIGNATURE load command,; /// the __LINKEDIT data segment will include a section corresponding; /// to the LC_CODE_SIGNATURE load command. This section serves as a signature; /// for the binary. Included in the CodeSignature section is a header followed; /// by a hash of the binary. If present, the CodeSignature section is the; /// last component of the binary.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.h:305,Security,hash,hash,305,"/// When MachO binaries include a LC_CODE_SIGNATURE load command,; /// the __LINKEDIT data segment will include a section corresponding; /// to the LC_CODE_SIGNATURE load command. This section serves as a signature; /// for the binary. Included in the CodeSignature section is a header followed; /// by a hash of the binary. If present, the CodeSignature section is the; /// last component of the binary.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.h:38,Security,hash,hash,38,"// 4 KiB; // For each block, a SHA256 hash (256 bits, 32 bytes) is written to; // the CodeSignature section.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.h:33,Integrability,depend,depends,33,"// The size of the entire header depends upon the filename the binary is being; // written to, but the rest of the header is fixed in size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.h:36,Security,hash,hash,36,// The number of blocks required to hash the binary.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.h:83,Security,hash,hashes,83,"// The size of the entire CodeSignature section, including both the header and; // hashes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.h:18,Deployability,update,updates,18,// Recomputes and updates fields in the given object such as file offsets.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOLayoutBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObjcopy.cpp:11,Availability,error,error,11,// Emit an error if the Mach-O binary does not contain an rpath path name; // specified in -delete_rpath.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObjcopy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObjcopy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObjcopy.cpp:9,Availability,error,errors,9,// Throw errors for invalid RPaths.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObjcopy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObjcopy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObjcopy.cpp:3,Deployability,Update,Update,3,// Update load commands.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObjcopy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObjcopy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObjcopy.cpp:10,Performance,load,load,10,// Update load commands.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObjcopy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObjcopy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObjcopy.cpp:54,Performance,load,load,54,"// Unlike appending rpaths, the indexes of subsequent load commands must; // be recalculated after prepending one.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObjcopy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObjcopy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObjcopy.cpp:56,Performance,load,load,56,// There's no segment named TargetSegName. Create a new load command and; // Insert a new section into it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObjcopy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObjcopy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObjcopy.cpp:101,Availability,Error,Error,101,"// The methods getAsArchive, getAsObjectFile, getAsIRObject of the class; // ObjectForArch return an Error in case of the type mismatch. We need to; // check each in turn to see what kind of slice this is, so ignore errors; // produced along the way.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObjcopy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObjcopy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObjcopy.cpp:216,Availability,error,errors,216,"// The methods getAsArchive, getAsObjectFile, getAsIRObject of the class; // ObjectForArch return an Error in case of the type mismatch. We need to; // check each in turn to see what kind of slice this is, so ignore errors; // produced along the way.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObjcopy.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObjcopy.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.cpp:3,Deployability,Update,Update,3,// Update indices of special load commands,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.cpp:29,Performance,load,load,29,// Update indices of special load commands,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h:144,Performance,load,load,144,// The type MachO::macho_load_command is defined in llvm/BinaryFormat/MachO.h; // and it is a union of all the structs corresponding to various load; // commands.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h:41,Performance,load,load,41,// The raw content of the payload of the load command (located right after the; // corresponding struct). In some cases it is either empty or can be; // copied-over without digging into its structure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h:8,Performance,load,load,8,"// Some load commands can contain (inside the payload) an array of sections,; // though the contents of the sections are stored separately. The struct; // Section describes only sections' metadata and where to find the; // corresponding content inside the binary.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h:35,Performance,load,load,35,// Returns the segment name if the load command is a segment command.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h:41,Performance,load,load,41,// Returns the segment vm address if the load command is a segment command.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h:86,Performance,load,load,86,/// The location of the symbol table inside the binary is described by LC_SYMTAB; /// load command.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h:86,Performance,load,load,86,/// The location of the string table inside the binary is described by LC_SYMTAB; /// load command.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h:88,Performance,load,load,88,"/// The location of the rebase info inside the binary is described by; /// LC_DYLD_INFO load command. Dyld rebases an image whenever dyld loads it at; /// an address different from its preferred address. The rebase information is; /// a stream of byte sized opcodes whose symbolic names start with; /// REBASE_OPCODE_. Conceptually the rebase information is a table of tuples:; /// <seg-index, seg-offset, type>; /// The opcodes are a compressed way to encode the table by only; /// encoding when a column changes. In addition simple patterns; /// like ""every n'th offset for m times"" can be encoded in a few; /// bytes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h:138,Performance,load,loads,138,"/// The location of the rebase info inside the binary is described by; /// LC_DYLD_INFO load command. Dyld rebases an image whenever dyld loads it at; /// an address different from its preferred address. The rebase information is; /// a stream of byte sized opcodes whose symbolic names start with; /// REBASE_OPCODE_. Conceptually the rebase information is a table of tuples:; /// <seg-index, seg-offset, type>; /// The opcodes are a compressed way to encode the table by only; /// encoding when a column changes. In addition simple patterns; /// like ""every n'th offset for m times"" can be encoded in a few; /// bytes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h:527,Usability,simpl,simple,527,"/// The location of the rebase info inside the binary is described by; /// LC_DYLD_INFO load command. Dyld rebases an image whenever dyld loads it at; /// an address different from its preferred address. The rebase information is; /// a stream of byte sized opcodes whose symbolic names start with; /// REBASE_OPCODE_. Conceptually the rebase information is a table of tuples:; /// <seg-index, seg-offset, type>; /// The opcodes are a compressed way to encode the table by only; /// encoding when a column changes. In addition simple patterns; /// like ""every n'th offset for m times"" can be encoded in a few; /// bytes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h:54,Usability,simpl,simply,54,"// At the moment we do not parse this info (and it is simply copied over),; // but the proper support will be added later.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h:86,Performance,load,load,86,"/// The location of the bind info inside the binary is described by; /// LC_DYLD_INFO load command. Dyld binds an image during the loading process,; /// if the image requires any pointers to be initialized to symbols in other; /// images. The bind information is a stream of byte sized opcodes whose; /// symbolic names start with BIND_OPCODE_. Conceptually the bind information is; /// a table of tuples: <seg-index, seg-offset, type, symbol-library-ordinal,; /// symbol-name, addend> The opcodes are a compressed way to encode the table by; /// only encoding when a column changes. In addition simple patterns like for; /// runs of pointers initialized to the same value can be encoded in a few; /// bytes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h:131,Performance,load,loading,131,"/// The location of the bind info inside the binary is described by; /// LC_DYLD_INFO load command. Dyld binds an image during the loading process,; /// if the image requires any pointers to be initialized to symbols in other; /// images. The bind information is a stream of byte sized opcodes whose; /// symbolic names start with BIND_OPCODE_. Conceptually the bind information is; /// a table of tuples: <seg-index, seg-offset, type, symbol-library-ordinal,; /// symbol-name, addend> The opcodes are a compressed way to encode the table by; /// only encoding when a column changes. In addition simple patterns like for; /// runs of pointers initialized to the same value can be encoded in a few; /// bytes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h:596,Usability,simpl,simple,596,"/// The location of the bind info inside the binary is described by; /// LC_DYLD_INFO load command. Dyld binds an image during the loading process,; /// if the image requires any pointers to be initialized to symbols in other; /// images. The bind information is a stream of byte sized opcodes whose; /// symbolic names start with BIND_OPCODE_. Conceptually the bind information is; /// a table of tuples: <seg-index, seg-offset, type, symbol-library-ordinal,; /// symbol-name, addend> The opcodes are a compressed way to encode the table by; /// only encoding when a column changes. In addition simple patterns like for; /// runs of pointers initialized to the same value can be encoded in a few; /// bytes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h:54,Usability,simpl,simply,54,"// At the moment we do not parse this info (and it is simply copied over),; // but the proper support will be added later.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h:91,Performance,load,load,91,"/// The location of the weak bind info inside the binary is described by; /// LC_DYLD_INFO load command. Some C++ programs require dyld to unique symbols; /// so that all images in the process use the same copy of some code/data. This; /// step is done after binding. The content of the weak_bind info is an opcode; /// stream like the bind_info. But it is sorted alphabetically by symbol name.; /// This enable dyld to walk all images with weak binding information in order; /// and look for collisions. If there are no collisions, dyld does no updating.; /// That means that some fixups are also encoded in the bind_info. For; /// instance, all calls to ""operator new"" are first bound to libstdc++.dylib; /// using the information in bind_info. Then if some image overrides operator; /// new that is detected when the weak_bind information is processed and the; /// call to operator new is then rebound.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h:802,Safety,detect,detected,802,"/// The location of the weak bind info inside the binary is described by; /// LC_DYLD_INFO load command. Some C++ programs require dyld to unique symbols; /// so that all images in the process use the same copy of some code/data. This; /// step is done after binding. The content of the weak_bind info is an opcode; /// stream like the bind_info. But it is sorted alphabetically by symbol name.; /// This enable dyld to walk all images with weak binding information in order; /// and look for collisions. If there are no collisions, dyld does no updating.; /// That means that some fixups are also encoded in the bind_info. For; /// instance, all calls to ""operator new"" are first bound to libstdc++.dylib; /// using the information in bind_info. Then if some image overrides operator; /// new that is detected when the weak_bind information is processed and the; /// call to operator new is then rebound.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h:54,Usability,simpl,simply,54,"// At the moment we do not parse this info (and it is simply copied over),; // but the proper support will be added later.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h:91,Performance,load,load,91,"/// The location of the lazy bind info inside the binary is described by; /// LC_DYLD_INFO load command. Some uses of external symbols do not need to be; /// bound immediately. Instead they can be lazily bound on first use. The; /// lazy_bind contains a stream of BIND opcodes to bind all lazy symbols. Normal; /// use is that dyld ignores the lazy_bind section when loading an image.; /// Instead the static linker arranged for the lazy pointer to initially point; /// to a helper function which pushes the offset into the lazy_bind area for the; /// symbol needing to be bound, then jumps to dyld which simply adds the offset; /// to lazy_bind_off to get the information on what to bind.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h:367,Performance,load,loading,367,"/// The location of the lazy bind info inside the binary is described by; /// LC_DYLD_INFO load command. Some uses of external symbols do not need to be; /// bound immediately. Instead they can be lazily bound on first use. The; /// lazy_bind contains a stream of BIND opcodes to bind all lazy symbols. Normal; /// use is that dyld ignores the lazy_bind section when loading an image.; /// Instead the static linker arranged for the lazy pointer to initially point; /// to a helper function which pushes the offset into the lazy_bind area for the; /// symbol needing to be bound, then jumps to dyld which simply adds the offset; /// to lazy_bind_off to get the information on what to bind.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h:605,Usability,simpl,simply,605,"/// The location of the lazy bind info inside the binary is described by; /// LC_DYLD_INFO load command. Some uses of external symbols do not need to be; /// bound immediately. Instead they can be lazily bound on first use. The; /// lazy_bind contains a stream of BIND opcodes to bind all lazy symbols. Normal; /// use is that dyld ignores the lazy_bind section when loading an image.; /// Instead the static linker arranged for the lazy pointer to initially point; /// to a helper function which pushes the offset into the lazy_bind area for the; /// symbol needing to be bound, then jumps to dyld which simply adds the offset; /// to lazy_bind_off to get the information on what to bind.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h:242,Energy Efficiency,reduce,reduces,242,"/// The location of the export info inside the binary is described by; /// LC_DYLD_INFO load command. The symbols exported by a dylib are encoded in a; /// trie. This is a compact representation that factors out common prefixes. It; /// also reduces LINKEDIT pages in RAM because it encodes all information (name,; /// address, flags) in one small, contiguous range. The export area is a stream; /// of nodes. The first node sequentially is the start node for the trie. Nodes; /// for a symbol start with a uleb128 that is the length of the exported symbol; /// information for the string so far. If there is no exported symbol, the node; /// starts with a zero byte. If there is exported info, it follows the length.; /// First is a uleb128 containing flags. Normally, it is followed by; /// a uleb128 encoded offset which is location of the content named; /// by the symbol from the mach_header for the image. If the flags; /// is EXPORT_SYMBOL_FLAGS_REEXPORT, then following the flags is; /// a uleb128 encoded library ordinal, then a zero terminated; /// UTF8 string. If the string is zero length, then the symbol; /// is re-export from the specified dylib with the same name.; /// If the flags is EXPORT_SYMBOL_FLAGS_STUB_AND_RESOLVER, then following; /// the flags is two uleb128s: the stub offset and the resolver offset.; /// The stub is used by non-lazy pointers. The resolver is used; /// by lazy pointers and must be called to get the actual address to use.; /// After the optional exported symbol information is a byte of; /// how many edges (0-255) that this node has leaving it,; /// followed by each edge.; /// Each edge is a zero terminated UTF8 of the addition chars; /// in the symbol, followed by a uleb128 offset for the node that; /// edge points to.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h:88,Performance,load,load,88,"/// The location of the export info inside the binary is described by; /// LC_DYLD_INFO load command. The symbols exported by a dylib are encoded in a; /// trie. This is a compact representation that factors out common prefixes. It; /// also reduces LINKEDIT pages in RAM because it encodes all information (name,; /// address, flags) in one small, contiguous range. The export area is a stream; /// of nodes. The first node sequentially is the start node for the trie. Nodes; /// for a symbol start with a uleb128 that is the length of the exported symbol; /// information for the string so far. If there is no exported symbol, the node; /// starts with a zero byte. If there is exported info, it follows the length.; /// First is a uleb128 containing flags. Normally, it is followed by; /// a uleb128 encoded offset which is location of the content named; /// by the symbol from the mach_header for the image. If the flags; /// is EXPORT_SYMBOL_FLAGS_REEXPORT, then following the flags is; /// a uleb128 encoded library ordinal, then a zero terminated; /// UTF8 string. If the string is zero length, then the symbol; /// is re-export from the specified dylib with the same name.; /// If the flags is EXPORT_SYMBOL_FLAGS_STUB_AND_RESOLVER, then following; /// the flags is two uleb128s: the stub offset and the resolver offset.; /// The stub is used by non-lazy pointers. The resolver is used; /// by lazy pointers and must be called to get the actual address to use.; /// After the optional exported symbol information is a byte of; /// how many edges (0-255) that this node has leaving it,; /// followed by each edge.; /// Each edge is a zero terminated UTF8 of the addition chars; /// in the symbol, followed by a uleb128 offset for the node that; /// edge points to.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h:1292,Testability,stub,stub,1292,"/// The location of the export info inside the binary is described by; /// LC_DYLD_INFO load command. The symbols exported by a dylib are encoded in a; /// trie. This is a compact representation that factors out common prefixes. It; /// also reduces LINKEDIT pages in RAM because it encodes all information (name,; /// address, flags) in one small, contiguous range. The export area is a stream; /// of nodes. The first node sequentially is the start node for the trie. Nodes; /// for a symbol start with a uleb128 that is the length of the exported symbol; /// information for the string so far. If there is no exported symbol, the node; /// starts with a zero byte. If there is exported info, it follows the length.; /// First is a uleb128 containing flags. Normally, it is followed by; /// a uleb128 encoded offset which is location of the content named; /// by the symbol from the mach_header for the image. If the flags; /// is EXPORT_SYMBOL_FLAGS_REEXPORT, then following the flags is; /// a uleb128 encoded library ordinal, then a zero terminated; /// UTF8 string. If the string is zero length, then the symbol; /// is re-export from the specified dylib with the same name.; /// If the flags is EXPORT_SYMBOL_FLAGS_STUB_AND_RESOLVER, then following; /// the flags is two uleb128s: the stub offset and the resolver offset.; /// The stub is used by non-lazy pointers. The resolver is used; /// by lazy pointers and must be called to get the actual address to use.; /// After the optional exported symbol information is a byte of; /// how many edges (0-255) that this node has leaving it,; /// followed by each edge.; /// Each edge is a zero terminated UTF8 of the addition chars; /// in the symbol, followed by a uleb128 offset for the node that; /// edge points to.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h:1338,Testability,stub,stub,1338,"/// The location of the export info inside the binary is described by; /// LC_DYLD_INFO load command. The symbols exported by a dylib are encoded in a; /// trie. This is a compact representation that factors out common prefixes. It; /// also reduces LINKEDIT pages in RAM because it encodes all information (name,; /// address, flags) in one small, contiguous range. The export area is a stream; /// of nodes. The first node sequentially is the start node for the trie. Nodes; /// for a symbol start with a uleb128 that is the length of the exported symbol; /// information for the string so far. If there is no exported symbol, the node; /// starts with a zero byte. If there is exported info, it follows the length.; /// First is a uleb128 containing flags. Normally, it is followed by; /// a uleb128 encoded offset which is location of the content named; /// by the symbol from the mach_header for the image. If the flags; /// is EXPORT_SYMBOL_FLAGS_REEXPORT, then following the flags is; /// a uleb128 encoded library ordinal, then a zero terminated; /// UTF8 string. If the string is zero length, then the symbol; /// is re-export from the specified dylib with the same name.; /// If the flags is EXPORT_SYMBOL_FLAGS_STUB_AND_RESOLVER, then following; /// the flags is two uleb128s: the stub offset and the resolver offset.; /// The stub is used by non-lazy pointers. The resolver is used; /// by lazy pointers and must be called to get the actual address to use.; /// After the optional exported symbol information is a byte of; /// how many edges (0-255) that this node has leaving it,; /// followed by each edge.; /// Each edge is a zero terminated UTF8 of the addition chars; /// in the symbol, followed by a uleb128 offset for the node that; /// edge points to.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h:35,Performance,load,load,35,/// The index of LC_CODE_SIGNATURE load command if present.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h:40,Performance,load,load,40,/// The index of LC_DYLIB_CODE_SIGN_DRS load command if present.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h:27,Performance,load,load,27,/// The index of LC_SYMTAB load command if present.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h:51,Performance,load,load,51,/// The index of LC_DYLD_INFO or LC_DYLD_INFO_ONLY load command if present.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h:26,Performance,load,load,26,/// The index LC_DYSYMTAB load command if present.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h:30,Performance,load,load,30,/// The index LC_DATA_IN_CODE load command if present.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h:44,Performance,load,load,44,/// The index of LC_LINKER_OPTIMIZATIN_HINT load command if present.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h:33,Performance,load,load,33,/// The index LC_FUNCTION_STARTS load command if present.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h:37,Performance,load,load,37,/// The index LC_DYLD_CHAINED_FIXUPS load command if present.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h:35,Performance,load,load,35,/// The index LC_DYLD_EXPORTS_TRIE load command if present.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h:49,Performance,load,load,49,/// The index of the LC_SEGMENT or LC_SEGMENT_64 load command; /// corresponding to the __TEXT segment.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h:26,Performance,load,load,26,/// Creates a new segment load command in the object and returns a reference; /// to the newly created load command. The caller should verify that SegName; /// is not too long (SegName.size() should be less than or equal to 16).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h:103,Performance,load,load,103,/// Creates a new segment load command in the object and returns a reference; /// to the newly created load command. The caller should verify that SegName; /// is not too long (SegName.size() should be less than or equal to 16).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOReader.cpp:3,Performance,Load,LoadCmd,3,"// LoadCmd.Ptr might not be aligned temporarily as; // MachO::segment_command requires, but the segname char pointer do not; // have alignment restrictions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOReader.cpp:3,Performance,Load,LoadCmd,3,"// LoadCmd.Ptr might not be aligned temporarily as; // MachO::segment_command_64 requires, but the segname char pointer do; // not have alignment restrictions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOReader.cpp:19,Availability,error,error,19,// FIXME: Refactor error handling in MachOReader and report an error; // if we encounter an invalid relocation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOReader.cpp:63,Availability,error,error,63,// FIXME: Refactor error handling in MachOReader and report an error; // if we encounter an invalid relocation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOReader.cpp:10,Modifiability,Refactor,Refactor,10,// FIXME: Refactor error handling in MachOReader and report an error; // if we encounter an invalid relocation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOWriter.cpp:43,Performance,load,load,43,"// Otherwise, we have only Mach header and load commands.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOWriter.cpp:15,Performance,load,load,15,// Construct a load command.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOWriter.cpp:12,Performance,load,load,12,// Copy the load command as it is.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOWriter.cpp:81,Performance,perform,performed,81,"// NOTE: This CodeSignature section behaviour must be kept in sync with that; // performed in LLD's CodeSignatureSection::write /; // CodeSignatureSection::writeHashes. Furthermore, this call must occur only; // after the rest of the binary has already been written to the buffer. This; // is because the buffer is read from to perform the necessary hashing.; // The CodeSignature section is the last section in the MachO binary and; // contains a hash of all content in the binary before it. Since llvm-objcopy; // has likely modified the target binary, the hash must be regenerated; // entirely. To generate this hash, we must read from the start of the binary; // (HashReadStart) to just before the start of the CodeSignature section; // (HashReadEnd).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOWriter.cpp:328,Performance,perform,perform,328,"// NOTE: This CodeSignature section behaviour must be kept in sync with that; // performed in LLD's CodeSignatureSection::write /; // CodeSignatureSection::writeHashes. Furthermore, this call must occur only; // after the rest of the binary has already been written to the buffer. This; // is because the buffer is read from to perform the necessary hashing.; // The CodeSignature section is the last section in the MachO binary and; // contains a hash of all content in the binary before it. Since llvm-objcopy; // has likely modified the target binary, the hash must be regenerated; // entirely. To generate this hash, we must read from the start of the binary; // (HashReadStart) to just before the start of the CodeSignature section; // (HashReadEnd).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOWriter.cpp:350,Security,hash,hashing,350,"// NOTE: This CodeSignature section behaviour must be kept in sync with that; // performed in LLD's CodeSignatureSection::write /; // CodeSignatureSection::writeHashes. Furthermore, this call must occur only; // after the rest of the binary has already been written to the buffer. This; // is because the buffer is read from to perform the necessary hashing.; // The CodeSignature section is the last section in the MachO binary and; // contains a hash of all content in the binary before it. Since llvm-objcopy; // has likely modified the target binary, the hash must be regenerated; // entirely. To generate this hash, we must read from the start of the binary; // (HashReadStart) to just before the start of the CodeSignature section; // (HashReadEnd).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOWriter.cpp:448,Security,hash,hash,448,"// NOTE: This CodeSignature section behaviour must be kept in sync with that; // performed in LLD's CodeSignatureSection::write /; // CodeSignatureSection::writeHashes. Furthermore, this call must occur only; // after the rest of the binary has already been written to the buffer. This; // is because the buffer is read from to perform the necessary hashing.; // The CodeSignature section is the last section in the MachO binary and; // contains a hash of all content in the binary before it. Since llvm-objcopy; // has likely modified the target binary, the hash must be regenerated; // entirely. To generate this hash, we must read from the start of the binary; // (HashReadStart) to just before the start of the CodeSignature section; // (HashReadEnd).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOWriter.cpp:559,Security,hash,hash,559,"// NOTE: This CodeSignature section behaviour must be kept in sync with that; // performed in LLD's CodeSignatureSection::write /; // CodeSignatureSection::writeHashes. Furthermore, this call must occur only; // after the rest of the binary has already been written to the buffer. This; // is because the buffer is read from to perform the necessary hashing.; // The CodeSignature section is the last section in the MachO binary and; // contains a hash of all content in the binary before it. Since llvm-objcopy; // has likely modified the target binary, the hash must be regenerated; // entirely. To generate this hash, we must read from the start of the binary; // (HashReadStart) to just before the start of the CodeSignature section; // (HashReadEnd).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOWriter.cpp:615,Security,hash,hash,615,"// NOTE: This CodeSignature section behaviour must be kept in sync with that; // performed in LLD's CodeSignatureSection::write /; // CodeSignatureSection::writeHashes. Furthermore, this call must occur only; // after the rest of the binary has already been written to the buffer. This; // is because the buffer is read from to perform the necessary hashing.; // The CodeSignature section is the last section in the MachO binary and; // contains a hash of all content in the binary before it. Since llvm-objcopy; // has likely modified the target binary, the hash must be regenerated; // entirely. To generate this hash, we must read from the start of the binary; // (HashReadStart) to just before the start of the CodeSignature section; // (HashReadEnd).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOWriter.cpp:668,Security,Hash,HashReadStart,668,"// NOTE: This CodeSignature section behaviour must be kept in sync with that; // performed in LLD's CodeSignatureSection::write /; // CodeSignatureSection::writeHashes. Furthermore, this call must occur only; // after the rest of the binary has already been written to the buffer. This; // is because the buffer is read from to perform the necessary hashing.; // The CodeSignature section is the last section in the MachO binary and; // contains a hash of all content in the binary before it. Since llvm-objcopy; // has likely modified the target binary, the hash must be regenerated; // entirely. To generate this hash, we must read from the start of the binary; // (HashReadStart) to just before the start of the CodeSignature section; // (HashReadEnd).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOWriter.cpp:742,Security,Hash,HashReadEnd,742,"// NOTE: This CodeSignature section behaviour must be kept in sync with that; // performed in LLD's CodeSignatureSection::write /; // CodeSignatureSection::writeHashes. Furthermore, this call must occur only; // after the rest of the binary has already been written to the buffer. This; // is because the buffer is read from to perform the necessary hashing.; // The CodeSignature section is the last section in the MachO binary and; // contains a hash of all content in the binary before it. Since llvm-objcopy; // has likely modified the target binary, the hash must be regenerated; // entirely. To generate this hash, we must read from the start of the binary; // (HashReadStart) to just before the start of the CodeSignature section; // (HashReadEnd).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOWriter.cpp:67,Security,hash,hashes,67,"// The CodeSignature section begins with a header, after which the hashes; // of each page of the binary are written.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOWriter.cpp:13,Security,hash,hashes,13,// Write the hashes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOWriter.cpp:188,Performance,cache,cache,188,"// This is macOS-specific work-around and makes no sense for any; // other host OS. See https://openradar.appspot.com/FB8914231; //; // The macOS kernel maintains a signature-verification cache to; // quickly validate applications at time of execve(2). The trouble; // is that for the kernel creates the cache entry at the time of the; // mmap(2) call, before we have a chance to write either the code to; // sign or the signature header+hashes. The fix is to invalidate; // all cached data associated with the output file, thus discarding; // the bogus prematurely-cached signature.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOWriter.cpp:304,Performance,cache,cache,304,"// This is macOS-specific work-around and makes no sense for any; // other host OS. See https://openradar.appspot.com/FB8914231; //; // The macOS kernel maintains a signature-verification cache to; // quickly validate applications at time of execve(2). The trouble; // is that for the kernel creates the cache entry at the time of the; // mmap(2) call, before we have a chance to write either the code to; // sign or the signature header+hashes. The fix is to invalidate; // all cached data associated with the output file, thus discarding; // the bogus prematurely-cached signature.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOWriter.cpp:479,Performance,cache,cached,479,"// This is macOS-specific work-around and makes no sense for any; // other host OS. See https://openradar.appspot.com/FB8914231; //; // The macOS kernel maintains a signature-verification cache to; // quickly validate applications at time of execve(2). The trouble; // is that for the kernel creates the cache entry at the time of the; // mmap(2) call, before we have a chance to write either the code to; // sign or the signature header+hashes. The fix is to invalidate; // all cached data associated with the output file, thus discarding; // the bogus prematurely-cached signature.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOWriter.cpp:566,Performance,cache,cached,566,"// This is macOS-specific work-around and makes no sense for any; // other host OS. See https://openradar.appspot.com/FB8914231; //; // The macOS kernel maintains a signature-verification cache to; // quickly validate applications at time of execve(2). The trouble; // is that for the kernel creates the cache entry at the time of the; // mmap(2) call, before we have a chance to write either the code to; // sign or the signature header+hashes. The fix is to invalidate; // all cached data associated with the output file, thus discarding; // the bogus prematurely-cached signature.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOWriter.cpp:209,Security,validat,validate,209,"// This is macOS-specific work-around and makes no sense for any; // other host OS. See https://openradar.appspot.com/FB8914231; //; // The macOS kernel maintains a signature-verification cache to; // quickly validate applications at time of execve(2). The trouble; // is that for the kernel creates the cache entry at the time of the; // mmap(2) call, before we have a chance to write either the code to; // sign or the signature header+hashes. The fix is to invalidate; // all cached data associated with the output file, thus discarding; // the bogus prematurely-cached signature.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOWriter.cpp:438,Security,hash,hashes,438,"// This is macOS-specific work-around and makes no sense for any; // other host OS. See https://openradar.appspot.com/FB8914231; //; // The macOS kernel maintains a signature-verification cache to; // quickly validate applications at time of execve(2). The trouble; // is that for the kernel creates the cache entry at the time of the; // mmap(2) call, before we have a chance to write either the code to; // sign or the signature header+hashes. The fix is to invalidate; // all cached data associated with the output file, thus discarding; // the bogus prematurely-cached signature.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/MachO/MachOWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/wasm/WasmWriter.cpp:110,Safety,avoid,avoid,110,"// If we read this section from an object file, use its original size for the; // padding of the LEB value to avoid changing the file size. Otherwise, pad; // out to 5 bytes to make it predictable, and match the behavior of clang.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/wasm/WasmWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/wasm/WasmWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/wasm/WasmWriter.cpp:185,Safety,predict,predictable,185,"// If we read this section from an object file, use its original size for the; // padding of the LEB value to avoid changing the file size. Otherwise, pad; // out to 5 bytes to make it predictable, and match the behavior of clang.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjCopy/wasm/WasmWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjCopy/wasm/WasmWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/Archive.cpp:146,Availability,Error,Error,146,// This gets the raw name from the ArMemHdr->Name field and checks that it is; // valid for the kind of archive. If it is not valid it returns an Error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/Archive.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/Archive.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/Archive.cpp:118,Availability,error,error,118,// This can be called from the ArchiveMemberHeader constructor when the; // archive header is truncated to produce an error message with the name.; // Make sure the name field is not truncated.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/Archive.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/Archive.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/Archive.cpp:124,Integrability,message,message,124,// This can be called from the ArchiveMemberHeader constructor when the; // archive header is truncated to produce an error message with the name.; // Make sure the name field is not truncated.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/Archive.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/Archive.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/Archive.cpp:99,Usability,undo,undocumented,99,"// Some libraries (e.g., arm64rt.lib) from the Windows WDK; // (version 10.0.22000.0) contain this undocumented special member.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/Archive.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/Archive.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/Archive.cpp:10,Usability,simpl,simple,10,// It's a simple name.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/Archive.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/Archive.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/Archive.cpp:105,Availability,avail,available,105,"// If we are pointed to real data, Start is not a nullptr, then there must be; // a non-null Err pointer available to report malformed data on. Only in; // the case sentinel value is being constructed is Err is permitted to be a; // nullptr.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/Archive.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/Archive.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/Archive.cpp:19,Availability,error,error,19,// If there was an error in the construction of the Header; // then just return with the error now set.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/Archive.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/Archive.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/Archive.cpp:89,Availability,error,error,89,// If there was an error in the construction of the Header; // then just return with the error now set.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/Archive.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/Archive.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/Archive.cpp:3,Security,Validat,Validate,3,// Validate EC symbol table.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/Archive.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/Archive.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp:15,Availability,error,error,15,// Squelch the error in case we had a non-object file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp:50,Safety,detect,detect,50,"// If we're adding a bitcode file to the archive, detect the Archive kind; // based on the target triple.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp:15,Availability,error,error,15,// Squelch the error in case this was not a SymbolicFile.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp:25,Availability,error,errors,25,// TODO: Actually report errors helpfully.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp:209,Usability,simpl,simplifies,209,"// ld64 expects the members to be 8-byte aligned for 64-bit content and at; // least 4-byte aligned for 32-bit content. Opt for the larger encoding; // uniformly.; // We do this for all bsd formats because it simplifies aligning members.; // For the big archive format, the symbol table is the last member, so there; // is no need to align.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp:62,Performance,load,loadable,62,"// If the member doesn't have an auxiliary header, it isn't a loadable object; // and so it just needs aligning at the minimum value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp:103,Performance,load,loadable,103,"// If the auxiliary header does not have both MaxAlignOfData and; // MaxAlignOfText field, it is not a loadable shared object file, so align at; // the minimum value. The 'ModuleType' member is located right after; // 'MaxAlignOfData' in the AuxiliaryHeader.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp:44,Performance,load,loader,44,"// If the XCOFF object file does not have a loader section, it is not; // loadable, so align at the minimum value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp:74,Performance,load,loadable,74,"// If the XCOFF object file does not have a loader section, it is not; // loadable, so align at the minimum value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp:22,Performance,load,loadable,22,"// The content of the loadable member file needs to be aligned at MAX(maximum; // alignment of .text, maximum alignment of .data) if there are both fields.; // If the desired alignment is > PAGESIZE, 32-bit members are aligned on a; // word boundary, while 64-bit members are aligned on a PAGESIZE(2^12=4096); // boundary.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp:209,Performance,load,loaded,209,// AIX big archives may contain shared object members. The AIX OS requires these; // members to be aligned if they are 64-bit and recommends it for 32-bit; // members. This ensures that when these members are loaded they are aligned in; // memory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp:110,Safety,abort,abort,110,"// We don't write a symbol table on an archive with no members -- except on; // Darwin, where the linker will abort unless the archive has a symbol table.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp:512,Performance,load,loaded,512,"// UniqueTimestamps is a special case to improve debugging on Darwin:; //; // The Darwin linker does not link debug info into the final; // binary. Instead, it emits entries of type N_OSO in the output; // binary's symbol table, containing references to the linked-in; // object files. Using that reference, the debugger can read the; // debug data directly from the object files. Alternatively, an; // invocation of 'dsymutil' will link the debug data from the object; // files into a dSYM bundle, which can be loaded by the debugger,; // instead of the object files.; //; // For an object file, the N_OSO entries contain the absolute path; // path to the file, and the file's timestamp. For an object; // included in an archive, the path is formatted like; // ""/absolute/path/to/archive.a(member.o)"", and the timestamp is the; // archive member's timestamp, rather than the archive's timestamp.; //; // However, this doesn't always uniquely identify an object within; // an archive -- an archive file can have multiple entries with the; // same filename. (This will happen commonly if the original object; // files started in different directories.) The only way they get; // distinguished, then, is via the timestamp. But this process is; // unable to find the correct object file in the archive when there; // are two files of the same name and timestamp.; //; // Additionally, timestamp==0 is treated specially, and causes the; // timestamp to be ignored as a match criteria.; //; // That will ""usually"" work out okay when creating an archive not in; // deterministic timestamp mode, because the objects will probably; // have been created at different timestamps.; //; // To ameliorate this problem, in deterministic archive mode (which; // is the default), on Darwin we will emit a unique non-zero; // timestamp for each entry with a duplicated name. This is still; // deterministic: the only thing affecting that timestamp is the; // order of the files in the resultant archive.; //; // See al",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp:20,Safety,detect,detect,20,// We would like to detect if we need to switch to a 64-bit symbol table.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp:347,Modifiability,variab,variable,347,// The SYM64 format is used when an archive's member offsets are larger than; // 32-bits can hold. The need for this shift in format is detected by; // writeArchive. To test this we need to generate a file with a member that; // has an offset larger than 32-bits but this demands a very slow test. To; // speed the test up we use this environment variable to pretend like the; // cutoff happens before 32-bits and instead happens at some much smaller; // value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp:136,Safety,detect,detected,136,// The SYM64 format is used when an archive's member offsets are larger than; // 32-bits can hold. The need for this shift in format is detected by; // writeArchive. To test this we need to generate a file with a member that; // has an offset larger than 32-bits but this demands a very slow test. To; // speed the test up we use this environment variable to pretend like the; // cutoff happens before 32-bits and instead happens at some much smaller; // value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp:169,Testability,test,test,169,// The SYM64 format is used when an archive's member offsets are larger than; // 32-bits can hold. The need for this shift in format is detected by; // writeArchive. To test this we need to generate a file with a member that; // has an offset larger than 32-bits but this demands a very slow test. To; // speed the test up we use this environment variable to pretend like the; // cutoff happens before 32-bits and instead happens at some much smaller; // value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp:292,Testability,test,test,292,// The SYM64 format is used when an archive's member offsets are larger than; // 32-bits can hold. The need for this shift in format is detected by; // writeArchive. To test this we need to generate a file with a member that; // has an offset larger than 32-bits but this demands a very slow test. To; // speed the test up we use this environment variable to pretend like the; // cutoff happens before 32-bits and instead happens at some much smaller; // value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp:315,Testability,test,test,315,// The SYM64 format is used when an archive's member offsets are larger than; // 32-bits can hold. The need for this shift in format is detected by; // writeArchive. To test this we need to generate a file with a member that; // has an offset larger than 32-bits but this demands a very slow test. To; // speed the test up we use this environment variable to pretend like the; // cutoff happens before 32-bits and instead happens at some much smaller; // value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ArchiveWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/Binary.cpp:35,Integrability,interface,interface,35,// PDB does not support the Binary interface.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/Binary.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/Binary.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/COFFImportFile.cpp:90,Modifiability,refactor,refactoring,90,// TODO: Name.Offset.Offset here and in the all similar places below; // suggests a names refactoring. Maybe StringTableOffset.Value?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/COFFImportFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/COFFImportFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/COFFModuleDefinition.cpp:36,Usability,Simpl,Simple,36,"//===--- COFFModuleDefinition.cpp - Simple DEF parser ---------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Windows-specific.; // A parser for the module-definition file (.def file).; //; // The format of module-definition files are described in this document:; // https://msdn.microsoft.com/en-us/library/28d6s79h.aspx; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/COFFModuleDefinition.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/COFFModuleDefinition.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/COFFObjectFile.cpp:101,Availability,error,error,101,"// Sets Obj unless any bytes in [addr, addr + size) fall outsize of m.; // Returns unexpected_eof if error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/COFFObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/COFFObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/COFFObjectFile.cpp:52,Energy Efficiency,power,power-of-,52,// MSVC/link.exe seems to align symbols to the next-power-of-2; // up to 32 bytes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/COFFObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/COFFObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/COFFObjectFile.cpp:20,Availability,error,error,20,// TODO: Report the error message properly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/COFFObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/COFFObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/COFFObjectFile.cpp:26,Integrability,message,message,26,// TODO: Report the error message properly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/COFFObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/COFFObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/COFFObjectFile.cpp:392,Availability,error,error,392,"// A table/directory entry can be pointing to somewhere in a stripped; // section, in an object that went through `objcopy --only-keep-debug`.; // In this case we don't want to cause the parsing of the object file to; // fail, otherwise it will be impossible to use this object as debug info; // in LLDB. Return SectionStrippedError here so that; // COFFObjectFile::initialize can ignore the error.; // Somewhat common binaries may have RVAs pointing outside of the; // provided raw data. Instead of rejecting the binaries, just; // treat the section as stripped for these purposes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/COFFObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/COFFObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/COFFObjectFile.cpp:3,Security,Validat,Validate,3,// Validate CHPE metadata,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/COFFObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/COFFObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/COFFObjectFile.cpp:46,Testability,stub,stub,46,"// PE/COFF, seek through MS-DOS compatibility stub and 4-byte; // PE signature to find 'normal' COFF header.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/COFFObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/COFFObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/COFFObjectFile.cpp:63,Availability,error,error,63,// The prior checkSize call may have failed. This isn't a hard error; // because we were just trying to sniff out bigobj.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/COFFObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/COFFObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/COFFObjectFile.cpp:3,Availability,Recover,Recover,3,// Recover from errors reading the symbol table.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/COFFObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/COFFObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/COFFObjectFile.cpp:16,Availability,error,errors,16,// Recover from errors reading the symbol table.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/COFFObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/COFFObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/COFFObjectFile.cpp:3,Safety,Recover,Recover,3,// Recover from errors reading the symbol table.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/COFFObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/COFFObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/COFFObjectFile.cpp:72,Availability,error,error,72,"// Perhaps getting the section of a reserved section index should be an error,; // but callers rely on this to return null.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/COFFObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/COFFObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/COFFObjectFile.cpp:60,Integrability,depend,depending,60,"// SizeOfRawData and VirtualSize change what they represent depending on; // whether or not we have an executable image.; //; // For object files, SizeOfRawData contains the size of section's data;; // VirtualSize should be zero but isn't due to buggy COFF writers.; //; // For executables, SizeOfRawData *must* be a multiple of FileAlignment; the; // actual section size is in VirtualSize. It is possible for VirtualSize to; // be greater than SizeOfRawData; the contents past that point should be; // considered to be zero.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/COFFObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/COFFObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/COFFObjectFile.cpp:17,Availability,error,errors,17,// FIXME: Handle errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/COFFObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/COFFObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/COFFObjectFile.cpp:17,Availability,error,errors,17,// FIXME: Handle errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/COFFObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/COFFObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/DXContainer.cpp:15,Security,validat,validated,15,"// Offsets are validated during parsing, so all offsets in the container are; // valid and contain enough readable data to read a header.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/DXContainer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/DXContainer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/DXContainer.cpp:3,Safety,Detect,Detect,3,// Detect the PSVVersion by looking at the size field.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/DXContainer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/DXContainer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/DXContainer.cpp:14,Availability,mask,mask,14,// The vector mask is one bit per component and 4 components per vector.; // We can compute the number of dwords required by rounding up to the next; // multiple of 8.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/DXContainer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/DXContainer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/DXContainer.cpp:22,Deployability,Patch,Patch,22,// Hull shader: Input/Patch mapping table,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/DXContainer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/DXContainer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/DXContainer.cpp:18,Deployability,Patch,Patch,18,// Domain Shader: Patch/Output mapping table,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/DXContainer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/DXContainer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ELF.cpp:1383,Usability,clear,clear,1383,"// This function decodes the contents of an SHT_RELR packed relocation; // section.; //; // Proposal for adding SHT_RELR sections to generic-abi is here:; // https://groups.google.com/forum/#!topic/generic-abi/bX460iggiKg; //; // The encoded sequence of Elf64_Relr entries in a SHT_RELR section looks; // like [ AAAAAAAA BBBBBBB1 BBBBBBB1 ... AAAAAAAA BBBBBB1 ... ]; //; // i.e. start with an address, followed by any number of bitmaps. The address; // entry encodes 1 relocation. The subsequent bitmap entries encode up to 63; // relocations each, at subsequent offsets following the last address entry.; //; // The bitmap entries must have 1 in the least significant bit. The assumption; // here is that an address cannot have 1 in lsb. Odd addresses are not; // supported.; //; // Excluding the least significant bit in the bitmap, each non-zero bit in; // the bitmap represents a relocation to be applied to a corresponding machine; // word that follows the base address word. The second least significant bit; // represents the machine word immediately following the initial address, and; // each bit that follows represents the next word, in linear order. As such,; // a single bitmap can encode up to 31 relocations in a 32-bit object, and; // 63 relocations in a 64-bit object.; //; // This encoding has a couple of interesting properties:; // 1. Looking at any entry, it is clear whether it's an address or a bitmap:; // even means address, odd means bitmap.; // 2. Just a simple list of addresses is a valid encoding.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/ELF.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ELF.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ELF.cpp:1482,Usability,simpl,simple,1482,"// This function decodes the contents of an SHT_RELR packed relocation; // section.; //; // Proposal for adding SHT_RELR sections to generic-abi is here:; // https://groups.google.com/forum/#!topic/generic-abi/bX460iggiKg; //; // The encoded sequence of Elf64_Relr entries in a SHT_RELR section looks; // like [ AAAAAAAA BBBBBBB1 BBBBBBB1 ... AAAAAAAA BBBBBB1 ... ]; //; // i.e. start with an address, followed by any number of bitmaps. The address; // entry encodes 1 relocation. The subsequent bitmap entries encode up to 63; // relocations each, at subsequent offsets following the last address entry.; //; // The bitmap entries must have 1 in the least significant bit. The assumption; // here is that an address cannot have 1 in lsb. Odd addresses are not; // supported.; //; // Excluding the least significant bit in the bitmap, each non-zero bit in; // the bitmap represents a relocation to be applied to a corresponding machine; // word that follows the base address word. The second least significant bit; // represents the machine word immediately following the initial address, and; // each bit that follows represents the next word, in linear order. As such,; // a single bitmap can encode up to 31 relocations in a 32-bit object, and; // 63 relocations in a 64-bit object.; //; // This encoding has a couple of interesting properties:; // 1. Looking at any entry, it is clear whether it's an address or a bitmap:; // even means address, odd means bitmap.; // 2. Just a simple list of addresses is a valid encoding.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/ELF.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ELF.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ELF.cpp:221,Availability,error,error,221,// Helper to extract and decode the next ULEB128 value as unsigned int.; // Returns zero and sets ULEBSizeErr if the ULEB128 value exceeds the unsigned; // int limit.; // Also returns zero if ULEBSizeErr is already in an error state.; // ULEBSizeErr is an out variable if an error occurs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/ELF.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ELF.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ELF.cpp:275,Availability,error,error,275,// Helper to extract and decode the next ULEB128 value as unsigned int.; // Returns zero and sets ULEBSizeErr if the ULEB128 value exceeds the unsigned; // int limit.; // Also returns zero if ULEBSizeErr is already in an error state.; // ULEBSizeErr is an out variable if an error occurs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/ELF.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ELF.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ELF.cpp:260,Modifiability,variab,variable,260,// Helper to extract and decode the next ULEB128 value as unsigned int.; // Returns zero and sets ULEBSizeErr if the ULEB128 value exceeds the unsigned; // int limit.; // Also returns zero if ULEBSizeErr is already in an error state.; // ULEBSizeErr is an out variable if an error occurs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/ELF.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ELF.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ELF.cpp:24,Availability,error,error,24,"// Either Cur is in the error state, or we have an error in ULEBSizeErr or; // MetadataDecodeErr (but not both), but we join all errors here to be safe.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/ELF.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ELF.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ELF.cpp:51,Availability,error,error,51,"// Either Cur is in the error state, or we have an error in ULEBSizeErr or; // MetadataDecodeErr (but not both), but we join all errors here to be safe.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/ELF.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ELF.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ELF.cpp:129,Availability,error,errors,129,"// Either Cur is in the error state, or we have an error in ULEBSizeErr or; // MetadataDecodeErr (but not both), but we join all errors here to be safe.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/ELF.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ELF.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ELF.cpp:147,Safety,safe,safe,147,"// Either Cur is in the error state, or we have an error in ULEBSizeErr or; // MetadataDecodeErr (but not both), but we join all errors here to be safe.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/ELF.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ELF.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ELF.cpp:31,Availability,error,error,31,// remove new analyses when an error occurs,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/ELF.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ELF.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ELFObjectFile.cpp:18,Availability,Error,Error,18,// TODO Propagate Error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/ELFObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ELFObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/Error.cpp:7,Availability,Error,Error,7,"//===- Error.cpp - system_error extensions for Object -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This defines a new error_category for the Object library.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/Error.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/Error.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/Error.cpp:69,Availability,Error,Error,69,"// FIXME: This class is only here to support the transition to llvm::Error. It; // will be removed once this transition is complete. Clients should prefer to; // deal with the Error value directly, rather than converting to error_code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/Error.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/Error.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/Error.cpp:176,Availability,Error,Error,176,"// FIXME: This class is only here to support the transition to llvm::Error. It; // will be removed once this transition is complete. Clients should prefer to; // deal with the Error value directly, rather than converting to error_code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/Error.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/Error.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/FaultMapParser.cpp:29,Availability,Fault,FaultMapParser,29,"//===----------------------- FaultMapParser.cpp ---------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/FaultMapParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/FaultMapParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/IRObjectFile.cpp:67,Security,access,access,67,"// Each module must have the same target triple, so we arbitrarily access the; // first one.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/IRObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/IRObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/IRSymtab.cpp:20,Modifiability,variab,variables,20,"// There are global variables, so put it here instead of in; // RuntimeLibcalls.def.; // TODO: Are there similar such variables?",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/IRSymtab.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/IRSymtab.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/IRSymtab.cpp:118,Modifiability,variab,variables,118,"// There are global variables, so put it here instead of in; // RuntimeLibcalls.def.; // TODO: Are there similar such variables?",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/IRSymtab.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/IRSymtab.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/IRSymtab.cpp:49,Deployability,upgrade,upgrade,49,// Allows for testing of the irsymtab writer and upgrade mechanism. This; // environment variable should not be set by users.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/IRSymtab.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/IRSymtab.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/IRSymtab.cpp:89,Modifiability,variab,variable,89,// Allows for testing of the irsymtab writer and upgrade mechanism. This; // environment variable should not be set by users.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/IRSymtab.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/IRSymtab.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/IRSymtab.cpp:14,Testability,test,testing,14,// Allows for testing of the irsymtab writer and upgrade mechanism. This; // environment variable should not be set by users.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/IRSymtab.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/IRSymtab.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/IRSymtab.cpp:3,Deployability,Upgrade,Upgrade,3,// Upgrade a vector of bitcode modules created by an old version of LLVM by; // creating an irsymtab for them in the current format.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/IRSymtab.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/IRSymtab.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp:492,Integrability,wrap,wrapper,492,"//===- MachOObjectFile.cpp - Mach-O object file binding -------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the MachOObjectFile class, which binds the MachOObject; // class to the generic ObjectFile wrapper.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp:38,Performance,load,load,38,"// Parses LC_SEGMENT or LC_SEGMENT_64 load command, adds addresses of all; // sections to \param Sections, and optionally sets; // \param IsPageZeroSegment to true.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp:92,Performance,load,load,92,// Make sure there is a null between the starting offset of the name and; // the end of the load command.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp:92,Performance,load,load,92,// Make sure there is a null between the starting offset of the name and; // the end of the load command.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp:92,Performance,load,load,92,// Make sure there is a null between the starting offset of the path and; // the end of the load command.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp:92,Performance,load,load,92,// Make sure there is a null between the starting offset of the path and; // the end of the load command.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp:165,Availability,error,error,165,// Returns true if the libObject code does not support the load command and its; // contents. The cmd value it is treated as an unknown load command but with; // an error message that says the cmd value is obsolete.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp:171,Integrability,message,message,171,// Returns true if the libObject code does not support the load command and its; // contents. The cmd value it is treated as an unknown load command but with; // an error message that says the cmd value is obsolete.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp:59,Performance,load,load,59,// Returns true if the libObject code does not support the load command and its; // contents. The cmd value it is treated as an unknown load command but with; // an error message that says the cmd value is obsolete.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp:136,Performance,load,load,136,// Returns true if the libObject code does not support the load command and its; // contents. The cmd value it is treated as an unknown load command but with; // an error message that says the cmd value is obsolete.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp:20,Availability,error,error,20,// TODO: generate a error for unknown load commands by default. But still; // need work out an approach to allow or not allow unknown values like this; // as an option for some uses like lldb.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp:38,Performance,load,load,38,// TODO: generate a error for unknown load commands by default. But still; // need work out an approach to allow or not allow unknown values like this; // as an option for some uses like lldb.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp:246,Modifiability,extend,extend,246,// In the case if a malformed Mach-O file where the section offset is past; // the end of the file or some part of the section size is past the end of; // the file return a size of zero or a size that covers the rest of the file; // but does not extend past the end of the file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp:20,Availability,error,error,20,// TODO: Report the error message properly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp:26,Integrability,message,message,26,// TODO: Report the error message properly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp:1176,Availability,reliab,reliably,1176,"//; // guessLibraryShortName() is passed a name of a dynamic library and returns a; // guess on what the short name is. Then name is returned as a substring of the; // StringRef Name passed in. The name of the dynamic library is recognized as; // a framework if it has one of the two following forms:; // Foo.framework/Versions/A/Foo; // Foo.framework/Foo; // Where A and Foo can be any string. And may contain a trailing suffix; // starting with an underbar. If the Name is recognized as a framework then; // isFramework is set to true else it is set to false. If the Name has a; // suffix then Suffix is set to the substring in Name that contains the suffix; // else it is set to a NULL StringRef.; //; // The Name of the dynamic library is recognized as a library name if it has; // one of the two following forms:; // libFoo.A.dylib; // libFoo.dylib; //; // The library may have a suffix trailing the name Foo of the form:; // libFoo_profile.A.dylib; // libFoo_profile.dylib; // These dyld image suffixes are separated from the short name by a '_'; // character. Because the '_' character is commonly used to separate words in; // filenames guessLibraryShortName() cannot reliably separate a dylib's short; // name from an arbitrary image suffix; imagine if both the short name and the; // suffix contains an '_' character! To better deal with this ambiguity,; // guessLibraryShortName() will recognize only ""_debug"" and ""_profile"" as valid; // Suffix values. Calling code needs to be tolerant of guessLibraryShortName(); // guessing incorrectly.; //; // The Name of the dynamic library is also recognized as a library name if it; // has the following form:; // Foo.qtx; //; // If the Name of the dynamic library is none of the forms above then a NULL; // StringRef is returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp:1489,Availability,toler,tolerant,1489,"//; // guessLibraryShortName() is passed a name of a dynamic library and returns a; // guess on what the short name is. Then name is returned as a substring of the; // StringRef Name passed in. The name of the dynamic library is recognized as; // a framework if it has one of the two following forms:; // Foo.framework/Versions/A/Foo; // Foo.framework/Foo; // Where A and Foo can be any string. And may contain a trailing suffix; // starting with an underbar. If the Name is recognized as a framework then; // isFramework is set to true else it is set to false. If the Name has a; // suffix then Suffix is set to the substring in Name that contains the suffix; // else it is set to a NULL StringRef.; //; // The Name of the dynamic library is recognized as a library name if it has; // one of the two following forms:; // libFoo.A.dylib; // libFoo.dylib; //; // The library may have a suffix trailing the name Foo of the form:; // libFoo_profile.A.dylib; // libFoo_profile.dylib; // These dyld image suffixes are separated from the short name by a '_'; // character. Because the '_' character is commonly used to separate words in; // filenames guessLibraryShortName() cannot reliably separate a dylib's short; // name from an arbitrary image suffix; imagine if both the short name and the; // suffix contains an '_' character! To better deal with this ambiguity,; // guessLibraryShortName() will recognize only ""_debug"" and ""_profile"" as valid; // Suffix values. Calling code needs to be tolerant of guessLibraryShortName(); // guessing incorrectly.; //; // The Name of the dynamic library is also recognized as a library name if it; // has the following form:; // Foo.qtx; //; // If the Name of the dynamic library is none of the forms above then a NULL; // StringRef is returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp:10,Performance,cache,cache,10,// If the cache of LibrariesShortNames is not built up do that first for; // all the Libraries.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp:579,Availability,down,down,579,"// We have a trie data structure and need a way to walk it that is compatible; // with the C++ iterator model. The solution is a non-recursive depth first; // traversal where the iterator contains a stack of parent nodes along with a; // string that is the accumulation of all edge strings along the parent chain; // to this point.; //; // There is one ""export"" node for each exported symbol. But because some; // symbols may be a prefix of another symbol (e.g. _dup and _dup2), an export; // node may have child nodes too.; //; // The algorithm for moveNext() is to keep moving down the leftmost unvisited; // child until hitting a node with no children (which is an export node or; // else the trie is malformed). On the way down, each node is pushed on the; // stack ivar. If there is no more ways down, it pops up one and tries to go; // down a sibling path until a childless node is reached.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp:727,Availability,down,down,727,"// We have a trie data structure and need a way to walk it that is compatible; // with the C++ iterator model. The solution is a non-recursive depth first; // traversal where the iterator contains a stack of parent nodes along with a; // string that is the accumulation of all edge strings along the parent chain; // to this point.; //; // There is one ""export"" node for each exported symbol. But because some; // symbols may be a prefix of another symbol (e.g. _dup and _dup2), an export; // node may have child nodes too.; //; // The algorithm for moveNext() is to keep moving down the leftmost unvisited; // child until hitting a node with no children (which is an export node or; // else the trie is malformed). On the way down, each node is pushed on the; // stack ivar. If there is no more ways down, it pops up one and tries to go; // down a sibling path until a childless node is reached.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp:801,Availability,down,down,801,"// We have a trie data structure and need a way to walk it that is compatible; // with the C++ iterator model. The solution is a non-recursive depth first; // traversal where the iterator contains a stack of parent nodes along with a; // string that is the accumulation of all edge strings along the parent chain; // to this point.; //; // There is one ""export"" node for each exported symbol. But because some; // symbols may be a prefix of another symbol (e.g. _dup and _dup2), an export; // node may have child nodes too.; //; // The algorithm for moveNext() is to keep moving down the leftmost unvisited; // child until hitting a node with no children (which is an export node or; // else the trie is malformed). On the way down, each node is pushed on the; // stack ivar. If there is no more ways down, it pops up one and tries to go; // down a sibling path until a childless node is reached.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp:842,Availability,down,down,842,"// We have a trie data structure and need a way to walk it that is compatible; // with the C++ iterator model. The solution is a non-recursive depth first; // traversal where the iterator contains a stack of parent nodes along with a; // string that is the accumulation of all edge strings along the parent chain; // to this point.; //; // There is one ""export"" node for each exported symbol. But because some; // symbols may be a prefix of another symbol (e.g. _dup and _dup2), an export; // node may have child nodes too.; //; // The algorithm for moveNext() is to keep moving down the leftmost unvisited; // child until hitting a node with no children (which is an export node or; // else the trie is malformed). On the way down, each node is pushed on the; // stack ivar. If there is no more ways down, it pops up one and tries to go; // down a sibling path until a childless node is reached.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp:3,Performance,Cache,Cache,3,// Cache the vmaddress of __TEXT,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp:31,Availability,error,error,31,"// Note, this is not really an error until the next bind but make no sense; // for a BIND_OPCODE_DO_BIND_ADD_ADDR_ULEB to not be followed by another; // bind operation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp:99,Security,validat,validate,99,"// For use with a SegIndex, SegOffset, and PointerSize triple in; // MachOBindEntry::moveNext() to validate a MachOBindEntry or MachORebaseEntry.; //; // Given a SegIndex, SegOffset, and PointerSize, verify a valid section exists; // that fully contains a pointer at that location. Multiple fixups in a bind; // (such as with the BIND_OPCODE_DO_BIND_ULEB_TIMES_SKIPPING_ULEB opcode) can; // be tested via the Count and Skip parameters.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp:394,Testability,test,tested,394,"// For use with a SegIndex, SegOffset, and PointerSize triple in; // MachOBindEntry::moveNext() to validate a MachOBindEntry or MachORebaseEntry.; //; // Given a SegIndex, SegOffset, and PointerSize, verify a valid section exists; // that fully contains a pointer at that location. Multiple fixups in a bind; // (such as with the BIND_OPCODE_DO_BIND_ULEB_TIMES_SKIPPING_ULEB opcode) can; // be tested via the Count and Skip parameters.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp:41,Performance,load,load,41,// If there is no SymtabLoadCmd return a load command with zero'ed fields.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp:43,Performance,load,load,43,// If there is no DysymtabLoadCmd return a load command with zero'ed fields.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp:45,Performance,load,load,45,// If there is no DataInCodeLoadCmd return a load command with zero'ed fields.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp:47,Performance,load,load,47,// If there is no LinkOptHintsLoadCmd return a load command with zero'ed; // fields.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp:3,Performance,Load,Load,3,// Load the dyld chained fixups load command.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp:32,Performance,load,load,32,// Load the dyld chained fixups load command.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp:135,Availability,error,error,135,"// If the load command is present but the data offset has been zeroed out,; // as is the case for dylib stubs, return std::nullopt (no error).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp:10,Performance,load,load,10,"// If the load command is present but the data offset has been zeroed out,; // as is the case for dylib stubs, return std::nullopt (no error).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp:104,Testability,stub,stubs,104,"// If the load command is present but the data offset has been zeroed out,; // as is the case for dylib stubs, return std::nullopt (no error).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp:3,Performance,Load,Load,3,// Load the dyld chained fixups header.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp:38,Performance,Load,Load,38,// Validate the image format.; //; // Load the image starts.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp:3,Security,Validat,Validate,3,// Validate the image format.; //; // Load the image starts.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp:124,Modifiability,extend,extend,124,"// The special library ordinals have a negative value, but they are encoded in; // an unsigned bitfield, so we need to sign extend the value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/MachOObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/Minidump.cpp:3,Deployability,Update,Update,3,"// Update the directory map, checking for duplicate stream types.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/Minidump.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/Minidump.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ModuleSymbolTable.cpp:461,Security,access,access,461,"//===- ModuleSymbolTable.cpp - symbol table for in-memory IR --------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This class represents a symbol table built from in-memory IR. It provides; // access to GlobalValues and should only be used if such access is required; // (e.g. in the LTO implementation).; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/ModuleSymbolTable.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ModuleSymbolTable.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ModuleSymbolTable.cpp:516,Security,access,access,516,"//===- ModuleSymbolTable.cpp - symbol table for in-memory IR --------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This class represents a symbol table built from in-memory IR. It provides; // access to GlobalValues and should only be used if such access is required; // (e.g. in the LTO implementation).; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/ModuleSymbolTable.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ModuleSymbolTable.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ModuleSymbolTable.cpp:168,Availability,error,errors,168,"// This function may be called twice, once for ModuleSummaryIndexAnalysis and; // the other when writing the IR symbol table. If parsing inline assembly has; // caused errors in the first run, suppress the second run.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/ModuleSymbolTable.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ModuleSymbolTable.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/Object.cpp:25,Availability,error,errors,25,// TODO: Actually report errors helpfully.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/Object.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/Object.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/Object.cpp:14,Security,access,accessors,14,// SectionRef accessors,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/Object.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/Object.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/Object.cpp:13,Security,access,accessors,13,// SymbolRef accessors,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/Object.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/Object.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/Object.cpp:17,Security,access,accessors,17,// RelocationRef accessors,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/Object.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/Object.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ObjectFile.cpp:25,Availability,error,errors,25,// TODO: Actually report errors helpfully.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/ObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ObjectFile.cpp:19,Availability,error,error,19,// TODO: Test this error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/ObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ObjectFile.cpp:9,Testability,Test,Test,9,// TODO: Test this error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/ObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/ObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/OffloadBinary.cpp:29,Integrability,wrap,wrapping,29,// Make sure the image we're wrapping around is aligned as well.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/OffloadBinary.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/OffloadBinary.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/RecordStreamer.cpp:11,Safety,detect,detected,11,// Set the detected binding on each alias with this aliasee.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/RecordStreamer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/RecordStreamer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/RecordStreamer.cpp:23,Integrability,Depend,Depending,23,"// TODO: Handle ""@@@"". Depending on SymbolAttribute value it needs to be; // converted into @ or @@.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/RecordStreamer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/RecordStreamer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/RecordStreamer.h:65,Deployability,update,update,65,"// Map of aliases created by .symver directives, saved so we can update; // their symbol binding after parsing complete. This maps from each; // aliasee to its list of aliases.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/RecordStreamer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/RecordStreamer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/SymbolicFile.cpp:26,Integrability,Interface,Interface,26,"//===- SymbolicFile.cpp - Interface that only provides symbols ------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines a file format independent SymbolicFile class.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/SymbolicFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/SymbolicFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/SymbolSize.cpp:25,Availability,error,errors,25,// TODO: Actually report errors helpfully.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/SymbolSize.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/SymbolSize.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/SymbolSize.cpp:34,Deployability,update,update,34,"// If the next pointer is behind, update it to the next symbol.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/SymbolSize.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/SymbolSize.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/TapiFile.cpp:433,Testability,Stub,Stub,433,"//===- TapiFile.cpp -------------------------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the Text-based Dynamcic Library Stub format.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/TapiFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/TapiFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/TapiUniversal.cpp:432,Testability,Stub,Stub,432,"//===- TapiUniversal.cpp --------------------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the Text-based Dynamic Library Stub format.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/TapiUniversal.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/TapiUniversal.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/WasmObjectFile.cpp:3,Usability,Clear,Clear,3,// Clear out any symbol information that was derived from the exports; // section.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/WasmObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/WasmObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/WasmObjectFile.cpp:37,Safety,avoid,avoid,37,// Keep track of completed checks to avoid repeating work,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/WasmObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/WasmObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/WindowsResource.cpp:121,Availability,error,error,121,"// MinGW specific. Remove default manifests (with language zero) if there are; // other manifests present, and report an error if there are more than one; // manifest with a non-zero language code.; // GCC has the concept of a default manifest resource object, which gets; // linked in implicitly if present. This default manifest has got language; // id zero, and should be dropped silently if there's another manifest present.; // If the user resources surprisignly had a manifest with language id zero,; // we should also ignore the duplicate default manifest.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/WindowsResource.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/WindowsResource.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/WindowsResource.cpp:16,Availability,down,down,16,"// If we're now down to one manifest, all is good.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/WindowsResource.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/WindowsResource.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/WindowsResource.cpp:90,Availability,error,error,90,// Check if the .res file contains no entries. In this case we don't have; // to throw an error but can rather just return without parsing anything.; // This applies for files which have a valid PE header magic and the; // mandatory empty null resource entry. Files which do not fit this; // criteria would have already been filtered out by; // WindowsResource::createWindowsResource().,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/WindowsResource.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/WindowsResource.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/XCOFFObjectFile.cpp:226,Availability,error,error,226,"// The byte offset is relative to the start of the string table.; // A byte offset value of 0 is a null or zero-length symbol; // name. A byte offset in the range 1 to 3 (inclusive) points into the length; // field; as a soft-error recovery mechanism, we treat such cases as having an; // offset of 0.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/XCOFFObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/XCOFFObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/XCOFFObjectFile.cpp:232,Availability,recover,recovery,232,"// The byte offset is relative to the start of the string table.; // A byte offset value of 0 is a null or zero-length symbol; // name. A byte offset in the range 1 to 3 (inclusive) points into the length; // field; as a soft-error recovery mechanism, we treat such cases as having an; // offset of 0.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/XCOFFObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/XCOFFObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/XCOFFObjectFile.cpp:232,Safety,recover,recovery,232,"// The byte offset is relative to the start of the string table.; // A byte offset value of 0 is a null or zero-length symbol; // name. A byte offset in the range 1 to 3 (inclusive) points into the length; // field; as a soft-error recovery mechanism, we treat such cases as having an; // offset of 0.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/XCOFFObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/XCOFFObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/XCOFFObjectFile.cpp:20,Availability,error,error,20,// TODO: report the error up the stack.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/XCOFFObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/XCOFFObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/XCOFFObjectFile.cpp:20,Availability,error,error,20,// TODO: report the error up the stack.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/XCOFFObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/XCOFFObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/XCOFFObjectFile.cpp:24,Availability,failure,failure,24,// Avoid ternary due to failure to convert the ubig32_t value to a unit64_t; // with MSVC.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/XCOFFObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/XCOFFObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/XCOFFObjectFile.cpp:3,Safety,Avoid,Avoid,3,// Avoid ternary due to failure to convert the ubig32_t value to a unit64_t; // with MSVC.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/XCOFFObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/XCOFFObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/XCOFFObjectFile.cpp:24,Availability,failure,failure,24,// Avoid ternary due to failure to convert the ubig32_t value to a unit64_t; // with MSVC.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/XCOFFObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/XCOFFObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/XCOFFObjectFile.cpp:3,Safety,Avoid,Avoid,3,// Avoid ternary due to failure to convert the ubig32_t value to a unit64_t; // with MSVC.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/XCOFFObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/XCOFFObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/XCOFFObjectFile.cpp:24,Availability,error,error,24,// No section is not an error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/XCOFFObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/XCOFFObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/XCOFFObjectFile.cpp:20,Availability,error,error,20,// TODO: report the error up the stack.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/XCOFFObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/XCOFFObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/XCOFFObjectFile.cpp:20,Availability,error,error,20,// TODO: report the error up the stack.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/XCOFFObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/XCOFFObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/XCOFFObjectFile.cpp:20,Availability,error,error,20,// TODO: report the error up the stack.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/XCOFFObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/XCOFFObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/XCOFFObjectFile.cpp:20,Availability,error,error,20,// TODO: report the error up the stack.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/XCOFFObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/XCOFFObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/XCOFFObjectFile.cpp:20,Availability,error,error,20,// TODO: report the error up the stack.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/XCOFFObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/XCOFFObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/XCOFFObjectFile.cpp:146,Availability,error,error,146,"// If there is a string table, then the buffer must contain at least 4 bytes; // for the string table's size. Not having a string table is not an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Object/XCOFFObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Object/XCOFFObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/CodeViewYAMLDebugSections.cpp:20,Security,Checksum,Checksums,20,// String Table and Checksums subsections don't use the allocator.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/CodeViewYAMLDebugSections.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/CodeViewYAMLDebugSections.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/CodeViewYAMLDebugSections.cpp:21,Security,checksum,checksums,21,"// It's possible for checksums and strings to even appear in different debug$S; // sections, so we have to make this a stateful function that can build up; // the strings and checksums field over multiple iterations.; // File Checksums require the string table, but may become before it, so we; // have to scan for strings first, then scan for checksums again from the; // beginning.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/CodeViewYAMLDebugSections.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/CodeViewYAMLDebugSections.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/CodeViewYAMLDebugSections.cpp:175,Security,checksum,checksums,175,"// It's possible for checksums and strings to even appear in different debug$S; // sections, so we have to make this a stateful function that can build up; // the strings and checksums field over multiple iterations.; // File Checksums require the string table, but may become before it, so we; // have to scan for strings first, then scan for checksums again from the; // beginning.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/CodeViewYAMLDebugSections.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/CodeViewYAMLDebugSections.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/CodeViewYAMLDebugSections.cpp:226,Security,Checksum,Checksums,226,"// It's possible for checksums and strings to even appear in different debug$S; // sections, so we have to make this a stateful function that can build up; // the strings and checksums field over multiple iterations.; // File Checksums require the string table, but may become before it, so we; // have to scan for strings first, then scan for checksums again from the; // beginning.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/CodeViewYAMLDebugSections.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/CodeViewYAMLDebugSections.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/CodeViewYAMLDebugSections.cpp:344,Security,checksum,checksums,344,"// It's possible for checksums and strings to even appear in different debug$S; // sections, so we have to make this a stateful function that can build up; // the strings and checksums field over multiple iterations.; // File Checksums require the string table, but may become before it, so we; // have to scan for strings first, then scan for checksums again from the; // beginning.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/CodeViewYAMLDebugSections.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/CodeViewYAMLDebugSections.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/CodeViewYAMLTypeHashing.cpp:58,Security,hash,hashing,58,"//===- CodeViewYAMLTypeHashing.cpp - CodeView YAMLIO type hashing ---------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines classes for handling the YAML representation of CodeView; // Debug Info.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/CodeViewYAMLTypeHashing.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/CodeViewYAMLTypeHashing.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/COFFEmitter.cpp:105,Energy Efficiency,allocate,allocate,105,"// A COFF string table always starts with a 4 byte size field. Offsets into; // it include this size, so allocate it now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/COFFEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/COFFEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/COFFEmitter.cpp:17,Energy Efficiency,allocate,allocated,17,// Store all the allocated start addresses in the header.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/COFFEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/COFFEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/COFFEmitter.cpp:29,Testability,stub,stub,29,// PE files start with a DOS stub.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/COFFEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/COFFEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/COFFEmitter.cpp:21,Testability,stub,stub,21,// Write out our DOS stub.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/COFFEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/COFFEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/DWARFEmitter.cpp:458,Testability,test,tests,458,"//===- DWARFEmitter - Convert YAML to DWARF binary data -------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// The DWARF component of yaml2obj. Provided as library code for tests.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/DWARFEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/DWARFEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/DWARFEmitter.cpp:19,Availability,error,error,19,// TODO: Test this error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/DWARFEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/DWARFEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/DWARFEmitter.cpp:9,Testability,Test,Test,9,// TODO: Test this error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/DWARFEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/DWARFEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/DWARFEmitter.cpp:19,Availability,error,error,19,// TODO: Test this error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/DWARFEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/DWARFEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/DWARFEmitter.cpp:9,Testability,Test,Test,9,// TODO: Test this error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/DWARFEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/DWARFEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/DWARFEmitter.cpp:130,Availability,error,error,130,// The current compilation unit may not have DIEs and it will not be; // able to find the associated abbrev table. We consume the error and; // assign 0 to the debug_abbrev_offset in such circumstances.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/DWARFEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/DWARFEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/DWARFEmitter.cpp:21,Modifiability,extend,extended,21,// The first byte of extended opcodes is a zero byte. The next bytes are an; // ULEB128 integer giving the number of bytes in the instruction itself (does; // not include the first zero byte or the size). We serialize the instruction; // itself into the OpBuffer and then write the size of the buffer and the; // buffer to the real output stream.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/DWARFEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/DWARFEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/DXContainerYAML.cpp:90,Deployability,update,updated,90,// This assert is duplicated here to leave a breadcrumb of the places that need; // to be updated if flags grow past 64-bits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/DXContainerYAML.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/DXContainerYAML.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/DXContainerYAML.cpp:8,Testability,assert,assert,8,// This assert is duplicated here to leave a breadcrumb of the places that need; // to be updated if flags grow past 64-bits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/DXContainerYAML.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/DXContainerYAML.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/DXContainerYAML.cpp:101,Usability,simpl,simplifies,101,"// Shader stage is only included in binaries for v1 and later, but we always; // include it since it simplifies parsing and file construction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/DXContainerYAML.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/DXContainerYAML.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp:263,Availability,error,error,263,// This class is used to build up a contiguous binary blob while keeping; // track of an offset in the output (which notionally begins at; // `InitialOffset`).; // The blob might be limited to an arbitrary size. All attempts to write data; // are ignored and the error condition is remembered once the limit is reached.; // Such an approach allows us to simplify the code by delaying error reporting; // and doing it at a convenient time.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp:384,Availability,error,error,384,// This class is used to build up a contiguous binary blob while keeping; // track of an offset in the output (which notionally begins at; // `InitialOffset`).; // The blob might be limited to an arbitrary size. All attempts to write data; // are ignored and the error condition is remembered once the limit is reached.; // Such an approach allows us to simplify the code by delaying error reporting; // and doing it at a convenient time.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp:354,Usability,simpl,simplify,354,// This class is used to build up a contiguous binary blob while keeping; // track of an offset in the output (which notionally begins at; // `InitialOffset`).; // The blob might be limited to an arbitrary size. All attempts to write data; // are ignored and the error condition is remembered once the limit is reached.; // Such an approach allows us to simplify the code by delaying error reporting; // and doing it at a convenient time.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp:4,Testability,Assert,Asserts,4,/// Asserts if name is not present in the map.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp:114,Modifiability,variab,variable,114,"/// The future section header string table section, if a unique string table; /// is needed. Don't reference this variable direectly: use the; /// ShStrtabStrings member instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp:163,Availability,error,error,163,"// We add a technical suffix for each unnamed section/fill. It does not; // affect the output, but allows us to map them by name in the code and; // report better error messages.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp:169,Integrability,message,messages,169,"// We add a technical suffix for each unnamed section/fill. It does not; // affect the output, but allows us to map them by name in the code and; // report better error messages.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp:52,Availability,avail,available,52,"// The full section header information might be not available here, so; // fill the space with zeroes as a placeholder.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp:166,Availability,error,error,166,"// We are unable to predict the size of debug data, so we request to write 0; // bytes. This should always return us an output stream unless CBA is already; // in an error state.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp:20,Safety,predict,predict,20,"// We are unable to predict the size of debug data, so we request to write 0; // bytes. This should always return us an output stream unless CBA is already; // in an error state.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp:97,Energy Efficiency,allocate,allocate,97,"// When a nobits section is followed by a non-nobits section or fill; // in the same segment, we allocate the file space for it. This behavior; // matches linkers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp:48,Security,hash,hash,48,"// We write the header first, starting with the hash buckets count. Normally; // it is the number of entries in HashBuckets, but the ""NBuckets"" property can; // be used to override this field, which is useful for producing broken; // objects.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp:112,Security,Hash,HashBuckets,112,"// We write the header first, starting with the hash buckets count. Normally; // it is the number of entries in HashBuckets, but the ""NBuckets"" property can; // be used to override this field, which is useful for producing broken; // objects.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp:67,Security,access,accessible,67,// Write the index of the first symbol in the dynamic symbol table accessible; // via the hash table.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp:90,Security,hash,hash,90,// Write the index of the first symbol in the dynamic symbol table accessible; // via the hash table.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp:65,Availability,Mask,MaskWords,65,"// Write the number of words in the Bloom filter. As above, the ""MaskWords""; // property can be used to set this field to any value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp:21,Security,hash,hash,21,// Write an array of hash buckets.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp:21,Security,hash,hash,21,// Write an array of hash values.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp:22,Availability,error,error,22,// We report a custom error message instead below.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp:28,Integrability,message,message,28,// We report a custom error message instead below.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/ELFEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/ELFYAML.cpp:128,Testability,test,tests,128,"// ELFDATANONE is an invalid data encoding, but we accept it because; // we want to be able to produce invalid binaries for the tests.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/ELFYAML.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/ELFYAML.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/ELFYAML.cpp:67,Integrability,depend,dependent,67,// st_other field is used to encode symbol visibility and platform-dependent; // flags and values. This method returns a name to value map that is used for; // parsing and encoding this field.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/ELFYAML.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/ELFYAML.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/GOFFEmitter.cpp:157,Testability,log,logical,157,"// The GOFFOstream is responsible to write the data into the fixed physical; // records of the format. A user of this class announces the start of a new; // logical record and the size of its payload. While writing the payload, the; // physical records are created for the data. Possible fill bytes at the end of; // a physical record are written automatically.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/GOFFEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/GOFFEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/GOFFEmitter.cpp:17,Testability,log,logical,17,// The number of logical records emitted so far.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/GOFFEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/GOFFEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/GOFFEmitter.cpp:30,Testability,log,logical,30,"// The remaining size of this logical record, including fill bytes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/GOFFEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/GOFFEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/GOFFEmitter.cpp:28,Testability,log,logical,28,// The type of the current (logical) record.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/GOFFEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/GOFFEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/GOFFEmitter.cpp:38,Testability,log,logical,38,// Fill the last physical record of a logical record with zero bytes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/GOFFEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/GOFFEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/MachOEmitter.cpp:82,Testability,test,test,82,// Fill remaining bytes with 0. This will only get hit in partially; // specified test cases.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/MachOEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/MachOEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/MinidumpEmitter.cpp:380,Availability,avail,available,380,"/// A helper class to manage the placement of various structures into the final; /// minidump binary. Space for objects can be allocated via various allocate***; /// methods, while the final minidump file is written by calling the writeTo; /// method. The plain versions of allocation functions take a reference to the; /// data which is to be written (and hence the data must be available until; /// writeTo is called), while the ""New"" versions allocate the data in an; /// allocator-managed buffer, which is available until the allocator object is; /// destroyed. For both kinds of functions, it is possible to modify the; /// data for which the space has been ""allocated"" until the final writeTo call.; /// This is useful for ""linking"" the allocated structures via their offsets.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/MinidumpEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/MinidumpEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/MinidumpEmitter.cpp:510,Availability,avail,available,510,"/// A helper class to manage the placement of various structures into the final; /// minidump binary. Space for objects can be allocated via various allocate***; /// methods, while the final minidump file is written by calling the writeTo; /// method. The plain versions of allocation functions take a reference to the; /// data which is to be written (and hence the data must be available until; /// writeTo is called), while the ""New"" versions allocate the data in an; /// allocator-managed buffer, which is available until the allocator object is; /// destroyed. For both kinds of functions, it is possible to modify the; /// data for which the space has been ""allocated"" until the final writeTo call.; /// This is useful for ""linking"" the allocated structures via their offsets.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/MinidumpEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/MinidumpEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/MinidumpEmitter.cpp:127,Energy Efficiency,allocate,allocated,127,"/// A helper class to manage the placement of various structures into the final; /// minidump binary. Space for objects can be allocated via various allocate***; /// methods, while the final minidump file is written by calling the writeTo; /// method. The plain versions of allocation functions take a reference to the; /// data which is to be written (and hence the data must be available until; /// writeTo is called), while the ""New"" versions allocate the data in an; /// allocator-managed buffer, which is available until the allocator object is; /// destroyed. For both kinds of functions, it is possible to modify the; /// data for which the space has been ""allocated"" until the final writeTo call.; /// This is useful for ""linking"" the allocated structures via their offsets.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/MinidumpEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/MinidumpEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/MinidumpEmitter.cpp:149,Energy Efficiency,allocate,allocate,149,"/// A helper class to manage the placement of various structures into the final; /// minidump binary. Space for objects can be allocated via various allocate***; /// methods, while the final minidump file is written by calling the writeTo; /// method. The plain versions of allocation functions take a reference to the; /// data which is to be written (and hence the data must be available until; /// writeTo is called), while the ""New"" versions allocate the data in an; /// allocator-managed buffer, which is available until the allocator object is; /// destroyed. For both kinds of functions, it is possible to modify the; /// data for which the space has been ""allocated"" until the final writeTo call.; /// This is useful for ""linking"" the allocated structures via their offsets.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/MinidumpEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/MinidumpEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/MinidumpEmitter.cpp:446,Energy Efficiency,allocate,allocate,446,"/// A helper class to manage the placement of various structures into the final; /// minidump binary. Space for objects can be allocated via various allocate***; /// methods, while the final minidump file is written by calling the writeTo; /// method. The plain versions of allocation functions take a reference to the; /// data which is to be written (and hence the data must be available until; /// writeTo is called), while the ""New"" versions allocate the data in an; /// allocator-managed buffer, which is available until the allocator object is; /// destroyed. For both kinds of functions, it is possible to modify the; /// data for which the space has been ""allocated"" until the final writeTo call.; /// This is useful for ""linking"" the allocated structures via their offsets.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/MinidumpEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/MinidumpEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/MinidumpEmitter.cpp:664,Energy Efficiency,allocate,allocated,664,"/// A helper class to manage the placement of various structures into the final; /// minidump binary. Space for objects can be allocated via various allocate***; /// methods, while the final minidump file is written by calling the writeTo; /// method. The plain versions of allocation functions take a reference to the; /// data which is to be written (and hence the data must be available until; /// writeTo is called), while the ""New"" versions allocate the data in an; /// allocator-managed buffer, which is available until the allocator object is; /// destroyed. For both kinds of functions, it is possible to modify the; /// data for which the space has been ""allocated"" until the final writeTo call.; /// This is useful for ""linking"" the allocated structures via their offsets.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/MinidumpEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/MinidumpEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/MinidumpEmitter.cpp:743,Energy Efficiency,allocate,allocated,743,"/// A helper class to manage the placement of various structures into the final; /// minidump binary. Space for objects can be allocated via various allocate***; /// methods, while the final minidump file is written by calling the writeTo; /// method. The plain versions of allocation functions take a reference to the; /// data which is to be written (and hence the data must be available until; /// writeTo is called), while the ""New"" versions allocate the data in an; /// allocator-managed buffer, which is available until the allocator object is; /// destroyed. For both kinds of functions, it is possible to modify the; /// data for which the space has been ""allocated"" until the final writeTo call.; /// This is useful for ""linking"" the allocated structures via their offsets.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/MinidumpEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/MinidumpEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/MinidumpYAML.cpp:4,Performance,Perform,Perform,4,/// Perform an optional yaml-mapping of an endian-aware type EndianType. The; /// only purpose of this function is to avoid casting the Default value to the; /// endian type;,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/MinidumpYAML.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/MinidumpYAML.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/MinidumpYAML.cpp:118,Safety,avoid,avoid,118,/// Perform an optional yaml-mapping of an endian-aware type EndianType. The; /// only purpose of this function is to avoid casting the Default value to the; /// endian type;,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/MinidumpYAML.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/MinidumpYAML.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/MinidumpYAML.cpp:4,Performance,Perform,Perform,4,/// Perform an optional yaml-mapping of an endian-aware type EndianType as some; /// other type MapType.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/MinidumpYAML.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/MinidumpYAML.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/MinidumpYAML.cpp:4,Performance,Perform,Perform,4,/// Perform an optional yaml-mapping of an endian-aware type as an; /// appropriately-sized hex value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/MinidumpYAML.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/MinidumpYAML.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/ObjectYAML.cpp:403,Integrability,wrap,wrapper,403,"//===- ObjectYAML.cpp - YAML utilities for object files -------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines a wrapper class for handling tagged YAML input; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/ObjectYAML.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/ObjectYAML.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/XCOFFEmitter.cpp:92,Performance,load,loadable,92,"// In general, an object file might contain multiple sections of a given type,; // but in a loadable module, there must be exactly one .text, .data, .bss, and; // .loader section. A loadable object might also have one .tdata section and; // one .tbss section.; // Set these section-related values if not set explicitly. We assume that the; // input YAML matches the format of the loadable object, but if multiple input; // sections still have the same type, the first section with that type; // prevails.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/XCOFFEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/XCOFFEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/XCOFFEmitter.cpp:164,Performance,load,loader,164,"// In general, an object file might contain multiple sections of a given type,; // but in a loadable module, there must be exactly one .text, .data, .bss, and; // .loader section. A loadable object might also have one .tdata section and; // one .tbss section.; // Set these section-related values if not set explicitly. We assume that the; // input YAML matches the format of the loadable object, but if multiple input; // sections still have the same type, the first section with that type; // prevails.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/XCOFFEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/XCOFFEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/XCOFFEmitter.cpp:182,Performance,load,loadable,182,"// In general, an object file might contain multiple sections of a given type,; // but in a loadable module, there must be exactly one .text, .data, .bss, and; // .loader section. A loadable object might also have one .tdata section and; // one .tbss section.; // Set these section-related values if not set explicitly. We assume that the; // input YAML matches the format of the loadable object, but if multiple input; // sections still have the same type, the first section with that type; // prevails.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/XCOFFEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/XCOFFEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/XCOFFEmitter.cpp:380,Performance,load,loadable,380,"// In general, an object file might contain multiple sections of a given type,; // but in a loadable module, there must be exactly one .text, .data, .bss, and; // .loader section. A loadable object might also have one .tdata section and; // one .tbss section.; // Set these section-related values if not set explicitly. We assume that the; // input YAML matches the format of the loadable object, but if multiple input; // sections still have the same type, the first section with that type; // prevails.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ObjectYAML/XCOFFEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ObjectYAML/XCOFFEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Option/ArgList.cpp:3,Deployability,Update,Update,3,// Update ranges for the option and all of its groups.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Option/ArgList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Option/ArgList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Option/ArgList.cpp:3,Safety,Avoid,Avoid,3,// Avoid the need for a non-const filtered iterator variant.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Option/ArgList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Option/ArgList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Option/ArgList.cpp:20,Integrability,interface,interface,20,/// This is a nicer interface when you don't have a list of Ids to exclude.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Option/ArgList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Option/ArgList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Option/ArgList.cpp:26,Availability,reliab,reliable,26,// Tuck away so we have a reliable const char *.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Option/ArgList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Option/ArgList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Option/Option.cpp:52,Usability,simpl,simplifies,52,"// Multi-level aliases are not supported. This just simplifies option; // tracking, it is not an inherent limitation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Option/Option.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Option/Option.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Option/Option.cpp:324,Integrability,depend,depending,324,"// It's a bit weird that aliased and unaliased arg share one index, but; // the index is mostly use as a memory optimization in render().; // Due to this, ArgList::getArgString(A->getIndex()) will return the spelling; // of the aliased arg always, while A->getSpelling() returns either the; // unaliased or the aliased arg, depending on which Arg object it's called on.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Option/Option.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Option/Option.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Option/Option.cpp:112,Performance,optimiz,optimization,112,"// It's a bit weird that aliased and unaliased arg share one index, but; // the index is mostly use as a memory optimization in render().; // Due to this, ArgList::getArgString(A->getIndex()) will return the spelling; // of the aliased arg always, while A->getSpelling() returns either the; // unaliased or the aliased arg, depending on which Arg object it's called on.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Option/Option.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Option/Option.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Option/OptTable.cpp:34,Availability,error,error,34,// Explicitly zero initialize the error to work around a bug in array; // value-initialization on MinGW with gcc 4.3.5.; // Find start of normal options.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Option/OptTable.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Option/OptTable.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Option/OptTable.cpp:40,Availability,mask,masks,40,// Ignore options that are excluded via masks,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Option/OptTable.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Option/OptTable.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Option/OptTable.cpp:57,Deployability,update,update,57,"// Parse a single argument, return the new argument, and update Index. If; // GroupedShortOptions is true, -a matches ""-abc"" and the argument in Args will; // be updated to ""-bc"". This overload does not support VisibilityMask or case; // insensitive options.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Option/OptTable.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Option/OptTable.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Option/OptTable.cpp:162,Deployability,update,updated,162,"// Parse a single argument, return the new argument, and update Index. If; // GroupedShortOptions is true, -a matches ""-abc"" and the argument in Args will; // be updated to ""-bc"". This overload does not support VisibilityMask or case; // insensitive options.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Option/OptTable.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Option/OptTable.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Option/OptTable.cpp:309,Usability,simpl,simplest,309,"// Options are stored in sorted order, with '\0' at the end of the; // alphabet. Since the only options which can accept a string must; // prefix it, we iteratively search for the next option which could; // be a prefix.; //; // FIXME: This is searching much more than necessary, but I am; // blanking on the simplest way to make it fast. We can solve this; // problem when we move to TableGen.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Option/OptTable.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Option/OptTable.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Option/OptTable.cpp:39,Availability,error,error,39,// FIXME: Handle '@' args (or at least error on them).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Option/OptTable.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Option/OptTable.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Option/OptTable.cpp:30,Availability,error,error,30,// Check for missing argument error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Option/OptTable.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Option/OptTable.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Option/OptTable.cpp:19,Modifiability,variab,variable,19,// The environment variable specifies initial options which can be overridden; // by commnad line options.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Option/OptTable.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Option/OptTable.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Option/OptTable.cpp:33,Availability,Error,ErrorFn,33,"// For each unknwon option, call ErrorFn with a formatted error message. The; // message includes a suggested alternative option spelling if available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Option/OptTable.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Option/OptTable.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Option/OptTable.cpp:58,Availability,error,error,58,"// For each unknwon option, call ErrorFn with a formatted error message. The; // message includes a suggested alternative option spelling if available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Option/OptTable.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Option/OptTable.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Option/OptTable.cpp:141,Availability,avail,available,141,"// For each unknwon option, call ErrorFn with a formatted error message. The; // message includes a suggested alternative option spelling if available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Option/OptTable.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Option/OptTable.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Option/OptTable.cpp:64,Integrability,message,message,64,"// For each unknwon option, call ErrorFn with a formatted error message. The; // message includes a suggested alternative option spelling if available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Option/OptTable.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Option/OptTable.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Option/OptTable.cpp:81,Integrability,message,message,81,"// For each unknwon option, call ErrorFn with a formatted error message. The; // message includes a suggested alternative option spelling if available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Option/OptTable.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Option/OptTable.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/OptimizationLevel.cpp:7,Performance,Optimiz,OptimizationLevel,7,"//===- OptimizationLevel.cpp ----------------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/OptimizationLevel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/OptimizationLevel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:37,Deployability,pipeline,pipelines,37,"//===- Parsing and selection of pass pipelines ----------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file provides the implementation of the PassBuilder based on our; /// static pass registry as well as related functionality. It also provides; /// helpers to aid in analyzing, debugging, and testing passes and pass; /// pipelines.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:621,Deployability,pipeline,pipelines,621,"//===- Parsing and selection of pass pipelines ----------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file provides the implementation of the PassBuilder based on our; /// static pass registry as well as related functionality. It also provides; /// helpers to aid in analyzing, debugging, and testing passes and pass; /// pipelines.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:592,Testability,test,testing,592,"//===- Parsing and selection of pass pipelines ----------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file provides the implementation of the PassBuilder based on our; /// static pass registry as well as related functionality. It also provides; /// helpers to aid in analyzing, debugging, and testing passes and pass; /// pipelines.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:208,Deployability,update,updated,208,/// Whether or not we should populate a PassInstrumentationCallbacks's class to; /// pass name map.; ///; /// This is for optimization purposes so we don't populate it if we never use; /// it. This should be updated if new pass instrumentation wants to use the map.; /// We currently only use this for --print-before/after.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:122,Performance,optimiz,optimization,122,/// Whether or not we should populate a PassInstrumentationCallbacks's class to; /// pass name map.; ///; /// This is for optimization purposes so we don't populate it if we never use; /// it. This should be updated if new pass instrumentation wants to use the map.; /// We currently only use this for --print-before/after.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:14,Testability,test,testing,14,// A pass for testing -print-on-crash.; // DO NOT USE THIS EXCEPT FOR TESTING!,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:70,Testability,TEST,TESTING,70,// A pass for testing -print-on-crash.; // DO NOT USE THIS EXCEPT FOR TESTING!,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:56,Availability,failure,failures,56,// A pass for testing message reporting of -verify-each failures.; // DO NOT USE THIS EXCEPT FOR TESTING!,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:22,Integrability,message,message,22,// A pass for testing message reporting of -verify-each failures.; // DO NOT USE THIS EXCEPT FOR TESTING!,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:14,Testability,test,testing,14,// A pass for testing message reporting of -verify-each failures.; // DO NOT USE THIS EXCEPT FOR TESTING!,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:97,Testability,TEST,TESTING,97,// A pass for testing message reporting of -verify-each failures.; // DO NOT USE THIS EXCEPT FOR TESTING!,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:52,Deployability,pipeline,pipeline,52,"// We almost always want the default alias analysis pipeline.; // If a user wants a different one, they can register their own before calling; // registerFunctionAnalyses().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:129,Deployability,pipeline,pipeline,129,"/// This performs customized parsing of pass name with parameters.; ///; /// We do not need parametrization of passes in textual pipeline very often,; /// yet on a rare occasion ability to specify parameters right there can be; /// useful.; ///; /// \p Name - parameterized specification of a pass from a textual pipeline; /// is a string in a form of :; /// PassName '<' parameter-list '>'; ///; /// Parameter list is being parsed by the parser callable argument, \p Parser,; /// It takes a string-ref of parameters and returns either StringError or a; /// parameter list in a form of a custom parameters type, all wrapped into; /// Expected<> template class.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:313,Deployability,pipeline,pipeline,313,"/// This performs customized parsing of pass name with parameters.; ///; /// We do not need parametrization of passes in textual pipeline very often,; /// yet on a rare occasion ability to specify parameters right there can be; /// useful.; ///; /// \p Name - parameterized specification of a pass from a textual pipeline; /// is a string in a form of :; /// PassName '<' parameter-list '>'; ///; /// Parameter list is being parsed by the parser callable argument, \p Parser,; /// It takes a string-ref of parameters and returns either StringError or a; /// parameter list in a form of a custom parameters type, all wrapped into; /// Expected<> template class.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:616,Integrability,wrap,wrapped,616,"/// This performs customized parsing of pass name with parameters.; ///; /// We do not need parametrization of passes in textual pipeline very often,; /// yet on a rare occasion ability to specify parameters right there can be; /// useful.; ///; /// \p Name - parameterized specification of a pass from a textual pipeline; /// is a string in a form of :; /// PassName '<' parameter-list '>'; ///; /// Parameter list is being parsed by the parser callable argument, \p Parser,; /// It takes a string-ref of parameters and returns either StringError or a; /// parameter list in a form of a custom parameters type, all wrapped into; /// Expected<> template class.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:260,Modifiability,parameteriz,parameterized,260,"/// This performs customized parsing of pass name with parameters.; ///; /// We do not need parametrization of passes in textual pipeline very often,; /// yet on a rare occasion ability to specify parameters right there can be; /// useful.; ///; /// \p Name - parameterized specification of a pass from a textual pipeline; /// is a string in a form of :; /// PassName '<' parameter-list '>'; ///; /// Parameter list is being parsed by the parser callable argument, \p Parser,; /// It takes a string-ref of parameters and returns either StringError or a; /// parameter list in a form of a custom parameters type, all wrapped into; /// Expected<> template class.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:9,Performance,perform,performs,9,"/// This performs customized parsing of pass name with parameters.; ///; /// We do not need parametrization of passes in textual pipeline very often,; /// yet on a rare occasion ability to specify parameters right there can be; /// useful.; ///; /// \p Name - parameterized specification of a pass from a textual pipeline; /// is a string in a form of :; /// PassName '<' parameter-list '>'; ///; /// Parameter list is being parsed by the parser callable argument, \p Parser,; /// It takes a string-ref of parameters and returns either StringError or a; /// parameter list in a form of a custom parameters type, all wrapped into; /// Expected<> template class.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:29,Usability,Simpl,SimplifyCFG,29,/// Parser of parameters for SimplifyCFG pass.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:111,Testability,test,tests,111,"// When specifying ""instcombine"" in -passes enable fix-point verification by; // default, as this is what most tests should use.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:85,Deployability,pipeline,pipeline,85,// namespace; /// Tests whether a pass name starts with a valid prefix for a default pipeline; /// alias.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:18,Testability,Test,Tests,18,// namespace; /// Tests whether a pass name starts with a valid prefix for a default pipeline; /// alias.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:95,Deployability,pipeline,pipeline,95,"/// Tests whether registered callbacks will accept a given pass name.; ///; /// When parsing a pipeline text, the type of the outermost pipeline may be; /// omitted, in which case the type is automatically determined from the first; /// pass name in the text. This may be a name that is handled through one of the; /// callbacks. We check this through the oridinary parsing callbacks by setting; /// up a dummy PassManager in order to not force the client to also handle this; /// type of query.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:136,Deployability,pipeline,pipeline,136,"/// Tests whether registered callbacks will accept a given pass name.; ///; /// When parsing a pipeline text, the type of the outermost pipeline may be; /// omitted, in which case the type is automatically determined from the first; /// pass name in the text. This may be a name that is handled through one of the; /// callbacks. We check this through the oridinary parsing callbacks by setting; /// up a dummy PassManager in order to not force the client to also handle this; /// type of query.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:4,Testability,Test,Tests,4,"/// Tests whether registered callbacks will accept a given pass name.; ///; /// When parsing a pipeline text, the type of the outermost pipeline may be; /// omitted, in which case the type is automatically determined from the first; /// pass name in the text. This may be a name that is handled through one of the; /// callbacks. We check this through the oridinary parsing callbacks by setting; /// up a dummy PassManager in order to not force the client to also handle this; /// type of query.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:46,Deployability,pipeline,pipeline,46,// Manually handle aliases for pre-configured pipeline fragments.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:35,Modifiability,config,configured,35,// Manually handle aliases for pre-configured pipeline fragments.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:18,Deployability,pipeline,pipeline,18,// Push the inner pipeline onto the stack to continue processing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:99,Deployability,pipeline,pipeline,99,"// When handling the close parenthesis, we greedily consume them to avoid; // empty strings in the pipeline.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:68,Safety,avoid,avoid,68,"// When handling the close parenthesis, we greedily consume them to avoid; // empty strings in the pipeline.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:30,Deployability,pipeline,pipeline,30,// If we try to pop the outer pipeline we have unbalanced parentheses.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:34,Deployability,pipeline,pipeline,34,"// Otherwise, the end of an inner pipeline always has to be followed by; // a comma, and then we can continue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:66,Deployability,pipeline,pipelines,66,// First handle complex passes like the pass managers which carry pipelines.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:28,Deployability,pipeline,pipelines,28,// Normal passes can't have pipelines.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:46,Deployability,pipeline,pipeline,46,// Manually handle aliases for pre-configured pipeline fragments.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:35,Modifiability,config,configured,35,// Manually handle aliases for pre-configured pipeline fragments.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:56,Deployability,pipeline,pipeline,56,"// When UnifiedLTO is enabled, use the ThinLTO pre-link pipeline. This; // avoids compile-time performance regressions and keeps the pre-link; // LTO pipeline ""unified"" for both LTO modes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:150,Deployability,pipeline,pipeline,150,"// When UnifiedLTO is enabled, use the ThinLTO pre-link pipeline. This; // avoids compile-time performance regressions and keeps the pre-link; // LTO pipeline ""unified"" for both LTO modes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:95,Performance,perform,performance,95,"// When UnifiedLTO is enabled, use the ThinLTO pre-link pipeline. This; // avoids compile-time performance regressions and keeps the pre-link; // LTO pipeline ""unified"" for both LTO modes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:75,Safety,avoid,avoids,75,"// When UnifiedLTO is enabled, use the ThinLTO pre-link pipeline. This; // avoids compile-time performance regressions and keeps the pre-link; // LTO pipeline ""unified"" for both LTO modes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:66,Deployability,pipeline,pipelines,66,// First handle complex passes like the pass managers which carry pipelines.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:52,Energy Efficiency,adapt,adaptor,52,// Add the nested pass manager with the appropriate adaptor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:52,Modifiability,adapt,adaptor,52,// Add the nested pass manager with the appropriate adaptor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:52,Energy Efficiency,adapt,adaptor,52,// Add the nested pass manager with the appropriate adaptor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:52,Modifiability,adapt,adaptor,52,// Add the nested pass manager with the appropriate adaptor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:28,Deployability,pipeline,pipelines,28,// Normal passes can't have pipelines.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:66,Deployability,pipeline,pipelines,66,// First handle complex passes like the pass managers which carry pipelines.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:52,Energy Efficiency,adapt,adaptor,52,// Add the nested pass manager with the appropriate adaptor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:52,Modifiability,adapt,adaptor,52,// Add the nested pass manager with the appropriate adaptor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:52,Energy Efficiency,adapt,adaptor,52,// Add the nested pass manager with the appropriate adaptor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:52,Modifiability,adapt,adaptor,52,// Add the nested pass manager with the appropriate adaptor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:28,Deployability,pipeline,pipelines,28,// Normal passes can't have pipelines.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:168,Safety,risk,risk,168,"// FIXME: UseMemorySSA is set to false. Maybe we could do things like:; // bool UseMemorySSA = !(""canon-freeze"" || ""loop-predication"" ||; // ""guard-widening"");; // The risk is that it may become obsolete if we're not careful.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:66,Deployability,pipeline,pipelines,66,// First handle complex passes like the pass managers which carry pipelines.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:52,Energy Efficiency,adapt,adaptor,52,// Add the nested pass manager with the appropriate adaptor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:52,Modifiability,adapt,adaptor,52,// Add the nested pass manager with the appropriate adaptor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:28,Deployability,pipeline,pipelines,28,// Normal passes can't have pipelines.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:16,Deployability,pipeline,pipeline,16,// Primary pass pipeline description parsing routine for a \c ModulePassManager; // FIXME: Should this routine accept a TargetMachine or require the caller to; // pre-populate the analysis managers with target-specific stuff?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:45,Integrability,rout,routine,45,// Primary pass pipeline description parsing routine for a \c ModulePassManager; // FIXME: Should this routine accept a TargetMachine or require the caller to; // pre-populate the analysis managers with target-specific stuff?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:103,Integrability,rout,routine,103,// Primary pass pipeline description parsing routine for a \c ModulePassManager; // FIXME: Should this routine accept a TargetMachine or require the caller to; // pre-populate the analysis managers with target-specific stuff?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:57,Deployability,pipeline,pipeline,57,"// If the first name isn't at the module layer, wrap the pipeline up; // automatically.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:48,Integrability,wrap,wrap,48,"// If the first name isn't at the module layer, wrap the pipeline up; // automatically.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:19,Deployability,pipeline,pipeline,19,// Unknown pass or pipeline name!,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:16,Deployability,pipeline,pipeline,16,// Primary pass pipeline description parsing routine for a \c CGSCCPassManager,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:45,Integrability,rout,routine,45,// Primary pass pipeline description parsing routine for a \c CGSCCPassManager,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:16,Deployability,pipeline,pipeline,16,// Primary pass pipeline description parsing routine for a \c; // FunctionPassManager,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:45,Integrability,rout,routine,45,// Primary pass pipeline description parsing routine for a \c; // FunctionPassManager,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:16,Deployability,pipeline,pipeline,16,// Primary pass pipeline description parsing routine for a \c LoopPassManager,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:45,Integrability,rout,routine,45,// Primary pass pipeline description parsing routine for a \c LoopPassManager,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:10,Deployability,pipeline,pipeline,10,// If the pipeline just consists of the word 'default' just replace the AA; // manager with our default one.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp:47,Availability,avail,available,47,// TODO: print pass descriptions when they are available,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:28,Deployability,pipeline,pipelines,28,"//===- Construction of pass pipelines -------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file provides the implementation of the PassBuilder based on our; /// static pass registry as well as related functionality. It also provides; /// helpers to aid in analyzing, debugging, and testing passes and pass; /// pipelines.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:621,Deployability,pipeline,pipelines,621,"//===- Construction of pass pipelines -------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file provides the implementation of the PassBuilder based on our; /// static pass registry as well as related functionality. It also provides; /// helpers to aid in analyzing, debugging, and testing passes and pass; /// pipelines.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:592,Testability,test,testing,592,"//===- Construction of pass pipelines -------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; ///; /// This file provides the implementation of the PassBuilder based on our; /// static pass registry as well as related functionality. It also provides; /// helpers to aid in analyzing, debugging, and testing passes and pass; /// pipelines.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:56,Performance,optimiz,optimizations,56,// This option is used in simplifying testing SampleFDO optimizations for; // profile loading.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:86,Performance,load,loading,86,// This option is used in simplifying testing SampleFDO optimizations for; // profile loading.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:38,Testability,test,testing,38,// This option is used in simplifying testing SampleFDO optimizations for; // profile loading.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:26,Usability,simpl,simplifying,26,// This option is used in simplifying testing SampleFDO optimizations for; // profile loading.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:32,Security,access,accesses,32,// Form SSA out of local memory accesses after breaking apart aggregates into; // scalars.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:17,Safety,redund,redundancies,17,// Catch trivial redundancies,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:27,Performance,load,load,27,// Hoisting of scalars and load expressions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:53,Usability,simpl,simplify,53,"// Form canonically associated expression trees, and simplify the trees using; // basic mathematical properties. For example, this will form (nearly); // minimal multiplication trees.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:39,Deployability,pipeline,pipeline,39,"// Add the primary loop simplification pipeline.; // FIXME: Currently this is split into two loop pass pipelines because we run; // some function passes in between them. These can and should be removed; // and/or replaced by scheduling the loop pass equivalents in the correct; // positions. But those equivalent passes aren't powerful enough yet.; // Specifically, `SimplifyCFGPass` and `InstCombinePass` are currently still; // used. We have `LoopSimplifyCFGPass` which isn't yet powerful enough yet to; // fully replace `SimplifyCFGPass`, and the closest to the other we have is; // `LoopInstSimplify`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:103,Deployability,pipeline,pipelines,103,"// Add the primary loop simplification pipeline.; // FIXME: Currently this is split into two loop pass pipelines because we run; // some function passes in between them. These can and should be removed; // and/or replaced by scheduling the loop pass equivalents in the correct; // positions. But those equivalent passes aren't powerful enough yet.; // Specifically, `SimplifyCFGPass` and `InstCombinePass` are currently still; // used. We have `LoopSimplifyCFGPass` which isn't yet powerful enough yet to; // fully replace `SimplifyCFGPass`, and the closest to the other we have is; // `LoopInstSimplify`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:225,Energy Efficiency,schedul,scheduling,225,"// Add the primary loop simplification pipeline.; // FIXME: Currently this is split into two loop pass pipelines because we run; // some function passes in between them. These can and should be removed; // and/or replaced by scheduling the loop pass equivalents in the correct; // positions. But those equivalent passes aren't powerful enough yet.; // Specifically, `SimplifyCFGPass` and `InstCombinePass` are currently still; // used. We have `LoopSimplifyCFGPass` which isn't yet powerful enough yet to; // fully replace `SimplifyCFGPass`, and the closest to the other we have is; // `LoopInstSimplify`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:327,Energy Efficiency,power,powerful,327,"// Add the primary loop simplification pipeline.; // FIXME: Currently this is split into two loop pass pipelines because we run; // some function passes in between them. These can and should be removed; // and/or replaced by scheduling the loop pass equivalents in the correct; // positions. But those equivalent passes aren't powerful enough yet.; // Specifically, `SimplifyCFGPass` and `InstCombinePass` are currently still; // used. We have `LoopSimplifyCFGPass` which isn't yet powerful enough yet to; // fully replace `SimplifyCFGPass`, and the closest to the other we have is; // `LoopInstSimplify`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:482,Energy Efficiency,power,powerful,482,"// Add the primary loop simplification pipeline.; // FIXME: Currently this is split into two loop pass pipelines because we run; // some function passes in between them. These can and should be removed; // and/or replaced by scheduling the loop pass equivalents in the correct; // positions. But those equivalent passes aren't powerful enough yet.; // Specifically, `SimplifyCFGPass` and `InstCombinePass` are currently still; // used. We have `LoopSimplifyCFGPass` which isn't yet powerful enough yet to; // fully replace `SimplifyCFGPass`, and the closest to the other we have is; // `LoopInstSimplify`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:24,Usability,simpl,simplification,24,"// Add the primary loop simplification pipeline.; // FIXME: Currently this is split into two loop pass pipelines because we run; // some function passes in between them. These can and should be removed; // and/or replaced by scheduling the loop pass equivalents in the correct; // positions. But those equivalent passes aren't powerful enough yet.; // Specifically, `SimplifyCFGPass` and `InstCombinePass` are currently still; // used. We have `LoopSimplifyCFGPass` which isn't yet powerful enough yet to; // fully replace `SimplifyCFGPass`, and the closest to the other we have is; // `LoopInstSimplify`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:367,Usability,Simpl,SimplifyCFGPass,367,"// Add the primary loop simplification pipeline.; // FIXME: Currently this is split into two loop pass pipelines because we run; // some function passes in between them. These can and should be removed; // and/or replaced by scheduling the loop pass equivalents in the correct; // positions. But those equivalent passes aren't powerful enough yet.; // Specifically, `SimplifyCFGPass` and `InstCombinePass` are currently still; // used. We have `LoopSimplifyCFGPass` which isn't yet powerful enough yet to; // fully replace `SimplifyCFGPass`, and the closest to the other we have is; // `LoopInstSimplify`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:524,Usability,Simpl,SimplifyCFGPass,524,"// Add the primary loop simplification pipeline.; // FIXME: Currently this is split into two loop pass pipelines because we run; // some function passes in between them. These can and should be removed; // and/or replaced by scheduling the loop pass equivalents in the correct; // positions. But those equivalent passes aren't powerful enough yet.; // Specifically, `SimplifyCFGPass` and `InstCombinePass` are currently still; // used. We have `LoopSimplifyCFGPass` which isn't yet powerful enough yet to; // fully replace `SimplifyCFGPass`, and the closest to the other we have is; // `LoopInstSimplify`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:3,Usability,Simpl,Simplify,3,"// Simplify the loop body. We do this initially to clean up after other loop; // passes run, either when iterating on a loop or on inner loops with; // implications on the outer loop.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:71,Energy Efficiency,reduce,reduce,71,"// Try to remove as much code from the loop header as possible,; // to reduce amount of IR that will have to be duplicated. However,; // do not perform speculative hoisting the first time as LICM; // will destroy metadata that may not need to be destroyed if run; // after loop rotation.; // TODO: Investigate promotion cap for O1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:144,Performance,perform,perform,144,"// Try to remove as much code from the loop header as possible,; // to reduce amount of IR that will have to be duplicated. However,; // do not perform speculative hoisting the first time as LICM; // will destroy metadata that may not need to be destroyed if run; // after loop rotation.; // TODO: Investigate promotion cap for O1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:13,Performance,optimiz,optimize,13,// Specially optimize memory movement as it doesn't look like dataflow in SSA.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:64,Usability,clear,clear,64,// Sparse conditional constant propagation.; // FIXME: It isn't clear why we do this *after* loop passes rather than; // before...,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:25,Safety,redund,redundancy,25,// Run instcombine after redundancy and dead bit elimination to exploit; // opportunities opened up by them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:64,Security,expose,exposed,64,"// Finally, do an expensive DCE pass to catch all the dead code exposed by; // the simplifications and basic cleanup after all the simplifications.; // TODO: Investigate if this is too expensive.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:83,Usability,simpl,simplifications,83,"// Finally, do an expensive DCE pass to catch all the dead code exposed by; // the simplifications and basic cleanup after all the simplifications.; // TODO: Investigate if this is too expensive.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:131,Usability,simpl,simplifications,131,"// Finally, do an expensive DCE pass to catch all the dead code exposed by; // the simplifications and basic cleanup after all the simplifications.; // TODO: Investigate if this is too expensive.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:10,Deployability,pipeline,pipeline,10,// The O1 pipeline has a separate pipeline creation function to simplify; // construction readability.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:34,Deployability,pipeline,pipeline,34,// The O1 pipeline has a separate pipeline creation function to simplify; // construction readability.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:64,Usability,simpl,simplify,64,// The O1 pipeline has a separate pipeline creation function to simplify; // construction readability.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:32,Security,access,accesses,32,// Form SSA out of local memory accesses after breaking apart aggregates into; // scalars.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:17,Safety,redund,redundancies,17,// Catch trivial redundancies,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:27,Performance,load,load,27,// Hoisting of scalars and load expressions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:3,Performance,Optimiz,Optimize,3,"// Optimize based on known information about branches, and cleanup afterward.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:15,Deployability,pipeline,pipeline,15,"// For PGO use pipeline, try to optimize memory intrinsics such as memcpy; // using the size value profile. Don't perform this when optimizing for size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:32,Performance,optimiz,optimize,32,"// For PGO use pipeline, try to optimize memory intrinsics such as memcpy; // using the size value profile. Don't perform this when optimizing for size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:114,Performance,perform,perform,114,"// For PGO use pipeline, try to optimize memory intrinsics such as memcpy; // using the size value profile. Don't perform this when optimizing for size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:132,Performance,optimiz,optimizing,132,"// For PGO use pipeline, try to optimize memory intrinsics such as memcpy; // using the size value profile. Don't perform this when optimizing for size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:53,Usability,simpl,simplify,53,"// Form canonically associated expression trees, and simplify the trees using; // basic mathematical properties. For example, this will form (nearly); // minimal multiplication trees.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:39,Deployability,pipeline,pipeline,39,"// Add the primary loop simplification pipeline.; // FIXME: Currently this is split into two loop pass pipelines because we run; // some function passes in between them. These can and should be removed; // and/or replaced by scheduling the loop pass equivalents in the correct; // positions. But those equivalent passes aren't powerful enough yet.; // Specifically, `SimplifyCFGPass` and `InstCombinePass` are currently still; // used. We have `LoopSimplifyCFGPass` which isn't yet powerful enough yet to; // fully replace `SimplifyCFGPass`, and the closest to the other we have is; // `LoopInstSimplify`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:103,Deployability,pipeline,pipelines,103,"// Add the primary loop simplification pipeline.; // FIXME: Currently this is split into two loop pass pipelines because we run; // some function passes in between them. These can and should be removed; // and/or replaced by scheduling the loop pass equivalents in the correct; // positions. But those equivalent passes aren't powerful enough yet.; // Specifically, `SimplifyCFGPass` and `InstCombinePass` are currently still; // used. We have `LoopSimplifyCFGPass` which isn't yet powerful enough yet to; // fully replace `SimplifyCFGPass`, and the closest to the other we have is; // `LoopInstSimplify`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:225,Energy Efficiency,schedul,scheduling,225,"// Add the primary loop simplification pipeline.; // FIXME: Currently this is split into two loop pass pipelines because we run; // some function passes in between them. These can and should be removed; // and/or replaced by scheduling the loop pass equivalents in the correct; // positions. But those equivalent passes aren't powerful enough yet.; // Specifically, `SimplifyCFGPass` and `InstCombinePass` are currently still; // used. We have `LoopSimplifyCFGPass` which isn't yet powerful enough yet to; // fully replace `SimplifyCFGPass`, and the closest to the other we have is; // `LoopInstSimplify`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:327,Energy Efficiency,power,powerful,327,"// Add the primary loop simplification pipeline.; // FIXME: Currently this is split into two loop pass pipelines because we run; // some function passes in between them. These can and should be removed; // and/or replaced by scheduling the loop pass equivalents in the correct; // positions. But those equivalent passes aren't powerful enough yet.; // Specifically, `SimplifyCFGPass` and `InstCombinePass` are currently still; // used. We have `LoopSimplifyCFGPass` which isn't yet powerful enough yet to; // fully replace `SimplifyCFGPass`, and the closest to the other we have is; // `LoopInstSimplify`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:482,Energy Efficiency,power,powerful,482,"// Add the primary loop simplification pipeline.; // FIXME: Currently this is split into two loop pass pipelines because we run; // some function passes in between them. These can and should be removed; // and/or replaced by scheduling the loop pass equivalents in the correct; // positions. But those equivalent passes aren't powerful enough yet.; // Specifically, `SimplifyCFGPass` and `InstCombinePass` are currently still; // used. We have `LoopSimplifyCFGPass` which isn't yet powerful enough yet to; // fully replace `SimplifyCFGPass`, and the closest to the other we have is; // `LoopInstSimplify`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:24,Usability,simpl,simplification,24,"// Add the primary loop simplification pipeline.; // FIXME: Currently this is split into two loop pass pipelines because we run; // some function passes in between them. These can and should be removed; // and/or replaced by scheduling the loop pass equivalents in the correct; // positions. But those equivalent passes aren't powerful enough yet.; // Specifically, `SimplifyCFGPass` and `InstCombinePass` are currently still; // used. We have `LoopSimplifyCFGPass` which isn't yet powerful enough yet to; // fully replace `SimplifyCFGPass`, and the closest to the other we have is; // `LoopInstSimplify`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:367,Usability,Simpl,SimplifyCFGPass,367,"// Add the primary loop simplification pipeline.; // FIXME: Currently this is split into two loop pass pipelines because we run; // some function passes in between them. These can and should be removed; // and/or replaced by scheduling the loop pass equivalents in the correct; // positions. But those equivalent passes aren't powerful enough yet.; // Specifically, `SimplifyCFGPass` and `InstCombinePass` are currently still; // used. We have `LoopSimplifyCFGPass` which isn't yet powerful enough yet to; // fully replace `SimplifyCFGPass`, and the closest to the other we have is; // `LoopInstSimplify`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:524,Usability,Simpl,SimplifyCFGPass,524,"// Add the primary loop simplification pipeline.; // FIXME: Currently this is split into two loop pass pipelines because we run; // some function passes in between them. These can and should be removed; // and/or replaced by scheduling the loop pass equivalents in the correct; // positions. But those equivalent passes aren't powerful enough yet.; // Specifically, `SimplifyCFGPass` and `InstCombinePass` are currently still; // used. We have `LoopSimplifyCFGPass` which isn't yet powerful enough yet to; // fully replace `SimplifyCFGPass`, and the closest to the other we have is; // `LoopInstSimplify`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:3,Usability,Simpl,Simplify,3,"// Simplify the loop body. We do this initially to clean up after other loop; // passes run, either when iterating on a loop or on inner loops with; // implications on the outer loop.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:71,Energy Efficiency,reduce,reduce,71,"// Try to remove as much code from the loop header as possible,; // to reduce amount of IR that will have to be duplicated. However,; // do not perform speculative hoisting the first time as LICM; // will destroy metadata that may not need to be destroyed if run; // after loop rotation.; // TODO: Investigate promotion cap for O1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:144,Performance,perform,perform,144,"// Try to remove as much code from the loop header as possible,; // to reduce amount of IR that will have to be duplicated. However,; // do not perform speculative hoisting the first time as LICM; // will destroy metadata that may not need to be destroyed if run; // after loop rotation.; // TODO: Investigate promotion cap for O1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:13,Safety,redund,redundancies,13,// Eliminate redundancies.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:64,Usability,clear,clear,64,// Sparse conditional constant propagation.; // FIXME: It isn't clear why we do this *after* loop passes rather than; // before...,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:25,Safety,redund,redundancy,25,// Run instcombine after redundancy and dead bit elimination to exploit; // opportunities opened up by them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:34,Performance,optimiz,optimizations,34,"// Re-consider control flow based optimizations after redundancy elimination,; // redo DCE, etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:54,Safety,redund,redundancy,54,"// Re-consider control flow based optimizations after redundancy elimination,; // redo DCE, etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:64,Security,expose,exposed,64,"// Finally, do an expensive DCE pass to catch all the dead code exposed by; // the simplifications and basic cleanup after all the simplifications.; // TODO: Investigate if this is too expensive.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:83,Usability,simpl,simplifications,83,"// Finally, do an expensive DCE pass to catch all the dead code exposed by; // the simplifications and basic cleanup after all the simplifications.; // TODO: Investigate if this is too expensive.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:131,Usability,simpl,simplifications,131,"// Finally, do an expensive DCE pass to catch all the dead code exposed by; // the simplifications and basic cleanup after all the simplifications.; // TODO: Investigate if this is too expensive.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:13,Performance,optimiz,optimize,13,// Specially optimize memory movement as it doesn't look like dataflow in SSA.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:151,Performance,perform,performance,151,"// FIXME: The hint threshold has the same value used by the regular inliner; // when not optimzing for size. This should probably be lowered after; // performance testing.; // FIXME: this comment is cargo culted from the old pass manager, revisit).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:163,Testability,test,testing,163,"// FIXME: The hint threshold has the same value used by the regular inliner; // when not optimzing for size. This should probably be lowered after; // performance testing.; // FIXME: this comment is cargo culted from the old pass manager, revisit).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:17,Safety,redund,redundancies,17,// Catch trivial redundancies.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:3,Performance,Cache,Cache,3,// Cache ProfileSummaryAnalysis once to avoid the potential need to insert; // RequireAnalysisPass for PSI before subsequent non-module passes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:40,Safety,avoid,avoid,40,// Cache ProfileSummaryAnalysis once to avoid the potential need to insert; // RequireAnalysisPass for PSI before subsequent non-module passes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:3,Performance,Perform,Perform,3,// Perform PGO instrumentation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:3,Performance,Cache,Cache,3,// Cache ProfileSummaryAnalysis once to avoid the potential need to insert; // RequireAnalysisPass for PSI before subsequent non-module passes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:40,Safety,avoid,avoid,40,// Cache ProfileSummaryAnalysis once to avoid the potential need to insert; // RequireAnalysisPass for PSI before subsequent non-module passes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:3,Performance,Perform,Perform,3,// Perform PGO instrumentation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:89,Deployability,pipeline,pipeline,89,// Require the GlobalsAA analysis for the module so we can query it within; // the CGSCC pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:73,Availability,avail,available,73,// Invalidate AAManager so it can be recreated and pick up the newly; // available GlobalsAA.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:38,Deployability,pipeline,pipeline,38,// Now begin the main postorder CGSCC pipeline.; // FIXME: The current CGSCC pipeline has its origins in the legacy pass; // manager and trying to emulate its precise behavior. Much of this doesn't; // make a lot of sense and we should revisit the core CGSCC structure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:77,Deployability,pipeline,pipeline,77,// Now begin the main postorder CGSCC pipeline.; // FIXME: The current CGSCC pipeline has its origins in the legacy pass; // manager and trying to emulate its precise behavior. Much of this doesn't; // make a lot of sense and we should revisit the core CGSCC structure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:138,Usability,clear,clear,138,"// Note: historically, the PruneEH pass was run first to deduce nounwind and; // generally clean up exception handling overhead. It isn't clear this is; // valuable as the inliner doesn't currently care whether it is inlining an; // invoke or a call.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:95,Deployability,pipeline,pipeline,95,"// Deduce function attributes. We do another run of this after the function; // simplification pipeline, so this only needs to run when it could affect the; // function simplification pipeline, which is only the case with recursive; // functions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:184,Deployability,pipeline,pipeline,184,"// Deduce function attributes. We do another run of this after the function; // simplification pipeline, so this only needs to run when it could affect the; // function simplification pipeline, which is only the case with recursive; // functions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:80,Usability,simpl,simplification,80,"// Deduce function attributes. We do another run of this after the function; // simplification pipeline, so this only needs to run when it could affect the; // function simplification pipeline, which is only the case with recursive; // functions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:169,Usability,simpl,simplification,169,"// Deduce function attributes. We do another run of this after the function; // simplification pipeline, so this only needs to run when it could affect the; // function simplification pipeline, which is only the case with recursive; // functions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:49,Deployability,pipeline,pipeline,49,// When at O3 add argument promotion to the pass pipeline.; // FIXME: It isn't at all clear why this should be limited to O3.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:86,Usability,clear,clear,86,// When at O3 add argument promotion to the pass pipeline.; // FIXME: It isn't at all clear why this should be limited to O3.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:10,Performance,perform,perform,10,// Try to perform OpenMP specific optimizations. This is a (quick!) no-op if; // there are no OpenMP runtime calls present in the module.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:34,Performance,optimiz,optimizations,34,// Try to perform OpenMP specific optimizations. This is a (quick!) no-op if; // there are no OpenMP runtime calls present in the module.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:40,Deployability,pipeline,pipeline,40,// Add the core function simplification pipeline nested inside the; // CGSCC walk.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:25,Usability,simpl,simplification,25,// Add the core function simplification pipeline nested inside the; // CGSCC walk.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:62,Usability,simpl,simplified,62,"// Finally, deduce any function attributes based on the fully simplified; // function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:35,Usability,simpl,simplified,35,// Mark that the function is fully simplified and that it shouldn't be; // simplified again if we somehow revisit it due to CGSCC mutations unless; // it's been modified since.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:75,Usability,simpl,simplified,75,// Mark that the function is fully simplified and that it shouldn't be; // simplified again if we somehow revisit it due to CGSCC mutations unless; // it's been modified since.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:60,Energy Efficiency,adapt,adaptors,60,// Make sure we don't affect potential future NoRerun CGSCC adaptors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:60,Modifiability,adapt,adaptors,60,// Make sure we don't affect potential future NoRerun CGSCC adaptors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:40,Safety,avoid,avoid,40,"// The inline deferral logic is used to avoid losing some; // inlining chance in future. It is helpful in SCC inliner, in which; // inlining is processed in bottom-up order.; // While in module inliner, the inlining order is a priority-based order; // by default. The inline deferral is unnecessary there. So we disable the; // inline deferral logic in module inliner.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:23,Testability,log,logic,23,"// The inline deferral logic is used to avoid losing some; // inlining chance in future. It is helpful in SCC inliner, in which; // inlining is processed in bottom-up order.; // While in module inliner, the inlining order is a priority-based order; // by default. The inline deferral is unnecessary there. So we disable the; // inline deferral logic in module inliner.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:344,Testability,log,logic,344,"// The inline deferral logic is used to avoid losing some; // inlining chance in future. It is helpful in SCC inliner, in which; // inlining is processed in bottom-up order.; // While in module inliner, the inlining order is a priority-based order; // by default. The inline deferral is unnecessary there. So we disable the; // inline deferral logic in module inliner.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:63,Deployability,pipeline,pipeline,63,// Place pseudo probe instrumentation as the first pass of the pipeline to; // minimize the impact of optimization changes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:102,Performance,optimiz,optimization,102,// Place pseudo probe instrumentation as the first pass of the pipeline to; // minimize the impact of optimization changes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:60,Availability,avail,available,60,"// In ThinLTO mode, when flattened profile is used, all the available; // profile information will be annotated in PreLink phase so there is; // no need to load the profile again in PostLink.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:156,Performance,load,load,156,"// In ThinLTO mode, when flattened profile is used, all the available; // profile information will be annotated in PreLink phase so there is; // no need to load the profile again in PostLink.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:39,Performance,perform,perform,39,"// During the ThinLTO backend phase we perform early indirect call promotion; // here, before globalopt. Otherwise imported available_externally functions; // look unreferenced and are removed. If we are going to load the sample; // profile then defer until later.; // TODO: See if we can move later and consolidate with the location where; // we perform ICP when we are loading a sample profile.; // TODO: We pass HasSampleProfile (whether there was a sample profile file; // passed to the compile) to the SamplePGO flag of ICP. This is used to; // determine whether the new direct calls are annotated with prof metadata.; // Ideally this should be determined from whether the IR is annotated with; // sample profile, and not whether the a sample profile was provided on the; // command line. E.g. for flattened profiles where we will not be reloading; // the sample profile in the ThinLTO backend, we ideally shouldn't have to; // provide the sample profile file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:213,Performance,load,load,213,"// During the ThinLTO backend phase we perform early indirect call promotion; // here, before globalopt. Otherwise imported available_externally functions; // look unreferenced and are removed. If we are going to load the sample; // profile then defer until later.; // TODO: See if we can move later and consolidate with the location where; // we perform ICP when we are loading a sample profile.; // TODO: We pass HasSampleProfile (whether there was a sample profile file; // passed to the compile) to the SamplePGO flag of ICP. This is used to; // determine whether the new direct calls are annotated with prof metadata.; // Ideally this should be determined from whether the IR is annotated with; // sample profile, and not whether the a sample profile was provided on the; // command line. E.g. for flattened profiles where we will not be reloading; // the sample profile in the ThinLTO backend, we ideally shouldn't have to; // provide the sample profile file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:347,Performance,perform,perform,347,"// During the ThinLTO backend phase we perform early indirect call promotion; // here, before globalopt. Otherwise imported available_externally functions; // look unreferenced and are removed. If we are going to load the sample; // profile then defer until later.; // TODO: See if we can move later and consolidate with the location where; // we perform ICP when we are loading a sample profile.; // TODO: We pass HasSampleProfile (whether there was a sample profile file; // passed to the compile) to the SamplePGO flag of ICP. This is used to; // determine whether the new direct calls are annotated with prof metadata.; // Ideally this should be determined from whether the IR is annotated with; // sample profile, and not whether the a sample profile was provided on the; // command line. E.g. for flattened profiles where we will not be reloading; // the sample profile in the ThinLTO backend, we ideally shouldn't have to; // provide the sample profile file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:371,Performance,load,loading,371,"// During the ThinLTO backend phase we perform early indirect call promotion; // here, before globalopt. Otherwise imported available_externally functions; // look unreferenced and are removed. If we are going to load the sample; // profile then defer until later.; // TODO: See if we can move later and consolidate with the location where; // we perform ICP when we are loading a sample profile.; // TODO: We pass HasSampleProfile (whether there was a sample profile file; // passed to the compile) to the SamplePGO flag of ICP. This is used to; // determine whether the new direct calls are annotated with prof metadata.; // Ideally this should be determined from whether the IR is annotated with; // sample profile, and not whether the a sample profile was provided on the; // command line. E.g. for flattened profiles where we will not be reloading; // the sample profile in the ThinLTO backend, we ideally shouldn't have to; // provide the sample profile file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:117,Deployability,pipeline,pipelines,117,// Create an early function pass manager to cleanup the output of the; // frontend. Not necessary with LTO post link pipelines since the pre link; // pipeline already cleaned up the frontend output.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:150,Deployability,pipeline,pipeline,150,// Create an early function pass manager to cleanup the output of the; // frontend. Not necessary with LTO post link pipelines since the pre link; // pipeline already cleaned up the frontend output.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:133,Usability,Simpl,SimplifyCFG,133,// Lower llvm.expect to metadata before attempting transforms.; // Compare/branch metadata may alter the behavior of passes like; // SimplifyCFG.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:3,Performance,Cache,Cache,3,// Cache ProfileSummaryAnalysis once to avoid the potential need to insert; // RequireAnalysisPass for PSI before subsequent non-module passes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:40,Safety,avoid,avoid,40,// Cache ProfileSummaryAnalysis once to avoid the potential need to insert; // RequireAnalysisPass for PSI before subsequent non-module passes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:6,Performance,perform,perform,6,"// We perform early indirect call promotion here, before globalopt.; // This is important for the ThinLTO backend phase because otherwise; // imported available_externally functions look unreferenced and are; // removed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:10,Performance,perform,perform,10,// Try to perform OpenMP specific optimizations on the module. This is a; // (quick!) no-op if there are no OpenMP runtime calls present in the module.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:34,Performance,optimiz,optimizations,34,// Try to perform OpenMP specific optimizations on the module. This is a; // (quick!) no-op if there are no OpenMP runtime calls present in the module.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:80,Deployability,pipeline,pipeline,80,// Lower type metadata and the type.test intrinsic in the ThinLTO; // post link pipeline after ICP. This is to enable usage of the type; // tests in ICP sequences.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:36,Testability,test,test,36,// Lower type metadata and the type.test intrinsic in the ThinLTO; // post link pipeline after ICP. This is to enable usage of the type; // tests in ICP sequences.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:140,Testability,test,tests,140,// Lower type metadata and the type.test intrinsic in the ThinLTO; // post link pipeline after ICP. This is to enable usage of the type; // tests in ICP sequences.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:145,Deployability,pipeline,pipeline,145,"// Interprocedural constant propagation now that basic cleanup has occurred; // and prior to optimizing globals.; // FIXME: This position in the pipeline hasn't been carefully considered in; // years, it should be re-analyzed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:93,Performance,optimiz,optimizing,93,"// Interprocedural constant propagation now that basic cleanup has occurred; // and prior to optimizing globals.; // FIXME: This position in the pipeline hasn't been carefully considered in; // years, it should be re-analyzed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:3,Performance,Optimiz,Optimize,3,// Optimize globals to try and fold them into constants.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:32,Deployability,pipeline,pipeline,32,// Create a small function pass pipeline to cleanup after all the global; // optimizations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:77,Performance,optimiz,optimizations,77,// Create a small function pass pipeline to cleanup after all the global; // optimizations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:29,Security,expose,exposed,29,"// Remove any dead arguments exposed by cleanups, constant folding globals,; // and argument promotion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:3,Performance,Optimiz,Optimize,3,// Optimize globals now that functions are fully simplified.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:49,Usability,simpl,simplified,49,// Optimize globals now that functions are fully simplified.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:332,Deployability,integrat,integrated,332,// The vectorizer may have significantly shortened a loop body; unroll; // again. Unroll small loops to hide loop backedge latency and saturate any; // parallel execution resources of an out-of-order processor. We also then; // need to clean up redundancies and loop invariant code.; // FIXME: It would be really good to use a loop-integrated instruction; // combiner for cleanup here so that the unrolling and LICM can be pipelined; // across the loop nests.; // We do UnrollAndJam in a separate LPM to ensure it happens before unroll,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:423,Deployability,pipeline,pipelined,423,// The vectorizer may have significantly shortened a loop body; unroll; // again. Unroll small loops to hide loop backedge latency and saturate any; // parallel execution resources of an out-of-order processor. We also then; // need to clean up redundancies and loop invariant code.; // FIXME: It would be really good to use a loop-integrated instruction; // combiner for cleanup here so that the unrolling and LICM can be pipelined; // across the loop nests.; // We do UnrollAndJam in a separate LPM to ensure it happens before unroll,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:332,Integrability,integrat,integrated,332,// The vectorizer may have significantly shortened a loop body; unroll; // again. Unroll small loops to hide loop backedge latency and saturate any; // parallel execution resources of an out-of-order processor. We also then; // need to clean up redundancies and loop invariant code.; // FIXME: It would be really good to use a loop-integrated instruction; // combiner for cleanup here so that the unrolling and LICM can be pipelined; // across the loop nests.; // We do UnrollAndJam in a separate LPM to ensure it happens before unroll,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:123,Performance,latency,latency,123,// The vectorizer may have significantly shortened a loop body; unroll; // again. Unroll small loops to hide loop backedge latency and saturate any; // parallel execution resources of an out-of-order processor. We also then; // need to clean up redundancies and loop invariant code.; // FIXME: It would be really good to use a loop-integrated instruction; // combiner for cleanup here so that the unrolling and LICM can be pipelined; // across the loop nests.; // We do UnrollAndJam in a separate LPM to ensure it happens before unroll,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:245,Safety,redund,redundancies,245,// The vectorizer may have significantly shortened a loop body; unroll; // again. Unroll small loops to hide loop backedge latency and saturate any; // parallel execution resources of an out-of-order processor. We also then; // need to clean up redundancies and loop invariant code.; // FIXME: It would be really good to use a loop-integrated instruction; // combiner for cleanup here so that the unrolling and LICM can be pipelined; // across the loop nests.; // We do UnrollAndJam in a separate LPM to ensure it happens before unroll,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:265,Deployability,pipeline,pipeline,265,"// Now that we are done with loop unrolling, be it either by LoopVectorizer,; // or LoopUnroll passes, some variable-offset GEP's into alloca's could have; // become constant-offset, thus enabling SROA and alloca promotion. Do so.; // NOTE: we are very late in the pipeline, and we don't have any LICM; // or SimplifyCFG passes scheduled after us, that would cleanup; // the CFG mess this may created if allowed to modify CFG, so forbid that.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:328,Energy Efficiency,schedul,scheduled,328,"// Now that we are done with loop unrolling, be it either by LoopVectorizer,; // or LoopUnroll passes, some variable-offset GEP's into alloca's could have; // become constant-offset, thus enabling SROA and alloca promotion. Do so.; // NOTE: we are very late in the pipeline, and we don't have any LICM; // or SimplifyCFG passes scheduled after us, that would cleanup; // the CFG mess this may created if allowed to modify CFG, so forbid that.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:108,Modifiability,variab,variable-offset,108,"// Now that we are done with loop unrolling, be it either by LoopVectorizer,; // or LoopUnroll passes, some variable-offset GEP's into alloca's could have; // become constant-offset, thus enabling SROA and alloca promotion. Do so.; // NOTE: we are very late in the pipeline, and we don't have any LICM; // or SimplifyCFG passes scheduled after us, that would cleanup; // the CFG mess this may created if allowed to modify CFG, so forbid that.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:309,Usability,Simpl,SimplifyCFG,309,"// Now that we are done with loop unrolling, be it either by LoopVectorizer,; // or LoopUnroll passes, some variable-offset GEP's into alloca's could have; // become constant-offset, thus enabling SROA and alloca promotion. Do so.; // NOTE: we are very late in the pipeline, and we don't have any LICM; // or SimplifyCFG passes scheduled after us, that would cleanup; // the CFG mess this may created if allowed to modify CFG, so forbid that.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:13,Performance,load,loads,13,// Eliminate loads by forwarding stores from the previous iteration to loads; // of the current iteration.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:71,Performance,load,loads,71,// Eliminate loads by forwarding stores from the previous iteration to loads; // of the current iteration.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:26,Performance,optimiz,optimization,26,// Cleanup after the loop optimization passes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:13,Performance,optimiz,optimization,13,"// At higher optimization levels, try to clean up any runtime overlap and; // alignment checks inserted by the vectorizer. We want to track correlated; // runtime checks for two inner loops in the same outer loop, fold any; // common computations, hoist loop-invariant aspects out of any outer loop,; // and unswitch the runtime checks if possible. Once hoisted, we may have; // dead (or speculatable) control flows or more combining opportunities.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:76,Performance,optimiz,optimizations,76,"// Now that we've formed fast to execute loop structures, we do further; // optimizations. These are run afterward as they might block doing complex; // analyses and transforms such as what are needed for loop vectorization.; // Cleanup after loop vectorization, etc. Simplification passes like CVP and; // GVN, loop transforms, and others have already run, so it's now better to; // convert to more optimized IR using more aggressive simplify CFG options.; // The extra sinking transform can create larger basic blocks, so do this; // before SLP vectorization.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:400,Performance,optimiz,optimized,400,"// Now that we've formed fast to execute loop structures, we do further; // optimizations. These are run afterward as they might block doing complex; // analyses and transforms such as what are needed for loop vectorization.; // Cleanup after loop vectorization, etc. Simplification passes like CVP and; // GVN, loop transforms, and others have already run, so it's now better to; // convert to more optimized IR using more aggressive simplify CFG options.; // The extra sinking transform can create larger basic blocks, so do this; // before SLP vectorization.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:268,Usability,Simpl,Simplification,268,"// Now that we've formed fast to execute loop structures, we do further; // optimizations. These are run afterward as they might block doing complex; // analyses and transforms such as what are needed for loop vectorization.; // Cleanup after loop vectorization, etc. Simplification passes like CVP and; // GVN, loop transforms, and others have already run, so it's now better to; // convert to more optimized IR using more aggressive simplify CFG options.; // The extra sinking transform can create larger basic blocks, so do this; // before SLP vectorization.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:435,Usability,simpl,simplify,435,"// Now that we've formed fast to execute loop structures, we do further; // optimizations. These are run afterward as they might block doing complex; // analyses and transforms such as what are needed for loop vectorization.; // Cleanup after loop vectorization, etc. Simplification passes like CVP and; // GVN, loop transforms, and others have already run, so it's now better to; // convert to more optimized IR using more aggressive simplify CFG options.; // The extra sinking transform can create larger basic blocks, so do this; // before SLP vectorization.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:3,Performance,Optimiz,Optimize,3,// Optimize parallel scalar instruction chains into SIMD instructions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:3,Modifiability,Enhance,Enhance,3,// Enhance/cleanup vector code.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:253,Deployability,integrat,integrated,253,// Unroll small loops to hide loop backedge latency and saturate any; // parallel execution resources of an out-of-order processor. We also then; // need to clean up redundancies and loop invariant code.; // FIXME: It would be really good to use a loop-integrated instruction; // combiner for cleanup here so that the unrolling and LICM can be pipelined; // across the loop nests.; // We do UnrollAndJam in a separate LPM to ensure it happens before unroll,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:344,Deployability,pipeline,pipelined,344,// Unroll small loops to hide loop backedge latency and saturate any; // parallel execution resources of an out-of-order processor. We also then; // need to clean up redundancies and loop invariant code.; // FIXME: It would be really good to use a loop-integrated instruction; // combiner for cleanup here so that the unrolling and LICM can be pipelined; // across the loop nests.; // We do UnrollAndJam in a separate LPM to ensure it happens before unroll,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:253,Integrability,integrat,integrated,253,// Unroll small loops to hide loop backedge latency and saturate any; // parallel execution resources of an out-of-order processor. We also then; // need to clean up redundancies and loop invariant code.; // FIXME: It would be really good to use a loop-integrated instruction; // combiner for cleanup here so that the unrolling and LICM can be pipelined; // across the loop nests.; // We do UnrollAndJam in a separate LPM to ensure it happens before unroll,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:44,Performance,latency,latency,44,// Unroll small loops to hide loop backedge latency and saturate any; // parallel execution resources of an out-of-order processor. We also then; // need to clean up redundancies and loop invariant code.; // FIXME: It would be really good to use a loop-integrated instruction; // combiner for cleanup here so that the unrolling and LICM can be pipelined; // across the loop nests.; // We do UnrollAndJam in a separate LPM to ensure it happens before unroll,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:166,Safety,redund,redundancies,166,// Unroll small loops to hide loop backedge latency and saturate any; // parallel execution resources of an out-of-order processor. We also then; // need to clean up redundancies and loop invariant code.; // FIXME: It would be really good to use a loop-integrated instruction; // combiner for cleanup here so that the unrolling and LICM can be pipelined; // across the loop nests.; // We do UnrollAndJam in a separate LPM to ensure it happens before unroll,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:265,Deployability,pipeline,pipeline,265,"// Now that we are done with loop unrolling, be it either by LoopVectorizer,; // or LoopUnroll passes, some variable-offset GEP's into alloca's could have; // become constant-offset, thus enabling SROA and alloca promotion. Do so.; // NOTE: we are very late in the pipeline, and we don't have any LICM; // or SimplifyCFG passes scheduled after us, that would cleanup; // the CFG mess this may created if allowed to modify CFG, so forbid that.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:328,Energy Efficiency,schedul,scheduled,328,"// Now that we are done with loop unrolling, be it either by LoopVectorizer,; // or LoopUnroll passes, some variable-offset GEP's into alloca's could have; // become constant-offset, thus enabling SROA and alloca promotion. Do so.; // NOTE: we are very late in the pipeline, and we don't have any LICM; // or SimplifyCFG passes scheduled after us, that would cleanup; // the CFG mess this may created if allowed to modify CFG, so forbid that.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:108,Modifiability,variab,variable-offset,108,"// Now that we are done with loop unrolling, be it either by LoopVectorizer,; // or LoopUnroll passes, some variable-offset GEP's into alloca's could have; // become constant-offset, thus enabling SROA and alloca promotion. Do so.; // NOTE: we are very late in the pipeline, and we don't have any LICM; // or SimplifyCFG passes scheduled after us, that would cleanup; // the CFG mess this may created if allowed to modify CFG, so forbid that.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:309,Usability,Simpl,SimplifyCFG,309,"// Now that we are done with loop unrolling, be it either by LoopVectorizer,; // or LoopUnroll passes, some variable-offset GEP's into alloca's could have; // become constant-offset, thus enabling SROA and alloca promotion. Do so.; // NOTE: we are very late in the pipeline, and we don't have any LICM; // or SimplifyCFG passes scheduled after us, that would cleanup; // the CFG mess this may created if allowed to modify CFG, so forbid that.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:10,Availability,avail,avail,10,"// Remove avail extern fns and globals definitions since we aren't compiling; // an object file for later LTO. For LTO we want to preserve these so they; // are eligible for inlining at link-time. Note if they are unreferenced they; // will be removed by GlobalDCE later, so this only impacts referenced; // available externally globals. Eventually they will be suppressed during; // codegen, but eliminating here enables more opportunity for GlobalDCE as it; // may make globals referenced by available external functions dead and saves; // running remaining passes on the eliminated functions. These should be; // preserved during prelinking for link-time inlining decisions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:308,Availability,avail,available,308,"// Remove avail extern fns and globals definitions since we aren't compiling; // an object file for later LTO. For LTO we want to preserve these so they; // are eligible for inlining at link-time. Note if they are unreferenced they; // will be removed by GlobalDCE later, so this only impacts referenced; // available externally globals. Eventually they will be suppressed during; // codegen, but eliminating here enables more opportunity for GlobalDCE as it; // may make globals referenced by available external functions dead and saves; // running remaining passes on the eliminated functions. These should be; // preserved during prelinking for link-time inlining decisions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:494,Availability,avail,available,494,"// Remove avail extern fns and globals definitions since we aren't compiling; // an object file for later LTO. For LTO we want to preserve these so they; // are eligible for inlining at link-time. Note if they are unreferenced they; // will be removed by GlobalDCE later, so this only impacts referenced; // available externally globals. Eventually they will be suppressed during; // codegen, but eliminating here enables more opportunity for GlobalDCE as it; // may make globals referenced by available external functions dead and saves; // running remaining passes on the eliminated functions. These should be; // preserved during prelinking for link-time inlining decisions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:140,Performance,optimiz,optimization,140,// Do RPO function attribute inference across the module to forward-propagate; // attributes where applicable.; // FIXME: Is this really an optimization rather than a canonicalization?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:3,Energy Efficiency,Schedul,Scheduling,3,"// Scheduling LoopVersioningLICM when inlining is over, because after that; // we may see more accurate aliasing. Reason to run this late is that too; // early versioning may prevent further inlining due to increase of code; // size. Other optimizations which runs later might get benefit of no-alias; // assumption in clone loop.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:240,Performance,optimiz,optimizations,240,"// Scheduling LoopVersioningLICM when inlining is over, because after that; // we may see more accurate aliasing. Reason to run this late is that too; // early versioning may prevent further inlining due to increase of code; // size. Other optimizations which runs later might get benefit of no-alias; // assumption in clone loop.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:35,Performance,optimiz,optimizations,35,"// FIXME: We need to run some loop optimizations to re-rotate loops after; // simplifycfg and others undo their rotation.; // Optimize the loop execution. These passes operate on entire loop nests; // rather than on each loop in an inside-out manner, and so they are actually; // function passes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:126,Performance,Optimiz,Optimize,126,"// FIXME: We need to run some loop optimizations to re-rotate loops after; // simplifycfg and others undo their rotation.; // Optimize the loop execution. These passes operate on entire loop nests; // rather than on each loop in an inside-out manner, and so they are actually; // function passes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:78,Usability,simpl,simplifycfg,78,"// FIXME: We need to run some loop optimizations to re-rotate loops after; // simplifycfg and others undo their rotation.; // Optimize the loop execution. These passes operate on entire loop nests; // rather than on each loop in an inside-out manner, and so they are actually; // function passes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:101,Usability,undo,undo,101,"// FIXME: We need to run some loop optimizations to re-rotate loops after; // simplifycfg and others undo their rotation.; // Optimize the loop execution. These passes operate on entire loop nests; // rather than on each loop in an inside-out manner, and so they are actually; // function passes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:223,Deployability,pipeline,pipeline,223,"// Some loops may have become dead by now. Try to delete them.; // FIXME: see discussion in https://reviews.llvm.org/D112851,; // this may need to be revisited once we run GVN before loop deletion; // in the simplification pipeline.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:208,Usability,simpl,simplification,208,"// Some loops may have become dead by now. Try to delete them.; // FIXME: see discussion in https://reviews.llvm.org/D112851,; // this may need to be revisited once we run GVN before loop deletion; // in the simplification pipeline.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:65,Integrability,depend,dependences,65,// Distribute loops to allow partial vectorization. I.e. isolate dependences; // into separate loop that would otherwise inhibit vectorization. This is; // currently only performed for loops marked with the metadata; // llvm.loop.distribute=true or when -enable-loop-distribute is specified.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:171,Performance,perform,performed,171,// Distribute loops to allow partial vectorization. I.e. isolate dependences; // into separate loop that would otherwise inhibit vectorization. This is; // currently only performed for loops marked with the metadata; // llvm.loop.distribute=true or when -enable-loop-distribute is specified.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:116,Performance,optimiz,optimizations,116,"// LoopSink pass sinks instructions hoisted by LICM, which serves as a; // canonicalization pass that enables other optimizations. As a result,; // LoopSink pass needs to be a very late IR pass to avoid undoing LICM; // result too early.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:197,Safety,avoid,avoid,197,"// LoopSink pass sinks instructions hoisted by LICM, which serves as a; // canonicalization pass that enables other optimizations. As a result,; // LoopSink pass needs to be a very late IR pass to avoid undoing LICM; // result too early.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:203,Usability,undo,undoing,203,"// LoopSink pass sinks instructions hoisted by LICM, which serves as a; // canonicalization pass that enables other optimizations. As a result,; // LoopSink pass needs to be a very late IR pass to avoid undoing LICM; // result too early.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:90,Safety,avoid,avoid,90,"// This hoists/decomposes div/rem ops. It should run after other sink/hoist; // passes to avoid re-sinking, but before SimplifyCFG because it can allow; // flattening of blocks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:119,Usability,Simpl,SimplifyCFG,119,"// This hoists/decomposes div/rem ops. It should run after other sink/hoist; // passes to avoid re-sinking, but before SimplifyCFG because it can allow; // flattening of blocks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:50,Performance,optimiz,optimization,50,// Try to annotate calls that were created during optimization.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:50,Usability,simpl,simplifyCFG,50,// LoopSink (and other loop passes since the last simplifyCFG) might have; // resulted in single-entry-single-exit or empty blocks. Clean up the CFG.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:27,Deployability,pipeline,pipeline,27,// Add the core optimizing pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:16,Performance,optimiz,optimizing,16,// Add the core optimizing pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:86,Performance,optimiz,optimizations,86,// Split out cold code. Splitting is done late to avoid hiding context from; // other optimizations and inadvertently regressing performance. The tradeoff; // is that this has a higher code size cost than splitting early.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:129,Performance,perform,performance,129,// Split out cold code. Splitting is done late to avoid hiding context from; // other optimizations and inadvertently regressing performance. The tradeoff; // is that this has a higher code size cost than splitting early.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:50,Safety,avoid,avoid,50,// Split out cold code. Splitting is done late to avoid hiding context from; // other optimizations and inadvertently regressing performance. The tradeoff; // is that this has a higher code size cost than splitting early.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:136,Deployability,pipeline,pipeline,136,// Now we need to do some global optimization transforms.; // FIXME: It would seem like these should come first in the optimization; // pipeline and maybe be the bottom of the canonicalization pipeline? Weird; // ordering here.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:193,Deployability,pipeline,pipeline,193,// Now we need to do some global optimization transforms.; // FIXME: It would seem like these should come first in the optimization; // pipeline and maybe be the bottom of the canonicalization pipeline? Weird; // ordering here.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:33,Performance,optimiz,optimization,33,// Now we need to do some global optimization transforms.; // FIXME: It would seem like these should come first in the optimization; // pipeline and maybe be the bottom of the canonicalization pipeline? Weird; // ordering here.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:119,Performance,optimiz,optimization,119,// Now we need to do some global optimization transforms.; // FIXME: It would seem like these should come first in the optimization; // pipeline and maybe be the bottom of the canonicalization pipeline? Weird; // ordering here.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:57,Deployability,pipeline,pipeline,57,// Force any function attributes we want the rest of the pipeline to observe.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:16,Deployability,pipeline,pipeline,16,// Apply module pipeline start EP callback.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:31,Deployability,pipeline,pipeline,31,// Add the core simplification pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:16,Usability,simpl,simplification,16,// Add the core simplification pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:28,Deployability,pipeline,pipeline,28,// Now add the optimization pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:15,Performance,optimiz,optimization,15,// Now add the optimization pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:29,Deployability,pipeline,pipeline,29,// Use the ThinLTO post-link pipeline with sample profiling,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:30,Performance,optimiz,optimization,30,"// otherwise, just use module optimization",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:57,Deployability,pipeline,pipeline,57,// Force any function attributes we want the rest of the pipeline to observe.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:16,Deployability,pipeline,pipeline,16,// Apply module pipeline start EP callback.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:25,Performance,perform,perform,25,"// If we are planning to perform ThinLTO later, we don't bloat the code with; // unrolling/vectorization/... now. Just simplify the module as much as we; // can.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:119,Usability,simpl,simplify,119,"// If we are planning to perform ThinLTO later, we don't bloat the code with; // unrolling/vectorization/... now. Just simplify the module as much as we; // can.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:351,Availability,avail,available,351,"// Run partial inlining pass to partially inline functions that have; // large bodies.; // FIXME: It isn't clear whether this is really the right place to run this; // in ThinLTO. Because there is another canonicalization and simplification; // phase that will run after the thin link, running this here ends up with; // less information than will be available later and it may grow functions in; // ways that aren't beneficial.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:107,Usability,clear,clear,107,"// Run partial inlining pass to partially inline functions that have; // large bodies.; // FIXME: It isn't clear whether this is really the right place to run this; // in ThinLTO. Because there is another canonicalization and simplification; // phase that will run after the thin link, running this here ends up with; // less information than will be available later and it may grow functions in; // ways that aren't beneficial.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:226,Usability,simpl,simplification,226,"// Run partial inlining pass to partially inline functions that have; // large bodies.; // FIXME: It isn't clear whether this is really the right place to run this; // in ThinLTO. Because there is another canonicalization and simplification; // phase that will run after the thin link, running this here ends up with; // less information than will be available later and it may grow functions in; // ways that aren't beneficial.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:10,Performance,Optimiz,Optimizer,10,"// Handle Optimizer{Early,Last}EPCallbacks added by clang on PreLink. Actual; // optimization is going to be done in PostLink stage, but clang can't add; // callbacks there in case of in-process ThinLTO called by linker.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:81,Performance,optimiz,optimization,81,"// Handle Optimizer{Early,Last}EPCallbacks added by clang on PreLink. Actual; // optimization is going to be done in PostLink stage, but clang can't add; // callbacks there in case of in-process ThinLTO called by linker.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:231,Integrability,depend,dependencies,231,"// These passes import type identifier resolutions for whole-program; // devirtualization and CFI. They must run early because other passes may; // disturb the specific instruction patterns that these passes look for,; // creating dependencies on resolutions that may not appear in the summary.; //; // For example, GVN may transform the pattern assume(type.test) appearing in; // two basic blocks into assume(phi(type.test, type.test)), which would; // transform a dependency on a WPD resolution into a dependency on a type; // identifier resolution for CFI.; //; // Also, WPD has access to more precise information than ICP and can; // devirtualize more effectively, so it should operate on the IR first.; //; // The WPD and LowerTypeTest passes need to run at -O0 to lower type; // metadata and intrinsics.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:466,Integrability,depend,dependency,466,"// These passes import type identifier resolutions for whole-program; // devirtualization and CFI. They must run early because other passes may; // disturb the specific instruction patterns that these passes look for,; // creating dependencies on resolutions that may not appear in the summary.; //; // For example, GVN may transform the pattern assume(type.test) appearing in; // two basic blocks into assume(phi(type.test, type.test)), which would; // transform a dependency on a WPD resolution into a dependency on a type; // identifier resolution for CFI.; //; // Also, WPD has access to more precise information than ICP and can; // devirtualize more effectively, so it should operate on the IR first.; //; // The WPD and LowerTypeTest passes need to run at -O0 to lower type; // metadata and intrinsics.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:504,Integrability,depend,dependency,504,"// These passes import type identifier resolutions for whole-program; // devirtualization and CFI. They must run early because other passes may; // disturb the specific instruction patterns that these passes look for,; // creating dependencies on resolutions that may not appear in the summary.; //; // For example, GVN may transform the pattern assume(type.test) appearing in; // two basic blocks into assume(phi(type.test, type.test)), which would; // transform a dependency on a WPD resolution into a dependency on a type; // identifier resolution for CFI.; //; // Also, WPD has access to more precise information than ICP and can; // devirtualize more effectively, so it should operate on the IR first.; //; // The WPD and LowerTypeTest passes need to run at -O0 to lower type; // metadata and intrinsics.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:582,Security,access,access,582,"// These passes import type identifier resolutions for whole-program; // devirtualization and CFI. They must run early because other passes may; // disturb the specific instruction patterns that these passes look for,; // creating dependencies on resolutions that may not appear in the summary.; //; // For example, GVN may transform the pattern assume(type.test) appearing in; // two basic blocks into assume(phi(type.test, type.test)), which would; // transform a dependency on a WPD resolution into a dependency on a type; // identifier resolution for CFI.; //; // Also, WPD has access to more precise information than ICP and can; // devirtualize more effectively, so it should operate on the IR first.; //; // The WPD and LowerTypeTest passes need to run at -O0 to lower type; // metadata and intrinsics.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:358,Testability,test,test,358,"// These passes import type identifier resolutions for whole-program; // devirtualization and CFI. They must run early because other passes may; // disturb the specific instruction patterns that these passes look for,; // creating dependencies on resolutions that may not appear in the summary.; //; // For example, GVN may transform the pattern assume(type.test) appearing in; // two basic blocks into assume(phi(type.test, type.test)), which would; // transform a dependency on a WPD resolution into a dependency on a type; // identifier resolution for CFI.; //; // Also, WPD has access to more precise information than ICP and can; // devirtualize more effectively, so it should operate on the IR first.; //; // The WPD and LowerTypeTest passes need to run at -O0 to lower type; // metadata and intrinsics.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:419,Testability,test,test,419,"// These passes import type identifier resolutions for whole-program; // devirtualization and CFI. They must run early because other passes may; // disturb the specific instruction patterns that these passes look for,; // creating dependencies on resolutions that may not appear in the summary.; //; // For example, GVN may transform the pattern assume(type.test) appearing in; // two basic blocks into assume(phi(type.test, type.test)), which would; // transform a dependency on a WPD resolution into a dependency on a type; // identifier resolution for CFI.; //; // Also, WPD has access to more precise information than ICP and can; // devirtualize more effectively, so it should operate on the IR first.; //; // The WPD and LowerTypeTest passes need to run at -O0 to lower type; // metadata and intrinsics.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:430,Testability,test,test,430,"// These passes import type identifier resolutions for whole-program; // devirtualization and CFI. They must run early because other passes may; // disturb the specific instruction patterns that these passes look for,; // creating dependencies on resolutions that may not appear in the summary.; //; // For example, GVN may transform the pattern assume(type.test) appearing in; // two basic blocks into assume(phi(type.test, type.test)), which would; // transform a dependency on a WPD resolution into a dependency on a type; // identifier resolution for CFI.; //; // Also, WPD has access to more precise information than ICP and can; // devirtualize more effectively, so it should operate on the IR first.; //; // The WPD and LowerTypeTest passes need to run at -O0 to lower type; // metadata and intrinsics.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:42,Testability,test,tests,42,// Run a second time to clean up any type tests left behind by WPD for use; // in ICP.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:102,Safety,avoid,avoid,102,// Drop available_externally and unreferenced globals. This is necessary; // with ThinLTO in order to avoid leaving undefined references to dead; // globals in the object file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:31,Deployability,pipeline,pipeline,31,// Add the core simplification pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:16,Usability,simpl,simplification,16,// Add the core simplification pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:28,Deployability,pipeline,pipeline,28,// Now add the optimization pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:15,Performance,optimiz,optimization,15,// Now add the optimization pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:46,Deployability,pipeline,pipeline,46,// FIXME: We should use a customized pre-link pipeline!,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:26,Performance,perform,performs,26,// Create a function that performs CFI checks for cross-DSO calls with targets; // in the current module.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:42,Testability,test,tests,42,// Run a second time to clean up any type tests left behind by WPD for use; // in ICP.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:59,Deployability,pipeline,pipeline,59,// Load sample profile before running the LTO optimization pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:3,Performance,Load,Load,3,// Load sample profile before running the LTO optimization pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:46,Performance,optimiz,optimization,46,// Load sample profile before running the LTO optimization pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:3,Performance,Cache,Cache,3,// Cache ProfileSummaryAnalysis once to avoid the potential need to insert; // RequireAnalysisPass for PSI before subsequent non-module passes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:40,Safety,avoid,avoid,40,// Cache ProfileSummaryAnalysis once to avoid the potential need to insert; // RequireAnalysisPass for PSI before subsequent non-module passes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:21,Performance,optimiz,optimizations,21,"// Try to run OpenMP optimizations, quick no-op if no OpenMP metadata present.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:140,Performance,optimiz,optimization,140,// Do RPO function attribute inference across the module to forward-propagate; // attributes where applicable.; // FIXME: Is this really an optimization rather than a canonicalization?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:21,Performance,optimiz,optimization,21,// Run whole program optimization of virtual call when the list of callees; // is fixed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:79,Testability,test,test,79,// The LowerTypeTestsPass needs to run to lower type metadata and the; // type.test intrinsics. The pass does nothing if CFI is disabled.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:147,Deployability,pipeline,pipeline,147,// Run a second time to clean up any type tests left behind by WPD for use; // in ICP (which is performed earlier than this in the regular LTO; // pipeline).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:96,Performance,perform,performed,96,// Run a second time to clean up any type tests left behind by WPD for use; // in ICP (which is performed earlier than this in the regular LTO; // pipeline).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:42,Testability,test,tests,42,// Run a second time to clean up any type tests left behind by WPD for use; // in ICP (which is performed earlier than this in the regular LTO; // pipeline).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:3,Performance,Optimiz,Optimize,3,// Optimize globals to try and fold them into constants.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:3,Energy Efficiency,Reduce,Reduce,3,"// Reduce the code after globalopt and ipsccp. Both can open up significant; // simplification opportunities, and both can propagate functions through; // function pointers. When this happens, we often have to resolve varargs; // calls, etc, so let instcombine do this.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:80,Usability,simpl,simplification,80,"// Reduce the code after globalopt and ipsccp. Both can open up significant; // simplification opportunities, and both can propagate functions through; // function pointers. When this happens, we often have to resolve varargs; // calls, etc, so let instcombine do this.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:138,Usability,clear,clear,138,"// Note: historically, the PruneEH pass was run first to deduce nounwind and; // generally clean up exception handling overhead. It isn't clear this is; // valuable as the inliner doesn't currently care whether it is inlining an; // invoke or a call.; // Run the inliner now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:67,Energy Efficiency,reduce,reduce,67,"// Perform context disambiguation after inlining, since that would reduce the; // amount of additional cloning required to distinguish the allocation; // contexts.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:3,Performance,Perform,Perform,3,"// Perform context disambiguation after inlining, since that would reduce the; // amount of additional cloning required to distinguish the allocation; // contexts.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:3,Performance,Optimiz,Optimize,3,// Optimize globals again after we ran the inliner.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:45,Performance,optimiz,optimizations,45,// Run the OpenMPOpt pass again after global optimizations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:23,Performance,optimiz,optimizations,23,// Run a few AA driver optimizations here and now to cleanup the code.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:73,Availability,avail,available,73,// Invalidate AAManager so it can be recreated and pick up the newly; // available GlobalsAA.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:59,Performance,perform,perform,59,// FIXME: Add loop interchange.; // Unroll small loops and perform peeling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:96,Security,integrity,integrity,96,// Lower type metadata and the type.test intrinsic. This pass supports; // clang's control flow integrity mechanisms (-fsanitize=cfi*) and needs; // to be run at link time if CFI is enabled. This pass does nothing if; // CFI is disabled.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:36,Testability,test,test,36,// Lower type metadata and the type.test intrinsic. This pass supports; // clang's control flow integrity mechanisms (-fsanitize=cfi*) and needs; // to be run at link time if CFI is enabled. This pass does nothing if; // CFI is disabled.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:143,Deployability,pipeline,pipeline,143,// Run a second time to clean up any type tests left behind by WPD for use; // in ICP (which is performed earlier than this in the regular LTO pipeline).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:96,Performance,perform,performed,96,// Run a second time to clean up any type tests left behind by WPD for use; // in ICP (which is performed earlier than this in the regular LTO pipeline).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:42,Testability,test,tests,42,// Run a second time to clean up any type tests left behind by WPD for use; // in ICP (which is performed earlier than this in the regular LTO pipeline).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:50,Deployability,pipeline,pipeline,50,// Enable splitting late in the FullLTO post-link pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:16,Performance,optimiz,optimization,16,// Add late LTO optimization passes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:116,Performance,optimiz,optimizations,116,"// LoopSink pass sinks instructions hoisted by LICM, which serves as a; // canonicalization pass that enables other optimizations. As a result,; // LoopSink pass needs to be a very late IR pass to avoid undoing LICM; // result too early.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:197,Safety,avoid,avoid,197,"// LoopSink pass sinks instructions hoisted by LICM, which serves as a; // canonicalization pass that enables other optimizations. As a result,; // LoopSink pass needs to be a very late IR pass to avoid undoing LICM; // result too early.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:203,Usability,undo,undoing,203,"// LoopSink pass sinks instructions hoisted by LICM, which serves as a; // canonicalization pass that enables other optimizations. As a result,; // LoopSink pass needs to be a very late IR pass to avoid undoing LICM; // result too early.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:90,Safety,avoid,avoid,90,"// This hoists/decomposes div/rem ops. It should run after other sink/hoist; // passes to avoid re-sinking, but before SimplifyCFG because it can allow; // flattening of blocks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:119,Usability,Simpl,SimplifyCFG,119,"// This hoists/decomposes div/rem ops. It should run after other sink/hoist; // passes to avoid re-sinking, but before SimplifyCFG because it can allow; // flattening of blocks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:30,Performance,optimiz,optimization,30,"// Delete basic blocks, which optimization passes may have killed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:18,Availability,avail,available,18,// Drop bodies of available eternally objects to improve GlobalDCE.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:20,Performance,optimiz,optimized,20,"// Now that we have optimized the program, discard unreachable functions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:3,Performance,Perform,Perform,3,"// Perform pseudo probe instrumentation in O0 mode. This is for the; // consistency between different build modes. For example, a LTO build can be; // mixed with an O0 prelink and an O2 postlink. Loading a sample profile in; // the postlink will require pseudo probe instrumentation in the prelink.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:196,Performance,Load,Loading,196,"// Perform pseudo probe instrumentation in O0 mode. This is for the; // consistency between different build modes. For example, a LTO build can be; // mixed with an O0 prelink and an O2 postlink. Loading a sample profile in; // the postlink will require pseudo probe instrumentation in the prelink.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:19,Deployability,pipeline,pipeline,19,"// Build a minimal pipeline based on the semantics required by LLVM,; // which is just that always inlining occurs. Further, disable generating; // lifetime intrinsics to avoid enabling further optimizations during; // code generation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:194,Performance,optimiz,optimizations,194,"// Build a minimal pipeline based on the semantics required by LLVM,; // which is just that always inlining occurs. Further, disable generating; // lifetime intrinsics to avoid enabling further optimizations during; // code generation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:171,Safety,avoid,avoid,171,"// Build a minimal pipeline based on the semantics required by LLVM,; // which is just that always inlining occurs. Further, disable generating; // lifetime intrinsics to avoid enabling further optimizations during; // code generation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:196,Testability,log,logic,196,"// The order in which these are registered determines their priority when; // being queried.; // First we register the basic alias analysis that provides the majority of; // per-function local AA logic. This is a stateless, on-demand local set of; // AA techniques.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:55,Integrability,wrap,wrap,55,"// Next we query fast, specialized alias analyses that wrap IR-embedded; // information about aliasing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:61,Availability,avail,available,61,"// Add support for querying global aliasing information when available.; // Because the `AAManager` is a function analysis and `GlobalsAA` is a module; // analysis, all that the `AAManager` can do is query for any *cached*; // results from `GlobalsAA` through a readonly proxy.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp:215,Performance,cache,cached,215,"// Add support for querying global aliasing information when available.; // Because the `AAManager` is a function analysis and `GlobalsAA` is a module; // analysis, all that the `AAManager` can do is query for any *cached*; // results from `GlobalsAA` through a readonly proxy.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassBuilderPipelines.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassPlugin.cpp:46,Modifiability,Plugin,Plugins,46,"//===- lib/Passes/PassPluginLoader.cpp - Load Plugins for New PM Passes ---===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassPlugin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassPlugin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassPlugin.cpp:41,Performance,Load,Load,41,"//===- lib/Passes/PassPluginLoader.cpp - Load Plugins for New PM Passes ---===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassPlugin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassPlugin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassPlugin.cpp:71,Modifiability,plugin,plugin,71,// llvmGetPassPluginInfo should be resolved to the definition from the plugin; // we are currently loading.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassPlugin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassPlugin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassPlugin.cpp:99,Performance,load,loading,99,// llvmGetPassPluginInfo should be resolved to the definition from the plugin; // we are currently loading.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassPlugin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassPlugin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassPlugin.cpp:80,Availability,error,error,80,"// If the symbol isn't found, this is probably a legacy plugin, which is an; // error",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassPlugin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassPlugin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassPlugin.cpp:56,Modifiability,plugin,plugin,56,"// If the symbol isn't found, this is probably a legacy plugin, which is an; // error",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/PassPlugin.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/PassPlugin.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp:110,Deployability,pipeline,pipeline,110,"// An option for specifying an executable that will be called with the IR; // everytime it changes in the opt pipeline. It will also be called on; // the initial IR as it enters the pipeline. The executable will be passed; // the name of a temporary file containing the IR and the PassID. This may; // be used, for example, to call llc on the IR and run a test to determine; // which pass makes a change that changes the functioning of the IR.; // The usual modifier options work as expected.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp:182,Deployability,pipeline,pipeline,182,"// An option for specifying an executable that will be called with the IR; // everytime it changes in the opt pipeline. It will also be called on; // the initial IR as it enters the pipeline. The executable will be passed; // the name of a temporary file containing the IR and the PassID. This may; // be used, for example, to call llc on the IR and run a test to determine; // which pass makes a change that changes the functioning of the IR.; // The usual modifier options work as expected.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp:356,Testability,test,test,356,"// An option for specifying an executable that will be called with the IR; // everytime it changes in the opt pipeline. It will also be called on; // the initial IR as it enters the pipeline. The executable will be passed; // the name of a temporary file containing the IR and the PassID. This may; // be used, for example, to call llc on the IR and run a test to determine; // which pass makes a change that changes the functioning of the IR.; // The usual modifier options work as expected.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp:64,Integrability,wrap,wrapped,64,/// Generic IR-printing helper that unpacks a pointer to IRUnit wrapped into; /// Any and does actual print job.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp:97,Integrability,rout,routines,97,// Always print the module.; // Unwrap and print directly to avoid filtering problems in general routines.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp:61,Safety,avoid,avoid,61,// Always print the module.; // Unwrap and print directly to avoid filtering problems in general routines.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp:104,Integrability,rout,routines,104,// Always test the initial module.; // Unwrap and print directly to avoid filtering problems in general routines.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp:68,Safety,avoid,avoid,68,// Always test the initial module.; // Unwrap and print directly to avoid filtering problems in general routines.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp:10,Testability,test,test,10,// Always test the initial module.; // Unwrap and print directly to avoid filtering problems in general routines.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp:17,Performance,queue,queued,17,// Print out any queued up new sections,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp:358,Performance,queue,queued,358,"// Print out the data in the after order, with before ones interspersed; // appropriately (ie, somewhere near where they were in the before list).; // Start at the beginning of both lists. Loop through the; // after list. If an element is common, then advance in the before list; // reporting the removed ones until the common one is reached. Report any; // queued up new ones and then report the common one. If an element is not; // common, then enqueue it for reporting. When the after list is exhausted,; // loop through the before list, reporting any removed ones. Finally,; // report the rest of the enqueued new ones.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp:42,Performance,queue,queue,42,// This section is new so place it in the queue. This will cause it; // to be reported after deleted sections.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp:37,Performance,queue,queued,37,// Report any new sections that were queued up and waiting.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp:142,Deployability,pipeline,pipeline,142,"// Saving Module for AfterPassInvalidated operations.; // Note: here we rely on a fact that we do not change modules while; // traversing the pipeline, so the latest captured module is good; // for all print operations that has not happen yet.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp:599,Availability,avail,available,599,"// PreservedCFGCheckerInstrumentation uses PreservedCFGCheckerAnalysis to check; // passes, that reported they kept CFG analyses up-to-date, did not actually; // change CFG. This check is done as follows. Before every functional pass in; // BeforeNonSkippedPassCallback a CFG snapshot (an instance of; // PreservedCFGCheckerInstrumentation::CFG) is requested from; // FunctionAnalysisManager as a result of PreservedCFGCheckerAnalysis. When the; // functional pass finishes and reports that CFGAnalyses or AllAnalyses are; // up-to-date then the cached result of PreservedCFGCheckerAnalysis (if; // available) is checked to be equal to a freshly created CFG snapshot.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp:546,Performance,cache,cached,546,"// PreservedCFGCheckerInstrumentation uses PreservedCFGCheckerAnalysis to check; // passes, that reported they kept CFG analyses up-to-date, did not actually; // change CFG. This check is done as follows. Before every functional pass in; // BeforeNonSkippedPassCallback a CFG snapshot (an instance of; // PreservedCFGCheckerInstrumentation::CFG) is requested from; // FunctionAnalysisManager as a result of PreservedCFGCheckerAnalysis. When the; // functional pass finishes and reports that CFGAnalyses or AllAnalyses are; // up-to-date then the cached result of PreservedCFGCheckerAnalysis (if; // available) is checked to be equal to a freshly created CFG snapshot.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp:37,Availability,avail,available,37,// Make sure a fresh CFG snapshot is available before the pass.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp:107,Performance,cache,cached,107,"// We have to get the FAM via the MAM, rather than directly use a passed in; // FAM because if MAM has not cached the FAM, it won't invalidate function; // analyses in FAM.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp:187,Integrability,rout,routines,187,"// Place to collect all of the edges. Once they are all in the vector,; // the vector will not reallocate so then we can use pointers to them,; // which are required by the graph writing routines.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp:3,Safety,Safe,Safeguard,3,// Safeguard adding of edges.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp:125,Integrability,rout,routines,125,"// Record the index of the entry node. At this point, we can build up; // vectors of pointers that are required by the graph routines.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp:36,Safety,avoid,avoid,36,// Return the node at index \p N to avoid problems with vectors reallocating.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp:48,Availability,redundant,redundant,48,// drop predecessors as they can be big and are redundant,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp:48,Safety,redund,redundant,48,// drop predecessors as they can be big and are redundant,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp:48,Availability,redundant,redundant,48,// drop predecessors as they can be big and are redundant,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp:48,Safety,redund,redundant,48,// drop predecessors as they can be big and are redundant,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp:94,Availability,alive,alive,94,// Called by signal handlers so do not lock here; // Is the PrintCrashIRInstrumentation still alive?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Passes/StandardInstrumentations.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/GCOV.cpp:403,Integrability,interface,interface,403,"//===- GCOV.cpp - LLVM coverage tool --------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // GCOV implements the interface to read and write coverage files that use; // 'gcov' format.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/GCOV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/GCOV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/GCOV.cpp:10,Availability,avail,available,10,// Mark u available for cycle detection,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/GCOV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/GCOV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/GCOV.cpp:30,Safety,detect,detection,30,// Mark u available for cycle detection,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/GCOV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/GCOV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/GCOV.cpp:46,Energy Efficiency,reduce,reduced,46,// Ignore saturated arcs (cycleCount has been reduced to 0) and visited; // blocks. Ignore self arcs to guard against bad input (.gcno has no; // self arcs).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/GCOV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/GCOV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/GCOV.cpp:215,Performance,perform,perform,215,"// Get the total execution count of loops among blocks on the same line.; // Assuming a reducible flow graph, the count is the sum of back edge counts.; // Identifying loops is complex, so we simply find cycles and perform cycle; // cancelling iteratively.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/GCOV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/GCOV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/GCOV.cpp:192,Usability,simpl,simply,192,"// Get the total execution count of loops among blocks on the same line.; // Assuming a reducible flow graph, the count is the sum of back edge counts.; // Identifying loops is complex, so we simply find cycles and perform cycle; // cancelling iteratively.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/GCOV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/GCOV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/GCOV.cpp:67,Usability,clear,cleared,67,"// If there is no more loop, all traversable bits should have been cleared.; // This property is needed by subsequent calls.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/GCOV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/GCOV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/GCOV.cpp:61,Performance,concurren,concurrent,61,// Open source files without requiring a NUL terminator. The concurrent; // modification may nullify the NUL terminator condition.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/GCOV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/GCOV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp:15,Availability,error,error,15,"// If optional error message is not empty, append it to the message.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp:21,Integrability,message,message,21,"// If optional error message is not empty, append it to the message.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp:60,Integrability,message,message,60,"// If optional error message is not empty, append it to the message.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp:69,Availability,Error,Error,69,"// FIXME: This class is only here to support the transition to llvm::Error. It; // will be removed once this transition is complete. Clients should prefer to; // deal with the Error value directly, rather than converting to error_code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp:176,Availability,Error,Error,176,"// FIXME: This class is only here to support the transition to llvm::Error. It; // will be removed once this transition is complete. Clients should prefer to; // deal with the Error value directly, rather than converting to error_code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp:95,Performance,optimiz,optimization,95,"// Returns the PGO object name. This function has some special handling; // when called in LTO optimization. The following only applies when calling in; // LTO passes (when \c InLTO is true): LTO's internalization privatizes many; // global linkage symbols. This happens after value profile annotation, but; // those internal linkage functions should not have a source prefix.; // Additionally, for ThinLTO mode, exported internal functions are promoted; // and renamed. We need to ensure that the original internal PGO name is; // used when computing the GUID that is compared against the profiled GUIDs.; // To differentiate compiler generated internal symbols from original ones,; // PGOFuncName meta data are created and attached to the original internal; // symbols in the value profile annotation step; // (PGOUseFunc::annotateIndirectCallSites). If a symbol does not have the meta; // data, its original linkage must be non-internal.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp:556,Usability,GUID,GUID,556,"// Returns the PGO object name. This function has some special handling; // when called in LTO optimization. The following only applies when calling in; // LTO passes (when \c InLTO is true): LTO's internalization privatizes many; // global linkage symbols. This happens after value profile annotation, but; // those internal linkage functions should not have a source prefix.; // Additionally, for ThinLTO mode, exported internal functions are promoted; // and renamed. We need to ensure that the original internal PGO name is; // used when computing the GUID that is compared against the profiled GUIDs.; // To differentiate compiler generated internal symbols from original ones,; // PGOFuncName meta data are created and attached to the original internal; // symbols in the value profile annotation step; // (PGOUseFunc::annotateIndirectCallSites). If a symbol does not have the meta; // data, its original linkage must be non-internal.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp:599,Usability,GUID,GUIDs,599,"// Returns the PGO object name. This function has some special handling; // when called in LTO optimization. The following only applies when calling in; // LTO passes (when \c InLTO is true): LTO's internalization privatizes many; // global linkage symbols. This happens after value profile annotation, but; // those internal linkage functions should not have a source prefix.; // Additionally, for ThinLTO mode, exported internal functions are promoted; // and renamed. We need to ensure that the original internal PGO name is; // used when computing the GUID that is compared against the profiled GUIDs.; // To differentiate compiler generated internal symbols from original ones,; // PGOFuncName meta data are created and attached to the original internal; // symbols in the value profile annotation step; // (PGOUseFunc::annotateIndirectCallSites). If a symbol does not have the meta; // data, its original linkage must be non-internal.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp:84,Performance,optimiz,optimization,84,// Returns the IRPGO function name and does special handling when called; // in LTO optimization. See the comments of `getIRPGOObjectName` for details.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp:76,Security,hash,hash,76,// If the number of counters doesn't match we either have bad data; // or a hash collision.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp:80,Security,hash,hash,80,// If the number of bitmap bytes doesn't match we either have bad data; // or a hash collision.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp:30,Usability,simpl,simply,30,// Bitmap bytes are merged by simply ORing them together.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp:33,Security,hash,hash,33,// Map indirect call target name hash to name string.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp:114,Energy Efficiency,adapt,adaptors,114,/*!; * ValueProfRecordClosure Interface implementation for InstrProfRecord; * class. These C wrappers are used as adaptors so that C++ code can be; * invoked as callbacks.; */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp:30,Integrability,Interface,Interface,30,/*!; * ValueProfRecordClosure Interface implementation for InstrProfRecord; * class. These C wrappers are used as adaptors so that C++ code can be; * invoked as callbacks.; */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp:93,Integrability,wrap,wrappers,93,/*!; * ValueProfRecordClosure Interface implementation for InstrProfRecord; * class. These C wrappers are used as adaptors so that C++ code can be; * invoked as callbacks.; */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp:114,Modifiability,adapt,adaptors,114,/*!; * ValueProfRecordClosure Interface implementation for InstrProfRecord; * class. These C wrappers are used as adaptors so that C++ code can be; * invoked as callbacks.; */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp:3,Integrability,Wrap,Wrapper,3,// Wrapper implementation using the closure mechanism.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp:3,Integrability,Wrap,Wrapper,3,// Wrapper implementation using the closure mechanism.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp:60,Availability,error,errors,60,"// See createPGOFuncNameVar for more details. To avoid link errors, profile; // counters for function with available_externally linkage needs to be changed; // to linkonce linkage. On ELF based systems, this leads to weak symbols to be; // created. Without using comdat, duplicate entries won't be removed by the; // linker leading to increased data segement size and raw profile size. Even; // worse, since the referenced counter from profile per-function data object; // will be resolved to the common strong definition, the profile counts for; // available_externally functions will end up being duplicated in raw profile; // data. This can result in distorted profile as the counts of those dups; // will be accumulated by the profile merger.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp:49,Safety,avoid,avoid,49,"// See createPGOFuncNameVar for more details. To avoid link errors, profile; // counters for function with available_externally linkage needs to be changed; // to linkonce linkage. On ELF based systems, this leads to weak symbols to be; // created. Without using comdat, duplicate entries won't be removed by the; // linker leading to increased data segement size and raw profile size. Even; // worse, since the referenced counter from profile per-function data object; // will be resolved to the common strong definition, the profile counts for; // available_externally functions will end up being duplicated in raw profile; // data. This can result in distorted profile as the counts of those dups; // will be accumulated by the profile merger.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp:23,Modifiability,variab,variable,23,"// For CSPGO+LTO, this variable might be marked as non-prevailing and we only; // have the decl.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp:19,Safety,safe,safely,19,// Check if we can safely rename this Comdat function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp:3,Safety,Unsafe,Unsafe,3,// Unsafe to rename the address-taken function (which can be used in; // function comparison).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp:8,Safety,safe,safe,8,// Only safe to do if this function may be discarded if it is not used; // in the compilation unit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp:7,Availability,Avail,AvailableExternallyLinkage,7,// For AvailableExternallyLinkage functions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp:14,Modifiability,variab,variable,14,// Create the variable for the profile file name.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProf.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfReader.cpp:196,Availability,error,error,196,"// Read the profile variant flag from the header: "":FE"" means this is a FE; // generated profile. "":IR"" means this is an IR level profile. Other strings; // with a leading ':' will be reported an error format.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfReader.cpp:21,Security,hash,hash,21,// Read the function hash.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfReader.cpp:21,Testability,log,logic,21,// Need to match the logic in value profile dumper code in compiler-rt:,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfReader.cpp:48,Performance,perform,performs,48,"// Note that besides deserialization, this also performs the conversion for; // indirect call targets. The function pointers from the raw profile are; // remapped into function name hashes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfReader.cpp:182,Security,hash,hashes,182,"// Note that besides deserialization, this also performs the conversion for; // indirect call targets. The function pointers from the raw profile are; // remapped into function name hashes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfReader.cpp:8,Security,hash,hash,8,// Read hash.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfReader.cpp:47,Deployability,configurat,configuration,47,/// The memory buffer containing the remapping configuration. Remappings; /// holds pointers into this buffer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfReader.cpp:47,Modifiability,config,configuration,47,/// The memory buffer containing the remapping configuration. Remappings; /// holds pointers into this buffer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfReader.cpp:145,Security,hash,hash,145,/// Mapping from mangled name keys to the name used for the key in the; /// profile data.; /// FIXME: Can we store a location within the on-disk hash table instead of; /// redoing lookup?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfReader.cpp:140,Safety,detect,detection,140,"// The older versions do not support a profile summary. This just computes; // an empty summary, which will not result in accurate hot/cold detection.; // We would need to call addRecord for all NamedInstrProfRecords to get the; // correct summary. However, this version is old (prior to early 2016) and; // has not been supporting an accurate summary for several years.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfReader.cpp:12,Security,hash,hash,12,// Read the hash type and start offset.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfReader.cpp:7,Security,hash,hash,7,// The hash table with profile counts comes next.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfReader.cpp:3,Performance,Load,Load,3,// Load the remapping table now if requested.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfReader.cpp:46,Security,hash,hash,46,// Found it. Look for counters with the right hash.; // A flag to indicate if the records are from the same type; // of profile (i.e cs vs nocs).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfReader.cpp:30,Availability,error,errors,30,// TODO: Add memprof specific errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfReader.cpp:87,Security,hash,hash,87,// Setup a callback to convert from frame ids to frame using the on-disk; // FrameData hash table.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp:52,Deployability,patch,patched,52,"// A struct to define how the data stream should be patched. For Indexed; // profiling, only uint64_t data type is needed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp:12,Deployability,patch,patch,12,// Where to patch.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp:76,Deployability,patch,patching,76,// A wrapper class to abstract writer stream with support of bytes; // back patching.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp:5,Integrability,wrap,wrapper,5,// A wrapper class to abstract writer stream with support of bytes; // back patching.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp:6,Deployability,patch,patch,6,"// \c patch can only be called when all data is written and flushed.; // For raw_string_ostream, the patch is done on the target string; // directly and it won't be reflected in the stream's internal buffer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp:101,Deployability,patch,patch,101,"// \c patch can only be called when all data is written and flushed.; // For raw_string_ostream, the patch is done on the target string; // directly and it won't be reflected in the stream's internal buffer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp:47,Deployability,patch,patching,47,// Reset the stream to the last position after patching so that users; // don't accidentally overwrite data. This makes it consistent with; // the string stream below which replaces the data directly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp:16,Security,hash,hash,16,// The function hash,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp:12,Security,hash,hash,12,// Function hash,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp:12,Integrability,interface,interface,12,// Internal interface for testing purpose only.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp:26,Testability,test,testing,26,// Internal interface for testing purpose only.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp:50,Security,hash,hash,50,"// We've never seen a function with this name and hash, add it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp:3,Usability,Simpl,Simply,3,// Simply append the trace if we have not yet hit our reservoir size limit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp:80,Safety,avoid,avoid,80,// Assume that the source has the same reservoir size as the destination to; // avoid needing to record it in the indexed profile format.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp:16,Security,hash,hash,16,// Populate the hash table generator.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp:189,Deployability,patch,patching,189,"// Only write out all the fields except 'HashOffset', 'MemProfOffset',; // 'BinaryIdOffset' and `TemporalProfTracesOffset`. We need to remember the; // offset of these fields to allow back patching later.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp:41,Security,Hash,HashOffset,41,"// Only write out all the fields except 'HashOffset', 'MemProfOffset',; // 'BinaryIdOffset' and `TemporalProfTracesOffset`. We need to remember the; // offset of these fields to allow back patching later.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp:31,Security,Hash,HashOffset,31,// Save the location of Header.HashOffset field in \c OS.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp:25,Security,Hash,HashOffset,25,// Reserve the space for HashOffset field.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp:126,Security,hash,hashtable,126,// Save the location of MemProf profile data. This is stored in two parts as; // the schema and as a separate on-disk chained hashtable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp:51,Deployability,patch,patched,51,// Reserve space for the MemProf table field to be patched later if this; // profile contains memory profile information.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp:52,Deployability,patch,patched,52,// Reserve space for the BinaryIdOffset field to be patched later if this; // profile contains binary ids.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp:13,Security,hash,hash,13,// Write the hash table.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp:131,Security,hash,hashtable,131,// Write the MemProf profile data if we have it. This includes a simple schema; // with the format described below followed by the hashtable:; // uint64_t RecordTableOffset = RecordTableGenerator.Emit; // uint64_t FramePayloadOffset = Stream offset before emitting the frame table; // uint64_t FrameTableOffset = FrameTableGenerator.Emit; // uint64_t Num schema entries; // uint64_t Schema entry 0; // uint64_t Schema entry 1; // ....; // uint64_t Schema entry N - 1; // OnDiskChainedHashTable MemProfRecordData; // OnDiskChainedHashTable MemProfFrameData,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp:65,Usability,simpl,simple,65,// Write the MemProf profile data if we have it. This includes a simple schema; // with the format described below followed by the hashtable:; // uint64_t RecordTableOffset = RecordTableGenerator.Emit; // uint64_t FramePayloadOffset = Stream offset before emitting the frame table; // uint64_t FrameTableOffset = FrameTableGenerator.Emit; // uint64_t Num schema entries; // uint64_t Schema entry 0; // uint64_t Schema entry 1; // ....; // uint64_t Schema entry N - 1; // OnDiskChainedHashTable MemProfRecordData; // OnDiskChainedHashTable MemProfFrameData,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp:24,Security,hash,hash,24,// Insert the key (func hash) and value (memprof record).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp:3,Deployability,Release,Release,3,// Release the memory of this MapVector as it is no longer needed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp:3,Deployability,Release,Release,3,// Release the memory of this MapVector as it is no longer needed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp:3,Energy Efficiency,Allocate,Allocate,3,// Allocate space for data to be serialized out.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp:20,Deployability,patch,patch,20,// Now do the final patch:,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp:3,Deployability,Patch,Patch,3,// Patch the Header.HashOffset field.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp:20,Security,Hash,HashOffset,20,// Patch the Header.HashOffset field.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp:3,Deployability,Patch,Patch,3,// Patch the Header.MemProfOffset (=0 for profiles without MemProf; // data).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp:3,Deployability,Patch,Patch,3,// Patch the Header.BinaryIdSectionOffset.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp:3,Deployability,Patch,Patch,3,// Patch the Header.TemporalProfTracesOffset (=0 for profiles without; // traces).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp:3,Deployability,Patch,Patch,3,// Patch the summary data.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp:13,Security,hash,hash,13,// Write the hash table.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp:13,Security,hash,hash,13,// Write the hash table.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/InstrProfWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/ItaniumManglingCanonicalizer.cpp:3,Safety,Avoid,Avoid,3,// Avoid empty array if there are no arguments.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/ItaniumManglingCanonicalizer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/ItaniumManglingCanonicalizer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/ItaniumManglingCanonicalizer.cpp:36,Integrability,inject,injected-class-name,36,// 'Node' in this context names the injected-class-name of the base class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/ItaniumManglingCanonicalizer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/ItaniumManglingCanonicalizer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/ItaniumManglingCanonicalizer.cpp:36,Security,inject,injected-class-name,36,// 'Node' in this context names the injected-class-name of the base class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/ItaniumManglingCanonicalizer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/ItaniumManglingCanonicalizer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/ItaniumManglingCanonicalizer.cpp:51,Safety,safe,safely,51,"// If any node was created after N, then we cannot safely remap it because; // it might already be in use by another node.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/ItaniumManglingCanonicalizer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/ItaniumManglingCanonicalizer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/MemProf.cpp:23,Usability,guid,guid,23,"// We use the function guid which we expect to be a uint64_t. At; // this time, it is the lower 64 bits of the md5 of the canonical; // function name.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/MemProf.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/MemProf.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp:23,Deployability,update,updated,23,// This list should be updated in case new files with additional interceptors; // are added to the memprof runtime.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp:41,Availability,error,error,41,// Peek the build ids to print a helpful error message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp:47,Integrability,message,message,47,// Peek the build ids to print a helpful error message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp:52,Energy Efficiency,allocate,allocated,52,// Aligned read to sanity check that the buffer was allocated with at least 8b; // alignment.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp:19,Safety,sanity check,sanity check,19,// Aligned read to sanity check that the buffer was allocated with at least 8b; // alignment.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp:89,Performance,Perform,Perform,89,// Check whether the profiled binary was built with position independent code; // (PIC). Perform sanity checks for assumptions we rely on to simplify; // symbolization.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp:97,Safety,sanity check,sanity checks,97,// Check whether the profiled binary was built with position independent code; // (PIC). Perform sanity checks for assumptions we rely on to simplify; // symbolization.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp:141,Usability,simpl,simplify,141,// Check whether the profiled binary was built with position independent code; // (PIC). Perform sanity checks for assumptions we rely on to simplify; // symbolization.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp:77,Energy Efficiency,reduce,reduce,77,// We assume only one text segment in the main binary for simplicity and; // reduce the overhead of checking multiple ranges during symbolization.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp:58,Usability,simpl,simplicity,58,// We assume only one text segment in the main binary for simplicity and; // reduce the overhead of checking multiple ranges during symbolization.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp:26,Performance,load,loaded,26,"// Segment will always be loaded at a page boundary, expect it to be; // aligned already. Assume 4K pagesize for the machine from which the; // profile has been collected. This should be fine for now, in case we; // want to support other pagesizes it can be recorded in the raw profile; // during collection.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp:158,Energy Efficiency,reduce,reduces,158,"// The symbolizer ownership is moved into symbolizeAndFilterStackFrames so; // that it is freed automatically at the end, when it is no longer used. This; // reduces peak memory since it won't be live while also mapping the raw; // profile into records afterwards.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp:77,Energy Efficiency,reduce,reduce,77,// We assume only one text segment in the main binary for simplicity and; // reduce the overhead of checking multiple ranges during symbolization.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp:58,Usability,simpl,simplicity,58,// We assume only one text segment in the main binary for simplicity and; // reduce the overhead of checking multiple ranges during symbolization.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp:63,Safety,avoid,avoid,63,// We keep track of all prior discarded entries so that we can avoid invoking; // the symbolizer for such entries.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp:43,Performance,cache,cached,43,// Check if we have already symbolized and cached the result or if we; // don't want to attempt symbolization since we know this address is bad.; // In this case the address is also removed from the current callstack.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp:124,Energy Efficiency,reduce,reduce,124,"// Here we retain a mapping from the GUID to canonical symbol name; // instead of adding it to the frame object directly to reduce memory; // overhead. This is because there can be many unique frames,; // particularly for callsite frames.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp:37,Usability,GUID,GUID,37,"// Here we retain a mapping from the GUID to canonical symbol name; // instead of adding it to the frame object directly to reduce memory; // overhead. This is because there can be many unique frames,; // particularly for callsite frames.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp:153,Performance,load,loaded,153,// We do not expect segment information to change when deserializing from; // the same binary profile file. This can happen if dynamic libraries are; // loaded/unloaded between profile dumping.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp:197,Testability,test,testing,197,// Create a new callback for the RawMemProfRecord iterator so that we can; // provide the symbol name if the reader was initialized with KeepSymbolName =; // true. This is useful for debugging and testing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/RawMemProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProf.cpp:69,Availability,Error,Error,69,"// FIXME: This class is only here to support the transition to llvm::Error. It; // will be removed once this transition is complete. Clients should prefer to; // deal with the Error value directly, rather than converting to error_code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/SampleProf.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProf.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProf.cpp:176,Availability,Error,Error,176,"// FIXME: This class is only here to support the transition to llvm::Error. It; // will be removed once this transition is complete. Clients should prefer to; // deal with the Error value directly, rather than converting to error_code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/SampleProf.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProf.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProf.cpp:50,Usability,simpl,simply,50,"// In a pseudo-probe based profile, a callsite is simply represented by the; // ID of the probe associated with the call instruction. The probe ID is; // encoded in the Discriminator field of the call instruction's debug; // metadata.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/SampleProf.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProf.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProf.cpp:61,Deployability,update,update,61,// Remove the corresponding body sample for the callsite and update the; // total weight.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/SampleProf.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProf.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp:569,Testability,test,testing,569,"//===- SampleProfReader.cpp - Read LLVM sample profile data ---------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the class that reads LLVM sample profiles. It; // supports three file formats: text, binary and gcov.; //; // The textual representation is useful for debugging and testing purposes. The; // binary representation is more compact, resulting in smaller file sizes.; //; // The gcov encoding is the one generated by GCC's AutoFDO profile creation; // tool (https://github.com/google/autofdo); //; // All three encodings can be used interchangeably as an input sample profile.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp:79,Deployability,update,update,79,"/// Parse \p Input as function head.; ///; /// Parse one line of \p Input, and update function name in \p FName,; /// function's total sample count in \p NumSamples, function's entry; /// count in \p NumHeadSamples.; ///; /// \returns true if parsing is successful.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp:78,Security,Checksum,Checksum,78,/// Parse \p Input that contains metadata.; /// Possible metadata:; /// - CFG Checksum information:; /// !CFGChecksum: 12345; /// - CFG Checksum information:; /// !Attributes: 1; /// Stores the FunctionHash (a.k.a. CFG Checksum) into \p FunctionHash.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp:136,Security,Checksum,Checksum,136,/// Parse \p Input that contains metadata.; /// Possible metadata:; /// - CFG Checksum information:; /// !CFGChecksum: 12345; /// - CFG Checksum information:; /// !Attributes: 1; /// Stores the FunctionHash (a.k.a. CFG Checksum) into \p FunctionHash.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp:219,Security,Checksum,Checksum,219,/// Parse \p Input that contains metadata.; /// Possible metadata:; /// - CFG Checksum information:; /// !CFGChecksum: 12345; /// - CFG Checksum information:; /// !Attributes: 1; /// Stores the FunctionHash (a.k.a. CFG Checksum) into \p FunctionHash.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp:453,Security,hash,hash,453,"/// Parse \p Input as line sample.; ///; /// \param Input input line.; /// \param LineTy Type of this line.; /// \param Depth the depth of the inline stack.; /// \param NumSamples total samples of the line/inlined callsite.; /// \param LineOffset line offset to the start of the function.; /// \param Discriminator discriminator of the line.; /// \param TargetCountMap map from indirect call target to count.; /// \param FunctionHash the function's CFG hash, used by pseudo probe.; ///; /// returns true if parsing is successful.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp:4,Performance,Load,Load,4,"/// Load samples from a text file.; ///; /// See the documentation at the top of the file for an explanation of; /// the expected format.; ///; /// \returns true if the file was loaded successfully, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp:178,Performance,load,loaded,178,"/// Load samples from a text file.; ///; /// See the documentation at the top of the file for an explanation of; /// the expected format.; ///; /// \returns true if the file was loaded successfully, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp:60,Performance,cache,cache,60,"// Lazy computing of hash value, write back to the table to cache it. Only; // compute the context's hash value if it is being referenced for the first; // time.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp:21,Security,hash,hash,21,"// Lazy computing of hash value, write back to the table to cache it. Only; // compute the context's hash value if it is being referenced for the first; // time.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp:101,Security,hash,hash,101,"// Lazy computing of hash value, write back to the table to cache it. Only; // compute the context's hash value if it is being referenced for the first; // time.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp:11,Performance,cache,cached,11,// Use the cached hash value for insertion instead of recalculating it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp:18,Security,hash,hash,18,// Use the cached hash value for insertion instead of recalculating it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp:287,Performance,load,loaded,287,"// If profile is CS, the function offset section is expected to consist of; // sequences of contexts in pre-order layout; // (e.g. [A, A:1 @ B, A:1 @ B:2.3 @ C] [D, D:1 @ E]), so that when a matched; // context in the module is found, the profiles of all its callees are; // recursively loaded. A list is needed since the order of profiles matters.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp:183,Security,access,accessed,183,"// Profile is not MD5 and if a remapper is present, the remapped name of; // every function needed to be matched against the module, so use the list; // container since each entry is accessed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp:8,Performance,Load,LoadFuncsToBeUsed,8,"// When LoadFuncsToBeUsed is false, we are using LLVM tool, need to read all; // profiles.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp:3,Performance,Load,Load,3,// Load function profiles on demand.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp:40,Performance,load,load,40,"// For each function in current module, load all context profiles for; // the function as well as their callee contexts which can help profile; // guided importing for ThinLTO. This can be achieved by walking; // through an ordered context container, where contexts are laid out; // as if they were walked in preorder of a context trie. While; // traversing the trie, a link to the highest common ancestor node is; // kept so that all of its decendants will be loaded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp:461,Performance,load,loaded,461,"// For each function in current module, load all context profiles for; // the function as well as their callee contexts which can help profile; // guided importing for ThinLTO. This can be achieved by walking; // through an ordered context container, where contexts are laid out; // as if they were walked in preorder of a context trie. While; // traversing the trie, a link to the highest common ancestor node is; // kept so that all of its decendants will be loaded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp:147,Usability,guid,guided,147,"// For each function in current module, load all context profiles for; // the function as well as their callee contexts which can help profile; // guided importing for ThinLTO. This can be achieved by walking; // through an ordered context container, where contexts are laid out; // as if they were walked in preorder of a context trie. While; // traversing the trie, a link to the highest common ancestor node is; // kept so that all of its decendants will be loaded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp:99,Performance,load,load,99,"// For function in the current module, keep its farthest ancestor; // context. This can be used to load itself and its child and; // sibling contexts.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp:3,Performance,Load,Load,3,// Load profile for the current context which originated from; // the common ancestor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp:240,Performance,optimiz,optimization,240,"// Normally if useMD5 is true, the name table should have MD5 values, not; // strings, however in the case that ExtBinary profile has multiple name; // tables mixing string and MD5, all of them have to be normalized to use MD5,; // because optimization passes can only handle either type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp:246,Usability,simpl,simply,246,"// Sections in SecHdrTable is not necessarily in the same order as; // sections in the profile because section like FuncOffsetTable needs; // to be written after section LBRProfile but needs to be read before; // section LBRProfile, so we cannot simply use the last entry in; // SecHdrTable to calculate the file size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp:59,Security,validat,validate,59,"// Read the version number. Note - the GCC reader does not validate this; // version, but the profile creator generates v704.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp:72,Deployability,update,update,72,"// If this is a top function that we have already processed, do not; // update its profile again. This happens in the presence of; // function aliases. Since these aliases share the same function; // body, there will be identical replicated profiles for the; // original function. In this case, we simply not bother updating; // the profile of the original function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp:298,Usability,simpl,simply,298,"// If this is a top function that we have already processed, do not; // update its profile again. This happens in the presence of; // function aliases. Since these aliases share the same function; // body, there will be identical replicated profiles for the; // original function. In this case, we simply not bother updating; // the profile of the original function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp:3,Deployability,Update,Update,3,// Update the body samples for the current profile.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp:83,Availability,error,error,83,/// Prepare a memory buffer for the contents of \p Filename.; ///; /// \returns an error code indicating the status of the buffer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp:316,Availability,error,error,316,/// Create a sample profile reader based on the format of the input file.; ///; /// \param Filename The file to open.; ///; /// \param C The LLVM context to use to emit diagnostics.; ///; /// \param P The FSDiscriminatorPass.; ///; /// \param RemapFilename The file used for profile remapping.; ///; /// \returns an error code indicating the status of the created reader.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp:332,Availability,error,error,332,"/// Create a sample profile remapper from the given input, to remap the; /// function names in the given profile data.; ///; /// \param Filename The file to open.; ///; /// \param Reader The profile reader the remapper is going to be applied to.; ///; /// \param C The LLVM context to use to emit diagnostics.; ///; /// \returns an error code indicating the status of the created reader.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp:372,Availability,error,error,372,"/// Create a sample profile remapper from the given input, to remap the; /// function names in the given profile data.; ///; /// \param B The memory buffer to create the reader from (assumes ownership).; ///; /// \param C The LLVM context to use to emit diagnostics.; ///; /// \param Reader The profile reader the remapper is going to be applied to.; ///; /// \returns an error code indicating the status of the created reader.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp:356,Availability,error,error,356,/// Create a sample profile reader based on the format of the input data.; ///; /// \param B The memory buffer to create the reader from (assumes ownership).; ///; /// \param C The LLVM context to use to emit diagnostics.; ///; /// \param P The FSDiscriminatorPass.; ///; /// \param RemapFilename The file used for profile remapping.; ///; /// \returns an error code indicating the status of the created reader.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfWriter.cpp:558,Testability,test,testing,558,"//===- SampleProfWriter.cpp - Write LLVM sample profile data --------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the class that writes LLVM sample profiles. It; // supports two file formats: text and binary. The textual representation; // is useful for debugging and testing purposes. The binary representation; // is more compact, resulting in smaller file sizes. However, they can; // both be used interchangeably.; //; // See lib/ProfileData/SampleProfReader.cpp for documentation on each of the; // supported formats.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/SampleProfWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfWriter.cpp:3,Energy Efficiency,Adapt,Adapter,3,// Adapter class to llvm::support::endian::Writer for pwrite().,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/SampleProfWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfWriter.cpp:3,Integrability,Adapter,Adapter,3,// Adapter class to llvm::support::endian::Writer for pwrite().,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/SampleProfWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfWriter.cpp:3,Modifiability,Adapt,Adapter,3,// Adapter class to llvm::support::endian::Writer for pwrite().,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/SampleProfWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfWriter.cpp:22,Deployability,Release,Release,22,// Silence warning on Release build.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/SampleProfWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfWriter.cpp:80,Usability,clear,cleared,80,"// When calling write on a different profile map, existing states should be; // cleared.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/SampleProfWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfWriter.cpp:67,Performance,load,load,67,// Sort the contexts before writing them out. This is to help fast load all; // context profiles for a function as well as their callee contexts which; // can help profile-guided importing for ThinLTO.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/SampleProfWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfWriter.cpp:172,Usability,guid,guided,172,// Sort the contexts before writing them out. This is to help fast load all; // context profiles for a function as well as their callee contexts which; // can help profile-guided importing for ThinLTO.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/SampleProfWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfWriter.cpp:79,Usability,clear,cleared,79,"// When calling write on a different profile map, existing names should be; // cleared.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/SampleProfWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfWriter.cpp:201,Availability,error,error,201,/// Create a sample profile file writer based on the specified format.; ///; /// \param Filename The file to create.; ///; /// \param Format Encoding format for the profile file.; ///; /// \returns an error code indicating the status of the created writer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/SampleProfWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfWriter.cpp:225,Availability,error,error,225,/// Create a sample profile stream writer based on the specified format.; ///; /// \param OS The output stream to store the profile data to.; ///; /// \param Format Encoding format for the profile file.; ///; /// \returns an error code indicating the status of the created writer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/SampleProfWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfWriter.cpp:27,Modifiability,Extend,Extended,27,// Currently only Text and Extended Binary format are supported for CSSPGO.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/SampleProfWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SampleProfWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SymbolRemappingReader.cpp:4,Performance,Load,Load,4,/// Load a set of name remappings from a text file.; ///; /// See the documentation at the top of the file for an explanation of; /// the expected format.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/SymbolRemappingReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SymbolRemappingReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SymbolRemappingReader.cpp:22,Safety,detect,detects,22,// line_iterator only detects comments starting in column 1.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/SymbolRemappingReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/SymbolRemappingReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:55,Safety,avoid,avoid,55,"// Create additions. We do this before subtractions to avoid constructs like; // ((0 - X) + Y), as opposed to (Y - X).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:3,Availability,Mask,Mask,3,// Mask each bitmap byte into the BitVector. Go in reverse so that the; // bitvector can just be shifted over by one byte on each iteration.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:39,Testability,test,test,39,/// A bitmap representing the executed test vectors for a boolean expression.; /// Each index of the bitmap corresponds to a possible test vector. An index; /// with a bit value of '1' indicates that the corresponding Test Vector; /// identified by that index was executed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:134,Testability,test,test,134,/// A bitmap representing the executed test vectors for a boolean expression.; /// Each index of the bitmap corresponds to a possible test vector. An index; /// with a bit value of '1' indicates that the corresponding Test Vector; /// identified by that index was executed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:218,Testability,Test,Test,218,/// A bitmap representing the executed test vectors for a boolean expression.; /// Each index of the bitmap corresponds to a possible test vector. An index; /// with a bit value of '1' indicates that the corresponding Test Vector; /// identified by that index was executed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:29,Testability,Test,Test,29,/// Total number of possible Test Vectors for the boolean expression.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:20,Testability,Test,Test,20,"/// Actual executed Test Vectors for the boolean expression, based on; /// ExecutedTestVectorBitmap.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:51,Testability,test,test,51,// Calculate an index that is used to identify the test vector in a vector; // of test vectors. This index also corresponds to the index values of an; // MCDC Region's bitmap (see findExecutedTestVectors()).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:82,Testability,test,test,82,// Calculate an index that is used to identify the test vector in a vector; // of test vectors. This index also corresponds to the index values of an; // MCDC Region's bitmap (see findExecutedTestVectors()).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:22,Testability,test,test,22,// Copy the completed test vector to the vector of testvectors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:51,Testability,test,testvectors,51,// Copy the completed test vector to the vector of testvectors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:22,Security,hash,hashed,22,// Branch regions are hashed based on an ID.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:22,Security,hash,hashed,22,// Branch regions are hashed based on an ID.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:27,Testability,test,test,27,"/// Starting with the base test vector, build a comprehensive list of; /// possible test vectors by recursively walking the branch condition IDs; /// provided. Once an end node is reached, record the test vector in a vector; /// of test vectors that can be matched against during MC/DC analysis, and; /// then reset the positions to 'DontCare'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:84,Testability,test,test,84,"/// Starting with the base test vector, build a comprehensive list of; /// possible test vectors by recursively walking the branch condition IDs; /// provided. Once an end node is reached, record the test vector in a vector; /// of test vectors that can be matched against during MC/DC analysis, and; /// then reset the positions to 'DontCare'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:200,Testability,test,test,200,"/// Starting with the base test vector, build a comprehensive list of; /// possible test vectors by recursively walking the branch condition IDs; /// provided. Once an end node is reached, record the test vector in a vector; /// of test vectors that can be matched against during MC/DC analysis, and; /// then reset the positions to 'DontCare'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:232,Testability,test,test,232,"/// Starting with the base test vector, build a comprehensive list of; /// possible test vectors by recursively walking the branch condition IDs; /// provided. Once an end node is reached, record the test vector in a vector; /// of test vectors that can be matched against during MC/DC analysis, and; /// then reset the positions to 'DontCare'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:69,Testability,test,test,69,/// Walk the bits in the bitmap. A bit set to '1' indicates that the test; /// vector at the corresponding index was executed during a test run.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:135,Testability,test,test,135,/// Walk the bits in the bitmap. A bit set to '1' indicates that the test; /// vector at the corresponding index was executed during a test run.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:43,Testability,Test,Test,43,"/// For a given condition and two executed Test Vectors, A and B, see if the; /// two test vectors match forming an Independence Pair for the condition.; /// For two test vectors to match, the following must be satisfied:; /// - The condition's value in each test vector must be opposite.; /// - The result's value in each test vector must be opposite.; /// - All other conditions' values must be equal or marked as ""don't care"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:86,Testability,test,test,86,"/// For a given condition and two executed Test Vectors, A and B, see if the; /// two test vectors match forming an Independence Pair for the condition.; /// For two test vectors to match, the following must be satisfied:; /// - The condition's value in each test vector must be opposite.; /// - The result's value in each test vector must be opposite.; /// - All other conditions' values must be equal or marked as ""don't care"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:166,Testability,test,test,166,"/// For a given condition and two executed Test Vectors, A and B, see if the; /// two test vectors match forming an Independence Pair for the condition.; /// For two test vectors to match, the following must be satisfied:; /// - The condition's value in each test vector must be opposite.; /// - The result's value in each test vector must be opposite.; /// - All other conditions' values must be equal or marked as ""don't care"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:259,Testability,test,test,259,"/// For a given condition and two executed Test Vectors, A and B, see if the; /// two test vectors match forming an Independence Pair for the condition.; /// For two test vectors to match, the following must be satisfied:; /// - The condition's value in each test vector must be opposite.; /// - The result's value in each test vector must be opposite.; /// - All other conditions' values must be equal or marked as ""don't care"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:323,Testability,test,test,323,"/// For a given condition and two executed Test Vectors, A and B, see if the; /// two test vectors match forming an Independence Pair for the condition.; /// For two test vectors to match, the following must be satisfied:; /// - The condition's value in each test vector must be opposite.; /// - The result's value in each test vector must be opposite.; /// - All other conditions' values must be equal or marked as ""don't care"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:100,Testability,test,test,100,"// If there is a condition mismatch with any of the other conditions,; // there is no match for the test vectors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:90,Testability,Test,Test,90,"/// Find all possible Independence Pairs for a boolean expression given its; /// executed Test Vectors. This process involves looking at each condition; /// and attempting to find two Test Vectors that ""match"", giving us a pair.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:184,Testability,Test,Test,184,"/// Find all possible Independence Pairs for a boolean expression given its; /// executed Test Vectors. This process involves looking at each condition; /// and attempting to find two Test Vectors that ""match"", giving us a pair.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:21,Testability,test,test,21,// For each executed test vector.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:36,Testability,test,test,36,// Compared to every other executed test vector.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:212,Testability,test,test,212,"/// Process the MC/DC Record in order to produce a result for a boolean; /// expression. This process includes tracking the conditions that comprise; /// the decision region, calculating the list of all possible test vectors,; /// marking the executed test vectors, and then finding an Independence Pair; /// out of the executed test vectors for each condition in the boolean; /// expression. A condition is tracked to ensure that its ID can be mapped to; /// its ordinal position in the boolean expression. The condition's source; /// location is also tracked, as well as whether it is constant folded (in; /// which case it is excuded from the metric).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:252,Testability,test,test,252,"/// Process the MC/DC Record in order to produce a result for a boolean; /// expression. This process includes tracking the conditions that comprise; /// the decision region, calculating the list of all possible test vectors,; /// marking the executed test vectors, and then finding an Independence Pair; /// out of the executed test vectors for each condition in the boolean; /// expression. A condition is tracked to ensure that its ID can be mapped to; /// its ordinal position in the boolean expression. The condition's source; /// location is also tracked, as well as whether it is constant folded (in; /// which case it is excuded from the metric).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:329,Testability,test,test,329,"/// Process the MC/DC Record in order to produce a result for a boolean; /// expression. This process includes tracking the conditions that comprise; /// the decision region, calculating the list of all possible test vectors,; /// marking the executed test vectors, and then finding an Independence Pair; /// out of the executed test vectors for each condition in the boolean; /// expression. A condition is tracked to ensure that its ID can be mapped to; /// its ordinal position in the boolean expression. The condition's source; /// location is also tracked, as well as whether it is constant folded (in; /// which case it is excuded from the metric).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:80,Security,Hash,Hash,80,"// Walk the Record's BranchRegions (representing Conditions) in order to:; // - Hash the condition based on its corresponding ID. This will be used to; // calculate the test vectors.; // - Keep a map of the condition's ordinal position (1, 2, 3, 4) to its; // actual ID. This will be used to visualize the conditions in the; // correct order.; // - Keep track of the condition source location. This will be used to; // visualize where the condition is.; // - Record whether the condition is constant folded so that we exclude it; // from being measured.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:169,Testability,test,test,169,"// Walk the Record's BranchRegions (representing Conditions) in order to:; // - Hash the condition based on its corresponding ID. This will be used to; // calculate the test vectors.; // - Keep a map of the condition's ordinal position (1, 2, 3, 4) to its; // actual ID. This will be used to visualize the conditions in the; // correct order.; // - Keep track of the condition source location. This will be used to; // visualize where the condition is.; // - Record whether the condition is constant folded so that we exclude it; // from being measured.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:21,Testability,test,test,21,// Initialize a base test vector as 'DontCare'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:16,Testability,test,test,16,// Use the base test vector to build the list of all possible test vectors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:62,Testability,test,test,62,// Use the base test vector to build the list of all possible test vectors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:56,Testability,test,test,56,"// Using Profile Bitmap from runtime, mark the executed test vectors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:20,Testability,test,test,20,// Compare executed test vectors against each other to find an independence; // pairs for each condition. This processing takes the most time.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:10,Testability,Test,Test,10,"// Record Test vectors, executed vectors, and independence pairs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:184,Performance,load,loaded,184,"// This coverage record is a zero region for a function that's unused in; // some TU, but used in a different TU. Ignore it. The coverage maps from the; // the other TU will either be loaded (providing full region counts) or they; // won't (in which case we don't unintuitively report functions as uncovered; // when they have non-zero counts in the profile).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:18,Testability,test,test,18,// Evaluating the test vector bitmap for the decision region entails; // calculating precisely what bits are pertinent to this region alone.; // This is calculated based on the recorded offset into the global; // profile bitmap; the length is calculated based on the recorded; // number of conditions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:120,Availability,avail,available,120,"// Since the bitmap identifies the executed test vectors for an MC/DC; // DecisionRegion, all of the information is now available to process.; // This is where the bulk of the MC/DC progressing takes place.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:44,Testability,test,test,44,"// Since the bitmap identifies the executed test vectors for an MC/DC; // DecisionRegion, all of the information is now available to process.; // This is where the bulk of the MC/DC progressing takes place.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:3,Performance,Perform,Performance,3,// Performance optimization: keep track of the indices of the function records; // which correspond to each filename. This can be used to substantially speed; // up queries for coverage info in a file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:15,Performance,optimiz,optimization,15,// Performance optimization: keep track of the indices of the function records; // which correspond to each filename. This can be used to substantially speed; // up queries for coverage info in a file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:31,Performance,optimiz,optimization,31,// This function is for memory optimization by shortening the lifetimes; // of CoverageMappingReader instances.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:27,Availability,error,error,27,"// If E is a no_data_found error, returns success. Otherwise returns E.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:61,Usability,simpl,simple,61,// Sort the completed regions by end location. This makes it simple to; // emit closing segments in sorted order.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:3,Safety,Avoid,Avoid,3,"// Avoid making zero-length regions active. If it's the last region,; // emit a skipped segment. Otherwise use its predecessor's count.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:58,Security,hash,hash,58,"// Look up the function records in the given file. Due to hash collisions on; // the filename, we may get back some records that are not in the file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:58,Security,hash,hash,58,"// Look up the function records in the given file. Due to hash collisions on; // the filename, we may get back some records that are not in the file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:74,Integrability,wrap,wrapped,74,"// Pick the max count from the non-gap, region entry segments and the; // wrapped count.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:15,Availability,error,error,15,"// If optional error message is not empty, append it to the message.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:21,Integrability,message,message,21,"// If optional error message is not empty, append it to the message.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:60,Integrability,message,message,60,"// If optional error message is not empty, append it to the message.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:69,Availability,Error,Error,69,"// FIXME: This class is only here to support the transition to llvm::Error. It; // will be removed once this transition is complete. Clients should prefer to; // deal with the Error value directly, rather than converting to error_code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp:176,Availability,Error,Error,176,"// FIXME: This class is only here to support the transition to llvm::Error. It; // will be removed once this transition is complete. Clients should prefer to; // deal with the Error value directly, rather than converting to error_code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMapping.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingReader.cpp:47,Availability,error,error,47,// Check if all the records were read or if an error occurred while reading; // the next record.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingReader.cpp:87,Security,validat,validation,87,// The uncompressed length may exceed the size of the encoded filenames.; // Skip size validation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingReader.cpp:3,Energy Efficiency,Allocate,Allocate,3,// Allocate memory for the decompressed filenames.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingReader.cpp:146,Performance,Perform,Perform,146,// Set the counters for the expansion regions.; // i.e. Counter of expansion region = counter of the first region; // from the expanded file.; // Perform multiple passes to correctly propagate the counters through; // all the nested expansion regions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingReader.cpp:89,Energy Efficiency,allocate,allocated,89,"// If this is a linked PE/COFF file, then we have to skip over the null byte; // that is allocated in the .lprfn$A section in the LLVM profiling runtime.; // If the name section is .lprfcovnames, it doesn't have the null byte at the; // beginning.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingReader.cpp:7,Security,hash,hash,7,// The hash value of dummy mapping records is always zero.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingReader.cpp:8,Integrability,interface,interface,8,/// The interface to read coverage mapping function records for a module.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingReader.cpp:10,Security,hash,hash,10,// Maps a hash of the filenames in a TU to a \c FileRange. The range; // specifies the location of the hashed filenames in \c Filenames.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingReader.cpp:103,Security,hash,hashed,103,// Maps a hash of the filenames in a TU to a \c FileRange. The range; // specifies the location of the hashed filenames in \c Filenames.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingReader.cpp:142,Availability,redundant,redundant,142,"// Add the record to the collection if we don't already have a record that; // points to the same function name. This is useful to ignore the redundant; // records for the functions with ODR linkage.; // In addition, prefer records with real coverage mapping data to dummy; // records, which were emitted for inline functions which were seen but; // not used in the corresponding translation unit.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingReader.cpp:142,Safety,redund,redundant,142,"// Add the record to the collection if we don't already have a record that; // points to the same function name. This is useful to ignore the redundant; // records for the functions with ODR linkage.; // In addition, prefer records with real coverage mapping data to dummy; // records, which were emitted for inline functions which were seen but; // not used in the corresponding translation unit.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingReader.cpp:3,Deployability,Update,Update,3,// Update the existing record if it's a dummy and the new record is real.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingReader.cpp:9,Security,hash,hash,9,// Map a hash of the filenames region to the filename range associated; // with this coverage header.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingReader.cpp:13,Security,hash,hash,13,// This is a hash collision. Mark the filenames ref invalid.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingReader.cpp:3,Security,Validat,Validate,3,// Validate the length of the coverage mapping for this function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingReader.cpp:92,Availability,error,error,92,"// If we have a universal binary and Arch doesn't identify any of its slices,; // it's user error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingReader.cpp:37,Testability,test,testing,37,// This is a special format used for testing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingReader.cpp:3,Performance,Load,Load,3,// Load coverage out of archive members.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingReader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingReader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingWriter.cpp:136,Testability,test,tests,136,// Sort the regions in an ascending order by the file id and the starting; // location. Sort by region kinds to ensure stable order for tests.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/ProfileData/Coverage/CoverageMappingWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/BitstreamRemarkParser.cpp:113,Availability,error,error,113,"// If we're here, it means we didn't get an END_BLOCK yet, but we're at the; // end of the stream. In this case, error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Remarks/BitstreamRemarkParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/BitstreamRemarkParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/BitstreamRemarkSerializer.cpp:28,Integrability,Depend,Depending,28,"// Setup the main metadata. Depending on the container type, we'll setup the; // required records next.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Remarks/BitstreamRemarkSerializer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/BitstreamRemarkSerializer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/Remark.cpp:10,Integrability,wrap,wrappers,10,// Create wrappers for C Binding types (see CBindingWrapping.h).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Remarks/Remark.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/Remark.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/RemarkParser.cpp:3,Integrability,Depend,Depending,3,"// Depending on the metadata, the format can be either yaml or yaml-strtab,; // regardless of the input argument.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Remarks/RemarkParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/RemarkParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/RemarkParser.cpp:3,Integrability,Wrap,Wrapper,3,// Wrapper that holds the state needed to interact with the C API.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Remarks/RemarkParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/RemarkParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/RemarkParser.cpp:24,Integrability,wrap,wrappers,24,// namespace; // Create wrappers for C Binding types (see CBindingWrapping.h).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Remarks/RemarkParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/RemarkParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/RemarkParser.cpp:14,Availability,error,error,14,// Handle the error. Allow it to be checked through HasError and; // GetErrorMessage.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Remarks/RemarkParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/RemarkParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.cpp:43,Availability,error,errors,43,"// 1) Set up a diagnostic handler to avoid errors being printed out to; // stderr.; // 2) Use the stream to print the error with the associated node.; // 3) The stream will use the source manager to print the error, which will; // call the diagnostic handler.; // 4) The diagnostic handler will stream the error directly into this object's; // Message member, which is used when logging is asked for.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.cpp:118,Availability,error,error,118,"// 1) Set up a diagnostic handler to avoid errors being printed out to; // stderr.; // 2) Use the stream to print the error with the associated node.; // 3) The stream will use the source manager to print the error, which will; // call the diagnostic handler.; // 4) The diagnostic handler will stream the error directly into this object's; // Message member, which is used when logging is asked for.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.cpp:209,Availability,error,error,209,"// 1) Set up a diagnostic handler to avoid errors being printed out to; // stderr.; // 2) Use the stream to print the error with the associated node.; // 3) The stream will use the source manager to print the error, which will; // call the diagnostic handler.; // 4) The diagnostic handler will stream the error directly into this object's; // Message member, which is used when logging is asked for.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.cpp:306,Availability,error,error,306,"// 1) Set up a diagnostic handler to avoid errors being printed out to; // stderr.; // 2) Use the stream to print the error with the associated node.; // 3) The stream will use the source manager to print the error, which will; // call the diagnostic handler.; // 4) The diagnostic handler will stream the error directly into this object's; // Message member, which is used when logging is asked for.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.cpp:344,Integrability,Message,Message,344,"// 1) Set up a diagnostic handler to avoid errors being printed out to; // stderr.; // 2) Use the stream to print the error with the associated node.; // 3) The stream will use the source manager to print the error, which will; // call the diagnostic handler.; // 4) The diagnostic handler will stream the error directly into this object's; // Message member, which is used when logging is asked for.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.cpp:37,Safety,avoid,avoid,37,"// 1) Set up a diagnostic handler to avoid errors being printed out to; // stderr.; // 2) Use the stream to print the error with the associated node.; // 3) The stream will use the source manager to print the error, which will; // call the diagnostic handler.; // 4) The diagnostic handler will stream the error directly into this object's; // Message member, which is used when logging is asked for.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.cpp:379,Testability,log,logging,379,"// 1) Set up a diagnostic handler to avoid errors being printed out to; // stderr.; // 2) Use the stream to print the error with the associated node.; // 3) The stream will use the source manager to print the error, which will; // call the diagnostic handler.; // 4) The diagnostic handler will stream the error directly into this object's; // Message member, which is used when logging is asked for.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.cpp:19,Availability,alive,alive,19,// Keep the buffer alive.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.cpp:56,Availability,error,error,56,"// If any of the debug loc fields is missing, return an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.cpp:32,Availability,error,error,32,"// If we already have a string, error out.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.cpp:3,Safety,Avoid,Avoid,3,"// Avoid garbage input, set the iterator to the end.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.h:9,Availability,error,error,9,/// Last error message that can come from the YAML parser diagnostics.; /// We need this for catching errors in the constructor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.h:102,Availability,error,errors,102,/// Last error message that can come from the YAML parser diagnostics.; /// We need this for catching errors in the constructor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.h:15,Integrability,message,message,15,/// Last error message that can come from the YAML parser diagnostics.; /// We need this for catching errors in the constructor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.h:30,Availability,error,error,30,/// Source manager for better error messages.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.h:36,Integrability,message,messages,36,/// Source manager for better error messages.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.h:28,Availability,error,error,28,"/// Create a YAMLParseError error from an existing error generated by the YAML; /// parser.; /// If there is no error, this returns Success.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.h:51,Availability,error,error,51,"/// Create a YAMLParseError error from an existing error generated by the YAML; /// parser.; /// If there is no error, this returns Success.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.h:112,Availability,error,error,112,"/// Create a YAMLParseError error from an existing error generated by the YAML; /// parser.; /// If there is no error, this returns Success.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.h:28,Availability,error,error,28,/// Create a YAMLParseError error referencing a specific node.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkSerializer.cpp:38,Safety,safe,safer,38,"// The assert above should make this ""safer"" to satisfy the YAMLTraits.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkSerializer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkSerializer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkSerializer.cpp:7,Testability,assert,assert,7,"// The assert above should make this ""safer"" to satisfy the YAMLTraits.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkSerializer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkSerializer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkSerializer.cpp:114,Safety,avoid,avoid,114,"// In standalone mode, for the serializer with a string table, emit the; // metadata first and set DidEmitMeta to avoid emitting it again.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkSerializer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Remarks/YAMLRemarkSerializer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ABIBreak.cpp:137,Availability,failure,failure,137,// One of these two variables will be referenced by a symbol defined in; // llvm-config.h. We provide a link-time (or load time for DSO) failure when; // there is a mismatch in the build configuration of the API client and LLVM.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ABIBreak.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ABIBreak.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ABIBreak.cpp:187,Deployability,configurat,configuration,187,// One of these two variables will be referenced by a symbol defined in; // llvm-config.h. We provide a link-time (or load time for DSO) failure when; // there is a mismatch in the build configuration of the API client and LLVM.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ABIBreak.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ABIBreak.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ABIBreak.cpp:20,Modifiability,variab,variables,20,// One of these two variables will be referenced by a symbol defined in; // llvm-config.h. We provide a link-time (or load time for DSO) failure when; // there is a mismatch in the build configuration of the API client and LLVM.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ABIBreak.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ABIBreak.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ABIBreak.cpp:81,Modifiability,config,config,81,// One of these two variables will be referenced by a symbol defined in; // llvm-config.h. We provide a link-time (or load time for DSO) failure when; // there is a mismatch in the build configuration of the API client and LLVM.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ABIBreak.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ABIBreak.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ABIBreak.cpp:187,Modifiability,config,configuration,187,// One of these two variables will be referenced by a symbol defined in; // llvm-config.h. We provide a link-time (or load time for DSO) failure when; // there is a mismatch in the build configuration of the API client and LLVM.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ABIBreak.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ABIBreak.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ABIBreak.cpp:118,Performance,load,load,118,// One of these two variables will be referenced by a symbol defined in; // llvm-config.h. We provide a link-time (or load time for DSO) failure when; // there is a mismatch in the build configuration of the API client and LLVM.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ABIBreak.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ABIBreak.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Allocator.cpp:425,Integrability,interface,interface,425,"//===--- Allocator.cpp - Simple memory allocation abstraction -------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the BumpPtrAllocator interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Allocator.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Allocator.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Allocator.cpp:25,Usability,Simpl,Simple,25,"//===--- Allocator.cpp - Simple memory allocation abstraction -------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the BumpPtrAllocator interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Allocator.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Allocator.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFixedPoint.cpp:449,Integrability,interface,interface,449,"//===- APFixedPoint.cpp - Fixed point constant handling ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// Defines the implementation for the fixed point number interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFixedPoint.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFixedPoint.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFixedPoint.cpp:358,Performance,perform,perform,358,"// A fixed point semantic fits in a floating point semantic if the maximum; // and minimum values as integers of the fixed point semantic can fit in the; // floating point semantic.; // If these values do not fit, then a floating point rescaling of the true; // maximum/minimum value will not fit either, so the floating point semantic; // cannot be used to perform such a rescaling.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFixedPoint.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFixedPoint.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFixedPoint.cpp:35,Performance,perform,perform,35,// Widen the LHS and RHS so we can perform a full multiplication.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFixedPoint.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFixedPoint.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFixedPoint.cpp:39,Availability,down,downscale,39,"// Perform the full multiplication and downscale to get the same scale.; //; // Note that the right shifts here perform an implicit downwards rounding.; // This rounding could discard bits that would technically place the result; // outside the representable range. We interpret the spec as allowing us to; // perform the rounding step first, avoiding the overflow case that would; // arise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFixedPoint.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFixedPoint.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFixedPoint.cpp:132,Availability,down,downwards,132,"// Perform the full multiplication and downscale to get the same scale.; //; // Note that the right shifts here perform an implicit downwards rounding.; // This rounding could discard bits that would technically place the result; // outside the representable range. We interpret the spec as allowing us to; // perform the rounding step first, avoiding the overflow case that would; // arise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFixedPoint.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFixedPoint.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFixedPoint.cpp:3,Performance,Perform,Perform,3,"// Perform the full multiplication and downscale to get the same scale.; //; // Note that the right shifts here perform an implicit downwards rounding.; // This rounding could discard bits that would technically place the result; // outside the representable range. We interpret the spec as allowing us to; // perform the rounding step first, avoiding the overflow case that would; // arise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFixedPoint.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFixedPoint.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFixedPoint.cpp:112,Performance,perform,perform,112,"// Perform the full multiplication and downscale to get the same scale.; //; // Note that the right shifts here perform an implicit downwards rounding.; // This rounding could discard bits that would technically place the result; // outside the representable range. We interpret the spec as allowing us to; // perform the rounding step first, avoiding the overflow case that would; // arise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFixedPoint.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFixedPoint.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFixedPoint.cpp:310,Performance,perform,perform,310,"// Perform the full multiplication and downscale to get the same scale.; //; // Note that the right shifts here perform an implicit downwards rounding.; // This rounding could discard bits that would technically place the result; // outside the representable range. We interpret the spec as allowing us to; // perform the rounding step first, avoiding the overflow case that would; // arise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFixedPoint.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFixedPoint.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFixedPoint.cpp:343,Safety,avoid,avoiding,343,"// Perform the full multiplication and downscale to get the same scale.; //; // Note that the right shifts here perform an implicit downwards rounding.; // This rounding could discard bits that would technically place the result; // outside the representable range. We interpret the spec as allowing us to; // perform the rounding step first, avoiding the overflow case that would; // arise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFixedPoint.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFixedPoint.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFixedPoint.cpp:35,Performance,perform,perform,35,// Widen the LHS and RHS so we can perform a full division.; // Also make sure that there will be enough space for the shift below to not; // overflow,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFixedPoint.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFixedPoint.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFixedPoint.cpp:74,Performance,perform,perform,74,"// Upscale to compensate for the loss of precision from division, and; // perform the full division.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFixedPoint.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFixedPoint.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFixedPoint.cpp:53,Performance,perform,perform,53,"// Clamp the shift amount at the original width, and perform the shift.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFixedPoint.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFixedPoint.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFixedPoint.cpp:9,Availability,down,down,9,// Scale down the integer value in the float to match the correct scaling; // factor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFixedPoint.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFixedPoint.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFixedPoint.cpp:138,Safety,risk,risk,138,"// Round the integral value and scale back. This makes the; // overflow calculations below work properly. If we do not round here,; // we risk checking for overflow with a value that is outside the; // representable range of the fixed-point semantic even though no overflow; // would occur had we rounded first.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFixedPoint.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFixedPoint.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:386,Availability,avail,available,386,"// This behavior is present in the Float8ExMyFN* types (Float8E4M3FN,; // Float8E5M2FNUZ, Float8E4M3FNUZ, and Float8E4M3B11FNUZ). There is no; // representation for Inf, and operations that would ordinarily produce Inf; // produce NaN instead.; // The details of the NaN representation(s) in this form are determined by the; // `fltNanEncoding` enum. We treat all NaNs as quiet, as the available; // encodings do not distinguish between signalling and quiet NaN.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:406,Performance,optimiz,optimization,406,"/* The IBM double-double semantics. Such a number consists of a pair of IEEE; 64-bit doubles (Hi, Lo), where |Hi| > |Lo|, and if normal,; (double)(Hi + Lo) == Hi. The numeric value it's modeling is Hi + Lo.; Therefore it has two 53-bit mantissa parts that aren't necessarily adjacent; to each other, and two 11-bit exponents. Note: we need to make the value different from semBogus as otherwise; an unsafe optimization may collapse both values to a single address,; and we heavily rely on them having distinct addresses. */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:399,Safety,unsafe,unsafe,399,"/* The IBM double-double semantics. Such a number consists of a pair of IEEE; 64-bit doubles (Hi, Lo), where |Hi| > |Lo|, and if normal,; (double)(Hi + Lo) == Hi. The numeric value it's modeling is Hi + Lo.; Therefore it has two 53-bit mantissa parts that aren't necessarily adjacent; to each other, and two 11-bit exponents. Note: we need to make the value different from semBogus as otherwise; an unsafe optimization may collapse both values to a single address,; and we heavily rely on them having distinct addresses. */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:77,Energy Efficiency,power,power,77,"/* A tight upper bound on number of parts required to hold the value; pow(5, power) is. power * 815 / (351 * integerPartWidth) + 1. However, whilst the result may require only this many parts,; because we are multiplying two values to get it, the; multiplication may require an extra part with the excess part; being zero (consider the trivial case of 1 * 1, tcFullMultiply; requires two parts to hold the single-part result). So we add an; extra one to guarantee enough space whilst multiplying. */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:88,Energy Efficiency,power,power,88,"/* A tight upper bound on number of parts required to hold the value; pow(5, power) is. power * 815 / (351 * integerPartWidth) + 1. However, whilst the result may require only this many parts,; because we are multiplying two values to get it, the; multiplication may require an extra part with the excess part; being zero (consider the trivial case of 1 * 1, tcFullMultiply; requires two parts to hold the single-part result). So we add an; extra one to guarantee enough space whilst multiplying. */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:29,Integrability,rout,routines,29,"/* A bunch of private, handy routines. */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:89,Safety,safe,safe,89,"/* This is ugly and needs cleaning up, but I don't immediately see; how whilst remaining safe. */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:7,Availability,error,error,7,"/* The error from the true value, in half-ulps, on multiplying two; floating point numbers, which differ from the value they; approximate by at most HUE1 and HUE2 half-ulps, is strictly less; than the returned value. See ""How to Read Floating Point Numbers Accurately"" by William D; Clinger. */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:16,Energy Efficiency,power,power,16,"/* Place pow(5, power) in DST, and return the number of parts used.; DST must be at least one part larger than size of the answer. */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:22,Safety,avoid,avoid,22,/* Zero at the end to avoid modular arithmetic when adding one; used; when rounding up during hexadecimal output. */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:21,Usability,clear,clear,21,// We always have to clear the QNaN bit to make it an SNaN.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:157,Availability,down,down,157,"// If there are no bits set in the payload, we have to set; // *something* to make it a NaN instead of an infinity;; // conventionally, this is the next bit down from the QNaN bit.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:11,Modifiability,extend,extended,11,"// For x87 extended precision, we want to make a NaN, not a; // pseudo-NaN. Maybe we should expose the ability to make; // pseudo-NaNs?",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:92,Security,expose,expose,92,"// For x87 extended precision, we want to make a NaN, not a; // pseudo-NaN. Maybe we should expose the ability to make; // pseudo-NaNs?",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:3,Testability,Test,Test,3,// Test if the significand excluding the integral bit is all ones. This allows; // us to test for binade boundaries.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:89,Testability,test,test,89,// Test if the significand excluding the integral bit is all ones. This allows; // us to test for binade boundaries.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:3,Testability,Test,Test,3,// Test if the significand excluding the integral bit is all ones except for; // the least significant bit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:3,Testability,Test,Test,3,// Test if the significand excluding the integral bit is all zeros. This; // allows us to test for binade boundaries.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:90,Testability,test,test,90,// Test if the significand excluding the integral bit is all zeros. This; // allows us to test for binade boundaries.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:27,Energy Efficiency,efficient,efficient,27,// This could be made more efficient; I'm going for obviously correct.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:3,Energy Efficiency,Allocate,Allocate,3,"// Allocate space for twice as many bits as the original significand, plus one; // extra bit for the addition to overflow into.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:43,Modifiability,extend,extended,43,"// Make a copy so we can convert it to the extended semantics.; // Note that we cannot convert the addend directly, as the extendedSemantics; // is a local variable (which we take a reference to).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:123,Modifiability,extend,extendedSemantics,123,"// Make a copy so we can convert it to the extended semantics.; // Note that we cannot convert the addend directly, as the extendedSemantics; // is a local variable (which we take a reference to).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:156,Modifiability,variab,variable,156,"// Make a copy so we can convert it to the extended semantics.; // Note that we cannot convert the addend directly, as the extendedSemantics; // is a local variable (which we take a reference to).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:52,Usability,clear,clear,52,"/* Set the least significant BITS bits of a bignum, clear the; rest. */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:223,Integrability,rout,routine,223,"/* Returns TRUE if, when truncating the current number, with BIT the; new LSB, with the given lost fraction and rounding mode, the result; would need to be rounded away from zero (i.e., by increasing the; signficand). This routine must work for fcZero of both signs, and; fcNormal numbers. */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:42,Testability,test,test,42,/* Our zeroes don't have a significand to test. */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:8,Integrability,depend,depends,8,/* Sign depends on rounding mode; handled by caller. */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:39,Usability,simpl,simple,39,/* This return code means it was not a simple case. */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:1392,Modifiability,Extend,Extend,1392,"//; // To calculate the remainder we use the following scheme.; //; // The remainder is defained as follows:; //; // remainder = numer - rquot * denom = x - r * p; //; // Where r is the result of: x/p, rounded toward the nearest integral value; // (with halfway cases rounded toward the even number).; //; // Currently, (after x mod 2p):; // r is the number of 2p's present inside x, which is inherently, an even; // number of p's.; //; // We may split the remaining calculation into 4 options:; // - if x < 0.5p then we round to the nearest number with is 0, and are done.; // - if x == 0.5p then we round to the nearest even number which is 0, and we; // are done as well.; // - if 0.5p < x < p then we round to nearest number which is 1, and we have; // to subtract 1p at least once.; // - if x >= p then we must subtract p at least once, as x must be a; // remainder.; //; // By now, we were done, or we added 1 to r, which in turn, now an odd number.; //; // We can now split the remaining calculation to the following 3 options:; // - if x < 0.5p then we round to the nearest number with is 0, and are done.; // - if x == 0.5p then we round to the nearest even number. As r is odd, we; // must round up to the next even number. so we must subtract p once more.; // - if x > 0.5p (and inherently x < p) then we must round r up to the next; // integral, and subtract p once more.; //; // Extend the semantics to prevent an overflow/underflow or inexact result.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:9,Usability,simpl,simpler,9,"// It is simpler to work with 2x instead of 0.5p, and we do not need to lose; // any fraction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:64,Modifiability,extend,extended-precision,64,/* If and only if all arguments are normal do we need to do an; extended-precision calculation. */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:31,Usability,simpl,simple,31,"// The algorithm here is quite simple: we add 2^(p-1), where p is the; // precision of our format, and then subtract it back off again. The choice; // of rounding modes for the addition/subtraction determines the rounding mode; // for our integral rounding as well.; // NOTE: When the input value is negative, we do subtraction followed by; // addition instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:172,Energy Efficiency,Power,PowerPC,172,"// If this is a truncation of a denormal number, and the target semantics; // has larger exponent range than the source semantics (this can happen; // when truncating from PowerPC double-double to double format), the; // right shift could lose result mantissa bits. Adjust exponent instead; // of performing excessive shift.; // Also do a similar trick in case shifting denormal would produce zero; // significand as this case isn't handled correctly by normalize.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:297,Performance,perform,performing,297,"// If this is a truncation of a denormal number, and the target semantics; // has larger exponent range than the source semantics (this can happen; // when truncating from PowerPC double-double to double format), the; // right shift could lose result mantissa bits. Adjust exponent instead; // of performing excessive shift.; // Also do a similar trick in case shifting denormal would produce zero; // significand as this case isn't handled correctly by normalize.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:28,Performance,perform,perform,28,"// If this is a truncation, perform the shift before we narrow the storage.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:47,Availability,avail,available,47,// The new type requires more storage; make it available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:74,Availability,avail,available,74,"// If this is an extension, perform the shift now that the storage is; // available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:28,Performance,perform,perform,28,"// If this is an extension, perform the shift now that the storage is; // available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:59,Safety,avoid,avoid,59,"// If NaN is negative zero, we need to create a new NaN to avoid converting; // NaN to -Inf.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:11,Modifiability,extend,extended,11,"// For x87 extended precision, we want to make a NaN, not a special NaN if; // the input wasn't special either.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:40,Availability,avail,available,40,/* We want at least as many bits as are available. */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:182,Modifiability,extend,extended,182,"/* Convert a two's complement integer SRC to a floating point number,; rounding according to ROUNDING_MODE. ISSIGNED is true if the; integer is signed, in which case it must be sign-extended. */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:157,Testability,log,log,157,"/* Handle the quick cases. First the case of no significant digits,; i.e. zero, and then exponents that are obviously too large or too; small. Writing L for log 10 / log 2, a number d.ddddd*10^exp; definitely overflows if. (exp - 1) * L >= maxExponent. and definitely underflows to zero where. (exp + 1) * L <= minExponent - precision. With integer arithmetic the tightest bounds for L are. 93/28 < L < 196/59 [ numerator <= 256 ]; 42039/12655 < L < 28738/8651 [ numerator <= 65536 ]; */; // Test if we have a zero number allowing for strings with no null terminators; // and zero decimals with non-zero exponents.; //; // We computed firstSigDigit by ignoring all zeros and dots. Thus if; // D->firstSigDigit equals str.end(), every digit must be a zero and there can; // be at most one dot. On the other hand, if we have a zero with a non-zero; // exponent, then we know that D.firstSigDigit will be non-numeric.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:166,Testability,log,log,166,"/* Handle the quick cases. First the case of no significant digits,; i.e. zero, and then exponents that are obviously too large or too; small. Writing L for log 10 / log 2, a number d.ddddd*10^exp; definitely overflows if. (exp - 1) * L >= maxExponent. and definitely underflows to zero where. (exp + 1) * L <= minExponent - precision. With integer arithmetic the tightest bounds for L are. 93/28 < L < 196/59 [ numerator <= 256 ]; 42039/12655 < L < 28738/8651 [ numerator <= 65536 ]; */; // Test if we have a zero number allowing for strings with no null terminators; // and zero decimals with non-zero exponents.; //; // We computed firstSigDigit by ignoring all zeros and dots. Thus if; // D->firstSigDigit equals str.end(), every digit must be a zero and there can; // be at most one dot. On the other hand, if we have a zero with a non-zero; // exponent, then we know that D.firstSigDigit will be non-numeric.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:492,Testability,Test,Test,492,"/* Handle the quick cases. First the case of no significant digits,; i.e. zero, and then exponents that are obviously too large or too; small. Writing L for log 10 / log 2, a number d.ddddd*10^exp; definitely overflows if. (exp - 1) * L >= maxExponent. and definitely underflows to zero where. (exp + 1) * L <= minExponent - precision. With integer arithmetic the tightest bounds for L are. 93/28 < L < 196/59 [ numerator <= 256 ]; 42039/12655 < L < 28738/8651 [ numerator <= 65536 ]; */; // Test if we have a zero number allowing for strings with no null terminators; // and zero decimals with non-zero exponents.; //; // We computed firstSigDigit by ignoring all zeros and dots. Thus if; // D->firstSigDigit equals str.end(), every digit must be a zero and there can; // be at most one dot. On the other hand, if we have a zero with a non-zero; // exponent, then we know that D.firstSigDigit will be non-numeric.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:84,Testability,log,log-rebasing,84,/* Check whether the normalized exponent is high enough to overflow; max during the log-rebasing in the max-exponent check below. */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:173,Performance,perform,perform,173,"/* If it wasn't, then it also wasn't high enough to overflow max; during the log-rebasing in the min-exponent check. Check that it; won't overflow min in either check, then perform the min-exponent; check. */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:77,Testability,log,log-rebasing,77,"/* If it wasn't, then it also wasn't high enough to overflow max; during the log-rebasing in the min-exponent check. Check that it; won't overflow min in either check, then perform the min-exponent; check. */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:25,Performance,perform,perform,25,/* We can finally safely perform the max-exponent check. */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:18,Safety,safe,safely,18,/* We can finally safely perform the max-exponent check. */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:103,Energy Efficiency,Allocate,Allocate,103,"/* A tight upper bound on number of bits required to hold an; N-digit decimal integer is N * 196 / 59. Allocate enough space; to hold the full significand, and an extra part required by; tcMultiplyPart. */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:21,Energy Efficiency,efficient,efficiently,21,"/* Convert to binary efficiently - we do almost all multiplication; in an integerPart. When this would overflow do we do a single; bignum multiplication, and then revert again to multiplication; in an integerPart. */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:53,Security,hash,hashed,53,// Normal floats need their exponent and significand hashed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:208,Modifiability,extend,extend,208,"// Conversion from APFloat to/from host float/double. It may eventually be; // possible to eliminate these and have everybody deal with APFloats, but that; // will take a while. This approach will not easily extend to long double.; // Current implementation requires integerPartWidth==64, which is correct at; // the moment but could be made more general.; // Denormals have exponent minExponent in APFloat, but minExponent-1 in; // the actual IEEE respresentations. We compensate for that here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:32,Safety,avoid,avoid,32,"// Convert number to double. To avoid spurious underflows, we re-; // normalize against the ""double"" minExponent first, and only *then*; // truncate the mantissa. The result of that second conversion; // may be inexact, but should never underflow.; // Declare fltSemantics before APFloat that uses it (and; // saves pointer to it) to ensure correct destruction order.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:148,Modifiability,extend,extended,148,"// If conversion was exact or resulted in a special case, we're done;; // just set the second double to zero. Otherwise, re-convert back to; // the extended format and compute the difference. This now should; // convert exactly to double.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:3,Usability,Clear,Clear,3,// Clear the integer bit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:48,Usability,clear,clear,48,// Copy the bits of the significand. We need to clear out the exponent and; // sign bit in the last word.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:28,Availability,down,down,28,// Truncate the significand down to its active bit count.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:79,Availability,down,down,79,"// Round.; // FIXME: this probably shouldn't use 'round half up'.; // Rounding down is just a truncation, except we also want to drop; // trailing zeros from the new result.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:284,Integrability,depend,depending,284,"// We use enough digits so the number can be round-tripped back to an; // APFloat. The formula comes from ""How to Print Floating-Point Numbers; // Accurately"" by Steele and White.; // FIXME: Using a formula based purely on the precision is conservative;; // we can print fewer digits depending on the actual value being printed.; // FormatPrecision = 2 + floor(significandBits / lg_2(10))",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:144,Safety,avoid,avoid,144,"// We transform this using the identity:; // (N)(2^-e) == (N)(5^e)(10^-e); // This means we have to multiply N (the significand) by 5^e.; // To avoid overflow, we have to operate on numbers large; // enough to store N * 5^e:; // log2(N * 5^e) == log2(N) + e * log2(5); // <= semantics->precision + e * 137 / 59; // (log_2(5) ~ 2.321928 < 2.322034 ~ 137/59)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:8,Availability,down,down,8,// Drop down to FormatPrecision.; // TODO: don't do more precise calculations above than are required.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:3,Energy Efficiency,Power,Power,3,// Power of the most significant digit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:30,Energy Efficiency,power,power,30,// Check that the number is a power of two by making sure that only the; // integer bit is set in the significand.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:3,Safety,Avoid,Avoid,3,"// Avoid multiplication with a denormal, it is not safe on all platforms and; // may be slower than a normal division.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:51,Safety,safe,safe,51,"// Avoid multiplication with a denormal, it is not safe on all platforms and; // may be slower than a normal division.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:13,Performance,perform,performing,13,"// If we are performing nextDown, swap sign so we have -x.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:259,Usability,clear,clear,259,"// If we are positive, we need to increment the significand.; // We only cross a binade boundary that requires adjusting the exponent if; // the input is not a denormal and all of said input's significand bits; // are set. If all of said conditions are true: clear the significand, set; // the integral bit to 1, and increment the exponent. If we have a; // denormal always increment since moving denormals and the numbers in the; // smallest normal binade have the same exponent in our representation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:13,Performance,perform,performing,13,"// If we are performing nextDown, swap sign so we have -nextUp(-x)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:98,Safety,safe,safe,98,"// If Exp is wildly out-of-scale, simply adding it to X.exponent will; // overflow; clamp it to a safe range before adding, but ensure that the range; // is large enough that the clamp does not change the result. The range we; // need to support is the difference between the largest possible exponent and; // the normalized exponent of half the smallest denormal.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:34,Usability,simpl,simply,34,"// If Exp is wildly out-of-scale, simply adding it to X.exponent will; // overflow; clamp it to a safe range before adding, but ensure that the range; // is large enough that the clamp does not change the result. The range we; // need to support is the difference between the largest possible exponent and; // the normalized exponent of half the smallest denormal.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp:86,Safety,avoid,avoid,86,// zz = q + c + (a - (q + z)) + aa + cc;; // Compute a - (q + z) as -((q + z) - a) to avoid temporary copies.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APFloat.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APFloat.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:70,Availability,failure,failures,70,"/// A utility function for allocating memory, checking for allocation failures,; /// and ensuring the contents are zeroed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:78,Availability,failure,failure,78,/// A utility function for allocating memory and checking for allocation; /// failure. The content is not zeroed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:15,Usability,clear,cleared,15,"// Get memory, cleared to 0",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:34,Usability,clear,cleared,34,// Make sure unused high bits are cleared,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:3,Deployability,Update,Update,3,// Update BitWidth.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:21,Availability,mask,mask,21,// Create an initial mask for the low word with zeros below loBit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:43,Availability,mask,mask,43,"// If hiBit is not aligned, we need a high mask.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:17,Availability,mask,mask,17,// Create a high mask with zeros above hiBit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:55,Availability,mask,masks,55,"// If loWord and hiWord are equal, then we combine the masks. Otherwise,; // set the bits in hiWord.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:13,Availability,mask,mask,13,// Apply the mask to the low word.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:4,Deployability,Toggle,Toggle,4,/// Toggle every bit to its opposite value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:4,Deployability,Toggle,Toggle,4,"/// Toggle a given bit to its opposite value whose position is given; /// as ""bitPosition"".; /// Toggles a given bit to its opposite value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:97,Deployability,Toggle,Toggles,97,"/// Toggle a given bit to its opposite value whose position is given; /// as ""bitPosition"".; /// Toggles a given bit to its opposite value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:3,Availability,Mask,Mask,3,// Mask+insert remaining bits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:95,Performance,optimiz,optimization,95,"// General case - set/clear individual bits in dst based on src.; // TODO - there is scope for optimization here, but at the moment this code; // path is barely used so prefer readability over performance.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:193,Performance,perform,performance,193,"// General case - set/clear individual bits in dst based on src.; // TODO - there is scope for optimization here, but at the moment this code; // path is barely used so prefer readability over performance.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:22,Usability,clear,clear,22,"// General case - set/clear individual bits in dst based on src.; // TODO - there is scope for optimization here, but at the moment this code; // path is barely used so prefer readability over performance.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:18,Energy Efficiency,power,power-of-two,18,"// For radixes of power-of-two values, the bits required is accurately and; // easily computed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:100,Safety,avoid,avoids,100,"// Compute a sufficient number of bits that is always large enough but might; // be too large. This avoids the assertion in the constructor. This; // calculation doesn't work appropriately for the numbers 0-9, so just use 4; // bits in that case.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:111,Testability,assert,assertion,111,"// Compute a sufficient number of bits that is always large enough but might; // be too large. This avoids the assertion in the constructor. This; // calculation doesn't work appropriately for the numbers 0-9, so just use 4; // bits in that case.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:46,Testability,log,log,46,"// Compute how many bits are required. If the log is infinite, assume we need; // just bit. If the log is exact and value is negative, then the value is; // MinSignedValue with (log + 1) bits.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:99,Testability,log,log,99,"// Compute how many bits are required. If the log is infinite, assume we need; // just bit. If the log is exact and value is negative, then the value is; // MinSignedValue with (log + 1) bits.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:178,Testability,log,log,178,"// Compute how many bits are required. If the log is infinite, assume we need; // just bit. If the log is exact and value is negative, then the value is; // MinSignedValue with (log + 1) bits.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:16,Energy Efficiency,power,powers,16,// Count common powers of 2 and remove all other powers of 2.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:49,Energy Efficiency,power,powers,49,// Count common powers of 2 and remove all other powers of 2.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:178,Energy Efficiency,efficient,efficient,178,"// Both operands are odd multiples of 2^Pow_2:; //; // gcd(a, b) = gcd(|a - b| / 2^i, min(a, b)); //; // This is a modified version of Stein's algorithm, taking advantage of; // efficient countTrailingZeros().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:27,Usability,clear,clearing,27,// Extract the mantissa by clearing the top 12 bits (sign + exponent).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:91,Performance,optimiz,optimize,91,// Handle the simple case where the value is contained in one uint64_t.; // It is wrong to optimize getWord(0) to VAL; there might be more than one word.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:14,Usability,simpl,simple,14,// Handle the simple case where the value is contained in one uint64_t.; // It is wrong to optimize getWord(0) to VAL; there might be more than one word.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:9,Availability,down,down,9,"// shift down, we want the top 52 bits.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:8,Modifiability,extend,extend,8,// Sign extend to a new width.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:8,Modifiability,extend,extend,8,// Sign extend the last word since there may be unused bits in the input.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:8,Modifiability,extend,extend,8,// Zero extend to a new width.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:16,Performance,perform,performing,16,// Don't bother performing a no-op shift.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:8,Modifiability,extend,extend,8,// Sign extend the last word to fill in the unused bits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:8,Modifiability,extend,extend,8,// Sign extend one more time.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:4,Testability,Log,Logical,4,/// Logical right-shift this APInt by shiftAmt.; /// Logical right-shift function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:53,Testability,Log,Logical,53,/// Logical right-shift this APInt by shiftAmt.; /// Logical right-shift function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:4,Testability,Log,Logical,4,/// Logical right-shift this APInt by shiftAmt.; /// Logical right-shift function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:53,Testability,Log,Logical,53,/// Logical right-shift this APInt by shiftAmt.; /// Logical right-shift function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:3,Modifiability,Extend,Extend,3,"// Extend the rotate APInt, so that the urem doesn't divide by 0.; // e.g. APInt(1, 32) would give APInt(1, 0).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:25,Testability,log,log,25,"/// \returns the nearest log base 2 of this APInt. Ties round up.; ///; /// NOTE: When we have a BitWidth of 1, we define:; ///; /// log2(0) = UINT32_MAX; /// log2(1) = 0; ///; /// to get around any mathematical concerns resulting from; /// referencing 2 in a space where 2 does no exist.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:197,Performance,perform,performance,197,"// Square Root - this method computes and returns the square root of ""this"".; // Three mechanisms are used for computation. For small values (<= 5 bits),; // a table lookup is done. This gets some performance for common cases. For; // values using less than 52 bits, the value is converted to double and then; // the libc sqrt function is called. The result is rounded and then converted; // back to a uint64_t which is then used to construct the result. Finally,; // the Babylonian method for computing square roots is used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:83,Availability,error,errors,83,// Use a fast table for some small values. This also gets rid of some; // rounding errors in libc sqrt for small values.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:163,Energy Efficiency,adapt,adapted,163,"// Okay, all the short cuts are exhausted. We must compute it. The following; // is a classical Babylonian method for computing the square root. This code; // was adapted to APInt from a wikipedia article on such computations.; // See http://www.wikipedia.org/ and go to the page named; // Calculate_an_integer_square_root.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:163,Modifiability,adapt,adapted,163,"// Okay, all the short cuts are exhausted. We must compute it. The following; // is a classical Babylonian method for computing the square root. This code; // was adapted to APInt from a wikipedia article on such computations.; // See http://www.wikipedia.org/ and go to the page named; // Calculate_an_integer_square_root.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:45,Testability,log,logarithms,45,// Select a good starting value using binary logarithms.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:93,Modifiability,extend,extended,93,"/// Computes the multiplicative inverse of this APInt for a given modulo. The; /// iterative extended Euclidean algorithm is used to solve for this value,; /// however we simplify it to speed up calculating only the inverse, and take; /// advantage of div+rem calculations. We also use some tricks to avoid copying; /// (potentially large) APInts around.; /// WARNING: a value of '0' may be returned,; /// signifying that no multiplicative inverse exists!",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:301,Safety,avoid,avoid,301,"/// Computes the multiplicative inverse of this APInt for a given modulo. The; /// iterative extended Euclidean algorithm is used to solve for this value,; /// however we simplify it to speed up calculating only the inverse, and take; /// advantage of div+rem calculations. We also use some tricks to avoid copying; /// (potentially large) APInts around.; /// WARNING: a value of '0' may be returned,; /// signifying that no multiplicative inverse exists!",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:171,Usability,simpl,simplify,171,"/// Computes the multiplicative inverse of this APInt for a given modulo. The; /// iterative extended Euclidean algorithm is used to solve for this value,; /// however we simplify it to speed up calculating only the inverse, and take; /// advantage of div+rem calculations. We also use some tricks to avoid copying; /// (potentially large) APInts around.; /// WARNING: a value of '0' may be returned,; /// signifying that no multiplicative inverse exists!",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:413,Modifiability,extend,extended,413,"// Using the properties listed at the following web page (accessed 06/21/08):; // http://www.numbertheory.org/php/euclid.html; // (especially the properties numbered 3, 4 and 9) it can be proved that; // BitWidth bits suffice for all the computations in the algorithm implemented; // below. More precisely, this number of bits suffice if the multiplicative; // inverse exists, but may not suffice for the general extended Euclidean; // algorithm.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:58,Security,access,accessed,58,"// Using the properties listed at the following web page (accessed 06/21/08):; // http://www.numbertheory.org/php/euclid.html; // (especially the properties numbered 3, 4 and 9) it can be proved that; // BitWidth bits suffice for all the computations in the algorithm implemented; // below. More precisely, this number of bits suffice if the multiplicative; // inverse exists, but may not suffice for the general extended Euclidean; // algorithm.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:172,Usability,simpl,simple,172,"// The next-to-last t is the multiplicative inverse. However, we are; // interested in a positive inverse. Calculate a positive one from a negative; // one if necessary. A simple addition of the modulo suffices because; // abs(t[i]) is known to be less than *this/2 (see the link above).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:160,Modifiability,variab,variables,160,"/// Implementation of Knuth's Algorithm D (Division of nonnegative integers); /// from ""Art of Computer Programming, Volume 2"", section 4.3.1, p. 272. The; /// variables here have the same names as in the algorithm. Comments explain; /// the algorithm and any deviation from it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:147,Energy Efficiency,power,power,147,// D1. [Normalize.] Set d = b / (v[n-1] + 1) and multiply all the digits of; // u and v by d. Note that we have taken Knuth's advice here to use a power; // of 2 value for d such that d * v[n-1] >= b/2 (b is the base). A power of; // 2 allows us to shift instead of multiply and it is easy to determine the; // shift amount from the leading zeros. We are basically normalizing the u; // and v so that its high bits are shifted to the top of v's range without; // overflow. Note that this can require an extra word in u so that u must; // be of length m+n+1.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:221,Energy Efficiency,power,power,221,// D1. [Normalize.] Set d = b / (v[n-1] + 1) and multiply all the digits of; // u and v by d. Note that we have taken Knuth's advice here to use a power; // of 2 value for d such that d * v[n-1] >= b/2 (b is the base). A power of; // 2 allows us to shift instead of multiply and it is easy to determine the; // shift amount from the leading zeros. We are basically normalizing the u; // and v so that its high bits are shifted to the top of v's range without; // overflow. Note that this can require an extra word in u so that u must; // be of length m+n+1.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:152,Testability,test,test,152,"// D3. [Calculate q'.].; // Set qp = (u[j+n]*b + u[j+n-1]) / v[n-1]. (qp=qprime=q'); // Set rp = (u[j+n]*b + u[j+n-1]) % v[n-1]. (rp=rprime=r'); // Now test if qp == b or qp*v[n-2] > b*rp + u[j+n-2]; if so, decrease; // qp by 1, increase rp by v[n-1], and repeat this test if rp < b. The test; // on v[n-2] determines at high speed most of the cases in which the trial; // value qp is one too large, and it eliminates all cases where qp is two; // too large.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:268,Testability,test,test,268,"// D3. [Calculate q'.].; // Set qp = (u[j+n]*b + u[j+n-1]) / v[n-1]. (qp=qprime=q'); // Set rp = (u[j+n]*b + u[j+n-1]) % v[n-1]. (rp=rprime=r'); // Now test if qp == b or qp*v[n-2] > b*rp + u[j+n-2]; if so, decrease; // qp by 1, increase rp by v[n-1], and repeat this test if rp < b. The test; // on v[n-2] determines at high speed most of the cases in which the trial; // value qp is one too large, and it eliminates all cases where qp is two; // too large.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:288,Testability,test,test,288,"// D3. [Calculate q'.].; // Set qp = (u[j+n]*b + u[j+n-1]) / v[n-1]. (qp=qprime=q'); // Set rp = (u[j+n]*b + u[j+n-1]) % v[n-1]. (rp=rprime=r'); // Now test if qp == b or qp*v[n-2] > b*rp + u[j+n-2]; if so, decrease; // qp by 1, increase rp by v[n-1], and repeat this test if rp < b. The test; // on v[n-2] determines at high speed most of the cases in which the trial; // value qp is one too large, and it eliminates all cases where qp is two; // too large.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:159,Usability,simpl,simple,159,"// D4. [Multiply and subtract.] Replace (u[j+n]u[j+n-1]...u[j]) with; // (u[j+n]u[j+n-1]..u[j]) - qp * (v[n-1]...v[1]v[0]). This computation; // consists of a simple multiplication by a one-place number, combined with; // a subtraction.; // The digits (u[j+n]...u[j]) should be kept positive; if the result of; // this step is actually negative, (u[j+n]...u[j]) should be left as the; // true value plus b**(n+1), namely as the b's complement of; // the true value, and a ""borrow"" to the left should be remembered.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:8,Testability,Test,Test,8,"// D5. [Test remainder.] Set q[j] = qp. If the result of step D4 was; // negative, go to step D6; otherwise go on to step D7.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:123,Testability,test,test,123,"// D6. [Add back]. The probability that this step is necessary is very; // small, on the order of only 2/b. Make sure that test data accounts for; // this possibility. Decrease q[j] by 1",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:64,Safety,avoid,avoided,64,"// The value d is expressed by the ""shift"" value above since we avoided; // multiplication by d by using a shift left. So, all we have to do is; // shift right here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:3,Energy Efficiency,Allocate,Allocate,3,"// Allocate space for the temporary values we need either on the stack, if; // it will fit, or on the heap if it won't.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:145,Usability,simpl,simpler,145,"// If we're left with only a single word for the divisor, Knuth doesn't work; // so we implement the short division algorithm here. This is much simpler; // and faster because we are certain that we can divide a 64-bit quantity; // by a 32-bit quantity at hardware speed and short division is simply a; // series of such operations. This is just like doing short division but we; // are using base 2^32 instead of base 10.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:293,Usability,simpl,simply,293,"// If we're left with only a single word for the divisor, Knuth doesn't work; // so we implement the short division algorithm here. This is much simpler; // and faster because we are certain that we can divide a 64-bit quantity; // by a 32-bit quantity at hardware speed and short division is simply a; // series of such operations. This is just like doing short division but we; // are using base 2^32 instead of base 10.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:26,Energy Efficiency,allocate,allocated,26,// Clean up the memory we allocated.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:3,Usability,Clear,Clear,3,// Clear the rest of the Quotient and Remainder.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:3,Usability,Clear,Clear,3,// Clear the rest of the Quotient.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:3,Energy Efficiency,Allocate,Allocate,3,// Allocate memory if needed,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:60,Testability,log,logic,60,"// First, check for a zero value and just short circuit the logic below.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:196,Safety,safe,safe,196,"// This implements a variety of operations on a representation of; // arbitrary precision, two's-complement, bignum integer values.; // Assumed by lowHalf, highHalf, partMSB and partLSB. A fairly safe; // and unrestricting assumption.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:4,Usability,Clear,Clears,4,/// Clears the given bit of a bignum.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:138,Usability,clear,clear,138,"// We now have (dstParts * APINT_BITS_PER_WORD - shift) bits from SRC; // in DST. If this is less that srcBits, append the rest, else; // clear the high bits.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:3,Usability,Clear,Clear,3,// Clear high parts.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:324,Integrability,rout,routine,324,"// If RHS is zero LHS and REMAINDER are left unchanged, return one.; // Otherwise set LHS to LHS / RHS with the fractional part discarded,; // set REMAINDER to the remainder, return zero. i.e.; //; // OLD_LHS = RHS * LHS + REMAINDER; //; // SCRATCH is a bignum of the same size as the operands and result for; // use by the routine; its contents need not be initialized and are; // destroyed. LHS, REMAINDER and SCRATCH must be distinct.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:16,Performance,perform,performing,16,// Don't bother performing a no-op shift.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:16,Performance,perform,performing,16,// Don't bother performing a no-op shift.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:35,Availability,down,down,35,// Currently udivrem always rounds down.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:228,Availability,down,down,228,"// This algorithm deals with arbitrary rounding mode used by sdivrem.; // We want to check whether the non-integer part of the mathematical value; // is negative or not. If the non-integer part is negative, we need to round; // down from Quo; otherwise, if it's positive or 0, we return Quo, as it's; // already rounded down.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:320,Availability,down,down,320,"// This algorithm deals with arbitrary rounding mode used by sdivrem.; // We want to check whether the non-integer part of the mathematical value; // is negative or not. If the non-integer part is negative, we need to round; // down from Quo; otherwise, if it's positive or 0, we return Quo, as it's; // already rounded down.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:18,Usability,simpl,simplicity,18,// Make A > 0 for simplicity. Negate cannot overflow at this point because; // the bit width has increased.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:973,Availability,down,down,973,"// Solving an equation q(x) = 0 with coefficients in modular arithmetic; // is really solving a set of equations q(x) = kR for k = 0, 1, 2, ...,; // and R = 2^BitWidth.; // Since we're trying not only to find exact solutions, but also values; // that ""wrap around"", such a set will always have a solution, i.e. an x; // that satisfies at least one of the equations, or such that |q(x)|; // exceeds kR, while |q(x-1)| for the same k does not.; //; // We need to find a value k, such that Ax^2 + Bx + C = kR will have a; // positive solution n (in the above sense), and also such that the n; // will be the least among all solutions corresponding to k = 0, 1, ...; // (more precisely, the least element in the set; // { n(k) | k is such that a solution n(k) exists }).; //; // Consider the parabola (over real numbers) that corresponds to the; // quadratic equation. Since A > 0, the arms of the parabola will point; // up. Picking different values of k will shift it up and down by R.; //; // We want to shift the parabola in such a way as to reduce the problem; // of solving q(x) = kR to solving shifted_q(x) = 0.; // (The interesting solutions are the ceilings of the real number; // solutions.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:1042,Energy Efficiency,reduce,reduce,1042,"// Solving an equation q(x) = 0 with coefficients in modular arithmetic; // is really solving a set of equations q(x) = kR for k = 0, 1, 2, ...,; // and R = 2^BitWidth.; // Since we're trying not only to find exact solutions, but also values; // that ""wrap around"", such a set will always have a solution, i.e. an x; // that satisfies at least one of the equations, or such that |q(x)|; // exceeds kR, while |q(x-1)| for the same k does not.; //; // We need to find a value k, such that Ax^2 + Bx + C = kR will have a; // positive solution n (in the above sense), and also such that the n; // will be the least among all solutions corresponding to k = 0, 1, ...; // (more precisely, the least element in the set; // { n(k) | k is such that a solution n(k) exists }).; //; // Consider the parabola (over real numbers) that corresponds to the; // quadratic equation. Since A > 0, the arms of the parabola will point; // up. Picking different values of k will shift it up and down by R.; //; // We want to shift the parabola in such a way as to reduce the problem; // of solving q(x) = kR to solving shifted_q(x) = 0.; // (The interesting solutions are the ceilings of the real number; // solutions.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:252,Integrability,wrap,wrap,252,"// Solving an equation q(x) = 0 with coefficients in modular arithmetic; // is really solving a set of equations q(x) = kR for k = 0, 1, 2, ...,; // and R = 2^BitWidth.; // Since we're trying not only to find exact solutions, but also values; // that ""wrap around"", such a set will always have a solution, i.e. an x; // that satisfies at least one of the equations, or such that |q(x)|; // exceeds kR, while |q(x-1)| for the same k does not.; //; // We need to find a value k, such that Ax^2 + Bx + C = kR will have a; // positive solution n (in the above sense), and also such that the n; // will be the least among all solutions corresponding to k = 0, 1, ...; // (more precisely, the least element in the set; // { n(k) | k is such that a solution n(k) exists }).; //; // Consider the parabola (over real numbers) that corresponds to the; // quadratic equation. Since A > 0, the arms of the parabola will point; // up. Picking different values of k will shift it up and down by R.; //; // We want to shift the parabola in such a way as to reduce the problem; // of solving q(x) = kR to solving shifted_q(x) = 0.; // (The interesting solutions are the ceilings of the real number; // solutions.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:423,Usability,simpl,simply,423,"// If C-kR < 0 for all potential k's, it means that one solution; // will be negative, while the other will be positive. The positive; // solution will shift towards 0 if the parabola is moved up.; // Pick the kR closest to the lower bound (i.e. make C-kR closest; // to 0, or in other words, out of all parabolas that have solutions,; // pick the one that is the farthest ""up"").; // Since LowkR is itself a multiple of R, simply take C-LowkR.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:17,Availability,down,down,17,"// SQ is rounded down (i.e SQ * SQ <= D), so the roots may be inexact.; // When using the quadratic formula directly, the calculated low root; // may be greater than the exact one, since we would be subtracting SQ.; // To make sure that the calculated root is not greater than the exact; // one, subtract SQ+1 when calculating the low root (for inexact value; // of SQ).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:7,Deployability,update,updated,7,"// The updated coefficients should be such that the (exact) solution is; // positive. Since APInt division rounds towards 0, the calculated one; // can be 0, but cannot be negative.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:4,Performance,Load,LoadIntFromMemory,4,"/// LoadIntFromMemory - Loads the integer stored in the LoadBytes bytes starting; /// from Src into IntVal, which is assumed to be wide enough and to hold zero.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:24,Performance,Load,Loads,24,"/// LoadIntFromMemory - Loads the integer stored in the LoadBytes bytes starting; /// from Src into IntVal, which is assumed to be wide enough and to hold zero.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp:56,Performance,Load,LoadBytes,56,"/// LoadIntFromMemory - Loads the integer stored in the LoadBytes bytes starting; /// from Src into IntVal, which is assumed to be wide enough and to hold zero.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APSInt.cpp:433,Usability,simpl,simple,433,"//===-- llvm/ADT/APSInt.cpp - Arbitrary Precision Signed Int ---*- C++ -*--===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the APSInt class, which is a simple class that; // represents an arbitrary sized integer that knows its signedness.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/APSInt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/APSInt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ARMAttributeParser.cpp:113,Availability,error,errors,113,"// Parse value as a C string first in order to print it in escaped form later.; // Then, parse it again to catch errors or to pretty print if Tag_CPU_arch.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ARMAttributeParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ARMAttributeParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BalancedPartitioning.cpp:114,Availability,avail,available,114,"// TODO: We could remove the mutex and condition variable and use; // std::atomic::wait() instead, but that isn't available until C++20",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BalancedPartitioning.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BalancedPartitioning.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BalancedPartitioning.cpp:49,Modifiability,variab,variable,49,"// TODO: We could remove the mutex and condition variable and use; // std::atomic::wait() instead, but that isn't available until C++20",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BalancedPartitioning.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BalancedPartitioning.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BalancedPartitioning.cpp:23,Performance,cache,caches,23,// Init signature cost caches,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BalancedPartitioning.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BalancedPartitioning.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BalancedPartitioning.cpp:3,Deployability,Update,Update,3,// Update the current bucket,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BalancedPartitioning.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BalancedPartitioning.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BalancedPartitioning.cpp:3,Deployability,Update,Update,3,// Update signatures and invalidate gain cache,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BalancedPartitioning.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BalancedPartitioning.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BalancedPartitioning.cpp:41,Performance,cache,cache,41,// Update signatures and invalidate gain cache,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BalancedPartitioning.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BalancedPartitioning.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Base64.cpp:222,Safety,safe,safe,222,"// If we had valid trailing '=' characters strip the right number of bytes; // from the end of the output buffer. We already know that the Input length; // it a multiple of 4 and is not zero, so direct character access is safe.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Base64.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Base64.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Base64.cpp:212,Security,access,access,212,"// If we had valid trailing '=' characters strip the right number of bytes; // from the end of the output buffer. We already know that the Input length; // it a multiple of 4 and is not zero, so direct character access is safe.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Base64.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Base64.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BinaryStreamError.cpp:31,Availability,Error,Error,31,"//===- BinaryStreamError.cpp - Error extensions for streams -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BinaryStreamError.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BinaryStreamError.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BinaryStreamRef.cpp:3,Modifiability,Inherit,Inherited,3,// Inherited via WritableBinaryStream,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BinaryStreamRef.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BinaryStreamRef.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BranchProbability.cpp:56,Safety,avoid,avoids,56,// Get a percentage rounded to two decimal digits. This avoids; // implementation-defined rounding inside printf.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BranchProbability.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BranchProbability.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BranchProbability.cpp:9,Availability,down,down,9,// Scale down Denominator to fit in a 32-bit integer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BranchProbability.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BranchProbability.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BranchProbability.cpp:106,Performance,optimiz,optimized,106,"// If ConstD is not zero, then replace D by ConstD so that division and modulo; // operations by D can be optimized, in case this function is not inlined by the; // compiler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BranchProbability.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BranchProbability.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BuryPointer.cpp:275,Safety,detect,detector,275,"// This function may be called only a small fixed amount of times per each; // invocation, otherwise we do actually have a leak which we want to report.; // If this function is called more than kGraveYardMaxSize times, the pointers; // will not be properly buried and a leak detector will report a leak, which; // is what we want in such case.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BuryPointer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BuryPointer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CachePruning.cpp:6,Performance,Cache,CachePruning,6,"//===-CachePruning.cpp - LLVM Cache Directory Pruning ---------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the pruning of a directory based on least recently used.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CachePruning.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CachePruning.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CachePruning.cpp:30,Performance,Cache,Cache,30,"//===-CachePruning.cpp - LLVM Cache Directory Pruning ---------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the pruning of a directory based on least recently used.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CachePruning.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CachePruning.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CachePruning.cpp:14,Performance,cache,cache,14,/// Prune the cache of files that haven't been accessed in a long time.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CachePruning.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CachePruning.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CachePruning.cpp:47,Security,access,accessed,47,/// Prune the cache of files that haven't been accessed in a long time.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CachePruning.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CachePruning.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CachePruning.cpp:11,Availability,error,error,11,// Unknown error?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CachePruning.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CachePruning.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CachePruning.cpp:91,Performance,race condition,race condition,91,"// Write a new timestamp file so that nobody else attempts to prune.; // There is a benign race condition here, if two processes happen to; // notice at the same time that the timestamp is out-of-date.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CachePruning.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CachePruning.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CachePruning.cpp:29,Performance,cache,cache,29,"// Walk the entire directory cache, looking for unused files.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CachePruning.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CachePruning.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CachePruning.cpp:245,Performance,cache,cache,245,"// Ignore filenames not beginning with ""llvmcache-"" or ""Thin-"". This; // includes the timestamp file as well as any files created by the user.; // This acts as a safeguard against data loss if the user specifies the; // wrong directory as their cache directory.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CachePruning.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CachePruning.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CachePruning.cpp:162,Safety,safe,safeguard,162,"// Ignore filenames not beginning with ""llvmcache-"" or ""Thin-"". This; // includes the timestamp file as well as any files created by the user.; // This acts as a safeguard against data loss if the user specifies the; // wrong directory as their cache directory.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CachePruning.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CachePruning.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CachePruning.cpp:3,Deployability,Update,Update,3,// Update size,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CachePruning.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CachePruning.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CachePruning.cpp:115,Performance,cache,cache,115,"// files.size() is greater the number of inputs by one. However, a timestamp; // file is created and stored in the cache directory if --thinlto-cache-policy; // option is used. Therefore, files.size() is used as ActualNums.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CachePruning.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CachePruning.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CachePruning.cpp:144,Performance,cache,cache-policy,144,"// files.size() is greater the number of inputs by one. However, a timestamp; // file is created and stored in the cache directory if --thinlto-cache-policy; // option is used. Therefore, files.size() is used as ActualNums.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CachePruning.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CachePruning.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CachePruning.cpp:21,Security,access,accessed,21,"// Remove the oldest accessed files first, till we get below the threshold.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CachePruning.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CachePruning.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Caching.cpp:36,Performance,Cache,Cache,36,"//===-Caching.cpp - LLVM Local File Cache ---------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the localCache function, which simplifies creating,; // adding to, and querying a local file system cache. localCache takes care of; // periodically pruning older files from the cache using a CachePruningPolicy.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Caching.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Caching.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Caching.cpp:504,Performance,cache,cache,504,"//===-Caching.cpp - LLVM Local File Cache ---------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the localCache function, which simplifies creating,; // adding to, and querying a local file system cache. localCache takes care of; // periodically pruning older files from the cache using a CachePruningPolicy.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Caching.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Caching.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Caching.cpp:582,Performance,cache,cache,582,"//===-Caching.cpp - LLVM Local File Cache ---------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the localCache function, which simplifies creating,; // adding to, and querying a local file system cache. localCache takes care of; // periodically pruning older files from the cache using a CachePruningPolicy.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Caching.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Caching.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Caching.cpp:596,Performance,Cache,CachePruningPolicy,596,"//===-Caching.cpp - LLVM Local File Cache ---------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the localCache function, which simplifies creating,; // adding to, and querying a local file system cache. localCache takes care of; // periodically pruning older files from the cache using a CachePruningPolicy.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Caching.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Caching.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Caching.cpp:435,Usability,simpl,simplifies,435,"//===-Caching.cpp - LLVM Local File Cache ---------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the localCache function, which simplifies creating,; // adding to, and querying a local file system cache. localCache takes care of; // periodically pruning older files from the cache using a CachePruningPolicy.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Caching.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Caching.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Caching.cpp:33,Safety,safe,safely,33,// Create local copies which are safely captured-by-copy in lambdas,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Caching.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Caching.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Caching.cpp:39,Performance,cache,cache,39,// This choice of file name allows the cache to be pruned (see pruneCache(); // in include/llvm/Support/CachePruning.h).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Caching.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Caching.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Caching.cpp:104,Performance,Cache,CachePruning,104,// This choice of file name allows the cache to be pruned (see pruneCache(); // in include/llvm/Support/CachePruning.h).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Caching.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Caching.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Caching.cpp:27,Performance,cache,cache,27,"// First, see if we have a cache hit.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Caching.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Caching.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Caching.cpp:76,Availability,error,error,76,"// On Windows we can fail to open a cache file with a permission denied; // error. This generally means that another process has requested to delete; // the file while it is still open, but it could also mean that another; // process has opened the file without the sharing permissions we need.; // Since the file is probably being deleted we handle it in the same way as; // if the file did not exist at all.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Caching.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Caching.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Caching.cpp:36,Performance,cache,cache,36,"// On Windows we can fail to open a cache file with a permission denied; // error. This generally means that another process has requested to delete; // the file while it is still open, but it could also mean that another; // process has opened the file without the sharing permissions we need.; // Since the file is probably being deleted we handle it in the same way as; // if the file did not exist at all.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Caching.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Caching.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Caching.cpp:79,Performance,cache,cache,79,// This file stream is responsible for commiting the resulting file to the; // cache and calling AddBuffer to add it to the link.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Caching.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Caching.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Caching.cpp:125,Availability,Error,Error,125,"// TODO: Manually commit rather than using non-trivial destructor,; // allowing to replace report_fatal_errors with a return Error.; // Make sure the stream is closed before committing it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Caching.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Caching.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Caching.cpp:46,Performance,cache,cache,46,// Open the file first to avoid racing with a cache pruner.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Caching.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Caching.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Caching.cpp:26,Safety,avoid,avoid,26,// Open the file first to avoid racing with a cache pruner.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Caching.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Caching.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Caching.cpp:174,Availability,error,error,174,"// On POSIX systems, this will atomically replace the destination if; // it already exists. We try to emulate this on Windows, but this may; // fail with a permission denied error (for example, if the destination; // is currently opened by another process that does not give us the; // sharing permissions we need). Since the existing file should be; // semantically equivalent to the one we are trying to write, we give; // AddBuffer a copy of the bytes we wrote in that case. We do this; // instead of just using the existing file, because the pruner might; // delete the file before we get a chance to use it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Caching.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Caching.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Caching.cpp:40,Availability,error,error,40,// FIXME: should we consume the discard error?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Caching.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Caching.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Caching.cpp:14,Performance,cache,cache,14,// Create the cache directory if not already done. Doing this lazily; // ensures the filesystem isn't mutated until the cache is.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Caching.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Caching.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Caching.cpp:120,Performance,cache,cache,120,// Create the cache directory if not already done. Doing this lazily; // ensures the filesystem isn't mutated until the cache is.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Caching.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Caching.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Caching.cpp:33,Performance,race condition,race condition,33,// Write to a temporary to avoid race condition,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Caching.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Caching.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Caching.cpp:27,Safety,avoid,avoid,27,// Write to a temporary to avoid race condition,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Caching.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Caching.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Caching.cpp:8,Performance,Cache,CacheStream,8,// This CacheStream will move the temporary file into the cache when done.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Caching.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Caching.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Caching.cpp:58,Performance,cache,cache,58,// This CacheStream will move the temporary file into the cache when done.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Caching.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Caching.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/circular_raw_ostream.cpp:26,Integrability,wrap,wrapping,26,"// Write into the buffer, wrapping if necessary.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/circular_raw_ostream.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/circular_raw_ostream.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CodeGenCoverage.cpp:41,Integrability,depend,depending,41,"// Anything else, is recorded or ignored depending on whether it's; // intended for the backend we're interested in.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CodeGenCoverage.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CodeGenCoverage.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp:515,Integrability,interface,interface,515,"//===-- CommandLine.cpp - Command line parser implementation --------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This class implements a command line argument processor that is useful when; // creating a tool. It provides a simple, minimalistic interface that is easily; // extensible and supports nonlocal (library) command line options.; //; // Note that rather than trying to figure out what this code does, you could try; // reading the library documentation located in docs/CommandLine.html; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp:494,Usability,simpl,simple,494,"//===-- CommandLine.cpp - Command line parser implementation --------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This class implements a command line argument processor that is useful when; // creating a tool. It provides a simple, minimalistic interface that is easily; // extensible and supports nonlocal (library) command line options.; //; // Note that rather than trying to figure out what this code does, you could try; // reading the library documentation located in docs/CommandLine.html; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp:81,Safety,avoid,avoid,81,// Globals for name and overview of program. Program name is not a string to; // avoid static ctor/dtor issues.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp:27,Availability,error,errors,27,// Fail hard if there were errors. These are strictly unrecoverable and; // indicate serious issues such as conflicting option names or an; // incorrectly; // linked LLVM distribution.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp:158,Availability,failure,failure,158,"// If the argument before the = is a valid option name and the option allows; // non-prefix form (ie is not AlwaysPrefix), we match. If not, signal match; // failure by returning nullptr.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp:38,Integrability,wrap,wrapper,38,/// CommaSeparateAndAddOccurrence - A wrapper around Handler->addOccurrence(); /// that does special handling of cl::CommaSeparated options.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp:133,Availability,avail,available,133,"/// HandlePrefixedOrGroupedOption - The specified argument string (which started; /// with at least one '-') does not fully match an available option. Check to; /// see if this is a prefix or grouped option. If so, split arg into output an; /// Arg/Value pair and return the Option to parse it with.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp:3,Deployability,Update,Update,3,// Update expansion construct.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp:140,Deployability,update,updated,140,"// To detect recursive response files, we maintain a stack of files and the; // position of the last argument in the file. This position is updated; // dynamically as we recursively expand files.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp:6,Safety,detect,detect,6,"// To detect recursive response files, we maintain a stack of files and the; // position of the last argument in the file. This position is updated; // dynamically as we recursively expand files.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp:9,Performance,cache,cache,9,// Don't cache Argv.size() because it can change.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp:88,Availability,failure,failure,88,"// If successful, the top of the file stack will mark the end of the Argv; // stream. A failure here indicates a bug in the stack popping logic above.; // Note that FileStack may have more than one element at this point because we; // don't have a chance to pop the stack when encountering recursive files at; // the end of the stream, so seeing that doesn't indicate a bug.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp:138,Testability,log,logic,138,"// If successful, the top of the file stack will mark the end of the Argv; // stream. A failure here indicates a bug in the stack popping logic above.; // Note that FileStack may have more than one element at this point because we; // don't have a chance to pop the stack when encountering recursive files at; // the end of the stream, so seeing that doesn't indicate a bug.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp:19,Modifiability,variab,variable,19,// The environment variable specifies initial options.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp:53,Modifiability,variab,variable,53,// Command line options can override the environment variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp:72,Deployability,configurat,configuration,72,"// If file name contains directory separator, treat it as a path to; // configuration file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp:72,Modifiability,config,configuration,72,"// If file name contains directory separator, treat it as a path to; // configuration file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp:34,Modifiability,variab,variable,34,// Parse options from environment variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp:35,Availability,avail,available,35,"// Otherwise, look for the closest available option to report to the user; // in the upcoming error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp:94,Availability,error,error,94,"// Otherwise, look for the closest available option to report to the user; // in the upcoming error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp:143,Energy Efficiency,allocate,allocated,143,"// Now that we know if -debug is specified, we can use it.; // Note that if ReadResponseFiles == true, this must be done before the; // memory allocated for the expanded command line is free()d below.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp:26,Energy Efficiency,allocate,allocated,26,// Free all of the memory allocated to the map. Command line options may only; // be processed once!,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp:16,Availability,error,error,16,"// If we had an error processing our arguments, don't let the program execute",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp:20,Safety,detect,detection,20,// Duplicate option detection.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp:16,Modifiability,inherit,inherit,16,// Make sure we inherit our base class's operator=(),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp:8,Integrability,wrap,wraps,8,// This wraps the Uncategorizing and Categorizing printers and decides; // at run time which should be invoked.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp:61,Performance,optimiz,optimizations,61,// GCC and GCC-compatible compilers define __OPTIMIZE__ when optimizations are; // enabled.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp:173,Deployability,release,release,173,"// MSVC doesn't have a predefined macro indicating if optimizations are enabled.; // Use _DEBUG instead. This macro actually corresponds to the choice between; // debug and release CRTs, but it is a reasonable proxy.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp:54,Performance,optimiz,optimizations,54,"// MSVC doesn't have a predefined macro indicating if optimizations are enabled.; // Use _DEBUG instead. This macro actually corresponds to the choice between; // debug and release CRTs, but it is a reasonable proxy.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp:57,Performance,optimiz,optimized,57,"// Otherwise, for an unknown compiler, assume this is an optimized build.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp:23,Integrability,wrap,wrappers,23,// Declare HelpPrinter wrappers that will decide whether or not to invoke; // a categorizing help printer,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp:104,Integrability,depend,depending,104,// Define uncategorized/categorized help printers. These printers change their; // behaviour at runtime depending on whether one or more Option categories; // have been declared.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp:42,Integrability,message,message,42,// Utility function for printing the help message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CommandLine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Compression.cpp:79,Safety,avoid,avoids,79,// Tell MemorySanitizer that zlib output buffer is fully initialized.; // This avoids a false report when running LLVM with uninstrumented ZLib.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Compression.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Compression.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Compression.cpp:79,Safety,avoid,avoids,79,// Tell MemorySanitizer that zlib output buffer is fully initialized.; // This avoids a false report when running LLVM with uninstrumented ZLib.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Compression.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Compression.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Compression.cpp:79,Safety,avoid,avoids,79,// Tell MemorySanitizer that zstd output buffer is fully initialized.; // This avoids a false report when running LLVM with uninstrumented ZLib.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Compression.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Compression.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Compression.cpp:79,Safety,avoid,avoids,79,// Tell MemorySanitizer that zstd output buffer is fully initialized.; // This avoids a false report when running LLVM with uninstrumented ZLib.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Compression.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Compression.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp:2625,Availability,error,error,2625,"b) this copyright and permission notice appear in associated; * documentation, and; * (c) there is clear notice in each modified Data File or in the Software; * as well as in the documentation associated with the Data File(s) or; * Software that the data or software has been modified.; *; * THE DATA FILES AND SOFTWARE ARE PROVIDED ""AS IS"", WITHOUT WARRANTY OF; * ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE; * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND; * NONINFRINGEMENT OF THIRD PARTY RIGHTS.; * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR HOLDERS INCLUDED IN THIS; * NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL INDIRECT OR CONSEQUENTIAL; * DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,; * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER; * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR; * PERFORMANCE OF THE DATA FILES OR SOFTWARE.; *; * Except as contained in this notice, the name of a copyright holder; * shall not be used in advertising or otherwise to promote the sale,; * use or other dealings in these Data Files or Software without prior; * written authorization of the copyright holder.; */; /* ---------------------------------------------------------------------. Conversions between UTF32, UTF-16, and UTF-8. Source code file.; Author: Mark E. Davis, 1994.; Rev History: Rick McGowan, fixes & updates May 2001.; Sept 2001: fixed const & error conditions per; mods suggested by S. Parent & A. Lillich.; June 2002: Tim Dodd added detection and handling of incomplete; source sequences, enhanced error detection, added casts; to eliminate compiler warnings.; July 2003: slight mods to back out aggressive FFFE detection.; Jan 2004: updated switches in from-UTF8 conversions.; Oct 2004: updated to use UNI_MAX_LEGAL_UTF32 in UTF-32 conversions. See the header file ""ConvertUTF.h"" for complete documentation. ------------------------------------------------------------------------ */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp:2781,Availability,error,error,2781,"b) this copyright and permission notice appear in associated; * documentation, and; * (c) there is clear notice in each modified Data File or in the Software; * as well as in the documentation associated with the Data File(s) or; * Software that the data or software has been modified.; *; * THE DATA FILES AND SOFTWARE ARE PROVIDED ""AS IS"", WITHOUT WARRANTY OF; * ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE; * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND; * NONINFRINGEMENT OF THIRD PARTY RIGHTS.; * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR HOLDERS INCLUDED IN THIS; * NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL INDIRECT OR CONSEQUENTIAL; * DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,; * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER; * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR; * PERFORMANCE OF THE DATA FILES OR SOFTWARE.; *; * Except as contained in this notice, the name of a copyright holder; * shall not be used in advertising or otherwise to promote the sale,; * use or other dealings in these Data Files or Software without prior; * written authorization of the copyright holder.; */; /* ---------------------------------------------------------------------. Conversions between UTF32, UTF-16, and UTF-8. Source code file.; Author: Mark E. Davis, 1994.; Rev History: Rick McGowan, fixes & updates May 2001.; Sept 2001: fixed const & error conditions per; mods suggested by S. Parent & A. Lillich.; June 2002: Tim Dodd added detection and handling of incomplete; source sequences, enhanced error detection, added casts; to eliminate compiler warnings.; July 2003: slight mods to back out aggressive FFFE detection.; Jan 2004: updated switches in from-UTF8 conversions.; Oct 2004: updated to use UNI_MAX_LEGAL_UTF32 in UTF-32 conversions. See the header file ""ConvertUTF.h"" for complete documentation. ------------------------------------------------------------------------ */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp:2581,Deployability,update,updates,2581,"b) this copyright and permission notice appear in associated; * documentation, and; * (c) there is clear notice in each modified Data File or in the Software; * as well as in the documentation associated with the Data File(s) or; * Software that the data or software has been modified.; *; * THE DATA FILES AND SOFTWARE ARE PROVIDED ""AS IS"", WITHOUT WARRANTY OF; * ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE; * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND; * NONINFRINGEMENT OF THIRD PARTY RIGHTS.; * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR HOLDERS INCLUDED IN THIS; * NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL INDIRECT OR CONSEQUENTIAL; * DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,; * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER; * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR; * PERFORMANCE OF THE DATA FILES OR SOFTWARE.; *; * Except as contained in this notice, the name of a copyright holder; * shall not be used in advertising or otherwise to promote the sale,; * use or other dealings in these Data Files or Software without prior; * written authorization of the copyright holder.; */; /* ---------------------------------------------------------------------. Conversions between UTF32, UTF-16, and UTF-8. Source code file.; Author: Mark E. Davis, 1994.; Rev History: Rick McGowan, fixes & updates May 2001.; Sept 2001: fixed const & error conditions per; mods suggested by S. Parent & A. Lillich.; June 2002: Tim Dodd added detection and handling of incomplete; source sequences, enhanced error detection, added casts; to eliminate compiler warnings.; July 2003: slight mods to back out aggressive FFFE detection.; Jan 2004: updated switches in from-UTF8 conversions.; Oct 2004: updated to use UNI_MAX_LEGAL_UTF32 in UTF-32 conversions. See the header file ""ConvertUTF.h"" for complete documentation. ------------------------------------------------------------------------ */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp:2917,Deployability,update,updated,2917,"b) this copyright and permission notice appear in associated; * documentation, and; * (c) there is clear notice in each modified Data File or in the Software; * as well as in the documentation associated with the Data File(s) or; * Software that the data or software has been modified.; *; * THE DATA FILES AND SOFTWARE ARE PROVIDED ""AS IS"", WITHOUT WARRANTY OF; * ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE; * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND; * NONINFRINGEMENT OF THIRD PARTY RIGHTS.; * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR HOLDERS INCLUDED IN THIS; * NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL INDIRECT OR CONSEQUENTIAL; * DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,; * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER; * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR; * PERFORMANCE OF THE DATA FILES OR SOFTWARE.; *; * Except as contained in this notice, the name of a copyright holder; * shall not be used in advertising or otherwise to promote the sale,; * use or other dealings in these Data Files or Software without prior; * written authorization of the copyright holder.; */; /* ---------------------------------------------------------------------. Conversions between UTF32, UTF-16, and UTF-8. Source code file.; Author: Mark E. Davis, 1994.; Rev History: Rick McGowan, fixes & updates May 2001.; Sept 2001: fixed const & error conditions per; mods suggested by S. Parent & A. Lillich.; June 2002: Tim Dodd added detection and handling of incomplete; source sequences, enhanced error detection, added casts; to eliminate compiler warnings.; July 2003: slight mods to back out aggressive FFFE detection.; Jan 2004: updated switches in from-UTF8 conversions.; Oct 2004: updated to use UNI_MAX_LEGAL_UTF32 in UTF-32 conversions. See the header file ""ConvertUTF.h"" for complete documentation. ------------------------------------------------------------------------ */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp:2971,Deployability,update,updated,2971,"b) this copyright and permission notice appear in associated; * documentation, and; * (c) there is clear notice in each modified Data File or in the Software; * as well as in the documentation associated with the Data File(s) or; * Software that the data or software has been modified.; *; * THE DATA FILES AND SOFTWARE ARE PROVIDED ""AS IS"", WITHOUT WARRANTY OF; * ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE; * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND; * NONINFRINGEMENT OF THIRD PARTY RIGHTS.; * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR HOLDERS INCLUDED IN THIS; * NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL INDIRECT OR CONSEQUENTIAL; * DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,; * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER; * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR; * PERFORMANCE OF THE DATA FILES OR SOFTWARE.; *; * Except as contained in this notice, the name of a copyright holder; * shall not be used in advertising or otherwise to promote the sale,; * use or other dealings in these Data Files or Software without prior; * written authorization of the copyright holder.; */; /* ---------------------------------------------------------------------. Conversions between UTF32, UTF-16, and UTF-8. Source code file.; Author: Mark E. Davis, 1994.; Rev History: Rick McGowan, fixes & updates May 2001.; Sept 2001: fixed const & error conditions per; mods suggested by S. Parent & A. Lillich.; June 2002: Tim Dodd added detection and handling of incomplete; source sequences, enhanced error detection, added casts; to eliminate compiler warnings.; July 2003: slight mods to back out aggressive FFFE detection.; Jan 2004: updated switches in from-UTF8 conversions.; Oct 2004: updated to use UNI_MAX_LEGAL_UTF32 in UTF-32 conversions. See the header file ""ConvertUTF.h"" for complete documentation. ------------------------------------------------------------------------ */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp:560,Energy Efficiency,charge,charge,560,"/*===--- ConvertUTF.c - Universal Character Names conversions ---------------===; *; * Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; * See https://llvm.org/LICENSE.txt for license information.; * SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; *; *===------------------------------------------------------------------------=*/; /*; * Copyright © 1991-2015 Unicode, Inc. All rights reserved.; * Distributed under the Terms of Use in; * http://www.unicode.org/copyright.html.; *; * Permission is hereby granted, free of charge, to any person obtaining; * a copy of the Unicode data files and any associated documentation; * (the ""Data Files"") or Unicode software and any associated documentation; * (the ""Software"") to deal in the Data Files or Software; * without restriction, including without limitation the rights to use,; * copy, modify, merge, publish, distribute, and/or sell copies of; * the Data Files or Software, and to permit persons to whom the Data Files; * or Software are furnished to do so, provided that; * (a) this copyright and permission notice appear with all copies; * of the Data Files or Software,; * (b) this copyright and permission notice appear in associated; * documentation, and; * (c) there is clear notice in each modified Data File or in the Software; * as well as in the documentation associated with the Data File(s) or; * Software that the data or software has been modified.; *; * THE DATA FILES AND SOFTWARE ARE PROVIDED ""AS IS"", WITHOUT WARRANTY OF; * ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE; * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND; * NONINFRINGEMENT OF THIRD PARTY RIGHTS.; * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR HOLDERS INCLUDED IN THIS; * NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL INDIRECT OR CONSEQUENTIAL; * DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,; * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER; * TORT",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp:1964,Integrability,CONTRACT,CONTRACT,1964,"te, and/or sell copies of; * the Data Files or Software, and to permit persons to whom the Data Files; * or Software are furnished to do so, provided that; * (a) this copyright and permission notice appear with all copies; * of the Data Files or Software,; * (b) this copyright and permission notice appear in associated; * documentation, and; * (c) there is clear notice in each modified Data File or in the Software; * as well as in the documentation associated with the Data File(s) or; * Software that the data or software has been modified.; *; * THE DATA FILES AND SOFTWARE ARE PROVIDED ""AS IS"", WITHOUT WARRANTY OF; * ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE; * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND; * NONINFRINGEMENT OF THIRD PARTY RIGHTS.; * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR HOLDERS INCLUDED IN THIS; * NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL INDIRECT OR CONSEQUENTIAL; * DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,; * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER; * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR; * PERFORMANCE OF THE DATA FILES OR SOFTWARE.; *; * Except as contained in this notice, the name of a copyright holder; * shall not be used in advertising or otherwise to promote the sale,; * use or other dealings in these Data Files or Software without prior; * written authorization of the copyright holder.; */; /* ---------------------------------------------------------------------. Conversions between UTF32, UTF-16, and UTF-8. Source code file.; Author: Mark E. Davis, 1994.; Rev History: Rick McGowan, fixes & updates May 2001.; Sept 2001: fixed const & error conditions per; mods suggested by S. Parent & A. Lillich.; June 2002: Tim Dodd added detection and handling of incomplete; source sequences, enhanced error detection, added casts; to eliminate compiler warnings.; July 2003: slight mods to back out aggressive FFFE detection.; ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp:2772,Modifiability,enhance,enhanced,2772,"b) this copyright and permission notice appear in associated; * documentation, and; * (c) there is clear notice in each modified Data File or in the Software; * as well as in the documentation associated with the Data File(s) or; * Software that the data or software has been modified.; *; * THE DATA FILES AND SOFTWARE ARE PROVIDED ""AS IS"", WITHOUT WARRANTY OF; * ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE; * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND; * NONINFRINGEMENT OF THIRD PARTY RIGHTS.; * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR HOLDERS INCLUDED IN THIS; * NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL INDIRECT OR CONSEQUENTIAL; * DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,; * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER; * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR; * PERFORMANCE OF THE DATA FILES OR SOFTWARE.; *; * Except as contained in this notice, the name of a copyright holder; * shall not be used in advertising or otherwise to promote the sale,; * use or other dealings in these Data Files or Software without prior; * written authorization of the copyright holder.; */; /* ---------------------------------------------------------------------. Conversions between UTF32, UTF-16, and UTF-8. Source code file.; Author: Mark E. Davis, 1994.; Rev History: Rick McGowan, fixes & updates May 2001.; Sept 2001: fixed const & error conditions per; mods suggested by S. Parent & A. Lillich.; June 2002: Tim Dodd added detection and handling of incomplete; source sequences, enhanced error detection, added casts; to eliminate compiler warnings.; July 2003: slight mods to back out aggressive FFFE detection.; Jan 2004: updated switches in from-UTF8 conversions.; Oct 2004: updated to use UNI_MAX_LEGAL_UTF32 in UTF-32 conversions. See the header file ""ConvertUTF.h"" for complete documentation. ------------------------------------------------------------------------ */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp:2065,Performance,PERFORM,PERFORMANCE,2065,"te, and/or sell copies of; * the Data Files or Software, and to permit persons to whom the Data Files; * or Software are furnished to do so, provided that; * (a) this copyright and permission notice appear with all copies; * of the Data Files or Software,; * (b) this copyright and permission notice appear in associated; * documentation, and; * (c) there is clear notice in each modified Data File or in the Software; * as well as in the documentation associated with the Data File(s) or; * Software that the data or software has been modified.; *; * THE DATA FILES AND SOFTWARE ARE PROVIDED ""AS IS"", WITHOUT WARRANTY OF; * ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE; * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND; * NONINFRINGEMENT OF THIRD PARTY RIGHTS.; * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR HOLDERS INCLUDED IN THIS; * NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL INDIRECT OR CONSEQUENTIAL; * DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,; * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER; * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR; * PERFORMANCE OF THE DATA FILES OR SOFTWARE.; *; * Except as contained in this notice, the name of a copyright holder; * shall not be used in advertising or otherwise to promote the sale,; * use or other dealings in these Data Files or Software without prior; * written authorization of the copyright holder.; */; /* ---------------------------------------------------------------------. Conversions between UTF32, UTF-16, and UTF-8. Source code file.; Author: Mark E. Davis, 1994.; Rev History: Rick McGowan, fixes & updates May 2001.; Sept 2001: fixed const & error conditions per; mods suggested by S. Parent & A. Lillich.; June 2002: Tim Dodd added detection and handling of incomplete; source sequences, enhanced error detection, added casts; to eliminate compiler warnings.; July 2003: slight mods to back out aggressive FFFE detection.; ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp:2716,Safety,detect,detection,2716,"b) this copyright and permission notice appear in associated; * documentation, and; * (c) there is clear notice in each modified Data File or in the Software; * as well as in the documentation associated with the Data File(s) or; * Software that the data or software has been modified.; *; * THE DATA FILES AND SOFTWARE ARE PROVIDED ""AS IS"", WITHOUT WARRANTY OF; * ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE; * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND; * NONINFRINGEMENT OF THIRD PARTY RIGHTS.; * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR HOLDERS INCLUDED IN THIS; * NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL INDIRECT OR CONSEQUENTIAL; * DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,; * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER; * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR; * PERFORMANCE OF THE DATA FILES OR SOFTWARE.; *; * Except as contained in this notice, the name of a copyright holder; * shall not be used in advertising or otherwise to promote the sale,; * use or other dealings in these Data Files or Software without prior; * written authorization of the copyright holder.; */; /* ---------------------------------------------------------------------. Conversions between UTF32, UTF-16, and UTF-8. Source code file.; Author: Mark E. Davis, 1994.; Rev History: Rick McGowan, fixes & updates May 2001.; Sept 2001: fixed const & error conditions per; mods suggested by S. Parent & A. Lillich.; June 2002: Tim Dodd added detection and handling of incomplete; source sequences, enhanced error detection, added casts; to eliminate compiler warnings.; July 2003: slight mods to back out aggressive FFFE detection.; Jan 2004: updated switches in from-UTF8 conversions.; Oct 2004: updated to use UNI_MAX_LEGAL_UTF32 in UTF-32 conversions. See the header file ""ConvertUTF.h"" for complete documentation. ------------------------------------------------------------------------ */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp:2787,Safety,detect,detection,2787,"b) this copyright and permission notice appear in associated; * documentation, and; * (c) there is clear notice in each modified Data File or in the Software; * as well as in the documentation associated with the Data File(s) or; * Software that the data or software has been modified.; *; * THE DATA FILES AND SOFTWARE ARE PROVIDED ""AS IS"", WITHOUT WARRANTY OF; * ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE; * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND; * NONINFRINGEMENT OF THIRD PARTY RIGHTS.; * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR HOLDERS INCLUDED IN THIS; * NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL INDIRECT OR CONSEQUENTIAL; * DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,; * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER; * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR; * PERFORMANCE OF THE DATA FILES OR SOFTWARE.; *; * Except as contained in this notice, the name of a copyright holder; * shall not be used in advertising or otherwise to promote the sale,; * use or other dealings in these Data Files or Software without prior; * written authorization of the copyright holder.; */; /* ---------------------------------------------------------------------. Conversions between UTF32, UTF-16, and UTF-8. Source code file.; Author: Mark E. Davis, 1994.; Rev History: Rick McGowan, fixes & updates May 2001.; Sept 2001: fixed const & error conditions per; mods suggested by S. Parent & A. Lillich.; June 2002: Tim Dodd added detection and handling of incomplete; source sequences, enhanced error detection, added casts; to eliminate compiler warnings.; July 2003: slight mods to back out aggressive FFFE detection.; Jan 2004: updated switches in from-UTF8 conversions.; Oct 2004: updated to use UNI_MAX_LEGAL_UTF32 in UTF-32 conversions. See the header file ""ConvertUTF.h"" for complete documentation. ------------------------------------------------------------------------ */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp:2895,Safety,detect,detection,2895,"b) this copyright and permission notice appear in associated; * documentation, and; * (c) there is clear notice in each modified Data File or in the Software; * as well as in the documentation associated with the Data File(s) or; * Software that the data or software has been modified.; *; * THE DATA FILES AND SOFTWARE ARE PROVIDED ""AS IS"", WITHOUT WARRANTY OF; * ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE; * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND; * NONINFRINGEMENT OF THIRD PARTY RIGHTS.; * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR HOLDERS INCLUDED IN THIS; * NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL INDIRECT OR CONSEQUENTIAL; * DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,; * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER; * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR; * PERFORMANCE OF THE DATA FILES OR SOFTWARE.; *; * Except as contained in this notice, the name of a copyright holder; * shall not be used in advertising or otherwise to promote the sale,; * use or other dealings in these Data Files or Software without prior; * written authorization of the copyright holder.; */; /* ---------------------------------------------------------------------. Conversions between UTF32, UTF-16, and UTF-8. Source code file.; Author: Mark E. Davis, 1994.; Rev History: Rick McGowan, fixes & updates May 2001.; Sept 2001: fixed const & error conditions per; mods suggested by S. Parent & A. Lillich.; June 2002: Tim Dodd added detection and handling of incomplete; source sequences, enhanced error detection, added casts; to eliminate compiler warnings.; July 2003: slight mods to back out aggressive FFFE detection.; Jan 2004: updated switches in from-UTF8 conversions.; Oct 2004: updated to use UNI_MAX_LEGAL_UTF32 in UTF-32 conversions. See the header file ""ConvertUTF.h"" for complete documentation. ------------------------------------------------------------------------ */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp:2333,Security,authoriz,authorization,2333,"b) this copyright and permission notice appear in associated; * documentation, and; * (c) there is clear notice in each modified Data File or in the Software; * as well as in the documentation associated with the Data File(s) or; * Software that the data or software has been modified.; *; * THE DATA FILES AND SOFTWARE ARE PROVIDED ""AS IS"", WITHOUT WARRANTY OF; * ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE; * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND; * NONINFRINGEMENT OF THIRD PARTY RIGHTS.; * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR HOLDERS INCLUDED IN THIS; * NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL INDIRECT OR CONSEQUENTIAL; * DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,; * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER; * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR; * PERFORMANCE OF THE DATA FILES OR SOFTWARE.; *; * Except as contained in this notice, the name of a copyright holder; * shall not be used in advertising or otherwise to promote the sale,; * use or other dealings in these Data Files or Software without prior; * written authorization of the copyright holder.; */; /* ---------------------------------------------------------------------. Conversions between UTF32, UTF-16, and UTF-8. Source code file.; Author: Mark E. Davis, 1994.; Rev History: Rick McGowan, fixes & updates May 2001.; Sept 2001: fixed const & error conditions per; mods suggested by S. Parent & A. Lillich.; June 2002: Tim Dodd added detection and handling of incomplete; source sequences, enhanced error detection, added casts; to eliminate compiler warnings.; July 2003: slight mods to back out aggressive FFFE detection.; Jan 2004: updated switches in from-UTF8 conversions.; Oct 2004: updated to use UNI_MAX_LEGAL_UTF32 in UTF-32 conversions. See the header file ""ConvertUTF.h"" for complete documentation. ------------------------------------------------------------------------ */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp:1266,Usability,clear,clear,1266,"/*===--- ConvertUTF.c - Universal Character Names conversions ---------------===; *; * Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; * See https://llvm.org/LICENSE.txt for license information.; * SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; *; *===------------------------------------------------------------------------=*/; /*; * Copyright © 1991-2015 Unicode, Inc. All rights reserved.; * Distributed under the Terms of Use in; * http://www.unicode.org/copyright.html.; *; * Permission is hereby granted, free of charge, to any person obtaining; * a copy of the Unicode data files and any associated documentation; * (the ""Data Files"") or Unicode software and any associated documentation; * (the ""Software"") to deal in the Data Files or Software; * without restriction, including without limitation the rights to use,; * copy, modify, merge, publish, distribute, and/or sell copies of; * the Data Files or Software, and to permit persons to whom the Data Files; * or Software are furnished to do so, provided that; * (a) this copyright and permission notice appear with all copies; * of the Data Files or Software,; * (b) this copyright and permission notice appear in associated; * documentation, and; * (c) there is clear notice in each modified Data File or in the Software; * as well as in the documentation associated with the Data File(s) or; * Software that the data or software has been modified.; *; * THE DATA FILES AND SOFTWARE ARE PROVIDED ""AS IS"", WITHOUT WARRANTY OF; * ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE; * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND; * NONINFRINGEMENT OF THIRD PARTY RIGHTS.; * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR HOLDERS INCLUDED IN THIS; * NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL INDIRECT OR CONSEQUENTIAL; * DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,; * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER; * TORT",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp:65,Availability,mask,mask,65,"/*; * Once the bits are split out into bytes of UTF-8, this is a mask OR-ed; * into the first byte, depending on how many bytes follow. There are; * as many entries in this table as there are UTF-8 sequence types.; * (I.e., one byte sequence, two byte... etc.). Remember that sequencs; * for *legal* UTF-8 will be 4 or fewer bytes total.; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp:100,Integrability,depend,depending,100,"/*; * Once the bits are split out into bytes of UTF-8, this is a mask OR-ed; * into the first byte, depending on how many bytes follow. There are; * as many entries in this table as there are UTF-8 sequence types.; * (I.e., one byte sequence, two byte... etc.). Remember that sequencs; * for *legal* UTF-8 will be 4 or fewer bytes total.; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp:84,Integrability,interface,interface,84,"/* --------------------------------------------------------------------- */; /* The interface converts a whole buffer to avoid function-call overhead.; * Constants have been gathered. Loops & conditionals have been removed as; * much as possible for efficiency, in favor of drop-through switches.; * (See ""Note A"" at the bottom of the file for equivalent code.); * If your compiler supports it, the ""isLegalUTF8"" call can be turned; * into an inline function.; */; /* --------------------------------------------------------------------- */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp:121,Safety,avoid,avoid,121,"/* --------------------------------------------------------------------- */; /* The interface converts a whole buffer to avoid function-call overhead.; * Constants have been gathered. Loops & conditionals have been removed as; * much as possible for efficiency, in favor of drop-through switches.; * (See ""Note A"" at the bottom of the file for equivalent code.); * If your compiler supports it, the ""isLegalUTF8"" call can be turned; * into an inline function.; */; /* --------------------------------------------------------------------- */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp:421,Availability,avail,available,421,"/* --------------------------------------------------------------------- */; /*; * Utility routine to tell whether a sequence of bytes is legal UTF-8.; * This must be called with the length pre-determined by the first byte.; * If not calling this from ConvertUTF8to*, then the length can be set by:; * length = trailingBytesForUTF8[*source]+1;; * and the sequence is illegal right away if there aren't that many bytes; * available.; * If presented with a length > 4, this returns false. The Unicode; * definition of UTF-8 goes up to 4-byte sequences.; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp:91,Integrability,rout,routine,91,"/* --------------------------------------------------------------------- */; /*; * Utility routine to tell whether a sequence of bytes is legal UTF-8.; * This must be called with the length pre-determined by the first byte.; * If not calling this from ConvertUTF8to*, then the length can be set by:; * length = trailingBytesForUTF8[*source]+1;; * and the sequence is illegal right away if there aren't that many bytes; * available.; * If presented with a length > 4, this returns false. The Unicode; * definition of UTF-8 goes up to 4-byte sequences.; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp:6,Performance,Perform,Perform,6,"/*; * Perform case analysis. See Unicode 6.3.0, Table 3-7. Well-Formed UTF-8; * Byte Sequences.; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp:3,Safety,Abort,Abort,3,/* Abort conversion. */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp:144,Modifiability,variab,variable,144,"/* ---------------------------------------------------------------------. Note A.; The fall-through switches in UTF-8 reading code save a; temp variable, some decrements & conditionals. The switches; are equivalent to the following loop:; {; int tmpBytesToRead = extraBytesToRead+1;; do {; ch += *source++;; --tmpBytesToRead;; if (tmpBytesToRead) ch <<= 6;; } while (tmpBytesToRead > 0);; }; In UTF-8 writing code, the switches on ""bytesToWrite"" are; similarly unrolled loops. --------------------------------------------------------------------- */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTF.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp:32,Integrability,Wrap,Wrap,32,"//===-- ConvertUTFWrapper.cpp - Wrap ConvertUTF.h with clang data types -----===; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp:3,Availability,Error,Error,3,// Error out on an uneven byte count.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp:3,Safety,Avoid,Avoid,3,// Avoid OOB by returning early on empty input.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp:8,Energy Efficiency,allocate,allocate,8,// Just allocate enough space up front. We'll shrink it later. Allocate; // enough that we can fit a null terminator without reallocating.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp:63,Energy Efficiency,Allocate,Allocate,63,// Just allocate enough space up front. We'll shrink it later. Allocate; // enough that we can fit a null terminator without reallocating.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp:3,Availability,Error,Error,3,// Error out on an uneven byte count.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp:3,Safety,Avoid,Avoid,3,// Avoid OOB by returning early on empty input.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp:8,Energy Efficiency,allocate,allocate,8,// Just allocate enough space up front. We'll shrink it later. Allocate; // enough that we can fit a null terminator without reallocating.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp:63,Energy Efficiency,Allocate,Allocate,63,// Just allocate enough space up front. We'll shrink it later. Allocate; // enough that we can fit a null terminator without reallocating.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp:3,Safety,Avoid,Avoid,3,// Avoid OOB by returning early on empty input.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp:324,Availability,down,down,324,"// Allocate the same number of UTF-16 code units as UTF-8 code units. Encoding; // as UTF-16 should always require the same amount or less code units than the; // UTF-8 encoding. Allocate one extra byte for the null terminator though,; // so that someone calling DstUTF16.data() gets a null terminated string.; // We resize down later so we don't have to worry that this over allocates.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp:3,Energy Efficiency,Allocate,Allocate,3,"// Allocate the same number of UTF-16 code units as UTF-8 code units. Encoding; // as UTF-16 should always require the same amount or less code units than the; // UTF-8 encoding. Allocate one extra byte for the null terminator though,; // so that someone calling DstUTF16.data() gets a null terminated string.; // We resize down later so we don't have to worry that this over allocates.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp:179,Energy Efficiency,Allocate,Allocate,179,"// Allocate the same number of UTF-16 code units as UTF-8 code units. Encoding; // as UTF-16 should always require the same amount or less code units than the; // UTF-8 encoding. Allocate one extra byte for the null terminator though,; // so that someone calling DstUTF16.data() gets a null terminated string.; // We resize down later so we don't have to worry that this over allocates.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp:376,Energy Efficiency,allocate,allocates,376,"// Allocate the same number of UTF-16 code units as UTF-8 code units. Encoding; // as UTF-16 should always require the same amount or less code units than the; // UTF-8 encoding. Allocate one extra byte for the null terminator though,; // so that someone calling DstUTF16.data() gets a null terminated string.; // We resize down later so we don't have to worry that this over allocates.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp:42,Availability,Recover,Recovery,42,"//===--- CrashRecoveryContext.cpp - Crash Recovery ------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp:42,Safety,Recover,Recovery,42,"//===--- CrashRecoveryContext.cpp - Crash Recovery ------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp:35,Availability,recover,recovery,35,"/// Called when the separate crash-recovery thread was finished, to; /// indicate that we don't need to clear the thread-local CurrentContext.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp:35,Safety,recover,recovery,35,"/// Called when the separate crash-recovery thread was finished, to; /// indicate that we don't need to clear the thread-local CurrentContext.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp:104,Usability,clear,clear,104,"/// Called when the separate crash-recovery thread was finished, to; /// indicate that we don't need to clear the thread-local CurrentContext.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp:112,Availability,error,error,112,"// If the function ran by the CrashRecoveryContext crashes or fails, then; // 'RetCode' represents the returned error code, as if it was returned by a; // process. 'Context' represents the signal type on Unix; on Windows, it is; // the ExceptionContext.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp:43,Safety,avoid,avoid,43,"// Eliminate the current context entry, to avoid re-entering in case the; // cleanup code crashes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp:131,Deployability,install,installed,131,"// On Windows, if abort() was previously triggered (and caught by a previous; // CrashRecoveryContext) the Windows CRT removes our installed signal handler,; // so we need to install it again.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp:175,Deployability,install,install,175,"// On Windows, if abort() was previously triggered (and caught by a previous; // CrashRecoveryContext) the Windows CRT removes our installed signal handler,; // so we need to install it again.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp:18,Safety,abort,abort,18,"// On Windows, if abort() was previously triggered (and caught by a previous; // CrashRecoveryContext) the Windows CRT removes our installed signal handler,; // so we need to install it again.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp:60,Availability,avail,available,60,"// If _MSC_VER is defined, we must have SEH. Use it if it's available. It's way; // better than VEH. Vectored exception handling catches all exceptions happening; // on the thread with installed exception handlers, so it can interfere with; // internal exception handling of other libraries on that thread. SEH works; // exactly as you would expect normal exception handling to work: it only; // catches exceptions if they would bubble out from the stack frame with __try /; // __except.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp:185,Deployability,install,installed,185,"// If _MSC_VER is defined, we must have SEH. Use it if it's available. It's way; // better than VEH. Vectored exception handling catches all exceptions happening; // on the thread with installed exception handlers, so it can interfere with; // internal exception handling of other libraries on that thread. SEH works; // exactly as you would expect normal exception handling to work: it only; // catches exceptions if they would bubble out from the stack frame with __try /; // __except.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp:35,Availability,recover,recovery,35,// Lookup the current thread local recovery object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp:35,Safety,recover,recovery,35,// Lookup the current thread local recovery object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp:475,Availability,recover,recovery,475,"// This is a non-MSVC compiler, probably mingw gcc or clang without; // -fms-extensions. Use vectored exception handling (VEH).; //; // On Windows, we can make use of vectored exception handling to catch most; // crashing situations. Note that this does mean we will be alerted of; // exceptions *before* structured exception handling has the opportunity to; // catch it. Unfortunately, this causes problems in practice with other code; // running on threads with LLVM crash recovery contexts, so we would like to; // eventually move away from VEH.; //; // Vectored works on a per-thread basis, which is an advantage over; // SetUnhandledExceptionFilter. SetUnhandledExceptionFilter also doesn't have; // any native support for chaining exception handlers, but VEH allows more than; // one.; //; // The vectored exception handler functionality was added in Windows; // XP, so if support for older versions of Windows is required,; // it will have to be added.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp:475,Safety,recover,recovery,475,"// This is a non-MSVC compiler, probably mingw gcc or clang without; // -fms-extensions. Use vectored exception handling (VEH).; //; // On Windows, we can make use of vectored exception handling to catch most; // crashing situations. Note that this does mean we will be alerted of; // exceptions *before* structured exception handling has the opportunity to; // catch it. Unfortunately, this causes problems in practice with other code; // running on threads with LLVM crash recovery contexts, so we would like to; // eventually move away from VEH.; //; // Vectored works on a per-thread basis, which is an advantage over; // SetUnhandledExceptionFilter. SetUnhandledExceptionFilter also doesn't have; // any native support for chaining exception handlers, but VEH allows more than; // one.; //; // The vectored exception handler functionality was added in Windows; // XP, so if support for older versions of Windows is required,; // it will have to be added.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp:35,Availability,recover,recovery,35,// Lookup the current thread local recovery object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp:35,Safety,recover,recovery,35,// Lookup the current thread local recovery object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp:104,Availability,avail,available,104,"// Because the Enable and Disable calls are static, it means that; // there may not actually be an Impl available, or even a current; // CrashRecoveryContext at all. So we make use of a thread-local; // exception table. The handles contained in here will either be; // non-NULL, valid VEH handles, or NULL.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp:58,Deployability,install,install,58,"// We can set up vectored exception handling now. We will install our; // handler as the front of the list, though there's no assurances that; // it will remain at the front (another call could install itself before; // our handler). This 1) isn't likely, and 2) shouldn't cause problems.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp:194,Deployability,install,install,194,"// We can set up vectored exception handling now. We will install our; // handler as the front of the list, though there's no assurances that; // it will remain at the front (another call could install itself before; // our handler). This 1) isn't likely, and 2) shouldn't cause problems.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp:213,Availability,recover,recovery,213,"// !_WIN32; // Generic POSIX implementation.; //; // This implementation relies on synchronous signals being delivered to the; // current thread. We use a thread local object to keep track of the active; // crash recovery context, and install signal handlers to invoke HandleCrash on; // the active object.; //; // This implementation does not attempt to chain signal handlers in any; // reliable fashion -- if we get a signal outside of a crash recovery context we; // simply disable crash recovery and raise the signal again.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp:388,Availability,reliab,reliable,388,"// !_WIN32; // Generic POSIX implementation.; //; // This implementation relies on synchronous signals being delivered to the; // current thread. We use a thread local object to keep track of the active; // crash recovery context, and install signal handlers to invoke HandleCrash on; // the active object.; //; // This implementation does not attempt to chain signal handlers in any; // reliable fashion -- if we get a signal outside of a crash recovery context we; // simply disable crash recovery and raise the signal again.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp:446,Availability,recover,recovery,446,"// !_WIN32; // Generic POSIX implementation.; //; // This implementation relies on synchronous signals being delivered to the; // current thread. We use a thread local object to keep track of the active; // crash recovery context, and install signal handlers to invoke HandleCrash on; // the active object.; //; // This implementation does not attempt to chain signal handlers in any; // reliable fashion -- if we get a signal outside of a crash recovery context we; // simply disable crash recovery and raise the signal again.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp:491,Availability,recover,recovery,491,"// !_WIN32; // Generic POSIX implementation.; //; // This implementation relies on synchronous signals being delivered to the; // current thread. We use a thread local object to keep track of the active; // crash recovery context, and install signal handlers to invoke HandleCrash on; // the active object.; //; // This implementation does not attempt to chain signal handlers in any; // reliable fashion -- if we get a signal outside of a crash recovery context we; // simply disable crash recovery and raise the signal again.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp:235,Deployability,install,install,235,"// !_WIN32; // Generic POSIX implementation.; //; // This implementation relies on synchronous signals being delivered to the; // current thread. We use a thread local object to keep track of the active; // crash recovery context, and install signal handlers to invoke HandleCrash on; // the active object.; //; // This implementation does not attempt to chain signal handlers in any; // reliable fashion -- if we get a signal outside of a crash recovery context we; // simply disable crash recovery and raise the signal again.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp:213,Safety,recover,recovery,213,"// !_WIN32; // Generic POSIX implementation.; //; // This implementation relies on synchronous signals being delivered to the; // current thread. We use a thread local object to keep track of the active; // crash recovery context, and install signal handlers to invoke HandleCrash on; // the active object.; //; // This implementation does not attempt to chain signal handlers in any; // reliable fashion -- if we get a signal outside of a crash recovery context we; // simply disable crash recovery and raise the signal again.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp:446,Safety,recover,recovery,446,"// !_WIN32; // Generic POSIX implementation.; //; // This implementation relies on synchronous signals being delivered to the; // current thread. We use a thread local object to keep track of the active; // crash recovery context, and install signal handlers to invoke HandleCrash on; // the active object.; //; // This implementation does not attempt to chain signal handlers in any; // reliable fashion -- if we get a signal outside of a crash recovery context we; // simply disable crash recovery and raise the signal again.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp:491,Safety,recover,recovery,491,"// !_WIN32; // Generic POSIX implementation.; //; // This implementation relies on synchronous signals being delivered to the; // current thread. We use a thread local object to keep track of the active; // crash recovery context, and install signal handlers to invoke HandleCrash on; // the active object.; //; // This implementation does not attempt to chain signal handlers in any; // reliable fashion -- if we get a signal outside of a crash recovery context we; // simply disable crash recovery and raise the signal again.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp:470,Usability,simpl,simply,470,"// !_WIN32; // Generic POSIX implementation.; //; // This implementation relies on synchronous signals being delivered to the; // current thread. We use a thread local object to keep track of the active; // crash recovery context, and install signal handlers to invoke HandleCrash on; // the active object.; //; // This implementation does not attempt to chain signal handlers in any; // reliable fashion -- if we get a signal outside of a crash recovery context we; // simply disable crash recovery and raise the signal again.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp:35,Availability,recover,recovery,35,// Lookup the current thread local recovery object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp:35,Safety,recover,recovery,35,// Lookup the current thread local recovery object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp:26,Availability,recover,recovery,26,"// We didn't find a crash recovery context -- this means either we got a; // signal on a thread we didn't expect it on, the application got a signal; // outside of a crash recovery context, or something else went horribly; // wrong.; //; // Disable crash recovery and raise the signal again. The assumption here is; // that the enclosing application will terminate soon, and we won't want to; // attempt crash recovery again.; //; // This call of Disable isn't thread safe, but it doesn't actually matter.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp:172,Availability,recover,recovery,172,"// We didn't find a crash recovery context -- this means either we got a; // signal on a thread we didn't expect it on, the application got a signal; // outside of a crash recovery context, or something else went horribly; // wrong.; //; // Disable crash recovery and raise the signal again. The assumption here is; // that the enclosing application will terminate soon, and we won't want to; // attempt crash recovery again.; //; // This call of Disable isn't thread safe, but it doesn't actually matter.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp:255,Availability,recover,recovery,255,"// We didn't find a crash recovery context -- this means either we got a; // signal on a thread we didn't expect it on, the application got a signal; // outside of a crash recovery context, or something else went horribly; // wrong.; //; // Disable crash recovery and raise the signal again. The assumption here is; // that the enclosing application will terminate soon, and we won't want to; // attempt crash recovery again.; //; // This call of Disable isn't thread safe, but it doesn't actually matter.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp:410,Availability,recover,recovery,410,"// We didn't find a crash recovery context -- this means either we got a; // signal on a thread we didn't expect it on, the application got a signal; // outside of a crash recovery context, or something else went horribly; // wrong.; //; // Disable crash recovery and raise the signal again. The assumption here is; // that the enclosing application will terminate soon, and we won't want to; // attempt crash recovery again.; //; // This call of Disable isn't thread safe, but it doesn't actually matter.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp:26,Safety,recover,recovery,26,"// We didn't find a crash recovery context -- this means either we got a; // signal on a thread we didn't expect it on, the application got a signal; // outside of a crash recovery context, or something else went horribly; // wrong.; //; // Disable crash recovery and raise the signal again. The assumption here is; // that the enclosing application will terminate soon, and we won't want to; // attempt crash recovery again.; //; // This call of Disable isn't thread safe, but it doesn't actually matter.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp:172,Safety,recover,recovery,172,"// We didn't find a crash recovery context -- this means either we got a; // signal on a thread we didn't expect it on, the application got a signal; // outside of a crash recovery context, or something else went horribly; // wrong.; //; // Disable crash recovery and raise the signal again. The assumption here is; // that the enclosing application will terminate soon, and we won't want to; // attempt crash recovery again.; //; // This call of Disable isn't thread safe, but it doesn't actually matter.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp:255,Safety,recover,recovery,255,"// We didn't find a crash recovery context -- this means either we got a; // signal on a thread we didn't expect it on, the application got a signal; // outside of a crash recovery context, or something else went horribly; // wrong.; //; // Disable crash recovery and raise the signal again. The assumption here is; // that the enclosing application will terminate soon, and we won't want to; // attempt crash recovery again.; //; // This call of Disable isn't thread safe, but it doesn't actually matter.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp:410,Safety,recover,recovery,410,"// We didn't find a crash recovery context -- this means either we got a; // signal on a thread we didn't expect it on, the application got a signal; // outside of a crash recovery context, or something else went horribly; // wrong.; //; // Disable crash recovery and raise the signal again. The assumption here is; // that the enclosing application will terminate soon, and we won't want to; // attempt crash recovery again.; //; // This call of Disable isn't thread safe, but it doesn't actually matter.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp:468,Safety,safe,safe,468,"// We didn't find a crash recovery context -- this means either we got a; // signal on a thread we didn't expect it on, the application got a signal; // outside of a crash recovery context, or something else went horribly; // wrong.; //; // Disable crash recovery and raise the signal again. The assumption here is; // that the enclosing application will terminate soon, and we won't want to; // attempt crash recovery again.; //; // This call of Disable isn't thread safe, but it doesn't actually matter.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp:45,Availability,mask,mask,45,// The signal will be thrown once the signal mask is restored.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp:19,Availability,error,error,19,"// Return the same error code as if the program crashed, as mentioned in the; // section ""Exit Status for Commands"":; // https://pubs.opengroup.org/onlinepubs/9699919799/xrat/V4_xcu_chap02.html",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp:12,Availability,recover,recovery,12,"// If crash recovery is disabled, do nothing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp:12,Safety,recover,recovery,12,"// If crash recovery is disabled, do nothing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp:138,Availability,error,error,138,"// Since the exception code is actually of NTSTATUS type, we use the; // Microsoft-recommended 0xE prefix, to signify that this is a user error.; // This value is a combination of the customer field (bit 29) and severity; // field (bits 30-31) in the NTSTATUS specification.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp:200,Availability,error,errors,200,"// On Windows, the code is interpreted as NTSTATUS. The two high bits; // represent the severity. Values starting with 0x80000000 are reserved for; // ""warnings""; values of 0xC0000000 and up are for ""errors"". In practice, both; // are interpreted as a non-continuable signal.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp:10,Modifiability,Portab,Portability,10,// FIXME: Portability.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CrashRecoveryContext.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CRC.cpp:677,Availability,Error,Error,677,"//===--- CRC.cpp - Cyclic Redundancy Check implementation -----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains implementations of CRC functions.; //; // The implementation technique is the one mentioned in:; // D. V. Sarwate. 1988. Computation of cyclic redundancy checks via table; // look-up. Commun. ACM 31, 8 (August 1988); //; // See also Ross N. Williams ""A Painless Guide to CRC Error Detection; // Algorithms"" (https://zlib.net/crc_v3.txt) or Hacker's Delight (2nd ed.); // Chapter 14 (Figure 14-7 in particular) for how the algorithm works.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CRC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CRC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CRC.cpp:26,Safety,Redund,Redundancy,26,"//===--- CRC.cpp - Cyclic Redundancy Check implementation -----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains implementations of CRC functions.; //; // The implementation technique is the one mentioned in:; // D. V. Sarwate. 1988. Computation of cyclic redundancy checks via table; // look-up. Commun. ACM 31, 8 (August 1988); //; // See also Ross N. Williams ""A Painless Guide to CRC Error Detection; // Algorithms"" (https://zlib.net/crc_v3.txt) or Hacker's Delight (2nd ed.); // Chapter 14 (Figure 14-7 in particular) for how the algorithm works.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CRC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CRC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CRC.cpp:545,Safety,redund,redundancy,545,"//===--- CRC.cpp - Cyclic Redundancy Check implementation -----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains implementations of CRC functions.; //; // The implementation technique is the one mentioned in:; // D. V. Sarwate. 1988. Computation of cyclic redundancy checks via table; // look-up. Commun. ACM 31, 8 (August 1988); //; // See also Ross N. Williams ""A Painless Guide to CRC Error Detection; // Algorithms"" (https://zlib.net/crc_v3.txt) or Hacker's Delight (2nd ed.); // Chapter 14 (Figure 14-7 in particular) for how the algorithm works.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CRC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CRC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CRC.cpp:683,Safety,Detect,Detection,683,"//===--- CRC.cpp - Cyclic Redundancy Check implementation -----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains implementations of CRC functions.; //; // The implementation technique is the one mentioned in:; // D. V. Sarwate. 1988. Computation of cyclic redundancy checks via table; // look-up. Commun. ACM 31, 8 (August 1988); //; // See also Ross N. Williams ""A Painless Guide to CRC Error Detection; // Algorithms"" (https://zlib.net/crc_v3.txt) or Hacker's Delight (2nd ed.); // Chapter 14 (Figure 14-7 in particular) for how the algorithm works.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CRC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CRC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CRC.cpp:664,Usability,Guid,Guide,664,"//===--- CRC.cpp - Cyclic Redundancy Check implementation -----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains implementations of CRC functions.; //; // The implementation technique is the one mentioned in:; // D. V. Sarwate. 1988. Computation of cyclic redundancy checks via table; // look-up. Commun. ACM 31, 8 (August 1988); //; // See also Ross N. Williams ""A Painless Guide to CRC Error Detection; // Algorithms"" (https://zlib.net/crc_v3.txt) or Hacker's Delight (2nd ed.); // Chapter 14 (Figure 14-7 in particular) for how the algorithm works.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CRC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CRC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CRC.cpp:178,Availability,avail,available,178,"// Zlib's crc32() only takes a 32-bit length, so we have to iterate for larger; // sizes. One could use crc32_z() instead, but that's a recent (2017) addition; // and may not be available on all systems.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CRC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CRC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CRC.cpp:3,Usability,Undo,Undo,3,// Undo CRC-32 Init.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CRC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CRC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CRC.cpp:3,Usability,Undo,Undo,3,// Undo CRC-32 XorOut.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/CRC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/CRC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp:469,Availability,down,down,469,"//===--- DAGDeltaAlgorithm.cpp - A DAG Minimization Algorithm --*- C++ -*--===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //===----------------------------------------------------------------------===//; //; // The algorithm we use attempts to exploit the dependency information by; // minimizing top-down. We start by constructing an initial root set R, and; // then iteratively:; //; // 1. Minimize the set R using the test predicate:; // P'(S) = P(S union pred*(S)); //; // 2. Extend R to R' = R union pred(R).; //; // until a fixed point is reached.; //; // The idea is that we want to quickly prune entire portions of the graph, so we; // try to find high-level nodes that can be eliminated with all of their; // dependents.; //; // FIXME: The current algorithm doesn't actually provide a strong guarantee; // about the minimality of the result. The problem is that after adding nodes to; // the required set, we no longer consider them for elimination. For strictly; // well formed predicates, this doesn't happen, but it commonly occurs in; // practice when there are unmodelled dependencies. I believe we can resolve; // this by allowing the required set to be minimized as well, but need more test; // cases first.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp:424,Integrability,depend,dependency,424,"//===--- DAGDeltaAlgorithm.cpp - A DAG Minimization Algorithm --*- C++ -*--===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //===----------------------------------------------------------------------===//; //; // The algorithm we use attempts to exploit the dependency information by; // minimizing top-down. We start by constructing an initial root set R, and; // then iteratively:; //; // 1. Minimize the set R using the test predicate:; // P'(S) = P(S union pred*(S)); //; // 2. Extend R to R' = R union pred(R).; //; // until a fixed point is reached.; //; // The idea is that we want to quickly prune entire portions of the graph, so we; // try to find high-level nodes that can be eliminated with all of their; // dependents.; //; // FIXME: The current algorithm doesn't actually provide a strong guarantee; // about the minimality of the result. The problem is that after adding nodes to; // the required set, we no longer consider them for elimination. For strictly; // well formed predicates, this doesn't happen, but it commonly occurs in; // practice when there are unmodelled dependencies. I believe we can resolve; // this by allowing the required set to be minimized as well, but need more test; // cases first.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp:886,Integrability,depend,dependents,886,"//===--- DAGDeltaAlgorithm.cpp - A DAG Minimization Algorithm --*- C++ -*--===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //===----------------------------------------------------------------------===//; //; // The algorithm we use attempts to exploit the dependency information by; // minimizing top-down. We start by constructing an initial root set R, and; // then iteratively:; //; // 1. Minimize the set R using the test predicate:; // P'(S) = P(S union pred*(S)); //; // 2. Extend R to R' = R union pred(R).; //; // until a fixed point is reached.; //; // The idea is that we want to quickly prune entire portions of the graph, so we; // try to find high-level nodes that can be eliminated with all of their; // dependents.; //; // FIXME: The current algorithm doesn't actually provide a strong guarantee; // about the minimality of the result. The problem is that after adding nodes to; // the required set, we no longer consider them for elimination. For strictly; // well formed predicates, this doesn't happen, but it commonly occurs in; // practice when there are unmodelled dependencies. I believe we can resolve; // this by allowing the required set to be minimized as well, but need more test; // cases first.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp:1254,Integrability,depend,dependencies,1254,"//===--- DAGDeltaAlgorithm.cpp - A DAG Minimization Algorithm --*- C++ -*--===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //===----------------------------------------------------------------------===//; //; // The algorithm we use attempts to exploit the dependency information by; // minimizing top-down. We start by constructing an initial root set R, and; // then iteratively:; //; // 1. Minimize the set R using the test predicate:; // P'(S) = P(S union pred*(S)); //; // 2. Extend R to R' = R union pred(R).; //; // until a fixed point is reached.; //; // The idea is that we want to quickly prune entire portions of the graph, so we; // try to find high-level nodes that can be eliminated with all of their; // dependents.; //; // FIXME: The current algorithm doesn't actually provide a strong guarantee; // about the minimality of the result. The problem is that after adding nodes to; // the required set, we no longer consider them for elimination. For strictly; // well formed predicates, this doesn't happen, but it commonly occurs in; // practice when there are unmodelled dependencies. I believe we can resolve; // this by allowing the required set to be minimized as well, but need more test; // cases first.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp:648,Modifiability,Extend,Extend,648,"//===--- DAGDeltaAlgorithm.cpp - A DAG Minimization Algorithm --*- C++ -*--===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //===----------------------------------------------------------------------===//; //; // The algorithm we use attempts to exploit the dependency information by; // minimizing top-down. We start by constructing an initial root set R, and; // then iteratively:; //; // 1. Minimize the set R using the test predicate:; // P'(S) = P(S union pred*(S)); //; // 2. Extend R to R' = R union pred(R).; //; // until a fixed point is reached.; //; // The idea is that we want to quickly prune entire portions of the graph, so we; // try to find high-level nodes that can be eliminated with all of their; // dependents.; //; // FIXME: The current algorithm doesn't actually provide a strong guarantee; // about the minimality of the result. The problem is that after adding nodes to; // the required set, we no longer consider them for elimination. For strictly; // well formed predicates, this doesn't happen, but it commonly occurs in; // practice when there are unmodelled dependencies. I believe we can resolve; // this by allowing the required set to be minimized as well, but need more test; // cases first.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp:589,Testability,test,test,589,"//===--- DAGDeltaAlgorithm.cpp - A DAG Minimization Algorithm --*- C++ -*--===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //===----------------------------------------------------------------------===//; //; // The algorithm we use attempts to exploit the dependency information by; // minimizing top-down. We start by constructing an initial root set R, and; // then iteratively:; //; // 1. Minimize the set R using the test predicate:; // P'(S) = P(S union pred*(S)); //; // 2. Extend R to R' = R union pred(R).; //; // until a fixed point is reached.; //; // The idea is that we want to quickly prune entire portions of the graph, so we; // try to find high-level nodes that can be eliminated with all of their; // dependents.; //; // FIXME: The current algorithm doesn't actually provide a strong guarantee; // about the minimality of the result. The problem is that after adding nodes to; // the required set, we no longer consider them for elimination. For strictly; // well formed predicates, this doesn't happen, but it commonly occurs in; // practice when there are unmodelled dependencies. I believe we can resolve; // this by allowing the required set to be minimized as well, but need more test; // cases first.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp:1370,Testability,test,test,1370,"//===--- DAGDeltaAlgorithm.cpp - A DAG Minimization Algorithm --*- C++ -*--===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //===----------------------------------------------------------------------===//; //; // The algorithm we use attempts to exploit the dependency information by; // minimizing top-down. We start by constructing an initial root set R, and; // then iteratively:; //; // 1. Minimize the set R using the test predicate:; // P'(S) = P(S union pred*(S)); //; // 2. Extend R to R' = R union pred(R).; //; // until a fixed point is reached.; //; // The idea is that we want to quickly prune entire portions of the graph, so we; // try to find high-level nodes that can be eliminated with all of their; // dependents.; //; // FIXME: The current algorithm doesn't actually provide a strong guarantee; // about the minimality of the result. The problem is that after adding nodes to; // the required set, we no longer consider them for elimination. For strictly; // well formed predicates, this doesn't happen, but it commonly occurs in; // practice when there are unmodelled dependencies. I believe we can resolve; // this by allowing the required set to be minimized as well, but need more test; // cases first.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp:96,Energy Efficiency,reduce,reduce,96,/// Cache of failed test results. Successful test results are never cached; /// since we always reduce following a success. We maintain an independent; /// cache from that used by the individual delta passes because we may get; /// hits across multiple individual delta invocations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp:4,Performance,Cache,Cache,4,/// Cache of failed test results. Successful test results are never cached; /// since we always reduce following a success. We maintain an independent; /// cache from that used by the individual delta passes because we may get; /// hits across multiple individual delta invocations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp:68,Performance,cache,cached,68,/// Cache of failed test results. Successful test results are never cached; /// since we always reduce following a success. We maintain an independent; /// cache from that used by the individual delta passes because we may get; /// hits across multiple individual delta invocations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp:156,Performance,cache,cache,156,/// Cache of failed test results. Successful test results are never cached; /// since we always reduce following a success. We maintain an independent; /// cache from that used by the individual delta passes because we may get; /// hits across multiple individual delta invocations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp:20,Testability,test,test,20,/// Cache of failed test results. Successful test results are never cached; /// since we always reduce following a success. We maintain an independent; /// cache from that used by the individual delta passes because we may get; /// hits across multiple individual delta invocations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp:45,Testability,test,test,45,/// Cache of failed test results. Successful test results are never cached; /// since we always reduce following a success. We maintain an independent; /// cache from that used by the individual delta passes because we may get; /// hits across multiple individual delta invocations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp:38,Testability,test,test,38,/// ExecuteOneTest - Execute a single test predicate on the change set \p S.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp:9,Integrability,depend,dependencies,9,// Check dependencies invariant.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp:109,Performance,cache,cache,109,"/// GetTestResult - Get the test result for the active set \p Changes with; /// \p Required changes from the cache, executing the test if necessary.; ///; /// \param Changes - The set of active changes being minimized, which should; /// have their pred closure included in the test.; /// \param Required - The set of changes which have previously been; /// established to be required.; /// \return - The test result.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp:28,Testability,test,test,28,"/// GetTestResult - Get the test result for the active set \p Changes with; /// \p Required changes from the cache, executing the test if necessary.; ///; /// \param Changes - The set of active changes being minimized, which should; /// have their pred closure included in the test.; /// \param Required - The set of changes which have previously been; /// established to be required.; /// \return - The test result.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp:130,Testability,test,test,130,"/// GetTestResult - Get the test result for the active set \p Changes with; /// \p Required changes from the cache, executing the test if necessary.; ///; /// \param Changes - The set of active changes being minimized, which should; /// have their pred closure included in the test.; /// \param Required - The set of changes which have previously been; /// established to be required.; /// \return - The test result.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp:277,Testability,test,test,277,"/// GetTestResult - Get the test result for the active set \p Changes with; /// \p Required changes from the cache, executing the test if necessary.; ///; /// \param Changes - The set of active changes being minimized, which should; /// have their pred closure included in the test.; /// \param Required - The set of changes which have previously been; /// established to be required.; /// \return - The test result.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp:404,Testability,test,test,404,"/// GetTestResult - Get the test result for the active set \p Changes with; /// \p Required changes from the cache, executing the test if necessary.; ///; /// \param Changes - The set of active changes being minimized, which should; /// have their pred closure included in the test.; /// \param Required - The set of changes which have previously been; /// established to be required.; /// \return - The test result.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp:4,Deployability,Update,UpdatedSearchState,4,/// UpdatedSearchState - Callback used when the search state changes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp:3,Deployability,Update,Update,3,"// Update the set of required changes. Since; // CurrentMinSet subset CurrentSet; // and after the last iteration,; // succ(CurrentSet) subset Required; // then; // succ(CurrentMinSet) subset Required; // and our invariant on Required is maintained.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DAGDeltaAlgorithm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Debug.cpp:601,Integrability,wrap,wrap,601,"//===-- Debug.cpp - An easy way to add debug output to your code ----------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a handy way of adding debugging information to your; // code, without it being enabled all of the time, and without having to add; // command line options to enable it.; //; // In particular, just wrap your code with the LLVM_DEBUG() macro, and it will; // be enabled automatically if you specify '-debug' on the command-line.; // Alternatively, you can also use the SET_DEBUG_TYPE(""foo"") macro to specify; // that your debug code belongs to class ""foo"". Then, on the command line, you; // can specify '-debug-only=foo' to enable JUST the debug information for the; // foo class.; //; // When compiling without assertions, the -debug-* options and all code in; // LLVM_DEBUG() statements disappears, so it does not affect the runtime of the; // code.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Debug.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Debug.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Debug.cpp:1015,Testability,assert,assertions,1015,"//===-- Debug.cpp - An easy way to add debug output to your code ----------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a handy way of adding debugging information to your; // code, without it being enabled all of the time, and without having to add; // command line options to enable it.; //; // In particular, just wrap your code with the LLVM_DEBUG() macro, and it will; // be enabled automatically if you specify '-debug' on the command-line.; // Alternatively, you can also use the SET_DEBUG_TYPE(""foo"") macro to specify; // that your debug code belongs to class ""foo"". Then, on the command line, you; // can specify '-debug-only=foo' to enable JUST the debug information for the; // foo class.; //; // When compiling without assertions, the -debug-* options and all code in; // LLVM_DEBUG() statements disappears, so it does not affect the runtime of the; // code.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Debug.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Debug.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Debug.cpp:106,Integrability,depend,depend,106,"// Even though LLVM might be built with NDEBUG, define symbols that the code; // built without NDEBUG can depend on via the llvm/Support/Debug.h header.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Debug.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Debug.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Debug.cpp:42,Safety,safe,safe,42,// Do one-time initialization in a thread-safe way.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Debug.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Debug.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Debug.cpp:3,Safety,Avoid,Avoid,3,"// Avoid ""has no symbols"" warning.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Debug.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Debug.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Debug.cpp:50,Deployability,install,installation,50,/// EnableDebugBuffering - Turn on signal handler installation.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Debug.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Debug.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DebugCounter.cpp:405,Integrability,rout,route,405,"// This is a variant of from generic_parser_base::printOptionInfo. Sadly,; // it's not easy to make it more usable. We could get it to print these as; // options if we were a cl::opt and registered them, but lists don't have; // options, nor does the parser for std::string. The other mechanisms for; // options are global and would pollute the global namespace with our; // counters. Rather than go that route, we have just overridden the; // printing, which only a few things call anyway.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/DebugCounter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DebugCounter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DebugCounter.cpp:108,Usability,usab,usable,108,"// This is a variant of from generic_parser_base::printOptionInfo. Sadly,; // it's not easy to make it more usable. We could get it to print these as; // options if we were a cl::opt and registered them, but lists don't have; // options, nor does the parser for std::string. The other mechanisms for; // options are global and would pollute the global namespace with our; // counters. Rather than go that route, we have just overridden the; // printing, which only a few things call anyway.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/DebugCounter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DebugCounter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DebugOptions.h:163,Performance,load,loading,163,"// These are invoked internally before parsing command line options.; // This enables lazy-initialization of all the globals in libSupport, instead; // of eagerly loading everything on program startup.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/DebugOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DebugOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DeltaAlgorithm.cpp:10,Testability,test,test,10,"// If the test passes on this subset alone, recurse.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/DeltaAlgorithm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DeltaAlgorithm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DeltaAlgorithm.cpp:52,Testability,test,test,52,"// Otherwise, if we have more than two sets, see if test passes on the; // complement.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/DeltaAlgorithm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DeltaAlgorithm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DeltaAlgorithm.cpp:46,Testability,test,test,46,// Check empty set first to quickly find poor test functions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/DeltaAlgorithm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DeltaAlgorithm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DivisionByConstantInfo.cpp:418,Performance,optimiz,optimizing,418,"//===----- DivisionByConstantInfo.cpp - division by constant -*- C++ -*----===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// This file implements support for optimizing divisions by a constant; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/DivisionByConstantInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DivisionByConstantInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DivisionByConstantInfo.cpp:3,Deployability,update,update,3,// update Q1 = 2P/abs(NC),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/DivisionByConstantInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DivisionByConstantInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DivisionByConstantInfo.cpp:3,Deployability,update,update,3,// update R1 = rem(2P/abs(NC)),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/DivisionByConstantInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DivisionByConstantInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DivisionByConstantInfo.cpp:3,Deployability,update,update,3,// update Q2 = 2P/abs(D),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/DivisionByConstantInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DivisionByConstantInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DivisionByConstantInfo.cpp:3,Deployability,update,update,3,// update R2 = rem(2P/abs(D)),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/DivisionByConstantInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DivisionByConstantInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DivisionByConstantInfo.cpp:292,Usability,simpl,simplify,292,"/// Calculate the magic numbers required to implement an unsigned integer; /// division by a constant as a sequence of multiplies, adds and shifts.; /// Requires that the divisor not be 0. Taken from ""Hacker's Delight"", Henry; /// S. Warren, Jr., chapter 10.; /// LeadingZeros can be used to simplify the calculation if the upper bits; /// of the divided value are known zero.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/DivisionByConstantInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DivisionByConstantInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DivisionByConstantInfo.cpp:3,Deployability,update,update,3,// update Q1,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/DivisionByConstantInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DivisionByConstantInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DivisionByConstantInfo.cpp:3,Deployability,update,update,3,// update R1,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/DivisionByConstantInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DivisionByConstantInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DivisionByConstantInfo.cpp:3,Deployability,update,update,3,// update Q1,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/DivisionByConstantInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DivisionByConstantInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DivisionByConstantInfo.cpp:3,Deployability,update,update,3,// update R1,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/DivisionByConstantInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DivisionByConstantInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DivisionByConstantInfo.cpp:3,Deployability,update,update,3,// update Q2,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/DivisionByConstantInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DivisionByConstantInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DivisionByConstantInfo.cpp:3,Deployability,update,update,3,// update R2,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/DivisionByConstantInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DivisionByConstantInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DivisionByConstantInfo.cpp:3,Deployability,update,update,3,// update Q2,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/DivisionByConstantInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DivisionByConstantInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DivisionByConstantInfo.cpp:3,Deployability,update,update,3,// update R2,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/DivisionByConstantInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DivisionByConstantInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DivisionByConstantInfo.cpp:23,Energy Efficiency,Reduce,Reduce,23,// resulting shift; // Reduce shift amount for IsAdd.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/DivisionByConstantInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DivisionByConstantInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DJB.cpp:31,Security,Hash,Hash,31,"//===-- Support/DJB.cpp ---DJB Hash -----------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains support for the DJ Bernstein hash function.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/DJB.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DJB.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DJB.cpp:431,Security,hash,hash,431,"//===-- Support/DJB.cpp ---DJB Hash -----------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains support for the DJ Bernstein hash function.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/DJB.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DJB.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DynamicLibrary.cpp:42,Performance,load,load,42,"//===-- DynamicLibrary.cpp - Runtime link/load libraries --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the operating system DynamicLibrary concept.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/DynamicLibrary.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DynamicLibrary.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DynamicLibrary.cpp:58,Performance,load,loaded,58,// Use OS facilities to search the current binary and all loaded libs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/DynamicLibrary.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DynamicLibrary.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DynamicLibrary.cpp:20,Performance,load,loaded,20,"// If we've already loaded this library, tell the caller.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/DynamicLibrary.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/DynamicLibrary.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ELFAttributeParser.cpp:232,Safety,safe,safe,232,"// Handle a subsection with an unrecognized vendor-name by skipping; // over it to the next subsection. ADDENDA32 in the Arm ABI defines; // that vendor attribute sections must not affect compatibility, so; // this should always be safe.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ELFAttributeParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ELFAttributeParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ELFAttributeParser.cpp:44,Availability,error,errors,44,"// For early returns, we have more specific errors, consume the Error in; // cursor.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ELFAttributeParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ELFAttributeParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ELFAttributeParser.cpp:64,Availability,Error,Error,64,"// For early returns, we have more specific errors, consume the Error in; // cursor.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ELFAttributeParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ELFAttributeParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Errno.cpp:414,Integrability,wrap,wrappers,414,"//===- Errno.cpp - errno support --------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the errno wrappers.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Errno.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Errno.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Errno.cpp:24,Safety,safe,safe,24,// strerror_r is thread-safe.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Errno.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Errno.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Errno.cpp:12,Security,Secur,Secure,12,"// ""Windows Secure API""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Errno.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Errno.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Errno.cpp:22,Safety,safe,safe,22,// Copy the thread un-safe result of strerror into; // the buffer as fast as possible to minimize impact; // of collision of strerror in multiple threads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Errno.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Errno.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Error.cpp:23,Availability,Error,Error,23,"//===----- lib/Support/Error.cpp - Error and associated utilities ---------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Error.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Error.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Error.cpp:35,Availability,Error,Error,35,"//===----- lib/Support/Error.cpp - Error and associated utilities ---------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Error.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Error.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Error.cpp:69,Availability,Error,Error,69,"// FIXME: This class is only here to support the transition to llvm::Error. It; // will be removed once this transition is complete. Clients should prefer to; // deal with the Error value directly, rather than converting to error_code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Error.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Error.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Error.cpp:176,Availability,Error,Error,176,"// FIXME: This class is only here to support the transition to llvm::Error. It; // will be removed once this transition is complete. Clients should prefer to; // deal with the Error value directly, rather than converting to error_code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Error.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Error.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Error.cpp:14,Availability,error,error,14,/// Write all error messages (if any) in E to a string. The newline character; /// is used to separate error messages.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Error.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Error.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Error.cpp:103,Availability,error,error,103,/// Write all error messages (if any) in E to a string. The newline character; /// is used to separate error messages.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Error.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Error.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Error.cpp:20,Integrability,message,messages,20,/// Write all error messages (if any) in E to a string. The newline character; /// is used to separate error messages.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Error.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Error.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Error.cpp:109,Integrability,message,messages,109,/// Write all error messages (if any) in E to a string. The newline character; /// is used to separate error messages.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Error.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Error.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp:19,Availability,Error,ErrorHandling,19,"//===- lib/Support/ErrorHandling.cpp - Callbacks for errors ---------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines an API used to indicate fatal error conditions. Non-fatal; // errors (most of them) should be handled through LLVMContext.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp:53,Availability,error,errors,53,"//===- lib/Support/ErrorHandling.cpp - Callbacks for errors ---------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines an API used to indicate fatal error conditions. Non-fatal; // errors (most of them) should be handled through LLVMContext.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp:431,Availability,error,error,431,"//===- lib/Support/ErrorHandling.cpp - Callbacks for errors ---------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines an API used to indicate fatal error conditions. Non-fatal; // errors (most of them) should be handled through LLVMContext.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp:463,Availability,error,errors,463,"//===- lib/Support/ErrorHandling.cpp - Callbacks for errors ---------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines an API used to indicate fatal error conditions. Non-fatal; // errors (most of them) should be handled through LLVMContext.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp:37,Availability,error,error,37,"// Mutexes to synchronize installing error handlers and calling error handlers.; // Do not use ManagedStatic, or that may allocate memory while attempting to; // report an OOM.; //; // This usage of std::mutex has to be conditionalized behind ifdefs because; // of this script:; // compiler-rt/lib/sanitizer_common/symbolizer/scripts/build_symbolizer.sh; // That script attempts to statically link the LLVM symbolizer library with the; // STL and hide all of its symbols with 'opt -internalize'. To reduce size, it; // cuts out the threading portions of the hermetic copy of libc++ that it; // builds. We can remove these ifdefs if that script goes away.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp:64,Availability,error,error,64,"// Mutexes to synchronize installing error handlers and calling error handlers.; // Do not use ManagedStatic, or that may allocate memory while attempting to; // report an OOM.; //; // This usage of std::mutex has to be conditionalized behind ifdefs because; // of this script:; // compiler-rt/lib/sanitizer_common/symbolizer/scripts/build_symbolizer.sh; // That script attempts to statically link the LLVM symbolizer library with the; // STL and hide all of its symbols with 'opt -internalize'. To reduce size, it; // cuts out the threading portions of the hermetic copy of libc++ that it; // builds. We can remove these ifdefs if that script goes away.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp:26,Deployability,install,installing,26,"// Mutexes to synchronize installing error handlers and calling error handlers.; // Do not use ManagedStatic, or that may allocate memory while attempting to; // report an OOM.; //; // This usage of std::mutex has to be conditionalized behind ifdefs because; // of this script:; // compiler-rt/lib/sanitizer_common/symbolizer/scripts/build_symbolizer.sh; // That script attempts to statically link the LLVM symbolizer library with the; // STL and hide all of its symbols with 'opt -internalize'. To reduce size, it; // cuts out the threading portions of the hermetic copy of libc++ that it; // builds. We can remove these ifdefs if that script goes away.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp:122,Energy Efficiency,allocate,allocate,122,"// Mutexes to synchronize installing error handlers and calling error handlers.; // Do not use ManagedStatic, or that may allocate memory while attempting to; // report an OOM.; //; // This usage of std::mutex has to be conditionalized behind ifdefs because; // of this script:; // compiler-rt/lib/sanitizer_common/symbolizer/scripts/build_symbolizer.sh; // That script attempts to statically link the LLVM symbolizer library with the; // STL and hide all of its symbols with 'opt -internalize'. To reduce size, it; // cuts out the threading portions of the hermetic copy of libc++ that it; // builds. We can remove these ifdefs if that script goes away.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp:499,Energy Efficiency,reduce,reduce,499,"// Mutexes to synchronize installing error handlers and calling error handlers.; // Do not use ManagedStatic, or that may allocate memory while attempting to; // report an OOM.; //; // This usage of std::mutex has to be conditionalized behind ifdefs because; // of this script:; // compiler-rt/lib/sanitizer_common/symbolizer/scripts/build_symbolizer.sh; // That script attempts to statically link the LLVM symbolizer library with the; // STL and hide all of its symbols with 'opt -internalize'. To reduce size, it; // cuts out the threading portions of the hermetic copy of libc++ that it; // builds. We can remove these ifdefs if that script goes away.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp:14,Integrability,synchroniz,synchronize,14,"// Mutexes to synchronize installing error handlers and calling error handlers.; // Do not use ManagedStatic, or that may allocate memory while attempting to; // report an OOM.; //; // This usage of std::mutex has to be conditionalized behind ifdefs because; // of this script:; // compiler-rt/lib/sanitizer_common/symbolizer/scripts/build_symbolizer.sh; // That script attempts to statically link the LLVM symbolizer library with the; // STL and hide all of its symbols with 'opt -internalize'. To reduce size, it; // cuts out the threading portions of the hermetic copy of libc++ that it; // builds. We can remove these ifdefs if that script goes away.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp:25,Availability,error,error,25,// Don't call the normal error handler. It may allocate memory. Directly write; // an OOM to stderr and abort.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp:47,Energy Efficiency,allocate,allocate,47,// Don't call the normal error handler. It may allocate memory. Directly write; // an OOM to stderr and abort.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp:104,Safety,abort,abort,104,// Don't call the normal error handler. It may allocate memory. Directly write; // an OOM to stderr and abort.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp:81,Availability,error,errors,81,// Do not set custom new handler if exceptions are enabled. In this case OOM; // errors are handled by throwing 'std::bad_alloc'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp:30,Availability,failure,failure,30,// Causes crash on allocation failure. It is called prior to the handler set by; // 'install_bad_alloc_error_handler'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp:56,Availability,failure,failure,56,// Installs new handler that causes crash on allocation failure. It is called by; // InitLLVM.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp:3,Deployability,Install,Installs,3,// Installs new handler that causes crash on allocation failure. It is called by; // InitLLVM.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp:44,Availability,Error,ErrorHandler,44,"// This code intentionally doesn't call the ErrorHandler callback, because; // llvm_unreachable is intended to be used to indicate ""impossible""; // situations, and not legitimate runtime errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp:187,Availability,error,errors,187,"// This code intentionally doesn't call the ErrorHandler callback, because; // llvm_unreachable is intended to be used to indicate ""impossible""; // situations, and not legitimate runtime errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp:53,Safety,abort,abort,53,"// Windows systems and possibly others don't declare abort() to be noreturn,; // so use the unreachable builtin to avoid a Clang self-host warning.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp:115,Safety,avoid,avoid,115,"// Windows systems and possibly others don't declare abort() to be noreturn,; // so use the unreachable builtin to avoid a Clang self-host warning.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ErrorHandling.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FileCollector.cpp:40,Safety,avoid,avoid,40,// Canonicalize src to a native path to avoid mixed separator styles.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/FileCollector.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FileCollector.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FileCollector.cpp:10,Availability,redundant,redundant,10,"// Remove redundant leading ""./"" pieces and consecutive separators.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/FileCollector.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FileCollector.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FileCollector.cpp:10,Safety,redund,redundant,10,"// Remove redundant leading ""./"" pieces and consecutive separators.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/FileCollector.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FileCollector.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FileCollector.cpp:304,Availability,error,errors,304,"// Always map a canonical src path to its real path into the YAML, by doing; // this we map different virtual src paths to the same entry in the VFS; // overlay, which is a way to emulate symlink inside the VFS; this is also; // needed for correctness, not doing that can lead to module redefinition; // errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/FileCollector.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FileCollector.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FileCollector.cpp:12,Security,access,access,12,/// Set the access and modification time for the given file from the given; /// status object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/FileCollector.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FileCollector.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FileUtilities.cpp:49,Availability,toler,tolerance,49,// Check to see if these are inside the absolute tolerance,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/FileUtilities.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FileUtilities.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FileUtilities.cpp:28,Availability,toler,tolerance,28,"// Nope, check the relative tolerance...",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/FileUtilities.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FileUtilities.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FileUtilities.cpp:149,Availability,error,error,149,"/// DiffFilesWithTolerance - Compare the two files specified, returning 0 if the; /// files match, 1 if they are different, and 2 if there is a file error. This; /// function differs from DiffFiles in that you can specify an absolute and; /// relative FP error that is allowed to exist. If you specify a string to fill; /// in for the error option, it will set the string to an error message if an; /// error occurs, allowing the caller to distinguish between a failed diff and a; /// file system error.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/FileUtilities.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FileUtilities.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FileUtilities.cpp:255,Availability,error,error,255,"/// DiffFilesWithTolerance - Compare the two files specified, returning 0 if the; /// files match, 1 if they are different, and 2 if there is a file error. This; /// function differs from DiffFiles in that you can specify an absolute and; /// relative FP error that is allowed to exist. If you specify a string to fill; /// in for the error option, it will set the string to an error message if an; /// error occurs, allowing the caller to distinguish between a failed diff and a; /// file system error.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/FileUtilities.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FileUtilities.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FileUtilities.cpp:335,Availability,error,error,335,"/// DiffFilesWithTolerance - Compare the two files specified, returning 0 if the; /// files match, 1 if they are different, and 2 if there is a file error. This; /// function differs from DiffFiles in that you can specify an absolute and; /// relative FP error that is allowed to exist. If you specify a string to fill; /// in for the error option, it will set the string to an error message if an; /// error occurs, allowing the caller to distinguish between a failed diff and a; /// file system error.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/FileUtilities.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FileUtilities.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FileUtilities.cpp:378,Availability,error,error,378,"/// DiffFilesWithTolerance - Compare the two files specified, returning 0 if the; /// files match, 1 if they are different, and 2 if there is a file error. This; /// function differs from DiffFiles in that you can specify an absolute and; /// relative FP error that is allowed to exist. If you specify a string to fill; /// in for the error option, it will set the string to an error message if an; /// error occurs, allowing the caller to distinguish between a failed diff and a; /// file system error.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/FileUtilities.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FileUtilities.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FileUtilities.cpp:403,Availability,error,error,403,"/// DiffFilesWithTolerance - Compare the two files specified, returning 0 if the; /// files match, 1 if they are different, and 2 if there is a file error. This; /// function differs from DiffFiles in that you can specify an absolute and; /// relative FP error that is allowed to exist. If you specify a string to fill; /// in for the error option, it will set the string to an error message if an; /// error occurs, allowing the caller to distinguish between a failed diff and a; /// file system error.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/FileUtilities.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FileUtilities.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FileUtilities.cpp:497,Availability,error,error,497,"/// DiffFilesWithTolerance - Compare the two files specified, returning 0 if the; /// files match, 1 if they are different, and 2 if there is a file error. This; /// function differs from DiffFiles in that you can specify an absolute and; /// relative FP error that is allowed to exist. If you specify a string to fill; /// in for the error option, it will set the string to an error message if an; /// error occurs, allowing the caller to distinguish between a failed diff and a; /// file system error.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/FileUtilities.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FileUtilities.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FileUtilities.cpp:384,Integrability,message,message,384,"/// DiffFilesWithTolerance - Compare the two files specified, returning 0 if the; /// files match, 1 if they are different, and 2 if there is a file error. This; /// function differs from DiffFiles in that you can specify an absolute and; /// relative FP error that is allowed to exist. If you specify a string to fill; /// in for the error option, it will set the string to an error message if an; /// error occurs, allowing the caller to distinguish between a failed diff and a; /// file system error.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/FileUtilities.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FileUtilities.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FileUtilities.cpp:11,Safety,safe,safe,11,// Now its safe to mmap the files into memory because both files; // have a non-zero size.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/FileUtilities.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FileUtilities.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FileUtilities.cpp:55,Energy Efficiency,efficient,efficiently,55,// Are the buffers identical? Common case: Handle this efficiently.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/FileUtilities.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FileUtilities.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FileUtilities.cpp:28,Availability,toler,tolerances,28,"// Otherwise, we are done a tolerances are set.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/FileUtilities.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FileUtilities.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FileUtilities.cpp:49,Availability,error,error,49,"// Writing to stdout should not be treated as an error here, just; // do not set access/modification times or permissions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/FileUtilities.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FileUtilities.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FileUtilities.cpp:81,Security,access,access,81,"// Writing to stdout should not be treated as an error here, just; // do not set access/modification times or permissions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/FileUtilities.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FileUtilities.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FloatingPointMode.cpp:3,Usability,Clear,Clear,3,// Clear the bits so we don't print any aliased names later.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/FloatingPointMode.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FloatingPointMode.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp:42,Security,Hash,Hash,42,"//===-- Support/FoldingSet.cpp - Uniquing Hash Set --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a hash set that can be used to remove duplication of; // nodes in a graph.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp:406,Security,hash,hash,406,"//===-- Support/FoldingSet.cpp - Uniquing Hash Set --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a hash set that can be used to remove duplication of; // nodes in a graph.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp:54,Energy Efficiency,allocate,allocated,54,/// Intern - Copy this node's data to a memory region allocated from the; /// given allocator and return a FoldingSetNodeIDRef describing the; /// interned data.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp:238,Energy Efficiency,efficient,efficient,238,"//===----------------------------------------------------------------------===//; /// Helper functions for FoldingSetBase.; /// GetNextPtr - In order to save space, each bucket is a; /// singly-linked-list. In order to make deletion more efficient, we make; /// the list circular, so we can delete a node without computing its hash.; /// The problem with this is that the start of the hash buckets are not; /// Nodes. If NextInBucketPtr is a bucket pointer, this method returns null:; /// use GetBucketPtr when this happens.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp:327,Security,hash,hash,327,"//===----------------------------------------------------------------------===//; /// Helper functions for FoldingSetBase.; /// GetNextPtr - In order to save space, each bucket is a; /// singly-linked-list. In order to make deletion more efficient, we make; /// the list circular, so we can delete a node without computing its hash.; /// The problem with this is that the start of the hash buckets are not; /// Nodes. If NextInBucketPtr is a bucket pointer, this method returns null:; /// use GetBucketPtr when this happens.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp:385,Security,hash,hash,385,"//===----------------------------------------------------------------------===//; /// Helper functions for FoldingSetBase.; /// GetNextPtr - In order to save space, each bucket is a; /// singly-linked-list. In order to make deletion more efficient, we make; /// the list circular, so we can delete a node without computing its hash.; /// The problem with this is that the start of the hash buckets are not; /// Nodes. If NextInBucketPtr is a bucket pointer, this method returns null:; /// use GetBucketPtr when this happens.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp:4,Testability,test,testing,4,/// testing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp:19,Security,Hash,Hash,19,/// GetBucketFor - Hash the specified node ID and return the hash bucket for; /// the specified ID.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp:61,Security,hash,hash,61,/// GetBucketFor - Hash the specified node ID and return the hash bucket for; /// the specified ID.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp:26,Energy Efficiency,power,power,26,// NumBuckets is always a power of 2.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp:4,Energy Efficiency,Allocate,AllocateBuckets,4,/// AllocateBuckets - Allocated initialized bucket memory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp:22,Energy Efficiency,Allocate,Allocated,22,/// AllocateBuckets - Allocated initialized bucket memory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp:3,Usability,Clear,Clear,3,// Clear out new buckets.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp:62,Security,hash,hash,62,"// Insert the node into the new bucket, after recomputing the hash.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp:43,Security,hash,hash,43,/// GrowHashTable - Double the size of the hash table and rehash everything.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp:98,Performance,load,load,98,// This will give us somewhere between EltCount / 2 and; // EltCount buckets. This puts us in the load factor; // range of 1.0 - 2.0.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp:26,Security,hash,hashtable,26,// Do we need to grow the hashtable?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp:72,Security,hash,hash,72,"// Because each bucket is a circular list, we don't need to compute N's hash; // to remove it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp:44,Deployability,update,update,44,"// If we found that the bucket points to N, update the bucket to point to; // whatever is next.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp:46,Usability,simpl,simple,46,"/// GetOrInsertNode - If there is an existing simple Node exactly; /// equal to the specified node, return it. Otherwise, insert 'N' and it; /// instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FoldingSet.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FormattedStream.cpp:4,Deployability,Update,UpdatePosition,4,"/// UpdatePosition - Examine the given char sequence and figure out which; /// column we end up in after output, and how many line breaks are contained.; /// This assumes that the input string is well-formed UTF-8, and takes into; /// account Unicode characters which render as multiple columns wide.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/FormattedStream.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FormattedStream.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FormattedStream.cpp:53,Deployability,update,update,53,/// ComputePosition - Examine the current output and update line and column; /// counts.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/FormattedStream.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FormattedStream.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FormattedStream.cpp:102,Integrability,depend,depends,102,"// If our previous scan pointer is inside the buffer, assume we already; // scanned those bytes. This depends on raw_ostream to not change our buffer; // in unexpected ways.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/FormattedStream.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FormattedStream.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FormattedStream.cpp:3,Deployability,Update,Update,3,// Update the scanning pointer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/FormattedStream.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FormattedStream.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FormattedStream.cpp:84,Availability,error,error,84,"/// ferrs() - This returns a reference to a formatted_raw_ostream for; /// standard error. Use it like: ferrs() << ""foo"" << ""bar"";",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/FormattedStream.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FormattedStream.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FormatVariadic.cpp:90,Availability,error,error,90,"// If the replacement sequence does not start with a non-negative integer,; // this is an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/FormatVariadic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FormatVariadic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FormatVariadic.cpp:186,Availability,error,error,186,"// An unterminated open brace is undefined. We treat the rest of the string; // as a literal replacement, but we assert to indicate that this is; // undefined and that we consider it an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/FormatVariadic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FormatVariadic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FormatVariadic.cpp:113,Testability,assert,assert,113,"// An unterminated open brace is undefined. We treat the rest of the string; // as a literal replacement, but we assert to indicate that this is; // undefined and that we consider it an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/FormatVariadic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FormatVariadic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FormatVariadic.cpp:19,Availability,error,error,19,"// If there was an error parsing the replacement item, treat it as an; // invalid replacement spec, and just continue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/FormatVariadic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/FormatVariadic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/GlobPattern.cpp:38,Security,Validat,Validate,38,// It must be in the form of X-Y.; // Validate it and then interpret the range.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/GlobPattern.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/GlobPattern.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/GraphWriter.cpp:56,Integrability,rout,routines,56,"//===- GraphWriter.cpp - Implements GraphWriter support routines ----------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements misc. GraphWriter support routines.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/GraphWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/GraphWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/GraphWriter.cpp:430,Integrability,rout,routines,430,"//===- GraphWriter.cpp - Implements GraphWriter support routines ----------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements misc. GraphWriter support routines.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/GraphWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/GraphWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/GraphWriter.cpp:45,Usability,Simpl,Simply,45,/// Get a color string for this node number. Simply round-robin selects; /// from a reasonable number of colors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/GraphWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/GraphWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/GraphWriter.cpp:55,Availability,error,errors,55,// Execute the graph viewer. Return true if there were errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/GraphWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/GraphWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Hashing.cpp:32,Security,Hash,Hashing,32,"//===-------------- lib/Support/Hashing.cpp -------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides implementation bits for the LLVM common hashing; // infrastructure. Documentation and most of the other information is in the; // header file.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Hashing.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Hashing.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Hashing.cpp:442,Security,hash,hashing,442,"//===-------------- lib/Support/Hashing.cpp -------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides implementation bits for the LLVM common hashing; // infrastructure. Documentation and most of the other information is in the; // header file.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Hashing.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Hashing.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/InitLLVM.cpp:35,Deployability,install,installed,35,"// The pipe signal handler must be installed before any other handlers are; // registered. This is because the Unix \ref RegisterHandlers function does; // not perform a sigaction() for SIGPIPE unless a one-shot handler is; // present, to allow long-lived processes (like lldb) to fully opt-out of; // llvm's SIGPIPE handling and ignore the signal safely.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/InitLLVM.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/InitLLVM.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/InitLLVM.cpp:160,Performance,perform,perform,160,"// The pipe signal handler must be installed before any other handlers are; // registered. This is because the Unix \ref RegisterHandlers function does; // not perform a sigaction() for SIGPIPE unless a one-shot handler is; // present, to allow long-lived processes (like lldb) to fully opt-out of; // llvm's SIGPIPE handling and ignore the signal safely.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/InitLLVM.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/InitLLVM.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/InitLLVM.cpp:348,Safety,safe,safely,348,"// The pipe signal handler must be installed before any other handlers are; // registered. This is because the Unix \ref RegisterHandlers function does; // not perform a sigaction() for SIGPIPE unless a one-shot handler is; // present, to allow long-lived processes (like lldb) to fully opt-out of; // llvm's SIGPIPE handling and ignore the signal safely.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/InitLLVM.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/InitLLVM.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/InitLLVM.cpp:38,Deployability,install,installing,38,"// Initialize the stack printer after installing the one-shot pipe signal; // handler, so we can perform a sigaction() for SIGPIPE on Unix if requested.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/InitLLVM.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/InitLLVM.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/InitLLVM.cpp:97,Performance,perform,perform,97,"// Initialize the stack printer after installing the one-shot pipe signal; // handler, so we can perform a sigaction() for SIGPIPE on Unix if requested.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/InitLLVM.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/InitLLVM.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/InitLLVM.cpp:143,Availability,error,error,143,"// We use UTF-8 as the internal character encoding. On z/OS, all external; // output is encoded in EBCDIC. In order to be able to read all; // error messages, we turn conversion to EBCDIC on for stderr fd.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/InitLLVM.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/InitLLVM.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/InitLLVM.cpp:149,Integrability,message,messages,149,"// We use UTF-8 as the internal character encoding. On z/OS, all external; // output is encoded in EBCDIC. In order to be able to read all; // error messages, we turn conversion to EBCDIC on for stderr fd.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/InitLLVM.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/InitLLVM.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/InitLLVM.cpp:54,Availability,error,error,54,// If turning on conversion for stderr fails then the error message; // may be garbled. There is no solution to this problem.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/InitLLVM.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/InitLLVM.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/InitLLVM.cpp:60,Integrability,message,message,60,// If turning on conversion for stderr fails then the error message; // may be garbled. There is no solution to this problem.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/InitLLVM.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/InitLLVM.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/InitLLVM.cpp:140,Availability,reliab,reliably,140,"// We use UTF-8 as the internal character encoding. On Windows,; // arguments passed to main() may not be encoded in UTF-8. In order; // to reliably detect encoding of command line arguments, we use an; // Windows API to obtain arguments, convert them to UTF-8, and then; // write them back to the Argv vector.; //; // There's probably other way to do the same thing (e.g. using; // wmain() instead of main()), but this way seems less intrusive; // than that.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/InitLLVM.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/InitLLVM.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/InitLLVM.cpp:149,Safety,detect,detect,149,"// We use UTF-8 as the internal character encoding. On Windows,; // arguments passed to main() may not be encoded in UTF-8. In order; // to reliably detect encoding of command line arguments, we use an; // Windows API to obtain arguments, convert them to UTF-8, and then; // write them back to the Argv vector.; //; // There's probably other way to do the same thing (e.g. using; // wmain() instead of main()), but this way seems less intrusive; // than that.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/InitLLVM.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/InitLLVM.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/IntEqClasses.cpp:3,Deployability,Update,Update,3,"// Update pointers while searching for the leaders, compressing the paths; // incrementally. The larger leader will eventually be updated, joining the; // classes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/IntEqClasses.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/IntEqClasses.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/IntEqClasses.cpp:130,Deployability,update,updated,130,"// Update pointers while searching for the leaders, compressing the paths; // incrementally. The larger leader will eventually be updated, joining the; // classes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/IntEqClasses.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/IntEqClasses.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/IntervalMap.cpp:26,Availability,down,down,26,// Keep right all the way down.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/IntervalMap.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/IntervalMap.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/IntervalMap.cpp:25,Availability,down,down,25,// Keep left all the way down.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/IntervalMap.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/IntervalMap.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/JSON.cpp:224,Safety,avoid,avoid,224,"// Workaround for https://gcc.gnu.org/bugzilla/show_bug.cgi?id=323; // The same integer must convert to the same double, per the standard.; // However we see 64-vs-80-bit precision comparisons with gcc-7 -O3 -m32.; // So we avoid floating point promotion for exact comparisons.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/JSON.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/JSON.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/JSON.cpp:15,Availability,error,error,15,// Fill in the error message and copy the path (in reverse order).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/JSON.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/JSON.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/JSON.cpp:21,Integrability,message,message,21,// Fill in the error message and copy the path (in reverse order).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/JSON.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/JSON.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/JSON.cpp:23,Availability,down,down,23,"// PrintValue recurses down the path, printing the ancestors of our target.; // Siblings of nodes along the path are printed with abbreviate(), and the; // target itself is printed with the somewhat richer abbreviateChildren().; // 'Recurse' is the lambda itself, to allow recursive calls.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/JSON.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/JSON.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/JSON.cpp:42,Availability,error,error,42,"// Print the target node itself, with the error as a comment.; // Also used if we can't follow our path, e.g. it names a field that; // *should* exist but doesn't.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/JSON.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/JSON.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/JSON.cpp:3,Usability,Simpl,Simple,3,// Simple recursive-descent JSON parser.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/JSON.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/JSON.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/JSON.cpp:108,Availability,error,errors,108,"// Try first to parse as integer, and if so preserve full 64 bits.; // We check for errno for out of bounds errors and for End == S.end(); // to make sure that the numeric string is not malformed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/JSON.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/JSON.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/JSON.cpp:29,Availability,error,error,29,// Invalid UTF is not a JSON error (RFC 8529§8.2). It gets replaced by U+FFFD.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/JSON.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/JSON.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/JSON.cpp:67,Availability,error,error,67,"// Decodes 4 hex digits from the stream into Out, returns false on error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/JSON.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/JSON.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/JSON.cpp:42,Availability,error,error,42,// We loop to allow proper surrogate-pair error handling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/JSON.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/JSON.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/JSON.cpp:54,Availability,error,error-recovery,54,"// This isn't particularly efficient, but is only for error-recovery.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/JSON.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/JSON.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/JSON.cpp:27,Energy Efficiency,efficient,efficient,27,"// This isn't particularly efficient, but is only for error-recovery.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/JSON.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/JSON.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/JSON.cpp:60,Safety,recover,recovery,60,"// This isn't particularly efficient, but is only for error-recovery.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/JSON.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/JSON.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/KnownBits.cpp:104,Integrability,wrap,wrap,104,"// Adding two non-negative numbers, or subtracting a negative number from; // a non-negative one, can't wrap into negative.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/KnownBits.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/KnownBits.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/KnownBits.cpp:100,Integrability,wrap,wrap,100,"// Adding two negative numbers, or subtracting a non-negative number from; // a negative one, can't wrap into non-negative.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/KnownBits.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/KnownBits.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/KnownBits.cpp:151,Performance,optimiz,optimized,151,"// If we can prove that LHS >= RHS then use LHS as the result. Likewise for; // RHS. Ideally our caller would already have spotted these cases and; // optimized away the umax operation, but we handle them here for; // completeness.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/KnownBits.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/KnownBits.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/KnownBits.cpp:22,Safety,detect,detect,22,// If we can actually detect overflow do so. Otherwise leave Overflow as; // nullopt (we assume it may have happened).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/KnownBits.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/KnownBits.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/KnownBits.cpp:27,Usability,clear,clear,27,// uadd.sat; // We need to clear all the known zeros as we can only use the leading ones.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/KnownBits.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/KnownBits.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/KnownBits.cpp:27,Usability,clear,clear,27,// usub.sat; // We need to clear all the known ones as we can only use the leading zero.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/KnownBits.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/KnownBits.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/KnownBits.cpp:198,Energy Efficiency,power,power-of-,198,"// Compute the high known-0 bits by multiplying the unsigned max of each side.; // Conservatively, M active bits * N active bits results in M + N bits in the; // result. But if we know a value is a power-of-2 for example, then this; // computes one more leading zero.; // TODO: This could be generalized to number of sign bits (negative numbers).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/KnownBits.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/KnownBits.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/KnownBits.cpp:1461,Availability,mask,mask,1461,"// The result of the bottom bits of an integer multiply can be; // inferred by looking at the bottom bits of both operands and; // multiplying them together.; // We can infer at least the minimum number of known trailing bits; // of both operands. Depending on number of trailing zeros, we can; // infer more bits, because (a*b) <=> ((a/m) * (b/n)) * (m*n) assuming; // a and b are divisible by m and n respectively.; // We then calculate how many of those bits are inferrable and set; // the output. For example, the i8 mul:; // a = XXXX1100 (12); // b = XXXX1110 (14); // We know the bottom 3 bits are zero since the first can be divided by; // 4 and the second by 2, thus having ((12/4) * (14/2)) * (2*4).; // Applying the multiplication to the trimmed arguments gets:; // XX11 (3); // X111 (7); // -------; // XX11; // XX11; // XX11; // XX11; // -------; // XXXXX01; // Which allows us to infer the 2 LSBs. Since we're multiplying the result; // by 8, the bottom 3 bits will be 0, so we can infer a total of 5 bits.; // The proof for this can be described as:; // Pre: (C1 >= 0) && (C1 < (1 << C5)) && (C2 >= 0) && (C2 < (1 << C6)) &&; // (C7 == (1 << (umin(countTrailingZeros(C1), C5) +; // umin(countTrailingZeros(C2), C6) +; // umin(C5 - umin(countTrailingZeros(C1), C5),; // C6 - umin(countTrailingZeros(C2), C6)))) - 1); // %aa = shl i8 %a, C5; // %bb = shl i8 %b, C6; // %aaa = or i8 %aa, C1; // %bbb = or i8 %bb, C2; // %mul = mul i8 %aaa, %bbb; // %mask = and i8 %mul, C7; // =>; // %mask = i8 ((C1*C2)&C7); // Where C5, C6 describe the known bits of %a, %b; // C1, C2 describe the known bottom bits of %a, %b.; // C7 describes the mask of the known bits of the result.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/KnownBits.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/KnownBits.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/KnownBits.cpp:1496,Availability,mask,mask,1496,"// The result of the bottom bits of an integer multiply can be; // inferred by looking at the bottom bits of both operands and; // multiplying them together.; // We can infer at least the minimum number of known trailing bits; // of both operands. Depending on number of trailing zeros, we can; // infer more bits, because (a*b) <=> ((a/m) * (b/n)) * (m*n) assuming; // a and b are divisible by m and n respectively.; // We then calculate how many of those bits are inferrable and set; // the output. For example, the i8 mul:; // a = XXXX1100 (12); // b = XXXX1110 (14); // We know the bottom 3 bits are zero since the first can be divided by; // 4 and the second by 2, thus having ((12/4) * (14/2)) * (2*4).; // Applying the multiplication to the trimmed arguments gets:; // XX11 (3); // X111 (7); // -------; // XX11; // XX11; // XX11; // XX11; // -------; // XXXXX01; // Which allows us to infer the 2 LSBs. Since we're multiplying the result; // by 8, the bottom 3 bits will be 0, so we can infer a total of 5 bits.; // The proof for this can be described as:; // Pre: (C1 >= 0) && (C1 < (1 << C5)) && (C2 >= 0) && (C2 < (1 << C6)) &&; // (C7 == (1 << (umin(countTrailingZeros(C1), C5) +; // umin(countTrailingZeros(C2), C6) +; // umin(C5 - umin(countTrailingZeros(C1), C5),; // C6 - umin(countTrailingZeros(C2), C6)))) - 1); // %aa = shl i8 %a, C5; // %bb = shl i8 %b, C6; // %aaa = or i8 %aa, C1; // %bbb = or i8 %bb, C2; // %mul = mul i8 %aaa, %bbb; // %mask = and i8 %mul, C7; // =>; // %mask = i8 ((C1*C2)&C7); // Where C5, C6 describe the known bits of %a, %b; // C1, C2 describe the known bottom bits of %a, %b.; // C7 describes the mask of the known bits of the result.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/KnownBits.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/KnownBits.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/KnownBits.cpp:1644,Availability,mask,mask,1644,"// The result of the bottom bits of an integer multiply can be; // inferred by looking at the bottom bits of both operands and; // multiplying them together.; // We can infer at least the minimum number of known trailing bits; // of both operands. Depending on number of trailing zeros, we can; // infer more bits, because (a*b) <=> ((a/m) * (b/n)) * (m*n) assuming; // a and b are divisible by m and n respectively.; // We then calculate how many of those bits are inferrable and set; // the output. For example, the i8 mul:; // a = XXXX1100 (12); // b = XXXX1110 (14); // We know the bottom 3 bits are zero since the first can be divided by; // 4 and the second by 2, thus having ((12/4) * (14/2)) * (2*4).; // Applying the multiplication to the trimmed arguments gets:; // XX11 (3); // X111 (7); // -------; // XX11; // XX11; // XX11; // XX11; // -------; // XXXXX01; // Which allows us to infer the 2 LSBs. Since we're multiplying the result; // by 8, the bottom 3 bits will be 0, so we can infer a total of 5 bits.; // The proof for this can be described as:; // Pre: (C1 >= 0) && (C1 < (1 << C5)) && (C2 >= 0) && (C2 < (1 << C6)) &&; // (C7 == (1 << (umin(countTrailingZeros(C1), C5) +; // umin(countTrailingZeros(C2), C6) +; // umin(C5 - umin(countTrailingZeros(C1), C5),; // C6 - umin(countTrailingZeros(C2), C6)))) - 1); // %aa = shl i8 %a, C5; // %bb = shl i8 %b, C6; // %aaa = or i8 %aa, C1; // %bbb = or i8 %bb, C2; // %mul = mul i8 %aaa, %bbb; // %mask = and i8 %mul, C7; // =>; // %mask = i8 ((C1*C2)&C7); // Where C5, C6 describe the known bits of %a, %b; // C1, C2 describe the known bottom bits of %a, %b.; // C7 describes the mask of the known bits of the result.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/KnownBits.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/KnownBits.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/KnownBits.cpp:248,Integrability,Depend,Depending,248,"// The result of the bottom bits of an integer multiply can be; // inferred by looking at the bottom bits of both operands and; // multiplying them together.; // We can infer at least the minimum number of known trailing bits; // of both operands. Depending on number of trailing zeros, we can; // infer more bits, because (a*b) <=> ((a/m) * (b/n)) * (m*n) assuming; // a and b are divisible by m and n respectively.; // We then calculate how many of those bits are inferrable and set; // the output. For example, the i8 mul:; // a = XXXX1100 (12); // b = XXXX1110 (14); // We know the bottom 3 bits are zero since the first can be divided by; // 4 and the second by 2, thus having ((12/4) * (14/2)) * (2*4).; // Applying the multiplication to the trimmed arguments gets:; // XX11 (3); // X111 (7); // -------; // XX11; // XX11; // XX11; // XX11; // -------; // XXXXX01; // Which allows us to infer the 2 LSBs. Since we're multiplying the result; // by 8, the bottom 3 bits will be 0, so we can infer a total of 5 bits.; // The proof for this can be described as:; // Pre: (C1 >= 0) && (C1 < (1 << C5)) && (C2 >= 0) && (C2 < (1 << C6)) &&; // (C7 == (1 << (umin(countTrailingZeros(C1), C5) +; // umin(countTrailingZeros(C2), C6) +; // umin(C5 - umin(countTrailingZeros(C1), C5),; // C6 - umin(countTrailingZeros(C2), C6)))) - 1); // %aa = shl i8 %a, C5; // %bb = shl i8 %b, C6; // %aaa = or i8 %aa, C1; // %bbb = or i8 %bb, C2; // %mul = mul i8 %aaa, %bbb; // %mask = and i8 %mul, C7; // =>; // %mask = i8 ((C1*C2)&C7); // Where C5, C6 describe the known bits of %a, %b; // C1, C2 describe the known bottom bits of %a, %b.; // C7 describes the mask of the known bits of the result.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/KnownBits.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/KnownBits.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/KnownBits.cpp:31,Testability,test,tests,31,"// In the KnownBits exhaustive tests, we have poison inputs for exact values; // a LOT. If we have a conflict, just return all zeros.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/KnownBits.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/KnownBits.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/LineIterator.cpp:44,Usability,simpl,simpler,44,"// If we're not stripping comments, this is simpler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/LineIterator.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/LineIterator.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/LockFileManager.cpp:43,Availability,error,error,43,"// Conservatively assume it's executing on error.; // Check whether the process is dead. If so, we're done.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/LockFileManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/LockFileManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/LockFileManager.cpp:109,Availability,error,error,109,"/// An RAII helper object ensure that the unique lock file is removed.; ///; /// Ensures that if there is an error or a signal before we finish acquiring the; /// lock, the unique file will be removed. And if we successfully take the lock,; /// the signal handler is left in place so that signals while the lock is held; /// will remove the unique lock file. The caller should ensure there is a; /// matching call to sys::DontRemoveFileOnSignal when the lock is released.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/LockFileManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/LockFileManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/LockFileManager.cpp:462,Deployability,release,released,462,"/// An RAII helper object ensure that the unique lock file is removed.; ///; /// Ensures that if there is an error or a signal before we finish acquiring the; /// lock, the unique file will be removed. And if we successfully take the lock,; /// the signal handler is left in place so that signals while the lock is held; /// will remove the unique lock file. The caller should ensure there is a; /// matching call to sys::DontRemoveFileOnSignal when the lock is released.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/LockFileManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/LockFileManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/LockFileManager.cpp:77,Deployability,release,released,77,// Leave the signal handler enabled. It will be removed when the lock is; // released.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/LockFileManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/LockFileManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/LockFileManager.cpp:45,Availability,error,error,45,"// We failed to write out PID, so report the error, remove the; // unique lock file, and fail.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/LockFileManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/LockFileManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/LockFileManager.cpp:50,Deployability,release,releases,50,"// Clean up the unique file on signal, which also releases the lock if it is; // held since the .lock symlink will point to a nonexistent file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/LockFileManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/LockFileManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/LockFileManager.cpp:22,Deployability,release,released,22,// The previous owner released the lock file before we could read it.; // Try to get ownership again.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/LockFileManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/LockFileManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/LockFileManager.cpp:181,Performance,perform,performance,181,"// Since we don't yet have an event-based method to wait for the lock file,; // implement randomized exponential backoff, similar to Ethernet collision; // algorithm. This improves performance on machines with high core counts; // when the file lock is heavily contended by multiple clang processes",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/LockFileManager.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/LockFileManager.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ManagedStatic.cpp:42,Integrability,wrap,wrapper,42,"//===-- ManagedStatic.cpp - Static Global wrapper -------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the ManagedStatic class and llvm_shutdown().; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ManagedStatic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ManagedStatic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ManagedStatic.cpp:61,Modifiability,variab,variables,61,"/// llvm_shutdown - Deallocate and destroy all ManagedStatic variables.; /// IMPORTANT: it's only safe to call llvm_shutdown() in single thread,; /// without any other threads executing LLVM APIs.; /// llvm_shutdown() should be the last use of LLVM APIs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ManagedStatic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ManagedStatic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ManagedStatic.cpp:98,Safety,safe,safe,98,"/// llvm_shutdown - Deallocate and destroy all ManagedStatic variables.; /// IMPORTANT: it's only safe to call llvm_shutdown() in single thread,; /// without any other threads executing LLVM APIs.; /// llvm_shutdown() should be the last use of LLVM APIs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ManagedStatic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ManagedStatic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/MD5.cpp:969,Availability,down,down,969,"/*; * This code is derived from (original license follows):; *; * This is an OpenSSL-compatible implementation of the RSA Data Security, Inc.; * MD5 Message-Digest Algorithm (RFC 1321).; *; * Homepage:; * http://openwall.info/wiki/people/solar/software/public-domain-source-code/md5; *; * Author:; * Alexander Peslyak, better known as Solar Designer <solar at openwall.com>; *; * This software was written by Alexander Peslyak in 2001. No copyright is; * claimed, and the software is hereby placed in the public domain.; * In case this attempt to disclaim copyright and place the software in the; * public domain is deemed null and void, then the software is; * Copyright (c) 2001 Alexander Peslyak and it is hereby released to the; * general public under the following terms:; *; * Redistribution and use in source and binary forms, with or without; * modification, are permitted.; *; * There's ABSOLUTELY NO WARRANTY, express or implied.; *; * (This is a heavily cut-down ""BSD license"".); *; * This differs from Colin Plumb's older public domain implementation in that; * no exactly 32-bit integer data type is required (any 32-bit or wider; * unsigned integer data type will do), there's no compile-time endianness; * configuration, and the function prototypes match OpenSSL's. No code from; * Colin Plumb's implementation has been reused; this comment merely compares; * the properties of the two independent implementations.; *; * The primary goals of this implementation are portability and ease of use.; * It is meant to be fast, but not as fast as possible. Some known; * optimizations are not included to reduce source code size and avoid; * compile-time configuration.; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/MD5.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/MD5.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/MD5.cpp:716,Deployability,release,released,716,"/*; * This code is derived from (original license follows):; *; * This is an OpenSSL-compatible implementation of the RSA Data Security, Inc.; * MD5 Message-Digest Algorithm (RFC 1321).; *; * Homepage:; * http://openwall.info/wiki/people/solar/software/public-domain-source-code/md5; *; * Author:; * Alexander Peslyak, better known as Solar Designer <solar at openwall.com>; *; * This software was written by Alexander Peslyak in 2001. No copyright is; * claimed, and the software is hereby placed in the public domain.; * In case this attempt to disclaim copyright and place the software in the; * public domain is deemed null and void, then the software is; * Copyright (c) 2001 Alexander Peslyak and it is hereby released to the; * general public under the following terms:; *; * Redistribution and use in source and binary forms, with or without; * modification, are permitted.; *; * There's ABSOLUTELY NO WARRANTY, express or implied.; *; * (This is a heavily cut-down ""BSD license"".); *; * This differs from Colin Plumb's older public domain implementation in that; * no exactly 32-bit integer data type is required (any 32-bit or wider; * unsigned integer data type will do), there's no compile-time endianness; * configuration, and the function prototypes match OpenSSL's. No code from; * Colin Plumb's implementation has been reused; this comment merely compares; * the properties of the two independent implementations.; *; * The primary goals of this implementation are portability and ease of use.; * It is meant to be fast, but not as fast as possible. Some known; * optimizations are not included to reduce source code size and avoid; * compile-time configuration.; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/MD5.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/MD5.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/MD5.cpp:1221,Deployability,configurat,configuration,1221,"/*; * This code is derived from (original license follows):; *; * This is an OpenSSL-compatible implementation of the RSA Data Security, Inc.; * MD5 Message-Digest Algorithm (RFC 1321).; *; * Homepage:; * http://openwall.info/wiki/people/solar/software/public-domain-source-code/md5; *; * Author:; * Alexander Peslyak, better known as Solar Designer <solar at openwall.com>; *; * This software was written by Alexander Peslyak in 2001. No copyright is; * claimed, and the software is hereby placed in the public domain.; * In case this attempt to disclaim copyright and place the software in the; * public domain is deemed null and void, then the software is; * Copyright (c) 2001 Alexander Peslyak and it is hereby released to the; * general public under the following terms:; *; * Redistribution and use in source and binary forms, with or without; * modification, are permitted.; *; * There's ABSOLUTELY NO WARRANTY, express or implied.; *; * (This is a heavily cut-down ""BSD license"".); *; * This differs from Colin Plumb's older public domain implementation in that; * no exactly 32-bit integer data type is required (any 32-bit or wider; * unsigned integer data type will do), there's no compile-time endianness; * configuration, and the function prototypes match OpenSSL's. No code from; * Colin Plumb's implementation has been reused; this comment merely compares; * the properties of the two independent implementations.; *; * The primary goals of this implementation are portability and ease of use.; * It is meant to be fast, but not as fast as possible. Some known; * optimizations are not included to reduce source code size and avoid; * compile-time configuration.; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/MD5.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/MD5.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/MD5.cpp:1664,Deployability,configurat,configuration,1664,"/*; * This code is derived from (original license follows):; *; * This is an OpenSSL-compatible implementation of the RSA Data Security, Inc.; * MD5 Message-Digest Algorithm (RFC 1321).; *; * Homepage:; * http://openwall.info/wiki/people/solar/software/public-domain-source-code/md5; *; * Author:; * Alexander Peslyak, better known as Solar Designer <solar at openwall.com>; *; * This software was written by Alexander Peslyak in 2001. No copyright is; * claimed, and the software is hereby placed in the public domain.; * In case this attempt to disclaim copyright and place the software in the; * public domain is deemed null and void, then the software is; * Copyright (c) 2001 Alexander Peslyak and it is hereby released to the; * general public under the following terms:; *; * Redistribution and use in source and binary forms, with or without; * modification, are permitted.; *; * There's ABSOLUTELY NO WARRANTY, express or implied.; *; * (This is a heavily cut-down ""BSD license"".); *; * This differs from Colin Plumb's older public domain implementation in that; * no exactly 32-bit integer data type is required (any 32-bit or wider; * unsigned integer data type will do), there's no compile-time endianness; * configuration, and the function prototypes match OpenSSL's. No code from; * Colin Plumb's implementation has been reused; this comment merely compares; * the properties of the two independent implementations.; *; * The primary goals of this implementation are portability and ease of use.; * It is meant to be fast, but not as fast as possible. Some known; * optimizations are not included to reduce source code size and avoid; * compile-time configuration.; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/MD5.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/MD5.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/MD5.cpp:1614,Energy Efficiency,reduce,reduce,1614,"/*; * This code is derived from (original license follows):; *; * This is an OpenSSL-compatible implementation of the RSA Data Security, Inc.; * MD5 Message-Digest Algorithm (RFC 1321).; *; * Homepage:; * http://openwall.info/wiki/people/solar/software/public-domain-source-code/md5; *; * Author:; * Alexander Peslyak, better known as Solar Designer <solar at openwall.com>; *; * This software was written by Alexander Peslyak in 2001. No copyright is; * claimed, and the software is hereby placed in the public domain.; * In case this attempt to disclaim copyright and place the software in the; * public domain is deemed null and void, then the software is; * Copyright (c) 2001 Alexander Peslyak and it is hereby released to the; * general public under the following terms:; *; * Redistribution and use in source and binary forms, with or without; * modification, are permitted.; *; * There's ABSOLUTELY NO WARRANTY, express or implied.; *; * (This is a heavily cut-down ""BSD license"".); *; * This differs from Colin Plumb's older public domain implementation in that; * no exactly 32-bit integer data type is required (any 32-bit or wider; * unsigned integer data type will do), there's no compile-time endianness; * configuration, and the function prototypes match OpenSSL's. No code from; * Colin Plumb's implementation has been reused; this comment merely compares; * the properties of the two independent implementations.; *; * The primary goals of this implementation are portability and ease of use.; * It is meant to be fast, but not as fast as possible. Some known; * optimizations are not included to reduce source code size and avoid; * compile-time configuration.; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/MD5.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/MD5.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/MD5.cpp:149,Integrability,Message,Message-Digest,149,"/*; * This code is derived from (original license follows):; *; * This is an OpenSSL-compatible implementation of the RSA Data Security, Inc.; * MD5 Message-Digest Algorithm (RFC 1321).; *; * Homepage:; * http://openwall.info/wiki/people/solar/software/public-domain-source-code/md5; *; * Author:; * Alexander Peslyak, better known as Solar Designer <solar at openwall.com>; *; * This software was written by Alexander Peslyak in 2001. No copyright is; * claimed, and the software is hereby placed in the public domain.; * In case this attempt to disclaim copyright and place the software in the; * public domain is deemed null and void, then the software is; * Copyright (c) 2001 Alexander Peslyak and it is hereby released to the; * general public under the following terms:; *; * Redistribution and use in source and binary forms, with or without; * modification, are permitted.; *; * There's ABSOLUTELY NO WARRANTY, express or implied.; *; * (This is a heavily cut-down ""BSD license"".); *; * This differs from Colin Plumb's older public domain implementation in that; * no exactly 32-bit integer data type is required (any 32-bit or wider; * unsigned integer data type will do), there's no compile-time endianness; * configuration, and the function prototypes match OpenSSL's. No code from; * Colin Plumb's implementation has been reused; this comment merely compares; * the properties of the two independent implementations.; *; * The primary goals of this implementation are portability and ease of use.; * It is meant to be fast, but not as fast as possible. Some known; * optimizations are not included to reduce source code size and avoid; * compile-time configuration.; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/MD5.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/MD5.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/MD5.cpp:1221,Modifiability,config,configuration,1221,"/*; * This code is derived from (original license follows):; *; * This is an OpenSSL-compatible implementation of the RSA Data Security, Inc.; * MD5 Message-Digest Algorithm (RFC 1321).; *; * Homepage:; * http://openwall.info/wiki/people/solar/software/public-domain-source-code/md5; *; * Author:; * Alexander Peslyak, better known as Solar Designer <solar at openwall.com>; *; * This software was written by Alexander Peslyak in 2001. No copyright is; * claimed, and the software is hereby placed in the public domain.; * In case this attempt to disclaim copyright and place the software in the; * public domain is deemed null and void, then the software is; * Copyright (c) 2001 Alexander Peslyak and it is hereby released to the; * general public under the following terms:; *; * Redistribution and use in source and binary forms, with or without; * modification, are permitted.; *; * There's ABSOLUTELY NO WARRANTY, express or implied.; *; * (This is a heavily cut-down ""BSD license"".); *; * This differs from Colin Plumb's older public domain implementation in that; * no exactly 32-bit integer data type is required (any 32-bit or wider; * unsigned integer data type will do), there's no compile-time endianness; * configuration, and the function prototypes match OpenSSL's. No code from; * Colin Plumb's implementation has been reused; this comment merely compares; * the properties of the two independent implementations.; *; * The primary goals of this implementation are portability and ease of use.; * It is meant to be fast, but not as fast as possible. Some known; * optimizations are not included to reduce source code size and avoid; * compile-time configuration.; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/MD5.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/MD5.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/MD5.cpp:1481,Modifiability,portab,portability,1481,"/*; * This code is derived from (original license follows):; *; * This is an OpenSSL-compatible implementation of the RSA Data Security, Inc.; * MD5 Message-Digest Algorithm (RFC 1321).; *; * Homepage:; * http://openwall.info/wiki/people/solar/software/public-domain-source-code/md5; *; * Author:; * Alexander Peslyak, better known as Solar Designer <solar at openwall.com>; *; * This software was written by Alexander Peslyak in 2001. No copyright is; * claimed, and the software is hereby placed in the public domain.; * In case this attempt to disclaim copyright and place the software in the; * public domain is deemed null and void, then the software is; * Copyright (c) 2001 Alexander Peslyak and it is hereby released to the; * general public under the following terms:; *; * Redistribution and use in source and binary forms, with or without; * modification, are permitted.; *; * There's ABSOLUTELY NO WARRANTY, express or implied.; *; * (This is a heavily cut-down ""BSD license"".); *; * This differs from Colin Plumb's older public domain implementation in that; * no exactly 32-bit integer data type is required (any 32-bit or wider; * unsigned integer data type will do), there's no compile-time endianness; * configuration, and the function prototypes match OpenSSL's. No code from; * Colin Plumb's implementation has been reused; this comment merely compares; * the properties of the two independent implementations.; *; * The primary goals of this implementation are portability and ease of use.; * It is meant to be fast, but not as fast as possible. Some known; * optimizations are not included to reduce source code size and avoid; * compile-time configuration.; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/MD5.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/MD5.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/MD5.cpp:1664,Modifiability,config,configuration,1664,"/*; * This code is derived from (original license follows):; *; * This is an OpenSSL-compatible implementation of the RSA Data Security, Inc.; * MD5 Message-Digest Algorithm (RFC 1321).; *; * Homepage:; * http://openwall.info/wiki/people/solar/software/public-domain-source-code/md5; *; * Author:; * Alexander Peslyak, better known as Solar Designer <solar at openwall.com>; *; * This software was written by Alexander Peslyak in 2001. No copyright is; * claimed, and the software is hereby placed in the public domain.; * In case this attempt to disclaim copyright and place the software in the; * public domain is deemed null and void, then the software is; * Copyright (c) 2001 Alexander Peslyak and it is hereby released to the; * general public under the following terms:; *; * Redistribution and use in source and binary forms, with or without; * modification, are permitted.; *; * There's ABSOLUTELY NO WARRANTY, express or implied.; *; * (This is a heavily cut-down ""BSD license"".); *; * This differs from Colin Plumb's older public domain implementation in that; * no exactly 32-bit integer data type is required (any 32-bit or wider; * unsigned integer data type will do), there's no compile-time endianness; * configuration, and the function prototypes match OpenSSL's. No code from; * Colin Plumb's implementation has been reused; this comment merely compares; * the properties of the two independent implementations.; *; * The primary goals of this implementation are portability and ease of use.; * It is meant to be fast, but not as fast as possible. Some known; * optimizations are not included to reduce source code size and avoid; * compile-time configuration.; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/MD5.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/MD5.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/MD5.cpp:1580,Performance,optimiz,optimizations,1580,"/*; * This code is derived from (original license follows):; *; * This is an OpenSSL-compatible implementation of the RSA Data Security, Inc.; * MD5 Message-Digest Algorithm (RFC 1321).; *; * Homepage:; * http://openwall.info/wiki/people/solar/software/public-domain-source-code/md5; *; * Author:; * Alexander Peslyak, better known as Solar Designer <solar at openwall.com>; *; * This software was written by Alexander Peslyak in 2001. No copyright is; * claimed, and the software is hereby placed in the public domain.; * In case this attempt to disclaim copyright and place the software in the; * public domain is deemed null and void, then the software is; * Copyright (c) 2001 Alexander Peslyak and it is hereby released to the; * general public under the following terms:; *; * Redistribution and use in source and binary forms, with or without; * modification, are permitted.; *; * There's ABSOLUTELY NO WARRANTY, express or implied.; *; * (This is a heavily cut-down ""BSD license"".); *; * This differs from Colin Plumb's older public domain implementation in that; * no exactly 32-bit integer data type is required (any 32-bit or wider; * unsigned integer data type will do), there's no compile-time endianness; * configuration, and the function prototypes match OpenSSL's. No code from; * Colin Plumb's implementation has been reused; this comment merely compares; * the properties of the two independent implementations.; *; * The primary goals of this implementation are portability and ease of use.; * It is meant to be fast, but not as fast as possible. Some known; * optimizations are not included to reduce source code size and avoid; * compile-time configuration.; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/MD5.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/MD5.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/MD5.cpp:1642,Safety,avoid,avoid,1642,"/*; * This code is derived from (original license follows):; *; * This is an OpenSSL-compatible implementation of the RSA Data Security, Inc.; * MD5 Message-Digest Algorithm (RFC 1321).; *; * Homepage:; * http://openwall.info/wiki/people/solar/software/public-domain-source-code/md5; *; * Author:; * Alexander Peslyak, better known as Solar Designer <solar at openwall.com>; *; * This software was written by Alexander Peslyak in 2001. No copyright is; * claimed, and the software is hereby placed in the public domain.; * In case this attempt to disclaim copyright and place the software in the; * public domain is deemed null and void, then the software is; * Copyright (c) 2001 Alexander Peslyak and it is hereby released to the; * general public under the following terms:; *; * Redistribution and use in source and binary forms, with or without; * modification, are permitted.; *; * There's ABSOLUTELY NO WARRANTY, express or implied.; *; * (This is a heavily cut-down ""BSD license"".); *; * This differs from Colin Plumb's older public domain implementation in that; * no exactly 32-bit integer data type is required (any 32-bit or wider; * unsigned integer data type will do), there's no compile-time endianness; * configuration, and the function prototypes match OpenSSL's. No code from; * Colin Plumb's implementation has been reused; this comment merely compares; * the properties of the two independent implementations.; *; * The primary goals of this implementation are portability and ease of use.; * It is meant to be fast, but not as fast as possible. Some known; * optimizations are not included to reduce source code size and avoid; * compile-time configuration.; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/MD5.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/MD5.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/MD5.cpp:127,Security,Secur,Security,127,"/*; * This code is derived from (original license follows):; *; * This is an OpenSSL-compatible implementation of the RSA Data Security, Inc.; * MD5 Message-Digest Algorithm (RFC 1321).; *; * Homepage:; * http://openwall.info/wiki/people/solar/software/public-domain-source-code/md5; *; * Author:; * Alexander Peslyak, better known as Solar Designer <solar at openwall.com>; *; * This software was written by Alexander Peslyak in 2001. No copyright is; * claimed, and the software is hereby placed in the public domain.; * In case this attempt to disclaim copyright and place the software in the; * public domain is deemed null and void, then the software is; * Copyright (c) 2001 Alexander Peslyak and it is hereby released to the; * general public under the following terms:; *; * Redistribution and use in source and binary forms, with or without; * modification, are permitted.; *; * There's ABSOLUTELY NO WARRANTY, express or implied.; *; * (This is a heavily cut-down ""BSD license"".); *; * This differs from Colin Plumb's older public domain implementation in that; * no exactly 32-bit integer data type is required (any 32-bit or wider; * unsigned integer data type will do), there's no compile-time endianness; * configuration, and the function prototypes match OpenSSL's. No code from; * Colin Plumb's implementation has been reused; this comment merely compares; * the properties of the two independent implementations.; *; * The primary goals of this implementation are portability and ease of use.; * It is meant to be fast, but not as fast as possible. Some known; * optimizations are not included to reduce source code size and avoid; * compile-time configuration.; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/MD5.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/MD5.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/MD5.cpp:44,Performance,optimiz,optimized,44,"// The basic MD5 functions.; // F and G are optimized compared to their RFC 1321 definitions for; // architectures that lack an AND-NOT instruction, just like in Colin Plumb's; // implementation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/MD5.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/MD5.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/MD5.cpp:65,Deployability,update,update,65,"/// This processes one or more 64-byte data blocks, but does NOT update; ///the bit counters. There are no alignment requirements.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/MD5.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/MD5.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/MD5.cpp:50,Security,hash,hash,50,/// Incrementally add the bytes in \p Data to the hash.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/MD5.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/MD5.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/MD5.cpp:49,Security,hash,hash,49,/// Add the bytes in the StringRef \p Str to the hash.; // Note that this isn't a string and so this won't include any trailing NULL; // bytes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/MD5.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/MD5.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/MD5.cpp:15,Security,hash,hash,15,/// Finish the hash and place the resulting hash into \p result.; /// \param Result is assumed to be a minimum of 16-bytes in size.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/MD5.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/MD5.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/MD5.cpp:44,Security,hash,hash,44,/// Finish the hash and place the resulting hash into \p result.; /// \param Result is assumed to be a minimum of 16-bytes in size.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/MD5.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/MD5.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/MemoryBuffer.cpp:421,Integrability,interface,interface,421,"//===--- MemoryBuffer.cpp - Memory Buffer implementation ------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the MemoryBuffer interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/MemoryBuffer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/MemoryBuffer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/MemoryBuffer.cpp:69,Energy Efficiency,allocate,allocated,69,"/// init - Initialize this MemoryBuffer as a reference to externally allocated; /// memory, memory that we know is already null terminated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/MemoryBuffer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/MemoryBuffer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/MemoryBuffer.cpp:77,Energy Efficiency,allocate,allocated,77,"/// Disable sized deallocation for MemoryBufferMem, because it has; /// tail-allocated data.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/MemoryBuffer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/MemoryBuffer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/MemoryBuffer.cpp:82,Energy Efficiency,allocate,allocated,82,"/// Disable sized deallocation for MemoryBufferMMapFile, because it has; /// tail-allocated data.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/MemoryBuffer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/MemoryBuffer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/MemoryBuffer.cpp:3,Energy Efficiency,Allocate,Allocate,3,"// Allocate space for the MemoryBuffer, the data and the name. It is important; // that MemoryBuffer and data are aligned so PointerIntPair works with them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/MemoryBuffer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/MemoryBuffer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/MemoryBuffer.cpp:125,Safety,avoid,avoid,125,"// mmap may leave the buffer without null terminator if the file size changed; // by the time the last page is mapped in, so avoid it if the file size is; // likely to change.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/MemoryBuffer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/MemoryBuffer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/MemoryBuffer.cpp:186,Safety,avoid,avoids,186,"// If we don't know the file size, use fstat to find out. fstat on an open; // file descriptor is cheaper than stat on a random path.; // FIXME: this chunk of code is duplicated, but it avoids a fstat when; // RequiresNullTerminator = false and MapSize != -1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/MemoryBuffer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/MemoryBuffer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/MemoryBuffer.cpp:111,Availability,error,error,111,"// If this not a file or a block device (e.g. it's a named pipe; // or character device), we can't mmap it, so error out.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/MemoryBuffer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/MemoryBuffer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/MemoryBufferRef.cpp:424,Integrability,interface,interface,424,"//===- MemoryBufferRef.cpp - Memory Buffer Reference ----------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the MemoryBufferRef interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/MemoryBufferRef.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/MemoryBufferRef.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp:445,Integrability,interface,interface,445,"//===--- OptimizedStructLayout.cpp - Optimal data layout algorithm ----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the performOptimizedStructLayout interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp:9,Performance,Optimiz,OptimizedStructLayout,9,"//===--- OptimizedStructLayout.cpp - Optimal data layout algorithm ----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the performOptimizedStructLayout interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp:416,Performance,perform,performOptimizedStructLayout,416,"//===--- OptimizedStructLayout.cpp - Optimal data layout algorithm ----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the performOptimizedStructLayout interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp:11,Usability,simpl,simple,11,// Do some simple precondition checks.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp:18,Modifiability,flexible,flexible-offset,18,"// Find the first flexible-offset field, tracking MaxAlign.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp:19,Modifiability,flexible,flexible,19,"// If there are no flexible fields, we're done.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp:17,Modifiability,flexible,flexible-offset,17,"// Walk over the flexible-offset fields, tracking MaxAlign and; // assigning them a unique number in order of their appearance.; // We'll use this unique number in the comparison below so that; // we can use array_pod_sort, which isn't stable. We won't use it; // past that point.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp:12,Modifiability,flexible,flexible,12,"// Sort the flexible elements in order of decreasing alignment,; // then decreasing size, and then the original order as recorded; // in Scratch. The decreasing-size aspect of this is only really; // important if we get into the gap-filling stage below, but it; // doesn't hurt here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp:380,Availability,reliab,reliably,380,"// Do a quick check for whether that sort alone has given us a perfect; // layout with no interior padding. This is very common: if the; // fixed-layout fields have no interior padding, and they end at a; // sufficiently-aligned offset for all the flexible-layout fields,; // and the flexible-layout fields all have sizes that are multiples; // of their alignment, then this will reliably trigger.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp:248,Modifiability,flexible,flexible-layout,248,"// Do a quick check for whether that sort alone has given us a perfect; // layout with no interior padding. This is very common: if the; // fixed-layout fields have no interior padding, and they end at a; // sufficiently-aligned offset for all the flexible-layout fields,; // and the flexible-layout fields all have sizes that are multiples; // of their alignment, then this will reliably trigger.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp:284,Modifiability,flexible,flexible-layout,284,"// Do a quick check for whether that sort alone has given us a perfect; // layout with no interior padding. This is very common: if the; // fixed-layout fields have no interior padding, and they end at a; // sufficiently-aligned offset for all the flexible-layout fields,; // and the flexible-layout fields all have sizes that are multiples; // of their alignment, then this will reliably trigger.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp:12,Modifiability,flexible,flexible-offset,12,"// Walk the flexible-offset fields, optimistically assigning fixed; // offsets. Note that we maintain a strict division between the; // fixed-offset and flexible-offset fields, so if we end up; // discovering padding later in this loop, we can just abandon this; // work and we'll ignore the offsets we already assigned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp:153,Modifiability,flexible,flexible-offset,153,"// Walk the flexible-offset fields, optimistically assigning fixed; // offsets. Note that we maintain a strict division between the; // fixed-offset and flexible-offset fields, so if we end up; // discovering padding later in this loop, we can just abandon this; // work and we'll ignore the offsets we already assigned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp:516,Deployability,update,update,516,"// The algorithm sketch at this point is as follows.; //; // Consider the padding gaps between fixed-offset fields in ascending; // order. Let LastEnd be the offset of the first byte following the; // field before the gap, or 0 if the gap is at the beginning of the; // structure. Find the ""best"" flexible-offset field according to the; // criteria below. If no such field exists, proceed to the next gap.; // Otherwise, add the field at the first properly-aligned offset for; // that field that is >= LastEnd, then update LastEnd and repeat in; // order to fill any remaining gap following that field.; //; // Next, let LastEnd to be the offset of the first byte following the; // last fixed-offset field, or 0 if there are no fixed-offset fields.; // While there are flexible-offset fields remaining, find the ""best""; // flexible-offset field according to the criteria below, add it at; // the first properly-aligned offset for that field that is >= LastEnd,; // and update LastEnd to the first byte following the field.; //; // The ""best"" field is chosen by the following criteria, considered; // strictly in order:; //; // - When filling a gap betweeen fields, the field must fit.; // - A field is preferred if it requires less padding following LastEnd.; // - A field is preferred if it is more aligned.; // - A field is preferred if it is larger.; // - A field is preferred if it appeared earlier in the initial order.; //; // Minimizing leading padding is a greedy attempt to avoid padding; // entirely. Preferring more-aligned fields is an attempt to eliminate; // stricter constraints earlier, with the idea that weaker alignment; // constraints may be resolvable with less padding elsewhere. These; // These two rules are sufficient to ensure that we get the optimal; // layout in the ""C-style"" case. Preferring larger fields tends to take; // better advantage of large gaps and may be more likely to have a size; // that's a multiple of a useful alignment. Preferring the initial; // order ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp:969,Deployability,update,update,969,"// The algorithm sketch at this point is as follows.; //; // Consider the padding gaps between fixed-offset fields in ascending; // order. Let LastEnd be the offset of the first byte following the; // field before the gap, or 0 if the gap is at the beginning of the; // structure. Find the ""best"" flexible-offset field according to the; // criteria below. If no such field exists, proceed to the next gap.; // Otherwise, add the field at the first properly-aligned offset for; // that field that is >= LastEnd, then update LastEnd and repeat in; // order to fill any remaining gap following that field.; //; // Next, let LastEnd to be the offset of the first byte following the; // last fixed-offset field, or 0 if there are no fixed-offset fields.; // While there are flexible-offset fields remaining, find the ""best""; // flexible-offset field according to the criteria below, add it at; // the first properly-aligned offset for that field that is >= LastEnd,; // and update LastEnd to the first byte following the field.; //; // The ""best"" field is chosen by the following criteria, considered; // strictly in order:; //; // - When filling a gap betweeen fields, the field must fit.; // - A field is preferred if it requires less padding following LastEnd.; // - A field is preferred if it is more aligned.; // - A field is preferred if it is larger.; // - A field is preferred if it appeared earlier in the initial order.; //; // Minimizing leading padding is a greedy attempt to avoid padding; // entirely. Preferring more-aligned fields is an attempt to eliminate; // stricter constraints earlier, with the idea that weaker alignment; // constraints may be resolvable with less padding elsewhere. These; // These two rules are sufficient to ensure that we get the optimal; // layout in the ""C-style"" case. Preferring larger fields tends to take; // better advantage of large gaps and may be more likely to have a size; // that's a multiple of a useful alignment. Preferring the initial; // order ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp:2248,Energy Efficiency,efficient,efficiently,2248,"if it requires less padding following LastEnd.; // - A field is preferred if it is more aligned.; // - A field is preferred if it is larger.; // - A field is preferred if it appeared earlier in the initial order.; //; // Minimizing leading padding is a greedy attempt to avoid padding; // entirely. Preferring more-aligned fields is an attempt to eliminate; // stricter constraints earlier, with the idea that weaker alignment; // constraints may be resolvable with less padding elsewhere. These; // These two rules are sufficient to ensure that we get the optimal; // layout in the ""C-style"" case. Preferring larger fields tends to take; // better advantage of large gaps and may be more likely to have a size; // that's a multiple of a useful alignment. Preferring the initial; // order may help somewhat with locality but is mostly just a way of; // ensuring deterministic output.; //; // Note that this algorithm does not guarantee a minimal layout. Picking; // a larger object greedily may leave a gap that cannot be filled as; // efficiently. Unfortunately, solving this perfectly is an NP-complete; // problem (by reduction from bin-packing: let B_i be the bin sizes and; // O_j be the object sizes; add fixed-offset fields such that the gaps; // between them have size B_i, and add flexible-offset fields with; // alignment 1 and size O_j; if the layout size is equal to the end of; // the last fixed-layout field, the objects fit in the bins; note that; // this doesn't even require the complexity of alignment).; // The implementation below is essentially just an optimized version of; // scanning the list of remaining fields looking for the best, which; // would be O(n^2). In the worst case, it doesn't improve on that.; // However, in practice it'll just scan the array of alignment bins; // and consider the first few elements from one or two bins. The; // number of bins is bounded by a small constant: alignments are powers; // of two that are vanishingly unlikely to be over 64 and f",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp:3146,Energy Efficiency,power,powers,3146,"; // layout in the ""C-style"" case. Preferring larger fields tends to take; // better advantage of large gaps and may be more likely to have a size; // that's a multiple of a useful alignment. Preferring the initial; // order may help somewhat with locality but is mostly just a way of; // ensuring deterministic output.; //; // Note that this algorithm does not guarantee a minimal layout. Picking; // a larger object greedily may leave a gap that cannot be filled as; // efficiently. Unfortunately, solving this perfectly is an NP-complete; // problem (by reduction from bin-packing: let B_i be the bin sizes and; // O_j be the object sizes; add fixed-offset fields such that the gaps; // between them have size B_i, and add flexible-offset fields with; // alignment 1 and size O_j; if the layout size is equal to the end of; // the last fixed-layout field, the objects fit in the bins; note that; // this doesn't even require the complexity of alignment).; // The implementation below is essentially just an optimized version of; // scanning the list of remaining fields looking for the best, which; // would be O(n^2). In the worst case, it doesn't improve on that.; // However, in practice it'll just scan the array of alignment bins; // and consider the first few elements from one or two bins. The; // number of bins is bounded by a small constant: alignments are powers; // of two that are vanishingly unlikely to be over 64 and fairly unlikely; // to be over 8. And multiple elements only need to be considered when; // filling a gap between fixed-offset fields, which doesn't happen very; // often. We could use a data structure within bins that optimizes for; // finding the best-sized match, but it would require allocating memory; // and copying data, so it's unlikely to be worthwhile.; // Start by organizing the flexible-offset fields into bins according to; // their alignment. We expect a small enough number of bins that we; // don't care about the asymptotic costs of walking this.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp:297,Modifiability,flexible,flexible-offset,297,"// The algorithm sketch at this point is as follows.; //; // Consider the padding gaps between fixed-offset fields in ascending; // order. Let LastEnd be the offset of the first byte following the; // field before the gap, or 0 if the gap is at the beginning of the; // structure. Find the ""best"" flexible-offset field according to the; // criteria below. If no such field exists, proceed to the next gap.; // Otherwise, add the field at the first properly-aligned offset for; // that field that is >= LastEnd, then update LastEnd and repeat in; // order to fill any remaining gap following that field.; //; // Next, let LastEnd to be the offset of the first byte following the; // last fixed-offset field, or 0 if there are no fixed-offset fields.; // While there are flexible-offset fields remaining, find the ""best""; // flexible-offset field according to the criteria below, add it at; // the first properly-aligned offset for that field that is >= LastEnd,; // and update LastEnd to the first byte following the field.; //; // The ""best"" field is chosen by the following criteria, considered; // strictly in order:; //; // - When filling a gap betweeen fields, the field must fit.; // - A field is preferred if it requires less padding following LastEnd.; // - A field is preferred if it is more aligned.; // - A field is preferred if it is larger.; // - A field is preferred if it appeared earlier in the initial order.; //; // Minimizing leading padding is a greedy attempt to avoid padding; // entirely. Preferring more-aligned fields is an attempt to eliminate; // stricter constraints earlier, with the idea that weaker alignment; // constraints may be resolvable with less padding elsewhere. These; // These two rules are sufficient to ensure that we get the optimal; // layout in the ""C-style"" case. Preferring larger fields tends to take; // better advantage of large gaps and may be more likely to have a size; // that's a multiple of a useful alignment. Preferring the initial; // order ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp:769,Modifiability,flexible,flexible-offset,769,"// The algorithm sketch at this point is as follows.; //; // Consider the padding gaps between fixed-offset fields in ascending; // order. Let LastEnd be the offset of the first byte following the; // field before the gap, or 0 if the gap is at the beginning of the; // structure. Find the ""best"" flexible-offset field according to the; // criteria below. If no such field exists, proceed to the next gap.; // Otherwise, add the field at the first properly-aligned offset for; // that field that is >= LastEnd, then update LastEnd and repeat in; // order to fill any remaining gap following that field.; //; // Next, let LastEnd to be the offset of the first byte following the; // last fixed-offset field, or 0 if there are no fixed-offset fields.; // While there are flexible-offset fields remaining, find the ""best""; // flexible-offset field according to the criteria below, add it at; // the first properly-aligned offset for that field that is >= LastEnd,; // and update LastEnd to the first byte following the field.; //; // The ""best"" field is chosen by the following criteria, considered; // strictly in order:; //; // - When filling a gap betweeen fields, the field must fit.; // - A field is preferred if it requires less padding following LastEnd.; // - A field is preferred if it is more aligned.; // - A field is preferred if it is larger.; // - A field is preferred if it appeared earlier in the initial order.; //; // Minimizing leading padding is a greedy attempt to avoid padding; // entirely. Preferring more-aligned fields is an attempt to eliminate; // stricter constraints earlier, with the idea that weaker alignment; // constraints may be resolvable with less padding elsewhere. These; // These two rules are sufficient to ensure that we get the optimal; // layout in the ""C-style"" case. Preferring larger fields tends to take; // better advantage of large gaps and may be more likely to have a size; // that's a multiple of a useful alignment. Preferring the initial; // order ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp:823,Modifiability,flexible,flexible-offset,823,"// The algorithm sketch at this point is as follows.; //; // Consider the padding gaps between fixed-offset fields in ascending; // order. Let LastEnd be the offset of the first byte following the; // field before the gap, or 0 if the gap is at the beginning of the; // structure. Find the ""best"" flexible-offset field according to the; // criteria below. If no such field exists, proceed to the next gap.; // Otherwise, add the field at the first properly-aligned offset for; // that field that is >= LastEnd, then update LastEnd and repeat in; // order to fill any remaining gap following that field.; //; // Next, let LastEnd to be the offset of the first byte following the; // last fixed-offset field, or 0 if there are no fixed-offset fields.; // While there are flexible-offset fields remaining, find the ""best""; // flexible-offset field according to the criteria below, add it at; // the first properly-aligned offset for that field that is >= LastEnd,; // and update LastEnd to the first byte following the field.; //; // The ""best"" field is chosen by the following criteria, considered; // strictly in order:; //; // - When filling a gap betweeen fields, the field must fit.; // - A field is preferred if it requires less padding following LastEnd.; // - A field is preferred if it is more aligned.; // - A field is preferred if it is larger.; // - A field is preferred if it appeared earlier in the initial order.; //; // Minimizing leading padding is a greedy attempt to avoid padding; // entirely. Preferring more-aligned fields is an attempt to eliminate; // stricter constraints earlier, with the idea that weaker alignment; // constraints may be resolvable with less padding elsewhere. These; // These two rules are sufficient to ensure that we get the optimal; // layout in the ""C-style"" case. Preferring larger fields tends to take; // better advantage of large gaps and may be more likely to have a size; // that's a multiple of a useful alignment. Preferring the initial; // order ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp:2502,Modifiability,flexible,flexible-offset,2502,"; // entirely. Preferring more-aligned fields is an attempt to eliminate; // stricter constraints earlier, with the idea that weaker alignment; // constraints may be resolvable with less padding elsewhere. These; // These two rules are sufficient to ensure that we get the optimal; // layout in the ""C-style"" case. Preferring larger fields tends to take; // better advantage of large gaps and may be more likely to have a size; // that's a multiple of a useful alignment. Preferring the initial; // order may help somewhat with locality but is mostly just a way of; // ensuring deterministic output.; //; // Note that this algorithm does not guarantee a minimal layout. Picking; // a larger object greedily may leave a gap that cannot be filled as; // efficiently. Unfortunately, solving this perfectly is an NP-complete; // problem (by reduction from bin-packing: let B_i be the bin sizes and; // O_j be the object sizes; add fixed-offset fields such that the gaps; // between them have size B_i, and add flexible-offset fields with; // alignment 1 and size O_j; if the layout size is equal to the end of; // the last fixed-layout field, the objects fit in the bins; note that; // this doesn't even require the complexity of alignment).; // The implementation below is essentially just an optimized version of; // scanning the list of remaining fields looking for the best, which; // would be O(n^2). In the worst case, it doesn't improve on that.; // However, in practice it'll just scan the array of alignment bins; // and consider the first few elements from one or two bins. The; // number of bins is bounded by a small constant: alignments are powers; // of two that are vanishingly unlikely to be over 64 and fairly unlikely; // to be over 8. And multiple elements only need to be considered when; // filling a gap between fixed-offset fields, which doesn't happen very; // often. We could use a data structure within bins that optimizes for; // finding the best-sized match, but it would requi",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp:3603,Modifiability,flexible,flexible-offset,3603,"; // layout in the ""C-style"" case. Preferring larger fields tends to take; // better advantage of large gaps and may be more likely to have a size; // that's a multiple of a useful alignment. Preferring the initial; // order may help somewhat with locality but is mostly just a way of; // ensuring deterministic output.; //; // Note that this algorithm does not guarantee a minimal layout. Picking; // a larger object greedily may leave a gap that cannot be filled as; // efficiently. Unfortunately, solving this perfectly is an NP-complete; // problem (by reduction from bin-packing: let B_i be the bin sizes and; // O_j be the object sizes; add fixed-offset fields such that the gaps; // between them have size B_i, and add flexible-offset fields with; // alignment 1 and size O_j; if the layout size is equal to the end of; // the last fixed-layout field, the objects fit in the bins; note that; // this doesn't even require the complexity of alignment).; // The implementation below is essentially just an optimized version of; // scanning the list of remaining fields looking for the best, which; // would be O(n^2). In the worst case, it doesn't improve on that.; // However, in practice it'll just scan the array of alignment bins; // and consider the first few elements from one or two bins. The; // number of bins is bounded by a small constant: alignments are powers; // of two that are vanishingly unlikely to be over 64 and fairly unlikely; // to be over 8. And multiple elements only need to be considered when; // filling a gap between fixed-offset fields, which doesn't happen very; // often. We could use a data structure within bins that optimizes for; // finding the best-sized match, but it would require allocating memory; // and copying data, so it's unlikely to be worthwhile.; // Start by organizing the flexible-offset fields into bins according to; // their alignment. We expect a small enough number of bins that we; // don't care about the asymptotic costs of walking this.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp:2786,Performance,optimiz,optimized,2786,"; // layout in the ""C-style"" case. Preferring larger fields tends to take; // better advantage of large gaps and may be more likely to have a size; // that's a multiple of a useful alignment. Preferring the initial; // order may help somewhat with locality but is mostly just a way of; // ensuring deterministic output.; //; // Note that this algorithm does not guarantee a minimal layout. Picking; // a larger object greedily may leave a gap that cannot be filled as; // efficiently. Unfortunately, solving this perfectly is an NP-complete; // problem (by reduction from bin-packing: let B_i be the bin sizes and; // O_j be the object sizes; add fixed-offset fields such that the gaps; // between them have size B_i, and add flexible-offset fields with; // alignment 1 and size O_j; if the layout size is equal to the end of; // the last fixed-layout field, the objects fit in the bins; note that; // this doesn't even require the complexity of alignment).; // The implementation below is essentially just an optimized version of; // scanning the list of remaining fields looking for the best, which; // would be O(n^2). In the worst case, it doesn't improve on that.; // However, in practice it'll just scan the array of alignment bins; // and consider the first few elements from one or two bins. The; // number of bins is bounded by a small constant: alignments are powers; // of two that are vanishingly unlikely to be over 64 and fairly unlikely; // to be over 8. And multiple elements only need to be considered when; // filling a gap between fixed-offset fields, which doesn't happen very; // often. We could use a data structure within bins that optimizes for; // finding the best-sized match, but it would require allocating memory; // and copying data, so it's unlikely to be worthwhile.; // Start by organizing the flexible-offset fields into bins according to; // their alignment. We expect a small enough number of bins that we; // don't care about the asymptotic costs of walking this.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp:3431,Performance,optimiz,optimizes,3431,"; // layout in the ""C-style"" case. Preferring larger fields tends to take; // better advantage of large gaps and may be more likely to have a size; // that's a multiple of a useful alignment. Preferring the initial; // order may help somewhat with locality but is mostly just a way of; // ensuring deterministic output.; //; // Note that this algorithm does not guarantee a minimal layout. Picking; // a larger object greedily may leave a gap that cannot be filled as; // efficiently. Unfortunately, solving this perfectly is an NP-complete; // problem (by reduction from bin-packing: let B_i be the bin sizes and; // O_j be the object sizes; add fixed-offset fields such that the gaps; // between them have size B_i, and add flexible-offset fields with; // alignment 1 and size O_j; if the layout size is equal to the end of; // the last fixed-layout field, the objects fit in the bins; note that; // this doesn't even require the complexity of alignment).; // The implementation below is essentially just an optimized version of; // scanning the list of remaining fields looking for the best, which; // would be O(n^2). In the worst case, it doesn't improve on that.; // However, in practice it'll just scan the array of alignment bins; // and consider the first few elements from one or two bins. The; // number of bins is bounded by a small constant: alignments are powers; // of two that are vanishingly unlikely to be over 64 and fairly unlikely; // to be over 8. And multiple elements only need to be considered when; // filling a gap between fixed-offset fields, which doesn't happen very; // often. We could use a data structure within bins that optimizes for; // finding the best-sized match, but it would require allocating memory; // and copying data, so it's unlikely to be worthwhile.; // Start by organizing the flexible-offset fields into bins according to; // their alignment. We expect a small enough number of bins that we; // don't care about the asymptotic costs of walking this.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp:1483,Safety,avoid,avoid,1483,"fset for; // that field that is >= LastEnd, then update LastEnd and repeat in; // order to fill any remaining gap following that field.; //; // Next, let LastEnd to be the offset of the first byte following the; // last fixed-offset field, or 0 if there are no fixed-offset fields.; // While there are flexible-offset fields remaining, find the ""best""; // flexible-offset field according to the criteria below, add it at; // the first properly-aligned offset for that field that is >= LastEnd,; // and update LastEnd to the first byte following the field.; //; // The ""best"" field is chosen by the following criteria, considered; // strictly in order:; //; // - When filling a gap betweeen fields, the field must fit.; // - A field is preferred if it requires less padding following LastEnd.; // - A field is preferred if it is more aligned.; // - A field is preferred if it is larger.; // - A field is preferred if it appeared earlier in the initial order.; //; // Minimizing leading padding is a greedy attempt to avoid padding; // entirely. Preferring more-aligned fields is an attempt to eliminate; // stricter constraints earlier, with the idea that weaker alignment; // constraints may be resolvable with less padding elsewhere. These; // These two rules are sufficient to ensure that we get the optimal; // layout in the ""C-style"" case. Preferring larger fields tends to take; // better advantage of large gaps and may be more likely to have a size; // that's a multiple of a useful alignment. Preferring the initial; // order may help somewhat with locality but is mostly just a way of; // ensuring deterministic output.; //; // Note that this algorithm does not guarantee a minimal layout. Picking; // a larger object greedily may leave a gap that cannot be filled as; // efficiently. Unfortunately, solving this perfectly is an NP-complete; // problem (by reduction from bin-packing: let B_i be the bin sizes and; // O_j be the object sizes; add fixed-offset fields such that the gaps; // b",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp:51,Performance,queue,queue,51,/// The minimum size of anything currently in this queue.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp:20,Performance,queue,queue,20,"/// The head of the queue. A singly-linked list. The order here should; /// be consistent with the earlier sort, i.e. the elements should be; /// monotonically descending in size and otherwise in the original order.; ///; /// We remove the queue from the array as soon as this is empty.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp:240,Performance,queue,queue,240,"/// The head of the queue. A singly-linked list. The order here should; /// be consistent with the earlier sort, i.e. the elements should be; /// monotonically descending in size and otherwise in the original order.; ///; /// We remove the queue from the array as soon as this is empty.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp:37,Performance,queue,queue,37,/// The alignment requirement of the queue.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp:26,Performance,queue,queues,26,// Verify that we set the queues up correctly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp:45,Performance,queue,queue,45,/// Helper function to remove a field from a queue.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp:53,Deployability,update,update,53,"// If Cur was the last field in the list, we need to update MinSize.; // We can just use the last field's size because the list is in; // descending order of size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp:26,Performance,queue,queue,26,"// If we just emptied the queue, destroy its bin.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp:50,Performance,queue,queue,50,// Helper function to splice Cur out of the given queue and add it; // to the layout at the given offset.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp:44,Performance,Queue,Queue,44,// Splice out. This potentially invalidates Queue.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp:55,Performance,queue,queue,55,// Helper function to try to find a field in the given queue that'll; // fit starting at StartOffset but before EndOffset (if present).; // Note that this never fails if EndOffset is not provided.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp:72,Performance,queue,queue,72,"// Figure out the maximum size that a field can be, and ignore this; // queue if there's nothing in it that small.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp:38,Modifiability,flexible,flexible-offset,38,"// Helper function to find the ""best"" flexible-offset field according; // to the criteria described above.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp:41,Performance,queue,queue,41,// Start by looking for the most-aligned queue that doesn't need any; // leading padding after LastEnd.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp:25,Performance,queue,queues,25,"// Invariant: all of the queues in [FirstQueueToSearch, QueueE); // require the same initial padding offset.; // Search those queues in descending order of alignment for a; // satisfactory field.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp:56,Performance,Queue,QueueE,56,"// Invariant: all of the queues in [FirstQueueToSearch, QueueE); // require the same initial padding offset.; // Search those queues in descending order of alignment for a; // satisfactory field.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp:126,Performance,queue,queues,126,"// Invariant: all of the queues in [FirstQueueToSearch, QueueE); // require the same initial padding offset.; // Search those queues in descending order of alignment for a; // satisfactory field.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp:32,Performance,queue,queue,32,"// If we started from the first queue, we're done.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp:54,Performance,queue,queue,54,"// Otherwise, scan backwards to find the most-aligned queue that; // still has minimal leading padding after LastEnd. If that; // minimal padding is already at or past the end point, we're done.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp:72,Modifiability,flexible,flexible-offset,72,// Phase 1: fill the gaps between fixed-offset fields with the best; // flexible-offset field that fits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp:36,Modifiability,flexible,flexible-offset,36,// Phase 2: repeatedly add the best flexible-offset field until; // they're all gone.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/OptimizedStructLayout.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Parallel.cpp:48,Safety,avoid,avoid,48,// Use operator[] before creating the thread to avoid data race in .size(); // in “safe libc++” mode.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Parallel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Parallel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Parallel.cpp:83,Safety,safe,safe,83,// Use operator[] before creating the thread to avoid data race in .size(); // in “safe libc++” mode.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Parallel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Parallel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Parallel.cpp:400,Performance,race condition,race condition,400,"// The ManagedStatic enables the ThreadPoolExecutor to be stopped via; // llvm_shutdown() which allows a ""clean"" fast exit, e.g. via _exit(). This; // stops the thread pool and waits for any worker thread creation to complete; // but does not wait for the threads to finish. The wait for worker thread; // creation to complete is important as it prevents intermittent crashes on; // Windows due to a race condition between thread creation and process exit.; //; // The ThreadPoolExecutor will only be destroyed when the static unique_ptr to; // it is destroyed, i.e. in a normal full exit. The ThreadPoolExecutor; // destructor ensures it has been stopped and waits for worker threads to; // finish. The wait is important as it prevents intermittent crashes on; // Windows when the process is doing a full exit.; //; // The Windows crashes appear to only occur with the MSVC static runtimes and; // are more frequent with the debug static runtime.; //; // This also prevents intermittent deadlocks on exit with the MinGW runtime.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Parallel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Parallel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Parallel.cpp:62,Energy Efficiency,schedul,scheduling,62,// Limit the number of tasks to MaxTasksPerGroup to limit job scheduling; // overhead on large inputs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Parallel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Parallel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Path.cpp:41,Usability,simpl,simply,41,// If prefixes have the same size we can simply copy the new one over.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Path.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Path.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Path.cpp:3,Usability,Clear,Clear,3,// Clear result.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Path.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Path.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Path.cpp:63,Safety,detect,detect,63,// Loop over path components manually. This makes it easier to detect; // non-preferred slashes and double separators that must be canonicalized.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Path.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Path.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Path.cpp:3,Safety,Avoid,Avoid,3,// Avoid rewriting the path unless we have to.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Path.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Path.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Path.cpp:30,Performance,race condition,race conditions,30,// FD is only needed to avoid race conditions. Close it right away.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Path.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Path.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Path.cpp:24,Safety,avoid,avoid,24,// FD is only needed to avoid race conditions. Close it right away.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Path.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Path.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Path.cpp:30,Performance,race condition,race conditions,30,// FD is only needed to avoid race conditions. Close it right away.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Path.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Path.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Path.cpp:24,Safety,avoid,avoid,24,// FD is only needed to avoid race conditions. Close it right away.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Path.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Path.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Path.cpp:31,Availability,error,error,31,"// If we succeeded, or had any error other than the parent not existing, just; // return it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Path.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Path.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Path.cpp:3,Deployability,Install,Install,3,// Install a handler to truncate the buffer to the correct size on exit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Path.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Path.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/PGOOptions.cpp:10,Performance,optimiz,optimize,10,// Cannot optimize with MemProf profile during IR instrumentation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/PGOOptions.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/PGOOptions.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/PluginLoader.cpp:8,Modifiability,Plugin,PluginLoader,8,"//===-- PluginLoader.cpp - Implement -load command line option ------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the -load <plugin> command line option handler.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/PluginLoader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/PluginLoader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/PluginLoader.cpp:415,Modifiability,plugin,plugin,415,"//===-- PluginLoader.cpp - Implement -load command line option ------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the -load <plugin> command line option handler.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/PluginLoader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/PluginLoader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/PluginLoader.cpp:38,Performance,load,load,38,"//===-- PluginLoader.cpp - Implement -load command line option ------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the -load <plugin> command line option handler.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/PluginLoader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/PluginLoader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/PluginLoader.cpp:409,Performance,load,load,409,"//===-- PluginLoader.cpp - Implement -load command line option ------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the -load <plugin> command line option handler.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/PluginLoader.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/PluginLoader.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/PrettyStackTrace.cpp:44,Safety,avoid,avoid,44,"// Print out the stack in reverse order. To avoid recursion (which is likely; // to fail if we crashed due to stack overflow), we do an up-front pass to; // reverse the stack, then print it, then reverse it again.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/PrettyStackTrace.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/PrettyStackTrace.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/PrettyStackTrace.cpp:126,Integrability,message,message,126,// Don't reorder subsequent operations: whatever comes after might crash and; // we want the system crash handling to see the message we just set.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/PrettyStackTrace.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/PrettyStackTrace.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/PrettyStackTrace.cpp:199,Energy Efficiency,allocate,allocate,199,"// Emit the crash stack trace to a SmallString, put it where the system crash; // handling will find it, and also send it to stderr.; //; // The SmallString is fairly large in the hope that we don't allocate (we're; // handling a fatal signal, something is already pretty wrong, allocation; // might not work). Further, we don't use a magic static in case that's also; // borked. We leak any allocation that does occur because the program is about; // to die anyways. This is technically racy if we were handling two fatal; // signals, however if we're in that situation a race is the least of our; // worries.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/PrettyStackTrace.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/PrettyStackTrace.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/PrettyStackTrace.cpp:188,Energy Efficiency,allocate,allocate,188,"// If we crash while trying to print the stack trace, we still want the system; // crash handling to have some partial information. That'll work out as long; // as the SmallString doesn't allocate. If it does allocate then the system; // crash handling will see some garbage because the inline buffer now contains; // a pointer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/PrettyStackTrace.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/PrettyStackTrace.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/PrettyStackTrace.cpp:209,Energy Efficiency,allocate,allocate,209,"// If we crash while trying to print the stack trace, we still want the system; // crash handling to have some partial information. That'll work out as long; // as the SmallString doesn't allocate. If it does allocate then the system; // crash handling will see some garbage because the inline buffer now contains; // a pointer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/PrettyStackTrace.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/PrettyStackTrace.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/RandomNumberGenerator.cpp:506,Security,secur,secure,506,"//===-- RandomNumberGenerator.cpp - Implement RNG class -------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements deterministic random number generation (RNG).; // The current implementation is NOT cryptographically secure as it uses; // the C++11 <random> facilities.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/RandomNumberGenerator.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/RandomNumberGenerator.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp:111,Performance,perform,performance,111,// On Windows BUFSIZ is only 512 which results in more calls to write. This; // overhead can cause significant performance degradation. Therefore use a; // better default.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp:105,Testability,log,logic,105,// Make sure the current buffer is free of content (we can't flush here; the; // child buffer management logic will be in write_impl).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp:337,Performance,optimiz,optimization,337,"// Do not attempt to close stdout or stderr. We used to try to maintain the; // property that tools that support writing file to stdout should not also; // write informational output to stdout, but in practice we were never able to; // maintain this invariant. Many features have been added to LLVM and clang; // (-fdump-record-layouts, optimization remarks, etc) that print to stdout, so; // users must simply be aware that mixed output and remarks is a possibility.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp:404,Usability,simpl,simply,404,"// Do not attempt to close stdout or stderr. We used to try to maintain the; // property that tools that support writing file to stdout should not also; // write informational output to stdout, but in practice we were never able to; // maintain this invariant. Many features have been added to LLVM and clang; // (-fdump-record-layouts, optimization remarks, etc) that print to stdout, so; // users must simply be aware that mixed output and remarks is a possibility.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp:168,Availability,error,errors,168,"// On mingw, global dtors should not call exit().; // report_fatal_error() invokes exit(). We know report_fatal_error(); // might not write messages to stderr when any errors were detected; // on FD == 2.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp:140,Integrability,message,messages,140,"// On mingw, global dtors should not call exit().; // report_fatal_error() invokes exit(). We know report_fatal_error(); // might not write messages to stderr when any errors were detected; // on FD == 2.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp:180,Safety,detect,detected,180,"// On mingw, global dtors should not call exit().; // report_fatal_error() invokes exit(). We know report_fatal_error(); // might not write messages to stderr when any errors were detected; // on FD == 2.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp:28,Availability,error,errors,28,"// If there are any pending errors, report them now. Clients wishing; // to avoid report_fatal_error calls should check for errors with; // has_error() and clear the error flag with clear_error() before; // destructing raw_ostream objects which may have errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp:124,Availability,error,errors,124,"// If there are any pending errors, report them now. Clients wishing; // to avoid report_fatal_error calls should check for errors with; // has_error() and clear the error flag with clear_error() before; // destructing raw_ostream objects which may have errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp:166,Availability,error,error,166,"// If there are any pending errors, report them now. Clients wishing; // to avoid report_fatal_error calls should check for errors with; // has_error() and clear the error flag with clear_error() before; // destructing raw_ostream objects which may have errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp:254,Availability,error,errors,254,"// If there are any pending errors, report them now. Clients wishing; // to avoid report_fatal_error calls should check for errors with; // has_error() and clear the error flag with clear_error() before; // destructing raw_ostream objects which may have errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp:76,Safety,avoid,avoid,76,"// If there are any pending errors, report them now. Clients wishing; // to avoid report_fatal_error calls should check for errors with; // has_error() and clear the error flag with clear_error() before; // destructing raw_ostream objects which may have errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp:156,Usability,clear,clear,156,"// If there are any pending errors, report them now. Clients wishing; // to avoid report_fatal_error calls should check for errors with; // has_error() and clear the error flag with clear_error() before; // destructing raw_ostream objects which may have errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp:12,Availability,reliab,reliable,12,"// The most reliable way to print unicode in a Windows console is with; // WriteConsoleW. To use that, first transcode from UTF-8 to UTF-16. This; // assumes that LLVM programs always print valid UTF-8 to the console. The data; // might not be UTF-8 for two major reasons:; // 1. The program is printing binary (-filetype=obj -o -), in which case it; // would have been gibberish anyway.; // 2. The program is printing text in a semi-ascii compatible codepage like; // shift-jis or cp1252.; //; // Most LLVM programs don't produce non-ascii text unless they are quoting; // user source input. A well-behaved LLVM program should either validate that; // the input is UTF-8 or transcode from the local codepage to UTF-8 before; // quoting it. If they don't, this may mess up the encoding, but this is still; // probably the best compromise we can make.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp:635,Security,validat,validate,635,"// The most reliable way to print unicode in a Windows console is with; // WriteConsoleW. To use that, first transcode from UTF-8 to UTF-16. This; // assumes that LLVM programs always print valid UTF-8 to the console. The data; // might not be UTF-8 for two major reasons:; // 1. The program is printing binary (-filetype=obj -o -), in which case it; // would have been gibberish anyway.; // 2. The program is printing text in a semi-ascii compatible codepage like; // shift-jis or cp1252.; //; // Most LLVM programs don't produce non-ascii text unless they are quoting; // user source input. A well-behaved LLVM program should either validate that; // the input is UTF-8 or transcode from the local codepage to UTF-8 before; // quoting it. If they don't, this may mess up the encoding, but this is still; // probably the best compromise we can make.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp:13,Availability,recover,recoverable,13,"// If it's a recoverable error, swallow it and retry the write.; //; // Ideally we wouldn't ever see EAGAIN or EWOULDBLOCK here, since; // raw_ostream isn't designed to do non-blocking I/O. However, some; // programs, such as old versions of bjam, have mistakenly used; // O_NONBLOCK. For compatibility, emulate blocking semantics by; // spinning until the write succeeds. If you don't want spinning,; // don't use O_NONBLOCK file descriptors with raw_ostream.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp:25,Availability,error,error,25,"// If it's a recoverable error, swallow it and retry the write.; //; // Ideally we wouldn't ever see EAGAIN or EWOULDBLOCK here, since; // raw_ostream isn't designed to do non-blocking I/O. However, some; // programs, such as old versions of bjam, have mistakenly used; // O_NONBLOCK. For compatibility, emulate blocking semantics by; // spinning until the write succeeds. If you don't want spinning,; // don't use O_NONBLOCK file descriptors with raw_ostream.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp:13,Safety,recover,recoverable,13,"// If it's a recoverable error, swallow it and retry the write.; //; // Ideally we wouldn't ever see EAGAIN or EWOULDBLOCK here, since; // raw_ostream isn't designed to do non-blocking I/O. However, some; // programs, such as old versions of bjam, have mistakenly used; // O_NONBLOCK. For compatibility, emulate blocking semantics by; // spinning until the write succeeds. If you don't want spinning,; // don't use O_NONBLOCK file descriptors with raw_ostream.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp:24,Availability,recover,recoverable,24,// Otherwise it's a non-recoverable error. Note it and quit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp:36,Availability,error,error,36,// Otherwise it's a non-recoverable error. Note it and quit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp:24,Safety,recover,recoverable,24,// Otherwise it's a non-recoverable error. Note it and quit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp:55,Deployability,Update,Update,55,"// The write may have written some or all of the data. Update the; // size and buffer pointer to reflect the remainder that needs; // to be written. If there are no bytes left, we're done.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp:299,Safety,avoid,avoid,299,"// Disable buffering for console devices. Console output is re-encoded from; // UTF-8 to UTF-16 on Windows, and buffering it would require us to split the; // buffer on a valid UTF-8 codepoint boundary. Terminal buffering is disabled; // below on most other OSs, so do the same thing on Windows and avoid that; // complexity.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp:16,Availability,error,error,16,// Set standard error to be unbuffered and tied to outs() by default.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp:16,Testability,assert,asserts,16,"// ~raw_ostream asserts that the buffer is empty. This isn't necessary; // with raw_null_ostream, but it's better to have raw_null_ostream follow; // the rules than to change the rules just for raw_null_ostream.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_ostream.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_os_ostream.cpp:407,Energy Efficiency,adapt,adapting,407,"//===--- raw_os_ostream.cpp - Implement the raw_os_ostream class ----------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This implements support adapting raw_ostream to std::ostream.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/raw_os_ostream.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_os_ostream.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_os_ostream.cpp:407,Modifiability,adapt,adapting,407,"//===--- raw_os_ostream.cpp - Implement the raw_os_ostream class ----------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This implements support adapting raw_ostream to std::ostream.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/raw_os_ostream.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_os_ostream.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_socket_stream.cpp:91,Availability,error,error,91,// winsock2.h must be included before afunix.h. Briefly turn off clang-format to; // avoid error.; // clang-format off,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/raw_socket_stream.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_socket_stream.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_socket_stream.cpp:85,Safety,avoid,avoid,85,// winsock2.h must be included before afunix.h. Briefly turn off clang-format to; // avoid error.; // clang-format off,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/raw_socket_stream.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/raw_socket_stream.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c:1611,Integrability,CONTRACT,CONTRACT,1611,"/*-; * This code is derived from OpenBSD's libc/regex, original license follows:; *; * Copyright (c) 1992, 1993, 1994 Henry Spencer.; * Copyright (c) 1992, 1993, 1994; *	The Regents of the University of California. All rights reserved.; *; * This code is derived from software contributed to Berkeley by; * Henry Spencer.; *; * Redistribution and use in source and binary forms, with or without; * modification, are permitted provided that the following conditions; * are met:; * 1. Redistributions of source code must retain the above copyright; * notice, this list of conditions and the following disclaimer.; * 2. Redistributions in binary form must reproduce the above copyright; * notice, this list of conditions and the following disclaimer in the; * documentation and/or other materials provided with the distribution.; * 3. Neither the name of the University nor the names of its contributors; * may be used to endorse or promote products derived from this software; * without specific prior written permission.; *; * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND; * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE; * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE; * ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE; * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL; * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS; * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION); * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT; * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY; * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF; * SUCH DAMAGE.; *; *	@(#)regcomp.c	8.5 (Berkeley) 3/20/94; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regcomp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c:37,Availability,down,down,37,"/*; * parse structure, passed up and down to avoid global variables and; * other clumsinesses; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regcomp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c:58,Modifiability,variab,variables,58,"/*; * parse structure, passed up and down to avoid global variables and; * other clumsinesses; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regcomp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c:45,Safety,avoid,avoid,45,"/*; * parse structure, passed up and down to avoid global variables and; * other clumsinesses; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regcomp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c:10,Availability,error,error,10,/* has an error been seen? */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regcomp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c:24,Energy Efficiency,allocate,allocated,24,/* malloced strip size (allocated) */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regcomp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c:19,Energy Efficiency,allocate,allocated,19,/* number of csets allocated */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regcomp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c:38,Availability,error,error,38,/* place to point scanner in event of error */; /*; * macros for use with parse structure; * BEWARE: these know that the parse structure is named `p' !!!; */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regcomp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c:14,Testability,assert,asserts,14,/* for use in asserts; shuts lint up */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regcomp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c:9,Testability,assert,assert,9,/* some <assert.h>s have bugs too */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regcomp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c:21,Integrability,interface,interface,21,/*; - llvm_regcomp - interface for parser and compilation; */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regcomp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c:27,Availability,failure,failure,27,/* do the mallocs early so failure handling is easy */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regcomp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c:39,Testability,assert,assert,39,"/* not debugging, so can't rely on the assert() in llvm_regexec() */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regcomp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c:19,Usability,simpl,simply,19,/* Other chars are simply themselves when escaped with a backslash.; 			 */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regcomp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c:3,Availability,error,error,3,/* error heuristics */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regcomp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c:460,Safety,avoid,avoid,460,"/*; - p_bre - BRE parser top level, anchoring and concatenation; * Giving end1 as OUT essentially eliminates the end1/end2 check.; *; * This implementation is a bit of a kludge, in that a trailing $ is first; * taken as an ordinary character and then revised to be an anchor. The; * only undesirable side effect is that '$' gets included as a character; * category in such cases. This is fairly harmless; not worth fixing.; * The amount of lookahead needed to avoid this kludge is excessive.; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regcomp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c:26,Usability,simpl,simple,26,"/*; - p_simp_re - parse a simple RE, an atom possibly followed by a repetition; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regcomp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c:11,Usability,simpl,simple,11,/* was the simple RE an unbackslashed $? */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regcomp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c:23,Availability,error,error,23,/* the MORE here is an error heuristic */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regcomp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c:3,Availability,error,error,3,/* error heuristics */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regcomp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c:20,Availability,error,error,20,/* allocset did set error status in p */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regcomp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c:3,Performance,optimiz,optimize,3,/* optimize singleton sets */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regcomp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c:22,Availability,error,error,22,/*; - seterr - set an error condition; */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regcomp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c:17,Availability,error,error,17,/* keep earliest error condition */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regcomp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c:17,Energy Efficiency,allocate,allocate,17,/*; - allocset - allocate a set of characters for []; */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regcomp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c:3,Availability,recover,recover,3,/* recover only the easy case */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regcomp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c:3,Safety,recover,recover,3,/* recover only the easy case */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regcomp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c:159,Security,hash,hash,159,"/*; - freezeset - final processing on a set of characters; *; * The main task here is merging identical sets. This is usually a waste; * of time (although the hash code minimizes the overhead), but can win; * big if REG_ICASE is being used. REG_ICASE, by the way, is why the hash; * is done using addition rather than xor -- all ASCII [aA] sets xor to; * the same value!; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regcomp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c:275,Security,hash,hash,275,"/*; - freezeset - final processing on a set of characters; *; * The main task here is merging identical sets. This is usually a waste; * of time (although the hash code minimizes the overhead), but can win; * big if REG_ICASE is being used. REG_ICASE, by the way, is why the hash; * is done using addition rather than xor -- all ASCII [aA] sets xor to; * the same value!; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regcomp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c:16,Availability,error,error,16,/* avoid making error situations worse */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regcomp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c:3,Safety,avoid,avoid,3,/* avoid making error situations worse */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regcomp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c:16,Availability,error,error,16,/* avoid making error situations worse */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regcomp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c:3,Safety,avoid,avoid,3,/* avoid making error situations worse */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regcomp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c:21,Energy Efficiency,reduce,reduced,21,"/* finally, it's all reduced to the easy case */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regcomp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c:16,Availability,error,error,16,/* avoid making error situations worse */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regcomp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c:3,Safety,avoid,avoid,3,/* avoid making error situations worse */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regcomp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c:16,Availability,error,error,16,/* avoid making error situations worse */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regcomp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c:3,Safety,avoid,avoid,3,/* avoid making error situations worse */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regcomp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c:203,Usability,simpl,simple,203,/*; - findmust - fill in must and mlen with longest mandatory literal string; *; * This algorithm could do fancy things like analyzing the operands of |; * for common subsequences. Someday. This code is simple and finds most; * of the interesting cases.; *; * Note that must and mlen got initialized during setup.; */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regcomp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c:16,Availability,error,error,16,/* avoid making error situations worse */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regcomp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c:3,Safety,avoid,avoid,3,/* avoid making error situations worse */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regcomp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c:3,Testability,assert,assert,3,/* assert() interferes w debug printouts */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regcomp.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regcomp.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regerror.c:1611,Integrability,CONTRACT,CONTRACT,1611,"/*-; * This code is derived from OpenBSD's libc/regex, original license follows:; *; * Copyright (c) 1992, 1993, 1994 Henry Spencer.; * Copyright (c) 1992, 1993, 1994; *	The Regents of the University of California. All rights reserved.; *; * This code is derived from software contributed to Berkeley by; * Henry Spencer.; *; * Redistribution and use in source and binary forms, with or without; * modification, are permitted provided that the following conditions; * are met:; * 1. Redistributions of source code must retain the above copyright; * notice, this list of conditions and the following disclaimer.; * 2. Redistributions in binary form must reproduce the above copyright; * notice, this list of conditions and the following disclaimer in the; * documentation and/or other materials provided with the distribution.; * 3. Neither the name of the University nor the names of its contributors; * may be used to endorse or promote products derived from this software; * without specific prior written permission.; *; * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND; * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE; * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE; * ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE; * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL; * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS; * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION); * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT; * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY; * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF; * SUCH DAMAGE.; *; *	@(#)regerror.c	8.4 (Berkeley) 3/20/94; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regerror.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regerror.c:39,Availability,error,error,39,"/*; - llvm_regerror - the interface to error numbers; = extern size_t llvm_regerror(int, const llvm_regex_t *, char *, size_t);; */; /* ARGSUSED */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regerror.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regerror.c:26,Integrability,interface,interface,26,"/*; - llvm_regerror - the interface to error numbers; = extern size_t llvm_regerror(int, const llvm_regex_t *, char *, size_t);; */; /* ARGSUSED */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regerror.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regerror.c:25,Integrability,rout,routine,25,/*; - regatoi - internal routine to implement REG_ATOI; */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regerror.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regerror.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Regex.cpp:31,Availability,error,error,31,/// Utility to convert a regex error code into a human-readable string.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Regex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Regex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Regex.cpp:9,Availability,error,error,9,"// Reset error, if given.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Regex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Regex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Regex.cpp:3,Deployability,Update,Update,3,// Update null string to empty string.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Regex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Regex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Regex.cpp:3,Availability,Failure,Failure,3,"// Failure to match is not an error, it's just a normal return value.; // Any other error code is considered abnormal, and is logged in the Error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Regex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Regex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Regex.cpp:30,Availability,error,error,30,"// Failure to match is not an error, it's just a normal return value.; // Any other error code is considered abnormal, and is logged in the Error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Regex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Regex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Regex.cpp:84,Availability,error,error,84,"// Failure to match is not an error, it's just a normal return value.; // Any other error code is considered abnormal, and is logged in the Error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Regex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Regex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Regex.cpp:140,Availability,Error,Error,140,"// Failure to match is not an error, it's just a normal return value.; // Any other error code is considered abnormal, and is logged in the Error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Regex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Regex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Regex.cpp:126,Testability,log,logged,126,"// Failure to match is not an error, it's just a normal return value.; // Any other error code is considered abnormal, and is logged in the Error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Regex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Regex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Regex.cpp:13,Deployability,update,update,13,// Otherwise update the replacement string and interpret escapes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Regex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Regex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Regex.cpp:141,Modifiability,extend,extended,141,// Check for regex metacharacters. This list was derived from our regex; // implementation in regcomp.c and double checked against the POSIX extended; // regular expression specification.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Regex.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Regex.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regex2.h:1611,Integrability,CONTRACT,CONTRACT,1611,"/*-; * This code is derived from OpenBSD's libc/regex, original license follows:; *; * Copyright (c) 1992, 1993, 1994 Henry Spencer.; * Copyright (c) 1992, 1993, 1994; *	The Regents of the University of California. All rights reserved.; *; * This code is derived from software contributed to Berkeley by; * Henry Spencer.; *; * Redistribution and use in source and binary forms, with or without; * modification, are permitted provided that the following conditions; * are met:; * 1. Redistributions of source code must retain the above copyright; * notice, this list of conditions and the following disclaimer.; * 2. Redistributions in binary form must reproduce the above copyright; * notice, this list of conditions and the following disclaimer in the; * documentation and/or other materials provided with the distribution.; * 3. Neither the name of the University nor the names of its contributors; * may be used to endorse or promote products derived from this software; * without specific prior written permission.; *; * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND; * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE; * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE; * ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE; * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL; * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS; * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION); * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT; * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY; * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF; * SUCH DAMAGE.; *; *	@(#)regex2.h	8.4 (Berkeley) 3/20/94; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regex2.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regex2.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regex2.h:219,Availability,mask,mask,219,"/*; * Structure for [] character-set representation. Character sets are; * done as bit vectors, grouped 8 to a byte vector for compactness.; * The individual set therefore has both a pointer to the byte vector; * and a mask to pick out the relevant bit of each byte. A hash code; * simplifies testing whether two sets could be identical.; *; * This will get trickier for multicharacter collating elements. As; * preliminary hooks for dealing with such things, we also carry along; * a string of multi-character elements, and decide the size of the; * vectors at run time.; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regex2.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regex2.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regex2.h:269,Security,hash,hash,269,"/*; * Structure for [] character-set representation. Character sets are; * done as bit vectors, grouped 8 to a byte vector for compactness.; * The individual set therefore has both a pointer to the byte vector; * and a mask to pick out the relevant bit of each byte. A hash code; * simplifies testing whether two sets could be identical.; *; * This will get trickier for multicharacter collating elements. As; * preliminary hooks for dealing with such things, we also carry along; * a string of multi-character elements, and decide the size of the; * vectors at run time.; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regex2.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regex2.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regex2.h:293,Testability,test,testing,293,"/*; * Structure for [] character-set representation. Character sets are; * done as bit vectors, grouped 8 to a byte vector for compactness.; * The individual set therefore has both a pointer to the byte vector; * and a mask to pick out the relevant bit of each byte. A hash code; * simplifies testing whether two sets could be identical.; *; * This will get trickier for multicharacter collating elements. As; * preliminary hooks for dealing with such things, we also carry along; * a string of multi-character elements, and decide the size of the; * vectors at run time.; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regex2.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regex2.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regex2.h:282,Usability,simpl,simplifies,282,"/*; * Structure for [] character-set representation. Character sets are; * done as bit vectors, grouped 8 to a byte vector for compactness.; * The individual set therefore has both a pointer to the byte vector; * and a mask to pick out the relevant bit of each byte. A hash code; * simplifies testing whether two sets could be identical.; *; * This will get trickier for multicharacter collating elements. As; * preliminary hooks for dealing with such things, we also carry along; * a string of multi-character elements, and decide the size of the; * vectors at run time.; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regex2.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regex2.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regex2.h:3,Security,hash,hash,3,/* hash code */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regex2.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regex2.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regex2.h:33,Safety,unsafe,unsafe,33,"/* note that CHadd and CHsub are unsafe, and CHIN doesn't yield 0/1 */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regex2.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regex2.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regexec.c:1611,Integrability,CONTRACT,CONTRACT,1611,"follows:; *; * Copyright (c) 1992, 1993, 1994 Henry Spencer.; * Copyright (c) 1992, 1993, 1994; *	The Regents of the University of California. All rights reserved.; *; * This code is derived from software contributed to Berkeley by; * Henry Spencer.; *; * Redistribution and use in source and binary forms, with or without; * modification, are permitted provided that the following conditions; * are met:; * 1. Redistributions of source code must retain the above copyright; * notice, this list of conditions and the following disclaimer.; * 2. Redistributions in binary form must reproduce the above copyright; * notice, this list of conditions and the following disclaimer in the; * documentation and/or other materials provided with the distribution.; * 3. Neither the name of the University nor the names of its contributors; * may be used to endorse or promote products derived from this software; * without specific prior written permission.; *; * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND; * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE; * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE; * ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE; * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL; * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS; * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION); * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT; * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY; * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF; * SUCH DAMAGE.; *; *	@(#)regexec.c	8.3 (Berkeley) 3/20/94; */; /*; * the outer shell of llvm_regexec(); *; * This file includes engine.inc *twice*, after muchos fiddling with the; * macros that code uses. This lets the same code operate on two different; * representations for state sets.; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regexec.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regexec.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regexec.c:52,Modifiability,variab,variable,52,"/* some abbreviations; note that some of these know variable names! */; /* do ""if I'm here, I can also be there"" etc without branches */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regexec.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regexec.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regexec.c:7,Usability,undo,undo,7,/* now undo things */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regexec.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regexec.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regexec.c:52,Modifiability,variab,variable,52,"/* some abbreviations; note that some of these know variable names! */; /* do ""if I'm here, I can also be there"" etc without branches */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regexec.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regexec.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regexec.c:21,Integrability,interface,interface,21,"/*; - llvm_regexec - interface for matching; *; * We put this here so we can exploit knowledge of the state representation; * when choosing which matcher to call. Also, by this point the matchers; * have been prototyped.; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regexec.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regexec.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regexec.c:26,Availability,failure,failure,26,"/* 0 success, REG_NOMATCH failure */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regexec.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regexec.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regex_impl.h:1622,Integrability,CONTRACT,CONTRACT,1622,"/*-; * This code is derived from OpenBSD's libc/regex, original license follows:; *; * Copyright (c) 1992 Henry Spencer.; * Copyright (c) 1992, 1993; *	The Regents of the University of California. All rights reserved.; *; * This code is derived from software contributed to Berkeley by; * Henry Spencer of the University of Toronto.; *; * Redistribution and use in source and binary forms, with or without; * modification, are permitted provided that the following conditions; * are met:; * 1. Redistributions of source code must retain the above copyright; * notice, this list of conditions and the following disclaimer.; * 2. Redistributions in binary form must reproduce the above copyright; * notice, this list of conditions and the following disclaimer in the; * documentation and/or other materials provided with the distribution.; * 3. Neither the name of the University nor the names of its contributors; * may be used to endorse or promote products derived from this software; * without specific prior written permission.; *; * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND; * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE; * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE; * ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE; * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL; * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS; * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION); * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT; * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY; * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF; * SUCH DAMAGE.; *; *	@(#)regex.h	8.1 (Berkeley) 6/2/93; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regex_impl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regex_impl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regfree.c:1611,Integrability,CONTRACT,CONTRACT,1611,"/*-; * This code is derived from OpenBSD's libc/regex, original license follows:; *; * Copyright (c) 1992, 1993, 1994 Henry Spencer.; * Copyright (c) 1992, 1993, 1994; *	The Regents of the University of California. All rights reserved.; *; * This code is derived from software contributed to Berkeley by; * Henry Spencer.; *; * Redistribution and use in source and binary forms, with or without; * modification, are permitted provided that the following conditions; * are met:; * 1. Redistributions of source code must retain the above copyright; * notice, this list of conditions and the following disclaimer.; * 2. Redistributions in binary form must reproduce the above copyright; * notice, this list of conditions and the following disclaimer in the; * documentation and/or other materials provided with the distribution.; * 3. Neither the name of the University nor the names of its contributors; * may be used to endorse or promote products derived from this software; * without specific prior written permission.; *; * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND; * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE; * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE; * ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE; * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL; * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS; * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION); * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT; * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY; * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF; * SUCH DAMAGE.; *; *	@(#)regfree.c	8.3 (Berkeley) 3/20/94; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regfree.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regfree.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regstrlcpy.c:743,Integrability,CONTRACT,CONTRACT,743,"/*; * This code is derived from OpenBSD's libc, original license follows:; *; * Copyright (c) 1998 Todd C. Miller <Todd.Miller@courtesan.com>; *; * Permission to use, copy, modify, and distribute this software for any; * purpose with or without fee is hereby granted, provided that the above; * copyright notice and this permission notice appear in all copies.; *; * THE SOFTWARE IS PROVIDED ""AS IS"" AND THE AUTHOR DISCLAIMS ALL WARRANTIES; * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF; * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR; * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES; * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN; * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF; * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regstrlcpy.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regstrlcpy.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regstrlcpy.c:841,Performance,PERFORM,PERFORMANCE,841,"/*; * This code is derived from OpenBSD's libc, original license follows:; *; * Copyright (c) 1998 Todd C. Miller <Todd.Miller@courtesan.com>; *; * Permission to use, copy, modify, and distribute this software for any; * purpose with or without fee is hereby granted, provided that the above; * copyright notice and this permission notice appear in all copies.; *; * THE SOFTWARE IS PROVIDED ""AS IS"" AND THE AUTHOR DISCLAIMS ALL WARRANTIES; * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF; * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR; * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES; * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN; * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF; * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regstrlcpy.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regstrlcpy.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regutils.h:1611,Integrability,CONTRACT,CONTRACT,1611,"/*-; * This code is derived from OpenBSD's libc/regex, original license follows:; *; * Copyright (c) 1992, 1993, 1994 Henry Spencer.; * Copyright (c) 1992, 1993, 1994; *	The Regents of the University of California. All rights reserved.; *; * This code is derived from software contributed to Berkeley by; * Henry Spencer.; *; * Redistribution and use in source and binary forms, with or without; * modification, are permitted provided that the following conditions; * are met:; * 1. Redistributions of source code must retain the above copyright; * notice, this list of conditions and the following disclaimer.; * 2. Redistributions in binary form must reproduce the above copyright; * notice, this list of conditions and the following disclaimer in the; * documentation and/or other materials provided with the distribution.; * 3. Neither the name of the University nor the names of its contributors; * may be used to endorse or promote products derived from this software; * without specific prior written permission.; *; * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND; * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE; * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE; * ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE; * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL; * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS; * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION); * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT; * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY; * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF; * SUCH DAMAGE.; *; *	@(#)utils.h	8.3 (Berkeley) 3/20/94; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regutils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regutils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regutils.h:14,Testability,assert,assertions,14,/* switch off assertions (if not already off) if no REDEBUG */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regutils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regutils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regutils.h:6,Testability,assert,assertions,6,/* no assertions please */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/regutils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/regutils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/RISCVISAInfo.cpp:41,Usability,clear,clear,41,"// Exception rule for `g`, we don't have clear version scheme for that on; // ISA spec.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/RISCVISAInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/RISCVISAInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/RISCVISAInfo.cpp:111,Usability,clear,clear,111,"// No matter which version is given to `g`, we always set imafd to default; // version since the we don't have clear version scheme for that on; // ISA spec.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/RISCVISAInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/RISCVISAInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/RISCVISAInfo.cpp:104,Safety,avoid,avoid,104,"// Extension format is correct, keep parsing the extensions.; // TODO: Save Type, Name, Major, Minor to avoid parsing them later.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/RISCVISAInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/RISCVISAInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ScaledNumber.cpp:13,Energy Efficiency,power,powers,13,// Check for powers of two.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ScaledNumber.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ScaledNumber.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SHA1.cpp:595,Integrability,wrap,wrapping,595,"//====- SHA1.cpp - Private copy of the SHA1 implementation ---*- C++ -* ======//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This code is taken from public domain; // (http://oauth.googlecode.com/svn/code/c/liboauth/src/sha1.c and; // http://cvsweb.netbsd.org/bsdweb.cgi/src/common/lib/libc/hash/sha1/sha1.c?rev=1.6); // and modified by wrapping it in a C++ interface for LLVM,; // and removing unnecessary code.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/SHA1.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SHA1.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SHA1.cpp:616,Integrability,interface,interface,616,"//====- SHA1.cpp - Private copy of the SHA1 implementation ---*- C++ -* ======//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This code is taken from public domain; // (http://oauth.googlecode.com/svn/code/c/liboauth/src/sha1.c and; // http://cvsweb.netbsd.org/bsdweb.cgi/src/common/lib/libc/hash/sha1/sha1.c?rev=1.6); // and modified by wrapping it in a C++ interface for LLVM,; // and removing unnecessary code.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/SHA1.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SHA1.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SHA1.cpp:549,Security,hash,hash,549,"//====- SHA1.cpp - Private copy of the SHA1 implementation ---*- C++ -* ======//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This code is taken from public domain; // (http://oauth.googlecode.com/svn/code/c/liboauth/src/sha1.c and; // http://cvsweb.netbsd.org/bsdweb.cgi/src/common/lib/libc/hash/sha1/sha1.c?rev=1.6); // and modified by wrapping it in a C++ interface for LLVM,; // and removing unnecessary code.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/SHA1.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SHA1.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SHA1.cpp:21,Security,hash,hash,21,// Return pointer to hash (20 characters),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/SHA1.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SHA1.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SHA256.cpp:378,Security,Secur,Secure,378,"//====- SHA256.cpp - SHA256 implementation ---*- C++ -* ======//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /*; * The SHA-256 Secure Hash Standard was published by NIST in 2002.; *; * http://csrc.nist.gov/publications/fips/fips180-2/fips180-2.pdf; *; * The implementation is based on nacl's sha256 implementation [0] and LLVM's; * pre-exsiting SHA1 code [1].; *; * [0] https://hyperelliptic.org/nacl/nacl-20110221.tar.bz2 (public domain; * code); * [1] llvm/lib/Support/SHA1.{h,cpp}; */; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/SHA256.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SHA256.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SHA256.cpp:385,Security,Hash,Hash,385,"//====- SHA256.cpp - SHA256 implementation ---*- C++ -* ======//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /*; * The SHA-256 Secure Hash Standard was published by NIST in 2002.; *; * http://csrc.nist.gov/publications/fips/fips180-2/fips180-2.pdf; *; * The implementation is based on nacl's sha256 implementation [0] and LLVM's; * pre-exsiting SHA1 code [1].; *; * [0] https://hyperelliptic.org/nacl/nacl-20110221.tar.bz2 (public domain; * code); * [1] llvm/lib/Support/SHA1.{h,cpp}; */; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/SHA256.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SHA256.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SHA256.cpp:21,Security,hash,hash,21,// Return pointer to hash (32 characters),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/SHA256.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SHA256.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Signals.cpp:27,Safety,avoid,avoid,27,// Use explicit storage to avoid accessing cl::opt in a signal handler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Signals.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Signals.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Signals.cpp:33,Security,access,accessing,33,// Use explicit storage to avoid accessing cl::opt in a signal handler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Signals.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Signals.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Signals.cpp:10,Safety,safe,safe,10,// Signal-safe.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Signals.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Signals.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Signals.cpp:10,Safety,safe,safe,10,// Signal-safe.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Signals.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Signals.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Signals.cpp:38,Security,sanitiz,sanitizer,38,// This report format is based on the sanitizer stack trace printer. See; // sanitizer_stacktrace_printer.cc in compiler-rt.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Signals.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Signals.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SmallPtrSet.cpp:3,Energy Efficiency,Reduce,Reduce,3,// Reduce the number of buckets.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/SmallPtrSet.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SmallPtrSet.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SmallPtrSet.cpp:3,Deployability,Install,Install,3,// Install the new array. Clear all the buckets to empty.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/SmallPtrSet.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SmallPtrSet.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SmallPtrSet.cpp:26,Usability,Clear,Clear,26,// Install the new array. Clear all the buckets to empty.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/SmallPtrSet.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SmallPtrSet.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SmallPtrSet.cpp:39,Security,hash,hash,39,"// Okay, we know we have space. Find a hash bucket.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/SmallPtrSet.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SmallPtrSet.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SmallPtrSet.cpp:50,Security,hash,hash,50,// Remember the first tombstone found.; // It's a hash collision or a tombstone. Reprobe.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/SmallPtrSet.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SmallPtrSet.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SmallPtrSet.cpp:11,Energy Efficiency,Allocate,Allocate,11,/// Grow - Allocate a larger backing store for the buckets and move it over.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/SmallPtrSet.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SmallPtrSet.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SmallPtrSet.cpp:3,Deployability,Install,Install,3,// Install the new array. Clear all the buckets to empty.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/SmallPtrSet.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SmallPtrSet.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SmallPtrSet.cpp:26,Usability,Clear,Clear,26,// Install the new array. Clear all the buckets to empty.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/SmallPtrSet.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SmallPtrSet.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SmallPtrSet.cpp:35,Energy Efficiency,allocate,allocated,35,// Reset member only if memory was allocated successfully,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/SmallPtrSet.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SmallPtrSet.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SmallPtrSet.cpp:14,Energy Efficiency,allocate,allocate,14,"// Otherwise, allocate new heap space (unless we were the same size)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/SmallPtrSet.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SmallPtrSet.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SmallPtrSet.cpp:14,Energy Efficiency,allocate,allocate,14,"// Otherwise, allocate new heap space (unless we were the same size)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/SmallPtrSet.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SmallPtrSet.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SmallPtrSet.cpp:15,Safety,avoid,avoid,15,// We can only avoid copying elements if neither set is small.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/SmallPtrSet.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SmallPtrSet.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SmallVector.cpp:137,Testability,assert,assertions,137,// These structures may cause binary compat warnings on AIX. Suppress the; // warning since we are only using these types for the static assertions below.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/SmallVector.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SmallVector.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SmallVector.cpp:56,Performance,perform,performance,56,// Note: Moving this function into the header may cause performance regression.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/SmallVector.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SmallVector.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SmallVector.cpp:56,Performance,perform,performance,56,// Note: Moving this function into the header may cause performance regression.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/SmallVector.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SmallVector.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SmallVector.cpp:56,Performance,perform,performance,56,// Note: Moving this function into the header may cause performance regression.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/SmallVector.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SmallVector.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SmallVector.cpp:55,Energy Efficiency,allocate,allocated,55,"// If this wasn't grown from the inline copy, grow the allocated space.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/SmallVector.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SmallVector.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SmallVector.cpp:3,Testability,Assert,Assertions,3,// Assertions to ensure this #if stays in sync with SmallVectorSizeType.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/SmallVector.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SmallVector.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SourceMgr.cpp:35,Usability,Simpl,Simple,35,"//===- SourceMgr.cpp - Manager for Simple Source Buffers & Diagnostics ----===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the SourceMgr class. This class is used as a simple; // substrate for diagnostics, #include handling, and other low level things for; // simple parsers.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/SourceMgr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SourceMgr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SourceMgr.cpp:449,Usability,simpl,simple,449,"//===- SourceMgr.cpp - Manager for Simple Source Buffers & Diagnostics ----===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the SourceMgr class. This class is used as a simple; // substrate for diagnostics, #include handling, and other low level things for; // simple parsers.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/SourceMgr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SourceMgr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SourceMgr.cpp:541,Usability,simpl,simple,541,"//===- SourceMgr.cpp - Manager for Simple Source Buffers & Diagnostics ----===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the SourceMgr class. This class is used as a simple; // substrate for diagnostics, #include handling, and other low level things for; // simple parsers.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/SourceMgr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SourceMgr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SourceMgr.cpp:29,Performance,cache,cache,29,// Lazily fill in the offset cache.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/SourceMgr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SourceMgr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SourceMgr.cpp:14,Performance,cache,cache,14,"// The offset cache contains the location of the \n for the specified line,; // we want the start of the line. As such, we look for the previous entry.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/SourceMgr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SourceMgr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SourceMgr.cpp:31,Security,validat,validate,31,"// If we have a column number, validate it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/SourceMgr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SourceMgr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SourceMgr.cpp:14,Integrability,message,message,14,// Report the message with the diagnostic handler if present.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/SourceMgr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SourceMgr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SourceMgr.cpp:15,Testability,assert,assertion,15,"// FIXME: This assertion is intended to catch unintended use of multibyte; // characters in fixits. If we decide to do this, we'll have to track; // separate byte widths for the source and fixit lines.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/SourceMgr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SourceMgr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SourceMgr.cpp:60,Integrability,wrap,wrap,60,// ... and remove trailing whitespace so the output doesn't wrap for it. We; // know that the line isn't completely empty because it has the caret in it at; // least.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/SourceMgr.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SourceMgr.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SpecialCaseList.cpp:533,Modifiability,variab,variables,533,"//===-- SpecialCaseList.cpp - special case list for sanitizers ------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This is a utility class for instrumentation passes (like AddressSanitizer; // or ThreadSanitizer) to avoid instrumenting some functions or global; // variables, or to instrument some functions or global variables in a specific; // way, based on a user-supplied list.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/SpecialCaseList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SpecialCaseList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SpecialCaseList.cpp:586,Modifiability,variab,variables,586,"//===-- SpecialCaseList.cpp - special case list for sanitizers ------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This is a utility class for instrumentation passes (like AddressSanitizer; // or ThreadSanitizer) to avoid instrumenting some functions or global; // variables, or to instrument some functions or global variables in a specific; // way, based on a user-supplied list.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/SpecialCaseList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SpecialCaseList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SpecialCaseList.cpp:484,Safety,avoid,avoid,484,"//===-- SpecialCaseList.cpp - special case list for sanitizers ------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This is a utility class for instrumentation passes (like AddressSanitizer; // or ThreadSanitizer) to avoid instrumenting some functions or global; // variables, or to instrument some functions or global variables in a specific; // way, based on a user-supplied list.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/SpecialCaseList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SpecialCaseList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SpecialCaseList.cpp:52,Security,sanitiz,sanitizers,52,"//===-- SpecialCaseList.cpp - special case list for sanitizers ------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This is a utility class for instrumentation passes (like AddressSanitizer; // or ThreadSanitizer) to avoid instrumenting some functions or global; // variables, or to instrument some functions or global variables in a specific; // way, based on a user-supplied list.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/SpecialCaseList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SpecialCaseList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SpecialCaseList.cpp:9,Modifiability,Refactor,Refactor,9,// TODO: Refactor this to return Expected<...>,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/SpecialCaseList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SpecialCaseList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Statistic.cpp:737,Performance,optimiz,optimized,737,"//===-- Statistic.cpp - Easy way to expose stats information --------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the 'Statistic' class, which is designed to be an easy; // way to expose various success metrics from passes. These statistics are; // printed at the end of a run, when the -stats command line option is enabled; // on the command line.; //; // This is useful for reporting information like the number of instructions; // simplified, optimized or removed by various transformations, like this:; //; // static Statistic NumInstEliminated(""GCSE"", ""Number of instructions killed"");; //; // Later, in the code: ++NumInstEliminated;; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Statistic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Statistic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Statistic.cpp:36,Security,expose,expose,36,"//===-- Statistic.cpp - Easy way to expose stats information --------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the 'Statistic' class, which is designed to be an easy; // way to expose various success metrics from passes. These statistics are; // printed at the end of a run, when the -stats command line option is enabled; // on the command line.; //; // This is useful for reporting information like the number of instructions; // simplified, optimized or removed by various transformations, like this:; //; // static Statistic NumInstEliminated(""GCSE"", ""Number of instructions killed"");; //; // Later, in the code: ++NumInstEliminated;; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Statistic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Statistic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Statistic.cpp:470,Security,expose,expose,470,"//===-- Statistic.cpp - Easy way to expose stats information --------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the 'Statistic' class, which is designed to be an easy; // way to expose various success metrics from passes. These statistics are; // printed at the end of a run, when the -stats command line option is enabled; // on the command line.; //; // This is useful for reporting information like the number of instructions; // simplified, optimized or removed by various transformations, like this:; //; // static Statistic NumInstEliminated(""GCSE"", ""Number of instructions killed"");; //; // Later, in the code: ++NumInstEliminated;; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Statistic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Statistic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Statistic.cpp:725,Usability,simpl,simplified,725,"//===-- Statistic.cpp - Easy way to expose stats information --------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the 'Statistic' class, which is designed to be an easy; // way to expose various success metrics from passes. These statistics are; // printed at the end of a run, when the -stats command line option is enabled; // on the command line.; //; // This is useful for reporting information like the number of instructions; // simplified, optimized or removed by various transformations, like this:; //; // static Statistic NumInstEliminated(""GCSE"", ""Number of instructions killed"");; //; // Later, in the code: ++NumInstEliminated;; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Statistic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Statistic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Statistic.cpp:402,Safety,avoid,avoid,402,"// If stats are enabled, inform StatInfo that this statistic should be; // printed.; // llvm_shutdown calls destructors while holding the ManagedStatic mutex.; // These destructors end up calling PrintStatistics, which takes StatLock.; // Since dereferencing StatInfo and StatLock can require taking the; // ManagedStatic mutex, doing so with StatLock held would lead to a lock; // order inversion. To avoid that, we dereference the ManagedStatics first,; // and only take StatLock afterwards.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Statistic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Statistic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Statistic.cpp:9,Deployability,update,updates,9,// Value updates to a statistic that complete before this statement in the; // iteration for that statistic will be lost as intended.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Statistic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Statistic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Statistic.cpp:35,Deployability,release,release,35,// Clear the registration list and release the lock once we're done. Any; // pending updates from other threads will safely take effect after we return.; // That might not be what the user wants if they're measuring a compilation; // but it's their responsibility to prevent concurrent compilations to make; // a single compilation measurable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Statistic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Statistic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Statistic.cpp:85,Deployability,update,updates,85,// Clear the registration list and release the lock once we're done. Any; // pending updates from other threads will safely take effect after we return.; // That might not be what the user wants if they're measuring a compilation; // but it's their responsibility to prevent concurrent compilations to make; // a single compilation measurable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Statistic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Statistic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Statistic.cpp:275,Performance,concurren,concurrent,275,// Clear the registration list and release the lock once we're done. Any; // pending updates from other threads will safely take effect after we return.; // That might not be what the user wants if they're measuring a compilation; // but it's their responsibility to prevent concurrent compilations to make; // a single compilation measurable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Statistic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Statistic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Statistic.cpp:117,Safety,safe,safely,117,// Clear the registration list and release the lock once we're done. Any; // pending updates from other threads will safely take effect after we return.; // That might not be what the user wants if they're measuring a compilation; // but it's their responsibility to prevent concurrent compilations to make; // a single compilation measurable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Statistic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Statistic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Statistic.cpp:3,Usability,Clear,Clear,3,// Clear the registration list and release the lock once we're done. Any; // pending updates from other threads will safely take effect after we return.; // That might not be what the user wants if they're measuring a compilation; // but it's their responsibility to prevent concurrent compilations to make; // a single compilation measurable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Statistic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Statistic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Statistic.cpp:86,Deployability,release,release,86,"// Check if the -stats option is set instead of checking; // !Stats.Stats.empty(). In release builds, Statistics operators; // do nothing, so stats are never Registered.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Statistic.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Statistic.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringExtras.cpp:21,Modifiability,Portab,Portable,21,"/// StrInStrNoCase - Portable version of strcasestr. Locates the first; /// occurrence of string 's1' in string 's2', ignoring case. Returns; /// the offset of s2 in s1 or npos if s2 cannot be found.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/StringExtras.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringExtras.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringMap.cpp:32,Security,Hash,Hash,32,"//===--- StringMap.cpp - String Hash table map implementation -------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the StringMap class.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/StringMap.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringMap.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringMap.cpp:37,Energy Efficiency,allocate,allocate,37,/// Returns the number of buckets to allocate to ensure that the DenseMap can; /// accommodate \p NumEntries without need to grow().,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/StringMap.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringMap.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringMap.cpp:3,Energy Efficiency,Allocate,Allocate,3,"// Allocate one extra bucket, set it to look filled so the iterators stop at; // end.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/StringMap.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringMap.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringMap.cpp:190,Energy Efficiency,allocate,allocate,190,"// The table will grow when the number of entries reach 3/4 of the number of; // buckets. To guarantee that ""InitSize"" number of entries can be inserted; // in the table without growing, we allocate just what is needed here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/StringMap.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringMap.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringMap.cpp:49,Safety,avoid,avoid,49,"// Otherwise, initialize it with zero buckets to avoid the allocation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/StringMap.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringMap.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringMap.cpp:52,Energy Efficiency,allocate,allocated,52,// Set the member only if TheTable was successfully allocated,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/StringMap.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringMap.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringMap.cpp:303,Security,hash,hash,303,"/// LookupBucketFor - Look up the bucket that the specified string should end; /// up in. If it already exists as a key in the map, the Item pointer for the; /// specified bucket will be non-null. Otherwise, it will be null. In either; /// case, the FullHashValue field of the bucket will be set to the hash value; /// of the string.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/StringMap.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringMap.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringMap.cpp:3,Security,Hash,Hash,3,// Hash table unallocated so far?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/StringMap.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringMap.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringMap.cpp:96,Energy Efficiency,reduce,reduces,96,"// If we found a tombstone, we want to reuse the tombstone instead of an; // empty bucket. This reduces probing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/StringMap.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringMap.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringMap.cpp:236,Performance,cache,cache,236,"// If the full hash value matches, check deeply for a match. The common; // case here is that we are only looking at the buckets (for item info; // being non-null and for the full hash value) not at the items. This; // is important for cache locality.; // Do the comparison like this because Name isn't necessarily; // null-terminated!",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/StringMap.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringMap.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringMap.cpp:15,Security,hash,hash,15,"// If the full hash value matches, check deeply for a match. The common; // case here is that we are only looking at the buckets (for item info; // being non-null and for the full hash value) not at the items. This; // is important for cache locality.; // Do the comparison like this because Name isn't necessarily; // null-terminated!",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/StringMap.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringMap.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringMap.cpp:180,Security,hash,hash,180,"// If the full hash value matches, check deeply for a match. The common; // case here is that we are only looking at the buckets (for item info; // being non-null and for the full hash value) not at the items. This; // is important for cache locality.; // Do the comparison like this because Name isn't necessarily; // null-terminated!",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/StringMap.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringMap.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringMap.cpp:95,Performance,cache,cache,95,"// Use quadratic probing, it has fewer clumping artifacts than linear; // probing and has good cache behavior in the common case.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/StringMap.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringMap.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringMap.cpp:236,Performance,cache,cache,236,"// If the full hash value matches, check deeply for a match. The common; // case here is that we are only looking at the buckets (for item info; // being non-null and for the full hash value) not at the items. This; // is important for cache locality.; // Do the comparison like this because NameStart isn't necessarily; // null-terminated!",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/StringMap.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringMap.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringMap.cpp:15,Security,hash,hash,15,"// If the full hash value matches, check deeply for a match. The common; // case here is that we are only looking at the buckets (for item info; // being non-null and for the full hash value) not at the items. This; // is important for cache locality.; // Do the comparison like this because NameStart isn't necessarily; // null-terminated!",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/StringMap.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringMap.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringMap.cpp:180,Security,hash,hash,180,"// If the full hash value matches, check deeply for a match. The common; // case here is that we are only looking at the buckets (for item info; // being non-null and for the full hash value) not at the items. This; // is important for cache locality.; // Do the comparison like this because NameStart isn't necessarily; // null-terminated!",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/StringMap.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringMap.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringMap.cpp:95,Performance,cache,cache,95,"// Use quadratic probing, it has fewer clumping artifacts than linear; // probing and has good cache behavior in the common case.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/StringMap.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringMap.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringMap.cpp:100,Safety,abort,aborts,100,"/// RemoveKey - Remove the specified StringMapEntry from the table, but do not; /// delete it. This aborts if the value isn't in the table.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/StringMap.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringMap.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringMap.cpp:106,Security,hash,hashtable-size,106,"/// RehashTable - Grow the table, redistributing values into the buckets with; /// the appropriate mod-of-hashtable-size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/StringMap.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringMap.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringMap.cpp:10,Security,hash,hash,10,"// If the hash table is now more than 3/4 full, or if fewer than 1/8 of; // the buckets are empty (meaning that many are filled with tombstones),; // grow/rehash the table.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/StringMap.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringMap.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringMap.cpp:95,Availability,avail,available,95,"// Rehash all the items into their new buckets. Luckily :) we already have; // the hash values available, so we don't have to rehash any strings.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/StringMap.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringMap.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringMap.cpp:83,Security,hash,hash,83,"// Rehash all the items into their new buckets. Luckily :) we already have; // the hash values available, so we don't have to rehash any strings.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/StringMap.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringMap.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringMap.cpp:24,Availability,avail,available,24,"// If the bucket is not available, probe for a spot.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/StringMap.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringMap.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringRef.cpp:24,Availability,avail,available,24,"// strncasecmp() is not available on non-POSIX systems, so define an; // alternative function here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/StringRef.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringRef.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringRef.cpp:94,Performance,optimiz,optimized,94,"// Provide a fast path for newline finding (CRLF case) in InclusionRewriter.; // Not the most optimized strategy, but getting memcmp inlined should be; // good enough.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/StringRef.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringRef.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringRef.cpp:55,Energy Efficiency,reduce,reduce,55,"// Build the bad char heuristic table, with uint8_t to reduce cache thrashing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/StringRef.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringRef.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringRef.cpp:62,Performance,cache,cache,62,"// Build the bad char heuristic table, with uint8_t to reduce cache thrashing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/StringRef.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringRef.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringRef.cpp:9,Availability,down,down,9,"// Count down from MaxSplit. When MaxSplit is -1, this will just split; // ""forever"". This doesn't support splitting more than 2^31 times; // intentionally; if we ever want that we can make MaxSplit a 64-bit integer; // but that seems unlikely to be useful.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/StringRef.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringRef.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringRef.cpp:9,Availability,down,down,9,"// Count down from MaxSplit. When MaxSplit is -1, this will just split; // ""forever"". This doesn't support splitting more than 2^31 times; // intentionally; if we ever want that we can make MaxSplit a 64-bit integer; // but that seems unlikely to be useful.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/StringRef.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringRef.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringRef.cpp:31,Availability,failure,failure,31,// We consider the operation a failure if no characters were consumed; // successfully.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/StringRef.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringRef.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringRef.cpp:101,Availability,failure,failure,101,"// For getAsUnsignedInteger, we require the whole string to be consumed or; // else we consider it a failure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/StringRef.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringRef.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringRef.cpp:99,Availability,failure,failure,99,"// For getAsSignedInteger, we require the whole string to be consumed or else; // we consider it a failure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/StringRef.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringRef.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringRef.cpp:31,Availability,failure,failure,31,// We consider the operation a failure if no characters were consumed; // successfully.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/StringRef.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringRef.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringRef.cpp:93,Availability,failure,failure,93,"// For getAsInteger, we require the whole string to be consumed or else we; // consider it a failure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/StringRef.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringRef.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringRef.cpp:31,Security,hash,hashing,31,// Implementation of StringRef hashing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/StringRef.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringRef.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringSaver.cpp:3,Performance,cache,cache,3,"// cache miss, need to actually save the string",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/StringSaver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringSaver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringSaver.cpp:3,Safety,safe,safe,3,// safe replacement with equal value,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/StringSaver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/StringSaver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SuffixTree.cpp:3,Modifiability,Extend,Extend,3,// Extend each of the leaves.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/SuffixTree.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SuffixTree.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SuffixTree.cpp:35,Availability,down,down,35,// Sum of the lengths of the nodes down the path to the current one.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/SuffixTree.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SuffixTree.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SuffixTree.cpp:44,Availability,down,down,44,// Length of the current node from the root down to here.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/SuffixTree.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SuffixTree.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SuffixTree.cpp:252,Energy Efficiency,reduce,reduce,252,"// The string we're trying to insert isn't a substring of the next node,; // but matches up to a point. Split the node.; //; // For example, say we ended our search at a node n and we're trying to; // insert ABD. Then we'll create a new node s for AB, reduce n to just; // representing C, and insert a new leaf node l to represent d. This; // allows us to ensure that if n was a leaf, it remains a leaf.; //; // | ABC ---split---> | AB; // n s; // C / \ D; // n l; // The node s from the diagram",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/SuffixTree.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SuffixTree.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SuffixTree.cpp:51,Deployability,update,update,51,// Make the old node a child of the split node and update its start; // index. This is the node n from the diagram.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/SuffixTree.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SuffixTree.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SuffixTree.cpp:34,Deployability,update,update,34,"// SplitNode is an internal node, update the suffix link.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/SuffixTree.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SuffixTree.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SuffixTree.cpp:3,Usability,Clear,Clear,3,"// Clear the current state. If we're at the end of the range, then this; // is the state we want to be in.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/SuffixTree.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SuffixTree.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SuffixTree.cpp:8,Deployability,Update,Update,8,"// Yes. Update the state to reflect this, and then bail out.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/SuffixTree.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/SuffixTree.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/TarWriter.cpp:474,Usability,simpl,simplicity,474,"//===-- TarWriter.cpp - Tar archive file creator --------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // TarWriter class provides a feature to create a tar archive file.; //; // I put emphasis on simplicity over comprehensiveness when implementing this; // class because we don't need a full-fledged archive file generator in LLVM; // at the moment.; //; // The filename field in the Unix V7 tar header is 100 bytes. Longer filenames; // are stored using the PAX extension. The PAX header is standardized in; // POSIX.1-2001.; //; // The struct definition of UstarHeader is copied from; // https://www.freebsd.org/cgi/man.cgi?query=tar&sektion=5; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/TarWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/TarWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/TarWriter.cpp:14,Security,checksum,checksum,14,// Computes a checksum for a tar header.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/TarWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/TarWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/TarWriter.cpp:22,Security,checksum,checksum,22,"// Before computing a checksum, checksum field must be; // filled with space characters.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/TarWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/TarWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/TarWriter.cpp:32,Security,checksum,checksum,32,"// Before computing a checksum, checksum field must be; // filled with space characters.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/TarWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/TarWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/TarWriter.cpp:13,Security,checksum,checksum,13,// Compute a checksum and set it to the checksum field.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/TarWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/TarWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/TarWriter.cpp:40,Security,checksum,checksum,40,// Compute a checksum and set it to the checksum field.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/TarWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/TarWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/TarWriter.cpp:14,Availability,down,down,14,// Write them down.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/TarWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/TarWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/TarWriter.cpp:334,Deployability,update,updates,334,"// Path fits in a Ustar header if; //; // - Path is less than 100 characters long, or; // - Path is in the form of ""<prefix>/<name>"" where <prefix> is less; // than or equal to 155 characters long and <name> is less than 100; // characters long. Both <prefix> and <name> can contain extra '/'.; //; // If Path fits in a Ustar header, updates Prefix and Name and returns true.; // Otherwise, returns false.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/TarWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/TarWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/TarWriter.cpp:608,Testability,test,test,608,"// tar 1.13 and earlier unconditionally look at the tar header interpreted; // as an 'oldgnu_header', which has an 'isextended' byte at offset 482 in the; // header, corresponding to offset 137 in the prefix. That's the version of; // tar in gnuwin, so only use 137 of the 155 bytes in the prefix. This means; // we'll need a pax header after 237 bytes of path instead of after 255,; // but in return paths up to 237 bytes work with gnuwin, instead of just; // 137 bytes of directory + 100 bytes of basename previously.; // (tar-1.13 also doesn't support pax headers, but in practice all paths in; // llvm's test suite are short enough for that to not matter.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/TarWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/TarWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/TarWriter.cpp:24,Modifiability,extend,extended,24,"// The PAX header is an extended format, so a PAX header needs; // to be followed by a ""real"" header.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/TarWriter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/TarWriter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Threading.cpp:440,Performance,multi-thread,multi-threaded,440,"//===-- llvm/Support/Threading.cpp- Control multithreading mode --*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines helper functions for running LLVM in a multi-threaded; // environment.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Threading.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Threading.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Threading.cpp:171,Integrability,interface,interface,171,"// Darwin's default stack size for threads except the main one is only 512KB,; // which is not enough for some/many normal LLVM compilations. This implements; // the same interface as std::thread but requests the same stack size as the; // main thread (8MB) before creation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Threading.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Threading.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ThreadPool.cpp:130,Performance,queue,queue,130,"// A note on thread groups: Tasks are by default in no group (represented; // by nullptr ThreadPoolTaskGroup pointer in the Tasks queue) and functionality; // here normally works on all tasks regardless of their group (functions; // in that case receive nullptr ThreadPoolTaskGroup pointer as argument).; // A task in a group has a pointer to that ThreadPoolTaskGroup in the Tasks; // queue, and functions called to work only on tasks from one group take that; // pointer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ThreadPool.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ThreadPool.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ThreadPool.cpp:385,Performance,queue,queue,385,"// A note on thread groups: Tasks are by default in no group (represented; // by nullptr ThreadPoolTaskGroup pointer in the Tasks queue) and functionality; // here normally works on all tasks regardless of their group (functions; // in that case receive nullptr ThreadPoolTaskGroup pointer as argument).; // A task in a group has a pointer to that ThreadPoolTaskGroup in the Tasks; // queue, and functions called to work only on tasks from one group take that; // pointer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ThreadPool.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ThreadPool.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ThreadPool.cpp:76,Performance,queue,queue,76,// Result of workCompletedUnlocked(); // Wait for tasks to be pushed in the queue,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ThreadPool.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ThreadPool.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ThreadPool.cpp:37,Deployability,release,release,37,"// Yeah, we have a task, grab it and release the lock on the queue; // We first need to signal that we are active before popping the queue; // in order for wait() to properly detect that even if the queue is; // empty, there is still a task in flight.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ThreadPool.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ThreadPool.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ThreadPool.cpp:61,Performance,queue,queue,61,"// Yeah, we have a task, grab it and release the lock on the queue; // We first need to signal that we are active before popping the queue; // in order for wait() to properly detect that even if the queue is; // empty, there is still a task in flight.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ThreadPool.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ThreadPool.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ThreadPool.cpp:133,Performance,queue,queue,133,"// Yeah, we have a task, grab it and release the lock on the queue; // We first need to signal that we are active before popping the queue; // in order for wait() to properly detect that even if the queue is; // empty, there is still a task in flight.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ThreadPool.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ThreadPool.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ThreadPool.cpp:199,Performance,queue,queue,199,"// Yeah, we have a task, grab it and release the lock on the queue; // We first need to signal that we are active before popping the queue; // in order for wait() to properly detect that even if the queue is; // empty, there is still a task in flight.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ThreadPool.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ThreadPool.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ThreadPool.cpp:175,Safety,detect,detect,175,"// Yeah, we have a task, grab it and release the lock on the queue; // We first need to signal that we are active before popping the queue; // in order for wait() to properly detect that even if the queue is; // empty, there is still a task in flight.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ThreadPool.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ThreadPool.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ThreadPool.cpp:96,Performance,Queue,QueueCondition,96,"// If this was a task in a group, notify also threads waiting for tasks; // in this function on QueueCondition, to make a recursive wait() return; // after the group it's been waiting for has finished.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ThreadPool.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ThreadPool.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ThreadPool.cpp:83,Performance,queue,queue,83,// Would deadlock waiting for itself.; // Wait for all threads to complete and the queue to be empty,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ThreadPool.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ThreadPool.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ThreadPool.cpp:151,Safety,avoid,avoid,151,"// Handle the case of recursive call from another task in a different group,; // in which case process tasks while waiting to keep the thread busy and avoid; // possible deadlock.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ThreadPool.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ThreadPool.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ThreadPool.cpp:103,Performance,queue,queue,103,"// Simply wait for all, this works even if recursive (the running task; // is already removed from the queue).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ThreadPool.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ThreadPool.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ThreadPool.cpp:3,Usability,Simpl,Simply,3,"// Simply wait for all, this works even if recursive (the running task; // is already removed from the queue).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/ThreadPool.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/ThreadPool.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/TimeProfiler.cpp:118,Safety,avoid,avoids,118,// Calculate timings for FlameGraph. Cast time points to microsecond precision; // rather than casting duration. This avoids truncation issues causing inner; // scopes overruning outer scopes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/TimeProfiler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/TimeProfiler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Timer.cpp:326,Modifiability,variab,variable,326,"// This ugly hack is brought to you courtesy of constructor/destructor ordering; // being unspecified by C++. Basically the problem is that a Statistic object; // gets destroyed, which ends up calling 'GetLibSupportInfoOutputFile()'; // (below), which calls this function. LibSupportInfoOutputFilename used to be; // a global variable, but sometimes it would get destroyed before the Statistic,; // causing havoc to ensue. We ""fix"" this by creating the string the first time; // it is needed and never destroying it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Timer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Timer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Timer.cpp:183,Testability,test,test-suite,183,"// stdout.; // Append mode is used because the info output file is opened and closed; // each time -stats or -time-passes wants to print output to it. To; // compensate for this, the test-suite Makefiles have code to delete the; // info output file before running commands which write to it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Timer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Timer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Timer.cpp:33,Usability,clear,cleared,33,"// Never initialized, or already cleared.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Timer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Timer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Timer.cpp:3,Safety,Avoid,Avoid,3,// Avoid dividing by zero.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Timer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Timer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Twine.cpp:45,Safety,avoid,avoid,45,"// If we're storing a formatv_object, we can avoid an extra copy by formatting; // it immediately and returning the result.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Twine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Twine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/TypeSize.cpp:22,Integrability,Wrap,Wrapper,22,"//===- TypeSize.cpp - Wrapper around type sizes------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/TypeSize.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/TypeSize.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/TypeSize.cpp:66,Availability,error,errors,66,/// The ScalableErrorAsWarning is a temporary measure to suppress errors from; /// using the wrong interface on a scalable vector.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/TypeSize.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/TypeSize.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/TypeSize.cpp:99,Integrability,interface,interface,99,/// The ScalableErrorAsWarning is a temporary measure to suppress errors from; /// using the wrong interface on a scalable vector.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/TypeSize.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/TypeSize.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/TypeSize.cpp:8,Performance,Scalab,ScalableErrorAsWarning,8,/// The ScalableErrorAsWarning is a temporary measure to suppress errors from; /// using the wrong interface on a scalable vector.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/TypeSize.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/TypeSize.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/TypeSize.cpp:114,Performance,scalab,scalable,114,/// The ScalableErrorAsWarning is a temporary measure to suppress errors from; /// using the wrong interface on a scalable vector.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/TypeSize.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/TypeSize.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Unicode.cpp:390,Availability,Error,ErrorNonPrintableCharacter,390,"/// Gets the number of positions a character is likely to occupy when output; /// on a terminal (""character width""). This depends on the implementation of the; /// terminal, and there's no standard definition of character width.; /// The implementation defines it in a way that is expected to be compatible; /// with a generic Unicode-capable terminal.; /// \return Character width:; /// * ErrorNonPrintableCharacter (-1) for non-printable characters (as; /// identified by isPrintable);; /// * 0 for non-spacing and enclosing combining marks;; /// * 2 for CJK characters excluding halfwidth forms;; /// * 1 for all remaining characters.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Unicode.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Unicode.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Unicode.cpp:122,Integrability,depend,depends,122,"/// Gets the number of positions a character is likely to occupy when output; /// on a terminal (""character width""). This depends on the implementation of the; /// terminal, and there's no standard definition of character width.; /// The implementation defines it in a way that is expected to be compatible; /// with a generic Unicode-capable terminal.; /// \return Character width:; /// * ErrorNonPrintableCharacter (-1) for non-printable characters (as; /// identified by isPrintable);; /// * 0 for non-spacing and enclosing combining marks;; /// * 2 for CJK characters excluding halfwidth forms;; /// * 1 for all remaining characters.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Unicode.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Unicode.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/UnicodeNameToCodepoint.cpp:6,Safety,avoid,avoid,6,"// To avoid allocations, the creation of the name is delayed; // as much as possible.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/UnicodeNameToCodepoint.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/UnicodeNameToCodepoint.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/UnicodeNameToCodepoint.cpp:3,Energy Efficiency,Allocate,Allocate,3,// Allocate a matrix big enough for longest names.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/UnicodeNameToCodepoint.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/UnicodeNameToCodepoint.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/UnicodeNameToCodepointGenerated.cpp:888,Availability,DOWN,DOWNLOADING,888,"//===------------- Support/UnicodeNameToCodepointGenerated.cpp ------------===//; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements mapping the name of a unicode code point to its value.; //; // This file was generated using ./bin/UnicodeNameMappingGenerator.; // Do not edit manually.; //; //===----------------------------------------------------------------------===//; /*; UNICODE, INC. LICENSE AGREEMENT - DATA FILES AND SOFTWARE. See Terms of Use <https://www.unicode.org/copyright.html>; for definitions of Unicode Inc.’s Data Files and Software. NOTICE TO USER: Carefully read the following legal agreement.; BY DOWNLOADING, INSTALLING, COPYING OR OTHERWISE USING UNICODE INC.'S; DATA FILES (""DATA FILES""), AND/OR SOFTWARE (""SOFTWARE""),; YOU UNEQUIVOCALLY ACCEPT, AND AGREE TO BE BOUND BY, ALL OF THE; TERMS AND CONDITIONS OF THIS AGREEMENT.; IF YOU DO NOT AGREE, DO NOT DOWNLOAD, INSTALL, COPY, DISTRIBUTE OR USE; THE DATA FILES OR SOFTWARE. COPYRIGHT AND PERMISSION NOTICE. Copyright © 1991-2022 Unicode, Inc. All rights reserved.; Distributed under the Terms of Use in https://www.unicode.org/copyright.html. Permission is hereby granted, free of charge, to any person obtaining; a copy of the Unicode data files and any associated documentation; (the ""Data Files"") or Unicode software and any associated documentation; (the ""Software"") to deal in the Data Files or Software; without restriction, including without limitation the rights to use,; copy, modify, merge, publish, distribute, and/or sell copies of; the Data Files or Software, and to permit persons to whom the Data Files; or Software are furnished to do so, provided that either; (a) this copyright and permission notice appear with all copies; of the Data Fi",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/UnicodeNameToCodepointGenerated.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/UnicodeNameToCodepointGenerated.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/UnicodeNameToCodepointGenerated.cpp:1147,Availability,DOWN,DOWNLOAD,1147,"See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements mapping the name of a unicode code point to its value.; //; // This file was generated using ./bin/UnicodeNameMappingGenerator.; // Do not edit manually.; //; //===----------------------------------------------------------------------===//; /*; UNICODE, INC. LICENSE AGREEMENT - DATA FILES AND SOFTWARE. See Terms of Use <https://www.unicode.org/copyright.html>; for definitions of Unicode Inc.’s Data Files and Software. NOTICE TO USER: Carefully read the following legal agreement.; BY DOWNLOADING, INSTALLING, COPYING OR OTHERWISE USING UNICODE INC.'S; DATA FILES (""DATA FILES""), AND/OR SOFTWARE (""SOFTWARE""),; YOU UNEQUIVOCALLY ACCEPT, AND AGREE TO BE BOUND BY, ALL OF THE; TERMS AND CONDITIONS OF THIS AGREEMENT.; IF YOU DO NOT AGREE, DO NOT DOWNLOAD, INSTALL, COPY, DISTRIBUTE OR USE; THE DATA FILES OR SOFTWARE. COPYRIGHT AND PERMISSION NOTICE. Copyright © 1991-2022 Unicode, Inc. All rights reserved.; Distributed under the Terms of Use in https://www.unicode.org/copyright.html. Permission is hereby granted, free of charge, to any person obtaining; a copy of the Unicode data files and any associated documentation; (the ""Data Files"") or Unicode software and any associated documentation; (the ""Software"") to deal in the Data Files or Software; without restriction, including without limitation the rights to use,; copy, modify, merge, publish, distribute, and/or sell copies of; the Data Files or Software, and to permit persons to whom the Data Files; or Software are furnished to do so, provided that either; (a) this copyright and permission notice appear with all copies; of the Data Files or Software, or; (b) this copyright and permission notice appear in associated; Documentation. THE DATA FILES AND SOFTWARE ARE PROVIDED ""AS IS"", WITHOUT WARRANTY O",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/UnicodeNameToCodepointGenerated.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/UnicodeNameToCodepointGenerated.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/UnicodeNameToCodepointGenerated.cpp:901,Deployability,INSTALL,INSTALLING,901,"//===------------- Support/UnicodeNameToCodepointGenerated.cpp ------------===//; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements mapping the name of a unicode code point to its value.; //; // This file was generated using ./bin/UnicodeNameMappingGenerator.; // Do not edit manually.; //; //===----------------------------------------------------------------------===//; /*; UNICODE, INC. LICENSE AGREEMENT - DATA FILES AND SOFTWARE. See Terms of Use <https://www.unicode.org/copyright.html>; for definitions of Unicode Inc.’s Data Files and Software. NOTICE TO USER: Carefully read the following legal agreement.; BY DOWNLOADING, INSTALLING, COPYING OR OTHERWISE USING UNICODE INC.'S; DATA FILES (""DATA FILES""), AND/OR SOFTWARE (""SOFTWARE""),; YOU UNEQUIVOCALLY ACCEPT, AND AGREE TO BE BOUND BY, ALL OF THE; TERMS AND CONDITIONS OF THIS AGREEMENT.; IF YOU DO NOT AGREE, DO NOT DOWNLOAD, INSTALL, COPY, DISTRIBUTE OR USE; THE DATA FILES OR SOFTWARE. COPYRIGHT AND PERMISSION NOTICE. Copyright © 1991-2022 Unicode, Inc. All rights reserved.; Distributed under the Terms of Use in https://www.unicode.org/copyright.html. Permission is hereby granted, free of charge, to any person obtaining; a copy of the Unicode data files and any associated documentation; (the ""Data Files"") or Unicode software and any associated documentation; (the ""Software"") to deal in the Data Files or Software; without restriction, including without limitation the rights to use,; copy, modify, merge, publish, distribute, and/or sell copies of; the Data Files or Software, and to permit persons to whom the Data Files; or Software are furnished to do so, provided that either; (a) this copyright and permission notice appear with all copies; of the Data Fi",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/UnicodeNameToCodepointGenerated.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/UnicodeNameToCodepointGenerated.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/UnicodeNameToCodepointGenerated.cpp:1157,Deployability,INSTALL,INSTALL,1157,"See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements mapping the name of a unicode code point to its value.; //; // This file was generated using ./bin/UnicodeNameMappingGenerator.; // Do not edit manually.; //; //===----------------------------------------------------------------------===//; /*; UNICODE, INC. LICENSE AGREEMENT - DATA FILES AND SOFTWARE. See Terms of Use <https://www.unicode.org/copyright.html>; for definitions of Unicode Inc.’s Data Files and Software. NOTICE TO USER: Carefully read the following legal agreement.; BY DOWNLOADING, INSTALLING, COPYING OR OTHERWISE USING UNICODE INC.'S; DATA FILES (""DATA FILES""), AND/OR SOFTWARE (""SOFTWARE""),; YOU UNEQUIVOCALLY ACCEPT, AND AGREE TO BE BOUND BY, ALL OF THE; TERMS AND CONDITIONS OF THIS AGREEMENT.; IF YOU DO NOT AGREE, DO NOT DOWNLOAD, INSTALL, COPY, DISTRIBUTE OR USE; THE DATA FILES OR SOFTWARE. COPYRIGHT AND PERMISSION NOTICE. Copyright © 1991-2022 Unicode, Inc. All rights reserved.; Distributed under the Terms of Use in https://www.unicode.org/copyright.html. Permission is hereby granted, free of charge, to any person obtaining; a copy of the Unicode data files and any associated documentation; (the ""Data Files"") or Unicode software and any associated documentation; (the ""Software"") to deal in the Data Files or Software; without restriction, including without limitation the rights to use,; copy, modify, merge, publish, distribute, and/or sell copies of; the Data Files or Software, and to permit persons to whom the Data Files; or Software are furnished to do so, provided that either; (a) this copyright and permission notice appear with all copies; of the Data Files or Software, or; (b) this copyright and permission notice appear in associated; Documentation. THE DATA FILES AND SOFTWARE ARE PROVIDED ""AS IS"", WITHOUT WARRANTY O",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/UnicodeNameToCodepointGenerated.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/UnicodeNameToCodepointGenerated.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/UnicodeNameToCodepointGenerated.cpp:1426,Energy Efficiency,charge,charge,1426,"rg/copyright.html>; for definitions of Unicode Inc.’s Data Files and Software. NOTICE TO USER: Carefully read the following legal agreement.; BY DOWNLOADING, INSTALLING, COPYING OR OTHERWISE USING UNICODE INC.'S; DATA FILES (""DATA FILES""), AND/OR SOFTWARE (""SOFTWARE""),; YOU UNEQUIVOCALLY ACCEPT, AND AGREE TO BE BOUND BY, ALL OF THE; TERMS AND CONDITIONS OF THIS AGREEMENT.; IF YOU DO NOT AGREE, DO NOT DOWNLOAD, INSTALL, COPY, DISTRIBUTE OR USE; THE DATA FILES OR SOFTWARE. COPYRIGHT AND PERMISSION NOTICE. Copyright © 1991-2022 Unicode, Inc. All rights reserved.; Distributed under the Terms of Use in https://www.unicode.org/copyright.html. Permission is hereby granted, free of charge, to any person obtaining; a copy of the Unicode data files and any associated documentation; (the ""Data Files"") or Unicode software and any associated documentation; (the ""Software"") to deal in the Data Files or Software; without restriction, including without limitation the rights to use,; copy, modify, merge, publish, distribute, and/or sell copies of; the Data Files or Software, and to permit persons to whom the Data Files; or Software are furnished to do so, provided that either; (a) this copyright and permission notice appear with all copies; of the Data Files or Software, or; (b) this copyright and permission notice appear in associated; Documentation. THE DATA FILES AND SOFTWARE ARE PROVIDED ""AS IS"", WITHOUT WARRANTY OF; ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE; WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND; NONINFRINGEMENT OF THIRD PARTY RIGHTS.; IN NO EVENT SHALL THE COPYRIGHT HOLDER OR HOLDERS INCLUDED IN THIS; NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL INDIRECT OR CONSEQUENTIAL; DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,; DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER; TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR; PERFORMANCE OF THE DATA FILES OR SOFTWARE. Except as co",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/UnicodeNameToCodepointGenerated.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/UnicodeNameToCodepointGenerated.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/UnicodeNameToCodepointGenerated.cpp:2591,Integrability,CONTRACT,CONTRACT,2591,"/OR SOFTWARE (""SOFTWARE""),; YOU UNEQUIVOCALLY ACCEPT, AND AGREE TO BE BOUND BY, ALL OF THE; TERMS AND CONDITIONS OF THIS AGREEMENT.; IF YOU DO NOT AGREE, DO NOT DOWNLOAD, INSTALL, COPY, DISTRIBUTE OR USE; THE DATA FILES OR SOFTWARE. COPYRIGHT AND PERMISSION NOTICE. Copyright © 1991-2022 Unicode, Inc. All rights reserved.; Distributed under the Terms of Use in https://www.unicode.org/copyright.html. Permission is hereby granted, free of charge, to any person obtaining; a copy of the Unicode data files and any associated documentation; (the ""Data Files"") or Unicode software and any associated documentation; (the ""Software"") to deal in the Data Files or Software; without restriction, including without limitation the rights to use,; copy, modify, merge, publish, distribute, and/or sell copies of; the Data Files or Software, and to permit persons to whom the Data Files; or Software are furnished to do so, provided that either; (a) this copyright and permission notice appear with all copies; of the Data Files or Software, or; (b) this copyright and permission notice appear in associated; Documentation. THE DATA FILES AND SOFTWARE ARE PROVIDED ""AS IS"", WITHOUT WARRANTY OF; ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE; WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND; NONINFRINGEMENT OF THIRD PARTY RIGHTS.; IN NO EVENT SHALL THE COPYRIGHT HOLDER OR HOLDERS INCLUDED IN THIS; NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL INDIRECT OR CONSEQUENTIAL; DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,; DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER; TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR; PERFORMANCE OF THE DATA FILES OR SOFTWARE. Except as contained in this notice, the name of a copyright holder; shall not be used in advertising or otherwise to promote the sale,; use or other dealings in these Data Files or Software without prior; written authorization of the copyright holder.; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/UnicodeNameToCodepointGenerated.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/UnicodeNameToCodepointGenerated.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/UnicodeNameToCodepointGenerated.cpp:2688,Performance,PERFORM,PERFORMANCE,2688,"/OR SOFTWARE (""SOFTWARE""),; YOU UNEQUIVOCALLY ACCEPT, AND AGREE TO BE BOUND BY, ALL OF THE; TERMS AND CONDITIONS OF THIS AGREEMENT.; IF YOU DO NOT AGREE, DO NOT DOWNLOAD, INSTALL, COPY, DISTRIBUTE OR USE; THE DATA FILES OR SOFTWARE. COPYRIGHT AND PERMISSION NOTICE. Copyright © 1991-2022 Unicode, Inc. All rights reserved.; Distributed under the Terms of Use in https://www.unicode.org/copyright.html. Permission is hereby granted, free of charge, to any person obtaining; a copy of the Unicode data files and any associated documentation; (the ""Data Files"") or Unicode software and any associated documentation; (the ""Software"") to deal in the Data Files or Software; without restriction, including without limitation the rights to use,; copy, modify, merge, publish, distribute, and/or sell copies of; the Data Files or Software, and to permit persons to whom the Data Files; or Software are furnished to do so, provided that either; (a) this copyright and permission notice appear with all copies; of the Data Files or Software, or; (b) this copyright and permission notice appear in associated; Documentation. THE DATA FILES AND SOFTWARE ARE PROVIDED ""AS IS"", WITHOUT WARRANTY OF; ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE; WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND; NONINFRINGEMENT OF THIRD PARTY RIGHTS.; IN NO EVENT SHALL THE COPYRIGHT HOLDER OR HOLDERS INCLUDED IN THIS; NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL INDIRECT OR CONSEQUENTIAL; DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,; DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER; TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR; PERFORMANCE OF THE DATA FILES OR SOFTWARE. Except as contained in this notice, the name of a copyright holder; shall not be used in advertising or otherwise to promote the sale,; use or other dealings in these Data Files or Software without prior; written authorization of the copyright holder.; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/UnicodeNameToCodepointGenerated.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/UnicodeNameToCodepointGenerated.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/UnicodeNameToCodepointGenerated.cpp:2944,Security,authoriz,authorization,2944,"/OR SOFTWARE (""SOFTWARE""),; YOU UNEQUIVOCALLY ACCEPT, AND AGREE TO BE BOUND BY, ALL OF THE; TERMS AND CONDITIONS OF THIS AGREEMENT.; IF YOU DO NOT AGREE, DO NOT DOWNLOAD, INSTALL, COPY, DISTRIBUTE OR USE; THE DATA FILES OR SOFTWARE. COPYRIGHT AND PERMISSION NOTICE. Copyright © 1991-2022 Unicode, Inc. All rights reserved.; Distributed under the Terms of Use in https://www.unicode.org/copyright.html. Permission is hereby granted, free of charge, to any person obtaining; a copy of the Unicode data files and any associated documentation; (the ""Data Files"") or Unicode software and any associated documentation; (the ""Software"") to deal in the Data Files or Software; without restriction, including without limitation the rights to use,; copy, modify, merge, publish, distribute, and/or sell copies of; the Data Files or Software, and to permit persons to whom the Data Files; or Software are furnished to do so, provided that either; (a) this copyright and permission notice appear with all copies; of the Data Files or Software, or; (b) this copyright and permission notice appear in associated; Documentation. THE DATA FILES AND SOFTWARE ARE PROVIDED ""AS IS"", WITHOUT WARRANTY OF; ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE; WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND; NONINFRINGEMENT OF THIRD PARTY RIGHTS.; IN NO EVENT SHALL THE COPYRIGHT HOLDER OR HOLDERS INCLUDED IN THIS; NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL INDIRECT OR CONSEQUENTIAL; DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,; DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER; TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR; PERFORMANCE OF THE DATA FILES OR SOFTWARE. Except as contained in this notice, the name of a copyright holder; shall not be used in advertising or otherwise to promote the sale,; use or other dealings in these Data Files or Software without prior; written authorization of the copyright holder.; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/UnicodeNameToCodepointGenerated.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/UnicodeNameToCodepointGenerated.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VersionTuple.cpp:44,Availability,error,error,44,"// If we have characters left over, it's an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/VersionTuple.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VersionTuple.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp:426,Integrability,interface,interface,426,"//===- VirtualFileSystem.cpp - Virtual File System Layer ------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the VirtualFileSystem interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp:4,Integrability,Wrap,Wrapper,4,/// Wrapper around a raw file descriptor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp:330,Availability,down,down,330,"/// A file system according to your operating system.; /// This may be linked to the process's working directory, or maintain its own.; ///; /// Currently, its own working directory is emulated by storing the path and; /// sending absolute paths to llvm::sys::fs:: functions.; /// A more principled approach would be to push this down a level, modelling; /// the working dir as an llvm::sys::fs::WorkingDir or similar.; /// This would enable the use of openat()-style functions on some platforms.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp:95,Safety,safe,safe,95,"// If this FS has its own working dir, use it to make Path absolute.; // The returned twine is safe to use as long as both Storage and Path live.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp:62,Availability,echo,echo,62,"// The current working directory, without symlinks resolved. (echo $PWD).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp:3,Integrability,Synchroniz,Synchronize,3,// Synchronize added file systems by duplicating the working directory from; // the first one in the list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp:24,Integrability,synchroniz,synchronized,24,"// All file systems are synchronized, just take the first working directory.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp:4,Energy Efficiency,Adapt,Adapt,4,/// Adapt a InMemoryFile for VFS' File interface. The goal is to make; /// \p InMemoryFileAdaptor mimic as much as possible the behavior of; /// \p RealFile.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp:39,Integrability,interface,interface,39,/// Adapt a InMemoryFile for VFS' File interface. The goal is to make; /// \p InMemoryFileAdaptor mimic as much as possible the behavior of; /// \p RealFile.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp:4,Modifiability,Adapt,Adapt,4,/// Adapt a InMemoryFile for VFS' File interface. The goal is to make; /// \p InMemoryFileAdaptor mimic as much as possible the behavior of; /// \p RealFile.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp:99,Safety,avoid,avoids,99,"// namespace detail; // The UniqueID of in-memory files is derived from path and content.; // This avoids difficulties in creating exactly equivalent in-memory FSes,; // as often needed in multithreaded programs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp:52,Security,access,accessible,52,"// Any intermediate directories we create should be accessible by; // the owner, even if Perms says otherwise for the final path.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp:38,Energy Efficiency,allocate,allocated,38,// When we have a file provide a heap-allocated wrapper for the memory buffer; // to match the ownership semantics for File.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp:48,Integrability,wrap,wrapper,48,// When we have a file provide a heap-allocated wrapper for the memory buffer; // to match the ownership semantics for File.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp:4,Energy Efficiency,Adapt,Adaptor,4,/// Adaptor from InMemoryDir::iterator to directory_iterator.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp:4,Modifiability,Adapt,Adaptor,4,/// Adaptor from InMemoryDir::iterator to directory_iterator.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp:3,Safety,Detect,Detect,3,// Detect the path style in use by checking the first separator.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp:9,Safety,detect,detect,9,// First detect the path style in use by checking the first separator.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp:16,Availability,error,error,16,/// Whether the error and entry specify a file/directory that was not found.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp:3,Deployability,Update,Update,3,// Update the paths in the results to use the virtual directory's path.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp:12,Availability,error,error,12,// false on error,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp:12,Availability,error,error,12,// false on error,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp:12,Availability,error,error,12,// false on error,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp:12,Availability,error,error,12,// false on error,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp:165,Availability,redundant,redundant,165,"// Empty directories could be present in the YAML as a way to; // describe a file for a current directory after some of its subdir; // is parsed. This only leads to redundant walks, ignore it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp:165,Safety,redund,redundant,165,"// Empty directories could be present in the YAML as a way to; // describe a file for a current directory after some of its subdir; // is parsed. This only leads to redundant walks, ignore it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp:17,Deployability,configurat,configuration,17,// check invalid configuration,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp:17,Modifiability,config,configuration,17,// check invalid configuration,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp:12,Availability,error,error,12,// false on error,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp:9,Deployability,configurat,configuration,9,// Parse configuration and 'roots',MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp:9,Modifiability,config,configuration,9,// Parse configuration and 'roots',MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp:151,Performance,cache,cache,151,// Use the YAML path from -ivfsoverlay to compute the dir to be prefixed; // to each 'external-contents' path.; //; // Example:; // -ivfsoverlay dummy.cache/vfs/vfs.yaml; // yields:; // FS->OverlayFileDir => /<absolute_path_to>/dummy.cache/vfs; //,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp:234,Performance,cache,cache,234,// Use the YAML path from -ivfsoverlay to compute the dir to be prefixed; // to each 'external-contents' path.; //; // Example:; // -ivfsoverlay dummy.cache/vfs/vfs.yaml; // yields:; // FS->OverlayFileDir => /<absolute_path_to>/dummy.cache/vfs; //,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp:51,Security,expose,exposes,51,"// The path has been mapped by some nested VFS and exposes an external path,; // don't override it with the original path.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp:19,Integrability,wrap,wrapper,19,/// Provide a file wrapper with an overriden status.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp:42,Deployability,update,update,42,// See \c getRedirectedFileStatus - don't update path if it's exposing an; // external path.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/VirtualFileSystem.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/WithColor.cpp:3,Safety,Detect,Detect,3,// Detect color from terminal type unless the user passed the --color option.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/WithColor.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/WithColor.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/xxhash.cpp:1273,Integrability,CONTRACT,CONTRACT,1273,"/*; * xxHash - Fast Hash algorithm; * Copyright (C) 2012-2021, Yann Collet; *; * BSD 2-Clause License (http://www.opensource.org/licenses/bsd-license.php); *; * Redistribution and use in source and binary forms, with or without; * modification, are permitted provided that the following conditions are; * met:; *; * * Redistributions of source code must retain the above copyright; * notice, this list of conditions and the following disclaimer.; * * Redistributions in binary form must reproduce the above; * copyright notice, this list of conditions and the following disclaimer; * in the documentation and/or other materials provided with the; * distribution.; *; * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS; * ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT; * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR; * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT; * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,; * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT; * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,; * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY; * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT; * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE; * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.; *; * You can contact the author at :; * - xxHash homepage: http://www.xxhash.com; * - xxHash source repository : https://github.com/Cyan4973/xxHash; */; // xxhash64 is based on commit d2df04efcbef7d7f6886d345861e5dfda4edacc1. Removed; // everything but a simple interface for computing xxh64.; // xxh3_64bits is based on commit d5891596637d21366b9b1dcf2c0007a3edb26a9e (July; // 2023).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/xxhash.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/xxhash.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/xxhash.cpp:1717,Integrability,interface,interface,1717,"/*; * xxHash - Fast Hash algorithm; * Copyright (C) 2012-2021, Yann Collet; *; * BSD 2-Clause License (http://www.opensource.org/licenses/bsd-license.php); *; * Redistribution and use in source and binary forms, with or without; * modification, are permitted provided that the following conditions are; * met:; *; * * Redistributions of source code must retain the above copyright; * notice, this list of conditions and the following disclaimer.; * * Redistributions in binary form must reproduce the above; * copyright notice, this list of conditions and the following disclaimer; * in the documentation and/or other materials provided with the; * distribution.; *; * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS; * ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT; * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR; * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT; * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,; * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT; * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,; * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY; * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT; * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE; * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.; *; * You can contact the author at :; * - xxHash homepage: http://www.xxhash.com; * - xxHash source repository : https://github.com/Cyan4973/xxHash; */; // xxhash64 is based on commit d2df04efcbef7d7f6886d345861e5dfda4edacc1. Removed; // everything but a simple interface for computing xxh64.; // xxh3_64bits is based on commit d5891596637d21366b9b1dcf2c0007a3edb26a9e (July; // 2023).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/xxhash.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/xxhash.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/xxhash.cpp:20,Security,Hash,Hash,20,"/*; * xxHash - Fast Hash algorithm; * Copyright (C) 2012-2021, Yann Collet; *; * BSD 2-Clause License (http://www.opensource.org/licenses/bsd-license.php); *; * Redistribution and use in source and binary forms, with or without; * modification, are permitted provided that the following conditions are; * met:; *; * * Redistributions of source code must retain the above copyright; * notice, this list of conditions and the following disclaimer.; * * Redistributions in binary form must reproduce the above; * copyright notice, this list of conditions and the following disclaimer; * in the documentation and/or other materials provided with the; * distribution.; *; * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS; * ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT; * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR; * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT; * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,; * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT; * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,; * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY; * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT; * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE; * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.; *; * You can contact the author at :; * - xxHash homepage: http://www.xxhash.com; * - xxHash source repository : https://github.com/Cyan4973/xxHash; */; // xxhash64 is based on commit d2df04efcbef7d7f6886d345861e5dfda4edacc1. Removed; // everything but a simple interface for computing xxh64.; // xxh3_64bits is based on commit d5891596637d21366b9b1dcf2c0007a3edb26a9e (July; // 2023).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/xxhash.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/xxhash.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/xxhash.cpp:1710,Usability,simpl,simple,1710,"/*; * xxHash - Fast Hash algorithm; * Copyright (C) 2012-2021, Yann Collet; *; * BSD 2-Clause License (http://www.opensource.org/licenses/bsd-license.php); *; * Redistribution and use in source and binary forms, with or without; * modification, are permitted provided that the following conditions are; * met:; *; * * Redistributions of source code must retain the above copyright; * notice, this list of conditions and the following disclaimer.; * * Redistributions in binary form must reproduce the above; * copyright notice, this list of conditions and the following disclaimer; * in the documentation and/or other materials provided with the; * distribution.; *; * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS; * ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT; * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR; * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT; * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,; * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT; * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,; * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY; * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT; * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE; * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.; *; * You can contact the author at :; * - xxHash homepage: http://www.xxhash.com; * - xxHash source repository : https://github.com/Cyan4973/xxHash; */; // xxhash64 is based on commit d2df04efcbef7d7f6886d345861e5dfda4edacc1. Removed; // everything but a simple interface for computing xxh64.; // xxh3_64bits is based on commit d5891596637d21366b9b1dcf2c0007a3edb26a9e (July; // 2023).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/xxhash.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/xxhash.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/xxhash.cpp:39,Security,hash,hash,39,"/* For mid range keys, XXH3 uses a Mum-hash variant. */",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/xxhash.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/xxhash.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/xxhash.cpp:23,Security,hash,hash,23,/* converge into final hash */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/xxhash.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/xxhash.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:24,Usability,Simpl,Simple,24,"//===- YAMLParser.cpp - Simple YAML parser --------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a YAML parser.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:61,Testability,log,logical,61,/// A string of length 0 or more whose begin() points to the logical location; /// of the token in the input.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:33,Usability,simpl,simple,33,"/// This struct is used to track simple keys.; ///; /// Simple keys are handled by creating an entry in SimpleKeys for each Token; /// which could legally be the start of a simple key. When peekNext is called,; /// if the Token To be returned is referenced by a SimpleKey, we continue; /// tokenizing until that potential simple key has either been found to not be; /// a simple key (we moved on to the next line or went further than 1024 chars).; /// Or when we run into a Value, and then insert a Key token (and possibly; /// others) before the SimpleKey's Tok.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:56,Usability,Simpl,Simple,56,"/// This struct is used to track simple keys.; ///; /// Simple keys are handled by creating an entry in SimpleKeys for each Token; /// which could legally be the start of a simple key. When peekNext is called,; /// if the Token To be returned is referenced by a SimpleKey, we continue; /// tokenizing until that potential simple key has either been found to not be; /// a simple key (we moved on to the next line or went further than 1024 chars).; /// Or when we run into a Value, and then insert a Key token (and possibly; /// others) before the SimpleKey's Tok.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:104,Usability,Simpl,SimpleKeys,104,"/// This struct is used to track simple keys.; ///; /// Simple keys are handled by creating an entry in SimpleKeys for each Token; /// which could legally be the start of a simple key. When peekNext is called,; /// if the Token To be returned is referenced by a SimpleKey, we continue; /// tokenizing until that potential simple key has either been found to not be; /// a simple key (we moved on to the next line or went further than 1024 chars).; /// Or when we run into a Value, and then insert a Key token (and possibly; /// others) before the SimpleKey's Tok.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:173,Usability,simpl,simple,173,"/// This struct is used to track simple keys.; ///; /// Simple keys are handled by creating an entry in SimpleKeys for each Token; /// which could legally be the start of a simple key. When peekNext is called,; /// if the Token To be returned is referenced by a SimpleKey, we continue; /// tokenizing until that potential simple key has either been found to not be; /// a simple key (we moved on to the next line or went further than 1024 chars).; /// Or when we run into a Value, and then insert a Key token (and possibly; /// others) before the SimpleKey's Tok.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:262,Usability,Simpl,SimpleKey,262,"/// This struct is used to track simple keys.; ///; /// Simple keys are handled by creating an entry in SimpleKeys for each Token; /// which could legally be the start of a simple key. When peekNext is called,; /// if the Token To be returned is referenced by a SimpleKey, we continue; /// tokenizing until that potential simple key has either been found to not be; /// a simple key (we moved on to the next line or went further than 1024 chars).; /// Or when we run into a Value, and then insert a Key token (and possibly; /// others) before the SimpleKey's Tok.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:322,Usability,simpl,simple,322,"/// This struct is used to track simple keys.; ///; /// Simple keys are handled by creating an entry in SimpleKeys for each Token; /// which could legally be the start of a simple key. When peekNext is called,; /// if the Token To be returned is referenced by a SimpleKey, we continue; /// tokenizing until that potential simple key has either been found to not be; /// a simple key (we moved on to the next line or went further than 1024 chars).; /// Or when we run into a Value, and then insert a Key token (and possibly; /// others) before the SimpleKey's Tok.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:372,Usability,simpl,simple,372,"/// This struct is used to track simple keys.; ///; /// Simple keys are handled by creating an entry in SimpleKeys for each Token; /// which could legally be the start of a simple key. When peekNext is called,; /// if the Token To be returned is referenced by a SimpleKey, we continue; /// tokenizing until that potential simple key has either been found to not be; /// a simple key (we moved on to the next line or went further than 1024 chars).; /// Or when we run into a Value, and then insert a Key token (and possibly; /// others) before the SimpleKey's Tok.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:547,Usability,Simpl,SimpleKey,547,"/// This struct is used to track simple keys.; ///; /// Simple keys are handled by creating an entry in SimpleKeys for each Token; /// which could legally be the start of a simple key. When peekNext is called,; /// if the Token To be returned is referenced by a SimpleKey, we continue; /// tokenizing until that potential simple key has either been found to not be; /// a simple key (we moved on to the next line or went further than 1024 chars).; /// Or when we run into a Value, and then insert a Key token (and possibly; /// others) before the SimpleKey's Tok.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:202,Availability,error,error,202,// end anonymous namespace; /// The Unicode scalar value of a UTF-8 minimal well-formed code unit; /// subsequence and the subsequence's length in code units (uint8_t).; /// A length of 0 represents an error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:45,Performance,queue,queue,45,/// Parse the next token and pop it from the queue.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:17,Availability,error,error,17,// propagate the error if possible,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:24,Availability,error,errors,24,"// Don't print out more errors after the first one we encounter. The rest; // are just the result of the first, and have no meaning.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:23,Availability,error,error,23,/// Returns true if an error occurred while parsing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:58,Deployability,update,updates,58,/// Scan ns-uri-char[39]s starting at Cur.; ///; /// This updates Cur and Column while scanning.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:163,Deployability,update,updates,163,/// Consume a minimal well-formed code unit subsequence starting at; /// \a Cur. Return false if it is not the same Unicode scalar value as; /// \a Expected. This updates \a Column.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:39,Deployability,Update,Updates,39,/// Skip \a Distance UTF-8 code units. Updates \a Cur and \a Column.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:94,Safety,safe,safe,94,"/// Return true if the minimal well-formed code unit subsequence at; /// Pos is considered a ""safe"" character for plain scalars.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:54,Usability,Simpl,SimpleKey,54,"/// If IsSimpleKeyAllowed, create and push_back a new SimpleKey.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:11,Usability,simpl,simple,11,/// Remove simple keys that can no longer be valid simple keys.; ///; /// Invalid simple keys are not on the current line or are further than 1024; /// columns back.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:51,Usability,simpl,simple,51,/// Remove simple keys that can no longer be valid simple keys.; ///; /// Invalid simple keys are not on the current line or are further than 1024; /// columns back.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:82,Usability,simpl,simple,82,/// Remove simple keys that can no longer be valid simple keys.; ///; /// Invalid simple keys are not on the current line or are further than 1024; /// columns back.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:15,Usability,simpl,simple,15,/// Remove all simple keys on FlowLevel \a Level.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:241,Availability,error,error,241,/// Scan a block scalar style indicator and header.; ///; /// Note: This is distinct from scanBlockScalarHeader to mirror the fact that; /// YAML does not consider the style indicator to be a part of the header.; ///; /// Return false if an error occurred.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:61,Availability,error,error,61,/// Scan a block scalar header.; ///; /// Return false if an error occurred.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:83,Availability,error,error,83,/// Look for the indentation level of a block scalar.; ///; /// Return false if an error occurred.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:88,Availability,error,error,88,/// Scan the indentation of a text line in a block scalar.; ///; /// Return false if an error occurred.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:41,Usability,simpl,simple,41,/// Can the next token be the start of a simple key?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:15,Availability,error,error,15,/// True if an error has occurred.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:59,Integrability,message,messages,59,/// Should colors be used when printing out the diagnostic messages?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:4,Performance,Queue,Queue,4,/// Queue of tokens. This is required to queue up tokens while looking; /// for the end of a simple key. And for cases where a single character; /// can produce multiple tokens (e.g. BlockEnd).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:41,Performance,queue,queue,41,/// Queue of tokens. This is required to queue up tokens while looking; /// for the end of a simple key. And for cases where a single character; /// can produce multiple tokens (e.g. BlockEnd).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:93,Usability,simpl,simple,93,/// Queue of tokens. This is required to queue up tokens while looking; /// for the end of a simple key. And for cases where a single character; /// can produce multiple tokens (e.g. BlockEnd).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:14,Usability,simpl,simple,14,/// Potential simple keys.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:10,Availability,Error,Error,10,// FIXME: Error reporting.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:38,Usability,simpl,simple,38,"// If the current token is a possible simple key, keep parsing until we; // can confirm.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:43,Availability,error,error,43,// TokenQueue can be empty if there was an error getting the next token.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:25,Usability,simpl,simple,25,// New lines may start a simple key.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:23,Usability,simpl,simple,23,// [ and { may begin a simple key.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:33,Usability,simpl,simple,33,// And may also be followed by a simple key.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:95,Performance,queue,queue,95,"// If the previous token could have been a simple key, insert the key token; // into the token queue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:43,Usability,simpl,simple,43,"// If the previous token could have been a simple key, insert the key token; // into the token queue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:32,Performance,perform,performance,32,// Forbidding inlining improves performance by roughly 20%.; // FIXME: Remove once llvm optimizes this to the faster version without hints.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:88,Performance,optimiz,optimizes,88,// Forbidding inlining improves performance by roughly 20%.; // FIXME: Remove once llvm optimizes this to the faster version without hints.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:24,Usability,simpl,simple,24,// Plain scalars can be simple keys.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:28,Usability,simpl,simple,28,// Alias and anchors can be simple keys.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:111,Integrability,depend,depending,111,"/// Get the number of line breaks after chomping.; ///; /// Return the number of trailing line breaks to emit, depending on; /// \p ChompingIndicator.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:25,Usability,simpl,simple,25,// New lines may start a simple key.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:15,Usability,simpl,simple,15,// Tags can be simple keys.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:40,Integrability,rout,routine,40,"/// parseScalarValue - A common parsing routine for all flow scalar styles.; /// It handles line break characters by itself, adds regular content characters; /// to the result, and forwards escaped sequences to the provided routine for; /// the style-specific processing.; ///; /// \param UnquotedValue - An input value without quotation marks.; /// \param Storage - A storage for the result if the input value is multiline or; /// contains escaped characters.; /// \param LookupChars - A set of special characters to search in the input; /// string. Should include line break characters and the escape character; /// specific for the processing scalar style, if any.; /// \param UnescapeCallback - This is called when the escape character is found; /// in the input.; /// \returns - The unfolded and unescaped value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:224,Integrability,rout,routine,224,"/// parseScalarValue - A common parsing routine for all flow scalar styles.; /// It handles line break characters by itself, adds regular content characters; /// to the result, and forwards escaped sequences to the provided routine for; /// the style-specific processing.; ///; /// \param UnquotedValue - An input value without quotation marks.; /// \param Storage - A storage for the result if the input value is multiline or; /// contains escaped characters.; /// \param LookupChars - A set of special characters to search in the input; /// string. Should include line break characters and the escape character; /// specific for the processing scalar style, if any.; /// \param UnescapeCallback - This is called when the escape character is found; /// in the input.; /// \returns - The unfolded and unescaped value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:16,Availability,error,error,16,// TODO: Report error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:16,Availability,error,error,16,// TODO: Report error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:16,Availability,error,error,16,// TODO: Report error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:16,Availability,error,error,16,// TODO: Report error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:16,Availability,error,error,16,// TODO: Report error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:16,Availability,error,error,16,// TODO: Report error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:49,Safety,detect,detect,49,// KeyValueNode eats the TK_Key. That way it can detect null keys.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:6,Availability,error,error,6,// An error occurred.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp:6,Availability,error,error,6,// An error occurred.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLTraits.cpp:56,Availability,error,error,56,"// CurrentNode is null for empty documents, which is an error in case required; // nodes are present.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLTraits.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLTraits.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLTraits.cpp:33,Availability,error,error,33,// Any other type of HNode is an error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLTraits.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLTraits.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLTraits.cpp:246,Safety,detect,detects,246,"// Normally, with an optional key/value where the value is an empty sequence,; // the whole key/value can be not written. But, that produces wrong yaml; // if the key/value is the only thing in the map and the map is used in; // a sequence. This detects if the this sequence is the first key/value; // in map that itself is embedded in a sequence.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/YAMLTraits.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/YAMLTraits.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Z3Solver.cpp:4,Deployability,Configurat,Configuration,4,/// Configuration class for Z3,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Z3Solver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Z3Solver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Z3Solver.cpp:4,Modifiability,Config,Configuration,4,/// Configuration class for Z3,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Z3Solver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Z3Solver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Z3Solver.cpp:7,Safety,timeout,timeout,7,// Set timeout to 15000ms = 15s,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Z3Solver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Z3Solver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Z3Solver.cpp:50,Availability,error,errors,50,// end class Z3Config; // Function used to report errors,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Z3Solver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Z3Solver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Z3Solver.cpp:4,Integrability,Wrap,Wrapper,4,/// Wrapper for Z3 context,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Z3Solver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Z3Solver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Z3Solver.cpp:7,Availability,error,error,7,// The error function is set here because the context is the first object; // created by the backend,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Z3Solver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Z3Solver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Z3Solver.cpp:28,Integrability,Wrap,Wrapper,28,// end class Z3Context; /// Wrapper for Z3 Sort,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Z3Solver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Z3Solver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Z3Solver.cpp:3,Performance,Cache,Cache,3,// Cache Sorts,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Z3Solver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Z3Solver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Z3Solver.cpp:3,Performance,Cache,Cache,3,// Cache Exprs,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Z3Solver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Z3Solver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Z3Solver.cpp:47,Performance,cache,cache,47,"// Given an SMTSort, adds/retrives it from the cache and returns; // an SMTSortRef to the SMTSort in the cache",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Z3Solver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Z3Solver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Z3Solver.cpp:105,Performance,cache,cache,105,"// Given an SMTSort, adds/retrives it from the cache and returns; // an SMTSortRef to the SMTSort in the cache",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Z3Solver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Z3Solver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Z3Solver.cpp:47,Performance,cache,cache,47,"// Given an SMTExpr, adds/retrives it from the cache and returns; // an SMTExprRef to the SMTExpr in the cache",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Z3Solver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Z3Solver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Z3Solver.cpp:105,Performance,cache,cache,105,"// Given an SMTExpr, adds/retrives it from the cache and returns; // an SMTExprRef to the SMTExpr in the cache",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Z3Solver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Z3Solver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:92,Deployability,Release,Released,92,/*===-- blake3.c - BLAKE3 C Implementation ------------------------*- C -*-===*\; |* *|; |* Released into the public domain with CC0 1.0 *|; |* See 'llvm/lib/Support/BLAKE3/LICENSE' for info. *|; |* SPDX-License-Identifier: CC0-1.0 *|; |* *|; \*===----------------------------------------------------------------------===*/,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:80,Integrability,interface,interface,80,"// Chaining values within a given chunk (specifically the compress_in_place; // interface) are represented as words. This avoids unnecessary bytes<->words; // conversion overhead in the portable implementation. However, the hash_many; // interface handles both user input and parent node blocks, so it accepts; // bytes. For that reason, chaining values in the CV stack are represented as; // bytes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:238,Integrability,interface,interface,238,"// Chaining values within a given chunk (specifically the compress_in_place; // interface) are represented as words. This avoids unnecessary bytes<->words; // conversion overhead in the portable implementation. However, the hash_many; // interface handles both user input and parent node blocks, so it accepts; // bytes. For that reason, chaining values in the CV stack are represented as; // bytes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:186,Modifiability,portab,portable,186,"// Chaining values within a given chunk (specifically the compress_in_place; // interface) are represented as words. This avoids unnecessary bytes<->words; // conversion overhead in the portable implementation. However, the hash_many; // interface handles both user input and parent node blocks, so it accepts; // bytes. For that reason, chaining values in the CV stack are represented as; // bytes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:122,Safety,avoid,avoids,122,"// Chaining values within a given chunk (specifically the compress_in_place; // interface) are represented as words. This avoids unnecessary bytes<->words; // conversion overhead in the portable implementation. However, the hash_many; // interface handles both user input and parent node blocks, so it accepts; // bytes. For that reason, chaining values in the CV stack are represented as; // bytes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:130,Energy Efficiency,power,power-of-,130,"// Given some input larger than one chunk, return the number of bytes that; // should go in the left subtree. This is the largest power-of-2 number of; // chunks that leaves at least 1 byte for the right subtree.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:27,Security,hash,hash,27,// Use SIMD parallelism to hash up to MAX_SIMD_DEGREE chunks at the same time; // on a single thread. Write out the chunk chaining values and return the; // number of chunks hashed. These chunks are never the root and never empty;; // those cases use a different codepath.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:174,Security,hash,hashed,174,// Use SIMD parallelism to hash up to MAX_SIMD_DEGREE chunks at the same time; // on a single thread. Write out the chunk chaining values and return the; // number of chunks hashed. These chunks are never the root and never empty;; // those cases use a different codepath.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:103,Integrability,message,message,103,"// Hash the remaining partial chunk, if there is one. Note that the empty; // chunk (meaning the empty message) is a different codepath.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:3,Security,Hash,Hash,3,"// Hash the remaining partial chunk, if there is one. Note that the empty; // chunk (meaning the empty message) is a different codepath.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:27,Security,hash,hash,27,"// Use SIMD parallelism to hash up to MAX_SIMD_DEGREE parents at the same time; // on a single thread. Write out the parent chaining values and return the; // number of parents hashed. (If there's an odd input chaining value left over,; // return it as an additional output.) These parents are never the root and; // never empty; those cases use a different codepath.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:177,Security,hash,hashed,177,"// Use SIMD parallelism to hash up to MAX_SIMD_DEGREE parents at the same time; // on a single thread. Write out the parent chaining values and return the; // number of parents hashed. (If there's an odd input chaining value left over,; // return it as an additional output.) These parents are never the root and; // never empty; those cases use a different codepath.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:934,Deployability,update,update,934,"// The wide helper function returns (writes out) an array of chaining values; // and returns the length of that array. The number of chaining values returned; // is the dyanmically detected SIMD degree, at most MAX_SIMD_DEGREE. Or fewer,; // if the input is shorter than that many chunks. The reason for maintaining a; // wide array of chaining values going back up the tree, is to allow the; // implementation to hash as many parents in parallel as possible.; //; // As a special case when the SIMD degree is 1, this function will still return; // at least 2 outputs. This guarantees that this function doesn't perform the; // root compression. (If it did, it would use the wrong flags, and also we; // wouldn't be able to implement exendable ouput.) Note that this function is; // not used when the whole input is only 1 chunk long; that's a different; // codepath.; //; // Why not just have the caller split the input on the first update(), instead; // of implementing this special rule? Because we don't want to limit SIMD or; // multi-threading parallelism for that update().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:1071,Deployability,update,update,1071,"// The wide helper function returns (writes out) an array of chaining values; // and returns the length of that array. The number of chaining values returned; // is the dyanmically detected SIMD degree, at most MAX_SIMD_DEGREE. Or fewer,; // if the input is shorter than that many chunks. The reason for maintaining a; // wide array of chaining values going back up the tree, is to allow the; // implementation to hash as many parents in parallel as possible.; //; // As a special case when the SIMD degree is 1, this function will still return; // at least 2 outputs. This guarantees that this function doesn't perform the; // root compression. (If it did, it would use the wrong flags, and also we; // wouldn't be able to implement exendable ouput.) Note that this function is; // not used when the whole input is only 1 chunk long; that's a different; // codepath.; //; // Why not just have the caller split the input on the first update(), instead; // of implementing this special rule? Because we don't want to limit SIMD or; // multi-threading parallelism for that update().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:612,Performance,perform,perform,612,"// The wide helper function returns (writes out) an array of chaining values; // and returns the length of that array. The number of chaining values returned; // is the dyanmically detected SIMD degree, at most MAX_SIMD_DEGREE. Or fewer,; // if the input is shorter than that many chunks. The reason for maintaining a; // wide array of chaining values going back up the tree, is to allow the; // implementation to hash as many parents in parallel as possible.; //; // As a special case when the SIMD degree is 1, this function will still return; // at least 2 outputs. This guarantees that this function doesn't perform the; // root compression. (If it did, it would use the wrong flags, and also we; // wouldn't be able to implement exendable ouput.) Note that this function is; // not used when the whole input is only 1 chunk long; that's a different; // codepath.; //; // Why not just have the caller split the input on the first update(), instead; // of implementing this special rule? Because we don't want to limit SIMD or; // multi-threading parallelism for that update().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:1034,Performance,multi-thread,multi-threading,1034,"// The wide helper function returns (writes out) an array of chaining values; // and returns the length of that array. The number of chaining values returned; // is the dyanmically detected SIMD degree, at most MAX_SIMD_DEGREE. Or fewer,; // if the input is shorter than that many chunks. The reason for maintaining a; // wide array of chaining values going back up the tree, is to allow the; // implementation to hash as many parents in parallel as possible.; //; // As a special case when the SIMD degree is 1, this function will still return; // at least 2 outputs. This guarantees that this function doesn't perform the; // root compression. (If it did, it would use the wrong flags, and also we; // wouldn't be able to implement exendable ouput.) Note that this function is; // not used when the whole input is only 1 chunk long; that's a different; // codepath.; //; // Why not just have the caller split the input on the first update(), instead; // of implementing this special rule? Because we don't want to limit SIMD or; // multi-threading parallelism for that update().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:181,Safety,detect,detected,181,"// The wide helper function returns (writes out) an array of chaining values; // and returns the length of that array. The number of chaining values returned; // is the dyanmically detected SIMD degree, at most MAX_SIMD_DEGREE. Or fewer,; // if the input is shorter than that many chunks. The reason for maintaining a; // wide array of chaining values going back up the tree, is to allow the; // implementation to hash as many parents in parallel as possible.; //; // As a special case when the SIMD degree is 1, this function will still return; // at least 2 outputs. This guarantees that this function doesn't perform the; // root compression. (If it did, it would use the wrong flags, and also we; // wouldn't be able to implement exendable ouput.) Note that this function is; // not used when the whole input is only 1 chunk long; that's a different; // codepath.; //; // Why not just have the caller split the input on the first update(), instead; // of implementing this special rule? Because we don't want to limit SIMD or; // multi-threading parallelism for that update().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:414,Security,hash,hash,414,"// The wide helper function returns (writes out) an array of chaining values; // and returns the length of that array. The number of chaining values returned; // is the dyanmically detected SIMD degree, at most MAX_SIMD_DEGREE. Or fewer,; // if the input is shorter than that many chunks. The reason for maintaining a; // wide array of chaining values going back up the tree, is to allow the; // implementation to hash as many parents in parallel as possible.; //; // As a special case when the SIMD degree is 1, this function will still return; // at least 2 outputs. This guarantees that this function doesn't perform the; // root compression. (If it did, it would use the wrong flags, and also we; // wouldn't be able to implement exendable ouput.) Note that this function is; // not used when the whole input is only 1 chunk long; that's a different; // codepath.; //; // Why not just have the caller split the input on the first update(), instead; // of implementing this special rule? Because we don't want to limit SIMD or; // multi-threading parallelism for that update().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:121,Performance,multi-thread,multi-threading,121,"// Note that the single chunk case does *not* bump the SIMD degree up to 2; // when it is 1. If this implementation adds multi-threading in the future,; // this gives us the option of multi-threading even the 2-chunk case, which; // can help performance on smaller platforms.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:184,Performance,multi-thread,multi-threading,184,"// Note that the single chunk case does *not* bump the SIMD degree up to 2; // when it is 1. If this implementation adds multi-threading in the future,; // this gives us the option of multi-threading even the 2-chunk case, which; // can help performance on smaller platforms.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:242,Performance,perform,performance,242,"// Note that the single chunk case does *not* bump the SIMD degree up to 2; // when it is 1. If this implementation adds multi-threading in the future,; // this gives us the option of multi-threading even the 2-chunk case, which; // can help performance on smaller platforms.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:188,Energy Efficiency,power,power,188,"// With more than simd_degree chunks, we need to recurse. Start by dividing; // the input into left and right subtrees. (Note that this is only optimal; // as long as the SIMD degree is a power of 2. If we ever get a SIMD degree; // of 3 or something, we'll need a more complicated strategy.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:40,Performance,multi-thread,multi-threading,40,"// Recurse! If this implementation adds multi-threading support in the; // future, this is where it will go.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:108,Availability,down,down,108,"// Hash a subtree with compress_subtree_wide(), and then condense the resulting; // list of chaining values down to a single parent node. Don't compress that; // last parent node, however. Instead, return its message bytes (the; // concatenated chaining values of its children). This is necessary when the; // first call to update() supplies a complete subtree, because the topmost; // parent node of that subtree could end up being the root. It's also necessary; // for extended output in the general case.; //; // As with compress_subtree_wide(), this function is not used on inputs of 1; // chunk or less. That's a different codepath.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:324,Deployability,update,update,324,"// Hash a subtree with compress_subtree_wide(), and then condense the resulting; // list of chaining values down to a single parent node. Don't compress that; // last parent node, however. Instead, return its message bytes (the; // concatenated chaining values of its children). This is necessary when the; // first call to update() supplies a complete subtree, because the topmost; // parent node of that subtree could end up being the root. It's also necessary; // for extended output in the general case.; //; // As with compress_subtree_wide(), this function is not used on inputs of 1; // chunk or less. That's a different codepath.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:209,Integrability,message,message,209,"// Hash a subtree with compress_subtree_wide(), and then condense the resulting; // list of chaining values down to a single parent node. Don't compress that; // last parent node, however. Instead, return its message bytes (the; // concatenated chaining values of its children). This is necessary when the; // first call to update() supplies a complete subtree, because the topmost; // parent node of that subtree could end up being the root. It's also necessary; // for extended output in the general case.; //; // As with compress_subtree_wide(), this function is not used on inputs of 1; // chunk or less. That's a different codepath.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:471,Modifiability,extend,extended,471,"// Hash a subtree with compress_subtree_wide(), and then condense the resulting; // list of chaining values down to a single parent node. Don't compress that; // last parent node, however. Instead, return its message bytes (the; // concatenated chaining values of its children). This is necessary when the; // first call to update() supplies a complete subtree, because the topmost; // parent node of that subtree could end up being the root. It's also necessary; // for extended output in the general case.; //; // As with compress_subtree_wide(), this function is not used on inputs of 1; // chunk or less. That's a different codepath.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:3,Security,Hash,Hash,3,"// Hash a subtree with compress_subtree_wide(), and then condense the resulting; // list of chaining values down to a single parent node. Don't compress that; // last parent node, however. Instead, return its message bytes (the; // concatenated chaining values of its children). This is necessary when the; // first call to update() supplies a complete subtree, because the topmost; // parent node of that subtree could end up being the root. It's also necessary; // for extended output in the general case.; //; // As with compress_subtree_wide(), this function is not used on inputs of 1; // chunk or less. That's a different codepath.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:74,Testability,assert,asserted,74,"// The second half of this loop condition is always true, and we just; // asserted it above. But GCC can't tell that it's always true, and if NDEBUG; // is set on platforms where MAX_SIMD_DEGREE_OR_2 == 2, GCC emits spurious; // warnings here. GCC 8.5 is particularly sensitive, so if you're changing; // this code, test it against that version.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:316,Testability,test,test,316,"// The second half of this loop condition is always true, and we just; // asserted it above. But GCC can't tell that it's always true, and if NDEBUG; // is set on platforms where MAX_SIMD_DEGREE_OR_2 == 2, GCC emits spurious; // warnings here. GCC 8.5 is particularly sensitive, so if you're changing; // this code, test it against that version.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:311,Energy Efficiency,power,power-of-two,311,"// As described in hasher_push_cv() below, we do ""lazy merging"", delaying; // merges until right before the next CV is about to be added. This is; // different from the reference implementation. Another difference is that we; // aren't always merging 1 chunk at a time. Instead, each CV might represent; // any power-of-two number of chunks, as long as the smaller-above-larger stack; // order is maintained. Instead of the ""count the trailing 0-bits"" algorithm; // described in the spec, we use a ""count the total number of 1-bits"" variant; // that doesn't require us to retain the subtree size of the CV on top of the; // stack. The principle is the same: each CV that should remain in the stack is; // represented by a 1-bit in the total number of chunks (or bytes) so far.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:591,Deployability,update,update,591,"// In reference_impl.rs, we merge the new CV with existing CVs from the stack; // before pushing it. We can do that because we know more input is coming, so; // we know none of the merges are root.; //; // This setting is different. We want to feed as much input as possible to; // compress_subtree_wide(), without setting aside anything for the chunk_state.; // If the user gives us 64 KiB, we want to parallelize over all 64 KiB at once; // as a single subtree, if at all possible.; //; // This leads to two problems:; // 1) This 64 KiB input might be the only call that ever gets made to update.; // In this case, the root node of the 64 KiB subtree would be the root node; // of the whole tree, and it would need to be ROOT finalized. We can't; // compress it until we know.; // 2) This 64 KiB input might complete a larger tree, whose root node is; // similarly going to be the the root of the whole tree. For example, maybe; // we have 196 KiB (that is, 128 + 64) hashed so far. We can't compress the; // node at the root of the 256 KiB subtree until we know how to finalize it.; //; // The second problem is solved with ""lazy merging"". That is, when we're about; // to add a CV to the stack, we don't merge it with anything first, as the; // reference impl does. Instead we do merges using the *previous* CV that was; // added, which is sitting on top of the stack, and we put the new CV; // (unmerged) on top of the stack afterwards. This guarantees that we never; // merge the root node until finalize().; //; // Solving the first problem requires an additional tool,; // compress_subtree_to_parent_node(). That function always returns the top; // *two* chaining values of the subtree it's compressing. We then do lazy; // merging with each of them separately, so that the second CV will always; // remain unmerged. (That also helps us support extendable output when we're; // hashing an input all-at-once.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:1853,Modifiability,extend,extendable,1853,"// In reference_impl.rs, we merge the new CV with existing CVs from the stack; // before pushing it. We can do that because we know more input is coming, so; // we know none of the merges are root.; //; // This setting is different. We want to feed as much input as possible to; // compress_subtree_wide(), without setting aside anything for the chunk_state.; // If the user gives us 64 KiB, we want to parallelize over all 64 KiB at once; // as a single subtree, if at all possible.; //; // This leads to two problems:; // 1) This 64 KiB input might be the only call that ever gets made to update.; // In this case, the root node of the 64 KiB subtree would be the root node; // of the whole tree, and it would need to be ROOT finalized. We can't; // compress it until we know.; // 2) This 64 KiB input might complete a larger tree, whose root node is; // similarly going to be the the root of the whole tree. For example, maybe; // we have 196 KiB (that is, 128 + 64) hashed so far. We can't compress the; // node at the root of the 256 KiB subtree until we know how to finalize it.; //; // The second problem is solved with ""lazy merging"". That is, when we're about; // to add a CV to the stack, we don't merge it with anything first, as the; // reference impl does. Instead we do merges using the *previous* CV that was; // added, which is sitting on top of the stack, and we put the new CV; // (unmerged) on top of the stack afterwards. This guarantees that we never; // merge the root node until finalize().; //; // Solving the first problem requires an additional tool,; // compress_subtree_to_parent_node(). That function always returns the top; // *two* chaining values of the subtree it's compressing. We then do lazy; // merging with each of them separately, so that the second CV will always; // remain unmerged. (That also helps us support extendable output when we're; // hashing an input all-at-once.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:970,Security,hash,hashed,970,"// In reference_impl.rs, we merge the new CV with existing CVs from the stack; // before pushing it. We can do that because we know more input is coming, so; // we know none of the merges are root.; //; // This setting is different. We want to feed as much input as possible to; // compress_subtree_wide(), without setting aside anything for the chunk_state.; // If the user gives us 64 KiB, we want to parallelize over all 64 KiB at once; // as a single subtree, if at all possible.; //; // This leads to two problems:; // 1) This 64 KiB input might be the only call that ever gets made to update.; // In this case, the root node of the 64 KiB subtree would be the root node; // of the whole tree, and it would need to be ROOT finalized. We can't; // compress it until we know.; // 2) This 64 KiB input might complete a larger tree, whose root node is; // similarly going to be the the root of the whole tree. For example, maybe; // we have 196 KiB (that is, 128 + 64) hashed so far. We can't compress the; // node at the root of the 256 KiB subtree until we know how to finalize it.; //; // The second problem is solved with ""lazy merging"". That is, when we're about; // to add a CV to the stack, we don't merge it with anything first, as the; // reference impl does. Instead we do merges using the *previous* CV that was; // added, which is sitting on top of the stack, and we put the new CV; // (unmerged) on top of the stack afterwards. This guarantees that we never; // merge the root node until finalize().; //; // Solving the first problem requires an additional tool,; // compress_subtree_to_parent_node(). That function always returns the top; // *two* chaining values of the subtree it's compressing. We then do lazy; // merging with each of them separately, so that the second CV will always; // remain unmerged. (That also helps us support extendable output when we're; // hashing an input all-at-once.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:1886,Security,hash,hashing,1886,"// In reference_impl.rs, we merge the new CV with existing CVs from the stack; // before pushing it. We can do that because we know more input is coming, so; // we know none of the merges are root.; //; // This setting is different. We want to feed as much input as possible to; // compress_subtree_wide(), without setting aside anything for the chunk_state.; // If the user gives us 64 KiB, we want to parallelize over all 64 KiB at once; // as a single subtree, if at all possible.; //; // This leads to two problems:; // 1) This 64 KiB input might be the only call that ever gets made to update.; // In this case, the root node of the 64 KiB subtree would be the root node; // of the whole tree, and it would need to be ROOT finalized. We can't; // compress it until we know.; // 2) This 64 KiB input might complete a larger tree, whose root node is; // similarly going to be the the root of the whole tree. For example, maybe; // we have 196 KiB (that is, 128 + 64) hashed so far. We can't compress the; // node at the root of the 256 KiB subtree until we know how to finalize it.; //; // The second problem is solved with ""lazy merging"". That is, when we're about; // to add a CV to the stack, we don't merge it with anything first, as the; // reference impl does. Instead we do merges using the *previous* CV that was; // added, which is sitting on top of the stack, and we put the new CV; // (unmerged) on top of the stack afterwards. This guarantees that we never; // merge the root node until finalize().; //; // Solving the first problem requires an additional tool,; // compress_subtree_to_parent_node(). That function always returns the top; // *two* chaining values of the subtree it's compressing. We then do lazy; // merging with each of them separately, so that the second CV will always; // remain unmerged. (That also helps us support extendable output when we're; // hashing an input all-at-once.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:32,Safety,avoid,avoids,32,"// Explicitly checking for zero avoids causing UB by passing a null pointer; // to memcpy. This comes up in practice with things like:; // std::vector<uint8_t> v;; // blake3_hasher_update(&hasher, v.data(), v.size());",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:189,Security,hash,hasher,189,"// Explicitly checking for zero avoids causing UB by passing a null pointer; // to memcpy. This comes up in practice with things like:; // std::vector<uint8_t> v;; // blake3_hasher_update(&hasher, v.data(), v.size());",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:316,Energy Efficiency,power,power-of-,316,"// Now the chunk_state is clear, and we have more input. If there's more than; // a single chunk (so, definitely not the root chunk), hash the largest whole; // subtree we can, with the full benefits of SIMD (and maybe in the future,; // multi-threading) parallelism. Two restrictions:; // - The subtree has to be a power-of-2 number of chunks. Only subtrees along; // the right edge can be incomplete, and we don't know where the right edge; // is going to be until we get to finalize().; // - The subtree must evenly divide the total number of chunks up until this; // point (if total is not 0). If the current incomplete subtree is only; // waiting for 1 more chunk, we can't hash a subtree of 4 chunks. We have; // to complete the current subtree first.; // Because we might need to break up the input to form powers of 2, or to; // evenly divide what we already have, this part runs in a loop.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:814,Energy Efficiency,power,powers,814,"// Now the chunk_state is clear, and we have more input. If there's more than; // a single chunk (so, definitely not the root chunk), hash the largest whole; // subtree we can, with the full benefits of SIMD (and maybe in the future,; // multi-threading) parallelism. Two restrictions:; // - The subtree has to be a power-of-2 number of chunks. Only subtrees along; // the right edge can be incomplete, and we don't know where the right edge; // is going to be until we get to finalize().; // - The subtree must evenly divide the total number of chunks up until this; // point (if total is not 0). If the current incomplete subtree is only; // waiting for 1 more chunk, we can't hash a subtree of 4 chunks. We have; // to complete the current subtree first.; // Because we might need to break up the input to form powers of 2, or to; // evenly divide what we already have, this part runs in a loop.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:238,Performance,multi-thread,multi-threading,238,"// Now the chunk_state is clear, and we have more input. If there's more than; // a single chunk (so, definitely not the root chunk), hash the largest whole; // subtree we can, with the full benefits of SIMD (and maybe in the future,; // multi-threading) parallelism. Two restrictions:; // - The subtree has to be a power-of-2 number of chunks. Only subtrees along; // the right edge can be incomplete, and we don't know where the right edge; // is going to be until we get to finalize().; // - The subtree must evenly divide the total number of chunks up until this; // point (if total is not 0). If the current incomplete subtree is only; // waiting for 1 more chunk, we can't hash a subtree of 4 chunks. We have; // to complete the current subtree first.; // Because we might need to break up the input to form powers of 2, or to; // evenly divide what we already have, this part runs in a loop.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:134,Security,hash,hash,134,"// Now the chunk_state is clear, and we have more input. If there's more than; // a single chunk (so, definitely not the root chunk), hash the largest whole; // subtree we can, with the full benefits of SIMD (and maybe in the future,; // multi-threading) parallelism. Two restrictions:; // - The subtree has to be a power-of-2 number of chunks. Only subtrees along; // the right edge can be incomplete, and we don't know where the right edge; // is going to be until we get to finalize().; // - The subtree must evenly divide the total number of chunks up until this; // point (if total is not 0). If the current incomplete subtree is only; // waiting for 1 more chunk, we can't hash a subtree of 4 chunks. We have; // to complete the current subtree first.; // Because we might need to break up the input to form powers of 2, or to; // evenly divide what we already have, this part runs in a loop.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:679,Security,hash,hash,679,"// Now the chunk_state is clear, and we have more input. If there's more than; // a single chunk (so, definitely not the root chunk), hash the largest whole; // subtree we can, with the full benefits of SIMD (and maybe in the future,; // multi-threading) parallelism. Two restrictions:; // - The subtree has to be a power-of-2 number of chunks. Only subtrees along; // the right edge can be incomplete, and we don't know where the right edge; // is going to be until we get to finalize().; // - The subtree must evenly divide the total number of chunks up until this; // point (if total is not 0). If the current incomplete subtree is only; // waiting for 1 more chunk, we can't hash a subtree of 4 chunks. We have; // to complete the current subtree first.; // Because we might need to break up the input to form powers of 2, or to; // evenly divide what we already have, this part runs in a loop.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:26,Usability,clear,clear,26,"// Now the chunk_state is clear, and we have more input. If there's more than; // a single chunk (so, definitely not the root chunk), hash the largest whole; // subtree we can, with the full benefits of SIMD (and maybe in the future,; // multi-threading) parallelism. Two restrictions:; // - The subtree has to be a power-of-2 number of chunks. Only subtrees along; // the right edge can be incomplete, and we don't know where the right edge; // is going to be until we get to finalize().; // - The subtree must evenly divide the total number of chunks up until this; // point (if total is not 0). If the current incomplete subtree is only; // waiting for 1 more chunk, we can't hash a subtree of 4 chunks. We have; // to complete the current subtree first.; // Because we might need to break up the input to form powers of 2, or to; // evenly divide what we already have, this part runs in a loop.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:109,Energy Efficiency,power,power,109,"// Shrink the subtree_len until it evenly divides the count so far. We know; // that subtree_len itself is a power of 2, so we can use a bitmasking; // trick instead of an actual remainder operation. (Note that if the caller; // consistently passes power-of-2 inputs of the same size, as is hopefully; // typical, this loop condition will always fail, and subtree_len will; // always be the full length of the input.); //; // An aside: We don't have to shrink subtree_len quite this much. For; // example, if count_so_far is 1, we could pass 2 chunks to; // compress_subtree_to_parent_node. Since we'll get 2 CVs back, we'll still; // get the right answer in the end, and we might get to use 2-way SIMD; // parallelism. The problem with this optimization, is that it gets us; // stuck always hashing 2 chunks. The total number of chunks will remain; // odd, and we'll never graduate to higher degrees of parallelism. See; // https://github.com/BLAKE3-team/BLAKE3/issues/69.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:249,Energy Efficiency,power,power-of-,249,"// Shrink the subtree_len until it evenly divides the count so far. We know; // that subtree_len itself is a power of 2, so we can use a bitmasking; // trick instead of an actual remainder operation. (Note that if the caller; // consistently passes power-of-2 inputs of the same size, as is hopefully; // typical, this loop condition will always fail, and subtree_len will; // always be the full length of the input.); //; // An aside: We don't have to shrink subtree_len quite this much. For; // example, if count_so_far is 1, we could pass 2 chunks to; // compress_subtree_to_parent_node. Since we'll get 2 CVs back, we'll still; // get the right answer in the end, and we might get to use 2-way SIMD; // parallelism. The problem with this optimization, is that it gets us; // stuck always hashing 2 chunks. The total number of chunks will remain; // odd, and we'll never graduate to higher degrees of parallelism. See; // https://github.com/BLAKE3-team/BLAKE3/issues/69.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:742,Performance,optimiz,optimization,742,"// Shrink the subtree_len until it evenly divides the count so far. We know; // that subtree_len itself is a power of 2, so we can use a bitmasking; // trick instead of an actual remainder operation. (Note that if the caller; // consistently passes power-of-2 inputs of the same size, as is hopefully; // typical, this loop condition will always fail, and subtree_len will; // always be the full length of the input.); //; // An aside: We don't have to shrink subtree_len quite this much. For; // example, if count_so_far is 1, we could pass 2 chunks to; // compress_subtree_to_parent_node. Since we'll get 2 CVs back, we'll still; // get the right answer in the end, and we might get to use 2-way SIMD; // parallelism. The problem with this optimization, is that it gets us; // stuck always hashing 2 chunks. The total number of chunks will remain; // odd, and we'll never graduate to higher degrees of parallelism. See; // https://github.com/BLAKE3-team/BLAKE3/issues/69.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:792,Security,hash,hashing,792,"// Shrink the subtree_len until it evenly divides the count so far. We know; // that subtree_len itself is a power of 2, so we can use a bitmasking; // trick instead of an actual remainder operation. (Note that if the caller; // consistently passes power-of-2 inputs of the same size, as is hopefully; // typical, this loop condition will always fail, and subtree_len will; // always be the full length of the input.); //; // An aside: We don't have to shrink subtree_len quite this much. For; // example, if count_so_far is 1, we could pass 2 chunks to; // compress_subtree_to_parent_node. Since we'll get 2 CVs back, we'll still; // get the right answer in the end, and we might get to use 2-way SIMD; // parallelism. The problem with this optimization, is that it gets us; // stuck always hashing 2 chunks. The total number of chunks will remain; // odd, and we'll never graduate to higher degrees of parallelism. See; // https://github.com/BLAKE3-team/BLAKE3/issues/69.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:62,Security,hash,hash,62,"// The shrunken subtree_len might now be 1 chunk long. If so, hash that one; // chunk by itself. Otherwise, compress the subtree into a pair of CVs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:64,Integrability,depend,depends,64,"// This is the high-performance happy path, though getting here depends; // on the caller giving us a long enough input.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:20,Performance,perform,performance,20,"// This is the high-performance happy path, though getting here depends; // on the caller giving us a long enough input.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:390,Usability,simpl,simplifies,390,"// If there's any remaining input less than a full chunk, add it to the chunk; // state. In that case, also do a final merge loop to make sure the subtree; // stack doesn't contain any unmerged pairs. The remaining input means we; // know these merges are non-root. This merge loop isn't strictly necessary; // here, because hasher_push_chunk_cv already does its own merge loop, but it; // simplifies blake3_hasher_finalize below.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:3,Safety,Avoid,Avoid,3,// Avoid false positives due to uninstrumented assembly code.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:32,Safety,avoid,avoids,32,"// Explicitly checking for zero avoids causing UB by passing a null pointer; // to memcpy. This comes up in practice with things like:; // std::vector<uint8_t> v;; // blake3_hasher_finalize(&hasher, v.data(), v.size());",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:191,Security,hash,hasher,191,"// Explicitly checking for zero avoids causing UB by passing a null pointer; // to memcpy. This comes up in practice with things like:; // std::vector<uint8_t> v;; // blake3_hasher_finalize(&hasher, v.data(), v.size());",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:112,Security,hash,hash,112,"// If there are any bytes in the chunk state, finalize that chunk and do a; // roll-up merge between that chunk hash and every subtree in the stack. In; // this case, the extra merge loop at the end of blake3_hasher_update; // guarantees that none of the subtrees in the stack need to be merged with; // each other first. Otherwise, if there are no bytes in the chunk state,; // then the top of the stack is a chunk hash, and we start the merge from; // that.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c:416,Security,hash,hash,416,"// If there are any bytes in the chunk state, finalize that chunk and do a; // roll-up merge between that chunk hash and every subtree in the stack. In; // this case, the extra merge loop at the end of blake3_hasher_update; // guarantees that none of the subtrees in the stack need to be merged with; // each other first. Otherwise, if there are no bytes in the chunk state,; // then the top of the stack is a chunk hash, and we start the merge from; // that.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_avx512.c:98,Integrability,message,message,98,"// Note the optimization here of leaving row1 as the unrotated row, rather than; // row0. All the message loads below are adjusted to compensate for this. See; // discussion at https://github.com/sneves/blake2-avx2/pull/4",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_avx512.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_avx512.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_avx512.c:12,Performance,optimiz,optimization,12,"// Note the optimization here of leaving row1 as the unrotated row, rather than; // row0. All the message loads below are adjusted to compensate for this. See; // discussion at https://github.com/sneves/blake2-avx2/pull/4",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_avx512.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_avx512.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_avx512.c:106,Performance,load,loads,106,"// Note the optimization here of leaving row1 as the unrotated row, rather than; // row0. All the message loads below are adjusted to compensate for this. See; // discussion at https://github.com/sneves/blake2-avx2/pull/4",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_avx512.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_avx512.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_avx512.c:41,Integrability,message,message,41,"// Round 1. The first round permutes the message words from the original; // input order, into the groups that get mixed in parallel.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_avx512.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_avx512.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_avx512.c:85,Integrability,message,message,85,// Round 2. This round and all following rounds apply a fixed permutation; // to the message words from the round before.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_avx512.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_avx512.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_dispatch.c:13,Modifiability,variab,variable,13,/* Allow the variable to be controlled manually for testing */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_dispatch.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_dispatch.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_dispatch.c:52,Testability,test,testing,52,/* Allow the variable to be controlled manually for testing */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_dispatch.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_dispatch.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_dispatch.c:10,Safety,detect,detect,10,/* How to detect NEON? */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_dispatch.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_dispatch.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_dispatch.c:19,Safety,detect,detected,19,// The dynamically detected SIMD degree of the current platform.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_dispatch.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_dispatch.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_impl.h:11,Energy Efficiency,power,power,11,"// Largest power of two less than or equal to x. As a special case, returns 1; // when x is 0. ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_impl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_impl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_neon.c:74,Performance,load,loads,74,"// It might be that all we need for big-endian support here is to get the loads; // and stores right, but step zero would be finding a way to test it in CI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_neon.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_neon.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_neon.c:142,Testability,test,test,142,"// It might be that all we need for big-endian support here is to get the loads; // and stores right, but step zero would be finding a way to test it in CI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_neon.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_neon.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_portable.c:22,Energy Efficiency,schedul,schedule,22,// Select the message schedule based on the round.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_portable.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_portable.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_portable.c:14,Integrability,message,message,14,// Select the message schedule based on the round.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_portable.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_portable.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_sse2.c:98,Integrability,message,message,98,"// Note the optimization here of leaving row1 as the unrotated row, rather than; // row0. All the message loads below are adjusted to compensate for this. See; // discussion at https://github.com/sneves/blake2-avx2/pull/4",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_sse2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_sse2.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_sse2.c:12,Performance,optimiz,optimization,12,"// Note the optimization here of leaving row1 as the unrotated row, rather than; // row0. All the message loads below are adjusted to compensate for this. See; // discussion at https://github.com/sneves/blake2-avx2/pull/4",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_sse2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_sse2.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_sse2.c:106,Performance,load,loads,106,"// Note the optimization here of leaving row1 as the unrotated row, rather than; // row0. All the message loads below are adjusted to compensate for this. See; // discussion at https://github.com/sneves/blake2-avx2/pull/4",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_sse2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_sse2.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_sse2.c:41,Integrability,message,message,41,"// Round 1. The first round permutes the message words from the original; // input order, into the groups that get mixed in parallel.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_sse2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_sse2.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_sse2.c:85,Integrability,message,message,85,// Round 2. This round and all following rounds apply a fixed permutation; // to the message words from the round before.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_sse2.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_sse2.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_sse41.c:98,Integrability,message,message,98,"// Note the optimization here of leaving row1 as the unrotated row, rather than; // row0. All the message loads below are adjusted to compensate for this. See; // discussion at https://github.com/sneves/blake2-avx2/pull/4",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_sse41.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_sse41.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_sse41.c:12,Performance,optimiz,optimization,12,"// Note the optimization here of leaving row1 as the unrotated row, rather than; // row0. All the message loads below are adjusted to compensate for this. See; // discussion at https://github.com/sneves/blake2-avx2/pull/4",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_sse41.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_sse41.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_sse41.c:106,Performance,load,loads,106,"// Note the optimization here of leaving row1 as the unrotated row, rather than; // row0. All the message loads below are adjusted to compensate for this. See; // discussion at https://github.com/sneves/blake2-avx2/pull/4",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_sse41.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_sse41.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_sse41.c:41,Integrability,message,message,41,"// Round 1. The first round permutes the message words from the original; // input order, into the groups that get mixed in parallel.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_sse41.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_sse41.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_sse41.c:85,Integrability,message,message,85,// Round 2. This round and all following rounds apply a fixed permutation; // to the message words from the round before.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_sse41.c,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/BLAKE3/blake3_sse41.c
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Unix/Unix.h:28,Availability,error,error,28,"/// This function builds an error message into \p ErrMsg using the \p prefix; /// string and the Unix error number given by \p errnum. If errnum is -1, the; /// default then the value of errno is used.; /// Make an error message; ///; /// If the error number can be converted to a string, it will be; /// separated from prefix by "": "".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Unix/Unix.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Unix/Unix.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Unix/Unix.h:102,Availability,error,error,102,"/// This function builds an error message into \p ErrMsg using the \p prefix; /// string and the Unix error number given by \p errnum. If errnum is -1, the; /// default then the value of errno is used.; /// Make an error message; ///; /// If the error number can be converted to a string, it will be; /// separated from prefix by "": "".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Unix/Unix.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Unix/Unix.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Unix/Unix.h:215,Availability,error,error,215,"/// This function builds an error message into \p ErrMsg using the \p prefix; /// string and the Unix error number given by \p errnum. If errnum is -1, the; /// default then the value of errno is used.; /// Make an error message; ///; /// If the error number can be converted to a string, it will be; /// separated from prefix by "": "".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Unix/Unix.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Unix/Unix.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Unix/Unix.h:246,Availability,error,error,246,"/// This function builds an error message into \p ErrMsg using the \p prefix; /// string and the Unix error number given by \p errnum. If errnum is -1, the; /// default then the value of errno is used.; /// Make an error message; ///; /// If the error number can be converted to a string, it will be; /// separated from prefix by "": "".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Unix/Unix.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Unix/Unix.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Unix/Unix.h:34,Integrability,message,message,34,"/// This function builds an error message into \p ErrMsg using the \p prefix; /// string and the Unix error number given by \p errnum. If errnum is -1, the; /// default then the value of errno is used.; /// Make an error message; ///; /// If the error number can be converted to a string, it will be; /// separated from prefix by "": "".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Unix/Unix.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Unix/Unix.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Unix/Unix.h:221,Integrability,message,message,221,"/// This function builds an error message into \p ErrMsg using the \p prefix; /// string and the Unix error number given by \p errnum. If errnum is -1, the; /// default then the value of errno is used.; /// Make an error message; ///; /// If the error number can be converted to a string, it will be; /// separated from prefix by "": "".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Unix/Unix.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Unix/Unix.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Unix/Unix.h:39,Availability,error,error,39,// Include StrError(errnum) in a fatal error message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Unix/Unix.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Unix/Unix.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Unix/Unix.h:45,Integrability,message,message,45,// Include StrError(errnum) in a fatal error message.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Support/Unix/Unix.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Support/Unix/Unix.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/DetailedRecordsBackend.cpp:450,Modifiability,variab,variables,450,"//===- DetailedRecordBackend.cpp - Detailed Records Report -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This Tablegen backend prints a report that includes all the global ; // variables, classes, and records in complete detail. It includes more; // detail than the default TableGen printer backend.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/DetailedRecordsBackend.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/DetailedRecordsBackend.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/DetailedRecordsBackend.cpp:20,Modifiability,variab,variables,20,// Print the global variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/DetailedRecordsBackend.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/DetailedRecordsBackend.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Error.cpp:7,Availability,Error,Error,7,"//===- Error.cpp - tblgen error handling helper routines --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains error handling helper routines to pretty-print diagnostic; // messages from tblgen.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/Error.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Error.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Error.cpp:26,Availability,error,error,26,"//===- Error.cpp - tblgen error handling helper routines --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains error handling helper routines to pretty-print diagnostic; // messages from tblgen.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/Error.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Error.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Error.cpp:402,Availability,error,error,402,"//===- Error.cpp - tblgen error handling helper routines --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains error handling helper routines to pretty-print diagnostic; // messages from tblgen.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/Error.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Error.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Error.cpp:48,Integrability,rout,routines,48,"//===- Error.cpp - tblgen error handling helper routines --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains error handling helper routines to pretty-print diagnostic; // messages from tblgen.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/Error.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Error.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Error.cpp:424,Integrability,rout,routines,424,"//===- Error.cpp - tblgen error handling helper routines --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains error handling helper routines to pretty-print diagnostic; // messages from tblgen.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/Error.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Error.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Error.cpp:464,Integrability,message,messages,464,"//===- Error.cpp - tblgen error handling helper routines --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains error handling helper routines to pretty-print diagnostic; // messages from tblgen.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/Error.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Error.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Error.cpp:29,Availability,error,errors,29,// Count the total number of errors printed.; // This is used to exit with an error code if there were any errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/Error.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Error.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Error.cpp:78,Availability,error,error,78,// Count the total number of errors printed.; // This is used to exit with an error code if there were any errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/Error.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Error.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Error.cpp:107,Availability,error,errors,107,// Count the total number of errors printed.; // This is used to exit with an error code if there were any errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/Error.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Error.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Error.cpp:22,Availability,error,errors,22,// Functions to print errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/Error.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Error.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Error.cpp:28,Availability,error,errors,28,// Functions to print fatal errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/Error.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Error.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Error.cpp:103,Availability,error,error,103,"// Check an assertion: Obtain the condition value and be sure it is true.; // If not, print a nonfatal error along with the message.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/Error.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Error.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Error.cpp:124,Integrability,message,message,124,"// Check an assertion: Obtain the condition value and be sure it is true.; // If not, print a nonfatal error along with the message.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/Error.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Error.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Error.cpp:12,Testability,assert,assertion,12,"// Check an assertion: Obtain the condition value and be sure it is true.; // If not, print a nonfatal error along with the message.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/Error.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Error.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Error.cpp:10,Integrability,message,message,10,// Dump a message to stderr.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/Error.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Error.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/JSONBackend.cpp:51,Usability,simpl,simply,51,"// Final fallback: anything that gets past here is simply given a; // kind field of 'complex', and the only other field is the standard; // 'printable' representation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/JSONBackend.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/JSONBackend.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Main.cpp:13,Integrability,depend,dependency,13,/// Create a dependency file for `-d` option.; ///; /// This functionality is really only for the benefit of the build system.; /// It is similar to GCC's `-M*` family of options.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/Main.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Main.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Main.cpp:8,Deployability,update,updates,8,// Only updates the real output file if there are any differences.; // This prevents recompilation of all the files depending on it if there; // aren't any.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/Main.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Main.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Main.cpp:116,Integrability,depend,depending,116,// Only updates the real output file if there are any differences.; // This prevents recompilation of all the files depending on it if there; // aren't any.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/Main.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Main.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Record.cpp:190,Integrability,depend,dependencies,190,"/// This class represents the internal implementation of the RecordKeeper.; /// It contains all of the contextual static state of the Record classes. It is; /// kept out-of-line to simplify dependencies, and also make it easier for; /// internal classes to access the uniquer state of the keeper.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/Record.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Record.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Record.cpp:257,Security,access,access,257,"/// This class represents the internal implementation of the RecordKeeper.; /// It contains all of the contextual static state of the Record classes. It is; /// kept out-of-line to simplify dependencies, and also make it easier for; /// internal classes to access the uniquer state of the keeper.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/Record.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Record.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Record.cpp:181,Usability,simpl,simplify,181,"/// This class represents the internal implementation of the RecordKeeper.; /// It contains all of the contextual static state of the Record classes. It is; /// kept out-of-line to simplify dependencies, and also make it easier for; /// internal classes to access the uniquer state of the keeper.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/Record.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Record.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Record.cpp:13,Safety,redund,redundancy,13,// Check for redundancy.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/Record.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Record.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Record.cpp:37,Modifiability,variab,variable,37,"// Otherwise, print the value of the variable.; //; // NOTE: we could recursively !repr the elements of a list,; // but that could produce a lot of output when printing a; // defset.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/Record.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Record.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Record.cpp:3,Security,Access,Accessor,3,// Accessor by index,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/Record.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Record.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Record.cpp:3,Security,Access,Accessor,3,// Accessor by name,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/Record.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Record.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Record.cpp:59,Modifiability,variab,variable,59,"// Applies RHS to all elements of MHS, using LHS as a temp variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/Record.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Record.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Record.cpp:62,Modifiability,variab,variable,62,"// Evaluates RHS for all elements of MHS, using LHS as a temp variable.; // Creates a new list with the elements that evaluated to true.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/Record.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Record.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Record.cpp:31,Modifiability,variab,variable,31,// Cannot subscript a non-bits variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/Record.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Record.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Record.cpp:8,Testability,assert,assertions,8,// Copy assertions from class to instance.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/Record.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Record.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Record.cpp:13,Testability,assert,assertions,13,// Check the assertions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/Record.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Record.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Record.cpp:13,Testability,assert,assertions,13,// Check the assertions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/Record.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Record.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Record.cpp:15,Testability,assert,assertion,15,// Resolve the assertion expressions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/Record.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Record.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Record.cpp:76,Integrability,message,message,76,"// Check all record assertions: For each one, resolve the condition; // and message, then call CheckAssert().; // Note: The condition and message are probably already resolved,; // but resolving again allows calls before records are resolved.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/Record.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Record.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Record.cpp:138,Integrability,message,message,138,"// Check all record assertions: For each one, resolve the condition; // and message, then call CheckAssert().; // Note: The condition and message are probably already resolved,; // but resolving again allows calls before records are resolved.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/Record.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Record.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Record.cpp:20,Testability,assert,assertions,20,"// Check all record assertions: For each one, resolve the condition; // and message, then call CheckAssert().; // Note: The condition and message are probably already resolved,; // but resolving again allows calls before records are resolved.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/Record.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Record.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Record.cpp:6,Performance,cache,cache,6,// We cache the record vectors for single classes. Many backends request; // the same vectors multiple times.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/Record.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Record.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Record.cpp:46,Modifiability,variab,variables,46,"// Resolve mutual references among the mapped variables, but prevent; // infinite recursion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/Record.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Record.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Record.cpp:169,Modifiability,variab,variables,169,"// Do not recurse into the resolved initializer, as that would change; // the behavior of the resolver we're delegating, but do check to see; // if there are unresolved variables remaining.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/Record.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/Record.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/SetTheory.cpp:9,Usability,simpl,simply,9,// Lists simply expand.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/SetTheory.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/SetTheory.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TableGenBackendSkeleton.cpp:22,Modifiability,variab,variable,22,// To suppress unused variable warning; remove on use.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TableGenBackendSkeleton.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TableGenBackendSkeleton.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.cpp:26,Availability,error,error,26,/// ReturnError - Set the error to the specified string at the specified; /// location. This is defined to always return tgtok::Error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGLexer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.cpp:128,Availability,Error,Error,128,/// ReturnError - Set the error to the specified string at the specified; /// location. This is defined to always return tgtok::Error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGLexer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.cpp:24,Safety,detect,detects,24,"// If prepExitInclude() detects a problem with the preprocessing; // control stack, it will return false. Pretend that we reached; // the final EOF and stop lexing more tokens by returning false; // to LexToken().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGLexer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.cpp:82,Availability,error,error,82,"// Pretend that we exit the ""top-level"" include file.; // Note that in case of an error (e.g. control stack imbalance); // the routine will issue a fatal error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGLexer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.cpp:154,Availability,error,error,154,"// Pretend that we exit the ""top-level"" include file.; // Note that in case of an error (e.g. control stack imbalance); // the routine will issue a fatal error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGLexer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.cpp:127,Integrability,rout,routine,127,"// Pretend that we exit the ""top-level"" include file.; // Note that in case of an error (e.g. control stack imbalance); // the routine will issue a fatal error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGLexer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.cpp:30,Availability,error,error,30,"// Unknown character, emit an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGLexer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.cpp:25,Availability,error,error,25,"// Otherwise, this is an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGLexer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.cpp:46,Availability,error,error,46,"// If we hit the end of the buffer, report an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGLexer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.cpp:46,Availability,error,error,46,"// If we hit the end of the buffer, report an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGLexer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.cpp:13,Availability,error,error,13,"// Report an error, if preprocessor control stack for the current; // file is not empty.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGLexer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.cpp:80,Availability,error,error,80,// New line and EOF may follow only #else/#endif. It will be reported; // as an error for #ifdef/#define after the call to prepLexMacroName().,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGLexer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.cpp:39,Availability,error,error,39,"// If lexPreprocessor() encountered an error during lexing this; // preprocessor idiom, then return false to the calling lexPreprocessor().; // This will force tgtok::Error to be returned to the tokens processing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGLexer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.cpp:167,Availability,Error,Error,167,"// If lexPreprocessor() encountered an error during lexing this; // preprocessor idiom, then return false to the calling lexPreprocessor().; // This will force tgtok::Error to be returned to the tokens processing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGLexer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.cpp:502,Availability,error,error,502,"// Skip C-style comment.; // Note that we do not care about skipping the C++-style comments.; // If the line contains ""//"", it may not contain any processable; // preprocessing directive. Just return CurPtr pointing to; // the first '/' in this case. We also do not care about; // incorrect symbols after the first '/' - we are in lines-skipping; // mode, so incorrect code is allowed to some extent.; // Set TokStart to the beginning of the comment to enable proper; // diagnostic printing in case of error in SkipCComment().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGLexer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.cpp:105,Usability,simpl,simplify,105,"// Skip C++-style comment.; // We may just return true now, but let's skip to the line/buffer end; // to simplify the method specification.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGLexer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.cpp:741,Availability,error,error,741,"// When we are skipping C-style comment at the end of a preprocessing; // directive, we can skip several lines. If any meaningful TD token; // follows the end of the C-style comment on the same line, it will; // be considered as an invalid usage of TD token.; // For example, we want to forbid usages like this one:; // #define MACRO class Class {}; // But with C-style comments we also disallow the following:; // #define MACRO /* This macro is used; // to ... */ class Class {}; // One can argue that this should be allowed, but it does not seem; // to be worth of the complication. Moreover, this matches; // the C preprocessor behavior.; // Set TokStart to the beginning of the comment to enable proper; // diagnostic printer in case of error in SkipCComment().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGLexer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.h:4,Integrability,Depend,Dependencies,4,/// Dependencies - This is the list of all included files.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGLexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.h:101,Deployability,update,update,101,"// Process EOF encountered in LexToken().; // If EOF is met in an include file, then the method will update; // CurPtr, CurBuf and preprocessing include stack, and return true.; // If EOF is met in the top-level file, then the method will; // update and check the preprocessing include stack, and return false.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGLexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.h:243,Deployability,update,update,243,"// Process EOF encountered in LexToken().; // If EOF is met in an include file, then the method will update; // CurPtr, CurBuf and preprocessing include stack, and return true.; // If EOF is met in the top-level file, then the method will; // update and check the preprocessing include stack, and return false.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGLexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.h:330,Deployability,update,updated,330,"// Each of #ifdef and #else directives has a descriptor associated; // with it.; //; // An ordered list of preprocessing controls defined by #ifdef/#else; // directives that are in effect currently is called preprocessing; // control stack. It is represented as a vector of PreprocessorControlDesc's.; //; // The control stack is updated according to the following rules:; //; // For each #ifdef we add an element to the control stack.; // For each #else we replace the top element with a descriptor; // with an inverted IsDefined value.; // For each #endif we pop the top element from the control stack.; //; // When CurPtr reaches the current buffer's end, the control stack; // must be empty, i.e. #ifdef and the corresponding #endif; // must be located in the same file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGLexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.h:173,Usability,clear,clear,173,"// We want to disallow code like this:; // file1.td:; // #define NAME; // #ifdef NAME; // include ""file2.td""; // EOF; // file2.td:; // #endif; // EOF; //; // To do this, we clear the preprocessing control stack on entry; // to each of the included file. PrepIncludeStack is used to store; // preprocessing control stacks for the current file and all its; // parent files. The back() element is the preprocessing control; // stack for the current file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGLexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.h:3,Security,Validat,Validate,3,"// Validate that the current preprocessing control stack is empty,; // since we are about to exit a file, and pop the include stack.; //; // If IncludeStackMustBeEmpty is true, the include stack must be empty; // after the popping, otherwise, the include stack must not be empty; // after the popping. Basically, the include stack must be empty; // only if we exit the ""top-level"" file (i.e. finish lexing).; //; // The method returns false, if the current preprocessing control stack; // is not empty (e.g. there is an unterminated #ifdef/#else),; // true - otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGLexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.h:255,Safety,avoid,avoid,255,"// Given a preprocessing token kind, adjusts CurPtr to the end; // of the preprocessing directive word. Returns true, unless; // an unsupported token kind is passed in.; //; // We use look-ahead prepIsDirective() and prepEatPreprocessorDirective(); // to avoid adjusting CurPtr before we are sure that '#' is followed; // by a preprocessing directive. If it is not, then we fall back to; // tgtok::paste interpretation of '#'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGLexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.h:1521,Availability,error,errors,1521,"// The main ""exit"" point from the token parsing to preprocessor.; //; // The method is called for CurPtr, when prepIsDirective() returns; // true. The first parameter matches the result of prepIsDirective(),; // denoting the actual preprocessor directive to be processed.; //; // If the preprocessing directive disables the tokens processing, e.g.:; // #ifdef NAME // NAME is undefined; // then lexPreprocessor() enters the lines-skipping mode.; // In this mode, it does not parse any tokens, because the code under; // the #ifdef may not even be a correct tablegen code. The preprocessor; // looks for lines containing other preprocessing directives, which; // may be prepended with whitespaces and C-style comments. If the line; // does not contain a preprocessing directive, it is skipped completely.; // Otherwise, the preprocessing directive is processed by recursively; // calling lexPreprocessor(). The processing of the encountered; // preprocessing directives includes updating preprocessing control stack; // and adding new macros into DefinedMacros set.; //; // The second parameter controls whether lexPreprocessor() is called from; // LexToken() (true) or recursively from lexPreprocessor() (false).; //; // If ReturnNextLiveToken is true, the method returns the next; // LEX token following the current directive or following the end; // of the disabled preprocessing region corresponding to this directive.; // If ReturnNextLiveToken is false, the method returns the first parameter,; // unless there were errors encountered in the disabled preprocessing; // region - in this case, it returns tgtok::Error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGLexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.h:1615,Availability,Error,Error,1615,"// The main ""exit"" point from the token parsing to preprocessor.; //; // The method is called for CurPtr, when prepIsDirective() returns; // true. The first parameter matches the result of prepIsDirective(),; // denoting the actual preprocessor directive to be processed.; //; // If the preprocessing directive disables the tokens processing, e.g.:; // #ifdef NAME // NAME is undefined; // then lexPreprocessor() enters the lines-skipping mode.; // In this mode, it does not parse any tokens, because the code under; // the #ifdef may not even be a correct tablegen code. The preprocessor; // looks for lines containing other preprocessing directives, which; // may be prepended with whitespaces and C-style comments. If the line; // does not contain a preprocessing directive, it is skipped completely.; // Otherwise, the preprocessing directive is processed by recursively; // calling lexPreprocessor(). The processing of the encountered; // preprocessing directives includes updating preprocessing control stack; // and adding new macros into DefinedMacros set.; //; // The second parameter controls whether lexPreprocessor() is called from; // LexToken() (true) or recursively from lexPreprocessor() (false).; //; // If ReturnNextLiveToken is true, the method returns the next; // LEX token following the current directive or following the end; // of the disabled preprocessing region corresponding to this directive.; // If ReturnNextLiveToken is false, the method returns the first parameter,; // unless there were errors encountered in the disabled preprocessing; // region - in this case, it returns tgtok::Error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGLexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.h:297,Availability,error,error,297,"// Worker method for lexPreprocessor() to skip lines after some; // preprocessing directive up to the buffer end or to the directive; // that re-enables token processing. The method returns true; // upon processing the next directive that re-enables tokens; // processing. False is returned if an error was encountered.; //; // Note that prepSkipRegion() calls lexPreprocessor() to process; // encountered preprocessing directives. In this case, the second; // parameter to lexPreprocessor() is set to false. Being passed; // false ReturnNextLiveToken, lexPreprocessor() must never call; // prepSkipRegion(). We assert this by passing ReturnNextLiveToken; // to prepSkipRegion() and checking that it is never set to false.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGLexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.h:612,Testability,assert,assert,612,"// Worker method for lexPreprocessor() to skip lines after some; // preprocessing directive up to the buffer end or to the directive; // that re-enables token processing. The method returns true; // upon processing the next directive that re-enables tokens; // processing. False is returned if an error was encountered.; //; // Note that prepSkipRegion() calls lexPreprocessor() to process; // encountered preprocessing directives. In this case, the second; // parameter to lexPreprocessor() is set to false. Being passed; // false ReturnNextLiveToken, lexPreprocessor() must never call; // prepSkipRegion(). We assert this by passing ReturnNextLiveToken; // to prepSkipRegion() and checking that it is never set to false.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGLexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.h:189,Availability,error,errors,189,"// Lex name of the macro after either #ifdef or #define. We could have used; // LexIdentifier(), but it has special handling of ""include"" word, which; // could result in awkward diagnostic errors. Consider:; // ----; // #ifdef include; // class ...; // ----; // LexIdentifier() will engage LexInclude(), which will complain about; // missing file with name ""class"". Instead, prepLexMacroName() will treat; // ""include"" as a normal macro name.; //; // On entry, CurPtr points to the end of a preprocessing directive word.; // The method allows for whitespaces between the preprocessing directive; // and the macro name. The allowed whitespaces are ' ' and '\t'.; //; // If the first non-whitespace symbol after the preprocessing directive; // is a valid start symbol for an identifier (i.e. [a-zA-Z_]), then; // the method updates TokStart to the position of the first non-whitespace; // symbol, sets CurPtr to the position of the macro name's last symbol,; // and returns a string reference to the macro name. Otherwise,; // TokStart is set to the first non-whitespace symbol after the preprocessing; // directive, and the method returns an empty string reference.; //; // In all cases, TokStart may be used to point to the word following; // the preprocessing directive.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGLexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.h:822,Deployability,update,updates,822,"// Lex name of the macro after either #ifdef or #define. We could have used; // LexIdentifier(), but it has special handling of ""include"" word, which; // could result in awkward diagnostic errors. Consider:; // ----; // #ifdef include; // class ...; // ----; // LexIdentifier() will engage LexInclude(), which will complain about; // missing file with name ""class"". Instead, prepLexMacroName() will treat; // ""include"" as a normal macro name.; //; // On entry, CurPtr points to the end of a preprocessing directive word.; // The method allows for whitespaces between the preprocessing directive; // and the macro name. The allowed whitespaces are ' ' and '\t'.; //; // If the first non-whitespace symbol after the preprocessing directive; // is a valid start symbol for an identifier (i.e. [a-zA-Z_]), then; // the method updates TokStart to the position of the first non-whitespace; // symbol, sets CurPtr to the position of the macro name's last symbol,; // and returns a string reference to the macro name. Otherwise,; // TokStart is set to the first non-whitespace symbol after the preprocessing; // directive, and the method returns an empty string reference.; //; // In all cases, TokStart may be used to point to the word following; // the preprocessing directive.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGLexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.h:847,Availability,error,error,847,"// Skip any whitespaces starting from CurPtr. The method is used; // only in the lines-skipping mode to find the first non-whitespace; // symbol after or at CurPtr. Allowed whitespaces are ' ', '\t', '\n'; // and '\r'. The method skips C-style comments as well, because; // it is used to find the beginning of the preprocessing directive.; // If we do not handle C-style comments the following code would; // result in incorrect detection of a preprocessing directive:; // /*; // #ifdef NAME; // */; // As long as we skip C-style comments, the following code is correctly; // recognized as a preprocessing directive:; // /* first line comment; // second line comment */ #ifdef NAME; //; // The method returns true upon reaching the first non-whitespace symbol; // or EOF, CurPtr is set to point to this symbol. The method returns false,; // if an error occurred during skipping of a C-style comment.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGLexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.h:429,Safety,detect,detection,429,"// Skip any whitespaces starting from CurPtr. The method is used; // only in the lines-skipping mode to find the first non-whitespace; // symbol after or at CurPtr. Allowed whitespaces are ' ', '\t', '\n'; // and '\r'. The method skips C-style comments as well, because; // it is used to find the beginning of the preprocessing directive.; // If we do not handle C-style comments the following code would; // result in incorrect detection of a preprocessing directive:; // /*; // #ifdef NAME; // */; // As long as we skip C-style comments, the following code is correctly; // recognized as a preprocessing directive:; // /* first line comment; // second line comment */ #ifdef NAME; //; // The method returns true upon reaching the first non-whitespace symbol; // or EOF, CurPtr is set to point to this symbol. The method returns false,; // if an error occurred during skipping of a C-style comment.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGLexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.h:363,Availability,error,error,363,"// Skip any whitespaces or comments after a preprocessing directive.; // The method returns true upon reaching either end of the line; // or end of the file. If there is a multiline C-style comment; // after the preprocessing directive, the method skips; // the comment, so the final CurPtr may point to one of the next lines.; // The method returns false, if an error occurred during skipping; // C- or C++-style comment, or a non-whitespace symbol appears; // after the preprocessing directive.; //; // The method maybe called both during lines-skipping and tokens; // processing. It actually verifies that only whitespaces or/and; // comments follow a preprocessing directive.; //; // After the execution of this mehod, CurPtr points either to new line; // symbol, buffer end or non-whitespace symbol following the preprocesing; // directive.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGLexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.h:13,Availability,error,error,13,"// Report an error, if we reach EOF with non-empty preprocessing control; // stack. This means there is no matching #endif for the previous; // #ifdef/#else.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGLexer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGLexer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:32,Modifiability,variab,variables,32,"// HACK: Disable this check for variables declared with 'field'. This is; // done merely because existing targets have legitimate cases of; // non-concrete variables in helper defs. Ideally, we'd introduce a; // 'maybe' or 'optional' modifier instead of this.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:156,Modifiability,variab,variables,156,"// HACK: Disable this check for variables declared with 'field'. This is; // done merely because existing targets have legitimate cases of; // non-concrete variables in helper defs. Ideally, we'd introduce a; // 'maybe' or 'optional' modifier instead of this.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:29,Modifiability,variab,variables,29,"// First, we search in local variables.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:36,Modifiability,variab,variable,36,"// If not found, we try to find the variable in additional variables like; // arguments, loop iterator, etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:59,Modifiability,variab,variables,59,"// If not found, we try to find the variable in additional variables like; // arguments, loop iterator, etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:7,Modifiability,variab,variable,7,// The variable is a record field?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:7,Modifiability,variab,variable,7,// The variable is a class template argument?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:7,Modifiability,variab,variable,7,// The variable is a loop iterator?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:7,Modifiability,variab,variable,7,// The variable is a multiclass template argument?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:35,Availability,error,error,35,"/// SetValue -; /// Return true on error, false on success.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:30,Testability,assert,assertions,30,// Copy the subclass record's assertions to the new record.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:35,Testability,assert,assertion,35,"/// Add a record, foreach loop, or assertion to the current context.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:37,Performance,perform,perform,37,"// If it is a loop, then resolve and perform the loop.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:15,Testability,assert,assertion,15,"// If it is an assertion, then it's a top-level one, so check it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:169,Modifiability,variab,variable,169,"// For if-then-else blocks, we lower to a foreach loop whose list is a; // ternary selection between lists of different length. Since we don't; // have a means to track variable length record lists, we *must* resolve; // the condition here. We want to defer final resolution of the arms; // until the resulting records are finalized.; // e.g. !if(!exists<SchedWrite>(""__does_not_exist__""), [1], [])",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:13,Testability,assert,assertions,13,// Check the assertions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:49,Availability,error,error,49,"// If ObjectBody has template arguments, it's an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:159,Availability,error,error,159,"/// ParseObjectName - If a valid object name is specified, return it. If no; /// name is specified, return the unset initializer. Return nullptr on parse; /// error.; /// ObjectName ::= Value [ '#' Value ]*; /// ObjectName ::= /*empty*/; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:92,Availability,error,error,92,/// ParseClassID - Parse and resolve a reference to a class name. This returns; /// null on error.; ///; /// ClassID ::= ID; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:102,Availability,error,error,102,/// ParseMultiClassID - Parse and resolve a reference to a multiclass name.; /// This returns null on error.; ///; /// MultiClassID ::= ID; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:135,Availability,error,error,135,/// ParseSubClassReference - Parse a reference to a subclass or a; /// multiclass. This returns a SubClassRefTy with a null Record* on error.; ///; /// SubClassRef ::= ClassID; /// SubClassRef ::= ClassID '<' ArgValueList '>'; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:3,Availability,Error,Error,3,// Error parsing value list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:3,Availability,Error,Error,3,// Error checking value list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:166,Availability,error,error,166,/// ParseSubMultiClassReference - Parse a reference to a subclass or to a; /// templated submulticlass. This returns a SubMultiClassRefTy with a null; /// Record* on error.; ///; /// SubMultiClassRef ::= MultiClassID; /// SubMultiClassRef ::= MultiClassID '<' ArgValueList '>'; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:3,Availability,Error,Error,3,// Error parsing value list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:69,Availability,error,error,69,/// ParseType - Parse and return a tblgen type. This returns null on error.; ///; /// Type ::= STRING // string type; /// Type ::= CODE // code type; /// Type ::= BIT // bit type; /// Type ::= BITS '<' INTVAL '>' // bits<x> type; /// Type ::= INT // int type; /// Type ::= LIST '<' Type '>' // list<x> type; /// Type ::= DAG // dag type; /// Type ::= ClassID // Record Type; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:61,Availability,error,error,61,/// ParseOperation - Parse an operator. This returns null on error.; ///; /// Operation ::= XOperator ['<' Type '>'] '(' Args ')'; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:10,Availability,error,error,10,// Detect error if 2nd arg were present.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:3,Safety,Detect,Detect,3,// Detect error if 2nd arg were present.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:91,Modifiability,variab,variables,91,"// eat the ','; // We need to create a temporary record to provide a scope for the; // two variables.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:80,Availability,error,error,80,/// ParseOperatorType - Parse a type for an operator. This returns; /// null on error.; ///; /// OperatorType ::= '<' Type '>'; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:48,Availability,error,error,48,"/// Parse the !substr operation. Return null on error.; ///; /// Substr ::= !substr(string, start-int [, length-int]) => string",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:46,Availability,error,error,46,"/// Parse the !find operation. Return null on error.; ///; /// Substr ::= !find(string, string [, start-int]) => int",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:62,Availability,error,error,62,"/// Parse the !foreach and !filter operations. Return null on error.; ///; /// ForEach ::= !foreach(ID, list-or-dag, expr) => list<expr type>; /// Filter ::= !foreach(ID, list, predicate) ==> list<list type>",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:81,Modifiability,variab,variable,81,// We need to create a temporary record to provide a scope for the; // iteration variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:66,Availability,error,error,66,"/// ParseSimpleValue - Parse a tblgen value. This returns null on error.; ///; /// SimpleValue ::= IDValue; /// SimpleValue ::= INTVAL; /// SimpleValue ::= STRVAL+; /// SimpleValue ::= CODEFRAGMENT; /// SimpleValue ::= '?'; /// SimpleValue ::= '{' ValueList '}'; /// SimpleValue ::= ID '<' ValueListNE '>'; /// SimpleValue ::= '[' ValueList ']'; /// SimpleValue ::= '(' IDValue DagArgList ')'; /// SimpleValue ::= CONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= ADDTOK '(' Value ',' Value ')'; /// SimpleValue ::= DIVTOK '(' Value ',' Value ')'; /// SimpleValue ::= SUBTOK '(' Value ',' Value ')'; /// SimpleValue ::= SHLTOK '(' Value ',' Value ')'; /// SimpleValue ::= SRATOK '(' Value ',' Value ')'; /// SimpleValue ::= SRLTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTCONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTSPLATTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTREMOVETOK '(' Value ',' Value ')'; /// SimpleValue ::= RANGE '(' Value ')'; /// SimpleValue ::= RANGE '(' Value ',' Value ')'; /// SimpleValue ::= RANGE '(' Value ',' Value ',' Value ')'; /// SimpleValue ::= STRCONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= COND '(' [Value ':' Value,]+ ')'; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:83,Usability,Simpl,SimpleValue,83,"/// ParseSimpleValue - Parse a tblgen value. This returns null on error.; ///; /// SimpleValue ::= IDValue; /// SimpleValue ::= INTVAL; /// SimpleValue ::= STRVAL+; /// SimpleValue ::= CODEFRAGMENT; /// SimpleValue ::= '?'; /// SimpleValue ::= '{' ValueList '}'; /// SimpleValue ::= ID '<' ValueListNE '>'; /// SimpleValue ::= '[' ValueList ']'; /// SimpleValue ::= '(' IDValue DagArgList ')'; /// SimpleValue ::= CONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= ADDTOK '(' Value ',' Value ')'; /// SimpleValue ::= DIVTOK '(' Value ',' Value ')'; /// SimpleValue ::= SUBTOK '(' Value ',' Value ')'; /// SimpleValue ::= SHLTOK '(' Value ',' Value ')'; /// SimpleValue ::= SRATOK '(' Value ',' Value ')'; /// SimpleValue ::= SRLTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTCONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTSPLATTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTREMOVETOK '(' Value ',' Value ')'; /// SimpleValue ::= RANGE '(' Value ')'; /// SimpleValue ::= RANGE '(' Value ',' Value ')'; /// SimpleValue ::= RANGE '(' Value ',' Value ',' Value ')'; /// SimpleValue ::= STRCONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= COND '(' [Value ':' Value,]+ ')'; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:112,Usability,Simpl,SimpleValue,112,"/// ParseSimpleValue - Parse a tblgen value. This returns null on error.; ///; /// SimpleValue ::= IDValue; /// SimpleValue ::= INTVAL; /// SimpleValue ::= STRVAL+; /// SimpleValue ::= CODEFRAGMENT; /// SimpleValue ::= '?'; /// SimpleValue ::= '{' ValueList '}'; /// SimpleValue ::= ID '<' ValueListNE '>'; /// SimpleValue ::= '[' ValueList ']'; /// SimpleValue ::= '(' IDValue DagArgList ')'; /// SimpleValue ::= CONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= ADDTOK '(' Value ',' Value ')'; /// SimpleValue ::= DIVTOK '(' Value ',' Value ')'; /// SimpleValue ::= SUBTOK '(' Value ',' Value ')'; /// SimpleValue ::= SHLTOK '(' Value ',' Value ')'; /// SimpleValue ::= SRATOK '(' Value ',' Value ')'; /// SimpleValue ::= SRLTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTCONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTSPLATTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTREMOVETOK '(' Value ',' Value ')'; /// SimpleValue ::= RANGE '(' Value ')'; /// SimpleValue ::= RANGE '(' Value ',' Value ')'; /// SimpleValue ::= RANGE '(' Value ',' Value ',' Value ')'; /// SimpleValue ::= STRCONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= COND '(' [Value ':' Value,]+ ')'; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:140,Usability,Simpl,SimpleValue,140,"/// ParseSimpleValue - Parse a tblgen value. This returns null on error.; ///; /// SimpleValue ::= IDValue; /// SimpleValue ::= INTVAL; /// SimpleValue ::= STRVAL+; /// SimpleValue ::= CODEFRAGMENT; /// SimpleValue ::= '?'; /// SimpleValue ::= '{' ValueList '}'; /// SimpleValue ::= ID '<' ValueListNE '>'; /// SimpleValue ::= '[' ValueList ']'; /// SimpleValue ::= '(' IDValue DagArgList ')'; /// SimpleValue ::= CONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= ADDTOK '(' Value ',' Value ')'; /// SimpleValue ::= DIVTOK '(' Value ',' Value ')'; /// SimpleValue ::= SUBTOK '(' Value ',' Value ')'; /// SimpleValue ::= SHLTOK '(' Value ',' Value ')'; /// SimpleValue ::= SRATOK '(' Value ',' Value ')'; /// SimpleValue ::= SRLTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTCONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTSPLATTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTREMOVETOK '(' Value ',' Value ')'; /// SimpleValue ::= RANGE '(' Value ')'; /// SimpleValue ::= RANGE '(' Value ',' Value ')'; /// SimpleValue ::= RANGE '(' Value ',' Value ',' Value ')'; /// SimpleValue ::= STRCONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= COND '(' [Value ':' Value,]+ ')'; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:169,Usability,Simpl,SimpleValue,169,"/// ParseSimpleValue - Parse a tblgen value. This returns null on error.; ///; /// SimpleValue ::= IDValue; /// SimpleValue ::= INTVAL; /// SimpleValue ::= STRVAL+; /// SimpleValue ::= CODEFRAGMENT; /// SimpleValue ::= '?'; /// SimpleValue ::= '{' ValueList '}'; /// SimpleValue ::= ID '<' ValueListNE '>'; /// SimpleValue ::= '[' ValueList ']'; /// SimpleValue ::= '(' IDValue DagArgList ')'; /// SimpleValue ::= CONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= ADDTOK '(' Value ',' Value ')'; /// SimpleValue ::= DIVTOK '(' Value ',' Value ')'; /// SimpleValue ::= SUBTOK '(' Value ',' Value ')'; /// SimpleValue ::= SHLTOK '(' Value ',' Value ')'; /// SimpleValue ::= SRATOK '(' Value ',' Value ')'; /// SimpleValue ::= SRLTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTCONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTSPLATTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTREMOVETOK '(' Value ',' Value ')'; /// SimpleValue ::= RANGE '(' Value ')'; /// SimpleValue ::= RANGE '(' Value ',' Value ')'; /// SimpleValue ::= RANGE '(' Value ',' Value ',' Value ')'; /// SimpleValue ::= STRCONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= COND '(' [Value ':' Value,]+ ')'; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:203,Usability,Simpl,SimpleValue,203,"/// ParseSimpleValue - Parse a tblgen value. This returns null on error.; ///; /// SimpleValue ::= IDValue; /// SimpleValue ::= INTVAL; /// SimpleValue ::= STRVAL+; /// SimpleValue ::= CODEFRAGMENT; /// SimpleValue ::= '?'; /// SimpleValue ::= '{' ValueList '}'; /// SimpleValue ::= ID '<' ValueListNE '>'; /// SimpleValue ::= '[' ValueList ']'; /// SimpleValue ::= '(' IDValue DagArgList ')'; /// SimpleValue ::= CONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= ADDTOK '(' Value ',' Value ')'; /// SimpleValue ::= DIVTOK '(' Value ',' Value ')'; /// SimpleValue ::= SUBTOK '(' Value ',' Value ')'; /// SimpleValue ::= SHLTOK '(' Value ',' Value ')'; /// SimpleValue ::= SRATOK '(' Value ',' Value ')'; /// SimpleValue ::= SRLTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTCONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTSPLATTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTREMOVETOK '(' Value ',' Value ')'; /// SimpleValue ::= RANGE '(' Value ')'; /// SimpleValue ::= RANGE '(' Value ',' Value ')'; /// SimpleValue ::= RANGE '(' Value ',' Value ',' Value ')'; /// SimpleValue ::= STRCONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= COND '(' [Value ':' Value,]+ ')'; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:228,Usability,Simpl,SimpleValue,228,"/// ParseSimpleValue - Parse a tblgen value. This returns null on error.; ///; /// SimpleValue ::= IDValue; /// SimpleValue ::= INTVAL; /// SimpleValue ::= STRVAL+; /// SimpleValue ::= CODEFRAGMENT; /// SimpleValue ::= '?'; /// SimpleValue ::= '{' ValueList '}'; /// SimpleValue ::= ID '<' ValueListNE '>'; /// SimpleValue ::= '[' ValueList ']'; /// SimpleValue ::= '(' IDValue DagArgList ')'; /// SimpleValue ::= CONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= ADDTOK '(' Value ',' Value ')'; /// SimpleValue ::= DIVTOK '(' Value ',' Value ')'; /// SimpleValue ::= SUBTOK '(' Value ',' Value ')'; /// SimpleValue ::= SHLTOK '(' Value ',' Value ')'; /// SimpleValue ::= SRATOK '(' Value ',' Value ')'; /// SimpleValue ::= SRLTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTCONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTSPLATTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTREMOVETOK '(' Value ',' Value ')'; /// SimpleValue ::= RANGE '(' Value ')'; /// SimpleValue ::= RANGE '(' Value ',' Value ')'; /// SimpleValue ::= RANGE '(' Value ',' Value ',' Value ')'; /// SimpleValue ::= STRCONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= COND '(' [Value ':' Value,]+ ')'; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:267,Usability,Simpl,SimpleValue,267,"/// ParseSimpleValue - Parse a tblgen value. This returns null on error.; ///; /// SimpleValue ::= IDValue; /// SimpleValue ::= INTVAL; /// SimpleValue ::= STRVAL+; /// SimpleValue ::= CODEFRAGMENT; /// SimpleValue ::= '?'; /// SimpleValue ::= '{' ValueList '}'; /// SimpleValue ::= ID '<' ValueListNE '>'; /// SimpleValue ::= '[' ValueList ']'; /// SimpleValue ::= '(' IDValue DagArgList ')'; /// SimpleValue ::= CONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= ADDTOK '(' Value ',' Value ')'; /// SimpleValue ::= DIVTOK '(' Value ',' Value ')'; /// SimpleValue ::= SUBTOK '(' Value ',' Value ')'; /// SimpleValue ::= SHLTOK '(' Value ',' Value ')'; /// SimpleValue ::= SRATOK '(' Value ',' Value ')'; /// SimpleValue ::= SRLTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTCONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTSPLATTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTREMOVETOK '(' Value ',' Value ')'; /// SimpleValue ::= RANGE '(' Value ')'; /// SimpleValue ::= RANGE '(' Value ',' Value ')'; /// SimpleValue ::= RANGE '(' Value ',' Value ',' Value ')'; /// SimpleValue ::= STRCONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= COND '(' [Value ':' Value,]+ ')'; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:311,Usability,Simpl,SimpleValue,311,"/// ParseSimpleValue - Parse a tblgen value. This returns null on error.; ///; /// SimpleValue ::= IDValue; /// SimpleValue ::= INTVAL; /// SimpleValue ::= STRVAL+; /// SimpleValue ::= CODEFRAGMENT; /// SimpleValue ::= '?'; /// SimpleValue ::= '{' ValueList '}'; /// SimpleValue ::= ID '<' ValueListNE '>'; /// SimpleValue ::= '[' ValueList ']'; /// SimpleValue ::= '(' IDValue DagArgList ')'; /// SimpleValue ::= CONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= ADDTOK '(' Value ',' Value ')'; /// SimpleValue ::= DIVTOK '(' Value ',' Value ')'; /// SimpleValue ::= SUBTOK '(' Value ',' Value ')'; /// SimpleValue ::= SHLTOK '(' Value ',' Value ')'; /// SimpleValue ::= SRATOK '(' Value ',' Value ')'; /// SimpleValue ::= SRLTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTCONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTSPLATTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTREMOVETOK '(' Value ',' Value ')'; /// SimpleValue ::= RANGE '(' Value ')'; /// SimpleValue ::= RANGE '(' Value ',' Value ')'; /// SimpleValue ::= RANGE '(' Value ',' Value ',' Value ')'; /// SimpleValue ::= STRCONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= COND '(' [Value ':' Value,]+ ')'; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:350,Usability,Simpl,SimpleValue,350,"/// ParseSimpleValue - Parse a tblgen value. This returns null on error.; ///; /// SimpleValue ::= IDValue; /// SimpleValue ::= INTVAL; /// SimpleValue ::= STRVAL+; /// SimpleValue ::= CODEFRAGMENT; /// SimpleValue ::= '?'; /// SimpleValue ::= '{' ValueList '}'; /// SimpleValue ::= ID '<' ValueListNE '>'; /// SimpleValue ::= '[' ValueList ']'; /// SimpleValue ::= '(' IDValue DagArgList ')'; /// SimpleValue ::= CONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= ADDTOK '(' Value ',' Value ')'; /// SimpleValue ::= DIVTOK '(' Value ',' Value ')'; /// SimpleValue ::= SUBTOK '(' Value ',' Value ')'; /// SimpleValue ::= SHLTOK '(' Value ',' Value ')'; /// SimpleValue ::= SRATOK '(' Value ',' Value ')'; /// SimpleValue ::= SRLTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTCONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTSPLATTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTREMOVETOK '(' Value ',' Value ')'; /// SimpleValue ::= RANGE '(' Value ')'; /// SimpleValue ::= RANGE '(' Value ',' Value ')'; /// SimpleValue ::= RANGE '(' Value ',' Value ',' Value ')'; /// SimpleValue ::= STRCONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= COND '(' [Value ':' Value,]+ ')'; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:398,Usability,Simpl,SimpleValue,398,"/// ParseSimpleValue - Parse a tblgen value. This returns null on error.; ///; /// SimpleValue ::= IDValue; /// SimpleValue ::= INTVAL; /// SimpleValue ::= STRVAL+; /// SimpleValue ::= CODEFRAGMENT; /// SimpleValue ::= '?'; /// SimpleValue ::= '{' ValueList '}'; /// SimpleValue ::= ID '<' ValueListNE '>'; /// SimpleValue ::= '[' ValueList ']'; /// SimpleValue ::= '(' IDValue DagArgList ')'; /// SimpleValue ::= CONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= ADDTOK '(' Value ',' Value ')'; /// SimpleValue ::= DIVTOK '(' Value ',' Value ')'; /// SimpleValue ::= SUBTOK '(' Value ',' Value ')'; /// SimpleValue ::= SHLTOK '(' Value ',' Value ')'; /// SimpleValue ::= SRATOK '(' Value ',' Value ')'; /// SimpleValue ::= SRLTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTCONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTSPLATTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTREMOVETOK '(' Value ',' Value ')'; /// SimpleValue ::= RANGE '(' Value ')'; /// SimpleValue ::= RANGE '(' Value ',' Value ')'; /// SimpleValue ::= RANGE '(' Value ',' Value ',' Value ')'; /// SimpleValue ::= STRCONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= COND '(' [Value ':' Value,]+ ')'; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:453,Usability,Simpl,SimpleValue,453,"/// ParseSimpleValue - Parse a tblgen value. This returns null on error.; ///; /// SimpleValue ::= IDValue; /// SimpleValue ::= INTVAL; /// SimpleValue ::= STRVAL+; /// SimpleValue ::= CODEFRAGMENT; /// SimpleValue ::= '?'; /// SimpleValue ::= '{' ValueList '}'; /// SimpleValue ::= ID '<' ValueListNE '>'; /// SimpleValue ::= '[' ValueList ']'; /// SimpleValue ::= '(' IDValue DagArgList ')'; /// SimpleValue ::= CONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= ADDTOK '(' Value ',' Value ')'; /// SimpleValue ::= DIVTOK '(' Value ',' Value ')'; /// SimpleValue ::= SUBTOK '(' Value ',' Value ')'; /// SimpleValue ::= SHLTOK '(' Value ',' Value ')'; /// SimpleValue ::= SRATOK '(' Value ',' Value ')'; /// SimpleValue ::= SRLTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTCONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTSPLATTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTREMOVETOK '(' Value ',' Value ')'; /// SimpleValue ::= RANGE '(' Value ')'; /// SimpleValue ::= RANGE '(' Value ',' Value ')'; /// SimpleValue ::= RANGE '(' Value ',' Value ',' Value ')'; /// SimpleValue ::= STRCONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= COND '(' [Value ':' Value,]+ ')'; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:505,Usability,Simpl,SimpleValue,505,"/// ParseSimpleValue - Parse a tblgen value. This returns null on error.; ///; /// SimpleValue ::= IDValue; /// SimpleValue ::= INTVAL; /// SimpleValue ::= STRVAL+; /// SimpleValue ::= CODEFRAGMENT; /// SimpleValue ::= '?'; /// SimpleValue ::= '{' ValueList '}'; /// SimpleValue ::= ID '<' ValueListNE '>'; /// SimpleValue ::= '[' ValueList ']'; /// SimpleValue ::= '(' IDValue DagArgList ')'; /// SimpleValue ::= CONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= ADDTOK '(' Value ',' Value ')'; /// SimpleValue ::= DIVTOK '(' Value ',' Value ')'; /// SimpleValue ::= SUBTOK '(' Value ',' Value ')'; /// SimpleValue ::= SHLTOK '(' Value ',' Value ')'; /// SimpleValue ::= SRATOK '(' Value ',' Value ')'; /// SimpleValue ::= SRLTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTCONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTSPLATTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTREMOVETOK '(' Value ',' Value ')'; /// SimpleValue ::= RANGE '(' Value ')'; /// SimpleValue ::= RANGE '(' Value ',' Value ')'; /// SimpleValue ::= RANGE '(' Value ',' Value ',' Value ')'; /// SimpleValue ::= STRCONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= COND '(' [Value ':' Value,]+ ')'; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:557,Usability,Simpl,SimpleValue,557,"/// ParseSimpleValue - Parse a tblgen value. This returns null on error.; ///; /// SimpleValue ::= IDValue; /// SimpleValue ::= INTVAL; /// SimpleValue ::= STRVAL+; /// SimpleValue ::= CODEFRAGMENT; /// SimpleValue ::= '?'; /// SimpleValue ::= '{' ValueList '}'; /// SimpleValue ::= ID '<' ValueListNE '>'; /// SimpleValue ::= '[' ValueList ']'; /// SimpleValue ::= '(' IDValue DagArgList ')'; /// SimpleValue ::= CONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= ADDTOK '(' Value ',' Value ')'; /// SimpleValue ::= DIVTOK '(' Value ',' Value ')'; /// SimpleValue ::= SUBTOK '(' Value ',' Value ')'; /// SimpleValue ::= SHLTOK '(' Value ',' Value ')'; /// SimpleValue ::= SRATOK '(' Value ',' Value ')'; /// SimpleValue ::= SRLTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTCONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTSPLATTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTREMOVETOK '(' Value ',' Value ')'; /// SimpleValue ::= RANGE '(' Value ')'; /// SimpleValue ::= RANGE '(' Value ',' Value ')'; /// SimpleValue ::= RANGE '(' Value ',' Value ',' Value ')'; /// SimpleValue ::= STRCONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= COND '(' [Value ':' Value,]+ ')'; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:609,Usability,Simpl,SimpleValue,609,"/// ParseSimpleValue - Parse a tblgen value. This returns null on error.; ///; /// SimpleValue ::= IDValue; /// SimpleValue ::= INTVAL; /// SimpleValue ::= STRVAL+; /// SimpleValue ::= CODEFRAGMENT; /// SimpleValue ::= '?'; /// SimpleValue ::= '{' ValueList '}'; /// SimpleValue ::= ID '<' ValueListNE '>'; /// SimpleValue ::= '[' ValueList ']'; /// SimpleValue ::= '(' IDValue DagArgList ')'; /// SimpleValue ::= CONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= ADDTOK '(' Value ',' Value ')'; /// SimpleValue ::= DIVTOK '(' Value ',' Value ')'; /// SimpleValue ::= SUBTOK '(' Value ',' Value ')'; /// SimpleValue ::= SHLTOK '(' Value ',' Value ')'; /// SimpleValue ::= SRATOK '(' Value ',' Value ')'; /// SimpleValue ::= SRLTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTCONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTSPLATTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTREMOVETOK '(' Value ',' Value ')'; /// SimpleValue ::= RANGE '(' Value ')'; /// SimpleValue ::= RANGE '(' Value ',' Value ')'; /// SimpleValue ::= RANGE '(' Value ',' Value ',' Value ')'; /// SimpleValue ::= STRCONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= COND '(' [Value ':' Value,]+ ')'; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:661,Usability,Simpl,SimpleValue,661,"/// ParseSimpleValue - Parse a tblgen value. This returns null on error.; ///; /// SimpleValue ::= IDValue; /// SimpleValue ::= INTVAL; /// SimpleValue ::= STRVAL+; /// SimpleValue ::= CODEFRAGMENT; /// SimpleValue ::= '?'; /// SimpleValue ::= '{' ValueList '}'; /// SimpleValue ::= ID '<' ValueListNE '>'; /// SimpleValue ::= '[' ValueList ']'; /// SimpleValue ::= '(' IDValue DagArgList ')'; /// SimpleValue ::= CONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= ADDTOK '(' Value ',' Value ')'; /// SimpleValue ::= DIVTOK '(' Value ',' Value ')'; /// SimpleValue ::= SUBTOK '(' Value ',' Value ')'; /// SimpleValue ::= SHLTOK '(' Value ',' Value ')'; /// SimpleValue ::= SRATOK '(' Value ',' Value ')'; /// SimpleValue ::= SRLTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTCONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTSPLATTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTREMOVETOK '(' Value ',' Value ')'; /// SimpleValue ::= RANGE '(' Value ')'; /// SimpleValue ::= RANGE '(' Value ',' Value ')'; /// SimpleValue ::= RANGE '(' Value ',' Value ',' Value ')'; /// SimpleValue ::= STRCONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= COND '(' [Value ':' Value,]+ ')'; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:713,Usability,Simpl,SimpleValue,713,"/// ParseSimpleValue - Parse a tblgen value. This returns null on error.; ///; /// SimpleValue ::= IDValue; /// SimpleValue ::= INTVAL; /// SimpleValue ::= STRVAL+; /// SimpleValue ::= CODEFRAGMENT; /// SimpleValue ::= '?'; /// SimpleValue ::= '{' ValueList '}'; /// SimpleValue ::= ID '<' ValueListNE '>'; /// SimpleValue ::= '[' ValueList ']'; /// SimpleValue ::= '(' IDValue DagArgList ')'; /// SimpleValue ::= CONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= ADDTOK '(' Value ',' Value ')'; /// SimpleValue ::= DIVTOK '(' Value ',' Value ')'; /// SimpleValue ::= SUBTOK '(' Value ',' Value ')'; /// SimpleValue ::= SHLTOK '(' Value ',' Value ')'; /// SimpleValue ::= SRATOK '(' Value ',' Value ')'; /// SimpleValue ::= SRLTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTCONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTSPLATTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTREMOVETOK '(' Value ',' Value ')'; /// SimpleValue ::= RANGE '(' Value ')'; /// SimpleValue ::= RANGE '(' Value ',' Value ')'; /// SimpleValue ::= RANGE '(' Value ',' Value ',' Value ')'; /// SimpleValue ::= STRCONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= COND '(' [Value ':' Value,]+ ')'; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:765,Usability,Simpl,SimpleValue,765,"/// ParseSimpleValue - Parse a tblgen value. This returns null on error.; ///; /// SimpleValue ::= IDValue; /// SimpleValue ::= INTVAL; /// SimpleValue ::= STRVAL+; /// SimpleValue ::= CODEFRAGMENT; /// SimpleValue ::= '?'; /// SimpleValue ::= '{' ValueList '}'; /// SimpleValue ::= ID '<' ValueListNE '>'; /// SimpleValue ::= '[' ValueList ']'; /// SimpleValue ::= '(' IDValue DagArgList ')'; /// SimpleValue ::= CONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= ADDTOK '(' Value ',' Value ')'; /// SimpleValue ::= DIVTOK '(' Value ',' Value ')'; /// SimpleValue ::= SUBTOK '(' Value ',' Value ')'; /// SimpleValue ::= SHLTOK '(' Value ',' Value ')'; /// SimpleValue ::= SRATOK '(' Value ',' Value ')'; /// SimpleValue ::= SRLTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTCONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTSPLATTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTREMOVETOK '(' Value ',' Value ')'; /// SimpleValue ::= RANGE '(' Value ')'; /// SimpleValue ::= RANGE '(' Value ',' Value ')'; /// SimpleValue ::= RANGE '(' Value ',' Value ',' Value ')'; /// SimpleValue ::= STRCONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= COND '(' [Value ':' Value,]+ ')'; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:824,Usability,Simpl,SimpleValue,824,"/// ParseSimpleValue - Parse a tblgen value. This returns null on error.; ///; /// SimpleValue ::= IDValue; /// SimpleValue ::= INTVAL; /// SimpleValue ::= STRVAL+; /// SimpleValue ::= CODEFRAGMENT; /// SimpleValue ::= '?'; /// SimpleValue ::= '{' ValueList '}'; /// SimpleValue ::= ID '<' ValueListNE '>'; /// SimpleValue ::= '[' ValueList ']'; /// SimpleValue ::= '(' IDValue DagArgList ')'; /// SimpleValue ::= CONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= ADDTOK '(' Value ',' Value ')'; /// SimpleValue ::= DIVTOK '(' Value ',' Value ')'; /// SimpleValue ::= SUBTOK '(' Value ',' Value ')'; /// SimpleValue ::= SHLTOK '(' Value ',' Value ')'; /// SimpleValue ::= SRATOK '(' Value ',' Value ')'; /// SimpleValue ::= SRLTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTCONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTSPLATTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTREMOVETOK '(' Value ',' Value ')'; /// SimpleValue ::= RANGE '(' Value ')'; /// SimpleValue ::= RANGE '(' Value ',' Value ')'; /// SimpleValue ::= RANGE '(' Value ',' Value ',' Value ')'; /// SimpleValue ::= STRCONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= COND '(' [Value ':' Value,]+ ')'; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:882,Usability,Simpl,SimpleValue,882,"/// ParseSimpleValue - Parse a tblgen value. This returns null on error.; ///; /// SimpleValue ::= IDValue; /// SimpleValue ::= INTVAL; /// SimpleValue ::= STRVAL+; /// SimpleValue ::= CODEFRAGMENT; /// SimpleValue ::= '?'; /// SimpleValue ::= '{' ValueList '}'; /// SimpleValue ::= ID '<' ValueListNE '>'; /// SimpleValue ::= '[' ValueList ']'; /// SimpleValue ::= '(' IDValue DagArgList ')'; /// SimpleValue ::= CONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= ADDTOK '(' Value ',' Value ')'; /// SimpleValue ::= DIVTOK '(' Value ',' Value ')'; /// SimpleValue ::= SUBTOK '(' Value ',' Value ')'; /// SimpleValue ::= SHLTOK '(' Value ',' Value ')'; /// SimpleValue ::= SRATOK '(' Value ',' Value ')'; /// SimpleValue ::= SRLTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTCONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTSPLATTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTREMOVETOK '(' Value ',' Value ')'; /// SimpleValue ::= RANGE '(' Value ')'; /// SimpleValue ::= RANGE '(' Value ',' Value ')'; /// SimpleValue ::= RANGE '(' Value ',' Value ',' Value ')'; /// SimpleValue ::= STRCONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= COND '(' [Value ':' Value,]+ ')'; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:941,Usability,Simpl,SimpleValue,941,"/// ParseSimpleValue - Parse a tblgen value. This returns null on error.; ///; /// SimpleValue ::= IDValue; /// SimpleValue ::= INTVAL; /// SimpleValue ::= STRVAL+; /// SimpleValue ::= CODEFRAGMENT; /// SimpleValue ::= '?'; /// SimpleValue ::= '{' ValueList '}'; /// SimpleValue ::= ID '<' ValueListNE '>'; /// SimpleValue ::= '[' ValueList ']'; /// SimpleValue ::= '(' IDValue DagArgList ')'; /// SimpleValue ::= CONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= ADDTOK '(' Value ',' Value ')'; /// SimpleValue ::= DIVTOK '(' Value ',' Value ')'; /// SimpleValue ::= SUBTOK '(' Value ',' Value ')'; /// SimpleValue ::= SHLTOK '(' Value ',' Value ')'; /// SimpleValue ::= SRATOK '(' Value ',' Value ')'; /// SimpleValue ::= SRLTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTCONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTSPLATTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTREMOVETOK '(' Value ',' Value ')'; /// SimpleValue ::= RANGE '(' Value ')'; /// SimpleValue ::= RANGE '(' Value ',' Value ')'; /// SimpleValue ::= RANGE '(' Value ',' Value ',' Value ')'; /// SimpleValue ::= STRCONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= COND '(' [Value ':' Value,]+ ')'; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:982,Usability,Simpl,SimpleValue,982,"/// ParseSimpleValue - Parse a tblgen value. This returns null on error.; ///; /// SimpleValue ::= IDValue; /// SimpleValue ::= INTVAL; /// SimpleValue ::= STRVAL+; /// SimpleValue ::= CODEFRAGMENT; /// SimpleValue ::= '?'; /// SimpleValue ::= '{' ValueList '}'; /// SimpleValue ::= ID '<' ValueListNE '>'; /// SimpleValue ::= '[' ValueList ']'; /// SimpleValue ::= '(' IDValue DagArgList ')'; /// SimpleValue ::= CONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= ADDTOK '(' Value ',' Value ')'; /// SimpleValue ::= DIVTOK '(' Value ',' Value ')'; /// SimpleValue ::= SUBTOK '(' Value ',' Value ')'; /// SimpleValue ::= SHLTOK '(' Value ',' Value ')'; /// SimpleValue ::= SRATOK '(' Value ',' Value ')'; /// SimpleValue ::= SRLTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTCONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTSPLATTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTREMOVETOK '(' Value ',' Value ')'; /// SimpleValue ::= RANGE '(' Value ')'; /// SimpleValue ::= RANGE '(' Value ',' Value ')'; /// SimpleValue ::= RANGE '(' Value ',' Value ',' Value ')'; /// SimpleValue ::= STRCONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= COND '(' [Value ':' Value,]+ ')'; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:1033,Usability,Simpl,SimpleValue,1033,"/// ParseSimpleValue - Parse a tblgen value. This returns null on error.; ///; /// SimpleValue ::= IDValue; /// SimpleValue ::= INTVAL; /// SimpleValue ::= STRVAL+; /// SimpleValue ::= CODEFRAGMENT; /// SimpleValue ::= '?'; /// SimpleValue ::= '{' ValueList '}'; /// SimpleValue ::= ID '<' ValueListNE '>'; /// SimpleValue ::= '[' ValueList ']'; /// SimpleValue ::= '(' IDValue DagArgList ')'; /// SimpleValue ::= CONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= ADDTOK '(' Value ',' Value ')'; /// SimpleValue ::= DIVTOK '(' Value ',' Value ')'; /// SimpleValue ::= SUBTOK '(' Value ',' Value ')'; /// SimpleValue ::= SHLTOK '(' Value ',' Value ')'; /// SimpleValue ::= SRATOK '(' Value ',' Value ')'; /// SimpleValue ::= SRLTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTCONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTSPLATTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTREMOVETOK '(' Value ',' Value ')'; /// SimpleValue ::= RANGE '(' Value ')'; /// SimpleValue ::= RANGE '(' Value ',' Value ')'; /// SimpleValue ::= RANGE '(' Value ',' Value ',' Value ')'; /// SimpleValue ::= STRCONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= COND '(' [Value ':' Value,]+ ')'; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:1094,Usability,Simpl,SimpleValue,1094,"/// ParseSimpleValue - Parse a tblgen value. This returns null on error.; ///; /// SimpleValue ::= IDValue; /// SimpleValue ::= INTVAL; /// SimpleValue ::= STRVAL+; /// SimpleValue ::= CODEFRAGMENT; /// SimpleValue ::= '?'; /// SimpleValue ::= '{' ValueList '}'; /// SimpleValue ::= ID '<' ValueListNE '>'; /// SimpleValue ::= '[' ValueList ']'; /// SimpleValue ::= '(' IDValue DagArgList ')'; /// SimpleValue ::= CONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= ADDTOK '(' Value ',' Value ')'; /// SimpleValue ::= DIVTOK '(' Value ',' Value ')'; /// SimpleValue ::= SUBTOK '(' Value ',' Value ')'; /// SimpleValue ::= SHLTOK '(' Value ',' Value ')'; /// SimpleValue ::= SRATOK '(' Value ',' Value ')'; /// SimpleValue ::= SRLTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTCONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTSPLATTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTREMOVETOK '(' Value ',' Value ')'; /// SimpleValue ::= RANGE '(' Value ')'; /// SimpleValue ::= RANGE '(' Value ',' Value ')'; /// SimpleValue ::= RANGE '(' Value ',' Value ',' Value ')'; /// SimpleValue ::= STRCONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= COND '(' [Value ':' Value,]+ ')'; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:1152,Usability,Simpl,SimpleValue,1152,"/// ParseSimpleValue - Parse a tblgen value. This returns null on error.; ///; /// SimpleValue ::= IDValue; /// SimpleValue ::= INTVAL; /// SimpleValue ::= STRVAL+; /// SimpleValue ::= CODEFRAGMENT; /// SimpleValue ::= '?'; /// SimpleValue ::= '{' ValueList '}'; /// SimpleValue ::= ID '<' ValueListNE '>'; /// SimpleValue ::= '[' ValueList ']'; /// SimpleValue ::= '(' IDValue DagArgList ')'; /// SimpleValue ::= CONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= ADDTOK '(' Value ',' Value ')'; /// SimpleValue ::= DIVTOK '(' Value ',' Value ')'; /// SimpleValue ::= SUBTOK '(' Value ',' Value ')'; /// SimpleValue ::= SHLTOK '(' Value ',' Value ')'; /// SimpleValue ::= SRATOK '(' Value ',' Value ')'; /// SimpleValue ::= SRLTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTCONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTSPLATTOK '(' Value ',' Value ')'; /// SimpleValue ::= LISTREMOVETOK '(' Value ',' Value ')'; /// SimpleValue ::= RANGE '(' Value ')'; /// SimpleValue ::= RANGE '(' Value ',' Value ')'; /// SimpleValue ::= RANGE '(' Value ',' Value ',' Value ')'; /// SimpleValue ::= STRCONCATTOK '(' Value ',' Value ')'; /// SimpleValue ::= COND '(' [Value ':' Value,]+ ')'; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:3,Availability,Error,Error,3,// Error parsing value list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:3,Availability,Error,Error,3,// Error checking template argument values.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:30,Modifiability,variab,variable,30,// bits<n> can also come from variable initializers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:62,Availability,error,error,62,/// ParseValue - Parse a TableGen value. This returns null on error.; ///; /// Value ::= SimpleValue ValueSuffix*; /// ValueSuffix ::= '{' BitList '}'; /// ValueSuffix ::= '[' SliceElements ']'; /// ValueSuffix ::= '.' ID; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:89,Usability,Simpl,SimpleValue,89,/// ParseValue - Parse a TableGen value. This returns null on error.; ///; /// Value ::= SimpleValue ValueSuffix*; /// ValueSuffix ::= '{' BitList '}'; /// ValueSuffix ::= '[' SliceElements ']'; /// ValueSuffix ::= '.' ID; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:10,Modifiability,variab,variable,10,"// If the variable name is present, add it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:229,Availability,error,error,229,"// ParseTemplateArgValueList - Parse a template argument list with the syntax; // shown, filling in the Result vector. The open angle has been consumed.; // An empty argument list is allowed. Return false if okay, true if an; // error was detected.; //; // ArgValueList ::= '<' PostionalArgValueList [','] NamedArgValueList '>'; // PostionalArgValueList ::= [Value {',' Value}*]; // NamedArgValueList ::= [NameValue '=' Value {',' NameValue '=' Value}*]",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:239,Safety,detect,detected,239,"// ParseTemplateArgValueList - Parse a template argument list with the syntax; // shown, filling in the Result vector. The open angle has been consumed.; // An empty argument list is allowed. Return false if okay, true if an; // error was detected.; //; // ArgValueList ::= '<' PostionalArgValueList [','] NamedArgValueList '>'; // PostionalArgValueList ::= [Value {',' Value}*]; // NamedArgValueList ::= [NameValue '=' Value {',' NameValue '=' Value}*]",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:102,Availability,error,error,102,"/// ParseDeclaration - Read a declaration, returning the name of field ID, or an; /// empty string on error. This can happen in a number of different contexts,; /// including within a def or in the template args for a class (in which case; /// CurRec will be non-null) and within the template args for a multiclass (in; /// which case CurRec will be null, but CurMultiClass will be set). This can; /// also happen within a def that is within a multiclass, which will set both; /// CurRec and CurMultiClass.; ///; /// Declaration ::= FIELD? Type ID ('=' Value)?; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:31,Availability,error,error,31,"// Return the name, even if an error is thrown. This is so that we can; // continue to make some progress, even without the value having been; // initialized.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:123,Availability,error,error,123,"/// ParseForeachDeclaration - Read a foreach declaration, returning; /// the name of the declared object or a NULL Init on error. Return; /// the name of the parsed initializer list through ForeachListName.; ///; /// ForeachDeclaration ::= ID '=' '{' RangeList '}'; /// ForeachDeclaration ::= ID '=' RangePiece; /// ForeachDeclaration ::= ID '=' Value; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:235,Testability,Assert,Assert,235,/// ParseBodyItem - Parse a single item within the body of a def or class.; ///; /// BodyItem ::= Declaration ';'; /// BodyItem ::= LET ID OptionalBitList '=' Value ';'; /// BodyItem ::= Defvar; /// BodyItem ::= Dump; /// BodyItem ::= Assert; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:64,Availability,error,error,64,"/// ParseBody - Read the body of a class or def. Return true on error, false on; /// success.; ///; /// Body ::= ';'; /// Body ::= '{' BodyList '}'; /// BodyList BodyItem*; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:42,Availability,error,error,42,"// If we have a semicolon, print a gentle error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:71,Availability,error,error,71,"/// Apply the current let bindings to \a CurRec.; /// \returns true on error, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:35,Testability,assert,assertions,35,// Let bindings are not applied to assertions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:51,Modifiability,variab,variables,51,// An object body introduces a new scope for local variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:13,Availability,error,error,13,// Check for error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:112,Availability,error,error,112,"/// ParseDef - Parse and return a top level or multiclass record definition.; /// Return false if okay, true if error.; ///; /// DefInst ::= DEF ObjectName ObjectBody; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:107,Availability,error,error,107,/// ParseForeach - Parse a for statement. Return the record corresponding; /// to it. This returns true on error.; ///; /// Foreach ::= FOREACH Declaration IN '{ ObjectList '}'; /// Foreach ::= FOREACH Declaration IN Object; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:51,Modifiability,variab,variables,51,// A foreach loop introduces a new scope for local variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:265,Integrability,depend,depending,265,"// We have to be able to save if statements to execute later, and they have; // to live on the same stack as foreach loops. The simplest implementation; // technique is to convert each 'then' or 'else' clause *into* a foreach; // loop, over a list of length 0 or 1 depending on the condition, and with no; // iteration variable being assigned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:319,Modifiability,variab,variable,319,"// We have to be able to save if statements to execute later, and they have; // to live on the same stack as foreach loops. The simplest implementation; // technique is to convert each 'then' or 'else' clause *into* a foreach; // loop, over a list of length 0 or 1 depending on the condition, and with no; // iteration variable being assigned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:128,Usability,simpl,simplest,128,"// We have to be able to save if statements to execute later, and they have; // to live on the same stack as foreach loops. The simplest implementation; // technique is to convert each 'then' or 'else' clause *into* a foreach; // loop, over a list of length 0 or 1 depending on the condition, and with no; // iteration variable being assigned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:52,Modifiability,variab,variables,52,// An if-statement introduces a new scope for local variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:85,Integrability,message,message,85,"/// ParseAssert - Parse an assert statement.; ///; /// Assert ::= ASSERT condition , message ;",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:27,Testability,assert,assert,27,"/// ParseAssert - Parse an assert statement.; ///; /// Assert ::= ASSERT condition , message ;",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:55,Testability,Assert,Assert,55,"/// ParseAssert - Parse an assert statement.; ///; /// Assert ::= ASSERT condition , message ;",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:66,Testability,ASSERT,ASSERT,66,"/// ParseAssert - Parse an assert statement.; ///; /// Assert ::= ASSERT condition , message ;",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:12,Testability,assert,assert,12,// Eat the 'assert' token.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:50,Availability,error,error,50,"// If the body was previously defined, this is an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:65,Modifiability,variab,variables,65,// eat the '{'.; // A group let introduces a new scope for local variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:193,Testability,Assert,Assert,193,/// ParseMultiClass - Parse a multiclass definition.; ///; /// MultiClassInst ::= MULTICLASS ID TemplateArgList?; /// ':' BaseMultiClassList '{' MultiClassObject+ '}'; /// MultiClassObject ::= Assert; /// MultiClassObject ::= DefInst; /// MultiClassObject ::= DefMInst; /// MultiClassObject ::= Defvar; /// MultiClassObject ::= Foreach; /// MultiClassObject ::= If; /// MultiClassObject ::= LETCommand '{' ObjectList '}'; /// MultiClassObject ::= LETCommand Object; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:78,Modifiability,variab,variables,78,// Eat the identifier.; // A multiclass body introduces a new scope for local variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:13,Availability,error,error,13,// Check for error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:59,Availability,error,error,59,"// eat the '}'.; // If we have a semicolon, print a gentle error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:20,Modifiability,inherit,inherits,20,// This record also inherits from a regular class (non-multiclass)?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:14,Modifiability,inherit,inherit,14,// A defm can inherit from regular classes (non-multiclasses) as; // long as they come in the end of the inheritance list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:105,Modifiability,inherit,inheritance,105,// A defm can inherit from regular classes (non-multiclasses) as; // long as they come in the end of the inheritance list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:30,Modifiability,inherit,inherit,30,// Process all the classes to inherit as if they were part of a; // regular 'def' and inherit all record values.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:86,Modifiability,inherit,inherit,86,// Process all the classes to inherit as if they were part of a; // regular 'def' and inherit all record values.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:13,Availability,error,error,13,// Check for error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:106,Modifiability,inherit,inherit,106,// Get the expanded definition prototypes and teach them about; // the record values the current class to inherit has,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:264,Testability,Assert,Assert,264,/// ParseObject; /// Object ::= ClassInst; /// Object ::= DefInst; /// Object ::= MultiClassInst; /// Object ::= DefMInst; /// Object ::= LETCommand '{' ObjectList '}'; /// Object ::= LETCommand Object; /// Object ::= Defset; /// Object ::= Defvar; /// Object ::= Assert; /// Object ::= Dump,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:67,Modifiability,inherit,inheritance,67,"// Check the types of the template argument values for a class; // inheritance, multiclass invocation, or anonymous class invocation.; // If necessary, replace an argument with a cast to the required type.; // The argument count has already been checked.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp:56,Integrability,wrap,wrapping,56,"// Allow to use dump directly on `defvar` and `def`, by wrapping; // them with a `!repl`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.h:71,Testability,Assert,AssertionInfo,71,"/// RecordsEntry - Holds exactly one of a Record, ForeachLoop, or; /// AssertionInfo.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.h:198,Modifiability,variab,variable,198,"/// ForeachLoop - Record the iteration state associated with a for loop.; /// This is used to instantiate items in the loop body.; ///; /// IterVar is allowed to be null, in which case no iteration variable is; /// defined in the loop at all. (This happens when a ForeachLoop is; /// constructed by desugaring an if statement.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.h:19,Modifiability,variab,variable,19,// A scope to hold variable definitions from defvar.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.h:92,Availability,error,error,92,"// When we check whether a variable is already defined, for the purpose of; // reporting an error on redefinition, we don't look up to the parent; // scope, because it's all right to shadow an outer definition with an; // inner one.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.h:27,Modifiability,variab,variable,27,"// When we check whether a variable is already defined, for the purpose of; // reporting an error on redefinition, we don't look up to the parent; // scope, because it's all right to shadow an outer definition with an; // inner one.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.h:67,Modifiability,variab,variables,67,/// CurScope - Innermost of the current nested scopes for 'defvar' variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.h:303,Availability,error,errors,303,"// A ""named boolean"" indicating how to parse identifiers. Usually; // identifiers map to some existing object but in special cases; // (e.g. parsing def names) no such object exists yet because we are; // in the middle of creating in. For those situations, allow the; // parser to ignore missing object errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.h:101,Availability,error,error,101,"/// ParseFile - Main entrypoint for parsing a tblgen file. These parser; /// routines return true on error, or false on success.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.h:77,Integrability,rout,routines,77,"/// ParseFile - Main entrypoint for parsing a tblgen file. These parser; /// routines return true on error, or false on success.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.h:111,Testability,assert,assertion,111,"// Returns a pointer to the new scope, so that the caller can pass it back; // to PopScope which will check by assertion that the pushes and pops; // match up properly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/TableGen/TGParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/TableGen/TGParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Target.cpp:3,Safety,Avoid,Avoid,3,"// Avoid including ""llvm-c/Core.h"" for compile time, fwd-declare this instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/Target.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/Target.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/TargetLoweringObjectFile.cpp:114,Modifiability,variab,variable,114,"/// getKindForGlobal - This is a top-level target-independent classifier for; /// a global object. Given a global variable and information from the TM, this; /// function classifies the global in a target independent manner. This function; /// may be overridden by the target implementation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/TargetLoweringObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/TargetLoweringObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/TargetLoweringObjectFile.cpp:10,Modifiability,variab,variables,10,// Global variables require more detailed analysis.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/TargetLoweringObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/TargetLoweringObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/TargetLoweringObjectFile.cpp:24,Modifiability,variab,variables,24,// Zero-initialized TLS variables with local linkage always get classified; // as ThreadBSSLocal.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/TargetLoweringObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/TargetLoweringObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/TargetLoweringObjectFile.cpp:3,Modifiability,Variab,Variables,3,// Variables with common linkage always get classified as common.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/TargetLoweringObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/TargetLoweringObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/TargetLoweringObjectFile.cpp:10,Modifiability,variab,variables,10,// Global variables with '!exclude' should get the exclude section kind if; // they have an explicit section and no other metadata.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/TargetLoweringObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/TargetLoweringObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/TargetLoweringObjectFile.cpp:160,Availability,avail,available,160,/// This method computes the appropriate section to emit the specified global; /// variable or function definition. This should not be passed external (or; /// available externally) globals.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/TargetLoweringObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/TargetLoweringObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/TargetLoweringObjectFile.cpp:83,Modifiability,variab,variable,83,/// This method computes the appropriate section to emit the specified global; /// variable or function definition. This should not be passed external (or; /// available externally) globals.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/TargetLoweringObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/TargetLoweringObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/TargetLoweringObjectFile.cpp:23,Integrability,depend,depending,23,// Use default section depending on the 'type' of global,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/TargetLoweringObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/TargetLoweringObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/TargetLoweringObjectFile.cpp:160,Availability,avail,available,160,/// This method computes the appropriate section to emit the specified global; /// variable or function definition. This should not be passed external (or; /// available externally) globals.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/TargetLoweringObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/TargetLoweringObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/TargetLoweringObjectFile.cpp:83,Modifiability,variab,variable,83,/// This method computes the appropriate section to emit the specified global; /// variable or function definition. This should not be passed external (or; /// available externally) globals.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/TargetLoweringObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/TargetLoweringObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/TargetLoweringObjectFile.cpp:99,Modifiability,variab,variable,99,/// getTTypeGlobalReference - Return an MCExpr to use for a; /// reference to the specified global variable from exception; /// handling information.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/TargetLoweringObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/TargetLoweringObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/TargetLoweringObjectFile.cpp:19,Usability,clear,clear,19,"// FIXME: It's not clear what, if any, default this should have - perhaps a; // null return could mean 'no location' & we should just do that here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/TargetLoweringObjectFile.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/TargetLoweringObjectFile.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/TargetMachine.cpp:128,Energy Efficiency,reduce,reduces,128,"// Treat all globals in explicit sections as small, except for the standard; // large sections of .lbss, .ldata, .lrodata. This reduces the risk of linking; // together small and large sections, resulting in small references to large; // data sections. The code model attribute overrides this above.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/TargetMachine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/TargetMachine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/TargetMachine.cpp:140,Safety,risk,risk,140,"// Treat all globals in explicit sections as small, except for the standard; // large sections of .lbss, .ldata, .lrodata. This reduces the risk of linking; // together small and large sections, resulting in small references to large; // data sections. The code model attribute overrides this above.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/TargetMachine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/TargetMachine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/TargetMachine.cpp:333,Testability,log,logic,333,"// According to the llvm language reference, we should be able to; // just return false in here if we have a GV, as we know it is; // dso_preemptable. At this point in time, the various IR producers; // have not been transitioned to always produce a dso_local when it; // is possible to do so.; //; // As a result we still have some logic in here to improve the quality of the; // generated code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/TargetMachine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/TargetMachine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/TargetMachine.cpp:13,Modifiability,variab,variables,13,"// On MinGW, variables that haven't been declared with DLLImport may still; // end up automatically imported by the linker. To make this feasible,; // don't assume the variables to be DSO local unless we actually know; // that for sure. This only has to be done for variables; for functions; // the linker can insert thunks for calling functions from another DLL.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/TargetMachine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/TargetMachine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/TargetMachine.cpp:168,Modifiability,variab,variables,168,"// On MinGW, variables that haven't been declared with DLLImport may still; // end up automatically imported by the linker. To make this feasible,; // don't assume the variables to be DSO local unless we actually know; // that for sure. This only has to be done for variables; for functions; // the linker can insert thunks for calling functions from another DLL.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/TargetMachine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/TargetMachine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/TargetMachine.cpp:266,Modifiability,variab,variables,266,"// On MinGW, variables that haven't been declared with DLLImport may still; // end up automatically imported by the linker. To make this feasible,; // don't assume the variables to be DSO local unless we actually know; // that for sure. This only has to be done for variables; for functions; // the linker can insert thunks for calling functions from another DLL.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/TargetMachine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/TargetMachine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/TargetMachine.cpp:16,Performance,optimiz,optimization,16,"/// Returns the optimization level: None, Less, Default, or Aggressive.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/TargetMachine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/TargetMachine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/TargetMachine.cpp:3,Usability,Simpl,Simple,3,"// Simple case: If GV is not private, it is not important to find out if; // private labels are legal in this case or not.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/TargetMachine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/TargetMachine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/TargetMachine.cpp:24,Integrability,depend,depend,24,"// Since Analysis can't depend on Target, use a std::function to invert the; // dependency.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/TargetMachine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/TargetMachine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/TargetMachine.cpp:80,Integrability,depend,dependency,80,"// Since Analysis can't depend on Target, use a std::function to invert the; // dependency.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/TargetMachine.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/TargetMachine.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64.h:29,Integrability,interface,interface,29,"//==-- AArch64.h - Top-level interface for AArch64 --------------*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains the entry points for global functions defined in the LLVM; // AArch64 back-end.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A53Fix835769.cpp:706,Performance,load,loads,706,"//===-- AArch64A53Fix835769.cpp -------------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; // This pass changes code to work around Cortex-A53 erratum 835769.; // It works around it by inserting a nop instruction in code sequences that; // in some circumstances may trigger the erratum.; // It inserts a nop instruction between a sequence of the following 2 classes; // of instructions:; // instr 1: mem-instr (including loads, stores and prefetches).; // instr 2: non-SIMD integer multiply-accumulate writing 64-bit X registers.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A53Fix835769.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A53Fix835769.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A53Fix835769.cpp:45,Performance,load,load,45,"// Must return true if this instruction is a load, a store or a prefetch.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A53Fix835769.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A53Fix835769.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A53Fix835769.cpp:8,Deployability,update,update,8,"// Then update the basic block, inserting nops between the detected sequences.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A53Fix835769.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A53Fix835769.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A53Fix835769.cpp:59,Safety,detect,detected,59,"// Then update the basic block, inserting nops between the detected sequences.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A53Fix835769.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A53Fix835769.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp:906,Energy Efficiency,allocate,allocate,906,"//===-- AArch64A57FPLoadBalancing.cpp - Balance FP ops statically on A57---===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; // For best-case performance on Cortex-A57, we should try to use a balanced; // mix of odd and even D-registers when performing a critical sequence of; // independent, non-quadword FP/ASIMD floating-point multiply or; // multiply-accumulate operations.; //; // This pass attempts to detect situations where the register allocation may; // adversely affect this load balancing and to change the registers used so as; // to better utilize the CPU.; //; // Ideally we'd just take each multiply or multiply-accumulate in turn and; // allocate it alternating even or odd registers. However, multiply-accumulates; // are most efficiently performed in the same functional unit as their; // accumulation operand. Therefore this pass tries to find maximal sequences; // (""Chains"") of multiply-accumulates linked via their accumulation operand,; // and assign them all the same ""color"" (oddness/evenness).; //; // This optimization affects S-register and D-register floating point; // multiplies and FMADD/FMAs, as well as vector (floating point only) muls and; // FMADD/FMA. Q register instructions (and 128-bit vector instructions) are; // not affected.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp:996,Energy Efficiency,efficient,efficiently,996,"//===-- AArch64A57FPLoadBalancing.cpp - Balance FP ops statically on A57---===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; // For best-case performance on Cortex-A57, we should try to use a balanced; // mix of odd and even D-registers when performing a critical sequence of; // independent, non-quadword FP/ASIMD floating-point multiply or; // multiply-accumulate operations.; //; // This pass attempts to detect situations where the register allocation may; // adversely affect this load balancing and to change the registers used so as; // to better utilize the CPU.; //; // Ideally we'd just take each multiply or multiply-accumulate in turn and; // allocate it alternating even or odd registers. However, multiply-accumulates; // are most efficiently performed in the same functional unit as their; // accumulation operand. Therefore this pass tries to find maximal sequences; // (""Chains"") of multiply-accumulates linked via their accumulation operand,; // and assign them all the same ""color"" (oddness/evenness).; //; // This optimization affects S-register and D-register floating point; // multiplies and FMADD/FMAs, as well as vector (floating point only) muls and; // FMADD/FMA. Q register instructions (and 128-bit vector instructions) are; // not affected.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp:393,Performance,perform,performance,393,"//===-- AArch64A57FPLoadBalancing.cpp - Balance FP ops statically on A57---===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; // For best-case performance on Cortex-A57, we should try to use a balanced; // mix of odd and even D-registers when performing a critical sequence of; // independent, non-quadword FP/ASIMD floating-point multiply or; // multiply-accumulate operations.; //; // This pass attempts to detect situations where the register allocation may; // adversely affect this load balancing and to change the registers used so as; // to better utilize the CPU.; //; // Ideally we'd just take each multiply or multiply-accumulate in turn and; // allocate it alternating even or odd registers. However, multiply-accumulates; // are most efficiently performed in the same functional unit as their; // accumulation operand. Therefore this pass tries to find maximal sequences; // (""Chains"") of multiply-accumulates linked via their accumulation operand,; // and assign them all the same ""color"" (oddness/evenness).; //; // This optimization affects S-register and D-register floating point; // multiplies and FMADD/FMAs, as well as vector (floating point only) muls and; // FMADD/FMA. Q register instructions (and 128-bit vector instructions) are; // not affected.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp:493,Performance,perform,performing,493,"//===-- AArch64A57FPLoadBalancing.cpp - Balance FP ops statically on A57---===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; // For best-case performance on Cortex-A57, we should try to use a balanced; // mix of odd and even D-registers when performing a critical sequence of; // independent, non-quadword FP/ASIMD floating-point multiply or; // multiply-accumulate operations.; //; // This pass attempts to detect situations where the register allocation may; // adversely affect this load balancing and to change the registers used so as; // to better utilize the CPU.; //; // Ideally we'd just take each multiply or multiply-accumulate in turn and; // allocate it alternating even or odd registers. However, multiply-accumulates; // are most efficiently performed in the same functional unit as their; // accumulation operand. Therefore this pass tries to find maximal sequences; // (""Chains"") of multiply-accumulates linked via their accumulation operand,; // and assign them all the same ""color"" (oddness/evenness).; //; // This optimization affects S-register and D-register floating point; // multiplies and FMADD/FMAs, as well as vector (floating point only) muls and; // FMADD/FMA. Q register instructions (and 128-bit vector instructions) are; // not affected.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp:737,Performance,load,load,737,"//===-- AArch64A57FPLoadBalancing.cpp - Balance FP ops statically on A57---===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; // For best-case performance on Cortex-A57, we should try to use a balanced; // mix of odd and even D-registers when performing a critical sequence of; // independent, non-quadword FP/ASIMD floating-point multiply or; // multiply-accumulate operations.; //; // This pass attempts to detect situations where the register allocation may; // adversely affect this load balancing and to change the registers used so as; // to better utilize the CPU.; //; // Ideally we'd just take each multiply or multiply-accumulate in turn and; // allocate it alternating even or odd registers. However, multiply-accumulates; // are most efficiently performed in the same functional unit as their; // accumulation operand. Therefore this pass tries to find maximal sequences; // (""Chains"") of multiply-accumulates linked via their accumulation operand,; // and assign them all the same ""color"" (oddness/evenness).; //; // This optimization affects S-register and D-register floating point; // multiplies and FMADD/FMAs, as well as vector (floating point only) muls and; // FMADD/FMA. Q register instructions (and 128-bit vector instructions) are; // not affected.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp:1008,Performance,perform,performed,1008,"//===-- AArch64A57FPLoadBalancing.cpp - Balance FP ops statically on A57---===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; // For best-case performance on Cortex-A57, we should try to use a balanced; // mix of odd and even D-registers when performing a critical sequence of; // independent, non-quadword FP/ASIMD floating-point multiply or; // multiply-accumulate operations.; //; // This pass attempts to detect situations where the register allocation may; // adversely affect this load balancing and to change the registers used so as; // to better utilize the CPU.; //; // Ideally we'd just take each multiply or multiply-accumulate in turn and; // allocate it alternating even or odd registers. However, multiply-accumulates; // are most efficiently performed in the same functional unit as their; // accumulation operand. Therefore this pass tries to find maximal sequences; // (""Chains"") of multiply-accumulates linked via their accumulation operand,; // and assign them all the same ""color"" (oddness/evenness).; //; // This optimization affects S-register and D-register floating point; // multiplies and FMADD/FMAs, as well as vector (floating point only) muls and; // FMADD/FMA. Q register instructions (and 128-bit vector instructions) are; // not affected.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp:1285,Performance,optimiz,optimization,1285,"//===-- AArch64A57FPLoadBalancing.cpp - Balance FP ops statically on A57---===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; // For best-case performance on Cortex-A57, we should try to use a balanced; // mix of odd and even D-registers when performing a critical sequence of; // independent, non-quadword FP/ASIMD floating-point multiply or; // multiply-accumulate operations.; //; // This pass attempts to detect situations where the register allocation may; // adversely affect this load balancing and to change the registers used so as; // to better utilize the CPU.; //; // Ideally we'd just take each multiply or multiply-accumulate in turn and; // allocate it alternating even or odd registers. However, multiply-accumulates; // are most efficiently performed in the same functional unit as their; // accumulation operand. Therefore this pass tries to find maximal sequences; // (""Chains"") of multiply-accumulates linked via their accumulation operand,; // and assign them all the same ""color"" (oddness/evenness).; //; // This optimization affects S-register and D-register floating point; // multiplies and FMADD/FMAs, as well as vector (floating point only) muls and; // FMADD/FMA. Q register instructions (and 128-bit vector instructions) are; // not affected.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp:659,Safety,detect,detect,659,"//===-- AArch64A57FPLoadBalancing.cpp - Balance FP ops statically on A57---===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; // For best-case performance on Cortex-A57, we should try to use a balanced; // mix of odd and even D-registers when performing a critical sequence of; // independent, non-quadword FP/ASIMD floating-point multiply or; // multiply-accumulate operations.; //; // This pass attempts to detect situations where the register allocation may; // adversely affect this load balancing and to change the registers used so as; // to better utilize the CPU.; //; // Ideally we'd just take each multiply or multiply-accumulate in turn and; // allocate it alternating even or odd registers. However, multiply-accumulates; // are most efficiently performed in the same functional unit as their; // accumulation operand. Therefore this pass tries to find maximal sequences; // (""Chains"") of multiply-accumulates linked via their accumulation operand,; // and assign them all the same ""color"" (oddness/evenness).; //; // This optimization affects S-register and D-register floating point; // multiplies and FMADD/FMAs, as well as vector (floating point only) muls and; // FMADD/FMA. Q register instructions (and 128-bit vector instructions) are; // not affected.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp:134,Testability,test,testing,134,// Enforce the algorithm to use the scavenged register even when the original; // destination register is the correct color. Used for testing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp:105,Testability,test,testing,105,// Never use the balance information obtained from chains - return a specific; // color always. Used for testing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp:963,Safety,safe,safely,963,"/// A Chain is a sequence of instructions that are linked together by; /// an accumulation operand. For example:; ///; /// fmul def d0, ?; /// fmla def d1, ?, ?, killed d0; /// fmla def d2, ?, ?, killed d1; ///; /// There may be other instructions interleaved in the sequence that; /// do not belong to the chain. These other instructions must not use; /// the ""chain"" register at any point.; ///; /// We currently only support chains where the ""chain"" operand is killed; /// at each link in the chain for simplicity.; /// A chain has three important instructions - Start, Last and Kill.; /// * The start instruction is the first instruction in the chain.; /// * Last is the final instruction in the chain.; /// * Kill may or may not be defined. If defined, Kill is the instruction; /// where the outgoing value of the Last instruction is killed.; /// This information is important as if we know the outgoing value is; /// killed with no intervening uses, we can safely change its register.; ///; /// Without a kill instruction, we must assume the outgoing value escapes; /// beyond our model and either must not change its register or must; /// create a fixup FMOV to keep the old register value consistent.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp:506,Usability,simpl,simplicity,506,"/// A Chain is a sequence of instructions that are linked together by; /// an accumulation operand. For example:; ///; /// fmul def d0, ?; /// fmla def d1, ?, ?, killed d0; /// fmla def d2, ?, ?, killed d1; ///; /// There may be other instructions interleaved in the sequence that; /// do not belong to the chain. These other instructions must not use; /// the ""chain"" register at any point.; ///; /// We currently only support chains where the ""chain"" operand is killed; /// at each link in the chain for simplicity.; /// A chain has three important instructions - Start, Last and Kill.; /// * The start instruction is the first instruction in the chain.; /// * Last is the final instruction in the chain.; /// * Kill may or may not be defined. If defined, Kill is the instruction; /// where the outgoing value of the Last instruction is killed.; /// This information is important as if we know the outgoing value is; /// killed with no intervening uses, we can safely change its register.; ///; /// Without a kill instruction, we must assume the outgoing value escapes; /// beyond our model and either must not change its register or must; /// create a fixup FMOV to keep the old register value consistent.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp:126,Testability,test,tests,126,"/// The index, from the start of the basic block, that each marker; /// appears. These are stored so we can do quick interval tests.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp:13,Usability,simpl,simple,13,/// Return a simple string representation of the chain.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp:172,Performance,perform,perform,172,"// Group the chains into disjoint sets based on their liveness range. This is; // a poor-man's version of graph coloring. Ideally we'd create an interference; // graph and perform full-on graph coloring on that, but;; // (a) That's rather heavyweight for only two colors.; // (b) We expect multiple disjoint interference regions - in practice the live; // range of chains is quite small and they are clustered between loads; // and stores.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp:418,Performance,load,loads,418,"// Group the chains into disjoint sets based on their liveness range. This is; // a poor-man's version of graph coloring. Ideally we'd create an interference; // graph and perform full-on graph coloring on that, but;; // (a) That's rather heavyweight for only two colors.; // (b) We expect multiple disjoint interference regions - in practice the live; // range of chains is quite small and they are clustered between loads; // and stores.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp:191,Usability,simpl,simpler,191,"// Now we assume that every member of an equivalence class interferes; // with every other member of that class, and with no members of other classes.; // Convert the EquivalenceClasses to a simpler set of sets.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp:512,Usability,simpl,simplify,512,"// As we only have two colors, we can track the global (BB-level) balance of; // odds versus evens. We aim to keep this near zero to keep both execution; // units fed.; // Positive means we're even-heavy, negative we're odd-heavy.; //; // FIXME: If chains have interdependencies, for example:; // mul r0, r1, r2; // mul r3, r0, r1; // We do not model this and may color each one differently, assuming we'll; // get ILP when we obviously can't. This hasn't been seen to be a problem; // in practice so far, so we simplify the algorithm by ignoring it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp:469,Modifiability,config,configurable,469,"// We try and get the best candidate from L to color next, given that our; // preferred color is ""PreferredColor"". L is ordered from larger to smaller; // chains. It is beneficial to color the large chains before the small chains,; // but if we can't find a chain of the maximum length with the preferred color,; // we fuzz the size and look for slightly smaller chains before giving up and; // returning a chain that must be recolored.; // FIXME: Does this need to be configurable?",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp:326,Deployability,update,updated,326,"// Sort by descending size order so that we allocate the most important; // sets first.; // Tie-break equivalent sizes by sorting chains requiring fixups before; // those without fixups. The logic here is that we should look at the; // chains that we cannot change before we look at those we can,; // so the parity counter is updated and we know what color we should; // change them to!; // Final tie-break with instruction order so pass output is stable (i.e. not; // dependent on malloc'd pointer values).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp:44,Energy Efficiency,allocate,allocate,44,"// Sort by descending size order so that we allocate the most important; // sets first.; // Tie-break equivalent sizes by sorting chains requiring fixups before; // those without fixups. The logic here is that we should look at the; // chains that we cannot change before we look at those we can,; // so the parity counter is updated and we know what color we should; // change them to!; // Final tie-break with instruction order so pass output is stable (i.e. not; // dependent on malloc'd pointer values).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp:469,Integrability,depend,dependent,469,"// Sort by descending size order so that we allocate the most important; // sets first.; // Tie-break equivalent sizes by sorting chains requiring fixups before; // those without fixups. The logic here is that we should look at the; // chains that we cannot change before we look at those we can,; // so the parity counter is updated and we know what color we should; // change them to!; // Final tie-break with instruction order so pass output is stable (i.e. not; // dependent on malloc'd pointer values).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp:191,Testability,log,logic,191,"// Sort by descending size order so that we allocate the most important; // sets first.; // Tie-break equivalent sizes by sorting chains requiring fixups before; // those without fixups. The logic here is that we should look at the; // chains that we cannot change before we look at those we can,; // so the parity counter is updated and we know what color we should; // change them to!; // Final tie-break with instruction order so pass output is stable (i.e. not; // dependent on malloc'd pointer values).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp:164,Availability,down,down,164,"// If we'll need a fixup FMOV, don't bother. Testing has shown that this; // happens infrequently and when it does it has at least a 50% chance of; // slowing code down instead of speeding it up.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp:45,Testability,Test,Testing,45,"// If we'll need a fixup FMOV, don't bother. Testing has shown that this; // happens infrequently and when it does it has at least a 50% chance of; // slowing code down instead of speeding it up.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp:47,Availability,avail,available,47,// Can we find an appropriate register that is available throughout the life; // of the chain? Simulate liveness backwards until the end of the chain.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp:34,Availability,alive,alive,34,// Check which register units are alive throughout the chain.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp:16,Energy Efficiency,allocate,allocate,16,"// Make sure we allocate in-order, to get the cheapest registers first.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp:12,Safety,safe,safe,12,// Now it's safe to remove the substs identified earlier.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp:207,Modifiability,rewrite,rewrite,207,// For simplicity we only chain together sequences of MULs/MLAs where the; // accumulator register is killed on each instruction. This means we don't; // need to track other uses of the registers we want to rewrite.; //; // FIXME: We could extend to handle the non-kill cases for more coverage.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp:240,Modifiability,extend,extend,240,// For simplicity we only chain together sequences of MULs/MLAs where the; // accumulator register is killed on each instruction. This means we don't; // need to track other uses of the registers we want to rewrite.; //; // FIXME: We could extend to handle the non-kill cases for more coverage.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp:7,Usability,simpl,simplicity,7,// For simplicity we only chain together sequences of MULs/MLAs where the; // accumulator register is killed on each instruction. This means we don't; // need to track other uses of the registers we want to rewrite.; //; // FIXME: We could extend to handle the non-kill cases for more coverage.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64A57FPLoadBalancing.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AdvSIMDScalarPass.cpp:964,Performance,optimiz,optimization,964,"//===-- AArch64AdvSIMDScalar.cpp - Replace dead defs w/ zero reg --===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; // When profitable, replace GPR targeting i64 instructions with their; // AdvSIMD scalar equivalents. Generally speaking, ""profitable"" is defined; // as minimizing the number of cross-class register copies.; //===----------------------------------------------------------------------===//; //===----------------------------------------------------------------------===//; // TODO: Graph based predicate heuristics.; // Walking the instruction list linearly will get many, perhaps most, of; // the cases, but to do a truly thorough job of this, we need a more; // wholistic approach.; //; // This optimization is very similar in spirit to the register allocator's; // spill placement, only here we're determining where to place cross-class; // register copies rather than spills. As such, a similar approach is; // called for.; //; // We want to build up a set of graphs of all instructions which are candidates; // for transformation along with instructions which generate their inputs and; // consume their outputs. For each edge in the graph, we assign a weight; // based on whether there is a copy required there (weight zero if not) and; // the block frequency of the block containing the defining or using; // instruction, whichever is less. Our optimization is then a graph problem; // to minimize the total weight of all the graphs, then transform instructions; // and add or remove copy instructions as called for to implement the; // solution.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AdvSIMDScalarPass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AdvSIMDScalarPass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AdvSIMDScalarPass.cpp:1619,Performance,optimiz,optimization,1619,"//===-- AArch64AdvSIMDScalar.cpp - Replace dead defs w/ zero reg --===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; // When profitable, replace GPR targeting i64 instructions with their; // AdvSIMD scalar equivalents. Generally speaking, ""profitable"" is defined; // as minimizing the number of cross-class register copies.; //===----------------------------------------------------------------------===//; //===----------------------------------------------------------------------===//; // TODO: Graph based predicate heuristics.; // Walking the instruction list linearly will get many, perhaps most, of; // the cases, but to do a truly thorough job of this, we need a more; // wholistic approach.; //; // This optimization is very similar in spirit to the register allocator's; // spill placement, only here we're determining where to place cross-class; // register copies rather than spills. As such, a similar approach is; // called for.; //; // We want to build up a set of graphs of all instructions which are candidates; // for transformation along with instructions which generate their inputs and; // consume their outputs. For each edge in the graph, we assign a weight; // based on whether there is a copy required there (weight zero if not) and; // the block frequency of the block containing the defining or using; // instruction, whichever is less. Our optimization is then a graph problem; // to minimize the total weight of all the graphs, then transform instructions; // and add or remove copy instructions as called for to implement the; // solution.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AdvSIMDScalarPass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AdvSIMDScalarPass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AdvSIMDScalarPass.cpp:98,Testability,test,testing,98,// Allow forcing all i64 operations with equivalent SIMD instructions to use; // them. For stress-testing the transformation function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AdvSIMDScalarPass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AdvSIMDScalarPass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AdvSIMDScalarPass.cpp:121,Deployability,Update,Update,121,"// transformInstruction - Perform the transformation of an instruction; // to its equivalant AdvSIMD scalar instruction. Update inputs and outputs; // to be the correct register class, minimizing cross-class copies.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AdvSIMDScalarPass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AdvSIMDScalarPass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AdvSIMDScalarPass.cpp:26,Performance,Perform,Perform,26,"// transformInstruction - Perform the transformation of an instruction; // to its equivalant AdvSIMD scalar instruction. Update inputs and outputs; // to be the correct register class, minimizing cross-class copies.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AdvSIMDScalarPass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AdvSIMDScalarPass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AdvSIMDScalarPass.cpp:121,Deployability,Update,Update,121,"// transformInstruction - Perform the transformation of an instruction; // to its equivalant AdvSIMD scalar instruction. Update inputs and outputs; // to be the correct register class, minimizing cross-class copies.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AdvSIMDScalarPass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AdvSIMDScalarPass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AdvSIMDScalarPass.cpp:26,Performance,Perform,Perform,26,"// transformInstruction - Perform the transformation of an instruction; // to its equivalant AdvSIMD scalar instruction. Update inputs and outputs; // to be the correct register class, minimizing cross-class copies.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AdvSIMDScalarPass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AdvSIMDScalarPass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AdvSIMDScalarPass.cpp:130,Safety,avoid,avoid,130,// Create a vreg for the destination.; // FIXME: No need to do this if the ultimate user expects an FPR64.; // Check for that and avoid the copy if possible.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AdvSIMDScalarPass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AdvSIMDScalarPass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AdvSIMDScalarPass.cpp:54,Usability,simpl,simple,54,"// For now, all of the new instructions have the same simple three-register; // form, so no need to special case based on what instruction we're; // building.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AdvSIMDScalarPass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AdvSIMDScalarPass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AdvSIMDScalarPass.cpp:60,Safety,avoid,avoid,60,// Now copy the result back out to a GPR.; // FIXME: Try to avoid this if all uses could actually just use the FPR64; // directly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AdvSIMDScalarPass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AdvSIMDScalarPass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64Arm64ECCallLowering.cpp:120,Availability,down,down,120,"// The first argument to a thunk is the called function, stored in x9.; // For exit thunks, we pass the called function down to the emulator;; // for entry/guest exit thunks, we just call the Arm64 function directly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64Arm64ECCallLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64Arm64ECCallLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64Arm64ECCallLowering.cpp:268,Usability,simpl,simplify,268,"// sret+inreg indicates a call that returns a C++ class value. This is; // actually equivalent to just passing and returning a void* pointer; // as the first argument. Translate it that way, instead of trying; // to model ""inreg"" in the thunk's calling convention, to simplify; // the rest of the code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64Arm64ECCallLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64Arm64ECCallLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64Arm64ECCallLowering.cpp:194,Safety,avoid,avoids,194,"// Only copy sret from the first argument. For C++ instance methods, clang can; // stick an sret marking on a later argument, but it doesn't actually affect; // the ABI, so we can omit it. This avoids triggering a verifier assertion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64Arm64ECCallLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64Arm64ECCallLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64Arm64ECCallLowering.cpp:223,Testability,assert,assertion,223,"// Only copy sret from the first argument. For C++ instance methods, clang can; // stick an sret marking on a later argument, but it doesn't actually affect; // the ABI, so we can omit it. This avoids triggering a verifier assertion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64Arm64ECCallLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64Arm64ECCallLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64Arm64ECCallLowering.cpp:98,Usability,simpl,simple,98,"// Translate arguments from AArch64 calling convention to x86 calling; // convention.; //; // For simple types, we don't need to do any translation: they're; // represented the same way. (Implicit sign extension is not part of; // either convention.); //; // The big thing we have to worry about is struct types... but; // fortunately AArch64 clang is pretty friendly here: the cases that need; // translation are always passed as a struct or array. (If we run into; // some cases where this doesn't work, we can teach clang to mark it up; // with an attribute.); //; // The first argument is the called function, stored in x9.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64Arm64ECCallLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64Arm64ECCallLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64Arm64ECCallLowering.cpp:263,Integrability,rout,routine,263,"// Builds the ""guest exit thunk"", a helper to call a function which may or may; // not be an exit thunk. (We optimistically assume non-dllimport function; // declarations refer to functions defined in AArch64 code; if the linker; // can't prove that, we use this routine instead.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64Arm64ECCallLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64Arm64ECCallLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64Arm64ECCallLowering.cpp:3,Performance,Load,Load,3,// Load the global symbol as a pointer to the check function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64Arm64ECCallLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64Arm64ECCallLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64Arm64ECCallLowering.cpp:3,Performance,Load,Load,3,// Load the global symbol as a pointer to the check function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64Arm64ECCallLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64Arm64ECCallLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp:474,Integrability,depend,dependent,474,"//===- AArch64AsmPrinter.cpp - AArch64 LLVM assembly writer ---------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains a printer that converts from our internal representation; // of machine-dependent LLVM code to the AArch64 assembly language.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp:4,Integrability,Wrap,Wrapper,4,/// Wrapper for MCInstLowering.lowerOperand() for the; /// tblgen'erated pseudo lowering.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp:47,Usability,simpl,simple,47,/// tblgen'erated driver function for lowering simple MI->MC; /// pseudo instructions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp:205,Deployability,patch,patching,205,"// We want to emit the following pattern:; //; // .Lxray_sled_N:; // ALIGN; // B #32; // ; 7 NOP instructions (28 bytes); // .tmpN; //; // We need the 28 bytes (7 instructions) because at runtime, we'd be patching; // over the full 32 bytes (8 instructions) with the following pattern:; //; // STP X0, X30, [SP, #-16]! ; push X0 and the link register to the stack; // LDR W17, #12 ; W17 := function ID; // LDR X16,#12 ; X16 := addr of __xray_FunctionEntry or __xray_FunctionExit; // BLR X16 ; call the tracing trampoline; // ;DATA: 32 bits of function ID; // ;DATA: lower 32 bits of the address of the trampoline; // ;DATA: higher 32 bits of the address of the trampoline; // LDP X0, X30, [SP], #16 ; pop X0 and the link register from the stack; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp:549,Deployability,patch,patching,549,"// Emit the following code for Intrinsic::{xray_customevent,xray_typedevent}; // (built-in functions __xray_customevent/__xray_typedevent).; //; // .Lxray_event_sled_N:; // b 1f; // save x0 and x1 (and also x2 for TYPED_EVENT_CALL); // set up x0 and x1 (and also x2 for TYPED_EVENT_CALL); // bl __xray_CustomEvent or __xray_TypedEvent; // restore x0 and x1 (and also x2 for TYPED_EVENT_CALL); // 1:; //; // There are 6 instructions for EVENT_CALL and 9 for TYPED_EVENT_CALL.; //; // Then record a sled of kind CUSTOM_EVENT or TYPED_EVENT.; // After patching, b .+N will become a nop.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp:87,Security,hash,hashes,87,// Default to using the intra-procedure-call temporary registers for; // comparing the hashes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp:54,Performance,load,load,54,"// Checking XZR makes no sense. Instead of emitting a load, zero; // ScratchRegs[0] and use it for the ESR AddrIndex below.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp:25,Deployability,patch,patchable-function-prefix,25,// Adjust the offset for patchable-function-prefix. This assumes that; // patchable-function-prefix is the same for all functions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp:74,Deployability,patch,patchable-function-prefix,74,// Adjust the offset for patchable-function-prefix. This assumes that; // patchable-function-prefix is the same for all functions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp:3,Performance,Load,Load,3,// Load the target function type hash.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp:33,Security,hash,hash,33,// Load the target function type hash.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp:3,Performance,Load,Load,3,// Load the expected type hash.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp:26,Security,hash,hash,26,// Load the expected type hash.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp:15,Security,hash,hashes,15,// Compare the hashes and trap if there's a mismatch.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp:221,Security,hash,hash,221,"// The base ESR is 0x8000 and the register information is encoded in bits; // 0-9 as follows:; // - 0-4: n, where the register Xn contains the target address; // - 5-9: m, where the register Wm contains the expected type hash; // Where n, m are in [0, 30].",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp:30,Performance,load,loader,30,"// The Linux kernel's dynamic loader doesn't support GOT relative; // relocations, but it doesn't support late binding either, so just call; // the function directly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp:17,Performance,load,load,17,"// Intentionally load the GOT entry and branch to it, rather than possibly; // late binding the function, which may clobber the registers before we; // have a chance to save them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp:245,Performance,perform,perform,245,"// Funny Darwin hack: This flag tells the linker that no global symbols; // contain code that falls through to other global symbols (e.g. the obvious; // implementation of multiple entry points). If this doesn't occur, the; // linker can safely perform dead code stripping. Since LLVM never; // generates code that does this, it is always safe to set.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp:238,Safety,safe,safely,238,"// Funny Darwin hack: This flag tells the linker that no global symbols; // contain code that falls through to other global symbols (e.g. the obvious; // implementation of multiple entry points). If this doesn't occur, the; // linker can safely perform dead code stripping. Since LLVM never; // generates code that does this, it is always safe to set.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp:339,Safety,safe,safe,339,"// Funny Darwin hack: This flag tells the linker that no global symbols; // contain code that falls through to other global symbols (e.g. the obvious; // implementation of multiple entry points). If this doesn't occur, the; // linker can safely perform dead code stripping. Since LLVM never; // generates code that does this, it is always safe to set.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp:18,Availability,fault,fault,18,// Emit stack and fault map information.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp:71,Safety,avoid,avoid,71,"// Darwin uses a linker-private symbol name for constant-pools (to; // avoid addends on the relocation?), ELF has no such concept and; // uses a normal private symbol.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp:3,Performance,Load,Load,3,// Load the number of instruction-steps to offset from the label.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp:11,Deployability,patch,patchpoint,11,"// Lower a patchpoint of the form:; // [<def>], <id>, <numBytes>, <target>, <numArgs>",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp:3,Usability,Simpl,Simple,3,// Simple pseudo-instructions have their lowering (with expansion to real; // instructions) auto-generated.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp:94,Energy Efficiency,efficient,efficient,94,"// It is generally beneficial to rewrite ""fmov s0, wzr"" to ""movi d0, #0"".; // as movi is more efficient across all cores. Newer cores can eliminate; // fmovs early and there is no difference with movi, but this not true for; // all implementations.; //; // The floating-point version doesn't quite work in rare cases on older; // CPUs, so on those targets we lower this instruction to movi.16b instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp:33,Modifiability,rewrite,rewrite,33,"// It is generally beneficial to rewrite ""fmov s0, wzr"" to ""movi d0, #0"".; // as movi is more efficient across all cores. Newer cores can eliminate; // fmovs early and there is no difference with movi, but this not true for; // all implementations.; //; // The floating-point version doesn't quite work in rare cases on older; // CPUs, so on those targets we lower this instruction to movi.16b instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp:63,Performance,optimiz,optimizing,63,"// These stub helpers are only ever called once, so here we're optimizing for; // minimum size by using the pre-indexed store variants, which saves a few; // bytes of instructions to bump & restore sp.; // _ifunc.stub_helper:; // stp	fp, lr, [sp, #-16]!; // mov	fp, sp; // stp	x1, x0, [sp, #-16]!; // stp	x3, x2, [sp, #-16]!; // stp	x5, x4, [sp, #-16]!; // stp	x7, x6, [sp, #-16]!; // stp	d1, d0, [sp, #-16]!; // stp	d3, d2, [sp, #-16]!; // stp	d5, d4, [sp, #-16]!; // stp	d7, d6, [sp, #-16]!; // bl	_resolver; // adrp	x16, lazy_pointer@GOTPAGE; // ldr	x16, [x16, lazy_pointer@GOTPAGEOFF]; // str	x0, [x16]; // mov	x16, x0; // ldp	d7, d6, [sp], #16; // ldp	d5, d4, [sp], #16; // ldp	d3, d2, [sp], #16; // ldp	d1, d0, [sp], #16; // ldp	x7, x6, [sp], #16; // ldp	x5, x4, [sp], #16; // ldp	x3, x2, [sp], #16; // ldp	x1, x0, [sp], #16; // ldp	fp, lr, [sp], #16; // br	x16",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp:9,Testability,stub,stub,9,"// These stub helpers are only ever called once, so here we're optimizing for; // minimum size by using the pre-indexed store variants, which saves a few; // bytes of instructions to bump & restore sp.; // _ifunc.stub_helper:; // stp	fp, lr, [sp, #-16]!; // mov	fp, sp; // stp	x1, x0, [sp, #-16]!; // stp	x3, x2, [sp, #-16]!; // stp	x5, x4, [sp, #-16]!; // stp	x7, x6, [sp, #-16]!; // stp	d1, d0, [sp, #-16]!; // stp	d3, d2, [sp, #-16]!; // stp	d5, d4, [sp, #-16]!; // stp	d7, d6, [sp, #-16]!; // bl	_resolver; // adrp	x16, lazy_pointer@GOTPAGE; // ldr	x16, [x16, lazy_pointer@GOTPAGEOFF]; // str	x0, [x16]; // mov	x16, x0; // ldp	d7, d6, [sp], #16; // ldp	d5, d4, [sp], #16; // ldp	d3, d2, [sp], #16; // ldp	d1, d0, [sp], #16; // ldp	x7, x6, [sp], #16; // ldp	x5, x4, [sp], #16; // ldp	x3, x2, [sp], #16; // ldp	x1, x0, [sp], #16; // ldp	fp, lr, [sp], #16; // br	x16",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64AsmPrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64BranchTargets.cpp:715,Security,attack,attacks,715,"//===-- AArch64BranchTargets.cpp -- Harden code using v8.5-A BTI extension -==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass inserts BTI instructions at the start of every function and basic; // block which could be indirectly called. The hardware will (when enabled); // trap when an indirect branch or call instruction targets an instruction; // which is not a valid BTI instruction. This is intended to guard against; // control-flow hijacking attacks. Note that this does not do anything for RET; // instructions, as they can be more precisely protected by return address; // signing.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64BranchTargets.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64BranchTargets.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CallingConvention.cpp:433,Integrability,rout,routines,433,"//=== AArch64CallingConvention.cpp - AArch64 CC impl ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains the table-generated and custom routines for the AArch64; // Calling Convention.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CallingConvention.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CallingConvention.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CallingConvention.cpp:88,Energy Efficiency,allocate,allocate,88,"// The calling convention for passing SVE tuples states that in the event; // we cannot allocate enough registers for the tuple we should still leave; // any remaining registers unallocated. However, when we call the; // CCAssignFn again we want it to behave as if all remaining registers are; // allocated. This will force the code to pass the tuple indirectly in; // accordance with the PCS.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CallingConvention.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CallingConvention.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CallingConvention.cpp:297,Energy Efficiency,allocate,allocated,297,"// The calling convention for passing SVE tuples states that in the event; // we cannot allocate enough registers for the tuple we should still leave; // any remaining registers unallocated. However, when we call the; // CCAssignFn again we want it to behave as if all remaining registers are; // allocated. This will force the code to pass the tuple indirectly in; // accordance with the PCS.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CallingConvention.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CallingConvention.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CallingConvention.cpp:94,Availability,avail,available,94,"// Return the register state back to how it was before, leaving any; // unallocated registers available for other smaller types.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CallingConvention.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CallingConvention.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CallingConvention.cpp:37,Energy Efficiency,allocate,allocated,37,// All pending members have now been allocated,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CallingConvention.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CallingConvention.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CallingConvention.cpp:37,Energy Efficiency,allocate,allocated,37,// All pending members have now been allocated,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CallingConvention.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CallingConvention.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CallingConvention.cpp:38,Energy Efficiency,allocate,allocated,38,// Add the argument to the list to be allocated once we know the size of the; // block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CallingConvention.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CallingConvention.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CallingConvention.cpp:117,Availability,avail,available,117,"/// Given an [N x Ty] block, it should be passed in a consecutive sequence of; /// registers. If no such sequence is available, mark the rest of the registers; /// of that type as used and place the argument on the stack.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CallingConvention.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CallingConvention.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CallingConvention.cpp:10,Energy Efficiency,allocate,allocate,10,"// Try to allocate a contiguous block of registers, each of the correct; // size to hold one member.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CallingConvention.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CallingConvention.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CallingConvention.cpp:38,Energy Efficiency,allocate,allocated,38,// Add the argument to the list to be allocated once we know the size of the; // block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CallingConvention.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CallingConvention.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CleanupLocalDynamicTLSPass.cpp:420,Modifiability,variab,variables,420,"//===-- AArch64CleanupLocalDynamicTLSPass.cpp ---------------------*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Local-dynamic access to thread-local variables proceeds in three stages.; //; // 1. The offset of this Module's thread-local area from TPIDR_EL0 is calculated; // in much the same way as a general-dynamic TLS-descriptor access against; // the special symbol _TLS_MODULE_BASE.; // 2. The variable's offset from _TLS_MODULE_BASE_ is calculated using; // instructions with ""dtprel"" modifiers.; // 3. These two are added, together with TPIDR_EL0, to obtain the variable's; // true address.; //; // This is only better than general-dynamic access to the variable if two or; // more of the first stage TLS-descriptor calculations can be combined. This; // pass looks through a function and performs such combinations.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CleanupLocalDynamicTLSPass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CleanupLocalDynamicTLSPass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CleanupLocalDynamicTLSPass.cpp:670,Modifiability,variab,variable,670,"//===-- AArch64CleanupLocalDynamicTLSPass.cpp ---------------------*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Local-dynamic access to thread-local variables proceeds in three stages.; //; // 1. The offset of this Module's thread-local area from TPIDR_EL0 is calculated; // in much the same way as a general-dynamic TLS-descriptor access against; // the special symbol _TLS_MODULE_BASE.; // 2. The variable's offset from _TLS_MODULE_BASE_ is calculated using; // instructions with ""dtprel"" modifiers.; // 3. These two are added, together with TPIDR_EL0, to obtain the variable's; // true address.; //; // This is only better than general-dynamic access to the variable if two or; // more of the first stage TLS-descriptor calculations can be combined. This; // pass looks through a function and performs such combinations.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CleanupLocalDynamicTLSPass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CleanupLocalDynamicTLSPass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CleanupLocalDynamicTLSPass.cpp:840,Modifiability,variab,variable,840,"//===-- AArch64CleanupLocalDynamicTLSPass.cpp ---------------------*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Local-dynamic access to thread-local variables proceeds in three stages.; //; // 1. The offset of this Module's thread-local area from TPIDR_EL0 is calculated; // in much the same way as a general-dynamic TLS-descriptor access against; // the special symbol _TLS_MODULE_BASE.; // 2. The variable's offset from _TLS_MODULE_BASE_ is calculated using; // instructions with ""dtprel"" modifiers.; // 3. These two are added, together with TPIDR_EL0, to obtain the variable's; // true address.; //; // This is only better than general-dynamic access to the variable if two or; // more of the first stage TLS-descriptor calculations can be combined. This; // pass looks through a function and performs such combinations.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CleanupLocalDynamicTLSPass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CleanupLocalDynamicTLSPass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CleanupLocalDynamicTLSPass.cpp:932,Modifiability,variab,variable,932,"//===-- AArch64CleanupLocalDynamicTLSPass.cpp ---------------------*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Local-dynamic access to thread-local variables proceeds in three stages.; //; // 1. The offset of this Module's thread-local area from TPIDR_EL0 is calculated; // in much the same way as a general-dynamic TLS-descriptor access against; // the special symbol _TLS_MODULE_BASE.; // 2. The variable's offset from _TLS_MODULE_BASE_ is calculated using; // instructions with ""dtprel"" modifiers.; // 3. These two are added, together with TPIDR_EL0, to obtain the variable's; // true address.; //; // This is only better than general-dynamic access to the variable if two or; // more of the first stage TLS-descriptor calculations can be combined. This; // pass looks through a function and performs such combinations.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CleanupLocalDynamicTLSPass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CleanupLocalDynamicTLSPass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CleanupLocalDynamicTLSPass.cpp:1067,Performance,perform,performs,1067,"//===-- AArch64CleanupLocalDynamicTLSPass.cpp ---------------------*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Local-dynamic access to thread-local variables proceeds in three stages.; //; // 1. The offset of this Module's thread-local area from TPIDR_EL0 is calculated; // in much the same way as a general-dynamic TLS-descriptor access against; // the special symbol _TLS_MODULE_BASE.; // 2. The variable's offset from _TLS_MODULE_BASE_ is calculated using; // instructions with ""dtprel"" modifiers.; // 3. These two are added, together with TPIDR_EL0, to obtain the variable's; // true address.; //; // This is only better than general-dynamic access to the variable if two or; // more of the first stage TLS-descriptor calculations can be combined. This; // pass looks through a function and performs such combinations.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CleanupLocalDynamicTLSPass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CleanupLocalDynamicTLSPass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CleanupLocalDynamicTLSPass.cpp:397,Security,access,access,397,"//===-- AArch64CleanupLocalDynamicTLSPass.cpp ---------------------*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Local-dynamic access to thread-local variables proceeds in three stages.; //; // 1. The offset of this Module's thread-local area from TPIDR_EL0 is calculated; // in much the same way as a general-dynamic TLS-descriptor access against; // the special symbol _TLS_MODULE_BASE.; // 2. The variable's offset from _TLS_MODULE_BASE_ is calculated using; // instructions with ""dtprel"" modifiers.; // 3. These two are added, together with TPIDR_EL0, to obtain the variable's; // true address.; //; // This is only better than general-dynamic access to the variable if two or; // more of the first stage TLS-descriptor calculations can be combined. This; // pass looks through a function and performs such combinations.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CleanupLocalDynamicTLSPass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CleanupLocalDynamicTLSPass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CleanupLocalDynamicTLSPass.cpp:603,Security,access,access,603,"//===-- AArch64CleanupLocalDynamicTLSPass.cpp ---------------------*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Local-dynamic access to thread-local variables proceeds in three stages.; //; // 1. The offset of this Module's thread-local area from TPIDR_EL0 is calculated; // in much the same way as a general-dynamic TLS-descriptor access against; // the special symbol _TLS_MODULE_BASE.; // 2. The variable's offset from _TLS_MODULE_BASE_ is calculated using; // instructions with ""dtprel"" modifiers.; // 3. These two are added, together with TPIDR_EL0, to obtain the variable's; // true address.; //; // This is only better than general-dynamic access to the variable if two or; // more of the first stage TLS-descriptor calculations can be combined. This; // pass looks through a function and performs such combinations.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CleanupLocalDynamicTLSPass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CleanupLocalDynamicTLSPass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CleanupLocalDynamicTLSPass.cpp:918,Security,access,access,918,"//===-- AArch64CleanupLocalDynamicTLSPass.cpp ---------------------*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Local-dynamic access to thread-local variables proceeds in three stages.; //; // 1. The offset of this Module's thread-local area from TPIDR_EL0 is calculated; // in much the same way as a general-dynamic TLS-descriptor access against; // the special symbol _TLS_MODULE_BASE.; // 2. The variable's offset from _TLS_MODULE_BASE_ is calculated using; // instructions with ""dtprel"" modifiers.; // 3. These two are added, together with TPIDR_EL0, to obtain the variable's; // true address.; //; // This is only better than general-dynamic access to the variable if two or; // more of the first stage TLS-descriptor calculations can be combined. This; // pass looks through a function and performs such combinations.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CleanupLocalDynamicTLSPass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CleanupLocalDynamicTLSPass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CleanupLocalDynamicTLSPass.cpp:20,Security,access,accesses,20,// No point folding accesses if there isn't at least two.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CleanupLocalDynamicTLSPass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CleanupLocalDynamicTLSPass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CleanupLocalDynamicTLSPass.cpp:34,Security,access,access,34,// Make sure it's a local dynamic access.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CleanupLocalDynamicTLSPass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CleanupLocalDynamicTLSPass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CleanupLocalDynamicTLSPass.cpp:3,Deployability,Update,Update,3,// Update the call site info.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CleanupLocalDynamicTLSPass.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CleanupLocalDynamicTLSPass.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp:3440,Availability,redundant,redundant,3440,"upported LOHs are:; // * So called non-ADRP-related:; // - .loh AdrpAddLdr L1, L2, L3:; // L1: adrp xA, sym@PAGE; // L2: add xB, xA, sym@PAGEOFF; // L3: ldr xC, [xB, #imm]; // - .loh AdrpLdrGotLdr L1, L2, L3:; // L1: adrp xA, sym@GOTPAGE; // L2: ldr xB, [xA, sym@GOTPAGEOFF]; // L3: ldr xC, [xB, #imm]; // - .loh AdrpLdr L1, L3:; // L1: adrp xA, sym@PAGE; // L3: ldr xC, [xA, sym@PAGEOFF]; // - .loh AdrpAddStr L1, L2, L3:; // L1: adrp xA, sym@PAGE; // L2: add xB, xA, sym@PAGEOFF; // L3: str xC, [xB, #imm]; // - .loh AdrpLdrGotStr L1, L2, L3:; // L1: adrp xA, sym@GOTPAGE; // L2: ldr xB, [xA, sym@GOTPAGEOFF]; // L3: str xC, [xB, #imm]; // - .loh AdrpAdd L1, L2:; // L1: adrp xA, sym@PAGE; // L2: add xB, xA, sym@PAGEOFF; // For all these LOHs, L1, L2, L3 form a simple chain:; // L1 result is used only by L2 and L2 result by L3.; // L3 LOH-related argument is defined only by L2 and L2 LOH-related argument; // by L1.; // All these LOHs aim at using more efficient load/store patterns by folding; // some instructions used to compute the address directly into the load/store.; //; // * So called ADRP-related:; // - .loh AdrpAdrp L2, L1:; // L2: ADRP xA, sym1@PAGE; // L1: ADRP xA, sym2@PAGE; // L2 dominates L1 and xA is not redifined between L2 and L1; // This LOH aims at getting rid of redundant ADRP instructions.; //; // The overall design for emitting the LOHs is:; // 1. AArch64CollectLOH (this pass) records the LOHs in the AArch64FunctionInfo.; // 2. AArch64AsmPrinter reads the LOHs from AArch64FunctionInfo and it:; // 1. Associates them a label.; // 2. Emits them in a MCStreamer (EmitLOHDirective).; // - The MCMachOStreamer records them into the MCAssembler.; // - The MCAsmStreamer prints them.; // - Other MCStreamers ignore them.; // 3. Closes the MCStreamer:; // - The MachObjectWriter gets them from the MCAssembler and writes; // them in the object file.; // - Other ObjectWriters ignore them.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp:1189,Energy Efficiency,efficient,efficient,1189,"-*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains a pass that collect the Linker Optimization Hint (LOH).; // This pass should be run at the very end of the compilation flow, just before; // assembly printer.; // To be useful for the linker, the LOH must be printed into the assembly file.; //; // A LOH describes a sequence of instructions that may be optimized by the; // linker.; // This same sequence cannot be optimized by the compiler because some of; // the information will be known at link time.; // For instance, consider the following sequence:; // L1: adrp xA, sym@PAGE; // L2: add xB, xA, sym@PAGEOFF; // L3: ldr xC, [xB, #imm]; // This sequence can be turned into:; // A literal load if sym@PAGE + sym@PAGEOFF + #imm - address(L3) is < 1MB:; // L3: ldr xC, sym+#imm; // It may also be turned into either the following more efficient; // code sequences:; // - If sym@PAGEOFF + #imm fits the encoding space of L3.; // L1: adrp xA, sym@PAGE; // L3: ldr xC, [xB, sym@PAGEOFF + #imm]; // - If sym@PAGE + sym@PAGEOFF - address(L1) < 1MB:; // L1: adr xA, sym; // L3: ldr xC, [xB, #imm]; //; // To be valid a LOH must meet all the requirements needed by all the related; // possible linker transformations.; // For instance, using the running example, the constraints to emit; // "".loh AdrpAddLdr"" are:; // - L1, L2, and L3 instructions are of the expected type, i.e.,; // respectively ADRP, ADD (immediate), and LD.; // - The result of L1 is used only by L2.; // - The register argument (xA) used in the ADD instruction is defined; // only by L1.; // - The result of L2 is used only by L3.; // - The base address (xB) in L3 is defined only L2.; // - The ADRP in L1 and the ADD in L2 must reference the same s",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp:3105,Energy Efficiency,efficient,efficient,3105,"upported LOHs are:; // * So called non-ADRP-related:; // - .loh AdrpAddLdr L1, L2, L3:; // L1: adrp xA, sym@PAGE; // L2: add xB, xA, sym@PAGEOFF; // L3: ldr xC, [xB, #imm]; // - .loh AdrpLdrGotLdr L1, L2, L3:; // L1: adrp xA, sym@GOTPAGE; // L2: ldr xB, [xA, sym@GOTPAGEOFF]; // L3: ldr xC, [xB, #imm]; // - .loh AdrpLdr L1, L3:; // L1: adrp xA, sym@PAGE; // L3: ldr xC, [xA, sym@PAGEOFF]; // - .loh AdrpAddStr L1, L2, L3:; // L1: adrp xA, sym@PAGE; // L2: add xB, xA, sym@PAGEOFF; // L3: str xC, [xB, #imm]; // - .loh AdrpLdrGotStr L1, L2, L3:; // L1: adrp xA, sym@GOTPAGE; // L2: ldr xB, [xA, sym@GOTPAGEOFF]; // L3: str xC, [xB, #imm]; // - .loh AdrpAdd L1, L2:; // L1: adrp xA, sym@PAGE; // L2: add xB, xA, sym@PAGEOFF; // For all these LOHs, L1, L2, L3 form a simple chain:; // L1 result is used only by L2 and L2 result by L3.; // L3 LOH-related argument is defined only by L2 and L2 LOH-related argument; // by L1.; // All these LOHs aim at using more efficient load/store patterns by folding; // some instructions used to compute the address directly into the load/store.; //; // * So called ADRP-related:; // - .loh AdrpAdrp L2, L1:; // L2: ADRP xA, sym1@PAGE; // L1: ADRP xA, sym2@PAGE; // L2 dominates L1 and xA is not redifined between L2 and L1; // This LOH aims at getting rid of redundant ADRP instructions.; //; // The overall design for emitting the LOHs is:; // 1. AArch64CollectLOH (this pass) records the LOHs in the AArch64FunctionInfo.; // 2. AArch64AsmPrinter reads the LOHs from AArch64FunctionInfo and it:; // 1. Associates them a label.; // 2. Emits them in a MCStreamer (EmitLOHDirective).; // - The MCMachOStreamer records them into the MCAssembler.; // - The MCAsmStreamer prints them.; // - Other MCStreamers ignore them.; // 3. Closes the MCStreamer:; // - The MachObjectWriter gets them from the MCAssembler and writes; // them in the object file.; // - Other ObjectWriters ignore them.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp:433,Performance,Optimiz,Optimization,433,"//===---------- AArch64CollectLOH.cpp - AArch64 collect LOH pass --*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains a pass that collect the Linker Optimization Hint (LOH).; // This pass should be run at the very end of the compilation flow, just before; // assembly printer.; // To be useful for the linker, the LOH must be printed into the assembly file.; //; // A LOH describes a sequence of instructions that may be optimized by the; // linker.; // This same sequence cannot be optimized by the compiler because some of; // the information will be known at link time.; // For instance, consider the following sequence:; // L1: adrp xA, sym@PAGE; // L2: add xB, xA, sym@PAGEOFF; // L3: ldr xC, [xB, #imm]; // This sequence can be turned into:; // A literal load if sym@PAGE + sym@PAGEOFF + #imm - address(L3) is < 1MB:; // L3: ldr xC, sym+#imm; // It may also be turned into either the following more efficient; // code sequences:; // - If sym@PAGEOFF + #imm fits the encoding space of L3.; // L1: adrp xA, sym@PAGE; // L3: ldr xC, [xB, sym@PAGEOFF + #imm]; // - If sym@PAGE + sym@PAGEOFF - address(L1) < 1MB:; // L1: adr xA, sym; // L3: ldr xC, [xB, #imm]; //; // To be valid a LOH must meet all the requirements needed by all the related; // possible linker transformations.; // For instance, using the running example, the constraints to emit; // "".loh AdrpAddLdr"" are:; // - L1, L2, and L3 instructions are of the expected type, i.e.,; // respectively ADRP, ADD (immediate), and LD.; // - The result of L1 is used only by L2.; // - The register argument (xA) used in the ADD instruction is defined; // only by L1.; // - The result of L2 is used only by L3.; // - The base address (xB) in L3 is defined only L2",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp:705,Performance,optimiz,optimized,705,"//===---------- AArch64CollectLOH.cpp - AArch64 collect LOH pass --*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains a pass that collect the Linker Optimization Hint (LOH).; // This pass should be run at the very end of the compilation flow, just before; // assembly printer.; // To be useful for the linker, the LOH must be printed into the assembly file.; //; // A LOH describes a sequence of instructions that may be optimized by the; // linker.; // This same sequence cannot be optimized by the compiler because some of; // the information will be known at link time.; // For instance, consider the following sequence:; // L1: adrp xA, sym@PAGE; // L2: add xB, xA, sym@PAGEOFF; // L3: ldr xC, [xB, #imm]; // This sequence can be turned into:; // A literal load if sym@PAGE + sym@PAGEOFF + #imm - address(L3) is < 1MB:; // L3: ldr xC, sym+#imm; // It may also be turned into either the following more efficient; // code sequences:; // - If sym@PAGEOFF + #imm fits the encoding space of L3.; // L1: adrp xA, sym@PAGE; // L3: ldr xC, [xB, sym@PAGEOFF + #imm]; // - If sym@PAGE + sym@PAGEOFF - address(L1) < 1MB:; // L1: adr xA, sym; // L3: ldr xC, [xB, #imm]; //; // To be valid a LOH must meet all the requirements needed by all the related; // possible linker transformations.; // For instance, using the running example, the constraints to emit; // "".loh AdrpAddLdr"" are:; // - L1, L2, and L3 instructions are of the expected type, i.e.,; // respectively ADRP, ADD (immediate), and LD.; // - The result of L1 is used only by L2.; // - The register argument (xA) used in the ADD instruction is defined; // only by L1.; // - The result of L2 is used only by L3.; // - The base address (xB) in L3 is defined only L2",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp:767,Performance,optimiz,optimized,767,"//===---------- AArch64CollectLOH.cpp - AArch64 collect LOH pass --*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains a pass that collect the Linker Optimization Hint (LOH).; // This pass should be run at the very end of the compilation flow, just before; // assembly printer.; // To be useful for the linker, the LOH must be printed into the assembly file.; //; // A LOH describes a sequence of instructions that may be optimized by the; // linker.; // This same sequence cannot be optimized by the compiler because some of; // the information will be known at link time.; // For instance, consider the following sequence:; // L1: adrp xA, sym@PAGE; // L2: add xB, xA, sym@PAGEOFF; // L3: ldr xC, [xB, #imm]; // This sequence can be turned into:; // A literal load if sym@PAGE + sym@PAGEOFF + #imm - address(L3) is < 1MB:; // L3: ldr xC, sym+#imm; // It may also be turned into either the following more efficient; // code sequences:; // - If sym@PAGEOFF + #imm fits the encoding space of L3.; // L1: adrp xA, sym@PAGE; // L3: ldr xC, [xB, sym@PAGEOFF + #imm]; // - If sym@PAGE + sym@PAGEOFF - address(L1) < 1MB:; // L1: adr xA, sym; // L3: ldr xC, [xB, #imm]; //; // To be valid a LOH must meet all the requirements needed by all the related; // possible linker transformations.; // For instance, using the running example, the constraints to emit; // "".loh AdrpAddLdr"" are:; // - L1, L2, and L3 instructions are of the expected type, i.e.,; // respectively ADRP, ADD (immediate), and LD.; // - The result of L1 is used only by L2.; // - The register argument (xA) used in the ADD instruction is defined; // only by L1.; // - The result of L2 is used only by L3.; // - The base address (xB) in L3 is defined only L2",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp:1045,Performance,load,load,1045,"-*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains a pass that collect the Linker Optimization Hint (LOH).; // This pass should be run at the very end of the compilation flow, just before; // assembly printer.; // To be useful for the linker, the LOH must be printed into the assembly file.; //; // A LOH describes a sequence of instructions that may be optimized by the; // linker.; // This same sequence cannot be optimized by the compiler because some of; // the information will be known at link time.; // For instance, consider the following sequence:; // L1: adrp xA, sym@PAGE; // L2: add xB, xA, sym@PAGEOFF; // L3: ldr xC, [xB, #imm]; // This sequence can be turned into:; // A literal load if sym@PAGE + sym@PAGEOFF + #imm - address(L3) is < 1MB:; // L3: ldr xC, sym+#imm; // It may also be turned into either the following more efficient; // code sequences:; // - If sym@PAGEOFF + #imm fits the encoding space of L3.; // L1: adrp xA, sym@PAGE; // L3: ldr xC, [xB, sym@PAGEOFF + #imm]; // - If sym@PAGE + sym@PAGEOFF - address(L1) < 1MB:; // L1: adr xA, sym; // L3: ldr xC, [xB, #imm]; //; // To be valid a LOH must meet all the requirements needed by all the related; // possible linker transformations.; // For instance, using the running example, the constraints to emit; // "".loh AdrpAddLdr"" are:; // - L1, L2, and L3 instructions are of the expected type, i.e.,; // respectively ADRP, ADD (immediate), and LD.; // - The result of L1 is used only by L2.; // - The register argument (xA) used in the ADD instruction is defined; // only by L1.; // - The result of L2 is used only by L3.; // - The base address (xB) in L3 is defined only L2.; // - The ADRP in L1 and the ADD in L2 must reference the same s",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp:3115,Performance,load,load,3115,"upported LOHs are:; // * So called non-ADRP-related:; // - .loh AdrpAddLdr L1, L2, L3:; // L1: adrp xA, sym@PAGE; // L2: add xB, xA, sym@PAGEOFF; // L3: ldr xC, [xB, #imm]; // - .loh AdrpLdrGotLdr L1, L2, L3:; // L1: adrp xA, sym@GOTPAGE; // L2: ldr xB, [xA, sym@GOTPAGEOFF]; // L3: ldr xC, [xB, #imm]; // - .loh AdrpLdr L1, L3:; // L1: adrp xA, sym@PAGE; // L3: ldr xC, [xA, sym@PAGEOFF]; // - .loh AdrpAddStr L1, L2, L3:; // L1: adrp xA, sym@PAGE; // L2: add xB, xA, sym@PAGEOFF; // L3: str xC, [xB, #imm]; // - .loh AdrpLdrGotStr L1, L2, L3:; // L1: adrp xA, sym@GOTPAGE; // L2: ldr xB, [xA, sym@GOTPAGEOFF]; // L3: str xC, [xB, #imm]; // - .loh AdrpAdd L1, L2:; // L1: adrp xA, sym@PAGE; // L2: add xB, xA, sym@PAGEOFF; // For all these LOHs, L1, L2, L3 form a simple chain:; // L1 result is used only by L2 and L2 result by L3.; // L3 LOH-related argument is defined only by L2 and L2 LOH-related argument; // by L1.; // All these LOHs aim at using more efficient load/store patterns by folding; // some instructions used to compute the address directly into the load/store.; //; // * So called ADRP-related:; // - .loh AdrpAdrp L2, L1:; // L2: ADRP xA, sym1@PAGE; // L1: ADRP xA, sym2@PAGE; // L2 dominates L1 and xA is not redifined between L2 and L1; // This LOH aims at getting rid of redundant ADRP instructions.; //; // The overall design for emitting the LOHs is:; // 1. AArch64CollectLOH (this pass) records the LOHs in the AArch64FunctionInfo.; // 2. AArch64AsmPrinter reads the LOHs from AArch64FunctionInfo and it:; // 1. Associates them a label.; // 2. Emits them in a MCStreamer (EmitLOHDirective).; // - The MCMachOStreamer records them into the MCAssembler.; // - The MCAsmStreamer prints them.; // - Other MCStreamers ignore them.; // 3. Closes the MCStreamer:; // - The MachObjectWriter gets them from the MCAssembler and writes; // them in the object file.; // - Other ObjectWriters ignore them.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp:3214,Performance,load,load,3214,"upported LOHs are:; // * So called non-ADRP-related:; // - .loh AdrpAddLdr L1, L2, L3:; // L1: adrp xA, sym@PAGE; // L2: add xB, xA, sym@PAGEOFF; // L3: ldr xC, [xB, #imm]; // - .loh AdrpLdrGotLdr L1, L2, L3:; // L1: adrp xA, sym@GOTPAGE; // L2: ldr xB, [xA, sym@GOTPAGEOFF]; // L3: ldr xC, [xB, #imm]; // - .loh AdrpLdr L1, L3:; // L1: adrp xA, sym@PAGE; // L3: ldr xC, [xA, sym@PAGEOFF]; // - .loh AdrpAddStr L1, L2, L3:; // L1: adrp xA, sym@PAGE; // L2: add xB, xA, sym@PAGEOFF; // L3: str xC, [xB, #imm]; // - .loh AdrpLdrGotStr L1, L2, L3:; // L1: adrp xA, sym@GOTPAGE; // L2: ldr xB, [xA, sym@GOTPAGEOFF]; // L3: str xC, [xB, #imm]; // - .loh AdrpAdd L1, L2:; // L1: adrp xA, sym@PAGE; // L2: add xB, xA, sym@PAGEOFF; // For all these LOHs, L1, L2, L3 form a simple chain:; // L1 result is used only by L2 and L2 result by L3.; // L3 LOH-related argument is defined only by L2 and L2 LOH-related argument; // by L1.; // All these LOHs aim at using more efficient load/store patterns by folding; // some instructions used to compute the address directly into the load/store.; //; // * So called ADRP-related:; // - .loh AdrpAdrp L2, L1:; // L2: ADRP xA, sym1@PAGE; // L1: ADRP xA, sym2@PAGE; // L2 dominates L1 and xA is not redifined between L2 and L1; // This LOH aims at getting rid of redundant ADRP instructions.; //; // The overall design for emitting the LOHs is:; // 1. AArch64CollectLOH (this pass) records the LOHs in the AArch64FunctionInfo.; // 2. AArch64AsmPrinter reads the LOHs from AArch64FunctionInfo and it:; // 1. Associates them a label.; // 2. Emits them in a MCStreamer (EmitLOHDirective).; // - The MCMachOStreamer records them into the MCAssembler.; // - The MCAsmStreamer prints them.; // - Other MCStreamers ignore them.; // 3. Closes the MCStreamer:; // - The MachObjectWriter gets them from the MCAssembler and writes; // them in the object file.; // - Other ObjectWriters ignore them.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp:3440,Safety,redund,redundant,3440,"upported LOHs are:; // * So called non-ADRP-related:; // - .loh AdrpAddLdr L1, L2, L3:; // L1: adrp xA, sym@PAGE; // L2: add xB, xA, sym@PAGEOFF; // L3: ldr xC, [xB, #imm]; // - .loh AdrpLdrGotLdr L1, L2, L3:; // L1: adrp xA, sym@GOTPAGE; // L2: ldr xB, [xA, sym@GOTPAGEOFF]; // L3: ldr xC, [xB, #imm]; // - .loh AdrpLdr L1, L3:; // L1: adrp xA, sym@PAGE; // L3: ldr xC, [xA, sym@PAGEOFF]; // - .loh AdrpAddStr L1, L2, L3:; // L1: adrp xA, sym@PAGE; // L2: add xB, xA, sym@PAGEOFF; // L3: str xC, [xB, #imm]; // - .loh AdrpLdrGotStr L1, L2, L3:; // L1: adrp xA, sym@GOTPAGE; // L2: ldr xB, [xA, sym@GOTPAGEOFF]; // L3: str xC, [xB, #imm]; // - .loh AdrpAdd L1, L2:; // L1: adrp xA, sym@PAGE; // L2: add xB, xA, sym@PAGEOFF; // For all these LOHs, L1, L2, L3 form a simple chain:; // L1 result is used only by L2 and L2 result by L3.; // L3 LOH-related argument is defined only by L2 and L2 LOH-related argument; // by L1.; // All these LOHs aim at using more efficient load/store patterns by folding; // some instructions used to compute the address directly into the load/store.; //; // * So called ADRP-related:; // - .loh AdrpAdrp L2, L1:; // L2: ADRP xA, sym1@PAGE; // L1: ADRP xA, sym2@PAGE; // L2 dominates L1 and xA is not redifined between L2 and L1; // This LOH aims at getting rid of redundant ADRP instructions.; //; // The overall design for emitting the LOHs is:; // 1. AArch64CollectLOH (this pass) records the LOHs in the AArch64FunctionInfo.; // 2. AArch64AsmPrinter reads the LOHs from AArch64FunctionInfo and it:; // 1. Associates them a label.; // 2. Emits them in a MCStreamer (EmitLOHDirective).; // - The MCMachOStreamer records them into the MCAssembler.; // - The MCAsmStreamer prints them.; // - Other MCStreamers ignore them.; // 3. Closes the MCStreamer:; // - The MachObjectWriter gets them from the MCAssembler and writes; // them in the object file.; // - Other ObjectWriters ignore them.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp:2911,Usability,simpl,simple,2911,"fined; // only by L1.; // - The result of L2 is used only by L3.; // - The base address (xB) in L3 is defined only L2.; // - The ADRP in L1 and the ADD in L2 must reference the same symbol using; // @PAGE/@PAGEOFF with no additional constants; //; // Currently supported LOHs are:; // * So called non-ADRP-related:; // - .loh AdrpAddLdr L1, L2, L3:; // L1: adrp xA, sym@PAGE; // L2: add xB, xA, sym@PAGEOFF; // L3: ldr xC, [xB, #imm]; // - .loh AdrpLdrGotLdr L1, L2, L3:; // L1: adrp xA, sym@GOTPAGE; // L2: ldr xB, [xA, sym@GOTPAGEOFF]; // L3: ldr xC, [xB, #imm]; // - .loh AdrpLdr L1, L3:; // L1: adrp xA, sym@PAGE; // L3: ldr xC, [xA, sym@PAGEOFF]; // - .loh AdrpAddStr L1, L2, L3:; // L1: adrp xA, sym@PAGE; // L2: add xB, xA, sym@PAGEOFF; // L3: str xC, [xB, #imm]; // - .loh AdrpLdrGotStr L1, L2, L3:; // L1: adrp xA, sym@GOTPAGE; // L2: ldr xB, [xA, sym@GOTPAGEOFF]; // L3: str xC, [xB, #imm]; // - .loh AdrpAdd L1, L2:; // L1: adrp xA, sym@PAGE; // L2: add xB, xA, sym@PAGEOFF; // For all these LOHs, L1, L2, L3 form a simple chain:; // L1 result is used only by L2 and L2 result by L3.; // L3 LOH-related argument is defined only by L2 and L2 LOH-related argument; // by L1.; // All these LOHs aim at using more efficient load/store patterns by folding; // some instructions used to compute the address directly into the load/store.; //; // * So called ADRP-related:; // - .loh AdrpAdrp L2, L1:; // L2: ADRP xA, sym1@PAGE; // L1: ADRP xA, sym2@PAGE; // L2 dominates L1 and xA is not redifined between L2 and L1; // This LOH aims at getting rid of redundant ADRP instructions.; //; // The overall design for emitting the LOHs is:; // 1. AArch64CollectLOH (this pass) records the LOHs in the AArch64FunctionInfo.; // 2. AArch64AsmPrinter reads the LOHs from AArch64FunctionInfo and it:; // 1. Associates them a label.; // 2. Emits them in a MCStreamer (EmitLOHDirective).; // - The MCMachOStreamer records them into the MCAssembler.; // - The MCAsmStreamer prints them.; // - Other MCStreamers ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp:27,Performance,LOAD,LOADGot,27,"// Accept ADRP, ADDLow and LOADGot.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp:15,Performance,optimiz,optimize,15,"// We can only optimize the index operand.; // In case we have str xA, [xA, #imm], this is two different uses; // of xA and we cannot fold, otherwise the xA stored may be wrong,; // even if #imm == 0.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp:87,Performance,load,load,87,/// Check whether the given instruction can be the end of a LOH chain; /// involving a load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp:44,Performance,load,load,44,/// Check whether the given instruction can load a litteral.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp:4,Deployability,Update,Update,4,/// Update state \p Info given \p MI uses the tracked register.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp:4,Deployability,Update,Update,4,/// Update state \p Info given the tracked register is clobbered.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp:4,Deployability,Update,Update,4,/// Update state \p Info given that \p MI is possibly the middle instruction; /// of an LOH involving 3 instructions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp:4,Deployability,Update,Update,4,/// Update state when seeing and ADRP instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp:239,Modifiability,rewrite,rewrite,239,"// ADRPs and ADDs for this candidate may be split apart if using; // GlobalISel instead of pseudo-expanded. If that happens, the; // def register of the ADD may have a use in between. Adding an LOH in; // this case can cause the linker to rewrite the ADRP to write to that; // register, clobbering the use.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp:53,Modifiability,rewrite,rewrite,53,"// There is a possibility that the linker may try to rewrite:; // adrp x0, @sym@PAGE; // add x1, x0, @sym@PAGEOFF; // [x0 = some other def]; // ldr x2, [x1]; // ...into...; // adrp x0, @sym; // nop; // [x0 = some other def]; // ldr x2, [x0]; // ...if the offset to the symbol won't fit within a literal load.; // This causes the load to use the result of the adrp, which in this; // case has already been clobbered.; // FIXME: Implement proper liveness tracking for all registers. For now,; // don't emit the LOH if there are any instructions between the add and; // the ldr.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp:303,Performance,load,load,303,"// There is a possibility that the linker may try to rewrite:; // adrp x0, @sym@PAGE; // add x1, x0, @sym@PAGEOFF; // [x0 = some other def]; // ldr x2, [x1]; // ...into...; // adrp x0, @sym; // nop; // [x0 = some other def]; // ldr x2, [x0]; // ...if the offset to the symbol won't fit within a literal load.; // This causes the load to use the result of the adrp, which in this; // case has already been clobbered.; // FIXME: Implement proper liveness tracking for all registers. For now,; // don't emit the LOH if there are any instructions between the add and; // the ldr.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp:329,Performance,load,load,329,"// There is a possibility that the linker may try to rewrite:; // adrp x0, @sym@PAGE; // add x1, x0, @sym@PAGEOFF; // [x0 = some other def]; // ldr x2, [x1]; // ...into...; // adrp x0, @sym; // nop; // [x0 = some other def]; // ldr x2, [x0]; // ...if the offset to the symbol won't fit within a literal load.; // This causes the load to use the result of the adrp, which in this; // case has already been clobbered.; // FIXME: Implement proper liveness tracking for all registers. For now,; // don't emit the LOH if there are any instructions between the add and; // the ldr.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp:104,Performance,optimiz,optimization,104,"// Multiple uses of the same register within a single instruction don't; // count as MultiUser or block optimization. This is especially important on; // arm64_32, where any memory operation is likely to be an explicit use of; // xN and an implicit use of wN (the base address register).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp:38,Deployability,update,update,38,// Walk the basic block backwards and update the per register state machine; // in the process.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CollectLOH.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CompressJumpTables.cpp:100,Safety,safe,safe,100,"/// Returns the size of instructions in the block \p MBB, or std::nullopt if; /// we couldn't get a safe upper bound.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CompressJumpTables.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CompressJumpTables.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CompressJumpTables.cpp:69,Performance,perform,perform,69,"/// Gather information about the function, returns false if we can't perform; /// this optimization for some reason.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CompressJumpTables.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CompressJumpTables.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CompressJumpTables.cpp:87,Performance,optimiz,optimization,87,"/// Gather information about the function, returns false if we can't perform; /// this optimization for some reason.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CompressJumpTables.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CompressJumpTables.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CompressJumpTables.cpp:127,Safety,safe,safe,127,"// Inline asm may contain some directives like .bytes which we don't; // currently have the ability to parse accurately. To be safe, just avoid; // computing a size and bail out.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CompressJumpTables.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CompressJumpTables.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CompressJumpTables.cpp:138,Safety,avoid,avoid,138,"// Inline asm may contain some directives like .bytes which we don't; // currently have the ability to parse accurately. To be safe, just avoid; // computing a size and bail out.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CompressJumpTables.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CompressJumpTables.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CompressJumpTables.cpp:34,Performance,optimiz,optimized,34,// The jump-table might have been optimized away.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CompressJumpTables.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CompressJumpTables.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CondBrTuning.cpp:619,Energy Efficiency,schedul,scheduling,619,"//===-- AArch64CondBrTuning.cpp --- Conditional branch tuning for AArch64 -===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// This file contains a pass that transforms CBZ/CBNZ/TBZ/TBNZ instructions; /// into a conditional branch (B.cond), when the NZCV flags can be set for; /// ""free"". This is preferred on targets that have more flexibility when; /// scheduling B.cond instructions as compared to CBZ/CBNZ/TBZ/TBNZ (assuming; /// all other variables are equal). This can also reduce register pressure.; ///; /// A few examples:; ///; /// 1) add w8, w0, w1 -> cmn w0, w1 ; CMN is an alias of ADDS.; /// cbz w8, .LBB_2 -> b.eq .LBB0_2; ///; /// 2) add w8, w0, w1 -> adds w8, w0, w1 ; w8 has multiple uses.; /// cbz w8, .LBB1_2 -> b.eq .LBB1_2; ///; /// 3) sub w8, w0, w1 -> subs w8, w0, w1 ; w8 has multiple uses.; /// tbz w8, #31, .LBB6_2 -> b.pl .LBB6_2; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CondBrTuning.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CondBrTuning.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CondBrTuning.cpp:744,Energy Efficiency,reduce,reduce,744,"//===-- AArch64CondBrTuning.cpp --- Conditional branch tuning for AArch64 -===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// This file contains a pass that transforms CBZ/CBNZ/TBZ/TBNZ instructions; /// into a conditional branch (B.cond), when the NZCV flags can be set for; /// ""free"". This is preferred on targets that have more flexibility when; /// scheduling B.cond instructions as compared to CBZ/CBNZ/TBZ/TBNZ (assuming; /// all other variables are equal). This can also reduce register pressure.; ///; /// A few examples:; ///; /// 1) add w8, w0, w1 -> cmn w0, w1 ; CMN is an alias of ADDS.; /// cbz w8, .LBB_2 -> b.eq .LBB0_2; ///; /// 2) add w8, w0, w1 -> adds w8, w0, w1 ; w8 has multiple uses.; /// cbz w8, .LBB1_2 -> b.eq .LBB1_2; ///; /// 3) sub w8, w0, w1 -> subs w8, w0, w1 ; w8 has multiple uses.; /// tbz w8, #31, .LBB6_2 -> b.pl .LBB6_2; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CondBrTuning.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CondBrTuning.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CondBrTuning.cpp:708,Modifiability,variab,variables,708,"//===-- AArch64CondBrTuning.cpp --- Conditional branch tuning for AArch64 -===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// This file contains a pass that transforms CBZ/CBNZ/TBZ/TBNZ instructions; /// into a conditional branch (B.cond), when the NZCV flags can be set for; /// ""free"". This is preferred on targets that have more flexibility when; /// scheduling B.cond instructions as compared to CBZ/CBNZ/TBZ/TBNZ (assuming; /// all other variables are equal). This can also reduce register pressure.; ///; /// A few examples:; ///; /// 1) add w8, w0, w1 -> cmn w0, w1 ; CMN is an alias of ADDS.; /// cbz w8, .LBB_2 -> b.eq .LBB0_2; ///; /// 2) add w8, w0, w1 -> adds w8, w0, w1 ; w8 has multiple uses.; /// cbz w8, .LBB1_2 -> b.eq .LBB1_2; ///; /// 3) sub w8, w0, w1 -> subs w8, w0, w1 ; w8 has multiple uses.; /// tbz w8, #31, .LBB6_2 -> b.pl .LBB6_2; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CondBrTuning.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CondBrTuning.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CondBrTuning.cpp:102,Usability,clear,clearing,102,"// If this was a flag setting version of the instruction, we use the original; // instruction by just clearing the dead marked on the implicit-def of NCZV.; // Therefore, we should not erase this instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CondBrTuning.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CondBrTuning.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CondBrTuning.cpp:10,Performance,optimiz,optimization,10,"// If the optimization was successful, we can't optimize any other; // branches because doing so would clobber the NZCV flags.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CondBrTuning.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CondBrTuning.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CondBrTuning.cpp:48,Performance,optimiz,optimize,48,"// If the optimization was successful, we can't optimize any other; // branches because doing so would clobber the NZCV flags.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CondBrTuning.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64CondBrTuning.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp:446,Energy Efficiency,reduce,reduces,446,"//===-- AArch64ConditionalCompares.cpp --- CCMP formation for AArch64 -----===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the AArch64ConditionalCompares pass which reduces; // branching and code size by using the conditional compare instructions CCMP,; // CCMN, and FCMP.; //; // The CFG transformations for forming conditional compares are very similar to; // if-conversion, and this pass should run immediately before the early; // if-conversion pass.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp:10,Testability,test,testing,10,// Stress testing mode - disable heuristics.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp:209,Performance,perform,performs,209,"//===----------------------------------------------------------------------===//; // SSACCmpConv; //===----------------------------------------------------------------------===//; //; // The SSACCmpConv class performs ccmp-conversion on SSA form machine code; // after determining if it is possible. The class contains no heuristics;; // external code should be used to determine when ccmp-conversion is a good; // idea.; //; // CCmp-formation works on a CFG representing chained conditions, typically; // from C's short-circuit || and && operators:; //; // From: Head To: Head; // / | CmpBB; // / | / |; // | CmpBB / |; // | / | Tail |; // | / | | |; // Tail | | |; // | | | |; // ... ... ... ...; //; // The Head block is terminated by a br.cond instruction, and the CmpBB block; // contains compare + br.cond. Tail must be a successor of both.; //; // The cmp-conversion turns the compare instruction in CmpBB into a conditional; // compare, and merges CmpBB into Head, speculatively executing its; // instructions. The AArch64 conditional compare instructions have an immediate; // operand that specifies the NZCV flag values when the condition is false and; // the compare isn't executed. This makes it possible to chain compares with; // different condition codes.; //; // Example:; //; // if (a == 5 || b == 17); // foo();; //; // Head:; // cmp w0, #5; // b.eq Tail; // CmpBB:; // cmp w1, #17; // b.eq Tail; // ...; // Tail:; // bl _foo; //; // Becomes:; //; // Head:; // cmp w0, #5; // ccmp w1, #17, 4, ne ; 4 = nZcv; // b.eq Tail; // ...; // Tail:; // bl _foo; //; // The ccmp condition code is the one that would cause the Head terminator to; // branch to CmpBB.; //; // FIXME: It should also be possible to speculate a block on the critical edge; // between Head and Tail, just like if-converting a diamond.; //; // FIXME: Handle PHIs in Tail by turning them into selects (if-conversion).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp:65,Safety,safe,safely,65,/// Return true if all non-terminator instructions in MBB can be safely; /// speculated.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp:93,Performance,perform,performed,93,/// Return the expected code size delta if the conversion into a; /// conditional compare is performed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp:44,Deployability,update,update,44,"// Assuming that trivialTailPHIs() is true, update the Tail PHIs by simply; // removing the CmpBB operands. The Head operands will be identical.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp:68,Usability,simpl,simply,68,"// Assuming that trivialTailPHIs() is true, update the Tail PHIs by simply; // removing the CmpBB operands. The Head operands will be identical.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp:20,Usability,simpl,simply,20,// A normal br.cond simply has the condition code.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp:49,Safety,safe,safely,49,/// Determine if all the instructions in MBB can safely; /// be speculated. The terminators are not considered.; ///; /// Only CmpMI is allowed to clobber the flags.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp:19,Performance,load,loads,19,"// Don't speculate loads. Note that it may be possible and desirable to; // speculate GOT or constant pool loads that are guaranteed not to trap,; // but we don't support that for now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp:107,Performance,load,loads,107,"// Don't speculate loads. Note that it may be possible and desirable to; // speculate GOT or constant pool loads that are guaranteed not to trap,; // but we don't support that for now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp:269,Availability,down,down,269,"// Tail is allowed to have many predecessors, but we can't handle PHIs yet.; //; // FIXME: Real PHIs could be if-converted as long as the CmpBB values are; // defined before The CmpBB cmp clobbers the flags. Alternatively, it should; // always be safe to sink the ccmp down to immediately before the CmpBB; // terminators.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp:247,Safety,safe,safe,247,"// Tail is allowed to have many predecessors, but we can't handle PHIs yet.; //; // FIXME: Real PHIs could be if-converted as long as the CmpBB values are; // defined before The CmpBB cmp clobbers the flags. Alternatively, it should; // always be safe to sink the ccmp down to immediately before the CmpBB; // terminators.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp:73,Deployability,Update,Update,73,"// All CmpBB instructions are moved into Head, and CmpBB is deleted.; // Update the CFG first.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp:4,Deployability,Update,Update,4,/// Update the dominator tree after if-conversion erased some blocks.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp:4,Deployability,Update,Update,4,/// Update LoopInfo after if-conversion.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp:10,Testability,test,testing,10,// Stress testing mode disables all cost considerations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp:177,Integrability,depend,dependent,177,"// Heuristic: The compare conversion delays the execution of the branch; // instruction because we must wait for the inputs to the second compare as; // well. The branch has no dependent instructions, but delaying it increases; // the cost of a misprediction.; //; // Set a limit on the delay we will accept.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp:136,Deployability,update,updateDomTree,136,// Visit blocks in dominator tree pre-order. The pre-order enables multiple; // cmp-conversions from the same head block.; // Note that updateDomTree() modifies the children of the DomTree node; // currently being visited. The df_iterator supports that; it doesn't look at; // child_begin() / child_end() until after a node has been visited.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionalCompares.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionOptimizer.cpp:121,Availability,failure,failures,121,// Finds compare instruction that corresponds to supported types of branching.; // Returns the instruction or nullptr on failures or detecting unsupported; // instructions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionOptimizer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionOptimizer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionOptimizer.cpp:133,Safety,detect,detecting,133,// Finds compare instruction that corresponds to supported types of branching.; // Returns the instruction or nullptr on failures or detecting unsupported; // instructions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionOptimizer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionOptimizer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionOptimizer.cpp:20,Usability,simpl,simply,20,// A normal br.cond simply has the condition code.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionOptimizer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionOptimizer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionOptimizer.cpp:136,Deployability,update,updateDomTree,136,// Visit blocks in dominator tree pre-order. The pre-order enables multiple; // cmp-conversions from the same head block.; // Note that updateDomTree() modifies the children of the DomTree node; // currently being visited. The df_iterator supports that; it doesn't look at; // child_begin() / child_end() until after a node has been visited.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionOptimizer.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ConditionOptimizer.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp:4,Usability,Clear,Clear,4,/// Clear or set all bits in the chunk at the given index.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp:3,Usability,Clear,Clear,3,// Clear chunk in the immediate.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp:686,Integrability,wrap,wraps,686,"/// Check whether the constant contains a sequence of contiguous ones,; /// which might be interrupted by one or two chunks. If so, materialize the; /// sequence of contiguous ones with an ORR instruction.; /// Materialize the chunks which are either interrupting the sequence or outside; /// of the sequence with a MOVK instruction.; ///; /// Assuming S is a chunk which starts the sequence (1...0...), E is a chunk; /// which ends the sequence (0...1...). Then we are looking for constants which; /// contain at least one S and E chunk.; /// E.g. |E|A|B|S|, |A|E|B|S| or |A|B|E|S|.; ///; /// We are also looking for constants like |S|A|B|E| where the contiguous; /// sequence of ones wraps around the MSB into the LSB.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp:8,Modifiability,extend,extend,8,// Sign extend the 16-bit chunk to 64-bit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp:38,Integrability,wrap,wraps,38,"// If our contiguous sequence of ones wraps around from the MSB into the LSB,; // just swap indices and pretend we are materializing a contiguous sequence; // of zeros surrounded by a contiguous sequence of ones.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp:36,Deployability,patch,patch,36,// Find out which chunks we need to patch up to obtain a contiguous sequence; // of ones.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp:33,Deployability,patch,patch,33,// Remember the index we need to patch.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp:33,Deployability,patch,patch,33,// Remember the index we need to patch.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp:12,Testability,log,logical,12,"// Find the logical immediate that covers the most bits in RemainingBits,; // allowing for additional bits to be set that were set in OriginalBits.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp:20,Testability,log,logical,20,// Find the largest logical immediate that fits within the full immediate.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp:40,Availability,mask,mask,40,// Remove all bits that are set by this mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp:20,Testability,log,logical,20,"// Find the largest logical immediate covering the remaining bits, allowing; // for additional bits to be set that were also set in the original immediate.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp:58,Testability,log,logical,58,// Attempt to expand an immediate as the ORR of a pair of logical immediates.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp:58,Testability,log,logical,58,"// Attempt to expand an immediate as the AND of a pair of logical immediates.; // This is done by applying DeMorgan's law, under which logical immediates; // are closed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp:135,Testability,log,logical,135,"// Attempt to expand an immediate as the AND of a pair of logical immediates.; // This is done by applying DeMorgan's law, under which logical immediates; // are closed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp:83,Testability,log,logical,83,"// Check whether the constant can be represented by exclusive-or of two 64-bit; // logical immediates. If so, materialize it with an ORR instruction followed; // by an EOR instruction.; //; // This encoding allows all remaining repeated byte patterns, and many repeated; // 16-bit values, to be encoded without needing four instructions. It can also; // represent some irregular bitmasks (although those would mostly only need; // three instructions otherwise).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp:60,Testability,log,logical,60,"// Determine the larger repetition size of the two possible logical; // immediates, by finding the repetition size of Imm.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp:69,Integrability,wrap,wrap,69,"// Find the last bit of each run of ones, circularly. For runs which wrap; // around from bit 0 to bit 63, this is the bit before the most-significant; // zero, otherwise it is the least-significant bit in the run of ones.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp:233,Energy Efficiency,power,power-of-two,233,"// Find the smaller repetition size of the two possible logical immediates by; // counting the number of runs of one-bits within the BigSize-bit value. Both; // sizes may be the same. The EOR may add one or subtract one from the; // power-of-two count that can be represented by a logical immediate, or it; // may be left unchanged.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp:56,Testability,log,logical,56,"// Find the smaller repetition size of the two possible logical immediates by; // counting the number of runs of one-bits within the BigSize-bit value. Both; // sizes may be the same. The EOR may add one or subtract one from the; // power-of-two count that can be represented by a logical immediate, or it; // may be left unchanged.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp:281,Testability,log,logical,281,"// Find the smaller repetition size of the two possible logical immediates by; // counting the number of runs of one-bits within the BigSize-bit value. Both; // sizes may be the same. The EOR may add one or subtract one from the; // power-of-two count that can be represented by a logical immediate, or it; // may be left unchanged.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp:45,Energy Efficiency,power,power-of-two,45,// Early-exit if the big chunk couldn't be a power-of-two number of runs; // EORed with another single run.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandImm.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp:487,Energy Efficiency,schedul,scheduling,487,"//===- AArch64ExpandPseudoInsts.cpp - Expand pseudo instructions ----------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains a pass that expands pseudo instructions into target; // instructions to allow proper scheduling and other late optimizations. This; // pass should be run after register allocation but before the post-regalloc; // scheduling pass.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp:615,Energy Efficiency,schedul,scheduling,615,"//===- AArch64ExpandPseudoInsts.cpp - Expand pseudo instructions ----------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains a pass that expands pseudo instructions into target; // instructions to allow proper scheduling and other late optimizations. This; // pass should be run after register allocation but before the post-regalloc; // scheduling pass.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp:513,Performance,optimiz,optimizations,513,"//===- AArch64ExpandPseudoInsts.cpp - Expand pseudo instructions ----------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains a pass that expands pseudo instructions into target; // instructions to allow proper scheduling and other late optimizations. This; // pass should be run after register allocation but before the post-regalloc; // scheduling pass.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp:37,Safety,risk,risk,37,"// Useless def, and we don't want to risk creating an invalid ORR (which; // would really write to sp).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp:56,Integrability,depend,dependencies,56,// Do an extra pass in the loop to get the loop carried dependencies right.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp:56,Integrability,depend,dependencies,56,// Do an extra pass in the loop to get the loop carried dependencies right.; // FIXME: is this necessary?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp:209,Safety,avoid,avoid,209,"// Expand CALL_RVMARKER pseudo to:; // - a branch to the call target, followed by; // - the special `mov x29, x29` marker, and; // - another branch, to the runtime function; // Mark the sequence as bundle, to avoid passes moving other code in between.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp:126,Safety,avoid,avoid,126,"// Expand CALL_BTI pseudo to:; // - a branch to the call target; // - a BTI instruction; // Mark the sequence as a bundle, to avoid passes moving other code in; // between.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp:2,Deployability,Update,UpdateLiveIns,2,/*UpdateLiveIns*/,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp:2,Deployability,Update,UpdateLiveIns,2,/*UpdateLiveIns*/,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp:198,Deployability,toggle,toggle,198,"// Create the conditional branch based on the third operand of the; // instruction, which tells us if we are wrapping a normal or streaming; // function.; // We test the live value of pstate.sm and toggle pstate.sm if this is not the; // expected value for the callee (0 for a normal callee and 1 for a streaming; // callee).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp:109,Integrability,wrap,wrapping,109,"// Create the conditional branch based on the third operand of the; // instruction, which tells us if we are wrapping a normal or streaming; // function.; // We test the live value of pstate.sm and toggle pstate.sm if this is not the; // expected value for the callee (0 for a normal callee and 1 for a streaming; // callee).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp:161,Testability,test,test,161,"// Create the conditional branch based on the third operand of the; // instruction, which tells us if we are wrapping a normal or streaming; // function.; // We test the live value of pstate.sm and toggle pstate.sm if this is not the; // expected value for the callee (0 for a normal callee and 1 for a streaming; // callee).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp:2,Deployability,Update,UpdateLiveIns,2,/*UpdateLiveIns*/,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp:2,Deployability,Update,UpdateLiveIns,2,/*UpdateLiveIns*/,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp:369,Performance,load,loaded,369,"// MO_TAGGED on the page indicates a tagged address. Set the tag now.; // We do so by creating a MOVK that sets bits 48-63 of the register to; // (global address + 0x100000000 - PC) >> 48. This assumes that we're in; // the small code model so we can assume a binary size of <= 4GB, which; // makes the untagged PC relative offset positive. The binary must also be; // loaded into address range [0, 2^48). Both of these properties need to; // be ensured at runtime when using tagged addresses.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64ExpandPseudoInsts.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp:559,Performance,load,loads,559,"//===- AArch64FalkorHWPFFix.cpp - Avoid HW prefetcher pitfalls on Falkor --===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file For Falkor, we want to avoid HW prefetcher instruction tag collisions; /// that may inhibit the HW prefetching. This is done in two steps. Before; /// ISel, we mark strided loads (i.e. those that will likely benefit from; /// prefetching) with metadata. Then, after opcodes have been finalized, we; /// insert MOVs and re-write loads to prevent unintentional tag collisions.; // ===---------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp:714,Performance,load,loads,714,"//===- AArch64FalkorHWPFFix.cpp - Avoid HW prefetcher pitfalls on Falkor --===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file For Falkor, we want to avoid HW prefetcher instruction tag collisions; /// that may inhibit the HW prefetching. This is done in two steps. Before; /// ISel, we mark strided loads (i.e. those that will likely benefit from; /// prefetching) with metadata. Then, after opcodes have been finalized, we; /// insert MOVs and re-write loads to prevent unintentional tag collisions.; // ===---------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp:34,Safety,Avoid,Avoid,34,"//===- AArch64FalkorHWPFFix.cpp - Avoid HW prefetcher pitfalls on Falkor --===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file For Falkor, we want to avoid HW prefetcher instruction tag collisions; /// that may inhibit the HW prefetching. This is done in two steps. Before; /// ISel, we mark strided loads (i.e. those that will likely benefit from; /// prefetching) with metadata. Then, after opcodes have been finalized, we; /// insert MOVs and re-write loads to prevent unintentional tag collisions.; // ===---------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp:409,Safety,avoid,avoid,409,"//===- AArch64FalkorHWPFFix.cpp - Avoid HW prefetcher pitfalls on Falkor --===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file For Falkor, we want to avoid HW prefetcher instruction tag collisions; /// that may inhibit the HW prefetching. This is done in two steps. Before; /// ISel, we mark strided loads (i.e. those that will likely benefit from; /// prefetching) with metadata. Then, after opcodes have been finalized, we; /// insert MOVs and re-write loads to prevent unintentional tag collisions.; // ===---------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp:21,Performance,load,loads,21,// Only mark strided loads in the inner-most loop,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp:14,Performance,load,load,14,/// Bits from load opcodes used to compute HW prefetcher instruction tags.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp:3,Performance,Load,Loads,3,// Loads from the stack pointer don't get prefetched.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp:81,Performance,load,loads,81,// Go through all the basic blocks in the current loop and fix any streaming; // loads to avoid collisions with any other loads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp:122,Performance,load,loads,122,// Go through all the basic blocks in the current loop and fix any streaming; // loads to avoid collisions with any other loads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp:90,Safety,avoid,avoid,90,// Go through all the basic blocks in the current loop and fix any streaming; // loads to avoid collisions with any other loads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp:3,Modifiability,Rewrite,Rewrite,3,"// Rewrite:; // Xd = LOAD Xb, off; // to:; // Xc = MOV Xb; // Xd = LOAD Xc, off",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp:21,Performance,LOAD,LOAD,21,"// Rewrite:; // Xd = LOAD Xb, off; // to:; // Xc = MOV Xb; // Xd = LOAD Xc, off",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp:67,Performance,LOAD,LOAD,67,"// Rewrite:; // Xd = LOAD Xb, off; // to:; // Xc = MOV Xb; // Xd = LOAD Xc, off",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp:81,Deployability,update,update,81,"// If the load does a pre/post increment, then insert a MOV after as; // well to update the real base register.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp:10,Performance,load,load,10,"// If the load does a pre/post increment, then insert a MOV after as; // well to update the real base register.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp:32,Deployability,update,update,32,// Change tied operand pre/post update dest.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp:3,Deployability,Update,Update,3,// Update TagMap to reflect instruction changes to reduce the number; // of later MOVs to be inserted. This needs to be done after; // OldCollisions is updated since it may be relocated by this; // insertion.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp:152,Deployability,update,updated,152,// Update TagMap to reflect instruction changes to reduce the number; // of later MOVs to be inserted. This needs to be done after; // OldCollisions is updated since it may be relocated by this; // insertion.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp:51,Energy Efficiency,reduce,reduce,51,// Update TagMap to reflect instruction changes to reduce the number; // of later MOVs to be inserted. This needs to be done after; // OldCollisions is updated since it may be relocated by this; // insertion.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FalkorHWPFFix.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:13,Integrability,rout,routines,13,// Selection routines.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:18,Integrability,rout,routines,18,// Utility helper routines.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:15,Integrability,rout,routines,15,// Emit helper routines.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:17,Integrability,rout,routines,17,// Call handling routines.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:56,Modifiability,extend,extend,56,// end anonymous namespace; /// Check if the sign-/zero-extend will be a noop.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:32,Modifiability,variab,variables,32,// We can't handle thread-local variables quickly yet.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:45,Security,access,accesses,45,"// MachO still uses GOT for large code-model accesses, but ELF requires; // movz/movk sequences, which FastISel doesn't handle yet.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:90,Modifiability,extend,extend,90,"// LDRWui produces a 32-bit register, but pointers in-register are 64-bits; // so we must extend the result on ILP32.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:369,Performance,load,loaded,369,"// MO_TAGGED on the page indicates a tagged address. Set the tag now.; // We do so by creating a MOVK that sets bits 48-63 of the register to; // (global address + 0x100000000 - PC) >> 48. This assumes that we're in; // the small code model so we can assume a binary size of <= 4GB, which; // makes the untagged PC relative offset positive. The binary must also be; // loaded into address range [0, 2^48). Both of these properties need to; // be ensured at runtime when using tagged addresses.; //; // TODO: There is duplicate logic in AArch64ExpandPseudoInsts.cpp that; // also uses BuildMI for making an ADRP (+ MOVK) + ADD, but the operands; // are not exactly 1:1 with FastISel so we cannot easily abstract this; // out. At some point, it would be nice to find a way to not have this; // duplciate code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:527,Testability,log,logic,527,"// MO_TAGGED on the page indicates a tagged address. Set the tag now.; // We do so by creating a MOVK that sets bits 48-63 of the register to; // (global address + 0x100000000 - PC) >> 48. This assumes that we're in; // the small code model so we can assume a binary size of <= 4GB, which; // makes the untagged PC relative offset positive. The binary must also be; // loaded into address range [0, 2^48). Both of these properties need to; // be ensured at runtime when using tagged addresses.; //; // TODO: There is duplicate logic in AArch64ExpandPseudoInsts.cpp that; // also uses BuildMI for making an ADRP (+ MOVK) + ADD, but the operands; // are not exactly 1:1 with FastISel so we cannot easily abstract this; // out. At some point, it would be nice to find a way to not have this; // duplciate code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:15,Usability,simpl,simple,15,// Only handle simple types.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:34,Energy Efficiency,power,power-of-,34,/// Check if the multiply is by a power-of-2 constant.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:16,Energy Efficiency,power,power-of-,16,// Canonicalize power-of-2 value to the RHS.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:15,Usability,simpl,simple,15,// Only handle simple types.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:148,Usability,simpl,simple,148,"/// Determine if the value type is supported by FastISel.; ///; /// FastISel for AArch64 can handle more value types than are legal. This adds; /// simple value type such as i1, i8, and i16.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:46,Modifiability,extend,extended,46,// If this is a type than can be sign or zero-extended to a basic operation; // go ahead and accept it now.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:124,Performance,load,load,124,// Cannot encode an offset register and an immediate offset in the same; // instruction. Fold the immediate offset into the load/store instruction and; // emit an additional add to take care of the offset register.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:57,Usability,simpl,simplified,57,"// If this is a stack pointer and the offset needs to be simplified then put; // the alloca address into a register, set the base type back to register and; // continue. This should almost never happen.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:41,Performance,load,load,41,// Since the offset is too large for the load/store instruction get the; // reg+offset into a register.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:23,Energy Efficiency,power,power,23,// Canonicalize mul by power of 2 to the RHS.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:8,Modifiability,extend,extend,8,// Only extend the RHS within the instruction if there is a valid extend type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:66,Modifiability,extend,extend,66,// Only extend the RHS within the instruction if there is a valid extend type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:21,Integrability,wrap,wrapper,21,"/// This method is a wrapper to simplify add emission.; ///; /// First try to emit an add with an immediate operand using emitAddSub_ri. If; /// that fails, then try to materialize the immediate into a register and use; /// emitAddSub_rr instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:32,Usability,simpl,simplify,32,"/// This method is a wrapper to simplify add emission.; ///; /// First try to emit an add with an immediate operand using emitAddSub_ri. If; /// that fails, then try to materialize the immediate into a register and use; /// emitAddSub_rr instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:23,Energy Efficiency,power,power-of-,23,// Canonicalize mul by power-of-2 to the RHS.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:17,Availability,down,down,17,// Simplify this down to something we can handle.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:3,Usability,Simpl,Simplify,3,// Simplify this down to something we can handle.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:8,Modifiability,extend,extend,8,// Sign-extend.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:8,Modifiability,extend,extend,8,// Zero-extend.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:3,Performance,Load,Loading,3,// Loading an i1 requires special handling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:12,Modifiability,extend,extending,12,// For zero-extending loads to 64bit we emit a 32bit load and then convert; // the 32bit reg to a 64bit reg.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:22,Performance,load,loads,22,// For zero-extending loads to 64bit we emit a 32bit load and then convert; // the 32bit reg to a 64bit reg.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:53,Performance,load,load,53,// For zero-extending loads to 64bit we emit a 32bit load and then convert; // the 32bit reg to a 64bit reg.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:188,Modifiability,extend,extended,188,"// Verify we have a legal type before going any further. Currently, we handle; // simple types that will directly fit in a register (i32/f32/i64/f64) or; // those that can be sign or zero-extended to a basic operation (i1/i8/i16).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:82,Usability,simpl,simple,82,"// Verify we have a legal type before going any further. Currently, we handle; // simple types that will directly fit in a register (i32/f32/i64/f64) or; // those that can be sign or zero-extended to a basic operation (i1/i8/i16).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:33,Modifiability,extend,extend,33,// Fold the following sign-/zero-extend into the load instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:49,Performance,load,load,49,// Fold the following sign-/zero-extend into the load instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:93,Modifiability,extend,extend,93,"// There are a few different cases we have to handle, because the load or the; // sign-/zero-extend might not be selected by FastISel if we fall-back to; // SelectionDAG. There is also an ordering issue when both instructions are in; // different basic blocks.; // 1.) The load instruction is selected by FastISel, but the integer extend; // not. This usually happens when the integer extend is in a different; // basic block and SelectionDAG took over for that basic block.; // 2.) The load instruction is selected before the integer extend. This only; // happens when the integer extend is in a different basic block.; // 3.) The load instruction is selected by SelectionDAG and the integer extend; // by FastISel. This happens if there are instructions between the load; // and the integer extend that couldn't be selected by FastISel.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:331,Modifiability,extend,extend,331,"// There are a few different cases we have to handle, because the load or the; // sign-/zero-extend might not be selected by FastISel if we fall-back to; // SelectionDAG. There is also an ordering issue when both instructions are in; // different basic blocks.; // 1.) The load instruction is selected by FastISel, but the integer extend; // not. This usually happens when the integer extend is in a different; // basic block and SelectionDAG took over for that basic block.; // 2.) The load instruction is selected before the integer extend. This only; // happens when the integer extend is in a different basic block.; // 3.) The load instruction is selected by SelectionDAG and the integer extend; // by FastISel. This happens if there are instructions between the load; // and the integer extend that couldn't be selected by FastISel.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:385,Modifiability,extend,extend,385,"// There are a few different cases we have to handle, because the load or the; // sign-/zero-extend might not be selected by FastISel if we fall-back to; // SelectionDAG. There is also an ordering issue when both instructions are in; // different basic blocks.; // 1.) The load instruction is selected by FastISel, but the integer extend; // not. This usually happens when the integer extend is in a different; // basic block and SelectionDAG took over for that basic block.; // 2.) The load instruction is selected before the integer extend. This only; // happens when the integer extend is in a different basic block.; // 3.) The load instruction is selected by SelectionDAG and the integer extend; // by FastISel. This happens if there are instructions between the load; // and the integer extend that couldn't be selected by FastISel.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:535,Modifiability,extend,extend,535,"// There are a few different cases we have to handle, because the load or the; // sign-/zero-extend might not be selected by FastISel if we fall-back to; // SelectionDAG. There is also an ordering issue when both instructions are in; // different basic blocks.; // 1.) The load instruction is selected by FastISel, but the integer extend; // not. This usually happens when the integer extend is in a different; // basic block and SelectionDAG took over for that basic block.; // 2.) The load instruction is selected before the integer extend. This only; // happens when the integer extend is in a different basic block.; // 3.) The load instruction is selected by SelectionDAG and the integer extend; // by FastISel. This happens if there are instructions between the load; // and the integer extend that couldn't be selected by FastISel.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:582,Modifiability,extend,extend,582,"// There are a few different cases we have to handle, because the load or the; // sign-/zero-extend might not be selected by FastISel if we fall-back to; // SelectionDAG. There is also an ordering issue when both instructions are in; // different basic blocks.; // 1.) The load instruction is selected by FastISel, but the integer extend; // not. This usually happens when the integer extend is in a different; // basic block and SelectionDAG took over for that basic block.; // 2.) The load instruction is selected before the integer extend. This only; // happens when the integer extend is in a different basic block.; // 3.) The load instruction is selected by SelectionDAG and the integer extend; // by FastISel. This happens if there are instructions between the load; // and the integer extend that couldn't be selected by FastISel.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:693,Modifiability,extend,extend,693,"// There are a few different cases we have to handle, because the load or the; // sign-/zero-extend might not be selected by FastISel if we fall-back to; // SelectionDAG. There is also an ordering issue when both instructions are in; // different basic blocks.; // 1.) The load instruction is selected by FastISel, but the integer extend; // not. This usually happens when the integer extend is in a different; // basic block and SelectionDAG took over for that basic block.; // 2.) The load instruction is selected before the integer extend. This only; // happens when the integer extend is in a different basic block.; // 3.) The load instruction is selected by SelectionDAG and the integer extend; // by FastISel. This happens if there are instructions between the load; // and the integer extend that couldn't be selected by FastISel.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:793,Modifiability,extend,extend,793,"// There are a few different cases we have to handle, because the load or the; // sign-/zero-extend might not be selected by FastISel if we fall-back to; // SelectionDAG. There is also an ordering issue when both instructions are in; // different basic blocks.; // 1.) The load instruction is selected by FastISel, but the integer extend; // not. This usually happens when the integer extend is in a different; // basic block and SelectionDAG took over for that basic block.; // 2.) The load instruction is selected before the integer extend. This only; // happens when the integer extend is in a different basic block.; // 3.) The load instruction is selected by SelectionDAG and the integer extend; // by FastISel. This happens if there are instructions between the load; // and the integer extend that couldn't be selected by FastISel.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:66,Performance,load,load,66,"// There are a few different cases we have to handle, because the load or the; // sign-/zero-extend might not be selected by FastISel if we fall-back to; // SelectionDAG. There is also an ordering issue when both instructions are in; // different basic blocks.; // 1.) The load instruction is selected by FastISel, but the integer extend; // not. This usually happens when the integer extend is in a different; // basic block and SelectionDAG took over for that basic block.; // 2.) The load instruction is selected before the integer extend. This only; // happens when the integer extend is in a different basic block.; // 3.) The load instruction is selected by SelectionDAG and the integer extend; // by FastISel. This happens if there are instructions between the load; // and the integer extend that couldn't be selected by FastISel.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:273,Performance,load,load,273,"// There are a few different cases we have to handle, because the load or the; // sign-/zero-extend might not be selected by FastISel if we fall-back to; // SelectionDAG. There is also an ordering issue when both instructions are in; // different basic blocks.; // 1.) The load instruction is selected by FastISel, but the integer extend; // not. This usually happens when the integer extend is in a different; // basic block and SelectionDAG took over for that basic block.; // 2.) The load instruction is selected before the integer extend. This only; // happens when the integer extend is in a different basic block.; // 3.) The load instruction is selected by SelectionDAG and the integer extend; // by FastISel. This happens if there are instructions between the load; // and the integer extend that couldn't be selected by FastISel.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:487,Performance,load,load,487,"// There are a few different cases we have to handle, because the load or the; // sign-/zero-extend might not be selected by FastISel if we fall-back to; // SelectionDAG. There is also an ordering issue when both instructions are in; // different basic blocks.; // 1.) The load instruction is selected by FastISel, but the integer extend; // not. This usually happens when the integer extend is in a different; // basic block and SelectionDAG took over for that basic block.; // 2.) The load instruction is selected before the integer extend. This only; // happens when the integer extend is in a different basic block.; // 3.) The load instruction is selected by SelectionDAG and the integer extend; // by FastISel. This happens if there are instructions between the load; // and the integer extend that couldn't be selected by FastISel.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:632,Performance,load,load,632,"// There are a few different cases we have to handle, because the load or the; // sign-/zero-extend might not be selected by FastISel if we fall-back to; // SelectionDAG. There is also an ordering issue when both instructions are in; // different basic blocks.; // 1.) The load instruction is selected by FastISel, but the integer extend; // not. This usually happens when the integer extend is in a different; // basic block and SelectionDAG took over for that basic block.; // 2.) The load instruction is selected before the integer extend. This only; // happens when the integer extend is in a different basic block.; // 3.) The load instruction is selected by SelectionDAG and the integer extend; // by FastISel. This happens if there are instructions between the load; // and the integer extend that couldn't be selected by FastISel.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:768,Performance,load,load,768,"// There are a few different cases we have to handle, because the load or the; // sign-/zero-extend might not be selected by FastISel if we fall-back to; // SelectionDAG. There is also an ordering issue when both instructions are in; // different basic blocks.; // 1.) The load instruction is selected by FastISel, but the integer extend; // not. This usually happens when the integer extend is in a different; // basic block and SelectionDAG took over for that basic block.; // 2.) The load instruction is selected before the integer extend. This only; // happens when the integer extend is in a different basic block.; // 3.) The load instruction is selected by SelectionDAG and the integer extend; // by FastISel. This happens if there are instructions between the load; // and the integer extend that couldn't be selected by FastISel.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:15,Modifiability,extend,extend,15,// The integer extend hasn't been emitted yet. FastISel or SelectionDAG; // could select it. Emit a copy to subreg if necessary. FastISel will remove; // it when it selects the integer extend.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:185,Modifiability,extend,extend,185,// The integer extend hasn't been emitted yet. FastISel or SelectionDAG; // could select it. Emit a copy to subreg if necessary. FastISel will remove; // it when it selects the integer extend.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:15,Modifiability,extend,extend,15,// The integer extend has already been emitted - delete all the instructions; // that have been emitted by the integer extend lowering code and use the; // result from the load instruction directly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:119,Modifiability,extend,extend,119,// The integer extend has already been emitted - delete all the instructions; // that have been emitted by the integer extend lowering code and use the; // result from the load instruction directly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:172,Performance,load,load,172,// The integer extend has already been emitted - delete all the instructions; // that have been emitted by the integer extend lowering code and use the; // result from the load instruction directly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:17,Availability,down,down,17,// Simplify this down to something we can handle.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:3,Usability,Simpl,Simplify,3,// Simplify this down to something we can handle.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:188,Modifiability,extend,extended,188,"// Verify we have a legal type before going any further. Currently, we handle; // simple types that will directly fit in a register (i32/f32/i64/f64) or; // those that can be sign or zero-extended to a basic operation (i1/i8/i16).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:82,Usability,simpl,simple,82,"// Verify we have a legal type before going any further. Currently, we handle; // simple types that will directly fit in a register (i32/f32/i64/f64) or; // those that can be sign or zero-extended to a basic operation (i1/i8/i16).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:99,Safety,avoid,avoid,99,// Get the value to be stored into a register. Use the zero register directly; // when possible to avoid an unnecessary copy and a wasted register.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:34,Deployability,release,release,34,// Try to emit a STLR for seq_cst/release.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:41,Performance,optimiz,optimized,41,"// Speculation tracking/SLH assumes that optimized TB(N)Z/CB(N)Z instructions; // will not be produced, as they are conditional branch instructions that do; // not set flags.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:10,Performance,optimiz,optimize,10,// Try to optimize or fold the cmp.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:79,Performance,optimiz,optimized,79,"// Fake request the condition, otherwise the intrinsic might be completely; // optimized away.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:37,Testability,test,test,37,"// i1 conditions come as i32 values, test the lowest bit with tb(n)z.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:10,Performance,optimiz,optimize,10,// Try to optimize or fold the cmp.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:4,Performance,Optimiz,Optimize,4,/// Optimize selects of i1 if one of the operands has a 'true' or 'false'; /// value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:10,Performance,optimiz,optimize,10,// Try to optimize or fold the cmp.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:15,Usability,simpl,simple,15,// Only handle simple cases of up to 8 GPR and FPR each.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:96,Testability,stub,stub,96,// The weak function target may be zero; in that case we must use indirect; // addressing via a stub on windows as it may be out of range for a; // PC-relative jump.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:18,Availability,mask,mask,18,// Add a register mask with the call-preserved registers.; // Proper defs for return values will be added by setPhysRegsDeadExcept().,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:126,Deployability,update,updated,126,/// Check if it is possible to fold the condition from the XALU intrinsic; /// into the user. The condition code will only be updated on success.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:3,Usability,Simpl,Simplify,3,// Simplify multiplies.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:15,Performance,load,load,15,"// Recursively load frame address; // ldr x0, [fp]; // ldr x0, [x0]; // ldr x0, [x0]; // ...",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:3,Usability,Simpl,Simplify,3,// Simplify multiplies.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:3,Safety,Avoid,Avoid,3,// Avoid a cross-class copy. This is very unlikely.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:24,Modifiability,extend,extended,24,// Special handling for extended integers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:39,Modifiability,extend,extends,39,"// ""Callee"" (i.e. value producer) zero extends pointers at function; // boundary.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:36,Performance,perform,performs,36,// Create the AND instruction which performs the actual truncation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:112,Modifiability,extend,extend,112,"// We're ZExt i1 to i64. The ANDWri Wd, Ws, #1 implicitly clears the; // upper 32 bits. Emit a SUBREG_TO_REG to extend from Wd to Xd.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:58,Usability,clear,clears,58,"// We're ZExt i1 to i64. The ANDWri Wd, Ws, #1 implicitly clears the; // upper 32 bits. Emit a SUBREG_TO_REG to extend from Wd to Xd.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:37,Modifiability,extend,extend,37,// It is not possible to fold a sign-extend into the LShr instruction. In this; // case emit a sign-extend.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:100,Modifiability,extend,extend,100,// It is not possible to fold a sign-extend into the LShr instruction. In this; // case emit a sign-extend.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:108,Testability,test,test,108,"// FastISel does not have plumbing to deal with extensions where the SrcVT or; // DestVT are odd things, so test to make sure that they are both types we can; // handle (i1/i8/i16/i32 for SrcVT and i8/i16/i32/i64 for DestVT), otherwise; // bail out to SelectionDAG.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:16,Performance,load,load,16,// Check if the load instruction has already been selected.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:103,Modifiability,extend,extending,103,"// Check if the correct load instruction has been emitted - SelectionDAG might; // have emitted a zero-extending load, but we need a sign-extending load.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:138,Modifiability,extend,extending,138,"// Check if the correct load instruction has been emitted - SelectionDAG might; // have emitted a zero-extending load, but we need a sign-extending load.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:24,Performance,load,load,24,"// Check if the correct load instruction has been emitted - SelectionDAG might; // have emitted a zero-extending load, but we need a sign-extending load.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:113,Performance,load,load,113,"// Check if the correct load instruction has been emitted - SelectionDAG might; // have emitted a zero-extending load, but we need a sign-extending load.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:148,Performance,load,load,148,"// Check if the correct load instruction has been emitted - SelectionDAG might; // have emitted a zero-extending load, but we need a sign-extending load.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:38,Modifiability,extend,extended,38,// Try to optimize already sign-/zero-extended values from load instructions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:10,Performance,optimiz,optimize,10,// Try to optimize already sign-/zero-extended values from load instructions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:59,Performance,load,load,59,// Try to optimize already sign-/zero-extended values from load instructions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:38,Modifiability,extend,extended,38,// Try to optimize already sign-/zero-extended values from function arguments.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:10,Performance,optimiz,optimize,10,// Try to optimize already sign-/zero-extended values from function arguments.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:10,Usability,simpl,simplify,10,// Try to simplify to a shift instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:170,Modifiability,extend,extend,170,"/// This is mostly a copy of the existing FastISel getRegForGEPIndex code. We; /// have to duplicate it for AArch64, because otherwise we would fail during the; /// sign-extend emission.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:64,Modifiability,extend,extend,64,"// If the index is smaller or larger than intptr_t, truncate or extend it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp:157,Usability,simpl,simple,157,"/// This is mostly a copy of the existing FastISel GEP code, but we have to; /// duplicate it for AArch64, because otherwise we would bail out even for; /// simple cases. This is because the standard fastEmit functions don't cover; /// MUL at all and ADD is lowered very inefficientily.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:543,Availability,down,downward,543,"//===- AArch64FrameLowering.cpp - AArch64 Frame Lowering -------*- C++ -*-====//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains the AArch64 implementation of TargetFrameLowering class.; //; // On AArch64, stack frames are structured as follows:; //; // The stack grows downward.; //; // All of the individual frame areas on the frame below are optional, i.e. it's; // possible to create a function so that the particular area isn't present; // in the frame.; //; // At function entry, the ""frame"" looks as follows:; //; // | | Higher address; // |-----------------------------------|; // | |; // | arguments passed on the stack |; // | |; // |-----------------------------------| <- sp; // | | Lower address; //; //; // After the prologue has run, the frame has the following general structure.; // Note that this doesn't depict the case where a red-zone is used. Also,; // technically the last frame area (VLAs) doesn't get created until in the; // main function body, after the prologue is run. However, it's depicted here; // for completeness.; //; // | | Higher address; // |-----------------------------------|; // | |; // | arguments passed on the stack |; // | |; // |-----------------------------------|; // | |; // | (Win64 only) varargs from reg |; // | |; // |-----------------------------------|; // | |; // | callee-saved gpr registers | <--.; // | | | On Darwin platforms these; // |- - - - - - - - - - - - - - - - - -| | callee saves are swapped,; // | prev_lr | | (frame record first); // | prev_fp | <--'; // | async context if needed |; // | (a.k.a. ""frame record"") |; // |-----------------------------------| <- fp(=x29); // | |; // | callee-saved fp/simd/SVE regs |; // | |; // |----------------------------",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:3963,Availability,avail,available,3963,"eas with a dotted background cannot be computed at compile-time; // if they are present, making it required to have all three of fp, bp and; // sp to be set up to be able to access all contents in the frame areas,; // assuming all of the frame areas are non-empty.; //; // For most functions, some of the frame areas are empty. For those functions,; // it may not be necessary to set up fp or bp:; // * A base pointer is definitely needed when there are both VLAs and local; // variables with more-than-default alignment requirements.; // * A frame pointer is definitely needed when there are local variables with; // more-than-default alignment requirements.; //; // For Darwin platforms the frame-record (fp, lr) is stored at the top of the; // callee-saved area, since the unwind encoding does not allow for encoding; // this dynamically and existing tools depend on this layout. For other; // platforms, the frame-record is stored at the bottom of the (gpr) callee-saved; // area to allow SVE stack objects (allocated directly below the callee-saves,; // if available) to be accessed directly from the framepointer.; // The SVE spill/fill instructions have VL-scaled addressing modes such; // as:; // ldr z8, [fp, #-7 mul vl]; // For SVE the size of the vector length (VL) is not known at compile-time, so; // '#-7 mul vl' is an offset that can only be evaluated at runtime. With this; // layout, we don't need to add an unscaled offset to the framepointer before; // accessing the SVE object in the frame.; //; // In some cases when a base pointer is not strictly needed, it is generated; // anyway when offsets from the frame pointer to access local variables become; // so large that the offset can't be encoded in the immediate fields of loads; // or stores.; //; // Outgoing function arguments must be at the bottom of the stack frame when; // calling another function. If we do not have variable-sized stack objects, we; // can allocate a ""reserved call frame"" area at the bottom of the loca",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:3913,Energy Efficiency,allocate,allocated,3913,"eas with a dotted background cannot be computed at compile-time; // if they are present, making it required to have all three of fp, bp and; // sp to be set up to be able to access all contents in the frame areas,; // assuming all of the frame areas are non-empty.; //; // For most functions, some of the frame areas are empty. For those functions,; // it may not be necessary to set up fp or bp:; // * A base pointer is definitely needed when there are both VLAs and local; // variables with more-than-default alignment requirements.; // * A frame pointer is definitely needed when there are local variables with; // more-than-default alignment requirements.; //; // For Darwin platforms the frame-record (fp, lr) is stored at the top of the; // callee-saved area, since the unwind encoding does not allow for encoding; // this dynamically and existing tools depend on this layout. For other; // platforms, the frame-record is stored at the bottom of the (gpr) callee-saved; // area to allow SVE stack objects (allocated directly below the callee-saves,; // if available) to be accessed directly from the framepointer.; // The SVE spill/fill instructions have VL-scaled addressing modes such; // as:; // ldr z8, [fp, #-7 mul vl]; // For SVE the size of the vector length (VL) is not known at compile-time, so; // '#-7 mul vl' is an offset that can only be evaluated at runtime. With this; // layout, we don't need to add an unscaled offset to the framepointer before; // accessing the SVE object in the frame.; //; // In some cases when a base pointer is not strictly needed, it is generated; // anyway when offsets from the frame pointer to access local variables become; // so large that the offset can't be encoded in the immediate fields of loads; // or stores.; //; // Outgoing function arguments must be at the bottom of the stack frame when; // calling another function. If we do not have variable-sized stack objects, we; // can allocate a ""reserved call frame"" area at the bottom of the loca",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:4839,Energy Efficiency,allocate,allocate,4839,"-saved; // area to allow SVE stack objects (allocated directly below the callee-saves,; // if available) to be accessed directly from the framepointer.; // The SVE spill/fill instructions have VL-scaled addressing modes such; // as:; // ldr z8, [fp, #-7 mul vl]; // For SVE the size of the vector length (VL) is not known at compile-time, so; // '#-7 mul vl' is an offset that can only be evaluated at runtime. With this; // layout, we don't need to add an unscaled offset to the framepointer before; // accessing the SVE object in the frame.; //; // In some cases when a base pointer is not strictly needed, it is generated; // anyway when offsets from the frame pointer to access local variables become; // so large that the offset can't be encoded in the immediate fields of loads; // or stores.; //; // Outgoing function arguments must be at the bottom of the stack frame when; // calling another function. If we do not have variable-sized stack objects, we; // can allocate a ""reserved call frame"" area at the bottom of the local; // variable area, large enough for all outgoing calls. If we do have VLAs, then; // the stack pointer must be decremented and incremented around each call to; // make space for the arguments below the VLAs.; //; // FIXME: also explain the redzone concept.; //; // An example of the prologue:; //; // .globl __foo; // .align 2; // __foo:; // Ltmp0:; // .cfi_startproc; // .cfi_personality 155, ___gxx_personality_v0; // Leh_func_begin:; // .cfi_lsda 16, Lexception33; //; // stp xa,bx, [sp, -#offset]!; // ...; // stp x28, x27, [sp, #offset-32]; // stp fp, lr, [sp, #offset-16]; // add fp, sp, #offset - 16; // sub sp, sp, #1360; //; // The Stack:; // +-------------------------------------------+; // 10000 | ........ | ........ | ........ | ........ |; // 10004 | ........ | ........ | ........ | ........ |; // +-------------------------------------------+; // 10008 | ........ | ........ | ........ | ........ |; // 1000c | ........ | ........ | ........ | ....",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:3761,Integrability,depend,depend,3761,"-------------------------| <- sp; // | | Lower address; //; //; // To access the data in a frame, at-compile time, a constant offset must be; // computable from one of the pointers (fp, bp, sp) to access it. The size; // of the areas with a dotted background cannot be computed at compile-time; // if they are present, making it required to have all three of fp, bp and; // sp to be set up to be able to access all contents in the frame areas,; // assuming all of the frame areas are non-empty.; //; // For most functions, some of the frame areas are empty. For those functions,; // it may not be necessary to set up fp or bp:; // * A base pointer is definitely needed when there are both VLAs and local; // variables with more-than-default alignment requirements.; // * A frame pointer is definitely needed when there are local variables with; // more-than-default alignment requirements.; //; // For Darwin platforms the frame-record (fp, lr) is stored at the top of the; // callee-saved area, since the unwind encoding does not allow for encoding; // this dynamically and existing tools depend on this layout. For other; // platforms, the frame-record is stored at the bottom of the (gpr) callee-saved; // area to allow SVE stack objects (allocated directly below the callee-saves,; // if available) to be accessed directly from the framepointer.; // The SVE spill/fill instructions have VL-scaled addressing modes such; // as:; // ldr z8, [fp, #-7 mul vl]; // For SVE the size of the vector length (VL) is not known at compile-time, so; // '#-7 mul vl' is an offset that can only be evaluated at runtime. With this; // layout, we don't need to add an unscaled offset to the framepointer before; // accessing the SVE object in the frame.; //; // In some cases when a base pointer is not strictly needed, it is generated; // anyway when offsets from the frame pointer to access local variables become; // so large that the offset can't be encoded in the immediate fields of loads; // or stores.; //;",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:2341,Modifiability,variab,variables,2341,"---------------------------|; // | |; // | arguments passed on the stack |; // | |; // |-----------------------------------|; // | |; // | (Win64 only) varargs from reg |; // | |; // |-----------------------------------|; // | |; // | callee-saved gpr registers | <--.; // | | | On Darwin platforms these; // |- - - - - - - - - - - - - - - - - -| | callee saves are swapped,; // | prev_lr | | (frame record first); // | prev_fp | <--'; // | async context if needed |; // | (a.k.a. ""frame record"") |; // |-----------------------------------| <- fp(=x29); // | |; // | callee-saved fp/simd/SVE regs |; // | |; // |-----------------------------------|; // | |; // | SVE stack objects |; // | |; // |-----------------------------------|; // |.empty.space.to.make.part.below....|; // |.aligned.in.case.it.needs.more.than| (size of this area is unknown at; // |.the.standard.16-byte.alignment....| compile time; if present); // |-----------------------------------|; // | |; // | local variables of fixed size |; // | including spill slots |; // |-----------------------------------| <- bp(not defined by ABI,; // |.variable-sized.local.variables....| LLVM chooses X19); // |.(VLAs)............................| (size of this area is unknown at; // |...................................| compile time); // |-----------------------------------| <- sp; // | | Lower address; //; //; // To access the data in a frame, at-compile time, a constant offset must be; // computable from one of the pointers (fp, bp, sp) to access it. The size; // of the areas with a dotted background cannot be computed at compile-time; // if they are present, making it required to have all three of fp, bp and; // sp to be set up to be able to access all contents in the frame areas,; // assuming all of the frame areas are non-empty.; //; // For most functions, some of the frame areas are empty. For those functions,; // it may not be necessary to set up fp or bp:; // * A base pointer is definitely needed when there are both V",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:2471,Modifiability,variab,variable-sized,2471,"------|; // | |; // | (Win64 only) varargs from reg |; // | |; // |-----------------------------------|; // | |; // | callee-saved gpr registers | <--.; // | | | On Darwin platforms these; // |- - - - - - - - - - - - - - - - - -| | callee saves are swapped,; // | prev_lr | | (frame record first); // | prev_fp | <--'; // | async context if needed |; // | (a.k.a. ""frame record"") |; // |-----------------------------------| <- fp(=x29); // | |; // | callee-saved fp/simd/SVE regs |; // | |; // |-----------------------------------|; // | |; // | SVE stack objects |; // | |; // |-----------------------------------|; // |.empty.space.to.make.part.below....|; // |.aligned.in.case.it.needs.more.than| (size of this area is unknown at; // |.the.standard.16-byte.alignment....| compile time; if present); // |-----------------------------------|; // | |; // | local variables of fixed size |; // | including spill slots |; // |-----------------------------------| <- bp(not defined by ABI,; // |.variable-sized.local.variables....| LLVM chooses X19); // |.(VLAs)............................| (size of this area is unknown at; // |...................................| compile time); // |-----------------------------------| <- sp; // | | Lower address; //; //; // To access the data in a frame, at-compile time, a constant offset must be; // computable from one of the pointers (fp, bp, sp) to access it. The size; // of the areas with a dotted background cannot be computed at compile-time; // if they are present, making it required to have all three of fp, bp and; // sp to be set up to be able to access all contents in the frame areas,; // assuming all of the frame areas are non-empty.; //; // For most functions, some of the frame areas are empty. For those functions,; // it may not be necessary to set up fp or bp:; // * A base pointer is definitely needed when there are both VLAs and local; // variables with more-than-default alignment requirements.; // * A frame pointer is definitely needed ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:2492,Modifiability,variab,variables,2492," | (Win64 only) varargs from reg |; // | |; // |-----------------------------------|; // | |; // | callee-saved gpr registers | <--.; // | | | On Darwin platforms these; // |- - - - - - - - - - - - - - - - - -| | callee saves are swapped,; // | prev_lr | | (frame record first); // | prev_fp | <--'; // | async context if needed |; // | (a.k.a. ""frame record"") |; // |-----------------------------------| <- fp(=x29); // | |; // | callee-saved fp/simd/SVE regs |; // | |; // |-----------------------------------|; // | |; // | SVE stack objects |; // | |; // |-----------------------------------|; // |.empty.space.to.make.part.below....|; // |.aligned.in.case.it.needs.more.than| (size of this area is unknown at; // |.the.standard.16-byte.alignment....| compile time; if present); // |-----------------------------------|; // | |; // | local variables of fixed size |; // | including spill slots |; // |-----------------------------------| <- bp(not defined by ABI,; // |.variable-sized.local.variables....| LLVM chooses X19); // |.(VLAs)............................| (size of this area is unknown at; // |...................................| compile time); // |-----------------------------------| <- sp; // | | Lower address; //; //; // To access the data in a frame, at-compile time, a constant offset must be; // computable from one of the pointers (fp, bp, sp) to access it. The size; // of the areas with a dotted background cannot be computed at compile-time; // if they are present, making it required to have all three of fp, bp and; // sp to be set up to be able to access all contents in the frame areas,; // assuming all of the frame areas are non-empty.; //; // For most functions, some of the frame areas are empty. For those functions,; // it may not be necessary to set up fp or bp:; // * A base pointer is definitely needed when there are both VLAs and local; // variables with more-than-default alignment requirements.; // * A frame pointer is definitely needed when there are loc",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:3379,Modifiability,variab,variables,3379,"/ | local variables of fixed size |; // | including spill slots |; // |-----------------------------------| <- bp(not defined by ABI,; // |.variable-sized.local.variables....| LLVM chooses X19); // |.(VLAs)............................| (size of this area is unknown at; // |...................................| compile time); // |-----------------------------------| <- sp; // | | Lower address; //; //; // To access the data in a frame, at-compile time, a constant offset must be; // computable from one of the pointers (fp, bp, sp) to access it. The size; // of the areas with a dotted background cannot be computed at compile-time; // if they are present, making it required to have all three of fp, bp and; // sp to be set up to be able to access all contents in the frame areas,; // assuming all of the frame areas are non-empty.; //; // For most functions, some of the frame areas are empty. For those functions,; // it may not be necessary to set up fp or bp:; // * A base pointer is definitely needed when there are both VLAs and local; // variables with more-than-default alignment requirements.; // * A frame pointer is definitely needed when there are local variables with; // more-than-default alignment requirements.; //; // For Darwin platforms the frame-record (fp, lr) is stored at the top of the; // callee-saved area, since the unwind encoding does not allow for encoding; // this dynamically and existing tools depend on this layout. For other; // platforms, the frame-record is stored at the bottom of the (gpr) callee-saved; // area to allow SVE stack objects (allocated directly below the callee-saves,; // if available) to be accessed directly from the framepointer.; // The SVE spill/fill instructions have VL-scaled addressing modes such; // as:; // ldr z8, [fp, #-7 mul vl]; // For SVE the size of the vector length (VL) is not known at compile-time, so; // '#-7 mul vl' is an offset that can only be evaluated at runtime. With this; // layout, we don't need to add an unscal",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:3500,Modifiability,variab,variables,3500,"bles....| LLVM chooses X19); // |.(VLAs)............................| (size of this area is unknown at; // |...................................| compile time); // |-----------------------------------| <- sp; // | | Lower address; //; //; // To access the data in a frame, at-compile time, a constant offset must be; // computable from one of the pointers (fp, bp, sp) to access it. The size; // of the areas with a dotted background cannot be computed at compile-time; // if they are present, making it required to have all three of fp, bp and; // sp to be set up to be able to access all contents in the frame areas,; // assuming all of the frame areas are non-empty.; //; // For most functions, some of the frame areas are empty. For those functions,; // it may not be necessary to set up fp or bp:; // * A base pointer is definitely needed when there are both VLAs and local; // variables with more-than-default alignment requirements.; // * A frame pointer is definitely needed when there are local variables with; // more-than-default alignment requirements.; //; // For Darwin platforms the frame-record (fp, lr) is stored at the top of the; // callee-saved area, since the unwind encoding does not allow for encoding; // this dynamically and existing tools depend on this layout. For other; // platforms, the frame-record is stored at the bottom of the (gpr) callee-saved; // area to allow SVE stack objects (allocated directly below the callee-saves,; // if available) to be accessed directly from the framepointer.; // The SVE spill/fill instructions have VL-scaled addressing modes such; // as:; // ldr z8, [fp, #-7 mul vl]; // For SVE the size of the vector length (VL) is not known at compile-time, so; // '#-7 mul vl' is an offset that can only be evaluated at runtime. With this; // layout, we don't need to add an unscaled offset to the framepointer before; // accessing the SVE object in the frame.; //; // In some cases when a base pointer is not strictly needed, it is generated; // ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:4557,Modifiability,variab,variables,4557,"ignment requirements.; //; // For Darwin platforms the frame-record (fp, lr) is stored at the top of the; // callee-saved area, since the unwind encoding does not allow for encoding; // this dynamically and existing tools depend on this layout. For other; // platforms, the frame-record is stored at the bottom of the (gpr) callee-saved; // area to allow SVE stack objects (allocated directly below the callee-saves,; // if available) to be accessed directly from the framepointer.; // The SVE spill/fill instructions have VL-scaled addressing modes such; // as:; // ldr z8, [fp, #-7 mul vl]; // For SVE the size of the vector length (VL) is not known at compile-time, so; // '#-7 mul vl' is an offset that can only be evaluated at runtime. With this; // layout, we don't need to add an unscaled offset to the framepointer before; // accessing the SVE object in the frame.; //; // In some cases when a base pointer is not strictly needed, it is generated; // anyway when offsets from the frame pointer to access local variables become; // so large that the offset can't be encoded in the immediate fields of loads; // or stores.; //; // Outgoing function arguments must be at the bottom of the stack frame when; // calling another function. If we do not have variable-sized stack objects, we; // can allocate a ""reserved call frame"" area at the bottom of the local; // variable area, large enough for all outgoing calls. If we do have VLAs, then; // the stack pointer must be decremented and incremented around each call to; // make space for the arguments below the VLAs.; //; // FIXME: also explain the redzone concept.; //; // An example of the prologue:; //; // .globl __foo; // .align 2; // __foo:; // Ltmp0:; // .cfi_startproc; // .cfi_personality 155, ___gxx_personality_v0; // Leh_func_begin:; // .cfi_lsda 16, Lexception33; //; // stp xa,bx, [sp, -#offset]!; // ...; // stp x28, x27, [sp, #offset-32]; // stp fp, lr, [sp, #offset-16]; // add fp, sp, #offset - 16; // sub sp, sp, #1360; //; /",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:4798,Modifiability,variab,variable-sized,4798,"-saved; // area to allow SVE stack objects (allocated directly below the callee-saves,; // if available) to be accessed directly from the framepointer.; // The SVE spill/fill instructions have VL-scaled addressing modes such; // as:; // ldr z8, [fp, #-7 mul vl]; // For SVE the size of the vector length (VL) is not known at compile-time, so; // '#-7 mul vl' is an offset that can only be evaluated at runtime. With this; // layout, we don't need to add an unscaled offset to the framepointer before; // accessing the SVE object in the frame.; //; // In some cases when a base pointer is not strictly needed, it is generated; // anyway when offsets from the frame pointer to access local variables become; // so large that the offset can't be encoded in the immediate fields of loads; // or stores.; //; // Outgoing function arguments must be at the bottom of the stack frame when; // calling another function. If we do not have variable-sized stack objects, we; // can allocate a ""reserved call frame"" area at the bottom of the local; // variable area, large enough for all outgoing calls. If we do have VLAs, then; // the stack pointer must be decremented and incremented around each call to; // make space for the arguments below the VLAs.; //; // FIXME: also explain the redzone concept.; //; // An example of the prologue:; //; // .globl __foo; // .align 2; // __foo:; // Ltmp0:; // .cfi_startproc; // .cfi_personality 155, ___gxx_personality_v0; // Leh_func_begin:; // .cfi_lsda 16, Lexception33; //; // stp xa,bx, [sp, -#offset]!; // ...; // stp x28, x27, [sp, #offset-32]; // stp fp, lr, [sp, #offset-16]; // add fp, sp, #offset - 16; // sub sp, sp, #1360; //; // The Stack:; // +-------------------------------------------+; // 10000 | ........ | ........ | ........ | ........ |; // 10004 | ........ | ........ | ........ | ........ |; // +-------------------------------------------+; // 10008 | ........ | ........ | ........ | ........ |; // 1000c | ........ | ........ | ........ | ....",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:4908,Modifiability,variab,variable,4908,"-saved; // area to allow SVE stack objects (allocated directly below the callee-saves,; // if available) to be accessed directly from the framepointer.; // The SVE spill/fill instructions have VL-scaled addressing modes such; // as:; // ldr z8, [fp, #-7 mul vl]; // For SVE the size of the vector length (VL) is not known at compile-time, so; // '#-7 mul vl' is an offset that can only be evaluated at runtime. With this; // layout, we don't need to add an unscaled offset to the framepointer before; // accessing the SVE object in the frame.; //; // In some cases when a base pointer is not strictly needed, it is generated; // anyway when offsets from the frame pointer to access local variables become; // so large that the offset can't be encoded in the immediate fields of loads; // or stores.; //; // Outgoing function arguments must be at the bottom of the stack frame when; // calling another function. If we do not have variable-sized stack objects, we; // can allocate a ""reserved call frame"" area at the bottom of the local; // variable area, large enough for all outgoing calls. If we do have VLAs, then; // the stack pointer must be decremented and incremented around each call to; // make space for the arguments below the VLAs.; //; // FIXME: also explain the redzone concept.; //; // An example of the prologue:; //; // .globl __foo; // .align 2; // __foo:; // Ltmp0:; // .cfi_startproc; // .cfi_personality 155, ___gxx_personality_v0; // Leh_func_begin:; // .cfi_lsda 16, Lexception33; //; // stp xa,bx, [sp, -#offset]!; // ...; // stp x28, x27, [sp, #offset-32]; // stp fp, lr, [sp, #offset-16]; // add fp, sp, #offset - 16; // sub sp, sp, #1360; //; // The Stack:; // +-------------------------------------------+; // 10000 | ........ | ........ | ........ | ........ |; // 10004 | ........ | ........ | ........ | ........ |; // +-------------------------------------------+; // 10008 | ........ | ........ | ........ | ........ |; // 1000c | ........ | ........ | ........ | ....",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:4647,Performance,load,loads,4647,"ignment requirements.; //; // For Darwin platforms the frame-record (fp, lr) is stored at the top of the; // callee-saved area, since the unwind encoding does not allow for encoding; // this dynamically and existing tools depend on this layout. For other; // platforms, the frame-record is stored at the bottom of the (gpr) callee-saved; // area to allow SVE stack objects (allocated directly below the callee-saves,; // if available) to be accessed directly from the framepointer.; // The SVE spill/fill instructions have VL-scaled addressing modes such; // as:; // ldr z8, [fp, #-7 mul vl]; // For SVE the size of the vector length (VL) is not known at compile-time, so; // '#-7 mul vl' is an offset that can only be evaluated at runtime. With this; // layout, we don't need to add an unscaled offset to the framepointer before; // accessing the SVE object in the frame.; //; // In some cases when a base pointer is not strictly needed, it is generated; // anyway when offsets from the frame pointer to access local variables become; // so large that the offset can't be encoded in the immediate fields of loads; // or stores.; //; // Outgoing function arguments must be at the bottom of the stack frame when; // calling another function. If we do not have variable-sized stack objects, we; // can allocate a ""reserved call frame"" area at the bottom of the local; // variable area, large enough for all outgoing calls. If we do have VLAs, then; // the stack pointer must be decremented and incremented around each call to; // make space for the arguments below the VLAs.; //; // FIXME: also explain the redzone concept.; //; // An example of the prologue:; //; // .globl __foo; // .align 2; // __foo:; // Ltmp0:; // .cfi_startproc; // .cfi_personality 155, ___gxx_personality_v0; // Leh_func_begin:; // .cfi_lsda 16, Lexception33; //; // stp xa,bx, [sp, -#offset]!; // ...; // stp x28, x27, [sp, #offset-32]; // stp fp, lr, [sp, #offset-16]; // add fp, sp, #offset - 16; // sub sp, sp, #1360; //; /",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:2741,Security,access,access,2741,"e record first); // | prev_fp | <--'; // | async context if needed |; // | (a.k.a. ""frame record"") |; // |-----------------------------------| <- fp(=x29); // | |; // | callee-saved fp/simd/SVE regs |; // | |; // |-----------------------------------|; // | |; // | SVE stack objects |; // | |; // |-----------------------------------|; // |.empty.space.to.make.part.below....|; // |.aligned.in.case.it.needs.more.than| (size of this area is unknown at; // |.the.standard.16-byte.alignment....| compile time; if present); // |-----------------------------------|; // | |; // | local variables of fixed size |; // | including spill slots |; // |-----------------------------------| <- bp(not defined by ABI,; // |.variable-sized.local.variables....| LLVM chooses X19); // |.(VLAs)............................| (size of this area is unknown at; // |...................................| compile time); // |-----------------------------------| <- sp; // | | Lower address; //; //; // To access the data in a frame, at-compile time, a constant offset must be; // computable from one of the pointers (fp, bp, sp) to access it. The size; // of the areas with a dotted background cannot be computed at compile-time; // if they are present, making it required to have all three of fp, bp and; // sp to be set up to be able to access all contents in the frame areas,; // assuming all of the frame areas are non-empty.; //; // For most functions, some of the frame areas are empty. For those functions,; // it may not be necessary to set up fp or bp:; // * A base pointer is definitely needed when there are both VLAs and local; // variables with more-than-default alignment requirements.; // * A frame pointer is definitely needed when there are local variables with; // more-than-default alignment requirements.; //; // For Darwin platforms the frame-record (fp, lr) is stored at the top of the; // callee-saved area, since the unwind encoding does not allow for encoding; // this dynamically and existing tool",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:2868,Security,access,access,2868,"e record first); // | prev_fp | <--'; // | async context if needed |; // | (a.k.a. ""frame record"") |; // |-----------------------------------| <- fp(=x29); // | |; // | callee-saved fp/simd/SVE regs |; // | |; // |-----------------------------------|; // | |; // | SVE stack objects |; // | |; // |-----------------------------------|; // |.empty.space.to.make.part.below....|; // |.aligned.in.case.it.needs.more.than| (size of this area is unknown at; // |.the.standard.16-byte.alignment....| compile time; if present); // |-----------------------------------|; // | |; // | local variables of fixed size |; // | including spill slots |; // |-----------------------------------| <- bp(not defined by ABI,; // |.variable-sized.local.variables....| LLVM chooses X19); // |.(VLAs)............................| (size of this area is unknown at; // |...................................| compile time); // |-----------------------------------| <- sp; // | | Lower address; //; //; // To access the data in a frame, at-compile time, a constant offset must be; // computable from one of the pointers (fp, bp, sp) to access it. The size; // of the areas with a dotted background cannot be computed at compile-time; // if they are present, making it required to have all three of fp, bp and; // sp to be set up to be able to access all contents in the frame areas,; // assuming all of the frame areas are non-empty.; //; // For most functions, some of the frame areas are empty. For those functions,; // it may not be necessary to set up fp or bp:; // * A base pointer is definitely needed when there are both VLAs and local; // variables with more-than-default alignment requirements.; // * A frame pointer is definitely needed when there are local variables with; // more-than-default alignment requirements.; //; // For Darwin platforms the frame-record (fp, lr) is stored at the top of the; // callee-saved area, since the unwind encoding does not allow for encoding; // this dynamically and existing tool",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:3075,Security,access,access,3075," | SVE stack objects |; // | |; // |-----------------------------------|; // |.empty.space.to.make.part.below....|; // |.aligned.in.case.it.needs.more.than| (size of this area is unknown at; // |.the.standard.16-byte.alignment....| compile time; if present); // |-----------------------------------|; // | |; // | local variables of fixed size |; // | including spill slots |; // |-----------------------------------| <- bp(not defined by ABI,; // |.variable-sized.local.variables....| LLVM chooses X19); // |.(VLAs)............................| (size of this area is unknown at; // |...................................| compile time); // |-----------------------------------| <- sp; // | | Lower address; //; //; // To access the data in a frame, at-compile time, a constant offset must be; // computable from one of the pointers (fp, bp, sp) to access it. The size; // of the areas with a dotted background cannot be computed at compile-time; // if they are present, making it required to have all three of fp, bp and; // sp to be set up to be able to access all contents in the frame areas,; // assuming all of the frame areas are non-empty.; //; // For most functions, some of the frame areas are empty. For those functions,; // it may not be necessary to set up fp or bp:; // * A base pointer is definitely needed when there are both VLAs and local; // variables with more-than-default alignment requirements.; // * A frame pointer is definitely needed when there are local variables with; // more-than-default alignment requirements.; //; // For Darwin platforms the frame-record (fp, lr) is stored at the top of the; // callee-saved area, since the unwind encoding does not allow for encoding; // this dynamically and existing tools depend on this layout. For other; // platforms, the frame-record is stored at the bottom of the (gpr) callee-saved; // area to allow SVE stack objects (allocated directly below the callee-saves,; // if available) to be accessed directly from the framepointer.; ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:3980,Security,access,accessed,3980,"eas with a dotted background cannot be computed at compile-time; // if they are present, making it required to have all three of fp, bp and; // sp to be set up to be able to access all contents in the frame areas,; // assuming all of the frame areas are non-empty.; //; // For most functions, some of the frame areas are empty. For those functions,; // it may not be necessary to set up fp or bp:; // * A base pointer is definitely needed when there are both VLAs and local; // variables with more-than-default alignment requirements.; // * A frame pointer is definitely needed when there are local variables with; // more-than-default alignment requirements.; //; // For Darwin platforms the frame-record (fp, lr) is stored at the top of the; // callee-saved area, since the unwind encoding does not allow for encoding; // this dynamically and existing tools depend on this layout. For other; // platforms, the frame-record is stored at the bottom of the (gpr) callee-saved; // area to allow SVE stack objects (allocated directly below the callee-saves,; // if available) to be accessed directly from the framepointer.; // The SVE spill/fill instructions have VL-scaled addressing modes such; // as:; // ldr z8, [fp, #-7 mul vl]; // For SVE the size of the vector length (VL) is not known at compile-time, so; // '#-7 mul vl' is an offset that can only be evaluated at runtime. With this; // layout, we don't need to add an unscaled offset to the framepointer before; // accessing the SVE object in the frame.; //; // In some cases when a base pointer is not strictly needed, it is generated; // anyway when offsets from the frame pointer to access local variables become; // so large that the offset can't be encoded in the immediate fields of loads; // or stores.; //; // Outgoing function arguments must be at the bottom of the stack frame when; // calling another function. If we do not have variable-sized stack objects, we; // can allocate a ""reserved call frame"" area at the bottom of the loca",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:4373,Security,access,accessing,4373,"there are both VLAs and local; // variables with more-than-default alignment requirements.; // * A frame pointer is definitely needed when there are local variables with; // more-than-default alignment requirements.; //; // For Darwin platforms the frame-record (fp, lr) is stored at the top of the; // callee-saved area, since the unwind encoding does not allow for encoding; // this dynamically and existing tools depend on this layout. For other; // platforms, the frame-record is stored at the bottom of the (gpr) callee-saved; // area to allow SVE stack objects (allocated directly below the callee-saves,; // if available) to be accessed directly from the framepointer.; // The SVE spill/fill instructions have VL-scaled addressing modes such; // as:; // ldr z8, [fp, #-7 mul vl]; // For SVE the size of the vector length (VL) is not known at compile-time, so; // '#-7 mul vl' is an offset that can only be evaluated at runtime. With this; // layout, we don't need to add an unscaled offset to the framepointer before; // accessing the SVE object in the frame.; //; // In some cases when a base pointer is not strictly needed, it is generated; // anyway when offsets from the frame pointer to access local variables become; // so large that the offset can't be encoded in the immediate fields of loads; // or stores.; //; // Outgoing function arguments must be at the bottom of the stack frame when; // calling another function. If we do not have variable-sized stack objects, we; // can allocate a ""reserved call frame"" area at the bottom of the local; // variable area, large enough for all outgoing calls. If we do have VLAs, then; // the stack pointer must be decremented and incremented around each call to; // make space for the arguments below the VLAs.; //; // FIXME: also explain the redzone concept.; //; // An example of the prologue:; //; // .globl __foo; // .align 2; // __foo:; // Ltmp0:; // .cfi_startproc; // .cfi_personality 155, ___gxx_personality_v0; // Leh_func_begin:; // .",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:4544,Security,access,access,4544,"ignment requirements.; //; // For Darwin platforms the frame-record (fp, lr) is stored at the top of the; // callee-saved area, since the unwind encoding does not allow for encoding; // this dynamically and existing tools depend on this layout. For other; // platforms, the frame-record is stored at the bottom of the (gpr) callee-saved; // area to allow SVE stack objects (allocated directly below the callee-saves,; // if available) to be accessed directly from the framepointer.; // The SVE spill/fill instructions have VL-scaled addressing modes such; // as:; // ldr z8, [fp, #-7 mul vl]; // For SVE the size of the vector length (VL) is not known at compile-time, so; // '#-7 mul vl' is an offset that can only be evaluated at runtime. With this; // layout, we don't need to add an unscaled offset to the framepointer before; // accessing the SVE object in the frame.; //; // In some cases when a base pointer is not strictly needed, it is generated; // anyway when offsets from the frame pointer to access local variables become; // so large that the offset can't be encoded in the immediate fields of loads; // or stores.; //; // Outgoing function arguments must be at the bottom of the stack frame when; // calling another function. If we do not have variable-sized stack objects, we; // can allocate a ""reserved call frame"" area at the bottom of the local; // variable area, large enough for all outgoing calls. If we do have VLAs, then; // the stack pointer must be decremented and incremented around each call to; // make space for the arguments below the VLAs.; //; // FIXME: also explain the redzone concept.; //; // An example of the prologue:; //; // .globl __foo; // .align 2; // __foo:; // Ltmp0:; // .cfi_startproc; // .cfi_personality 155, ___gxx_personality_v0; // Leh_func_begin:; // .cfi_lsda 16, Lexception33; //; // stp xa,bx, [sp, -#offset]!; // ...; // stp x28, x27, [sp, #offset-32]; // stp fp, lr, [sp, #offset-16]; // add fp, sp, #offset - 16; // sub sp, sp, #1360; //; /",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:139,Integrability,inject,injected,139,"/// Returns true if a homogeneous prolog or epilog code can be emitted; /// for the size optimization. If possible, a frame helper call is injected.; /// When Exit block is given, this check is for epilog.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:89,Performance,optimiz,optimization,89,"/// Returns true if a homogeneous prolog or epilog code can be emitted; /// for the size optimization. If possible, a frame helper call is injected.; /// When Exit block is given, this check is for epilog.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:139,Security,inject,injected,139,"/// Returns true if a homogeneous prolog or epilog code can be emitted; /// for the size optimization. If possible, a frame helper call is injected.; /// When Exit block is given, this check is for epilog.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:49,Usability,simpl,simplicity,49,// Bail on stack adjustment needed on return for simplicity.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:207,Performance,load,loads,207,"/// This is the biggest offset to the stack pointer we can encode in aarch64; /// instructions (without using a separate calculation and a temp register).; /// Note that the exception here are vector stores/loads which cannot encode any; /// displacements (see estimateRSStackSizeLimit(), isAArch64FrameOffsetLegal()).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:47,Energy Efficiency,allocate,allocated,47,/// Returns the size of the fixed object area (allocated next to sp on entry); /// On Win64 this may include a var args area and an UnwindHelp object for EH.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:29,Energy Efficiency,allocate,allocate,29,// To support EH funclets we allocate an UnwindHelp object,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:84,Security,access,accessed,84,"// Win64 EH requires a frame pointer if funclets are present, as the locals; // are accessed off the frame pointer in both the parent function and the; // funclets.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:57,Security,access,access,57,"// With large callframes around we may need to use FP to access the scavenging; // emergency spillslot.; //; // Unfortunately some calls to hasFP() like machine verifier ->; // getReservedReg() -> hasFP in the middle of global isel are too early; // to know the max call frame size. Hopefully conservatively returning ""true""; // in those cases is fine.; // DefaultSafeSPDisplacement is fine as we only emergency spill GP regs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:46,Energy Efficiency,allocate,allocated,46,"// The stack probing code for the dynamically allocated outgoing arguments; // area assumes that the stack is probed at the top - either by the prologue; // code, which issues a probe if `hasVarSizedObjects` return true, or by the; // most recent variable-sized object allocation. Changing the condition here; // may need to be followed up by changes to the probe issuing logic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:247,Modifiability,variab,variable-sized,247,"// The stack probing code for the dynamically allocated outgoing arguments; // area assumes that the stack is probed at the top - either by the prologue; // code, which issues a probe if `hasVarSizedObjects` return true, or by the; // most recent variable-sized object allocation. Changing the condition here; // may need to be followed up by changes to the probe issuing logic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:372,Testability,log,logic,372,"// The stack probing code for the dynamically allocated outgoing arguments; // area assumes that the stack is probed at the top - either by the prologue; // code, which issues a probe if `hasVarSizedObjects` return true, or by the; // most recent variable-sized object allocation. Changing the condition here; // may need to be followed up by changes to the probe issuing logic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:124,Availability,avail,available,124,"// FIXME: in-function stack adjustment for calls is limited to 24-bits; // because there's no guaranteed temporary register available.; //; // ADD/SUB (immediate) has only LSL #0 and LSL #12 available.; // 1) For offset <= 12-bit, we use LSL #0; // 2) For 12-bit <= offset <= 24-bit, we use two instructions. One uses; // LSL #0, and the other uses LSL #12.; //; // Most call frames will be allocated at the start of a function so; // this is OK, but it is a limitation that needs dealing with.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:191,Availability,avail,available,191,"// FIXME: in-function stack adjustment for calls is limited to 24-bits; // because there's no guaranteed temporary register available.; //; // ADD/SUB (immediate) has only LSL #0 and LSL #12 available.; // 1) For offset <= 12-bit, we use LSL #0; // 2) For 12-bit <= offset <= 24-bit, we use two instructions. One uses; // LSL #0, and the other uses LSL #12.; //; // Most call frames will be allocated at the start of a function so; // this is OK, but it is a limitation that needs dealing with.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:391,Energy Efficiency,allocate,allocated,391,"// FIXME: in-function stack adjustment for calls is limited to 24-bits; // because there's no guaranteed temporary register available.; //; // ADD/SUB (immediate) has only LSL #0 and LSL #12 available.; // 1) For offset <= 12-bit, we use LSL #0; // 2) For 12-bit <= offset <= 24-bit, we use two instructions. One uses; // LSL #0, and the other uses LSL #12.; //; // Most call frames will be allocated at the start of a function so; // this is OK, but it is a limitation that needs dealing with.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:155,Energy Efficiency,efficient,efficient,155,"//; // Stack probing allocation.; //; // Fixed length allocation. If we don't need to re-align the stack and don't; // have SVE objects, we can use a more efficient sequence for stack probing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:127,Modifiability,variab,variable-sized,127,"// The fixed allocation may leave unprobed bytes at the top of the; // stack. If we have subsequent alocation (e.g. if we have variable-sized; // objects), we need to issue an extra probe, so these allocations start in; // a known state.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:3,Modifiability,Variab,Variable,3,"// Variable length allocation.; // If the (unknown) allocation size cannot exceed the probe size, decrement; // the stack pointer right away.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:10,Modifiability,variab,variable-length,10,"// Emit a variable-length allocation probing loop.; // TODO: As an optimisation, the loop can be ""unrolled"" into a few parts,; // each of them guaranteed to adjust the stack by less than the probe size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:14,Integrability,rout,routine,14,// The called routine is expected to preserve r19-r28; // r29 and r30 are used as frame pointer and link register resp.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:29,Usability,clear,clear,29,"// For GPRs, we only care to clear out the 64-bit register.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:242,Integrability,wrap,wrapping,242,"// Find a scratch register that we can use at the start of the prologue to; // re-align the stack pointer. We avoid using callee-save registers since they; // may appear to be free when this is called from canUseAsPrologue (during; // shrink wrapping), but then no longer be free when this is called from; // emitPrologue.; //; // FIXME: This is a bit conservative, since in the above case we could use one; // of the callee-save registers as a scratch temp to re-align the stack pointer,; // but we would then have to make sure that we were in fact saving at least one; // callee-save register in the prologue, which is additional complexity that; // doesn't seem worth the benefit.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:110,Safety,avoid,avoid,110,"// Find a scratch register that we can use at the start of the prologue to; // re-align the stack pointer. We avoid using callee-save registers since they; // may appear to be free when this is called from canUseAsPrologue (during; // shrink wrapping), but then no longer be free when this is called from; // emitPrologue.; //; // FIXME: This is a bit conservative, since in the above case we could use one; // of the callee-save registers as a scratch temp to re-align the stack pointer,; // but we would then have to make sure that we were in fact saving at least one; // callee-save register in the prologue, which is additional complexity that; // doesn't seem worth the benefit.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:75,Availability,avail,available,75,// The StoreSwiftAsyncContext clobbers X16 and X17. Make sure they are; // available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:76,Availability,avail,available,76,"// Otherwise, we can use any block as long as it has a scratch register; // available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:449,Energy Efficiency,reduce,reduces,449,"// For WinCFI, if optimizing for size, prefer to not combine the stack bump; // (to force a stp with predecrement) to match the packed unwind format,; // provided that there actually are any callee saved registers to merge the; // decrement with.; // This is potentially marginally slower, but allows using the packed; // unwind format for functions that both have a local area and callee saved; // registers. Using the packed unwind format notably reduces the size of; // the unwind info.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:18,Performance,optimiz,optimizing,18,"// For WinCFI, if optimizing for size, prefer to not combine the stack bump; // (to force a stp with predecrement) to match the packed unwind format,; // provided that there actually are any callee saved registers to merge the; // decrement with.; // This is potentially marginally slower, but allows using the packed; // unwind format for functions that both have a local area and callee saved; // registers. Using the packed unwind format notably reduces the size of; // the unwind info.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:41,Usability,simpl,simplifies,41,"// This isn't strictly necessary, but it simplifies things a bit since the; // current RedZone handling code assumes the SP is adjusted by the; // callee-save save/restore code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:50,Energy Efficiency,allocate,allocate,50,"// When there is an SVE area on the stack, always allocate the; // callee-saves and spills/locals separately.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:11,Performance,load,load,11,"// Given a load or a store instruction, generate an appropriate unwinding SEH; // code on Windows.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:104,Energy Efficiency,allocate,allocate,104,// Convert callee-save register save/restore instruction to do stack pointer; // decrement/increment to allocate/deallocate the callee-save stack area by; // converting store/load to use pre/post increment version.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:175,Performance,load,load,175,// Convert callee-save register save/restore instruction to do stack pointer; // decrement/increment to allocate/deallocate the callee-save stack area by; // converting store/load to use pre/post increment version.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:78,Deployability,update,update,78,// If the first store isn't right where we want SP then we can't fold the; // update in so create a normal arithmetic instruction instead.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:37,Modifiability,extend,extended,37,"// We signal the presence of a Swift extended frame to external tools by; // storing FP with 0b0001 in bits 63:60. In normal userland operation a simple; // ORR is sufficient, it is assumed a Swift kernel would initialize the TBI; // bits so that is still true.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:146,Usability,simpl,simple,146,"// We signal the presence of a Swift extended frame to external tools by; // storing FP with 0b0001 in bits 63:60. In normal userland operation a simple; // ORR is sufficient, it is assumed a Swift kernel would initialize the TBI; // bits so that is still true.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:119,Modifiability,extend,extended,119,// The special symbol below is absolute and has a *value* that can be; // combined with the frame pointer to signal an extended frame.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:161,Energy Efficiency,allocate,allocated,161,"// getStackSize() includes all the locals in its size calculation. We don't; // include these locals when computing the stack size of a funclet, as they; // are allocated in the parent's stack frame and accessed via the frame; // pointer from the funclet. We only save the callee saved registers in the; // funclet, which are really the callee saved registers of the parent; // function, including the funclet.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:203,Security,access,accessed,203,"// getStackSize() includes all the locals in its size calculation. We don't; // include these locals when computing the stack size of a funclet, as they; // are allocated in the parent's stack frame and accessed via the frame; // pointer from the funclet. We only save the callee saved registers in the; // funclet, which are really the callee saved registers of the parent; // function, including the funclet.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:84,Energy Efficiency,allocate,allocate,84,"// REDZONE: If the stack size is less than 128 bytes, we don't need; // to actually allocate.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:13,Deployability,update,update,13,"// Before we update the live FP we have to ensure there's a valid (or; // null) asynchronous context in its slot just before FP in the frame; // record, so store it now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:72,Energy Efficiency,allocate,allocated,72,// Process the SVE callee-saves to determine what space needs to be; // allocated.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:3,Energy Efficiency,Allocate,Allocate,3,// Allocate space for the callee saves (if any).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:3,Energy Efficiency,Allocate,Allocate,3,// Allocate space for the rest of the frame including SVE locals. Align the; // stack as necessary.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:147,Energy Efficiency,allocate,allocated,147,"// If we need a base pointer, set it up here. It's whatever the value of the; // stack pointer is at this point. Any variable size objects will be allocated; // after this, so we can still use the base pointer to reference locals.; //; // FIXME: Clarify FrameSetup flags here.; // Note: Use emitFrameOffset() like above for FP if the FrameSetup flag is; // needed.; // For funclets the BP belongs to the containing function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:117,Modifiability,variab,variable,117,"// If we need a base pointer, set it up here. It's whatever the value of the; // stack pointer is at this point. Any variable size objects will be allocated; // after this, so we can still use the base pointer to reference locals.; //; // FIXME: Clarify FrameSetup flags here.; // Note: Use emitFrameOffset() like above for FP if the FrameSetup flag is; // needed.; // For funclets the BP belongs to the containing function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:73,Energy Efficiency,allocate,allocate,73,"// If the offset is 0 and the AfterCSR pop is not actually trying to; // allocate more stack for arguments (in space that an untimely interrupt; // may clobber), convert it to a post-index ldp.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:293,Safety,avoid,avoid,293,"// Note that there are cases where we insert SEH opcodes in the; // epilogue when we had no SEH opcodes in the prologue. For; // example, when there is no stack frame but there are stack; // arguments. Insert the SEH_EpilogStart and remove it later if it; // we didn't emit any SEH opcodes to avoid generating WinCFI for; // functions that don't need it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:3,Safety,Avoid,Avoid,3,"// Avoid the reload as it is GOT relative, and instead fall back to the; // hardcoded value below. This allows a mismatch between the OS and; // application without immediately terminating on the difference.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:112,Modifiability,extend,extended,112,"// We need to reset FP to its untagged state on return. Bit 60 is; // currently used to show the presence of an extended frame.; // BIC x29, x29, #0x1000_0000_0000_0000",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:27,Deployability,update,update,27,"// If there is a single SP update, insert it before the ret and we're done.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:35,Modifiability,variab,variable,35,"// If we have stack realignment or variable sized objects on the stack,; // restore the stack pointer from the frame pointer prior to SVE CSR; // restoration.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:17,Modifiability,variab,variables,17,"// Pop the local variables off the stack. If there are no callee-saved; // registers, it means we are actually positioned at the terminator and can; // combine stack increment for the locals and the stack increment for; // callee-popped arguments into (possibly) a single instruction and be done.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:131,Performance,load,loads,131,"// Restore the original stack pointer.; // FIXME: Rather than doing the math here, we should instead just use; // non-post-indexed loads for the restores if we aren't actually going to; // be able to save any instructions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:243,Usability,simpl,simple,243,/// getFrameIndexReference - Provide a base+offset reference to an FI slot for; /// debug info. It's the same as what we use for resolving the code-gen; /// references for now. FIXME: This can go wrong when references are; /// SP-relative and simple call frames aren't used.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:51,Performance,scalab,scalable,51,// TODO: This function currently does not work for scalable vectors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:146,Availability,reliab,reliable,146,// Use frame pointer to reference fixed objects. Use it for locals if; // there are VLAs or a dynamically realigned SP (and thus the SP isn't; // reliable as a base). Make sure useFPForScavengingIndex() does the; // right thing for the emergency spill slot.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:91,Performance,scalab,scalable,91,// We shouldn't prefer using the FP to access fixed-sized stack objects when; // there are scalable (SVE) objects in between the FP and the fixed-sized; // objects.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:39,Security,access,access,39,// We shouldn't prefer using the FP to access fixed-sized stack objects when; // there are scalable (SVE) objects in between the FP and the fixed-sized; // objects.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:140,Security,access,access,140,// Note: Keeping the following as multiple 'if' statements rather than; // merging to a single expression for readability.; //; // Argument access should always use the FP.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:108,Availability,avail,available,108,"// If the FPOffset is negative and we're producing a signed immediate, we; // have to keep in mind that the available offset range for negative; // offsets is smaller than for positive ones. If an offset is available; // via the FP and the SP, use whichever is closest.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:207,Availability,avail,available,207,"// If the FPOffset is negative and we're producing a signed immediate, we; // have to keep in mind that the available offset range for negative; // offsets is smaller than for positive ones. If an offset is available; // via the FP and the SP, use whichever is closest.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:14,Modifiability,variab,variable,14,"// If we have variable sized objects, we can use either FP or BP, as the; // SP offset is unknown. We can use the base pointer if we have one and; // FP is not preferred. If not, we're stuck with using FP.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:127,Safety,avoid,avoid,127,"// else we can use BP and FP, but the offset from FP won't fit.; // That will make us scavenge registers which we can probably avoid by; // using BP. If it won't fit for BP either, we'll scavenge anyway.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:96,Security,access,access,96,"// Use SP or FP, whichever gives us the best chance of the offset; // being in range for direct access. If the FPOffset is positive,; // that'll always be best, as the SP will be even further away.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:12,Security,access,access,12,"// Funclets access the locals contained in the parent's stack frame; // via the frame pointer, so we have to use the FP in the parent; // function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:39,Availability,avail,available,39,// Always use the FP for SVE spills if available and beneficial.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:178,Energy Efficiency,allocate,allocated,178,/// Returns true if Reg1 and Reg2 cannot be paired using a ldp/stp instruction.; /// WindowsCFI requires that only consecutive registers can be paired.; /// LR and FP need to be allocated together when the frame needs to save; /// the frame-record. This means any other register pairing with LR is invalid.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:67,Integrability,wrap,wraparound,67,"// When iterating backwards, the loop condition relies on unsigned wraparound.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:175,Testability,Assert,Assert,175,"// GPRs and FPRs are saved in pairs of 64-bit regs. We expect the CSI; // list to come in sorted by frame index so that we can issue the store; // pair instructions directly. Assert if we see anything otherwise.; //; // The order of the registers in the list is controlled by; // getCalleeSavedRegs(), so they will always be in-order, as well.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:51,Energy Efficiency,allocate,allocate,51,"// Swift's async context is directly before FP, so allocate an extra; // 8 bytes for it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:18,Availability,down,down,18,"// If filling top down (default), we want the offset after incrementing it.; // If filling bottom up (WinCFI) we need the original offset.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:254,Availability,down,down,254,"// If we need an alignment gap in the stack, align the topmost stack; // object. A stack frame with a gap looks like this, bottom up:; // x19, d8. d9, gap.; // Set extra alignment on the topmost stack object (the first element in; // CSI, which goes top down), to create the gap above it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:75,Availability,down,down,75,// We iterated bottom up over the registers; flip RegPairs back to top; // down order.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:3,Deployability,Update,Update,3,// Update register live in.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:405,Deployability,update,updates,405,"// Issue sequence of spills for cs regs. The first spill may be converted; // to a pre-decrement store later by emitPrologue if the callee-save stack; // area allocation can't be combined with the local stack area allocation.; // For example:; // stp x22, x21, [sp, #0] // addImm(+0); // stp x20, x19, [sp, #16] // addImm(+2); // stp fp, lr, [sp, #32] // addImm(+4); // Rationale: This sequence saves uop updates compared to a sequence of; // pre-increment spills like stp xi,xj,[sp,#-16]!; // Note: Similar rationale and sequence for restores in epilog.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:3,Deployability,Update,Update,3,// Update the StackIDs of the SVE stack slots.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:101,Performance,load,load,101,"// Issue sequence of restores for cs regs. The last restore may be converted; // to a post-increment load later by emitEpilogue if the callee-save stack; // area allocation can't be combined with the local stack area allocation.; // For example:; // ldp fp, lr, [sp, #32] // addImm(+4); // ldp x20, x19, [sp, #16] // addImm(+2); // ldp x22, x21, [sp, #0] // addImm(+0); // Note: see comment in spillCalleeSavedRegisters()",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:47,Deployability,update,update,47,"// Save number of saved regs, so we can easily update CSStackSize later.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:37,Energy Efficiency,allocate,allocated,37,"// The CSR spill slots have not been allocated yet, so estimateStackSize; // won't include them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:32,Modifiability,extend,extends,32,// A Swift asynchronous context extends the frame record with a pointer; // directly before FP.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:42,Safety,avoid,avoid,42,// Round up to register pair alignment to avoid additional SP adjustment; // instructions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:218,Availability,down,down,218,"// To match the canonical windows frame layout, reverse the list of; // callee saved registers to get them laid out by PrologEpilogInserter; // in the right order. (PrologEpilogInserter allocates stack objects top; // down. Windows canonical prologs store higher numbered registers at; // the top, thus have the CSI array start from the highest registers.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:186,Energy Efficiency,allocate,allocates,186,"// To match the canonical windows frame layout, reverse the list of; // callee saved registers to get them laid out by PrologEpilogInserter; // in the right order. (PrologEpilogInserter allocates stack objects top; // down. Windows canonical prologs store higher numbered registers at; // the top, thus have the CSI array start from the highest registers.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:125,Energy Efficiency,allocate,allocate,125,"// Early exit if no callee saved registers are modified!; // Now that we know which registers need to be saved and restored, allocate; // stack slots for them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:33,Modifiability,extend,extended,33,// Grab 8 bytes below FP for the extended asynchronous frame info.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:37,Energy Efficiency,allocate,allocate,37,// Create a buffer of SVE objects to allocate and sort it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:3,Energy Efficiency,Allocate,Allocate,3,// Allocate all SVE locals and spills,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:68,Energy Efficiency,power,power,68,"// FIXME: Given that the length of SVE vectors is not necessarily a power of; // two, we'd need to align every object dynamically at runtime if the; // alignment is larger than 16. This is not yet supported.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:61,Energy Efficiency,allocate,allocated,61,// Create an UnwindHelp object.; // The UnwindHelp object is allocated at the start of the fixed object area,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:104,Deployability,update,update,104,"// If the loop size is not a multiple of 32, split off one 16-byte store at; // the end to fold BaseReg update into.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:36,Deployability,update,update,36,// Tag 16 more bytes at BaseReg and update BaseReg.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:3,Deployability,Update,Update,3,// Update BaseReg.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:30,Deployability,update,update,30,// Check if *II is a register update that can be merged into STGloop that ends; // at (Reg + Size). RemainingOffset is the required adjustment to Reg after the; // end of the loop.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:46,Security,access,access,46,// An instruction without memory operands may access anything. Be; // conservative and return an empty list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:37,Deployability,update,update,37,"// See if we can merge base register update into the STGloop.; // This is done in AArch64LoadStoreOptimizer for ""normal"" stores,; // but STGloop is way too unusual for that, and also it only; // realistically happens in function epilogue. Also, STGloop is expanded; // before that pass.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:3,Safety,Detect,Detect,3,"// Detect a run of memory tagging instructions for adjacent stack frame slots,; // and replace them with a shorter instruction sequence:; // * replace STG + STG with ST2G; // * replace STGloop + STGloop with STGloop; // This code needs to run when stack slot offsets are already known, but before; // FrameIndex operands in STG instructions are eliminated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:29,Deployability,update,update,29,"// Collect instructions that update memory tags with a FrameIndex operand; // and (when applicable) constant size, and whose output registers are dead; // (the latter is almost always the case in practice). Since these; // instructions effectively have no inputs or outputs, we are free to skip; // any non-aliasing instructions in between without tracking used registers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:18,Deployability,update,updates,18,// Multiple FP/SP updates in a loop cannot be described by CFI instructions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:89,Deployability,update,update,89,"/// For Win64 AArch64 EH, the offset to the Unwind object is from the SP; /// before the update. This is easily retrieved as it is exactly the offset; /// that is set in processFunctionBeforeFrameFinalized.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:50,Energy Efficiency,allocate,allocate,50,// This is the amount of stack a funclet needs to allocate.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:52,Safety,safe,safe,52,"// All invalid items are sorted at the end, so it's safe to stop.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:3,Deployability,Update,Update,3,// Update liveins.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp:110,Safety,avoid,avoid,110,// Get the instructions that need to be replaced. We emit at most two of; // these. Remember them in order to avoid complications coming from the need; // to traverse the block while potentially creating more blocks.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.h:60,Integrability,wrap,wrapping,60,/// Returns true if the target will correctly handle shrink wrapping.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.h:53,Energy Efficiency,allocate,allocated,53,// We don't support putting SVE objects into the pre-allocated local; // frame block at the moment.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.h:89,Performance,optimiz,optimization,89,"/// Returns true if a homogeneous prolog or epilog code can be emitted; /// for the size optimization. If so, HOM_Prolog/HOM_Epilog pseudo; /// instructions are emitted in place. When Exit block is given, this check is; /// for epilog.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.h:25,Testability,stub,stub,25,/// Replace a StackProbe stub (if any) with the actual probe code inline,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64FrameLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64GlobalsTagging.cpp:645,Modifiability,variab,variables,645,"// Globals can be placed implicitly or explicitly in sections. There's two; // different types of globals that meet this criteria that cause problems:; // 1. Function pointers that are going into various init arrays (either; // explicitly through `__attribute__((section(<foo>)))` or implicitly; // through `__attribute__((constructor)))`, such as "".(pre)init(_array)"",; // "".fini(_array)"", "".ctors"", and "".dtors"". These function pointers end up; // overaligned and overpadded, making iterating over them problematic, and; // each function pointer is individually tagged (so the iteration over; // them causes SIGSEGV/MTE[AS]ERR).; // 2. Global variables put into an explicit section, where the section's name; // is a valid C-style identifier. The linker emits a `__start_<name>` and; // `__stop_<na,e>` symbol for the section, so that you can iterate over; // globals within this section. Unfortunately, again, these globals would; // be tagged and so iteration causes SIGSEGV/MTE[AS]ERR.; //; // To mitigate both these cases, and because specifying a section is rare; // outside of these two cases, disable MTE protection for globals in any; // section.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64GlobalsTagging.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64GlobalsTagging.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64GlobalsTagging.cpp:725,Integrability,contract,contract,725,"// Technically, due to ELF symbol interposition semantics, we can't change the; // alignment or size of symbols. If we increase the alignment or size of a; // symbol, the compiler may make optimisations based on this new alignment or; // size. If the symbol is interposed, this optimisation could lead to; // alignment-related or OOB read/write crashes.; //; // This is handled in the linker. When the linker sees multiple declarations of; // a global variable, and some are tagged, and some are untagged, it resolves it; // to be an untagged definition - but preserves the tag-granule-rounded size and; // tag-granule-alignment. This should prevent these kind of crashes intra-DSO.; // For cross-DSO, it's been a reasonable contract that if you're interposing a; // sanitizer-instrumented global, then the interposer also needs to be; // sanitizer-instrumented.; //; // FIXME: In theory, this can be fixed by splitting the size/alignment of; // globals into two uses: an ""output alignment"" that's emitted to the ELF file,; // and an ""optimisation alignment"" that's used for optimisation. Thus, we could; // adjust the output alignment only, and still optimise based on the pessimistic; // pre-tagging size/alignment.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64GlobalsTagging.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64GlobalsTagging.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64GlobalsTagging.cpp:452,Modifiability,variab,variable,452,"// Technically, due to ELF symbol interposition semantics, we can't change the; // alignment or size of symbols. If we increase the alignment or size of a; // symbol, the compiler may make optimisations based on this new alignment or; // size. If the symbol is interposed, this optimisation could lead to; // alignment-related or OOB read/write crashes.; //; // This is handled in the linker. When the linker sees multiple declarations of; // a global variable, and some are tagged, and some are untagged, it resolves it; // to be an untagged definition - but preserves the tag-granule-rounded size and; // tag-granule-alignment. This should prevent these kind of crashes intra-DSO.; // For cross-DSO, it's been a reasonable contract that if you're interposing a; // sanitizer-instrumented global, then the interposer also needs to be; // sanitizer-instrumented.; //; // FIXME: In theory, this can be fixed by splitting the size/alignment of; // globals into two uses: an ""output alignment"" that's emitted to the ELF file,; // and an ""optimisation alignment"" that's used for optimisation. Thus, we could; // adjust the output alignment only, and still optimise based on the pessimistic; // pre-tagging size/alignment.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64GlobalsTagging.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64GlobalsTagging.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64GlobalsTagging.cpp:767,Security,sanitiz,sanitizer-instrumented,767,"// Technically, due to ELF symbol interposition semantics, we can't change the; // alignment or size of symbols. If we increase the alignment or size of a; // symbol, the compiler may make optimisations based on this new alignment or; // size. If the symbol is interposed, this optimisation could lead to; // alignment-related or OOB read/write crashes.; //; // This is handled in the linker. When the linker sees multiple declarations of; // a global variable, and some are tagged, and some are untagged, it resolves it; // to be an untagged definition - but preserves the tag-granule-rounded size and; // tag-granule-alignment. This should prevent these kind of crashes intra-DSO.; // For cross-DSO, it's been a reasonable contract that if you're interposing a; // sanitizer-instrumented global, then the interposer also needs to be; // sanitizer-instrumented.; //; // FIXME: In theory, this can be fixed by splitting the size/alignment of; // globals into two uses: an ""output alignment"" that's emitted to the ELF file,; // and an ""optimisation alignment"" that's used for optimisation. Thus, we could; // adjust the output alignment only, and still optimise based on the pessimistic; // pre-tagging size/alignment.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64GlobalsTagging.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64GlobalsTagging.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64GlobalsTagging.cpp:839,Security,sanitiz,sanitizer-instrumented,839,"// Technically, due to ELF symbol interposition semantics, we can't change the; // alignment or size of symbols. If we increase the alignment or size of a; // symbol, the compiler may make optimisations based on this new alignment or; // size. If the symbol is interposed, this optimisation could lead to; // alignment-related or OOB read/write crashes.; //; // This is handled in the linker. When the linker sees multiple declarations of; // a global variable, and some are tagged, and some are untagged, it resolves it; // to be an untagged definition - but preserves the tag-granule-rounded size and; // tag-granule-alignment. This should prevent these kind of crashes intra-DSO.; // For cross-DSO, it's been a reasonable contract that if you're interposing a; // sanitizer-instrumented global, then the interposer also needs to be; // sanitizer-instrumented.; //; // FIXME: In theory, this can be fixed by splitting the size/alignment of; // globals into two uses: an ""output alignment"" that's emitted to the ELF file,; // and an ""optimisation alignment"" that's used for optimisation. Thus, we could; // adjust the output alignment only, and still optimise based on the pessimistic; // pre-tagging size/alignment.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64GlobalsTagging.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64GlobalsTagging.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:142,Modifiability,variab,variable,142,// Size should be preferably set in; // llvm/lib/Target/AArch64/AArch64InstrInfo.td (default case).; // Specific cases handle instructions of variable sizes,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:19,Deployability,patch,patchpoint,19,// The size of the patchpoint intrinsic is the number of bytes requested,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:6,Deployability,patch,patch,6,// No patch bytes means a normal call inst is emitted,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:7,Deployability,patch,patchable-function-entry,7,"// If `patchable-function-entry` is set, PATCHABLE_FUNCTION_ENTER; // instructions are expanded to the specified number of NOPs. Otherwise,; // they are expanded to 36-byte XRay sleds.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:91,Usability,simpl,simply,91,"// If we're allowed to modify and the block ends in a unconditional branch; // which could simply fallthrough, remove the branch. (Note: This case only; // matters when we can't understand the whole sequence, otherwise it's also; // handled by BranchFolding.cpp.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:65,Performance,optimiz,optimize,65,"// Also need to check the dest regclass, in case we're trying to optimize; // something like:; // %1(gpr) = PHI %2(fpr), bb1, %(fpr), bb2",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:48,Performance,latency,latency,48,// Expanding cbz/tbz requires an extra cycle of latency on the condition.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:15,Usability,simpl,simple,15,// Try folding simple instructions into the csel.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:7,Modifiability,extend,extends,7,// The extends the live range of NewVReg.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:29,Performance,load,loaded,29,"// Return true if Imm can be loaded into a register by a ""cheap"" sequence of; // instructions. For now, ""cheap"" means at most two instructions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:59,Integrability,depend,dependent,59,"// FIXME: this implementation should be micro-architecture dependent, so a; // micro-architecture target hook should be introduced here in future.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:7,Usability,ux,uxtw,7,"// aka uxtw; // Check for the 32 -> 64 bit extension case, these instructions can do; // much more.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:100,Performance,load,loaded,100,"// Retrieve the base, offset from the base and width. Width; // is the size of memory that is being loaded/stored (e.g. 1, 2, 4, 8). If; // base are identical, and the offset of a lower memory access +; // the width doesn't overlap the offset of a higher memory access,; // then the memory accesses are different.; // If OffsetAIsScalable and OffsetBIsScalable are both true, they; // are assumed to have the same scale (vscale).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:193,Security,access,access,193,"// Retrieve the base, offset from the base and width. Width; // is the size of memory that is being loaded/stored (e.g. 1, 2, 4, 8). If; // base are identical, and the offset of a lower memory access +; // the width doesn't overlap the offset of a higher memory access,; // then the memory accesses are different.; // If OffsetAIsScalable and OffsetBIsScalable are both true, they; // are assumed to have the same scale (vscale).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:262,Security,access,access,262,"// Retrieve the base, offset from the base and width. Width; // is the size of memory that is being loaded/stored (e.g. 1, 2, 4, 8). If; // base are identical, and the offset of a lower memory access +; // the width doesn't overlap the offset of a higher memory access,; // then the memory accesses are different.; // If OffsetAIsScalable and OffsetBIsScalable are both true, they; // are assumed to have the same scale (vscale).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:290,Security,access,accesses,290,"// Retrieve the base, offset from the base and width. Width; // is the size of memory that is being loaded/stored (e.g. 1, 2, 4, 8). If; // base are identical, and the offset of a lower memory access +; // the width doesn't overlap the offset of a higher memory access,; // then the memory accesses are different.; // If OffsetAIsScalable and OffsetBIsScalable are both true, they; // are assumed to have the same scale (vscale).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:18,Energy Efficiency,schedul,scheduling,18,// CSDB hints are scheduling barriers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:24,Energy Efficiency,schedul,scheduling,24,// DSB and ISB also are scheduling barriers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:31,Energy Efficiency,schedul,scheduling,31,// SMSTART and SMSTOP are also scheduling barriers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:22,Availability,mask,mask,22,// Not sure about the mask and value for now...,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:34,Security,access,accessed,34,/// True when condition flags are accessed (either by writing or reading); /// on the instruction trace starting at From and ending at To.; ///; /// Note: If From and To are from different blocks it's assumed CC are accessed; /// on the path.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:216,Security,access,accessed,216,/// True when condition flags are accessed (either by writing or reading); /// on the instruction trace starting at From and ending at To.; ///; /// Note: If From and To are from different blocks it's assumed CC are accessed; /// on the path.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:4,Performance,optimiz,optimizePTestInstr,4,/// optimizePTestInstr - Attempt to remove a ptest of a predicate-generating; /// operation which could set the flags in an identical manner,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:78,Availability,redundant,redundant,78,"// For PTEST(PTRUE_ALL, WHILE), if the element size matches, the PTEST is; // redundant since WHILE performs an implicit PTEST with an all active; // mask. Must be an all active predicate of matching element size.; // For PTEST(PTRUE_ALL, PTEST_LIKE), the PTEST is redundant if the; // PTEST_LIKE instruction uses the same all active mask and the element; // size matches. If the PTEST has a condition of any then it is always; // redundant.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:150,Availability,mask,mask,150,"// For PTEST(PTRUE_ALL, WHILE), if the element size matches, the PTEST is; // redundant since WHILE performs an implicit PTEST with an all active; // mask. Must be an all active predicate of matching element size.; // For PTEST(PTRUE_ALL, PTEST_LIKE), the PTEST is redundant if the; // PTEST_LIKE instruction uses the same all active mask and the element; // size matches. If the PTEST has a condition of any then it is always; // redundant.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:265,Availability,redundant,redundant,265,"// For PTEST(PTRUE_ALL, WHILE), if the element size matches, the PTEST is; // redundant since WHILE performs an implicit PTEST with an all active; // mask. Must be an all active predicate of matching element size.; // For PTEST(PTRUE_ALL, PTEST_LIKE), the PTEST is redundant if the; // PTEST_LIKE instruction uses the same all active mask and the element; // size matches. If the PTEST has a condition of any then it is always; // redundant.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:334,Availability,mask,mask,334,"// For PTEST(PTRUE_ALL, WHILE), if the element size matches, the PTEST is; // redundant since WHILE performs an implicit PTEST with an all active; // mask. Must be an all active predicate of matching element size.; // For PTEST(PTRUE_ALL, PTEST_LIKE), the PTEST is redundant if the; // PTEST_LIKE instruction uses the same all active mask and the element; // size matches. If the PTEST has a condition of any then it is always; // redundant.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:431,Availability,redundant,redundant,431,"// For PTEST(PTRUE_ALL, WHILE), if the element size matches, the PTEST is; // redundant since WHILE performs an implicit PTEST with an all active; // mask. Must be an all active predicate of matching element size.; // For PTEST(PTRUE_ALL, PTEST_LIKE), the PTEST is redundant if the; // PTEST_LIKE instruction uses the same all active mask and the element; // size matches. If the PTEST has a condition of any then it is always; // redundant.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:100,Performance,perform,performs,100,"// For PTEST(PTRUE_ALL, WHILE), if the element size matches, the PTEST is; // redundant since WHILE performs an implicit PTEST with an all active; // mask. Must be an all active predicate of matching element size.; // For PTEST(PTRUE_ALL, PTEST_LIKE), the PTEST is redundant if the; // PTEST_LIKE instruction uses the same all active mask and the element; // size matches. If the PTEST has a condition of any then it is always; // redundant.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:78,Safety,redund,redundant,78,"// For PTEST(PTRUE_ALL, WHILE), if the element size matches, the PTEST is; // redundant since WHILE performs an implicit PTEST with an all active; // mask. Must be an all active predicate of matching element size.; // For PTEST(PTRUE_ALL, PTEST_LIKE), the PTEST is redundant if the; // PTEST_LIKE instruction uses the same all active mask and the element; // size matches. If the PTEST has a condition of any then it is always; // redundant.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:265,Safety,redund,redundant,265,"// For PTEST(PTRUE_ALL, WHILE), if the element size matches, the PTEST is; // redundant since WHILE performs an implicit PTEST with an all active; // mask. Must be an all active predicate of matching element size.; // For PTEST(PTRUE_ALL, PTEST_LIKE), the PTEST is redundant if the; // PTEST_LIKE instruction uses the same all active mask and the element; // size matches. If the PTEST has a condition of any then it is always; // redundant.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:431,Safety,redund,redundant,431,"// For PTEST(PTRUE_ALL, WHILE), if the element size matches, the PTEST is; // redundant since WHILE performs an implicit PTEST with an all active; // mask. Must be an all active predicate of matching element size.; // For PTEST(PTRUE_ALL, PTEST_LIKE), the PTEST is redundant if the; // PTEST_LIKE instruction uses the same all active mask and the element; // size matches. If the PTEST has a condition of any then it is always; // redundant.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:17,Usability,simpl,simply,17,// Fallthough to simply remove the PTEST.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:31,Availability,redundant,redundant,31,"// For PTEST(PG, PG), PTEST is redundant when PG is the result of an; // instruction that sets the flags as PTEST would. This is only valid when; // the condition is any.; // Fallthough to simply remove the PTEST.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:31,Safety,redund,redundant,31,"// For PTEST(PG, PG), PTEST is redundant when PG is the result of an; // instruction that sets the flags as PTEST would. This is only valid when; // the condition is any.; // Fallthough to simply remove the PTEST.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:189,Usability,simpl,simply,189,"// For PTEST(PG, PG), PTEST is redundant when PG is the result of an; // instruction that sets the flags as PTEST would. This is only valid when; // the condition is any.; // Fallthough to simply remove the PTEST.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:52,Availability,redundant,redundant,52,"// For PTEST(PG, PTEST_LIKE(PG, ...)), the PTEST is redundant since the; // flags are set based on the same mask 'PG', but PTEST_LIKE must operate; // on 8-bit predicates like the PTEST. Otherwise, for instructions like; // compare that also support 16/32/64-bit predicates, the implicit PTEST; // performed by the compare could consider fewer lanes for these element; // sizes.; //; // For example, consider; //; // ptrue p0.b ; P0=1111-1111-1111-1111; // index z0.s, #0, #1 ; Z0=<0,1,2,3>; // index z1.s, #1, #1 ; Z1=<1,2,3,4>; // cmphi p1.s, p0/z, z1.s, z0.s ; P1=0001-0001-0001-0001; // ; ^ last active; // ptest p0, p1.b ; P1=0001-0001-0001-0001; // ; ^ last active; //; // where the compare generates a canonical all active 32-bit predicate; // (equivalent to 'ptrue p1.s, all'). The implicit PTEST sets the last; // active flag, whereas the PTEST instruction with the same mask doesn't.; // For PTEST_ANY this doesn't apply as the flags in this case would be; // identical regardless of element size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:108,Availability,mask,mask,108,"// For PTEST(PG, PTEST_LIKE(PG, ...)), the PTEST is redundant since the; // flags are set based on the same mask 'PG', but PTEST_LIKE must operate; // on 8-bit predicates like the PTEST. Otherwise, for instructions like; // compare that also support 16/32/64-bit predicates, the implicit PTEST; // performed by the compare could consider fewer lanes for these element; // sizes.; //; // For example, consider; //; // ptrue p0.b ; P0=1111-1111-1111-1111; // index z0.s, #0, #1 ; Z0=<0,1,2,3>; // index z1.s, #1, #1 ; Z1=<1,2,3,4>; // cmphi p1.s, p0/z, z1.s, z0.s ; P1=0001-0001-0001-0001; // ; ^ last active; // ptest p0, p1.b ; P1=0001-0001-0001-0001; // ; ^ last active; //; // where the compare generates a canonical all active 32-bit predicate; // (equivalent to 'ptrue p1.s, all'). The implicit PTEST sets the last; // active flag, whereas the PTEST instruction with the same mask doesn't.; // For PTEST_ANY this doesn't apply as the flags in this case would be; // identical regardless of element size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:880,Availability,mask,mask,880,"// For PTEST(PG, PTEST_LIKE(PG, ...)), the PTEST is redundant since the; // flags are set based on the same mask 'PG', but PTEST_LIKE must operate; // on 8-bit predicates like the PTEST. Otherwise, for instructions like; // compare that also support 16/32/64-bit predicates, the implicit PTEST; // performed by the compare could consider fewer lanes for these element; // sizes.; //; // For example, consider; //; // ptrue p0.b ; P0=1111-1111-1111-1111; // index z0.s, #0, #1 ; Z0=<0,1,2,3>; // index z1.s, #1, #1 ; Z1=<1,2,3,4>; // cmphi p1.s, p0/z, z1.s, z0.s ; P1=0001-0001-0001-0001; // ; ^ last active; // ptest p0, p1.b ; P1=0001-0001-0001-0001; // ; ^ last active; //; // where the compare generates a canonical all active 32-bit predicate; // (equivalent to 'ptrue p1.s, all'). The implicit PTEST sets the last; // active flag, whereas the PTEST instruction with the same mask doesn't.; // For PTEST_ANY this doesn't apply as the flags in this case would be; // identical regardless of element size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:298,Performance,perform,performed,298,"// For PTEST(PG, PTEST_LIKE(PG, ...)), the PTEST is redundant since the; // flags are set based on the same mask 'PG', but PTEST_LIKE must operate; // on 8-bit predicates like the PTEST. Otherwise, for instructions like; // compare that also support 16/32/64-bit predicates, the implicit PTEST; // performed by the compare could consider fewer lanes for these element; // sizes.; //; // For example, consider; //; // ptrue p0.b ; P0=1111-1111-1111-1111; // index z0.s, #0, #1 ; Z0=<0,1,2,3>; // index z1.s, #1, #1 ; Z1=<1,2,3,4>; // cmphi p1.s, p0/z, z1.s, z0.s ; P1=0001-0001-0001-0001; // ; ^ last active; // ptest p0, p1.b ; P1=0001-0001-0001-0001; // ; ^ last active; //; // where the compare generates a canonical all active 32-bit predicate; // (equivalent to 'ptrue p1.s, all'). The implicit PTEST sets the last; // active flag, whereas the PTEST instruction with the same mask doesn't.; // For PTEST_ANY this doesn't apply as the flags in this case would be; // identical regardless of element size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:52,Safety,redund,redundant,52,"// For PTEST(PG, PTEST_LIKE(PG, ...)), the PTEST is redundant since the; // flags are set based on the same mask 'PG', but PTEST_LIKE must operate; // on 8-bit predicates like the PTEST. Otherwise, for instructions like; // compare that also support 16/32/64-bit predicates, the implicit PTEST; // performed by the compare could consider fewer lanes for these element; // sizes.; //; // For example, consider; //; // ptrue p0.b ; P0=1111-1111-1111-1111; // index z0.s, #0, #1 ; Z0=<0,1,2,3>; // index z1.s, #1, #1 ; Z1=<1,2,3,4>; // cmphi p1.s, p0/z, z1.s, z0.s ; P1=0001-0001-0001-0001; // ; ^ last active; // ptest p0, p1.b ; P1=0001-0001-0001-0001; // ; ^ last active; //; // where the compare generates a canonical all active 32-bit predicate; // (equivalent to 'ptrue p1.s, all'). The implicit PTEST sets the last; // active flag, whereas the PTEST instruction with the same mask doesn't.; // For PTEST_ANY this doesn't apply as the flags in this case would be; // identical regardless of element size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:17,Usability,simpl,simply,17,// Fallthough to simply remove the PTEST.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:105,Availability,redundant,redundant,105,"// If OP in PTEST(PG, OP(PG, ...)) has a flag-setting variant change the; // opcode so the PTEST becomes redundant.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp:105,Safety,redund,redundant,105,"// If OP in PTEST(PG, OP(PG, ...)) has a flag-setting variant change the; // opcode so the PTEST becomes redundant.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/AArch64/AArch64InstrInfo.cpp
